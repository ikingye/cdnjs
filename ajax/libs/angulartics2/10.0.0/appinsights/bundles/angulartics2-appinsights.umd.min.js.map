{"version":3,"sources":["../../../../src/lib/providers/appinsights/appinsights.ts"],"names":["this","userId","Angulartics2AppInsights","angulartics2","title","router","_this","loadStartTime","loadTime","metrics","dimensions","measurements","appInsights","console","warn","defaults","AppInsightsDefaults","settings","Object","assign","setUsername","subscribe","x","setUserProperties","prototype","startTracking","pageTrack","pipe","filterDeveloperMode","path","eventTrack","action","properties","exceptionTrack","events","filter","event","NavigationStart","startTimer","NavigationError","NavigationEnd","error","stopTimer","Date","now","trackPageView","getTitle","name","trackEvent","description","trackException","setAuthenticatedUserContext","accountId","Injectable","args","providedIn","Angulartics2","Title","Router"],"mappings":"ylBAcA,WACEA,KAAAC,OAAS,mBAYT,SAAAC,EACUC,EACAC,EACAC,GAHV,IAAAC,EAAAN,KACUA,KAAAG,aAAAA,EACAH,KAAAI,MAAAA,EACAJ,KAAAK,OAAAA,EAVVL,KAAAO,cAAwB,KACxBP,KAAAQ,SAAmB,KAEnBR,KAAAS,QAAsC,KACtCT,KAAAU,WAAyC,KACzCV,KAAAW,aAA2C,KAOd,oBAAhBC,aACTC,QAAQC,KAAK,yBAGf,IAAMC,EAAW,IAAIC,EAErBhB,KAAKG,aAAac,SAASL,YAAWM,OAAAC,OAAAD,OAAAC,OAAA,GAAQJ,GAAaf,KAAKG,aAAac,SAASL,aACtFZ,KAAKG,aAAaiB,YACfC,WAAU,SAACC,GAAc,OAAAhB,EAAKc,YAAYE,MAC7CtB,KAAKG,aAAaoB,kBACfF,WAAU,SAACC,GAAM,OAAAhB,EAAKiB,kBAAkBD,aAG7CpB,EAAAsB,UAAAC,cAAA,WAAA,IAAAnB,EAAAN,KACEA,KAAKG,aAAauB,UACfC,KAAK3B,KAAKG,aAAayB,uBACvBP,WAAU,SAACC,GAAM,OAAAhB,EAAKoB,UAAUJ,EAAEO,SACrC7B,KAAKG,aAAa2B,WACfH,KAAK3B,KAAKG,aAAayB,uBACvBP,WAAU,SAACC,GAAM,OAAAhB,EAAKwB,WAAWR,EAAES,OAAQT,EAAEU,eAChDhC,KAAKG,aAAa8B,eACfN,KAAK3B,KAAKG,aAAayB,uBACvBP,WAAU,SAACC,GAAM,OAAAhB,EAAK2B,eAAeX,MACxCtB,KAAKK,OAAO6B,OACTP,KACC3B,KAAKG,aAAayB,sBAClBO,EAAAA,QAAO,SAAAC,GAAS,OAAAA,aAAiBC,EAAAA,oBAElChB,WAAU,SAAAe,GAAS,OAAA9B,EAAKgC,gBAE3BtC,KAAKK,OAAO6B,OACTP,KAAKQ,EAAAA,QAAO,SAAAC,GAAS,OAAAA,aAAiBG,EAAAA,iBAAmBH,aAAiBI,EAAAA,kBAC1EnB,WAAU,SAAAoB,GAAS,OAAAnC,EAAKoC,gBAG7BxC,EAAAsB,UAAAc,WAAA,WACEtC,KAAKO,cAAgBoC,KAAKC,MAC1B5C,KAAKQ,SAAW,MAGlBN,EAAAsB,UAAAkB,UAAA,WACE1C,KAAKQ,SAAWmC,KAAKC,MAAQ5C,KAAKO,cAClCP,KAAKO,cAAgB,MAUvBL,EAAAsB,UAAAE,UAAA,SAAUG,GACRjB,YAAYiC,cACV7C,KAAKI,MAAM0C,WACXjB,EACA7B,KAAKU,WACLV,KAAKS,QACLT,KAAKQ,WAYTN,EAAAsB,UAAAM,WAAA,SAAWiB,EAAcf,GACvBpB,YAAYoC,WAAWD,EAAMf,EAAYhC,KAAKW,eAWhDT,EAAAsB,UAAAS,eAAA,SAAeD,GACb,IAAMiB,EAAcjB,EAAWI,OAASJ,EAAWiB,aAAejB,EAElEpB,YAAYsC,eAAeD,IAM7B/C,EAAAsB,UAAAJ,YAAA,SAAYnB,GACVD,KAAKG,aAAac,SAASL,YAAYX,OAASA,EAChDW,YAAYuC,4BAA4BlD,IAG1CC,EAAAsB,UAAAD,kBAAA,SAAkBS,GACZA,EAAW/B,SACbD,KAAKG,aAAac,SAASL,YAAYX,OAAS+B,EAAW/B,QAEzD+B,EAAWoB,UACbxC,YAAYuC,4BACVnD,KAAKG,aAAac,SAASL,YAAYX,OACvC+B,EAAWoB,WAGbxC,YAAYuC,4BACVnD,KAAKG,aAAac,SAASL,YAAYX,kMAzH9CoD,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDARjBC,EAAAA,oBATAC,EAAAA,aAKPC,EAAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport {\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n} from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\nimport { Angulartics2, AppInsightsSettings } from 'angulartics2';\n\ndeclare const appInsights: Microsoft.ApplicationInsights.IAppInsights;\n\nexport class AppInsightsDefaults implements AppInsightsSettings {\n  userId = null;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class Angulartics2AppInsights {\n  loadStartTime: number = null;\n  loadTime: number = null;\n\n  metrics: { [name: string]: number } = null;\n  dimensions: { [name: string]: string } = null;\n  measurements: { [name: string]: number } = null;\n\n  constructor(\n    private angulartics2: Angulartics2,\n    private title: Title,\n    private router: Router,\n  ) {\n    if (typeof appInsights === 'undefined') {\n      console.warn('appInsights not found');\n    }\n\n    const defaults = new AppInsightsDefaults();\n    // Set the default settings for this module\n    this.angulartics2.settings.appInsights = { ...defaults, ...this.angulartics2.settings.appInsights };\n    this.angulartics2.setUsername\n      .subscribe((x: string) => this.setUsername(x));\n    this.angulartics2.setUserProperties\n      .subscribe((x) => this.setUserProperties(x));\n  }\n\n  startTracking(): void {\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.eventTrack(x.action, x.properties));\n    this.angulartics2.exceptionTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.exceptionTrack(x));\n    this.router.events\n      .pipe(\n        this.angulartics2.filterDeveloperMode(),\n        filter(event => event instanceof NavigationStart),\n    )\n      .subscribe(event => this.startTimer());\n\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationError || event instanceof NavigationEnd))\n      .subscribe(error => this.stopTimer());\n  }\n\n  startTimer() {\n    this.loadStartTime = Date.now();\n    this.loadTime = null;\n  }\n\n  stopTimer() {\n    this.loadTime = Date.now() - this.loadStartTime;\n    this.loadStartTime = null;\n  }\n\n  /**\n   * Page Track in Baidu Analytics\n   *\n   * @param path - Location 'path'\n   *\n   * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#trackpageview\n   */\n  pageTrack(path: string) {\n    appInsights.trackPageView(\n      this.title.getTitle(),\n      path,\n      this.dimensions,\n      this.metrics,\n      this.loadTime,\n    );\n  }\n\n  /**\n   * Log a user action or other occurrence.\n   *\n   * @param name Name to identify this event in the portal.\n   * @param properties Additional data used to filter events and metrics in the portal. Defaults to empty.\n   *\n   * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#trackevent\n   */\n  eventTrack(name: string, properties: { [name: string]: string }) {\n    appInsights.trackEvent(name, properties, this.measurements);\n  }\n\n  /**\n   * Exception Track Event in GA\n   *\n   * @param properties - Comprised of the mandatory fields 'appId' (string), 'appName' (string) and 'appVersion' (string) and\n   * optional fields 'fatal' (boolean) and 'description' (string), error\n   *\n   * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#trackexception\n   */\n  exceptionTrack(properties: any) {\n    const description = properties.event || properties.description || properties;\n\n    appInsights.trackException(description);\n  }\n\n  /**\n   * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#setauthenticatedusercontext\n   */\n  setUsername(userId: string) {\n    this.angulartics2.settings.appInsights.userId = userId;\n    appInsights.setAuthenticatedUserContext(userId);\n  }\n\n  setUserProperties(properties: Partial<{ userId: string, accountId: string }>) {\n    if (properties.userId) {\n      this.angulartics2.settings.appInsights.userId = properties.userId;\n    }\n    if (properties.accountId) {\n      appInsights.setAuthenticatedUserContext(\n        this.angulartics2.settings.appInsights.userId,\n        properties.accountId,\n      );\n    } else {\n      appInsights.setAuthenticatedUserContext(\n        this.angulartics2.settings.appInsights.userId,\n      );\n    }\n  }\n}\n"]}