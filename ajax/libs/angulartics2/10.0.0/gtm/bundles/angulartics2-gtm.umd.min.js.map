{"version":3,"sources":["../../../../src/lib/providers/gtm/gtm.ts"],"names":["this","userId","Angulartics2GoogleTagManager","angulartics2","_this","dataLayer","window","defaults","GoogleTagManagerDefaults","settings","gtm","Object","assign","setUsername","subscribe","x","prototype","startTracking","pageTrack","pipe","filterDeveloperMode","path","eventTrack","action","properties","exceptionTrack","pushLayer","event","content-name","layer","push","target","category","label","value","interactionType","noninteraction","gtmCustom","appId","appName","appVersion","undefined","fatal","console","log","exFatal","exDescription","stack","description","error","Injectable","args","providedIn","Angulartics2"],"mappings":"wXAMA,WACEA,KAAAC,OAAS,mBAMT,SAAAC,EACYC,GADZ,IAAAC,EAAAJ,KACYA,KAAAG,aAAAA,EAGe,oBAAdE,WAA6BA,YACtCA,UAAaC,OAAeD,UAAaC,OAAeD,WAAa,IAEvE,IAAME,EAAW,IAAIC,EAErBR,KAAKG,aAAaM,SAASC,IAAGC,OAAAC,OAAAD,OAAAC,OAAA,GAAQL,GAAaP,KAAKG,aAAaM,SAASC,KAC9EV,KAAKG,aAAaU,YACfC,WAAU,SAACC,GAAc,OAAAX,EAAKS,YAAYE,aAG/Cb,EAAAc,UAAAC,cAAA,WAAA,IAAAb,EAAAJ,KACEA,KAAKG,aAAae,UACfC,KAAKnB,KAAKG,aAAaiB,uBACvBN,WAAU,SAACC,GAAM,OAAAX,EAAKc,UAAUH,EAAEM,SACrCrB,KAAKG,aAAamB,WACfH,KAAKnB,KAAKG,aAAaiB,uBACvBN,WAAU,SAACC,GAAM,OAAAX,EAAKkB,WAAWP,EAAEQ,OAAQR,EAAES,eAChDxB,KAAKG,aAAasB,eACfN,KAAKnB,KAAKG,aAAaiB,uBACvBN,WAAU,SAACC,GAAW,OAAAX,EAAKqB,eAAeV,OAG/Cb,EAAAc,UAAAE,UAAA,SAAUG,GACRrB,KAAK0B,UAAU,CACbC,MAAO,YACPC,eAAgBP,EAChBpB,OAAQD,KAAKG,aAAaM,SAASC,IAAIT,UAS3CC,EAAAc,UAAAU,UAAA,SAAUG,GACiB,oBAAdxB,WAA6BA,WACtCA,UAAUyB,KAAKD,IASnB3B,EAAAc,UAAAM,WAAA,SAAWC,EAAgBC,GAOzBA,EAAaA,GAAc,GAE3BxB,KAAK0B,UAASf,OAAAC,OAAA,CACZe,MAAOH,EAAWG,OAAS,cAC3BI,OAAQP,EAAWQ,UAAY,QAC/BT,OAAMA,EACNU,MAAOT,EAAWS,MAClBC,MAAOV,EAAWU,MAClBC,gBAAiBX,EAAWY,eAC5BnC,OAAQD,KAAKG,aAAaM,SAASC,IAAIT,QACpCuB,EAAWa,aAQlBnC,EAAAc,UAAAS,eAAA,SAAeD,GAQPA,GAAgBA,EAAWc,OAAWd,EAAWe,SAAaf,EAAWgB,iBAKtDC,IAArBjB,EAAWkB,QACbC,QAAQC,IAAI,gDACZpB,EAAWqB,SAAU,GAGvBrB,EAAWsB,cAAgBtB,EAAWG,MAAQH,EAAWG,MAAMoB,MAAQvB,EAAWwB,YAElFhD,KAAKsB,WAAW,wBAAwBE,EAAWe,QAAO,KAAKf,EAAWc,MAAK,IAAId,EAAWgB,WAAU,IAAK,CAC3GR,SAAU,YACVC,MAAOT,EAAWsB,iBAblBH,QAAQM,MAAM,kDAsBlB/C,EAAAc,UAAAH,YAAA,SAAYZ,GACVD,KAAKG,aAAaM,SAASC,IAAIT,OAASA,mJA9G3CiD,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDARjBC,EAAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Angulartics2, GoogleTagManagerSettings } from 'angulartics2';\n\ndeclare var dataLayer: any;\n\nexport class GoogleTagManagerDefaults implements GoogleTagManagerSettings {\n  userId = null;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class Angulartics2GoogleTagManager {\n\n  constructor(\n    protected angulartics2: Angulartics2,\n  ) {\n    // The dataLayer needs to be initialized\n    if (typeof dataLayer !== 'undefined' && dataLayer) {\n      dataLayer = (window as any).dataLayer = (window as any).dataLayer || [];\n    }\n    const defaults = new GoogleTagManagerDefaults();\n    // Set the default settings for this module\n    this.angulartics2.settings.gtm = { ...defaults, ...this.angulartics2.settings.gtm };\n    this.angulartics2.setUsername\n      .subscribe((x: string) => this.setUsername(x));\n  }\n\n  startTracking() {\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.eventTrack(x.action, x.properties));\n    this.angulartics2.exceptionTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x: any) => this.exceptionTrack(x));\n  }\n\n  pageTrack(path: string) {\n    this.pushLayer({\n      event: 'Page View',\n      'content-name': path,\n      userId: this.angulartics2.settings.gtm.userId\n    });\n  }\n\n  /**\n   * Send Data Layer\n   *\n   * @layer data layer object\n   */\n  pushLayer(layer: any) {\n    if (typeof dataLayer !== 'undefined' && dataLayer) {\n      dataLayer.push(layer);\n    }\n  }\n\n  /**\n   * Send interactions to the dataLayer, i.e. for event tracking in Google Analytics\n   *\n   * @param action associated with the event\n   */\n  eventTrack(action: string, properties: any) {\n    // TODO: make interface\n    //  @param {string} properties.category\n    //  @param {string} [properties.label]\n    //  @param {number} [properties.value]\n    //  @param {boolean} [properties.noninteraction]\n    // Set a default GTM category\n    properties = properties || {};\n\n    this.pushLayer({\n      event: properties.event || 'interaction',\n      target: properties.category || 'Event',\n      action,\n      label: properties.label,\n      value: properties.value,\n      interactionType: properties.noninteraction,\n      userId: this.angulartics2.settings.gtm.userId,\n      ...properties.gtmCustom\n    });\n  }\n\n  /**\n   * Exception Track Event in GTM\n   *\n   */\n  exceptionTrack(properties: any) {\n    // TODO: make interface\n    //  @param {Object} properties\n    //  @param {string} properties.appId\n    //  @param {string} properties.appName\n    //  @param {string} properties.appVersion\n    //  @param {string} [properties.description]\n    //  @param {boolean} [properties.fatal]\n    if (! properties || ! properties.appId || ! properties.appName || ! properties.appVersion) {\n      console.error('Must be setted appId, appName and appVersion.');\n      return;\n    }\n\n    if (properties.fatal === undefined) {\n      console.log('No \"fatal\" provided, sending with fatal=true');\n      properties.exFatal = true;\n    }\n\n    properties.exDescription = properties.event ? properties.event.stack : properties.description;\n\n    this.eventTrack(`Exception thrown for ${properties.appName} <${properties.appId}@${properties.appVersion}>`, {\n      category: 'Exception',\n      label: properties.exDescription,\n    });\n  }\n\n  /**\n   * Set userId for use with Universal Analytics User ID feature\n   *\n   * @param userId used to identify user cross-device in Google Analytics\n   */\n  setUsername(userId: string) {\n    this.angulartics2.settings.gtm.userId = userId;\n  }\n}\n"]}