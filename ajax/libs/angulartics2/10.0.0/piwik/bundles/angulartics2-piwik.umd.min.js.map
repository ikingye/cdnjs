{"version":3,"sources":["../../../../src/lib/providers/piwik/piwik.ts"],"names":["Angulartics2Piwik","angulartics2","_this","this","console","warn","setUsername","subscribe","x","setUserProperties","prototype","startTracking","pageTrack","pipe","filterDeveloperMode","path","eventTrack","action","properties","location","window","origin","protocol","hostname","port","_paq","push","document","title","e","ReferenceError","params","productSKU","productName","categoryName","price","productCategory","quantity","grandTotal","orderId","subTotal","tax","shipping","discount","goalId","value","keyword","category","searchCount","parsed","parseInt","isNaN","name","label","userId","dimensions","setCustomDimensions","length","index","scope","dimensionRegex","Object","keys","filter","key","exec","forEach","dimension","number","Number","substr","Injectable","args","providedIn","Angulartics2"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Angulartics2 } from 'angulartics2';\n\ndeclare var _paq: any;\n\n@Injectable({ providedIn: 'root' })\nexport class Angulartics2Piwik {\n\n  constructor(private angulartics2: Angulartics2) {\n    if (typeof (_paq) === 'undefined') {\n      console.warn('Piwik not found');\n    }\n    this.angulartics2.setUsername\n      .subscribe((x: string) => this.setUsername(x));\n    this.angulartics2.setUserProperties\n      .subscribe((x) => this.setUserProperties(x));\n  }\n\n  startTracking(): void {\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.eventTrack(x.action, x.properties));\n  }\n\n  pageTrack(path: string, location?: any) {\n    try {\n      if (!window.location.origin) {\n        (window.location as any).origin = window.location.protocol + '//'\n          + window.location.hostname\n          + (window.location.port ? ':' + window.location.port : '');\n      }\n      _paq.push(['setDocumentTitle', window.document.title]);\n      _paq.push(['setCustomUrl', window.location.origin + path]);\n      _paq.push(['trackPageView']);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * Track a basic event in Piwik, or send an ecommerce event.\n   *\n   * @param action A string corresponding to the type of event that needs to be tracked.\n   * @param properties The properties that need to be logged with the event.\n   */\n  eventTrack(action: string, properties: any = {}) {\n    let params = [];\n    switch (action) {\n      /**\n       * @description Sets the current page view as a product or category page view. When you call\n       * setEcommerceView it must be followed by a call to trackPageView to record the product or\n       * category page view.\n       *\n       * @link https://piwik.org/docs/ecommerce-analytics/#tracking-product-page-views-category-page-views-optional\n       * @link https://developer.piwik.org/api-reference/tracking-javascript#ecommerce\n       *\n       * @property productSKU (required) SKU: Product unique identifier\n       * @property productName (optional) Product name\n       * @property categoryName (optional) Product category, or array of up to 5 categories\n       * @property price (optional) Product Price as displayed on the page\n       */\n      case 'setEcommerceView':\n        params = ['setEcommerceView',\n          properties.productSKU,\n          properties.productName,\n          properties.categoryName,\n          properties.price,\n        ];\n        break;\n\n      /**\n       * @description Adds a product into the ecommerce order. Must be called for each product in\n       * the order.\n       *\n       * @link https://piwik.org/docs/ecommerce-analytics/#tracking-ecommerce-orders-items-purchased-required\n       * @link https://developer.piwik.org/api-reference/tracking-javascript#ecommerce\n       *\n       * @property productSKU (required) SKU: Product unique identifier\n       * @property productName (optional) Product name\n       * @property categoryName (optional) Product category, or array of up to 5 categories\n       * @property price (recommended) Product price\n       * @property quantity (optional, default to 1) Product quantity\n       */\n      case 'addEcommerceItem':\n        params = [\n          'addEcommerceItem',\n          properties.productSKU,\n          properties.productName,\n          properties.productCategory,\n          properties.price,\n          properties.quantity,\n        ];\n        break;\n\n      /**\n       * @description Tracks a shopping cart. Call this javascript function every time a user is\n       * adding, updating or deleting a product from the cart.\n       *\n       * @link https://piwik.org/docs/ecommerce-analytics/#tracking-add-to-cart-items-added-to-the-cart-optional\n       * @link https://developer.piwik.org/api-reference/tracking-javascript#ecommerce\n       *\n       * @property grandTotal (required) Cart amount\n       */\n      case 'trackEcommerceCartUpdate':\n        params = ['trackEcommerceCartUpdate', properties.grandTotal];\n        break;\n\n      /**\n       * @description Tracks an Ecommerce order, including any ecommerce item previously added to\n       * the order. orderId and grandTotal (ie. revenue) are required parameters.\n       *\n       * @link https://piwik.org/docs/ecommerce-analytics/#tracking-ecommerce-orders-items-purchased-required\n       * @link https://developer.piwik.org/api-reference/tracking-javascript#ecommerce\n       *\n       * @property orderId (required) Unique Order ID\n       * @property grandTotal (required) Order Revenue grand total (includes tax, shipping, and subtracted discount)\n       * @property subTotal (optional) Order sub total (excludes shipping)\n       * @property tax (optional) Tax amount\n       * @property shipping (optional) Shipping amount\n       * @property discount (optional) Discount offered (set to false for unspecified parameter)\n       */\n      case 'trackEcommerceOrder':\n        params = [\n          'trackEcommerceOrder',\n          properties.orderId,\n          properties.grandTotal,\n          properties.subTotal,\n          properties.tax,\n          properties.shipping,\n          properties.discount,\n        ];\n        break;\n\n      /**\n       * @description Tracks an Ecommerce goal\n       *\n       * @link https://piwik.org/docs/tracking-goals-web-analytics/\n       * @link https://developer.piwik.org/guides/tracking-javascript-guide#manually-trigger-goal-conversions\n       *\n       * @property goalId (required) Unique Goal ID\n       * @property value (optional) passed to goal tracking\n       */\n      case 'trackGoal':\n        params = [\n          'trackGoal',\n          properties.goalId,\n          properties.value,\n        ];\n        break;\n\n      /**\n       * @description Tracks a site search\n       *\n       * @link https://piwik.org/docs/site-search/\n       * @link https://developer.piwik.org/guides/tracking-javascript-guide#internal-search-tracking\n       *\n       * @property keyword (required) Keyword searched for\n       * @property category (optional) Search category\n       * @property searchCount (optional) Number of results\n       */\n      case 'trackSiteSearch':\n        params = [\n          'trackSiteSearch',\n          properties.keyword,\n          properties.category,\n          properties.searchCount,\n        ];\n        break;\n\n      /**\n       * @description Logs an event with an event category (Videos, Music, Games...), an event\n       * action (Play, Pause, Duration, Add Playlist, Downloaded, Clicked...), and an optional\n       * event name and optional numeric value.\n       *\n       * @link https://piwik.org/docs/event-tracking/\n       * @link https://developer.piwik.org/api-reference/tracking-javascript#using-the-tracker-object\n       *\n       * @property category\n       * @property action\n       * @property name (optional, recommended)\n       * @property value (optional)\n       */\n      default:\n        // PAQ requires that eventValue be an integer, see: http://piwik.org/docs/event-tracking\n        if (properties.value) {\n          const parsed = parseInt(properties.value, 10);\n          properties.value = isNaN(parsed) ? 0 : parsed;\n        }\n\n        params = [\n          'trackEvent',\n          properties.category,\n          action,\n          properties.name || properties.label, // Changed in favour of Piwik documentation. Added fallback so it's backwards compatible.\n          properties.value,\n        ];\n    }\n    try {\n      _paq.push(params);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  setUsername(userId: string | boolean) {\n    try {\n      _paq.push(['setUserId', userId]);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * Sets custom dimensions if at least one property has the key \"dimension<n>\",\n   * e.g. dimension10. If there are custom dimensions, any other property is ignored.\n   *\n   * If there are no custom dimensions in the given properties object, the properties\n   * object is saved as a custom variable.\n   *\n   * If in doubt, prefer custom dimensions.\n   * @link https://piwik.org/docs/custom-variables/\n   */\n  setUserProperties(properties: any) {\n    const dimensions = this.setCustomDimensions(properties);\n    try {\n      if (dimensions.length === 0) {\n        _paq.push(['setCustomVariable', properties.index, properties.name, properties.value, properties.scope]);\n      }\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  private setCustomDimensions(properties: any): string[] {\n    const dimensionRegex: RegExp = /dimension[1-9]\\d*/;\n    const dimensions = Object.keys(properties)\n      .filter(key => dimensionRegex.exec(key));\n    dimensions.forEach(dimension => {\n      const number = Number(dimension.substr(9));\n      _paq.push(['setCustomDimension', number, properties[dimension]]);\n    });\n    return dimensions;\n  }\n}\n"]}