{"version":3,"file":"firebase-firestore-lite.js","sources":["../../node_modules/tslib/tslib.es6.js","../../packages/util/src/errors.ts","../../packages/component/src/component.ts","../../packages/logger/src/logger.ts","../../packages/firestore/src/util/error.ts","../../packages/firestore/src/util/log.ts","../../packages/firestore/src/platform/browser/format_json.ts","../../packages/firestore/src/util/assert.ts","../../packages/firestore/src/platform/browser/random_bytes.ts","../../packages/firestore/src/util/misc.ts","../../packages/firestore/src/core/database_info.ts","../../packages/firestore/src/auth/user.ts","../../packages/firestore/src/api/credentials.ts","../../packages/firestore/lite/src/api/util.ts","../../packages/firestore/src/api/timestamp.ts","../../packages/firestore/src/core/snapshot_version.ts","../../packages/firestore/src/model/path.ts","../../packages/firestore/src/model/document_key.ts","../../packages/firestore/src/util/obj.ts","../../packages/firestore/src/util/byte_string.ts","../../packages/firestore/src/platform/browser/base64.ts","../../packages/firestore/src/util/types.ts","../../packages/firestore/src/model/server_timestamps.ts","../../packages/firestore/src/model/values.ts","../../packages/firestore/src/core/target.ts","../../packages/firestore/src/core/query.ts","../../packages/firestore/src/remote/rpc_error.ts","../../packages/firestore/src/remote/serializer.ts","../../packages/firestore/src/model/transform_operation.ts","../../packages/firestore/src/model/mutation.ts","../../packages/firestore/src/model/object_value.ts","../../packages/firestore/src/model/document.ts","../../packages/firestore/src/util/promise.ts","../../packages/firestore/src/remote/backoff.ts","../../packages/firestore/src/platform/browser/dom.ts","../../packages/firestore/src/util/async_queue.ts","../../packages/firestore/src/local/simple_db.ts","../../packages/firestore/src/remote/datastore.ts","../../packages/firestore/src/remote/rest_connection.ts","../../packages/firestore/src/platform/browser_lite/fetch_connection.ts","../../packages/firestore/src/platform/browser_lite/serializer.ts","../../packages/firestore/lite/src/api/components.ts","../../packages/firestore/src/platform/browser_lite/connection.ts","../../packages/firestore/lite/src/api/database.ts","../../packages/firestore/src/util/input_validation.ts","../../packages/firestore/src/api/blob.ts","../../packages/firestore/src/api/field_path.ts","../../packages/firestore/src/api/field_value.ts","../../packages/firestore/src/api/geo_point.ts","../../packages/firestore/src/api/user_data_reader.ts","../../packages/firestore/lite/src/api/field_path.ts","../../packages/firestore/src/api/user_data_writer.ts","../../packages/firestore/lite/src/api/snapshot.ts","../../packages/firestore/src/core/transaction.ts","../../packages/firestore/src/core/transaction_runner.ts","../../packages/firestore/src/api/database.ts","../../packages/firestore/lite/src/api/reference.ts","../../packages/firestore/lite/src/api/field_value.ts","../../packages/firestore/lite/src/api/write_batch.ts","../../packages/firestore/lite/src/api/transaction.ts","../../packages/firestore/lite/register.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\nexport interface FirebaseError extends Error, ErrorData {\n  // Unique code for error - format is service/error-code-string.\n  readonly code: string;\n\n  // Developer-friendly error message.\n  readonly message: string;\n\n  // Always 'FirebaseError'.\n  readonly name: typeof ERROR_NAME;\n\n  // Where available - stack backtrace in a string.\n  readonly stack?: string;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  readonly name = ERROR_NAME;\n\n  constructor(readonly code: string, message: string) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage);\n\n    // Keys with an underscore at the end of their name are not included in\n    // error.data for some reason.\n    // TODO: Replace with Object.entries when lib is updated to es2017.\n    for (const key of Object.keys(customData)) {\n      if (key.slice(-1) !== '_') {\n        if (key in error) {\n          console.warn(\n            `Overwriting FirebaseError base field \"${key}\" can cause unexpected behavior.`\n          );\n        }\n        error[key] = customData[key];\n      }\n    }\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\n/**\n * Error Codes describing the different ways Firestore can fail. These come\n * directly from GRPC.\n */\nexport type Code = firestore.FirestoreErrorCode;\n\nexport const Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n  /** Not an error; returned on success. */\n  OK: 'ok' as Code,\n\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled' as Code,\n\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown' as Code,\n\n  /**\n   * Client specified an invalid argument. Note that this differs from\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n   * problematic regardless of the state of the system (e.g., a malformed file\n   * name).\n   */\n  INVALID_ARGUMENT: 'invalid-argument' as Code,\n\n  /**\n   * Deadline expired before operation could complete. For operations that\n   * change the state of the system, this error may be returned even if the\n   * operation has completed successfully. For example, a successful response\n   * from a server could have been delayed long enough for the deadline to\n   * expire.\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded' as Code,\n\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found' as Code,\n\n  /**\n   * Some entity that we attempted to create (e.g., file or directory) already\n   * exists.\n   */\n  ALREADY_EXISTS: 'already-exists' as Code,\n\n  /**\n   * The caller does not have permission to execute the specified operation.\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n   * PERMISSION_DENIED must not be used if the caller can not be identified\n   * (use UNAUTHENTICATED instead for those errors).\n   */\n  PERMISSION_DENIED: 'permission-denied' as Code,\n\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED: 'unauthenticated' as Code,\n\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n   * entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted' as Code,\n\n  /**\n   * Operation was rejected because the system is not in a state required for\n   * the operation's execution. For example, directory to be deleted may be\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n   *  (b) Use ABORTED if the client should retry at a higher-level\n   *      (e.g., restarting a read-modify-write sequence).\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\n   *      should be returned since the client should not retry unless\n   *      they have first fixed up the directory by deleting files from it.\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\n   *      REST Get/Update/Delete on a resource and the resource on the\n   *      server does not match the condition. E.g., conflicting\n   *      read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION: 'failed-precondition' as Code,\n\n  /**\n   * The operation was aborted, typically due to a concurrency issue like\n   * sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  ABORTED: 'aborted' as Code,\n\n  /**\n   * Operation was attempted past the valid range. E.g., seeking or reading\n   * past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n   * if the system state changes. For example, a 32-bit file system will\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n   * an offset past the current file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n   * when it applies so that callers who are iterating through a space can\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\n   */\n  OUT_OF_RANGE: 'out-of-range' as Code,\n\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented' as Code,\n\n  /**\n   * Internal errors. Means some invariants expected by underlying System has\n   * been broken. If you see one of these errors, Something is very broken.\n   */\n  INTERNAL: 'internal' as Code,\n\n  /**\n   * The service is currently unavailable. This is a most likely a transient\n   * condition and may be corrected by retrying with a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  UNAVAILABLE: 'unavailable' as Code,\n\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss' as Code\n};\n\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nexport class FirestoreError extends Error implements firestore.FirestoreError {\n  name = 'FirebaseError';\n  stack?: string;\n\n  constructor(readonly code: Code, readonly message: string) {\n    super(message);\n\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel, LogLevelString } from '@firebase/logger';\nimport { SDK_VERSION } from '../core/version';\nimport { formatJSON } from '../platform/format_json';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/firestore');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function setLogLevel(newLevel: LogLevelString | LogLevel): void {\n  logClient.setLogLevel(newLevel);\n}\n\nexport function logDebug(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logError(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logWarn(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    const args = obj.map(argToString);\n    logClient.warn(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Formats an object as a JSON string, suitable for logging. */\nexport function formatJSON(value: unknown): string {\n  return JSON.stringify(value);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '../core/version';\nimport { logError } from './log';\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure: string = 'Unexpected state'): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message =\n    `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message);\n\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nexport function hardAssert(\n  assertion: boolean,\n  message?: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * The code of callsites invoking this function are stripped out in production\n * builds. Any side-effects of code within the debugAssert() invocation will not\n * happen in this case.\n */\nexport function debugAssert(\n  assertion: boolean,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\nexport function debugCast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  debugAssert(\n    obj instanceof constructor,\n    `Expected type '${constructor.name}', but was '${obj.constructor.name}'`\n  );\n  return obj as T;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../../util/assert';\n\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nexport function randomBytes(nBytes: number): Uint8Array {\n  debugAssert(nBytes >= 0, `Expecting non-negative nBytes, got: ${nBytes}`);\n\n  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n  const crypto =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof self !== 'undefined' && (self.crypto || (self as any)['msCrypto']);\n  const bytes = new Uint8Array(nBytes);\n  if (crypto) {\n    crypto.getRandomValues(bytes);\n  } else {\n    // Falls back to Math.random\n    for (let i = 0; i < nBytes; i++) {\n      bytes[i] = Math.floor(Math.random() * 256);\n    }\n  }\n  return bytes;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\nimport { randomBytes } from '../platform/random_bytes';\n\nexport type EventHandler<E> = (value: E) => void;\nexport interface Indexable {\n  [k: string]: unknown;\n}\n\nexport class AutoId {\n  static newId(): string {\n    // Alphanumeric characters\n    const chars =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    // The largest byte value that is a multiple of `char.length`.\n    const maxMultiple = Math.floor(256 / chars.length) * chars.length;\n    debugAssert(\n      0 < maxMultiple && maxMultiple < 256,\n      `Expect maxMultiple to be (0, 256), but got ${maxMultiple}`\n    );\n\n    let autoId = '';\n    const targetLength = 20;\n    while (autoId.length < targetLength) {\n      const bytes = randomBytes(40);\n      for (let i = 0; i < bytes.length; ++i) {\n        // Only accept values that are [0, maxMultiple), this ensures they can\n        // be evenly mapped to indices of `chars` via a modulo operation.\n        if (autoId.length < targetLength && bytes[i] < maxMultiple) {\n          autoId += chars.charAt(bytes[i] % chars.length);\n        }\n      }\n    }\n    debugAssert(autoId.length === targetLength, 'Invalid auto ID: ' + autoId);\n\n    return autoId;\n  }\n}\n\nexport function primitiveComparator<T>(left: T, right: T): number {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\n\nexport interface Equatable<T> {\n  isEqual(other: T): boolean;\n}\n\n/** Helper to compare arrays using isEqual(). */\nexport function arrayEquals<T>(\n  left: T[],\n  right: T[],\n  comparator: (l: T, r: T) => boolean\n): boolean {\n  if (left.length !== right.length) {\n    return false;\n  }\n  return left.every((value, index) => comparator(value, right[index]));\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s: string): string {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { primitiveComparator } from '../util/misc';\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId The database to use.\n   * @param persistenceKey A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host The Firestore backend host to connect to.\n   * @param ssl Whether to use SSL when connecting.\n   * @param forceLongPolling Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean,\n    readonly forceLongPolling: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n\n/** Represents the database ID a Firestore client is associated with. */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  isEqual(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n\n  compareTo(other: DatabaseId): number {\n    return (\n      primitiveComparator(this.projectId, other.projectId) ||\n      primitiveComparator(this.database, other.database)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nexport class User {\n  /** A user with a null UID. */\n  static readonly UNAUTHENTICATED = new User(null);\n\n  // TODO(mikelehen): Look into getting a proper uid-equivalent for\n  // non-FirebaseAuth providers.\n  static readonly GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n  static readonly FIRST_PARTY = new User('first-party-uid');\n\n  constructor(readonly uid: string | null) {}\n\n  isAuthenticated(): boolean {\n    return this.uid != null;\n  }\n\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey(): string {\n    if (this.isAuthenticated()) {\n      return 'uid:' + this.uid;\n    } else {\n      return 'anonymous-user';\n    }\n  }\n\n  isEqual(otherUser: User): boolean {\n    return otherUser.uid === this.uid;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { logDebug } from '../util/log';\n\n// TODO(mikelehen): This should be split into multiple files and probably\n// moved to an auth/ folder to match other platforms.\n\nexport interface FirstPartyCredentialsSettings {\n  type: 'gapi';\n  client: unknown;\n  sessionIndex: string;\n}\n\nexport interface ProviderCredentialsSettings {\n  type: 'provider';\n  client: CredentialsProvider;\n}\n\n/** Settings for private credentials */\nexport type CredentialsSettings =\n  | FirstPartyCredentialsSettings\n  | ProviderCredentialsSettings;\n\nexport type TokenType = 'OAuth' | 'FirstParty';\nexport interface Token {\n  /** Type of token. */\n  type: TokenType;\n\n  /**\n   * The user with which the token is associated (used for persisting user\n   * state on disk, etc.).\n   */\n  user: User;\n\n  /** Extra header values to be passed along with a request */\n  authHeaders: { [header: string]: string };\n}\n\nexport class OAuthToken implements Token {\n  type = 'OAuth' as TokenType;\n  authHeaders: { [header: string]: string };\n  constructor(value: string, public user: User) {\n    this.authHeaders = {};\n    // Set the headers using Object Literal notation to avoid minification\n    this.authHeaders['Authorization'] = `Bearer ${value}`;\n  }\n}\n\n/**\n * A Listener for credential change events. The listener should fetch a new\n * token and may need to invalidate other state if the current user has also\n * changed.\n */\nexport type CredentialChangeListener = (user: User) => void;\n\n/**\n * Provides methods for getting the uid and token for the current user and\n * listening for changes.\n */\nexport interface CredentialsProvider {\n  /** Requests a token for the current user. */\n  getToken(): Promise<Token | null>;\n\n  /**\n   * Marks the last retrieved token as invalid, making the next GetToken request\n   * force-refresh the token.\n   */\n  invalidateToken(): void;\n\n  /**\n   * Specifies a listener to be notified of credential changes\n   * (sign-in / sign-out, token changes). It is immediately called once with the\n   * initial user.\n   */\n  setChangeListener(changeListener: CredentialChangeListener): void;\n\n  /** Removes the previously-set change listener. */\n  removeChangeListener(): void;\n}\n\n/** A CredentialsProvider that always yields an empty token. */\nexport class EmptyCredentialsProvider implements CredentialsProvider {\n  /**\n   * Stores the listener registered with setChangeListener()\n   * This isn't actually necessary since the UID never changes, but we use this\n   * to verify the listen contract is adhered to in tests.\n   */\n  private changeListener: CredentialChangeListener | null = null;\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve<Token | null>(null);\n  }\n\n  invalidateToken(): void {}\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n    // Fire with initial user.\n    changeListener(User.UNAUTHENTICATED);\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() when no listener registered'\n    );\n    this.changeListener = null;\n  }\n}\n\nexport class FirebaseCredentialsProvider implements CredentialsProvider {\n  /**\n   * The auth token listener registered with FirebaseApp, retained here so we\n   * can unregister it.\n   */\n  private tokenListener: ((token: string | null) => void) | null = null;\n\n  /** Tracks the current User. */\n  private currentUser: User = User.UNAUTHENTICATED;\n  private receivedInitialUser: boolean = false;\n\n  /**\n   * Counter used to detect if the token changed while a getToken request was\n   * outstanding.\n   */\n  private tokenCounter = 0;\n\n  /** The listener registered with setChangeListener(). */\n  private changeListener: CredentialChangeListener | null = null;\n\n  private forceRefresh = false;\n\n  private auth: FirebaseAuthInternal | null;\n\n  constructor(authProvider: Provider<FirebaseAuthInternalName>) {\n    this.tokenListener = () => {\n      this.tokenCounter++;\n      this.currentUser = this.getUser();\n      this.receivedInitialUser = true;\n      if (this.changeListener) {\n        this.changeListener(this.currentUser);\n      }\n    };\n\n    this.tokenCounter = 0;\n\n    this.auth = authProvider.getImmediate({ optional: true });\n\n    if (this.auth) {\n      this.auth.addAuthTokenListener(this.tokenListener!);\n    } else {\n      // if auth is not available, invoke tokenListener once with null token\n      this.tokenListener(null);\n      authProvider.get().then(\n        auth => {\n          this.auth = auth;\n          if (this.tokenListener) {\n            // tokenListener can be removed by removeChangeListener()\n            this.auth.addAuthTokenListener(this.tokenListener);\n          }\n        },\n        () => {\n          /* this.authProvider.get() never rejects */\n        }\n      );\n    }\n  }\n\n  getToken(): Promise<Token | null> {\n    debugAssert(\n      this.tokenListener != null,\n      'getToken cannot be called after listener removed.'\n    );\n\n    // Take note of the current value of the tokenCounter so that this method\n    // can fail (with an ABORTED error) if there is a token change while the\n    // request is outstanding.\n    const initialTokenCounter = this.tokenCounter;\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth.getToken(forceRefresh).then(tokenData => {\n      // Cancel the request since the token changed while the request was\n      // outstanding so the response is potentially for a previous user (which\n      // user, we can't be sure).\n      if (this.tokenCounter !== initialTokenCounter) {\n        logDebug(\n          'FirebaseCredentialsProvider',\n          'getToken aborted due to token change.'\n        );\n        return this.getToken();\n      } else {\n        if (tokenData) {\n          hardAssert(\n            typeof tokenData.accessToken === 'string',\n            'Invalid tokenData returned from getToken():' + tokenData\n          );\n          return new OAuthToken(tokenData.accessToken, this.currentUser);\n        } else {\n          return null;\n        }\n      }\n    });\n  }\n\n  invalidateToken(): void {\n    this.forceRefresh = true;\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n\n    // Fire the initial event\n    if (this.receivedInitialUser) {\n      changeListener(this.currentUser);\n    }\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.tokenListener != null,\n      'removeChangeListener() called twice'\n    );\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() called when no listener registered'\n    );\n\n    if (this.auth) {\n      this.auth.removeAuthTokenListener(this.tokenListener!);\n    }\n    this.tokenListener = null;\n    this.changeListener = null;\n  }\n\n  // Auth.getUid() can return null even with a user logged in. It is because\n  // getUid() is synchronous, but the auth code populating Uid is asynchronous.\n  // This method should only be called in the AuthTokenListener callback\n  // to guarantee to get the actual user.\n  private getUser(): User {\n    const currentUid = this.auth && this.auth.getUid();\n    hardAssert(\n      currentUid === null || typeof currentUid === 'string',\n      'Received invalid UID: ' + currentUid\n    );\n    return new User(currentUid);\n  }\n}\n\n// Manual type definition for the subset of Gapi we use.\ninterface Gapi {\n  auth: {\n    getAuthHeaderValueForFirstParty: (\n      userIdentifiers: Array<{ [key: string]: string }>\n    ) => string | null;\n  };\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nexport class FirstPartyToken implements Token {\n  type = 'FirstParty' as TokenType;\n  user = User.FIRST_PARTY;\n\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  get authHeaders(): { [header: string]: string } {\n    const headers: { [header: string]: string } = {\n      'X-Goog-AuthUser': this.sessionIndex\n    };\n    const authHeader = this.gapi.auth.getAuthHeaderValueForFirstParty([]);\n    if (authHeader) {\n      headers['Authorization'] = authHeader;\n    }\n    return headers;\n  }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nexport class FirstPartyCredentialsProvider implements CredentialsProvider {\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    // Fire with initial uid.\n    changeListener(User.FIRST_PARTY);\n  }\n\n  removeChangeListener(): void {}\n\n  invalidateToken(): void {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(\n  credentials?: CredentialsSettings\n): CredentialsProvider {\n  if (!credentials) {\n    return new EmptyCredentialsProvider();\n  }\n\n  switch (credentials.type) {\n    case 'gapi':\n      const client = credentials.client as Gapi;\n      // Make sure this really is a Gapi client.\n      hardAssert(\n        !!(\n          typeof client === 'object' &&\n          client !== null &&\n          client['auth'] &&\n          client['auth']['getAuthHeaderValueForFirstParty']\n        ),\n        'unexpected gapi interface'\n      );\n      return new FirstPartyCredentialsProvider(\n        client,\n        credentials.sessionIndex || '0'\n      );\n\n    case 'provider':\n      return credentials.client;\n\n    default:\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'makeCredentialsProvider failed due to invalid credential type'\n      );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../../../src/util/error';\n\n/**\n * Casts `obj` to `T`. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n */\nexport function cast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  if (!(obj instanceof constructor)) {\n    if (constructor.name === obj.constructor.name) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Type does not match the expected instance. Did you pass ' +\n          `'${constructor.name}' from a different Firestore SDK?`\n      );\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Expected type '${constructor.name}', but was '${obj.constructor.name}'`\n      );\n    }\n  }\n  return obj as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport { primitiveComparator } from '../util/misc';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\nexport class Timestamp {\n  static now(): Timestamp {\n    return Timestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date: Date): Timestamp {\n    return Timestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds: number): Timestamp {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanos);\n  }\n\n  constructor(readonly seconds: number, readonly nanoseconds: number) {\n    if (nanoseconds < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (nanoseconds >= 1e9) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (seconds < MIN_SECONDS) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n  }\n\n  toDate(): Date {\n    return new Date(this.toMillis());\n  }\n\n  toMillis(): number {\n    return this.seconds * 1000 + this.nanoseconds / 1e6;\n  }\n\n  _compareTo(other: Timestamp): number {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanoseconds, other.nanoseconds);\n    }\n    return primitiveComparator(this.seconds, other.seconds);\n  }\n\n  isEqual(other: Timestamp): boolean {\n    return (\n      other.seconds === this.seconds && other.nanoseconds === this.nanoseconds\n    );\n  }\n\n  toString(): string {\n    return (\n      'Timestamp(seconds=' +\n      this.seconds +\n      ', nanoseconds=' +\n      this.nanoseconds +\n      ')'\n    );\n  }\n\n  valueOf(): string {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nexport class SnapshotVersion {\n  static fromTimestamp(value: Timestamp): SnapshotVersion {\n    return new SnapshotVersion(value);\n  }\n\n  static min(): SnapshotVersion {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  }\n\n  private constructor(private timestamp: Timestamp) {}\n\n  compareTo(other: SnapshotVersion): number {\n    return this.timestamp._compareTo(other.timestamp);\n  }\n\n  isEqual(other: SnapshotVersion): boolean {\n    return this.timestamp.isEqual(other.timestamp);\n  }\n\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds(): number {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\n  }\n\n  toString(): string {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n\n  toTimestamp(): Timestamp {\n    return this.timestamp;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\n\nexport const DOCUMENT_KEY_NAME = '__name__';\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nabstract class BasePath<B extends BasePath<B>> {\n  private segments: string[];\n  private offset: number;\n  private len: number;\n\n  constructor(segments: string[], offset?: number, length?: number) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail('offset ' + offset + ' out of range ' + segments.length);\n    }\n\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail('length ' + length + ' out of range ' + (segments.length - offset));\n    }\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n\n  /**\n   * Abstract constructor method to construct an instance of B with the given\n   * parameters.\n   */\n  protected abstract construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): B;\n\n  /**\n   * Returns a String representation.\n   *\n   * Implementing classes are required to provide deterministic implementations as\n   * the String representation is used to obtain canonical Query IDs.\n   */\n  abstract toString(): string;\n\n  get length(): number {\n    return this.len;\n  }\n\n  isEqual(other: B): boolean {\n    return BasePath.comparator(this, other) === 0;\n  }\n\n  child(nameOrPath: string | B): B {\n    const segments = this.segments.slice(this.offset, this.limit());\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n    return this.construct(segments);\n  }\n\n  /** The index of one past the last segment of the path. */\n  private limit(): number {\n    return this.offset + this.length;\n  }\n\n  popFirst(size?: number): B {\n    size = size === undefined ? 1 : size;\n    debugAssert(\n      this.length >= size,\n      \"Can't call popFirst() with less segments\"\n    );\n    return this.construct(\n      this.segments,\n      this.offset + size,\n      this.length - size\n    );\n  }\n\n  popLast(): B {\n    debugAssert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n\n  firstSegment(): string {\n    debugAssert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n    return this.segments[this.offset];\n  }\n\n  lastSegment(): string {\n    return this.get(this.length - 1);\n  }\n\n  get(index: number): string {\n    debugAssert(index < this.length, 'Index out of range');\n    return this.segments[this.offset + index];\n  }\n\n  isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  isPrefixOf(other: this): boolean {\n    if (other.length < this.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isImmediateParentOf(potentialChild: this): boolean {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  forEach(fn: (segment: string) => void): void {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n\n  toArray(): string[] {\n    return this.segments.slice(this.offset, this.limit());\n  }\n\n  static comparator<T extends BasePath<T>>(\n    p1: BasePath<T>,\n    p2: BasePath<T>\n  ): number {\n    const len = Math.min(p1.length, p2.length);\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n      if (left < right) {\n        return -1;\n      }\n      if (left > right) {\n        return 1;\n      }\n    }\n    if (p1.length < p2.length) {\n      return -1;\n    }\n    if (p1.length > p2.length) {\n      return 1;\n    }\n    return 0;\n  }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nexport class ResourcePath extends BasePath<ResourcePath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): ResourcePath {\n    return new ResourcePath(segments, offset, length);\n  }\n\n  canonicalString(): string {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    return this.toArray().join('/');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Creates a resource path from the given slash-delimited string.\n   */\n  static fromString(path: string): ResourcePath {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    if (path.indexOf('//') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid path (${path}). Paths must not contain // in them.`\n      );\n    }\n\n    // We may still have an empty segment at the beginning or end if they had a\n    // leading or trailing slash (which we allow).\n    const segments = path.split('/').filter(segment => segment.length > 0);\n\n    return new ResourcePath(segments);\n  }\n\n  static emptyPath(): ResourcePath {\n    return new ResourcePath([]);\n  }\n}\n\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/** A dot-separated path for navigating sub-objects within a document. */\nexport class FieldPath extends BasePath<FieldPath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): FieldPath {\n    return new FieldPath(segments, offset, length);\n  }\n\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  private static isValidIdentifier(segment: string): boolean {\n    return identifierRegExp.test(segment);\n  }\n\n  canonicalString(): string {\n    return this.toArray()\n      .map(str => {\n        str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n        if (!FieldPath.isValidIdentifier(str)) {\n          str = '`' + str + '`';\n        }\n        return str;\n      })\n      .join('.');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField(): boolean {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField(): FieldPath {\n    return new FieldPath([DOCUMENT_KEY_NAME]);\n  }\n\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(path: string): FieldPath {\n    const segments: string[] = [];\n    let current = '';\n    let i = 0;\n\n    const addCurrentSegment = (): void => {\n      if (current.length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field path (${path}). Paths must not be empty, begin ` +\n            `with '.', end with '.', or contain '..'`\n        );\n      }\n      segments.push(current);\n      current = '';\n    };\n\n    let inBackticks = false;\n\n    while (i < path.length) {\n      const c = path[i];\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has trailing escape character: ' + path\n          );\n        }\n        const next = path[i + 1];\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has invalid escape sequence: ' + path\n          );\n        }\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n    addCurrentSegment();\n\n    if (inBackticks) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Unterminated ` in path: ' + path\n      );\n    }\n\n    return new FieldPath(segments);\n  }\n\n  static emptyPath(): FieldPath {\n    return new FieldPath([]);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    debugAssert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  static fromName(name: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(collectionId: string): boolean {\n    return (\n      this.path.length >= 2 &&\n      this.path.get(this.path.length - 2) === collectionId\n    );\n  }\n\n  isEqual(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments The segments of the path to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\nexport interface Dict<V> {\n  [stringKey: string]: V;\n}\n\nexport function objectSize<V>(obj: object): number {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport function forEach<V>(\n  obj: Dict<V>,\n  fn: (key: string, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\nexport function isEmpty<V>(obj: Dict<V>): boolean {\n  debugAssert(\n    obj != null && typeof obj === 'object',\n    'isEmpty() expects object parameter.'\n  );\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { decodeBase64, encodeBase64 } from '../platform/base64';\nimport { primitiveComparator } from './misc';\n\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n */\nexport class ByteString {\n  static readonly EMPTY_BYTE_STRING = new ByteString('');\n\n  private constructor(private readonly binaryString: string) {}\n\n  static fromBase64String(base64: string): ByteString {\n    const binaryString = decodeBase64(base64);\n    return new ByteString(binaryString);\n  }\n\n  static fromUint8Array(array: Uint8Array): ByteString {\n    const binaryString = binaryStringFromUint8Array(array);\n    return new ByteString(binaryString);\n  }\n\n  toBase64(): string {\n    return encodeBase64(this.binaryString);\n  }\n\n  toUint8Array(): Uint8Array {\n    return uint8ArrayFromBinaryString(this.binaryString);\n  }\n\n  approximateByteSize(): number {\n    return this.binaryString.length * 2;\n  }\n\n  compareTo(other: ByteString): number {\n    return primitiveComparator(this.binaryString, other.binaryString);\n  }\n\n  isEqual(other: ByteString): boolean {\n    return this.binaryString === other.binaryString;\n  }\n}\n\n/**\n * Helper function to convert an Uint8array to a binary string.\n */\nexport function binaryStringFromUint8Array(array: Uint8Array): string {\n  let binaryString = '';\n  for (let i = 0; i < array.length; ++i) {\n    binaryString += String.fromCharCode(array[i]);\n  }\n  return binaryString;\n}\n\n/**\n * Helper function to convert a binary string to an Uint8Array.\n */\nexport function uint8ArrayFromBinaryString(binaryString: string): Uint8Array {\n  const buffer = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    buffer[i] = binaryString.charCodeAt(i);\n  }\n  return buffer;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\n/** Converts a binary string to a Base64 encoded string. */\nexport function encodeBase64(raw: string): string {\n  return btoa(raw);\n}\n\n/** True if and only if the Base64 conversion functions are available. */\nexport function isBase64Available(): boolean {\n  return typeof atob !== 'undefined';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An Object whose keys and values are strings.\nexport interface StringMap {\n  [key: string]: string;\n}\n\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value: unknown): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/** Returns whether the value represents -0. */\nexport function isNegativeZero(value: number): boolean {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return value === -0 && 1 / value === 1 / -0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value: unknown): boolean {\n  return (\n    typeof value === 'number' &&\n    Number.isInteger(value) &&\n    !isNegativeZero(value) &&\n    value <= Number.MAX_SAFE_INTEGER &&\n    value >= Number.MIN_SAFE_INTEGER\n  );\n}\n\n/** The subset of the browser's Window interface used by the SDK. */\nexport interface WindowLike {\n  readonly localStorage: Storage;\n  readonly indexedDB: IDBFactory | null;\n  addEventListener(type: string, listener: EventListener): void;\n  removeEventListener(type: string, listener: EventListener): void;\n}\n\n/** The subset of the browser's Document interface used by the SDK. */\nexport interface DocumentLike {\n  readonly visibilityState: VisibilityState;\n  addEventListener(type: string, listener: EventListener): void;\n  removeEventListener(type: string, listener: EventListener): void;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\nimport { Timestamp } from '../api/timestamp';\nimport { normalizeTimestamp } from './values';\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\n\nconst SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\nconst TYPE_KEY = '__type__';\nconst PREVIOUS_VALUE_KEY = '__previous_value__';\nconst LOCAL_WRITE_TIME_KEY = '__local_write_time__';\n\nexport function isServerTimestamp(value: api.Value | null): boolean {\n  const type = (value?.mapValue?.fields || {})[TYPE_KEY]?.stringValue;\n  return type === SERVER_TIMESTAMP_SENTINEL;\n}\n\n/**\n * Creates a new ServerTimestamp proto value (using the internal format).\n */\nexport function serverTimestamp(\n  localWriteTime: Timestamp,\n  previousValue: api.Value | null\n): api.Value {\n  const mapValue: api.MapValue = {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: SERVER_TIMESTAMP_SENTINEL\n      },\n      [LOCAL_WRITE_TIME_KEY]: {\n        timestampValue: {\n          seconds: localWriteTime.seconds,\n          nanos: localWriteTime.nanoseconds\n        }\n      }\n    }\n  };\n\n  if (previousValue) {\n    mapValue.fields![PREVIOUS_VALUE_KEY] = previousValue;\n  }\n\n  return { mapValue };\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nexport function getPreviousValue(value: api.Value): api.Value | null {\n  const previousValue = value.mapValue!.fields![PREVIOUS_VALUE_KEY];\n\n  if (isServerTimestamp(previousValue)) {\n    return getPreviousValue(previousValue);\n  }\n  return previousValue;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */\nexport function getLocalWriteTime(value: api.Value): Timestamp {\n  const localWriteTime = normalizeTimestamp(\n    value.mapValue!.fields![LOCAL_WRITE_TIME_KEY].timestampValue!\n  );\n  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { TypeOrder } from './object_value';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach, objectSize } from '../util/obj';\nimport { ByteString } from '../util/byte_string';\nimport { isNegativeZero } from '../util/types';\nimport { DocumentKey } from './document_key';\nimport { arrayEquals, primitiveComparator } from '../util/misc';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  getLocalWriteTime,\n  getPreviousValue,\n  isServerTimestamp\n} from './server_timestamps';\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nconst ISO_TIMESTAMP_REG_EXP = new RegExp(\n  /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/\n);\n\n/** Extracts the backend's type order for the provided value. */\nexport function typeOrder(value: api.Value): TypeOrder {\n  if ('nullValue' in value) {\n    return TypeOrder.NullValue;\n  } else if ('booleanValue' in value) {\n    return TypeOrder.BooleanValue;\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return TypeOrder.NumberValue;\n  } else if ('timestampValue' in value) {\n    return TypeOrder.TimestampValue;\n  } else if ('stringValue' in value) {\n    return TypeOrder.StringValue;\n  } else if ('bytesValue' in value) {\n    return TypeOrder.BlobValue;\n  } else if ('referenceValue' in value) {\n    return TypeOrder.RefValue;\n  } else if ('geoPointValue' in value) {\n    return TypeOrder.GeoPointValue;\n  } else if ('arrayValue' in value) {\n    return TypeOrder.ArrayValue;\n  } else if ('mapValue' in value) {\n    if (isServerTimestamp(value)) {\n      return TypeOrder.ServerTimestampValue;\n    }\n    return TypeOrder.ObjectValue;\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */\nexport function valueEquals(left: api.Value, right: api.Value): boolean {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return false;\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return true;\n    case TypeOrder.BooleanValue:\n      return left.booleanValue === right.booleanValue;\n    case TypeOrder.ServerTimestampValue:\n      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\n    case TypeOrder.TimestampValue:\n      return timestampEquals(left, right);\n    case TypeOrder.StringValue:\n      return left.stringValue === right.stringValue;\n    case TypeOrder.BlobValue:\n      return blobEquals(left, right);\n    case TypeOrder.RefValue:\n      return left.referenceValue === right.referenceValue;\n    case TypeOrder.GeoPointValue:\n      return geoPointEquals(left, right);\n    case TypeOrder.NumberValue:\n      return numberEquals(left, right);\n    case TypeOrder.ArrayValue:\n      return arrayEquals(\n        left.arrayValue!.values || [],\n        right.arrayValue!.values || [],\n        valueEquals\n      );\n    case TypeOrder.ObjectValue:\n      return objectEquals(left, right);\n    default:\n      return fail('Unexpected value type: ' + JSON.stringify(left));\n  }\n}\n\nfunction timestampEquals(left: api.Value, right: api.Value): boolean {\n  if (\n    typeof left.timestampValue === 'string' &&\n    typeof right.timestampValue === 'string' &&\n    left.timestampValue.length === right.timestampValue.length\n  ) {\n    // Use string equality for ISO 8601 timestamps\n    return left.timestampValue === right.timestampValue;\n  }\n\n  const leftTimestamp = normalizeTimestamp(left.timestampValue!);\n  const rightTimestamp = normalizeTimestamp(right.timestampValue!);\n  return (\n    leftTimestamp.seconds === rightTimestamp.seconds &&\n    leftTimestamp.nanos === rightTimestamp.nanos\n  );\n}\n\nfunction geoPointEquals(left: api.Value, right: api.Value): boolean {\n  return (\n    normalizeNumber(left.geoPointValue!.latitude) ===\n      normalizeNumber(right.geoPointValue!.latitude) &&\n    normalizeNumber(left.geoPointValue!.longitude) ===\n      normalizeNumber(right.geoPointValue!.longitude)\n  );\n}\n\nfunction blobEquals(left: api.Value, right: api.Value): boolean {\n  return normalizeByteString(left.bytesValue!).isEqual(\n    normalizeByteString(right.bytesValue!)\n  );\n}\n\nexport function numberEquals(left: api.Value, right: api.Value): boolean {\n  if ('integerValue' in left && 'integerValue' in right) {\n    return (\n      normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue)\n    );\n  } else if ('doubleValue' in left && 'doubleValue' in right) {\n    const n1 = normalizeNumber(left.doubleValue!);\n    const n2 = normalizeNumber(right.doubleValue!);\n\n    if (n1 === n2) {\n      return isNegativeZero(n1) === isNegativeZero(n2);\n    } else {\n      return isNaN(n1) && isNaN(n2);\n    }\n  }\n\n  return false;\n}\n\nfunction objectEquals(left: api.Value, right: api.Value): boolean {\n  const leftMap = left.mapValue!.fields || {};\n  const rightMap = right.mapValue!.fields || {};\n\n  if (objectSize(leftMap) !== objectSize(rightMap)) {\n    return false;\n  }\n\n  for (const key in leftMap) {\n    if (leftMap.hasOwnProperty(key)) {\n      if (\n        rightMap[key] === undefined ||\n        !valueEquals(leftMap[key], rightMap[key])\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/** Returns true if the ArrayValue contains the specified element. */\nexport function arrayValueContains(\n  haystack: api.ArrayValue,\n  needle: api.Value\n): boolean {\n  return (\n    (haystack.values || []).find(v => valueEquals(v, needle)) !== undefined\n  );\n}\n\nexport function valueCompare(left: api.Value, right: api.Value): number {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n\n  if (leftType !== rightType) {\n    return primitiveComparator(leftType, rightType);\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return 0;\n    case TypeOrder.BooleanValue:\n      return primitiveComparator(left.booleanValue!, right.booleanValue!);\n    case TypeOrder.NumberValue:\n      return compareNumbers(left, right);\n    case TypeOrder.TimestampValue:\n      return compareTimestamps(left.timestampValue!, right.timestampValue!);\n    case TypeOrder.ServerTimestampValue:\n      return compareTimestamps(\n        getLocalWriteTime(left),\n        getLocalWriteTime(right)\n      );\n    case TypeOrder.StringValue:\n      return primitiveComparator(left.stringValue!, right.stringValue!);\n    case TypeOrder.BlobValue:\n      return compareBlobs(left.bytesValue!, right.bytesValue!);\n    case TypeOrder.RefValue:\n      return compareReferences(left.referenceValue!, right.referenceValue!);\n    case TypeOrder.GeoPointValue:\n      return compareGeoPoints(left.geoPointValue!, right.geoPointValue!);\n    case TypeOrder.ArrayValue:\n      return compareArrays(left.arrayValue!, right.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return compareMaps(left.mapValue!, right.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + leftType);\n  }\n}\n\nfunction compareNumbers(left: api.Value, right: api.Value): number {\n  const leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\n  const rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\n\n  if (leftNumber < rightNumber) {\n    return -1;\n  } else if (leftNumber > rightNumber) {\n    return 1;\n  } else if (leftNumber === rightNumber) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(leftNumber)) {\n      return isNaN(rightNumber) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\nfunction compareTimestamps(left: api.Timestamp, right: api.Timestamp): number {\n  if (\n    typeof left === 'string' &&\n    typeof right === 'string' &&\n    left.length === right.length\n  ) {\n    return primitiveComparator(left, right);\n  }\n\n  const leftTimestamp = normalizeTimestamp(left);\n  const rightTimestamp = normalizeTimestamp(right);\n\n  const comparison = primitiveComparator(\n    leftTimestamp.seconds,\n    rightTimestamp.seconds\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\n}\n\nfunction compareReferences(leftPath: string, rightPath: string): number {\n  const leftSegments = leftPath.split('/');\n  const rightSegments = rightPath.split('/');\n  for (let i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\n    const comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return primitiveComparator(leftSegments.length, rightSegments.length);\n}\n\nfunction compareGeoPoints(left: api.LatLng, right: api.LatLng): number {\n  const comparison = primitiveComparator(\n    normalizeNumber(left.latitude),\n    normalizeNumber(right.latitude)\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(\n    normalizeNumber(left.longitude),\n    normalizeNumber(right.longitude)\n  );\n}\n\nfunction compareBlobs(\n  left: string | Uint8Array,\n  right: string | Uint8Array\n): number {\n  const leftBytes = normalizeByteString(left);\n  const rightBytes = normalizeByteString(right);\n  return leftBytes.compareTo(rightBytes);\n}\n\nfunction compareArrays(left: api.ArrayValue, right: api.ArrayValue): number {\n  const leftArray = left.values || [];\n  const rightArray = right.values || [];\n\n  for (let i = 0; i < leftArray.length && i < rightArray.length; ++i) {\n    const compare = valueCompare(leftArray[i], rightArray[i]);\n    if (compare) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftArray.length, rightArray.length);\n}\n\nfunction compareMaps(left: api.MapValue, right: api.MapValue): number {\n  const leftMap = left.fields || {};\n  const leftKeys = Object.keys(leftMap);\n  const rightMap = right.fields || {};\n  const rightKeys = Object.keys(rightMap);\n\n  // Even though MapValues are likely sorted correctly based on their insertion\n  // order (e.g. when received from the backend), local modifications can bring\n  // elements out of order. We need to re-sort the elements to ensure that\n  // canonical IDs are independent of insertion order.\n  leftKeys.sort();\n  rightKeys.sort();\n\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\n    const keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\n    if (keyCompare !== 0) {\n      return keyCompare;\n    }\n    const compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n\n  return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n\n/**\n * Generates the canonical ID for the provided field value (as used in Target\n * serialization).\n */\nexport function canonicalId(value: api.Value): string {\n  return canonifyValue(value);\n}\n\nfunction canonifyValue(value: api.Value): string {\n  if ('nullValue' in value) {\n    return 'null';\n  } else if ('booleanValue' in value) {\n    return '' + value.booleanValue!;\n  } else if ('integerValue' in value) {\n    return '' + value.integerValue!;\n  } else if ('doubleValue' in value) {\n    return '' + value.doubleValue!;\n  } else if ('timestampValue' in value) {\n    return canonifyTimestamp(value.timestampValue!);\n  } else if ('stringValue' in value) {\n    return value.stringValue!;\n  } else if ('bytesValue' in value) {\n    return canonifyByteString(value.bytesValue!);\n  } else if ('referenceValue' in value) {\n    return canonifyReference(value.referenceValue!);\n  } else if ('geoPointValue' in value) {\n    return canonifyGeoPoint(value.geoPointValue!);\n  } else if ('arrayValue' in value) {\n    return canonifyArray(value.arrayValue!);\n  } else if ('mapValue' in value) {\n    return canonifyMap(value.mapValue!);\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction canonifyByteString(byteString: string | Uint8Array): string {\n  return normalizeByteString(byteString).toBase64();\n}\n\nfunction canonifyTimestamp(timestamp: api.Timestamp): string {\n  const normalizedTimestamp = normalizeTimestamp(timestamp);\n  return `time(${normalizedTimestamp.seconds},${normalizedTimestamp.nanos})`;\n}\n\nfunction canonifyGeoPoint(geoPoint: api.LatLng): string {\n  return `geo(${geoPoint.latitude},${geoPoint.longitude})`;\n}\n\nfunction canonifyReference(referenceValue: string): string {\n  return DocumentKey.fromName(referenceValue).toString();\n}\n\nfunction canonifyMap(mapValue: api.MapValue): string {\n  // Iteration order in JavaScript is not guaranteed. To ensure that we generate\n  // matching canonical IDs for identical maps, we need to sort the keys.\n  const sortedKeys = Object.keys(mapValue.fields || {}).sort();\n\n  let result = '{';\n  let first = true;\n  for (const key of sortedKeys) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += `${key}:${canonifyValue(mapValue.fields![key])}`;\n  }\n  return result + '}';\n}\n\nfunction canonifyArray(arrayValue: api.ArrayValue): string {\n  let result = '[';\n  let first = true;\n  for (const value of arrayValue.values || []) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += canonifyValue(value);\n  }\n  return result + ']';\n}\n\n/**\n * Returns an approximate (and wildly inaccurate) in-memory size for the field\n * value.\n *\n * The memory size takes into account only the actual user data as it resides\n * in memory and ignores object overhead.\n */\nexport function estimateByteSize(value: api.Value): number {\n  switch (typeOrder(value)) {\n    case TypeOrder.NullValue:\n      return 4;\n    case TypeOrder.BooleanValue:\n      return 4;\n    case TypeOrder.NumberValue:\n      return 8;\n    case TypeOrder.TimestampValue:\n      // Timestamps are made up of two distinct numbers (seconds + nanoseconds)\n      return 16;\n    case TypeOrder.ServerTimestampValue:\n      const previousValue = getPreviousValue(value);\n      return previousValue ? 16 + estimateByteSize(previousValue) : 16;\n    case TypeOrder.StringValue:\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:\n      // \"JavaScript's String type is [...] a set of elements of 16-bit unsigned\n      // integer values\"\n      return value.stringValue!.length * 2;\n    case TypeOrder.BlobValue:\n      return normalizeByteString(value.bytesValue!).approximateByteSize();\n    case TypeOrder.RefValue:\n      return value.referenceValue!.length;\n    case TypeOrder.GeoPointValue:\n      // GeoPoints are made up of two distinct numbers (latitude + longitude)\n      return 16;\n    case TypeOrder.ArrayValue:\n      return estimateArrayByteSize(value.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return estimateMapByteSize(value.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction estimateMapByteSize(mapValue: api.MapValue): number {\n  let size = 0;\n  forEach(mapValue.fields || {}, (key, val) => {\n    size += key.length + estimateByteSize(val);\n  });\n  return size;\n}\n\nfunction estimateArrayByteSize(arrayValue: api.ArrayValue): number {\n  return (arrayValue.values || []).reduce(\n    (previousSize, value) => previousSize + estimateByteSize(value),\n    0\n  );\n}\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nexport function normalizeTimestamp(\n  date: api.Timestamp\n): { seconds: number; nanos: number } {\n  hardAssert(!!date, 'Cannot normalize null or undefined timestamp.');\n\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (typeof date === 'string') {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n\n    // Parse the nanos right out of the string.\n    let nanos = 0;\n    const fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\n    hardAssert(!!fraction, 'invalid timestamp: ' + date);\n    if (fraction[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let nanoStr = fraction[1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = Number(nanoStr);\n    }\n\n    // Parse the date to get the seconds.\n    const parsedDate = new Date(date);\n    const seconds = Math.floor(parsedDate.getTime() / 1000);\n\n    return { seconds, nanos };\n  } else {\n    // TODO(b/37282237): Use strings for Proto3 timestamps\n    // assert(!this.options.useProto3Json,\n    //   'The timestamp instance format requires Proto JS.');\n    const seconds = normalizeNumber(date.seconds);\n    const nanos = normalizeNumber(date.nanos);\n    return { seconds, nanos };\n  }\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nexport function normalizeNumber(value: number | string | undefined): number {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return Number(value);\n  } else {\n    return 0;\n  }\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */\nexport function normalizeByteString(blob: string | Uint8Array): ByteString {\n  if (typeof blob === 'string') {\n    return ByteString.fromBase64String(blob);\n  } else {\n    return ByteString.fromUint8Array(blob);\n  }\n}\n\n/** Returns a reference value for the provided database and key. */\nexport function refValue(databaseId: DatabaseId, key: DocumentKey): api.Value {\n  return {\n    referenceValue: `projects/${databaseId.projectId}/databases/${\n      databaseId.database\n    }/documents/${key.path.canonicalString()}`\n  };\n}\n\n/** Returns true if `value` is an IntegerValue . */\nexport function isInteger(\n  value?: api.Value | null\n): value is { integerValue: string | number } {\n  return !!value && 'integerValue' in value;\n}\n\n/** Returns true if `value` is a DoubleValue. */\nexport function isDouble(\n  value?: api.Value | null\n): value is { doubleValue: string | number } {\n  return !!value && 'doubleValue' in value;\n}\n\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\nexport function isNumber(value?: api.Value | null): boolean {\n  return isInteger(value) || isDouble(value);\n}\n\n/** Returns true if `value` is an ArrayValue. */\nexport function isArray(\n  value?: api.Value | null\n): value is { arrayValue: api.ArrayValue } {\n  return !!value && 'arrayValue' in value;\n}\n\n/** Returns true if `value` is a ReferenceValue. */\nexport function isReferenceValue(\n  value?: api.Value | null\n): value is { referenceValue: string } {\n  return !!value && 'referenceValue' in value;\n}\n\n/** Returns true if `value` is a NullValue. */\nexport function isNullValue(\n  value?: api.Value | null\n): value is { nullValue: 'NULL_VALUE' } {\n  return !!value && 'nullValue' in value;\n}\n\n/** Returns true if `value` is NaN. */\nexport function isNanValue(\n  value?: api.Value | null\n): value is { doubleValue: 'NaN' | number } {\n  return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */\nexport function isMapValue(\n  value?: api.Value | null\n): value is { mapValue: api.MapValue } {\n  return !!value && 'mapValue' in value;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\nimport { isNullOrUndefined } from '../util/types';\nimport {\n  Bound,\n  boundEquals,\n  canonifyBound,\n  canonifyFilter,\n  filterEquals,\n  stringifyFilter,\n  OrderBy,\n  orderByEquals,\n  stringifyOrderBy,\n  canonifyOrderBy,\n  Filter\n} from './query';\nimport { debugCast } from '../util/assert';\n\n/**\n * A Target represents the WatchTarget representation of a Query, which is used\n * by the LocalStore and the RemoteStore to keep track of and to execute\n * backend queries. While a Query can represent multiple Targets, each Targets\n * maps to a single WatchTarget in RemoteStore and a single TargetData entry\n * in persistence.\n */\nexport interface Target {\n  readonly path: ResourcePath;\n  readonly collectionGroup: string | null;\n  readonly orderBy: OrderBy[];\n  readonly filters: Filter[];\n  readonly limit: number | null;\n  readonly startAt: Bound | null;\n  readonly endAt: Bound | null;\n}\n\n// Visible for testing\nexport class TargetImpl implements Target {\n  memoizedCanonicalId: string | null = null;\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly orderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {}\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */\nexport function newTarget(\n  path: ResourcePath,\n  collectionGroup: string | null = null,\n  orderBy: OrderBy[] = [],\n  filters: Filter[] = [],\n  limit: number | null = null,\n  startAt: Bound | null = null,\n  endAt: Bound | null = null\n): Target {\n  return new TargetImpl(\n    path,\n    collectionGroup,\n    orderBy,\n    filters,\n    limit,\n    startAt,\n    endAt\n  );\n}\n\nexport function canonifyTarget(target: Target): string {\n  const targetImpl = debugCast(target, TargetImpl);\n\n  if (targetImpl.memoizedCanonicalId === null) {\n    let canonicalId = targetImpl.path.canonicalString();\n    if (targetImpl.collectionGroup !== null) {\n      canonicalId += '|cg:' + targetImpl.collectionGroup;\n    }\n    canonicalId += '|f:';\n    canonicalId += targetImpl.filters.map(f => canonifyFilter(f)).join(',');\n    canonicalId += '|ob:';\n    canonicalId += targetImpl.orderBy.map(o => canonifyOrderBy(o)).join(',');\n\n    if (!isNullOrUndefined(targetImpl.limit)) {\n      canonicalId += '|l:';\n      canonicalId += targetImpl.limit!;\n    }\n    if (targetImpl.startAt) {\n      canonicalId += '|lb:';\n      canonicalId += canonifyBound(targetImpl.startAt);\n    }\n    if (targetImpl.endAt) {\n      canonicalId += '|ub:';\n      canonicalId += canonifyBound(targetImpl.endAt);\n    }\n    targetImpl.memoizedCanonicalId = canonicalId;\n  }\n  return targetImpl.memoizedCanonicalId;\n}\n\nexport function stringifyTarget(target: Target): string {\n  let str = target.path.canonicalString();\n  if (target.collectionGroup !== null) {\n    str += ' collectionGroup=' + target.collectionGroup;\n  }\n  if (target.filters.length > 0) {\n    str += `, filters: [${target.filters\n      .map(f => stringifyFilter(f))\n      .join(', ')}]`;\n  }\n  if (!isNullOrUndefined(target.limit)) {\n    str += ', limit: ' + target.limit;\n  }\n  if (target.orderBy.length > 0) {\n    str += `, orderBy: [${target.orderBy\n      .map(o => stringifyOrderBy(o))\n      .join(', ')}]`;\n  }\n  if (target.startAt) {\n    str += ', startAt: ' + canonifyBound(target.startAt);\n  }\n  if (target.endAt) {\n    str += ', endAt: ' + canonifyBound(target.endAt);\n  }\n  return `Target(${str})`;\n}\n\nexport function targetEquals(left: Target, right: Target): boolean {\n  if (left.limit !== right.limit) {\n    return false;\n  }\n\n  if (left.orderBy.length !== right.orderBy.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.orderBy.length; i++) {\n    if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {\n      return false;\n    }\n  }\n\n  if (left.filters.length !== right.filters.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.filters.length; i++) {\n    if (!filterEquals(left.filters[i], right.filters[i])) {\n      return false;\n    }\n  }\n\n  if (left.collectionGroup !== right.collectionGroup) {\n    return false;\n  }\n\n  if (!left.path.isEqual(right.path)) {\n    return false;\n  }\n\n  if (!boundEquals(left.startAt, right.startAt)) {\n    return false;\n  }\n\n  return boundEquals(left.endAt, right.endAt);\n}\n\nexport function isDocumentTarget(target: Target): boolean {\n  return (\n    DocumentKey.isDocumentKey(target.path) &&\n    target.collectionGroup === null &&\n    target.filters.length === 0\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { compareDocumentsByField, Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  arrayValueContains,\n  canonicalId,\n  isArray,\n  isNanValue,\n  isNullValue,\n  isReferenceValue,\n  typeOrder,\n  valueCompare,\n  valueEquals\n} from '../model/values';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\nimport {\n  canonifyTarget,\n  newTarget,\n  stringifyTarget,\n  Target,\n  targetEquals\n} from './target';\nimport { cast } from '../../lite/src/api/util';\n\nexport const enum LimitType {\n  First = 'F',\n  Last = 'L'\n}\n\n/**\n * The Query interface defines all external properties of a query.\n *\n * QueryImpl implements this interface to provide memoization for `queryOrderBy`\n * and `queryToTarget`.\n */\nexport interface Query {\n  readonly path: ResourcePath;\n  readonly collectionGroup: string | null;\n  readonly explicitOrderBy: OrderBy[];\n  readonly filters: Filter[];\n  readonly limit: number | null;\n  readonly limitType: LimitType;\n  readonly startAt: Bound | null;\n  readonly endAt: Bound | null;\n\n  hasLimitToFirst(): boolean;\n  hasLimitToLast(): boolean;\n  getFirstOrderByField(): FieldPath | null;\n  getInequalityFilterField(): FieldPath | null;\n  asCollectionQueryAtPath(path: ResourcePath): Query;\n\n  /**\n   * Returns true if this query does not specify any query constraints that\n   * could remove results.\n   */\n  matchesAllDocuments(): boolean;\n\n  // Checks if any of the provided Operators are included in the query and\n  // returns the first one that is, or null if none are.\n  findFilterOperator(operators: Operator[]): Operator | null;\n}\n\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nexport class QueryImpl implements Query {\n  memoizedOrderBy: OrderBy[] | null = null;\n\n  // The corresponding `Target` of this `Query` instance.\n  memoizedTarget: Target | null = null;\n\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly explicitOrderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly limitType: LimitType = LimitType.First,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {\n    if (this.startAt) {\n      debugAssert(\n        this.startAt.position.length <= queryOrderBy(this).length,\n        'Bound is longer than orderBy'\n      );\n    }\n    if (this.endAt) {\n      debugAssert(\n        this.endAt.position.length <= queryOrderBy(this).length,\n        'Bound is longer than orderBy'\n      );\n    }\n  }\n\n  /**\n   * Helper to convert a collection group query into a collection query at a\n   * specific path. This is used when executing collection group queries, since\n   * we have to split the query into a set of collection queries at multiple\n   * paths.\n   */\n  asCollectionQueryAtPath(path: ResourcePath): Query {\n    return new QueryImpl(\n      path,\n      /*collectionGroup=*/ null,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  matchesAllDocuments(): boolean {\n    return (\n      this.filters.length === 0 &&\n      this.limit === null &&\n      this.startAt == null &&\n      this.endAt == null &&\n      (this.explicitOrderBy.length === 0 ||\n        (this.explicitOrderBy.length === 1 &&\n          this.explicitOrderBy[0].field.isKeyField()))\n    );\n  }\n\n  hasLimitToFirst(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.First;\n  }\n\n  hasLimitToLast(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.Last;\n  }\n\n  getFirstOrderByField(): FieldPath | null {\n    return this.explicitOrderBy.length > 0\n      ? this.explicitOrderBy[0].field\n      : null;\n  }\n\n  getInequalityFilterField(): FieldPath | null {\n    for (const filter of this.filters) {\n      debugAssert(\n        filter instanceof FieldFilter,\n        'Only FieldFilters are supported'\n      );\n      if (filter.isInequality()) {\n        return filter.field;\n      }\n    }\n    return null;\n  }\n\n  findFilterOperator(operators: Operator[]): Operator | null {\n    for (const filter of this.filters) {\n      debugAssert(\n        filter instanceof FieldFilter,\n        'Only FieldFilters are supported'\n      );\n      if (operators.indexOf(filter.op) >= 0) {\n        return filter.op;\n      }\n    }\n    return null;\n  }\n}\n\n/** Creates a new Query instance with the options provided. */\nexport function newQuery(\n  path: ResourcePath,\n  collectionGroup: string | null,\n  explicitOrderBy: OrderBy[],\n  filters: Filter[],\n  limit: number | null,\n  limitType: LimitType,\n  startAt: Bound | null,\n  endAt: Bound | null\n): Query {\n  return new QueryImpl(\n    path,\n    collectionGroup,\n    explicitOrderBy,\n    filters,\n    limit,\n    limitType,\n    startAt,\n    endAt\n  );\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */\nexport function newQueryForPath(path: ResourcePath): Query {\n  return new QueryImpl(path);\n}\n\n/**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\nexport function newQueryForCollectionGroup(collectionId: string): Query {\n  return new QueryImpl(ResourcePath.emptyPath(), collectionId);\n}\n\n/**\n * Returns whether the query matches a single document by path (rather than a\n * collection).\n */\nexport function isDocumentQuery(query: Query): boolean {\n  return (\n    DocumentKey.isDocumentKey(query.path) &&\n    query.collectionGroup === null &&\n    query.filters.length === 0\n  );\n}\n\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nexport function isCollectionGroupQuery(query: Query): boolean {\n  return query.collectionGroup !== null;\n}\n\n/**\n * Returns the implicit order by constraint that is used to execute the Query,\n * which can be different from the order by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`).\n */\nexport function queryOrderBy(query: Query): OrderBy[] {\n  const queryImpl = cast(query, QueryImpl);\n  if (queryImpl.memoizedOrderBy === null) {\n    queryImpl.memoizedOrderBy = [];\n\n    const inequalityField = queryImpl.getInequalityFilterField();\n    const firstOrderByField = queryImpl.getFirstOrderByField();\n    if (inequalityField !== null && firstOrderByField === null) {\n      // In order to implicitly add key ordering, we must also add the\n      // inequality filter field for it to be a valid query.\n      // Note that the default inequality field and key ordering is ascending.\n      if (!inequalityField.isKeyField()) {\n        queryImpl.memoizedOrderBy.push(new OrderBy(inequalityField));\n      }\n      queryImpl.memoizedOrderBy.push(\n        new OrderBy(FieldPath.keyField(), Direction.ASCENDING)\n      );\n    } else {\n      debugAssert(\n        inequalityField === null ||\n          (firstOrderByField !== null &&\n            inequalityField.isEqual(firstOrderByField)),\n        'First orderBy should match inequality field.'\n      );\n      let foundKeyOrdering = false;\n      for (const orderBy of queryImpl.explicitOrderBy) {\n        queryImpl.memoizedOrderBy.push(orderBy);\n        if (orderBy.field.isKeyField()) {\n          foundKeyOrdering = true;\n        }\n      }\n      if (!foundKeyOrdering) {\n        // The order of the implicit key ordering always matches the last\n        // explicit order by\n        const lastDirection =\n          queryImpl.explicitOrderBy.length > 0\n            ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1]\n                .dir\n            : Direction.ASCENDING;\n        queryImpl.memoizedOrderBy.push(\n          new OrderBy(FieldPath.keyField(), lastDirection)\n        );\n      }\n    }\n  }\n  return queryImpl.memoizedOrderBy;\n}\n\n/**\n * Converts this `Query` instance to it's corresponding `Target` representation.\n */\nexport function queryToTarget(query: Query): Target {\n  const queryImpl = cast(query, QueryImpl);\n  if (!queryImpl.memoizedTarget) {\n    if (queryImpl.limitType === LimitType.First) {\n      queryImpl.memoizedTarget = newTarget(\n        queryImpl.path,\n        queryImpl.collectionGroup,\n        queryOrderBy(queryImpl),\n        queryImpl.filters,\n        queryImpl.limit,\n        queryImpl.startAt,\n        queryImpl.endAt\n      );\n    } else {\n      // Flip the orderBy directions since we want the last results\n      const orderBys = [] as OrderBy[];\n      for (const orderBy of queryOrderBy(queryImpl)) {\n        const dir =\n          orderBy.dir === Direction.DESCENDING\n            ? Direction.ASCENDING\n            : Direction.DESCENDING;\n        orderBys.push(new OrderBy(orderBy.field, dir));\n      }\n\n      // We need to swap the cursors to match the now-flipped query ordering.\n      const startAt = queryImpl.endAt\n        ? new Bound(queryImpl.endAt.position, !queryImpl.endAt.before)\n        : null;\n      const endAt = queryImpl.startAt\n        ? new Bound(queryImpl.startAt.position, !queryImpl.startAt.before)\n        : null;\n\n      // Now return as a LimitType.First query.\n      queryImpl.memoizedTarget = newTarget(\n        queryImpl.path,\n        queryImpl.collectionGroup,\n        orderBys,\n        queryImpl.filters,\n        queryImpl.limit,\n        startAt,\n        endAt\n      );\n    }\n  }\n  return queryImpl.memoizedTarget!;\n}\n\nexport function queryWithAddedFilter(query: Query, filter: Filter): Query {\n  debugAssert(\n    query.getInequalityFilterField() == null ||\n      !(filter instanceof FieldFilter) ||\n      !filter.isInequality() ||\n      filter.field.isEqual(query.getInequalityFilterField()!),\n    'Query must only have one inequality field.'\n  );\n\n  debugAssert(\n    !isDocumentQuery(query),\n    'No filtering allowed for document query'\n  );\n\n  const newFilters = query.filters.concat([filter]);\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    newFilters,\n    query.limit,\n    query.limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithAddedOrderBy(query: Query, orderBy: OrderBy): Query {\n  debugAssert(\n    !query.startAt && !query.endAt,\n    'Bounds must be set after orderBy'\n  );\n  // TODO(dimond): validate that orderBy does not list the same key twice.\n  const newOrderBy = query.explicitOrderBy.concat([orderBy]);\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    newOrderBy,\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithLimit(\n  query: Query,\n  limit: number,\n  limitType: LimitType\n): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    limit,\n    limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithStartAt(query: Query, bound: Bound): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    bound,\n    query.endAt\n  );\n}\n\nexport function queryWithEndAt(query: Query, bound: Bound): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    query.startAt,\n    bound\n  );\n}\n\nexport function queryEquals(left: Query, right: Query): boolean {\n  return (\n    targetEquals(queryToTarget(left), queryToTarget(right)) &&\n    left.limitType === right.limitType\n  );\n}\n\n// TODO(b/29183165): This is used to get a unique string from a query to, for\n// example, use as a dictionary key, but the implementation is subject to\n// collisions. Make it collision-free.\nexport function canonifyQuery(query: Query): string {\n  return `${canonifyTarget(queryToTarget(query))}|lt:${query.limitType}`;\n}\n\nexport function stringifyQuery(query: Query): string {\n  return `Query(target=${stringifyTarget(queryToTarget(query))}; limitType=${\n    query.limitType\n  })`;\n}\n\n/** Returns whether `doc` matches the constraints of `query`. */\nexport function queryMatches(query: Query, doc: Document): boolean {\n  return (\n    queryMatchesPathAndCollectionGroup(query, doc) &&\n    queryMatchesOrderBy(query, doc) &&\n    queryMatchesFilters(query, doc) &&\n    queryMatchesBounds(query, doc)\n  );\n}\n\nfunction queryMatchesPathAndCollectionGroup(\n  query: Query,\n  doc: Document\n): boolean {\n  const docPath = doc.key.path;\n  if (query.collectionGroup !== null) {\n    // NOTE: this.path is currently always empty since we don't expose Collection\n    // Group queries rooted at a document path yet.\n    return (\n      doc.key.hasCollectionId(query.collectionGroup) &&\n      query.path.isPrefixOf(docPath)\n    );\n  } else if (DocumentKey.isDocumentKey(query.path)) {\n    // exact match for document queries\n    return query.path.isEqual(docPath);\n  } else {\n    // shallow ancestor queries by default\n    return query.path.isImmediateParentOf(docPath);\n  }\n}\n\n/**\n * A document must have a value for every ordering clause in order to show up\n * in the results.\n */\nfunction queryMatchesOrderBy(query: Query, doc: Document): boolean {\n  for (const orderBy of query.explicitOrderBy) {\n    // order by key always matches\n    if (!orderBy.field.isKeyField() && doc.field(orderBy.field) === null) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction queryMatchesFilters(query: Query, doc: Document): boolean {\n  for (const filter of query.filters) {\n    if (!filter.matches(doc)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** Makes sure a document is within the bounds, if provided. */\nfunction queryMatchesBounds(query: Query, doc: Document): boolean {\n  if (\n    query.startAt &&\n    !sortsBeforeDocument(query.startAt, queryOrderBy(query), doc)\n  ) {\n    return false;\n  }\n  if (\n    query.endAt &&\n    sortsBeforeDocument(query.endAt, queryOrderBy(query), doc)\n  ) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns a new comparator function that can be used to compare two documents\n * based on the Query's ordering constraint.\n */\nexport function newQueryComparator(\n  query: Query\n): (d1: Document, d2: Document) => number {\n  return (d1: Document, d2: Document): number => {\n    let comparedOnKeyField = false;\n    for (const orderBy of queryOrderBy(query)) {\n      const comp = compareDocs(orderBy, d1, d2);\n      if (comp !== 0) {\n        return comp;\n      }\n      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n    }\n    // Assert that we actually compared by key\n    debugAssert(\n      comparedOnKeyField,\n      \"orderBy used that doesn't compare on key field\"\n    );\n    return 0;\n  };\n}\n\nexport abstract class Filter {\n  abstract matches(doc: Document): boolean;\n}\n\nexport const enum Operator {\n  LESS_THAN = '<',\n  LESS_THAN_OR_EQUAL = '<=',\n  EQUAL = '==',\n  NOT_EQUAL = '!=',\n  GREATER_THAN = '>',\n  GREATER_THAN_OR_EQUAL = '>=',\n  ARRAY_CONTAINS = 'array-contains',\n  IN = 'in',\n  NOT_IN = 'not-in',\n  ARRAY_CONTAINS_ANY = 'array-contains-any'\n}\n\nexport class FieldFilter extends Filter {\n  protected constructor(\n    public field: FieldPath,\n    public op: Operator,\n    public value: api.Value\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(field: FieldPath, op: Operator, value: api.Value): FieldFilter {\n    if (field.isKeyField()) {\n      if (op === Operator.IN || op === Operator.NOT_IN) {\n        return this.createKeyFieldInFilter(field, op, value);\n      } else {\n        debugAssert(\n          isReferenceValue(value),\n          'Comparing on key, but filter value not a RefValue'\n        );\n        debugAssert(\n          op !== Operator.ARRAY_CONTAINS && op !== Operator.ARRAY_CONTAINS_ANY,\n          `'${op.toString()}' queries don't make sense on document keys.`\n        );\n        return new KeyFieldFilter(field, op, value);\n      }\n    } else if (isNullValue(value)) {\n      if (op !== Operator.EQUAL && op !== Operator.NOT_EQUAL) {\n        // TODO(ne-queries): Update error message to include != comparison.\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. Null supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (isNanValue(value)) {\n      if (op !== Operator.EQUAL && op !== Operator.NOT_EQUAL) {\n        // TODO(ne-queries): Update error message to include != comparison.\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. NaN supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (op === Operator.ARRAY_CONTAINS) {\n      return new ArrayContainsFilter(field, value);\n    } else if (op === Operator.IN) {\n      debugAssert(\n        isArray(value),\n        'IN filter has invalid value: ' + value.toString()\n      );\n      return new InFilter(field, value);\n    } else if (op === Operator.NOT_IN) {\n      debugAssert(\n        isArray(value),\n        'NOT_IN filter has invalid value: ' + value.toString()\n      );\n      return new NotInFilter(field, value);\n    } else if (op === Operator.ARRAY_CONTAINS_ANY) {\n      debugAssert(\n        isArray(value),\n        'ARRAY_CONTAINS_ANY filter has invalid value: ' + value.toString()\n      );\n      return new ArrayContainsAnyFilter(field, value);\n    } else {\n      return new FieldFilter(field, op, value);\n    }\n  }\n\n  private static createKeyFieldInFilter(\n    field: FieldPath,\n    op: Operator.IN | Operator.NOT_IN,\n    value: api.Value\n  ): FieldFilter {\n    debugAssert(\n      isArray(value),\n      `Comparing on key with ${op.toString()}` +\n        ', but filter value not an ArrayValue'\n    );\n    debugAssert(\n      (value.arrayValue.values || []).every(elem => isReferenceValue(elem)),\n      `Comparing on key with ${op.toString()}` +\n        ', but an array value was not a RefValue'\n    );\n\n    return op === Operator.IN\n      ? new KeyFieldInFilter(field, value)\n      : new KeyFieldNotInFilter(field, value);\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    // Types do not have to match in NOT_EQUAL filters.\n    if (this.op === Operator.NOT_EQUAL) {\n      return (\n        other !== null &&\n        this.matchesComparison(valueCompare(other!, this.value))\n      );\n    }\n\n    // Only compare types with matching backend order (such as double and int).\n    return (\n      other !== null &&\n      typeOrder(this.value) === typeOrder(other) &&\n      this.matchesComparison(valueCompare(other, this.value))\n    );\n  }\n\n  protected matchesComparison(comparison: number): boolean {\n    switch (this.op) {\n      case Operator.LESS_THAN:\n        return comparison < 0;\n      case Operator.LESS_THAN_OR_EQUAL:\n        return comparison <= 0;\n      case Operator.EQUAL:\n        return comparison === 0;\n      case Operator.NOT_EQUAL:\n        return comparison !== 0;\n      case Operator.GREATER_THAN:\n        return comparison > 0;\n      case Operator.GREATER_THAN_OR_EQUAL:\n        return comparison >= 0;\n      default:\n        return fail('Unknown FieldFilter operator: ' + this.op);\n    }\n  }\n\n  isInequality(): boolean {\n    return (\n      [\n        Operator.LESS_THAN,\n        Operator.LESS_THAN_OR_EQUAL,\n        Operator.GREATER_THAN,\n        Operator.GREATER_THAN_OR_EQUAL,\n        Operator.NOT_EQUAL\n      ].indexOf(this.op) >= 0\n    );\n  }\n}\n\nexport function canonifyFilter(filter: Filter): string {\n  debugAssert(\n    filter instanceof FieldFilter,\n    'canonifyFilter() only supports FieldFilters'\n  );\n  // TODO(b/29183165): Technically, this won't be unique if two values have\n  // the same description, such as the int 3 and the string \"3\". So we should\n  // add the types in here somehow, too.\n  return (\n    filter.field.canonicalString() +\n    filter.op.toString() +\n    canonicalId(filter.value)\n  );\n}\n\nexport function filterEquals(f1: Filter, f2: Filter): boolean {\n  debugAssert(\n    f1 instanceof FieldFilter && f2 instanceof FieldFilter,\n    'Only FieldFilters can be compared'\n  );\n\n  return (\n    f1.op === f2.op &&\n    f1.field.isEqual(f2.field) &&\n    valueEquals(f1.value, f2.value)\n  );\n}\n\n/** Returns a debug description for `filter`. */\nexport function stringifyFilter(filter: Filter): string {\n  debugAssert(\n    filter instanceof FieldFilter,\n    'stringifyFilter() only supports FieldFilters'\n  );\n  return `${filter.field.canonicalString()} ${filter.op} ${canonicalId(\n    filter.value\n  )}`;\n}\n\n/** Filter that matches on key fields (i.e. '__name__'). */\nexport class KeyFieldFilter extends FieldFilter {\n  private readonly key: DocumentKey;\n\n  constructor(field: FieldPath, op: Operator, value: api.Value) {\n    super(field, op, value);\n    debugAssert(\n      isReferenceValue(value),\n      'KeyFieldFilter expects a ReferenceValue'\n    );\n    this.key = DocumentKey.fromName(value.referenceValue);\n  }\n\n  matches(doc: Document): boolean {\n    const comparison = DocumentKey.comparator(doc.key, this.key);\n    return this.matchesComparison(comparison);\n  }\n}\n\n/** Filter that matches on key fields within an array. */\nexport class KeyFieldInFilter extends FieldFilter {\n  private readonly keys: DocumentKey[];\n\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    this.keys = extractDocumentKeysFromArrayValue(Operator.IN, value);\n  }\n\n  matches(doc: Document): boolean {\n    return this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n\n/** Filter that matches on key fields not present within an array. */\nexport class KeyFieldNotInFilter extends FieldFilter {\n  private readonly keys: DocumentKey[];\n\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.NOT_IN, value);\n    this.keys = extractDocumentKeysFromArrayValue(Operator.NOT_IN, value);\n  }\n\n  matches(doc: Document): boolean {\n    return !this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n\nfunction extractDocumentKeysFromArrayValue(\n  op: Operator.IN | Operator.NOT_IN,\n  value: api.Value\n): DocumentKey[] {\n  debugAssert(\n    isArray(value),\n    'KeyFieldInFilter/KeyFieldNotInFilter expects an ArrayValue'\n  );\n  return (value.arrayValue?.values || []).map(v => {\n    debugAssert(\n      isReferenceValue(v),\n      `Comparing on key with ${op.toString()}, but an array value was not ` +\n        `a ReferenceValue`\n    );\n    return DocumentKey.fromName(v.referenceValue);\n  });\n}\n\n/** A Filter that implements the array-contains operator. */\nexport class ArrayContainsFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS, value);\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return isArray(other) && arrayValueContains(other.arrayValue, this.value);\n  }\n}\n\n/** A Filter that implements the IN operator. */\nexport class InFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'InFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return other !== null && arrayValueContains(this.value.arrayValue!, other);\n  }\n}\n\n/** A Filter that implements the not-in operator. */\nexport class NotInFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.NOT_IN, value);\n    debugAssert(isArray(value), 'NotInFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return other !== null && !arrayValueContains(this.value.arrayValue!, other);\n  }\n}\n\n/** A Filter that implements the array-contains-any operator. */\nexport class ArrayContainsAnyFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS_ANY, value);\n    debugAssert(isArray(value), 'ArrayContainsAnyFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    if (!isArray(other) || !other.arrayValue.values) {\n      return false;\n    }\n    return other.arrayValue.values.some(val =>\n      arrayValueContains(this.value.arrayValue!, val)\n    );\n  }\n}\n\n/**\n * The direction of sorting in an order by.\n */\nexport const enum Direction {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc'\n}\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nexport class Bound {\n  constructor(readonly position: api.Value[], readonly before: boolean) {}\n}\n\nexport function canonifyBound(bound: Bound): string {\n  // TODO(b/29183165): Make this collision robust.\n  return `${bound.before ? 'b' : 'a'}:${bound.position\n    .map(p => canonicalId(p))\n    .join(',')}`;\n}\n\n/**\n * Returns true if a document sorts before a bound using the provided sort\n * order.\n */\nexport function sortsBeforeDocument(\n  bound: Bound,\n  orderBy: OrderBy[],\n  doc: Document\n): boolean {\n  debugAssert(\n    bound.position.length <= orderBy.length,\n    \"Bound has more components than query's orderBy\"\n  );\n  let comparison = 0;\n  for (let i = 0; i < bound.position.length; i++) {\n    const orderByComponent = orderBy[i];\n    const component = bound.position[i];\n    if (orderByComponent.field.isKeyField()) {\n      debugAssert(\n        isReferenceValue(component),\n        'Bound has a non-key value where the key path is being used.'\n      );\n      comparison = DocumentKey.comparator(\n        DocumentKey.fromName(component.referenceValue),\n        doc.key\n      );\n    } else {\n      const docValue = doc.field(orderByComponent.field);\n      debugAssert(\n        docValue !== null,\n        'Field should exist since document matched the orderBy already.'\n      );\n      comparison = valueCompare(component, docValue);\n    }\n    if (orderByComponent.dir === Direction.DESCENDING) {\n      comparison = comparison * -1;\n    }\n    if (comparison !== 0) {\n      break;\n    }\n  }\n  return bound.before ? comparison <= 0 : comparison < 0;\n}\n\nexport function boundEquals(left: Bound | null, right: Bound | null): boolean {\n  if (left === null) {\n    return right === null;\n  } else if (right === null) {\n    return false;\n  }\n\n  if (\n    left.before !== right.before ||\n    left.position.length !== right.position.length\n  ) {\n    return false;\n  }\n  for (let i = 0; i < left.position.length; i++) {\n    const leftPosition = left.position[i];\n    const rightPosition = right.position[i];\n    if (!valueEquals(leftPosition, rightPosition)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nexport class OrderBy {\n  constructor(\n    readonly field: FieldPath,\n    readonly dir: Direction = Direction.ASCENDING\n  ) {}\n}\n\nexport function compareDocs(\n  orderBy: OrderBy,\n  d1: Document,\n  d2: Document\n): number {\n  const comparison = orderBy.field.isKeyField()\n    ? DocumentKey.comparator(d1.key, d2.key)\n    : compareDocumentsByField(orderBy.field, d1, d2);\n  switch (orderBy.dir) {\n    case Direction.ASCENDING:\n      return comparison;\n    case Direction.DESCENDING:\n      return -1 * comparison;\n    default:\n      return fail('Unknown direction: ' + orderBy.dir);\n  }\n}\n\nexport function canonifyOrderBy(orderBy: OrderBy): string {\n  // TODO(b/29183165): Make this collision robust.\n  return orderBy.field.canonicalString() + orderBy.dir;\n}\n\nexport function stringifyOrderBy(orderBy: OrderBy): string {\n  return `${orderBy.field.canonicalString()} (${orderBy.dir})`;\n}\n\nexport function orderByEquals(left: OrderBy, right: OrderBy): boolean {\n  return left.dir === right.dir && left.field.isEqual(right.field);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport { logError } from '../util/log';\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nenum RpcCode {\n  OK = 0,\n  CANCELLED = 1,\n  UNKNOWN = 2,\n  INVALID_ARGUMENT = 3,\n  DEADLINE_EXCEEDED = 4,\n  NOT_FOUND = 5,\n  ALREADY_EXISTS = 6,\n  PERMISSION_DENIED = 7,\n  UNAUTHENTICATED = 16,\n  RESOURCE_EXHAUSTED = 8,\n  FAILED_PRECONDITION = 9,\n  ABORTED = 10,\n  OUT_OF_RANGE = 11,\n  UNIMPLEMENTED = 12,\n  INTERNAL = 13,\n  UNAVAILABLE = 14,\n  DATA_LOSS = 15\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\nexport function isPermanentError(code: Code): boolean {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a write operation.\n *\n * Write operations must be handled specially because as of b/119437764, ABORTED\n * errors on the write stream should be retried too (even though ABORTED errors\n * are not generally retryable).\n *\n * Note that during the initial handshake on the write stream an ABORTED error\n * signals that we should discard our stream token (i.e. it is permanent). This\n * means a handshake error should be classified with isPermanentError, above.\n */\nexport function isPermanentWriteError(code: Code): boolean {\n  return isPermanentError(code) && code !== Code.ABORTED;\n}\n\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status: string): Code | undefined {\n  // lookup by string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const code: RpcCode = RpcCode[status as any] as any;\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code: number | undefined): Code {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    logError('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code: Code | undefined): number {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status?: number): Code {\n  if (status === undefined) {\n    logError('RPC_ERROR', 'HTTP error has no status');\n    return Code.UNKNOWN;\n  }\n\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200: // OK\n      return Code.OK;\n\n    case 400: // Bad Request\n      return Code.FAILED_PRECONDITION;\n    // Other possibilities based on the forward mapping\n    // return Code.INVALID_ARGUMENT;\n    // return Code.OUT_OF_RANGE;\n\n    case 401: // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403: // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404: // Not Found\n      return Code.NOT_FOUND;\n\n    case 409: // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416: // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429: // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499: // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500: // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501: // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503: // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504: // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) {\n        return Code.OK;\n      }\n      if (status >= 400 && status < 500) {\n        return Code.FAILED_PRECONDITION;\n      }\n      if (status >= 500 && status < 600) {\n        return Code.INTERNAL;\n      }\n      return Code.UNKNOWN;\n  }\n}\n\n/**\n * Converts an HTTP response's error status to the equivalent error code.\n *\n * @param status An HTTP error response status (\"FAILED_PRECONDITION\",\n * \"UNKNOWN\", etc.)\n * @returns The equivalent Code. Non-matching responses are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpResponseErrorStatus(status: string): Code {\n  const serverError = status.toLowerCase().replace('_', '-');\n  return Object.values(Code).indexOf(serverError as Code) >= 0\n    ? (serverError as Code)\n    : Code.UNKNOWN;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Blob } from '../api/blob';\nimport { Timestamp } from '../api/timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  LimitType,\n  newQuery,\n  newQueryForPath,\n  Operator,\n  OrderBy,\n  queryToTarget\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { isDocumentTarget, Target } from '../core/target';\nimport { TargetId } from '../core/types';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ObjectValue } from '../model/object_value';\nimport {\n  DeleteMutation,\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  MutationResult,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation,\n  VerifyMutation\n} from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { ByteString } from '../util/byte_string';\nimport {\n  isNegativeZero,\n  isNullOrUndefined,\n  isSafeInteger\n} from '../util/types';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform,\n  TransformOperation\n} from '../model/transform_operation';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  WatchChange,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { isNanValue, isNullValue, normalizeTimestamp } from '../model/values';\nimport {\n  TargetChangeTargetChangeType,\n  WriteResult\n} from '../protos/firestore_proto_api';\n\nconst DIRECTIONS = (() => {\n  const dirs: { [dir: string]: api.OrderDirection } = {};\n  dirs[Direction.ASCENDING] = 'ASCENDING';\n  dirs[Direction.DESCENDING] = 'DESCENDING';\n  return dirs;\n})();\n\nconst OPERATORS = (() => {\n  const ops: { [op: string]: api.FieldFilterOp } = {};\n  ops[Operator.LESS_THAN] = 'LESS_THAN';\n  ops[Operator.LESS_THAN_OR_EQUAL] = 'LESS_THAN_OR_EQUAL';\n  ops[Operator.GREATER_THAN] = 'GREATER_THAN';\n  ops[Operator.GREATER_THAN_OR_EQUAL] = 'GREATER_THAN_OR_EQUAL';\n  ops[Operator.EQUAL] = 'EQUAL';\n  ops[Operator.NOT_EQUAL] = 'NOT_EQUAL';\n  ops[Operator.ARRAY_CONTAINS] = 'ARRAY_CONTAINS';\n  ops[Operator.IN] = 'IN';\n  ops[Operator.NOT_IN] = 'NOT_IN';\n  ops[Operator.ARRAY_CONTAINS_ANY] = 'ARRAY_CONTAINS_ANY';\n  return ops;\n})();\n\nfunction assertPresent(value: unknown, description: string): asserts value {\n  debugAssert(!isNullOrUndefined(value), description + ' is missing');\n}\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nexport class JsonProtoSerializer {\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly useProto3Json: boolean\n  ) {}\n}\n\nfunction fromRpcStatus(status: api.Status): FirestoreError {\n  const code =\n    status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);\n  return new FirestoreError(code, status.message || '');\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\nfunction toInt32Proto(\n  serializer: JsonProtoSerializer,\n  val: number | null\n): number | { value: number } | null {\n  if (serializer.useProto3Json || isNullOrUndefined(val)) {\n    return val;\n  } else {\n    return { value: val };\n  }\n}\n\n/**\n * Returns a number (or null) from a google.protobuf.Int32Value proto.\n */\nfunction fromInt32Proto(\n  val: number | { value: number } | undefined\n): number | null {\n  let result;\n  if (typeof val === 'object') {\n    result = val.value;\n  } else {\n    result = val;\n  }\n  return isNullOrUndefined(result) ? null : result;\n}\n\n/**\n * Returns an IntegerValue for `value`.\n */\nexport function toInteger(value: number): api.Value {\n  return { integerValue: '' + value };\n}\n\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\nexport function toDouble(\n  serializer: JsonProtoSerializer,\n  value: number\n): api.Value {\n  if (serializer.useProto3Json) {\n    if (isNaN(value)) {\n      return { doubleValue: 'NaN' };\n    } else if (value === Infinity) {\n      return { doubleValue: 'Infinity' };\n    } else if (value === -Infinity) {\n      return { doubleValue: '-Infinity' };\n    }\n  }\n  return { doubleValue: isNegativeZero(value) ? '-0' : value };\n}\n\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nexport function toNumber(\n  serializer: JsonProtoSerializer,\n  value: number\n): api.Value {\n  return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);\n}\n\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nexport function toTimestamp(\n  serializer: JsonProtoSerializer,\n  timestamp: Timestamp\n): api.Timestamp {\n  if (serializer.useProto3Json) {\n    // Serialize to ISO-8601 date format, but with full nano resolution.\n    // Since JS Date has only millis, let's only use it for the seconds and\n    // then manually add the fractions to the end.\n    const jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\n    // Remove .xxx frac part and Z in the end.\n    const strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\n    // Pad the fraction out to 9 digits (nanos).\n    const nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\n\n    return `${strUntilSeconds}.${nanoStr}Z`;\n  } else {\n    return {\n      seconds: '' + timestamp.seconds,\n      nanos: timestamp.nanoseconds\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n  }\n}\n\nfunction fromTimestamp(date: api.Timestamp): Timestamp {\n  const timestamp = normalizeTimestamp(date);\n  return new Timestamp(timestamp.seconds, timestamp.nanos);\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nexport function toBytes(\n  serializer: JsonProtoSerializer,\n  bytes: Blob | ByteString\n): string | Uint8Array {\n  if (serializer.useProto3Json) {\n    return bytes.toBase64();\n  } else {\n    return bytes.toUint8Array();\n  }\n}\n\n/**\n * Returns a ByteString based on the proto string value.\n */\nexport function fromBytes(\n  serializer: JsonProtoSerializer,\n  value: string | Uint8Array | undefined\n): ByteString {\n  if (serializer.useProto3Json) {\n    hardAssert(\n      value === undefined || typeof value === 'string',\n      'value must be undefined or a string when using proto3 Json'\n    );\n    return ByteString.fromBase64String(value ? value : '');\n  } else {\n    hardAssert(\n      value === undefined || value instanceof Uint8Array,\n      'value must be undefined or Uint8Array'\n    );\n    return ByteString.fromUint8Array(value ? value : new Uint8Array());\n  }\n}\n\nexport function toVersion(\n  serializer: JsonProtoSerializer,\n  version: SnapshotVersion\n): api.Timestamp {\n  return toTimestamp(serializer, version.toTimestamp());\n}\n\nexport function fromVersion(version: api.Timestamp): SnapshotVersion {\n  hardAssert(!!version, \"Trying to deserialize version that isn't set\");\n  return SnapshotVersion.fromTimestamp(fromTimestamp(version));\n}\n\nexport function toResourceName(\n  databaseId: DatabaseId,\n  path: ResourcePath\n): string {\n  return fullyQualifiedPrefixPath(databaseId)\n    .child('documents')\n    .child(path)\n    .canonicalString();\n}\n\nfunction fromResourceName(name: string): ResourcePath {\n  const resource = ResourcePath.fromString(name);\n  hardAssert(\n    isValidResourceName(resource),\n    'Tried to deserialize invalid key ' + resource.toString()\n  );\n  return resource;\n}\n\nexport function toName(\n  serializer: JsonProtoSerializer,\n  key: DocumentKey\n): string {\n  return toResourceName(serializer.databaseId, key.path);\n}\n\nexport function fromName(\n  serializer: JsonProtoSerializer,\n  name: string\n): DocumentKey {\n  const resource = fromResourceName(name);\n  hardAssert(\n    resource.get(1) === serializer.databaseId.projectId,\n    'Tried to deserialize key from different project: ' +\n      resource.get(1) +\n      ' vs ' +\n      serializer.databaseId.projectId\n  );\n  hardAssert(\n    (!resource.get(3) && !serializer.databaseId.database) ||\n      resource.get(3) === serializer.databaseId.database,\n    'Tried to deserialize key from different database: ' +\n      resource.get(3) +\n      ' vs ' +\n      serializer.databaseId.database\n  );\n  return new DocumentKey(extractLocalPathFromResourceName(resource));\n}\n\nfunction toQueryPath(\n  serializer: JsonProtoSerializer,\n  path: ResourcePath\n): string {\n  return toResourceName(serializer.databaseId, path);\n}\n\nfunction fromQueryPath(name: string): ResourcePath {\n  const resourceName = fromResourceName(name);\n  // In v1beta1 queries for collections at the root did not have a trailing\n  // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\n  // ability to read the v1beta1 form for compatibility with queries persisted\n  // in the local target cache.\n  if (resourceName.length === 4) {\n    return ResourcePath.emptyPath();\n  }\n  return extractLocalPathFromResourceName(resourceName);\n}\n\nexport function getEncodedDatabaseId(serializer: JsonProtoSerializer): string {\n  const path = new ResourcePath([\n    'projects',\n    serializer.databaseId.projectId,\n    'databases',\n    serializer.databaseId.database\n  ]);\n  return path.canonicalString();\n}\n\nfunction fullyQualifiedPrefixPath(databaseId: DatabaseId): ResourcePath {\n  return new ResourcePath([\n    'projects',\n    databaseId.projectId,\n    'databases',\n    databaseId.database\n  ]);\n}\n\nfunction extractLocalPathFromResourceName(\n  resourceName: ResourcePath\n): ResourcePath {\n  hardAssert(\n    resourceName.length > 4 && resourceName.get(4) === 'documents',\n    'tried to deserialize invalid key ' + resourceName.toString()\n  );\n  return resourceName.popFirst(5);\n}\n\n/** Creates an api.Document from key and fields (but no create/update time) */\nexport function toMutationDocument(\n  serializer: JsonProtoSerializer,\n  key: DocumentKey,\n  fields: ObjectValue\n): api.Document {\n  return {\n    name: toName(serializer, key),\n    fields: fields.proto.mapValue.fields\n  };\n}\n\nexport function toDocument(\n  serializer: JsonProtoSerializer,\n  document: Document\n): api.Document {\n  debugAssert(\n    !document.hasLocalMutations,\n    \"Can't serialize documents with mutations.\"\n  );\n  return {\n    name: toName(serializer, document.key),\n    fields: document.toProto().mapValue.fields,\n    updateTime: toTimestamp(serializer, document.version.toTimestamp())\n  };\n}\n\nexport function fromDocument(\n  serializer: JsonProtoSerializer,\n  document: api.Document,\n  hasCommittedMutations?: boolean\n): Document {\n  const key = fromName(serializer, document.name!);\n  const version = fromVersion(document.updateTime!);\n  const data = new ObjectValue({ mapValue: { fields: document.fields } });\n  return new Document(key, version, data, {\n    hasCommittedMutations: !!hasCommittedMutations\n  });\n}\n\nfunction fromFound(\n  serializer: JsonProtoSerializer,\n  doc: api.BatchGetDocumentsResponse\n): Document {\n  hardAssert(\n    !!doc.found,\n    'Tried to deserialize a found document from a missing document.'\n  );\n  assertPresent(doc.found.name, 'doc.found.name');\n  assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n  const key = fromName(serializer, doc.found.name);\n  const version = fromVersion(doc.found.updateTime);\n  const data = new ObjectValue({ mapValue: { fields: doc.found.fields } });\n  return new Document(key, version, data, {});\n}\n\nfunction fromMissing(\n  serializer: JsonProtoSerializer,\n  result: api.BatchGetDocumentsResponse\n): NoDocument {\n  hardAssert(\n    !!result.missing,\n    'Tried to deserialize a missing document from a found document.'\n  );\n  hardAssert(\n    !!result.readTime,\n    'Tried to deserialize a missing document without a read time.'\n  );\n  const key = fromName(serializer, result.missing);\n  const version = fromVersion(result.readTime);\n  return new NoDocument(key, version);\n}\n\nexport function fromMaybeDocument(\n  serializer: JsonProtoSerializer,\n  result: api.BatchGetDocumentsResponse\n): MaybeDocument {\n  if ('found' in result) {\n    return fromFound(serializer, result);\n  } else if ('missing' in result) {\n    return fromMissing(serializer, result);\n  }\n  return fail('invalid batch get response: ' + JSON.stringify(result));\n}\n\nexport function fromWatchChange(\n  serializer: JsonProtoSerializer,\n  change: api.ListenResponse\n): WatchChange {\n  let watchChange: WatchChange;\n  if ('targetChange' in change) {\n    assertPresent(change.targetChange, 'targetChange');\n    // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n    // if unset\n    const state = fromWatchTargetChangeState(\n      change.targetChange.targetChangeType || 'NO_CHANGE'\n    );\n    const targetIds: TargetId[] = change.targetChange.targetIds || [];\n\n    const resumeToken = fromBytes(serializer, change.targetChange.resumeToken);\n    const causeProto = change.targetChange!.cause;\n    const cause = causeProto && fromRpcStatus(causeProto);\n    watchChange = new WatchTargetChange(\n      state,\n      targetIds,\n      resumeToken,\n      cause || null\n    );\n  } else if ('documentChange' in change) {\n    assertPresent(change.documentChange, 'documentChange');\n    const entityChange = change.documentChange;\n    assertPresent(entityChange.document, 'documentChange.name');\n    assertPresent(entityChange.document.name, 'documentChange.document.name');\n    assertPresent(\n      entityChange.document.updateTime,\n      'documentChange.document.updateTime'\n    );\n    const key = fromName(serializer, entityChange.document.name);\n    const version = fromVersion(entityChange.document.updateTime);\n    const data = new ObjectValue({\n      mapValue: { fields: entityChange.document.fields }\n    });\n    const doc = new Document(key, version, data, {});\n    const updatedTargetIds = entityChange.targetIds || [];\n    const removedTargetIds = entityChange.removedTargetIds || [];\n    watchChange = new DocumentWatchChange(\n      updatedTargetIds,\n      removedTargetIds,\n      doc.key,\n      doc\n    );\n  } else if ('documentDelete' in change) {\n    assertPresent(change.documentDelete, 'documentDelete');\n    const docDelete = change.documentDelete;\n    assertPresent(docDelete.document, 'documentDelete.document');\n    const key = fromName(serializer, docDelete.document);\n    const version = docDelete.readTime\n      ? fromVersion(docDelete.readTime)\n      : SnapshotVersion.min();\n    const doc = new NoDocument(key, version);\n    const removedTargetIds = docDelete.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n  } else if ('documentRemove' in change) {\n    assertPresent(change.documentRemove, 'documentRemove');\n    const docRemove = change.documentRemove;\n    assertPresent(docRemove.document, 'documentRemove');\n    const key = fromName(serializer, docRemove.document);\n    const removedTargetIds = docRemove.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n  } else if ('filter' in change) {\n    // TODO(dimond): implement existence filter parsing with strategy.\n    assertPresent(change.filter, 'filter');\n    const filter = change.filter;\n    assertPresent(filter.targetId, 'filter.targetId');\n    const count = filter.count || 0;\n    const existenceFilter = new ExistenceFilter(count);\n    const targetId = filter.targetId;\n    watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n  } else {\n    return fail('Unknown change type ' + JSON.stringify(change));\n  }\n  return watchChange;\n}\n\nfunction fromWatchTargetChangeState(\n  state: TargetChangeTargetChangeType\n): WatchTargetChangeState {\n  if (state === 'NO_CHANGE') {\n    return WatchTargetChangeState.NoChange;\n  } else if (state === 'ADD') {\n    return WatchTargetChangeState.Added;\n  } else if (state === 'REMOVE') {\n    return WatchTargetChangeState.Removed;\n  } else if (state === 'CURRENT') {\n    return WatchTargetChangeState.Current;\n  } else if (state === 'RESET') {\n    return WatchTargetChangeState.Reset;\n  } else {\n    return fail('Got unexpected TargetChange.state: ' + state);\n  }\n}\n\nexport function versionFromListenResponse(\n  change: api.ListenResponse\n): SnapshotVersion {\n  // We have only reached a consistent snapshot for the entire stream if there\n  // is a read_time set and it applies to all targets (i.e. the list of\n  // targets is empty). The backend is guaranteed to send such responses.\n  if (!('targetChange' in change)) {\n    return SnapshotVersion.min();\n  }\n  const targetChange = change.targetChange!;\n  if (targetChange.targetIds && targetChange.targetIds.length) {\n    return SnapshotVersion.min();\n  }\n  if (!targetChange.readTime) {\n    return SnapshotVersion.min();\n  }\n  return fromVersion(targetChange.readTime);\n}\n\nexport function toMutation(\n  serializer: JsonProtoSerializer,\n  mutation: Mutation\n): api.Write {\n  let result: api.Write;\n  if (mutation instanceof SetMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.value)\n    };\n  } else if (mutation instanceof DeleteMutation) {\n    result = { delete: toName(serializer, mutation.key) };\n  } else if (mutation instanceof PatchMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.data),\n      updateMask: toDocumentMask(mutation.fieldMask)\n    };\n  } else if (mutation instanceof TransformMutation) {\n    result = {\n      transform: {\n        document: toName(serializer, mutation.key),\n        fieldTransforms: mutation.fieldTransforms.map(transform =>\n          toFieldTransform(serializer, transform)\n        )\n      }\n    };\n  } else if (mutation instanceof VerifyMutation) {\n    result = {\n      verify: toName(serializer, mutation.key)\n    };\n  } else {\n    return fail('Unknown mutation type ' + mutation.type);\n  }\n\n  if (!mutation.precondition.isNone) {\n    result.currentDocument = toPrecondition(serializer, mutation.precondition);\n  }\n\n  return result;\n}\n\nexport function fromMutation(\n  serializer: JsonProtoSerializer,\n  proto: api.Write\n): Mutation {\n  const precondition = proto.currentDocument\n    ? fromPrecondition(proto.currentDocument)\n    : Precondition.none();\n\n  if (proto.update) {\n    assertPresent(proto.update.name, 'name');\n    const key = fromName(serializer, proto.update.name);\n    const value = new ObjectValue({\n      mapValue: { fields: proto.update.fields }\n    });\n    if (proto.updateMask) {\n      const fieldMask = fromDocumentMask(proto.updateMask);\n      return new PatchMutation(key, value, fieldMask, precondition);\n    } else {\n      return new SetMutation(key, value, precondition);\n    }\n  } else if (proto.delete) {\n    const key = fromName(serializer, proto.delete);\n    return new DeleteMutation(key, precondition);\n  } else if (proto.transform) {\n    const key = fromName(serializer, proto.transform.document!);\n    const fieldTransforms = proto.transform.fieldTransforms!.map(transform =>\n      fromFieldTransform(serializer, transform)\n    );\n    hardAssert(\n      precondition.exists === true,\n      'Transforms only support precondition \"exists == true\"'\n    );\n    return new TransformMutation(key, fieldTransforms);\n  } else if (proto.verify) {\n    const key = fromName(serializer, proto.verify);\n    return new VerifyMutation(key, precondition);\n  } else {\n    return fail('unknown mutation proto: ' + JSON.stringify(proto));\n  }\n}\n\nfunction toPrecondition(\n  serializer: JsonProtoSerializer,\n  precondition: Precondition\n): api.Precondition {\n  debugAssert(!precondition.isNone, \"Can't serialize an empty precondition\");\n  if (precondition.updateTime !== undefined) {\n    return {\n      updateTime: toVersion(serializer, precondition.updateTime)\n    };\n  } else if (precondition.exists !== undefined) {\n    return { exists: precondition.exists };\n  } else {\n    return fail('Unknown precondition');\n  }\n}\n\nfunction fromPrecondition(precondition: api.Precondition): Precondition {\n  if (precondition.updateTime !== undefined) {\n    return Precondition.updateTime(fromVersion(precondition.updateTime));\n  } else if (precondition.exists !== undefined) {\n    return Precondition.exists(precondition.exists);\n  } else {\n    return Precondition.none();\n  }\n}\n\nfunction fromWriteResult(\n  proto: WriteResult,\n  commitTime: api.Timestamp\n): MutationResult {\n  // NOTE: Deletes don't have an updateTime.\n  let version = proto.updateTime\n    ? fromVersion(proto.updateTime)\n    : fromVersion(commitTime);\n\n  if (version.isEqual(SnapshotVersion.min())) {\n    // The Firestore Emulator currently returns an update time of 0 for\n    // deletes of non-existing documents (rather than null). This breaks the\n    // test \"get deleted doc while offline with source=cache\" as NoDocuments\n    // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\n    // TODO(#2149): Remove this when Emulator is fixed\n    version = fromVersion(commitTime);\n  }\n\n  let transformResults: api.Value[] | null = null;\n  if (proto.transformResults && proto.transformResults.length > 0) {\n    transformResults = proto.transformResults;\n  }\n  return new MutationResult(version, transformResults);\n}\n\nexport function fromWriteResults(\n  protos: WriteResult[] | undefined,\n  commitTime?: api.Timestamp\n): MutationResult[] {\n  if (protos && protos.length > 0) {\n    hardAssert(\n      commitTime !== undefined,\n      'Received a write result without a commit time'\n    );\n    return protos.map(proto => fromWriteResult(proto, commitTime));\n  } else {\n    return [];\n  }\n}\n\nfunction toFieldTransform(\n  serializer: JsonProtoSerializer,\n  fieldTransform: FieldTransform\n): api.FieldTransform {\n  const transform = fieldTransform.transform;\n  if (transform instanceof ServerTimestampTransform) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      setToServerValue: 'REQUEST_TIME'\n    };\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      appendMissingElements: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      removeAllFromArray: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof NumericIncrementTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      increment: transform.operand\n    };\n  } else {\n    throw fail('Unknown transform: ' + fieldTransform.transform);\n  }\n}\n\nfunction fromFieldTransform(\n  serializer: JsonProtoSerializer,\n  proto: api.FieldTransform\n): FieldTransform {\n  let transform: TransformOperation | null = null;\n  if ('setToServerValue' in proto) {\n    hardAssert(\n      proto.setToServerValue === 'REQUEST_TIME',\n      'Unknown server value transform proto: ' + JSON.stringify(proto)\n    );\n    transform = new ServerTimestampTransform();\n  } else if ('appendMissingElements' in proto) {\n    const values = proto.appendMissingElements!.values || [];\n    transform = new ArrayUnionTransformOperation(values);\n  } else if ('removeAllFromArray' in proto) {\n    const values = proto.removeAllFromArray!.values || [];\n    transform = new ArrayRemoveTransformOperation(values);\n  } else if ('increment' in proto) {\n    transform = new NumericIncrementTransformOperation(\n      serializer,\n      proto.increment!\n    );\n  } else {\n    fail('Unknown transform proto: ' + JSON.stringify(proto));\n  }\n  const fieldPath = FieldPath.fromServerFormat(proto.fieldPath!);\n  return new FieldTransform(fieldPath, transform!);\n}\n\nexport function toDocumentsTarget(\n  serializer: JsonProtoSerializer,\n  target: Target\n): api.DocumentsTarget {\n  return { documents: [toQueryPath(serializer, target.path)] };\n}\n\nexport function fromDocumentsTarget(\n  documentsTarget: api.DocumentsTarget\n): Target {\n  const count = documentsTarget.documents!.length;\n  hardAssert(\n    count === 1,\n    'DocumentsTarget contained other than 1 document: ' + count\n  );\n  const name = documentsTarget.documents![0];\n  return queryToTarget(newQueryForPath(fromQueryPath(name)));\n}\n\nexport function toQueryTarget(\n  serializer: JsonProtoSerializer,\n  target: Target\n): api.QueryTarget {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  const result: api.QueryTarget = { structuredQuery: {} };\n  const path = target.path;\n  if (target.collectionGroup !== null) {\n    debugAssert(\n      path.length % 2 === 0,\n      'Collection Group queries should be within a document path or root.'\n    );\n    result.parent = toQueryPath(serializer, path);\n    result.structuredQuery!.from = [\n      {\n        collectionId: target.collectionGroup,\n        allDescendants: true\n      }\n    ];\n  } else {\n    debugAssert(\n      path.length % 2 !== 0,\n      'Document queries with filters are not supported.'\n    );\n    result.parent = toQueryPath(serializer, path.popLast());\n    result.structuredQuery!.from = [{ collectionId: path.lastSegment() }];\n  }\n\n  const where = toFilter(target.filters);\n  if (where) {\n    result.structuredQuery!.where = where;\n  }\n\n  const orderBy = toOrder(target.orderBy);\n  if (orderBy) {\n    result.structuredQuery!.orderBy = orderBy;\n  }\n\n  const limit = toInt32Proto(serializer, target.limit);\n  if (limit !== null) {\n    result.structuredQuery!.limit = limit;\n  }\n\n  if (target.startAt) {\n    result.structuredQuery!.startAt = toCursor(target.startAt);\n  }\n  if (target.endAt) {\n    result.structuredQuery!.endAt = toCursor(target.endAt);\n  }\n\n  return result;\n}\n\nexport function fromQueryTarget(target: api.QueryTarget): Target {\n  let path = fromQueryPath(target.parent!);\n\n  const query = target.structuredQuery!;\n  const fromCount = query.from ? query.from.length : 0;\n  let collectionGroup: string | null = null;\n  if (fromCount > 0) {\n    hardAssert(\n      fromCount === 1,\n      'StructuredQuery.from with more than one collection is not supported.'\n    );\n    const from = query.from![0];\n    if (from.allDescendants) {\n      collectionGroup = from.collectionId!;\n    } else {\n      path = path.child(from.collectionId!);\n    }\n  }\n\n  let filterBy: Filter[] = [];\n  if (query.where) {\n    filterBy = fromFilter(query.where);\n  }\n\n  let orderBy: OrderBy[] = [];\n  if (query.orderBy) {\n    orderBy = fromOrder(query.orderBy);\n  }\n\n  let limit: number | null = null;\n  if (query.limit) {\n    limit = fromInt32Proto(query.limit);\n  }\n\n  let startAt: Bound | null = null;\n  if (query.startAt) {\n    startAt = fromCursor(query.startAt);\n  }\n\n  let endAt: Bound | null = null;\n  if (query.endAt) {\n    endAt = fromCursor(query.endAt);\n  }\n\n  return queryToTarget(\n    newQuery(\n      path,\n      collectionGroup,\n      orderBy,\n      filterBy,\n      limit,\n      LimitType.First,\n      startAt,\n      endAt\n    )\n  );\n}\n\nexport function toListenRequestLabels(\n  serializer: JsonProtoSerializer,\n  targetData: TargetData\n): api.ApiClientObjectMap<string> | null {\n  const value = toLabel(serializer, targetData.purpose);\n  if (value == null) {\n    return null;\n  } else {\n    return {\n      'goog-listen-tags': value\n    };\n  }\n}\n\nfunction toLabel(\n  serializer: JsonProtoSerializer,\n  purpose: TargetPurpose\n): string | null {\n  switch (purpose) {\n    case TargetPurpose.Listen:\n      return null;\n    case TargetPurpose.ExistenceFilterMismatch:\n      return 'existence-filter-mismatch';\n    case TargetPurpose.LimboResolution:\n      return 'limbo-document';\n    default:\n      return fail('Unrecognized query purpose: ' + purpose);\n  }\n}\n\nexport function toTarget(\n  serializer: JsonProtoSerializer,\n  targetData: TargetData\n): api.Target {\n  let result: api.Target;\n  const target = targetData.target;\n\n  if (isDocumentTarget(target)) {\n    result = { documents: toDocumentsTarget(serializer, target) };\n  } else {\n    result = { query: toQueryTarget(serializer, target) };\n  }\n\n  result.targetId = targetData.targetId;\n\n  if (targetData.resumeToken.approximateByteSize() > 0) {\n    result.resumeToken = toBytes(serializer, targetData.resumeToken);\n  }\n\n  return result;\n}\n\nfunction toFilter(filters: Filter[]): api.Filter | undefined {\n  if (filters.length === 0) {\n    return;\n  }\n  const protos = filters.map(filter => {\n    debugAssert(\n      filter instanceof FieldFilter,\n      'Only FieldFilters are supported'\n    );\n    return toUnaryOrFieldFilter(filter);\n  });\n  if (protos.length === 1) {\n    return protos[0];\n  }\n  return { compositeFilter: { op: 'AND', filters: protos } };\n}\n\nfunction fromFilter(filter: api.Filter | undefined): Filter[] {\n  if (!filter) {\n    return [];\n  } else if (filter.unaryFilter !== undefined) {\n    return [fromUnaryFilter(filter)];\n  } else if (filter.fieldFilter !== undefined) {\n    return [fromFieldFilter(filter)];\n  } else if (filter.compositeFilter !== undefined) {\n    return filter.compositeFilter\n      .filters!.map(f => fromFilter(f))\n      .reduce((accum, current) => accum.concat(current));\n  } else {\n    return fail('Unknown filter: ' + JSON.stringify(filter));\n  }\n}\n\nfunction toOrder(orderBys: OrderBy[]): api.Order[] | undefined {\n  if (orderBys.length === 0) {\n    return;\n  }\n  return orderBys.map(order => toPropertyOrder(order));\n}\n\nfunction fromOrder(orderBys: api.Order[]): OrderBy[] {\n  return orderBys.map(order => fromPropertyOrder(order));\n}\n\nfunction toCursor(cursor: Bound): api.Cursor {\n  return {\n    before: cursor.before,\n    values: cursor.position\n  };\n}\n\nfunction fromCursor(cursor: api.Cursor): Bound {\n  const before = !!cursor.before;\n  const position = cursor.values || [];\n  return new Bound(position, before);\n}\n\n// visible for testing\nexport function toDirection(dir: Direction): api.OrderDirection {\n  return DIRECTIONS[dir];\n}\n\n// visible for testing\nexport function fromDirection(\n  dir: api.OrderDirection | undefined\n): Direction | undefined {\n  switch (dir) {\n    case 'ASCENDING':\n      return Direction.ASCENDING;\n    case 'DESCENDING':\n      return Direction.DESCENDING;\n    default:\n      return undefined;\n  }\n}\n\n// visible for testing\nexport function toOperatorName(op: Operator): api.FieldFilterOp {\n  return OPERATORS[op];\n}\n\nexport function fromOperatorName(op: api.FieldFilterOp): Operator {\n  switch (op) {\n    case 'EQUAL':\n      return Operator.EQUAL;\n    case 'NOT_EQUAL':\n      return Operator.NOT_EQUAL;\n    case 'GREATER_THAN':\n      return Operator.GREATER_THAN;\n    case 'GREATER_THAN_OR_EQUAL':\n      return Operator.GREATER_THAN_OR_EQUAL;\n    case 'LESS_THAN':\n      return Operator.LESS_THAN;\n    case 'LESS_THAN_OR_EQUAL':\n      return Operator.LESS_THAN_OR_EQUAL;\n    case 'ARRAY_CONTAINS':\n      return Operator.ARRAY_CONTAINS;\n    case 'IN':\n      return Operator.IN;\n    case 'NOT_IN':\n      return Operator.NOT_IN;\n    case 'ARRAY_CONTAINS_ANY':\n      return Operator.ARRAY_CONTAINS_ANY;\n    case 'OPERATOR_UNSPECIFIED':\n      return fail('Unspecified operator');\n    default:\n      return fail('Unknown operator');\n  }\n}\n\nexport function toFieldPathReference(path: FieldPath): api.FieldReference {\n  return { fieldPath: path.canonicalString() };\n}\n\nexport function fromFieldPathReference(\n  fieldReference: api.FieldReference\n): FieldPath {\n  return FieldPath.fromServerFormat(fieldReference.fieldPath!);\n}\n\n// visible for testing\nexport function toPropertyOrder(orderBy: OrderBy): api.Order {\n  return {\n    field: toFieldPathReference(orderBy.field),\n    direction: toDirection(orderBy.dir)\n  };\n}\n\nexport function fromPropertyOrder(orderBy: api.Order): OrderBy {\n  return new OrderBy(\n    fromFieldPathReference(orderBy.field!),\n    fromDirection(orderBy.direction)\n  );\n}\n\nexport function fromFieldFilter(filter: api.Filter): Filter {\n  return FieldFilter.create(\n    fromFieldPathReference(filter.fieldFilter!.field!),\n    fromOperatorName(filter.fieldFilter!.op!),\n    filter.fieldFilter!.value!\n  );\n}\n\n// visible for testing\nexport function toUnaryOrFieldFilter(filter: FieldFilter): api.Filter {\n  if (filter.op === Operator.EQUAL) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NULL'\n        }\n      };\n    }\n  } else if (filter.op === Operator.NOT_EQUAL) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NOT_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NOT_NULL'\n        }\n      };\n    }\n  }\n  return {\n    fieldFilter: {\n      field: toFieldPathReference(filter.field),\n      op: toOperatorName(filter.op),\n      value: filter.value\n    }\n  };\n}\n\nexport function fromUnaryFilter(filter: api.Filter): Filter {\n  switch (filter.unaryFilter!.op!) {\n    case 'IS_NAN':\n      const nanField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(nanField, Operator.EQUAL, {\n        doubleValue: NaN\n      });\n    case 'IS_NULL':\n      const nullField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(nullField, Operator.EQUAL, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'IS_NOT_NAN':\n      const notNanField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(notNanField, Operator.NOT_EQUAL, {\n        doubleValue: NaN\n      });\n    case 'IS_NOT_NULL':\n      const notNullField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(notNullField, Operator.NOT_EQUAL, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'OPERATOR_UNSPECIFIED':\n      return fail('Unspecified filter');\n    default:\n      return fail('Unknown filter');\n  }\n}\n\nexport function toDocumentMask(fieldMask: FieldMask): api.DocumentMask {\n  const canonicalFields: string[] = [];\n  fieldMask.fields.forEach(field =>\n    canonicalFields.push(field.canonicalString())\n  );\n  return {\n    fieldPaths: canonicalFields\n  };\n}\n\nexport function fromDocumentMask(proto: api.DocumentMask): FieldMask {\n  const paths = proto.fieldPaths || [];\n  return new FieldMask(paths.map(path => FieldPath.fromServerFormat(path)));\n}\n\nexport function isValidResourceName(path: ResourcePath): boolean {\n  // Resource names have at least 4 components (project ID, database ID)\n  return (\n    path.length >= 4 &&\n    path.get(0) === 'projects' &&\n    path.get(2) === 'databases'\n  );\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { debugAssert } from '../util/assert';\nimport { JsonProtoSerializer, toDouble, toInteger } from '../remote/serializer';\nimport {\n  isArray,\n  isInteger,\n  isNumber,\n  normalizeNumber,\n  valueEquals\n} from './values';\nimport { serverTimestamp } from './server_timestamps';\nimport { arrayEquals } from '../util/misc';\n\n/** Represents a transform within a TransformMutation. */\nexport class TransformOperation {\n  // Make sure that the structural type of `TransformOperation` is unique.\n  // See https://github.com/microsoft/TypeScript/issues/5451\n  private _ = undefined;\n}\n\n/**\n * Computes the local transform result against the provided `previousValue`,\n * optionally using the provided localWriteTime.\n */\nexport function applyTransformOperationToLocalView(\n  transform: TransformOperation,\n  previousValue: api.Value | null,\n  localWriteTime: Timestamp\n): api.Value {\n  if (transform instanceof ServerTimestampTransform) {\n    return serverTimestamp(localWriteTime, previousValue);\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  } else {\n    debugAssert(\n      transform instanceof NumericIncrementTransformOperation,\n      'Expected NumericIncrementTransformOperation but was: ' + transform\n    );\n    return applyNumericIncrementTransformOperationToLocalView(\n      transform,\n      previousValue\n    );\n  }\n}\n\n/**\n * Computes a final transform result after the transform has been acknowledged\n * by the server, potentially using the server-provided transformResult.\n */\nexport function applyTransformOperationToRemoteDocument(\n  transform: TransformOperation,\n  previousValue: api.Value | null,\n  transformResult: api.Value | null\n): api.Value {\n  // The server just sends null as the transform result for array operations,\n  // so we have to calculate a result the same as we do for local\n  // applications.\n  if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  }\n\n  debugAssert(\n    transformResult !== null,\n    \"Didn't receive transformResult for non-array transform\"\n  );\n  return transformResult;\n}\n\n/**\n * If this transform operation is not idempotent, returns the base value to\n * persist for this transform. If a base value is returned, the transform\n * operation is always applied to this base value, even if document has\n * already been updated.\n *\n * Base values provide consistent behavior for non-idempotent transforms and\n * allow us to return the same latency-compensated value even if the backend\n * has already applied the transform operation. The base value is null for\n * idempotent transforms, as they can be re-played even if the backend has\n * already applied them.\n *\n * @return a base value to store along with the mutation, or null for\n * idempotent transforms.\n */\nexport function computeTransformOperationBaseValue(\n  transform: TransformOperation,\n  previousValue: api.Value | null\n): api.Value | null {\n  if (transform instanceof NumericIncrementTransformOperation) {\n    return isNumber(previousValue) ? previousValue! : { integerValue: 0 };\n  }\n  return null;\n}\n\nexport function transformOperationEquals(\n  left: TransformOperation,\n  right: TransformOperation\n): boolean {\n  if (\n    left instanceof ArrayUnionTransformOperation &&\n    right instanceof ArrayUnionTransformOperation\n  ) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (\n    left instanceof ArrayRemoveTransformOperation &&\n    right instanceof ArrayRemoveTransformOperation\n  ) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (\n    left instanceof NumericIncrementTransformOperation &&\n    right instanceof NumericIncrementTransformOperation\n  ) {\n    return valueEquals(left.operand, right.operand);\n  }\n\n  return (\n    left instanceof ServerTimestampTransform &&\n    right instanceof ServerTimestampTransform\n  );\n}\n\n/** Transforms a value into a server-generated timestamp. */\nexport class ServerTimestampTransform extends TransformOperation {}\n\n/** Transforms an array value via a union operation. */\nexport class ArrayUnionTransformOperation extends TransformOperation {\n  constructor(readonly elements: api.Value[]) {\n    super();\n  }\n}\n\nfunction applyArrayUnionTransformOperation(\n  transform: ArrayUnionTransformOperation,\n  previousValue: api.Value | null\n): api.Value {\n  const values = coercedFieldValuesArray(previousValue);\n  for (const toUnion of transform.elements) {\n    if (!values.some(element => valueEquals(element, toUnion))) {\n      values.push(toUnion);\n    }\n  }\n  return { arrayValue: { values } };\n}\n\n/** Transforms an array value via a remove operation. */\nexport class ArrayRemoveTransformOperation extends TransformOperation {\n  constructor(readonly elements: api.Value[]) {\n    super();\n  }\n}\n\nfunction applyArrayRemoveTransformOperation(\n  transform: ArrayRemoveTransformOperation,\n  previousValue: api.Value | null\n): api.Value {\n  let values = coercedFieldValuesArray(previousValue);\n  for (const toRemove of transform.elements) {\n    values = values.filter(element => !valueEquals(element, toRemove));\n  }\n  return { arrayValue: { values } };\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nexport class NumericIncrementTransformOperation extends TransformOperation {\n  constructor(\n    readonly serializer: JsonProtoSerializer,\n    readonly operand: api.Value\n  ) {\n    super();\n    debugAssert(\n      isNumber(operand),\n      'NumericIncrementTransform transform requires a NumberValue'\n    );\n  }\n}\n\nexport function applyNumericIncrementTransformOperationToLocalView(\n  transform: NumericIncrementTransformOperation,\n  previousValue: api.Value | null\n): api.Value {\n  // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\n  // precision and resolves overflows by reducing precision, we do not\n  // manually cap overflows at 2^63.\n  const baseValue = computeTransformOperationBaseValue(\n    transform,\n    previousValue\n  )!;\n  const sum = asNumber(baseValue) + asNumber(transform.operand);\n  if (isInteger(baseValue) && isInteger(transform.operand)) {\n    return toInteger(sum);\n  } else {\n    return toDouble(transform.serializer, sum);\n  }\n}\n\nfunction asNumber(value: api.Value): number {\n  return normalizeNumber(value.integerValue || value.doubleValue);\n}\n\nfunction coercedFieldValuesArray(value: api.Value | null): api.Value[] {\n  return isArray(value) && value.arrayValue.values\n    ? value.arrayValue.values.slice()\n    : [];\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert, hardAssert } from '../util/assert';\n\nimport {\n  Document,\n  MaybeDocument,\n  NoDocument,\n  UnknownDocument\n} from './document';\nimport { DocumentKey } from './document_key';\nimport { ObjectValue, ObjectValueBuilder } from './object_value';\nimport { FieldPath } from './path';\nimport {\n  applyTransformOperationToLocalView,\n  applyTransformOperationToRemoteDocument,\n  computeTransformOperationBaseValue,\n  TransformOperation,\n  transformOperationEquals\n} from './transform_operation';\nimport { arrayEquals } from '../util/misc';\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nexport class FieldMask {\n  constructor(readonly fields: FieldPath[]) {\n    // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    fields.sort(FieldPath.comparator);\n    debugAssert(\n      !fields.some((v, i) => i !== 0 && v.isEqual(fields[i - 1])),\n      'FieldMask contains field that is not unique: ' +\n        fields.find((v, i) => i !== 0 && v.isEqual(fields[i - 1]))!\n    );\n  }\n\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n  covers(fieldPath: FieldPath): boolean {\n    for (const fieldMaskPath of this.fields) {\n      if (fieldMaskPath.isPrefixOf(fieldPath)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isEqual(other: FieldMask): boolean {\n    return arrayEquals(this.fields, other.fields, (l, r) => l.isEqual(r));\n  }\n}\n\n/** A field path and the TransformOperation to perform upon it. */\nexport class FieldTransform {\n  constructor(\n    readonly field: FieldPath,\n    readonly transform: TransformOperation\n  ) {}\n}\n\nexport function fieldTransformEquals(\n  left: FieldTransform,\n  right: FieldTransform\n): boolean {\n  return (\n    left.field.isEqual(right.field) &&\n    transformOperationEquals(left.transform, right.transform)\n  );\n}\n\n/** The result of successfully applying a mutation to the backend. */\nexport class MutationResult {\n  constructor(\n    /**\n     * The version at which the mutation was committed:\n     *\n     * - For most operations, this is the updateTime in the WriteResult.\n     * - For deletes, the commitTime of the WriteResponse (because deletes are\n     *   not stored and have no updateTime).\n     *\n     * Note that these versions can be different: No-op writes will not change\n     * the updateTime even though the commitTime advances.\n     */\n    readonly version: SnapshotVersion,\n    /**\n     * The resulting fields returned from the backend after a\n     * TransformMutation has been committed. Contains one FieldValue for each\n     * FieldTransform that was in the mutation.\n     *\n     * Will be null if the mutation was not a TransformMutation.\n     */\n    readonly transformResults: Array<api.Value | null> | null\n  ) {}\n}\n\nexport const enum MutationType {\n  Set,\n  Patch,\n  Transform,\n  Delete,\n  Verify\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nexport class Precondition {\n  private constructor(\n    readonly updateTime?: SnapshotVersion,\n    readonly exists?: boolean\n  ) {\n    debugAssert(\n      updateTime === undefined || exists === undefined,\n      'Precondition can specify \"exists\" or \"updateTime\" but not both'\n    );\n  }\n\n  /** Creates a new empty Precondition. */\n  static none(): Precondition {\n    return new Precondition();\n  }\n\n  /** Creates a new Precondition with an exists flag. */\n  static exists(exists: boolean): Precondition {\n    return new Precondition(undefined, exists);\n  }\n\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(version: SnapshotVersion): Precondition {\n    return new Precondition(version);\n  }\n\n  /** Returns whether this Precondition is empty. */\n  get isNone(): boolean {\n    return this.updateTime === undefined && this.exists === undefined;\n  }\n\n  isEqual(other: Precondition): boolean {\n    return (\n      this.exists === other.exists &&\n      (this.updateTime\n        ? !!other.updateTime && this.updateTime.isEqual(other.updateTime)\n        : !other.updateTime)\n    );\n  }\n}\n\n/**\n * Returns true if the preconditions is valid for the given document\n * (or null if no document is available).\n */\nexport function preconditionIsValidForDocument(\n  precondition: Precondition,\n  maybeDoc: MaybeDocument | null\n): boolean {\n  if (precondition.updateTime !== undefined) {\n    return (\n      maybeDoc instanceof Document &&\n      maybeDoc.version.isEqual(precondition.updateTime)\n    );\n  } else if (precondition.exists !== undefined) {\n    return precondition.exists === maybeDoc instanceof Document;\n  } else {\n    debugAssert(precondition.isNone, 'Precondition should be empty');\n    return true;\n  }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set, Patch, and Transform mutations. For Delete\n * mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set, Patch, and Transform mutations. As deletes\n * have no explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we return an `UnknownDocument` and rely on Watch to send us the\n * updated version.\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nexport abstract class Mutation {\n  abstract readonly type: MutationType;\n  abstract readonly key: DocumentKey;\n  abstract readonly precondition: Precondition;\n}\n\n/**\n * Applies this mutation to the given MaybeDocument or null for the purposes\n * of computing a new remote document. If the input document doesn't match the\n * expected state (e.g. it is null or outdated), an `UnknownDocument` can be\n * returned.\n *\n * @param mutation The mutation to apply.\n * @param maybeDoc The document to mutate. The input document can be null if\n *     the client has no knowledge of the pre-mutation state of the document.\n * @param mutationResult The result of applying the mutation from the backend.\n * @return The mutated document. The returned document may be an\n *     UnknownDocument if the mutation could not be applied to the locally\n *     cached base document.\n */\nexport function applyMutationToRemoteDocument(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): MaybeDocument {\n  verifyMutationKeyMatches(mutation, maybeDoc);\n  if (mutation instanceof SetMutation) {\n    return applySetMutationToRemoteDocument(mutation, maybeDoc, mutationResult);\n  } else if (mutation instanceof PatchMutation) {\n    return applyPatchMutationToRemoteDocument(\n      mutation,\n      maybeDoc,\n      mutationResult\n    );\n  } else if (mutation instanceof TransformMutation) {\n    return applyTransformMutationToRemoteDocument(\n      mutation,\n      maybeDoc,\n      mutationResult\n    );\n  } else {\n    debugAssert(\n      mutation instanceof DeleteMutation,\n      'Unexpected mutation type: ' + mutation\n    );\n    return applyDeleteMutationToRemoteDocument(\n      mutation,\n      maybeDoc,\n      mutationResult\n    );\n  }\n}\n\n/**\n * Applies this mutation to the given MaybeDocument or null for the purposes\n * of computing the new local view of a document. Both the input and returned\n * documents can be null.\n *\n * @param mutation The mutation to apply.\n * @param maybeDoc The document to mutate. The input document can be null if\n *     the client has no knowledge of the pre-mutation state of the document.\n * @param baseDoc The state of the document prior to this mutation batch. The\n *     input document can be null if the client has no knowledge of the\n *     pre-mutation state of the document.\n * @param localWriteTime A timestamp indicating the local write time of the\n *     batch this mutation is a part of.\n * @return The mutated document. The returned document may be null, but only\n *     if maybeDoc was null and the mutation would not create a new document.\n */\nexport function applyMutationToLocalView(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null,\n  baseDoc: MaybeDocument | null,\n  localWriteTime: Timestamp\n): MaybeDocument | null {\n  verifyMutationKeyMatches(mutation, maybeDoc);\n\n  if (mutation instanceof SetMutation) {\n    return applySetMutationToLocalView(mutation, maybeDoc);\n  } else if (mutation instanceof PatchMutation) {\n    return applyPatchMutationToLocalView(mutation, maybeDoc);\n  } else if (mutation instanceof TransformMutation) {\n    return applyTransformMutationToLocalView(\n      mutation,\n      maybeDoc,\n      localWriteTime,\n      baseDoc\n    );\n  } else {\n    debugAssert(\n      mutation instanceof DeleteMutation,\n      'Unexpected mutation type: ' + mutation\n    );\n    return applyDeleteMutationToLocalView(mutation, maybeDoc);\n  }\n}\n\n/**\n * If this mutation is not idempotent, returns the base value to persist with\n * this mutation. If a base value is returned, the mutation is always applied\n * to this base value, even if document has already been updated.\n *\n * The base value is a sparse object that consists of only the document\n * fields for which this mutation contains a non-idempotent transformation\n * (e.g. a numeric increment). The provided value guarantees consistent\n * behavior for non-idempotent transforms and allow us to return the same\n * latency-compensated value even if the backend has already applied the\n * mutation. The base value is null for idempotent mutations, as they can be\n * re-played even if the backend has already applied them.\n *\n * @return a base value to store along with the mutation, or null for\n * idempotent mutations.\n */\nexport function extractMutationBaseValue(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null\n): ObjectValue | null {\n  if (mutation instanceof TransformMutation) {\n    return extractTransformMutationBaseValue(mutation, maybeDoc);\n  }\n  return null;\n}\n\nexport function mutationEquals(left: Mutation, right: Mutation): boolean {\n  if (left.type !== right.type) {\n    return false;\n  }\n\n  if (!left.key.isEqual(right.key)) {\n    return false;\n  }\n\n  if (!left.precondition.isEqual(right.precondition)) {\n    return false;\n  }\n\n  if (left.type === MutationType.Set) {\n    return (left as SetMutation).value.isEqual((right as SetMutation).value);\n  }\n\n  if (left.type === MutationType.Patch) {\n    return (\n      (left as PatchMutation).data.isEqual((right as PatchMutation).data) &&\n      (left as PatchMutation).fieldMask.isEqual(\n        (right as PatchMutation).fieldMask\n      )\n    );\n  }\n\n  if (left.type === MutationType.Transform) {\n    return arrayEquals(\n      (left as TransformMutation).fieldTransforms,\n      (left as TransformMutation).fieldTransforms,\n      (l, r) => fieldTransformEquals(l, r)\n    );\n  }\n\n  return true;\n}\n\nfunction verifyMutationKeyMatches(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null\n): void {\n  if (maybeDoc != null) {\n    debugAssert(\n      maybeDoc.key.isEqual(mutation.key),\n      'Can only apply a mutation to a document with the same key'\n    );\n  }\n}\n\n/**\n * Returns the version from the given document for use as the result of a\n * mutation. Mutations are defined to return the version of the base document\n * only if it is an existing document. Deleted and unknown documents have a\n * post-mutation version of SnapshotVersion.min().\n */\nfunction getPostMutationVersion(\n  maybeDoc: MaybeDocument | null\n): SnapshotVersion {\n  if (maybeDoc instanceof Document) {\n    return maybeDoc.version;\n  } else {\n    return SnapshotVersion.min();\n  }\n}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nexport class SetMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly value: ObjectValue,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Set;\n}\n\nfunction applySetMutationToRemoteDocument(\n  mutation: SetMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): Document {\n  debugAssert(\n    mutationResult.transformResults == null,\n    'Transform results received by SetMutation.'\n  );\n\n  // Unlike applySetMutationToLocalView, if we're applying a mutation to a\n  // remote document the server has accepted the mutation so the precondition\n  // must have held.\n  return new Document(mutation.key, mutationResult.version, mutation.value, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applySetMutationToLocalView(\n  mutation: SetMutation,\n  maybeDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  const version = getPostMutationVersion(maybeDoc);\n  return new Document(mutation.key, version, mutation.value, {\n    hasLocalMutations: true\n  });\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nexport class PatchMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Patch;\n}\n\nfunction applyPatchMutationToRemoteDocument(\n  mutation: PatchMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): MaybeDocument {\n  debugAssert(\n    mutationResult.transformResults == null,\n    'Transform results received by PatchMutation.'\n  );\n\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    // Since the mutation was not rejected, we know that the  precondition\n    // matched on the backend. We therefore must not have the expected version\n    // of the document in our cache and return an UnknownDocument with the\n    // known updateTime.\n    return new UnknownDocument(mutation.key, mutationResult.version);\n  }\n\n  const newData = patchDocument(mutation, maybeDoc);\n  return new Document(mutation.key, mutationResult.version, newData, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applyPatchMutationToLocalView(\n  mutation: PatchMutation,\n  maybeDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  const version = getPostMutationVersion(maybeDoc);\n  const newData = patchDocument(mutation, maybeDoc);\n  return new Document(mutation.key, version, newData, {\n    hasLocalMutations: true\n  });\n}\n\n/**\n * Patches the data of document if available or creates a new document. Note\n * that this does not check whether or not the precondition of this patch\n * holds.\n */\nfunction patchDocument(\n  mutation: PatchMutation,\n  maybeDoc: MaybeDocument | null\n): ObjectValue {\n  let data: ObjectValue;\n  if (maybeDoc instanceof Document) {\n    data = maybeDoc.data();\n  } else {\n    data = ObjectValue.empty();\n  }\n  return patchObject(mutation, data);\n}\n\nfunction patchObject(mutation: PatchMutation, data: ObjectValue): ObjectValue {\n  const builder = new ObjectValueBuilder(data);\n  mutation.fieldMask.fields.forEach(fieldPath => {\n    if (!fieldPath.isEmpty()) {\n      const newValue = mutation.data.field(fieldPath);\n      if (newValue !== null) {\n        builder.set(fieldPath, newValue);\n      } else {\n        builder.delete(fieldPath);\n      }\n    }\n  });\n  return builder.build();\n}\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nexport class TransformMutation extends Mutation {\n  readonly type: MutationType = MutationType.Transform;\n\n  // NOTE: We set a precondition of exists: true as a safety-check, since we\n  // always combine TransformMutations with a SetMutation or PatchMutation which\n  // (if successful) should end up with an existing document.\n  readonly precondition = Precondition.exists(true);\n\n  constructor(\n    readonly key: DocumentKey,\n    readonly fieldTransforms: FieldTransform[]\n  ) {\n    super();\n  }\n}\n\nfunction applyTransformMutationToRemoteDocument(\n  mutation: TransformMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): Document | UnknownDocument {\n  hardAssert(\n    mutationResult.transformResults != null,\n    'Transform results missing for TransformMutation.'\n  );\n\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    // Since the mutation was not rejected, we know that the  precondition\n    // matched on the backend. We therefore must not have the expected version\n    // of the document in our cache and return an UnknownDocument with the\n    // known updateTime.\n    return new UnknownDocument(mutation.key, mutationResult.version);\n  }\n\n  const doc = requireDocument(mutation, maybeDoc);\n  const transformResults = serverTransformResults(\n    mutation.fieldTransforms,\n    maybeDoc,\n    mutationResult.transformResults!\n  );\n\n  const version = mutationResult.version;\n  const newData = transformObject(mutation, doc.data(), transformResults);\n  return new Document(mutation.key, version, newData, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applyTransformMutationToLocalView(\n  mutation: TransformMutation,\n  maybeDoc: MaybeDocument | null,\n  localWriteTime: Timestamp,\n  baseDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  const doc = requireDocument(mutation, maybeDoc);\n  const transformResults = localTransformResults(\n    mutation.fieldTransforms,\n    localWriteTime,\n    maybeDoc,\n    baseDoc\n  );\n  const newData = transformObject(mutation, doc.data(), transformResults);\n  return new Document(mutation.key, doc.version, newData, {\n    hasLocalMutations: true\n  });\n}\n\nfunction extractTransformMutationBaseValue(\n  mutation: TransformMutation,\n  maybeDoc: MaybeDocument | null | Document\n): ObjectValue | null {\n  let baseObject: ObjectValueBuilder | null = null;\n  for (const fieldTransform of mutation.fieldTransforms) {\n    const existingValue =\n      maybeDoc instanceof Document\n        ? maybeDoc.field(fieldTransform.field)\n        : undefined;\n    const coercedValue = computeTransformOperationBaseValue(\n      fieldTransform.transform,\n      existingValue || null\n    );\n\n    if (coercedValue != null) {\n      if (baseObject == null) {\n        baseObject = new ObjectValueBuilder().set(\n          fieldTransform.field,\n          coercedValue\n        );\n      } else {\n        baseObject = baseObject.set(fieldTransform.field, coercedValue);\n      }\n    }\n  }\n  return baseObject ? baseObject.build() : null;\n}\n\n/**\n * Asserts that the given MaybeDocument is actually a Document and verifies\n * that it matches the key for this mutation. Since we only support\n * transformations with precondition exists this method is guaranteed to be\n * safe.\n */\nfunction requireDocument(\n  mutation: Mutation,\n  maybeDoc: MaybeDocument | null\n): Document {\n  debugAssert(\n    maybeDoc instanceof Document,\n    'Unknown MaybeDocument type ' + maybeDoc\n  );\n  debugAssert(\n    maybeDoc.key.isEqual(mutation.key),\n    'Can only transform a document with the same key'\n  );\n  return maybeDoc;\n}\n\n/**\n * Creates a list of \"transform results\" (a transform result is a field value\n * representing the result of applying a transform) for use after a\n * TransformMutation has been acknowledged by the server.\n *\n * @param fieldTransforms The field transforms to apply the result to.\n * @param baseDoc The document prior to applying this mutation batch.\n * @param serverTransformResults The transform results received by the server.\n * @return The transform results list.\n */\nfunction serverTransformResults(\n  fieldTransforms: FieldTransform[],\n  baseDoc: MaybeDocument | null,\n  serverTransformResults: Array<api.Value | null>\n): api.Value[] {\n  const transformResults: api.Value[] = [];\n  hardAssert(\n    fieldTransforms.length === serverTransformResults.length,\n    `server transform result count (${serverTransformResults.length}) ` +\n      `should match field transform count (${fieldTransforms.length})`\n  );\n\n  for (let i = 0; i < serverTransformResults.length; i++) {\n    const fieldTransform = fieldTransforms[i];\n    const transform = fieldTransform.transform;\n    let previousValue: api.Value | null = null;\n    if (baseDoc instanceof Document) {\n      previousValue = baseDoc.field(fieldTransform.field);\n    }\n    transformResults.push(\n      applyTransformOperationToRemoteDocument(\n        transform,\n        previousValue,\n        serverTransformResults[i]\n      )\n    );\n  }\n  return transformResults;\n}\n\n/**\n * Creates a list of \"transform results\" (a transform result is a field value\n * representing the result of applying a transform) for use when applying a\n * TransformMutation locally.\n *\n * @param fieldTransforms The field transforms to apply the result to.\n * @param localWriteTime The local time of the transform mutation (used to\n *     generate ServerTimestampValues).\n * @param maybeDoc The current state of the document after applying all\n *     previous mutations.\n * @param baseDoc The document prior to applying this mutation batch.\n * @return The transform results list.\n */\nfunction localTransformResults(\n  fieldTransforms: FieldTransform[],\n  localWriteTime: Timestamp,\n  maybeDoc: MaybeDocument | null,\n  baseDoc: MaybeDocument | null\n): api.Value[] {\n  const transformResults: api.Value[] = [];\n  for (const fieldTransform of fieldTransforms) {\n    const transform = fieldTransform.transform;\n\n    let previousValue: api.Value | null = null;\n    if (maybeDoc instanceof Document) {\n      previousValue = maybeDoc.field(fieldTransform.field);\n    }\n\n    if (previousValue === null && baseDoc instanceof Document) {\n      // If the current document does not contain a value for the mutated\n      // field, use the value that existed before applying this mutation\n      // batch. This solves an edge case where a PatchMutation clears the\n      // values in a nested map before the TransformMutation is applied.\n      previousValue = baseDoc.field(fieldTransform.field);\n    }\n\n    transformResults.push(\n      applyTransformOperationToLocalView(\n        transform,\n        previousValue,\n        localWriteTime\n      )\n    );\n  }\n  return transformResults;\n}\n\nfunction transformObject(\n  mutation: TransformMutation,\n  data: ObjectValue,\n  transformResults: api.Value[]\n): ObjectValue {\n  debugAssert(\n    transformResults.length === mutation.fieldTransforms.length,\n    'TransformResults length mismatch.'\n  );\n\n  const builder = new ObjectValueBuilder(data);\n  for (let i = 0; i < mutation.fieldTransforms.length; i++) {\n    const fieldTransform = mutation.fieldTransforms[i];\n    builder.set(fieldTransform.field, transformResults[i]);\n  }\n  return builder.build();\n}\n\n/** A mutation that deletes the document at the given key. */\nexport class DeleteMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Delete;\n}\n\nfunction applyDeleteMutationToRemoteDocument(\n  mutation: DeleteMutation,\n  maybeDoc: MaybeDocument | null,\n  mutationResult: MutationResult\n): NoDocument {\n  debugAssert(\n    mutationResult.transformResults == null,\n    'Transform results received by DeleteMutation.'\n  );\n\n  // Unlike applyToLocalView, if we're applying a mutation to a remote\n  // document the server has accepted the mutation so the precondition must\n  // have held.\n\n  return new NoDocument(mutation.key, mutationResult.version, {\n    hasCommittedMutations: true\n  });\n}\n\nfunction applyDeleteMutationToLocalView(\n  mutation: DeleteMutation,\n  maybeDoc: MaybeDocument | null\n): MaybeDocument | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {\n    return maybeDoc;\n  }\n\n  if (maybeDoc) {\n    debugAssert(\n      maybeDoc.key.isEqual(mutation.key),\n      'Can only apply mutation to document with same key'\n    );\n  }\n  return new NoDocument(mutation.key, SnapshotVersion.min());\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nexport class VerifyMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Verify;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { debugAssert } from '../util/assert';\nimport { FieldMask } from './mutation';\nimport { FieldPath } from './path';\nimport { isServerTimestamp } from './server_timestamps';\nimport { valueEquals, isMapValue, typeOrder } from './values';\nimport { forEach } from '../util/obj';\n\nexport interface JsonObject<T> {\n  [name: string]: T;\n}\n\nexport const enum TypeOrder {\n  // This order is based on the backend's ordering, but modified to support\n  // server timestamps.\n  NullValue = 0,\n  BooleanValue = 1,\n  NumberValue = 2,\n  TimestampValue = 3,\n  ServerTimestampValue = 4,\n  StringValue = 5,\n  BlobValue = 6,\n  RefValue = 7,\n  GeoPointValue = 8,\n  ArrayValue = 9,\n  ObjectValue = 10\n}\n\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nexport class ObjectValue {\n  constructor(readonly proto: { mapValue: api.MapValue }) {\n    debugAssert(\n      !isServerTimestamp(proto),\n      'ServerTimestamps should be converted to ServerTimestampValue'\n    );\n  }\n\n  static empty(): ObjectValue {\n    return new ObjectValue({ mapValue: {} });\n  }\n\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path the path to search\n   * @return The value at the path or if there it doesn't exist.\n   */\n  field(path: FieldPath): api.Value | null {\n    if (path.isEmpty()) {\n      return this.proto;\n    } else {\n      let value: api.Value = this.proto;\n      for (let i = 0; i < path.length - 1; ++i) {\n        if (!value.mapValue!.fields) {\n          return null;\n        }\n        value = value.mapValue!.fields[path.get(i)];\n        if (!isMapValue(value)) {\n          return null;\n        }\n      }\n\n      value = (value.mapValue!.fields || {})[path.lastSegment()];\n      return value || null;\n    }\n  }\n\n  isEqual(other: ObjectValue): boolean {\n    return valueEquals(this.proto, other.proto);\n  }\n}\n\n/**\n * An Overlay, which contains an update to apply. Can either be Value proto, a\n * map of Overlay values (to represent additional nesting at the given key) or\n * `null` (to represent field deletes).\n */\ntype Overlay = Map<string, Overlay> | api.Value | null;\n\n/**\n * An ObjectValueBuilder provides APIs to set and delete fields from an\n * ObjectValue.\n */\nexport class ObjectValueBuilder {\n  /** A map that contains the accumulated changes in this builder. */\n  private overlayMap = new Map<string, Overlay>();\n\n  /**\n   * @param baseObject The object to mutate.\n   */\n  constructor(private readonly baseObject: ObjectValue = ObjectValue.empty()) {}\n\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path The field path to set.\n   * @param value The value to set.\n   * @return The current Builder instance.\n   */\n  set(path: FieldPath, value: api.Value): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot set field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, value);\n    return this;\n  }\n\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path The field path to remove.\n   * @return The current Builder instance.\n   */\n  delete(path: FieldPath): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot delete field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, null);\n    return this;\n  }\n\n  /**\n   * Adds `value` to the overlay map at `path`. Creates nested map entries if\n   * needed.\n   */\n  private setOverlay(path: FieldPath, value: api.Value | null): void {\n    let currentLevel = this.overlayMap;\n\n    for (let i = 0; i < path.length - 1; ++i) {\n      const currentSegment = path.get(i);\n      let currentValue = currentLevel.get(currentSegment);\n\n      if (currentValue instanceof Map) {\n        // Re-use a previously created map\n        currentLevel = currentValue;\n      } else if (\n        currentValue &&\n        typeOrder(currentValue) === TypeOrder.ObjectValue\n      ) {\n        // Convert the existing Protobuf MapValue into a map\n        currentValue = new Map<string, Overlay>(\n          Object.entries(currentValue.mapValue!.fields || {})\n        );\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      } else {\n        // Create an empty map to represent the current nesting level\n        currentValue = new Map<string, Overlay>();\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      }\n    }\n\n    currentLevel.set(path.lastSegment(), value);\n  }\n\n  /** Returns an ObjectValue with all mutations applied. */\n  build(): ObjectValue {\n    const mergedResult = this.applyOverlay(\n      FieldPath.emptyPath(),\n      this.overlayMap\n    );\n    if (mergedResult != null) {\n      return new ObjectValue(mergedResult);\n    } else {\n      return this.baseObject;\n    }\n  }\n\n  /**\n   * Applies any overlays from `currentOverlays` that exist at `currentPath`\n   * and returns the merged data at `currentPath` (or null if there were no\n   * changes).\n   *\n   * @param currentPath The path at the current nesting level. Can be set to\n   * FieldValue.emptyPath() to represent the root.\n   * @param currentOverlays The overlays at the current nesting level in the\n   * same format as `overlayMap`.\n   * @return The merged data at `currentPath` or null if no modifications\n   * were applied.\n   */\n  private applyOverlay(\n    currentPath: FieldPath,\n    currentOverlays: Map<string, Overlay>\n  ): { mapValue: api.MapValue } | null {\n    let modified = false;\n\n    const existingValue = this.baseObject.field(currentPath);\n    const resultAtPath = isMapValue(existingValue)\n      ? // If there is already data at the current path, base our\n        // modifications on top of the existing data.\n        { ...existingValue.mapValue.fields }\n      : {};\n\n    currentOverlays.forEach((value, pathSegment) => {\n      if (value instanceof Map) {\n        const nested = this.applyOverlay(currentPath.child(pathSegment), value);\n        if (nested != null) {\n          resultAtPath[pathSegment] = nested;\n          modified = true;\n        }\n      } else if (value !== null) {\n        resultAtPath[pathSegment] = value;\n        modified = true;\n      } else if (resultAtPath.hasOwnProperty(pathSegment)) {\n        delete resultAtPath[pathSegment];\n        modified = true;\n      }\n    });\n\n    return modified ? { mapValue: { fields: resultAtPath } } : null;\n  }\n}\n\n/**\n * Returns a FieldMask built from all fields in a MapValue.\n */\nexport function extractFieldMask(value: api.MapValue): FieldMask {\n  const fields: FieldPath[] = [];\n  forEach(value!.fields || {}, (key, value) => {\n    const currentPath = new FieldPath([key]);\n    if (isMapValue(value)) {\n      const nestedMask = extractFieldMask(value.mapValue!);\n      const nestedFields = nestedMask.fields;\n      if (nestedFields.length === 0) {\n        // Preserve the empty map by adding it to the FieldMask.\n        fields.push(currentPath);\n      } else {\n        // For nested and non-empty ObjectValues, add the FieldPath of the\n        // leaf nodes.\n        for (const nestedPath of nestedFields) {\n          fields.push(currentPath.child(nestedPath));\n        }\n      }\n    } else {\n      // For nested and non-empty ObjectValues, add the FieldPath of the leaf\n      // nodes.\n      fields.push(currentPath);\n    }\n  });\n  return new FieldMask(fields);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { fail } from '../util/assert';\n\nimport { DocumentKey } from './document_key';\nimport { ObjectValue } from './object_value';\nimport { FieldPath } from './path';\nimport { valueCompare } from './values';\n\nexport interface DocumentOptions {\n  hasLocalMutations?: boolean;\n  hasCommittedMutations?: boolean;\n}\n\n/**\n * The result of a lookup for a given path may be an existing document or a\n * marker that this document does not exist at a given version.\n */\nexport abstract class MaybeDocument {\n  constructor(readonly key: DocumentKey, readonly version: SnapshotVersion) {}\n\n  /**\n   * Whether this document had a local mutation applied that has not yet been\n   * acknowledged by Watch.\n   */\n  abstract get hasPendingWrites(): boolean;\n\n  abstract isEqual(other: MaybeDocument | null | undefined): boolean;\n\n  abstract toString(): string;\n}\n\n/**\n * Represents a document in Firestore with a key, version, data and whether the\n * data has local mutations applied to it.\n */\nexport class Document extends MaybeDocument {\n  readonly hasLocalMutations: boolean;\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    private readonly objectValue: ObjectValue,\n    options: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasLocalMutations = !!options.hasLocalMutations;\n    this.hasCommittedMutations = !!options.hasCommittedMutations;\n  }\n\n  field(path: FieldPath): api.Value | null {\n    return this.objectValue.field(path);\n  }\n\n  data(): ObjectValue {\n    return this.objectValue;\n  }\n\n  toProto(): { mapValue: api.MapValue } {\n    return this.objectValue.proto;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof Document &&\n      this.key.isEqual(other.key) &&\n      this.version.isEqual(other.version) &&\n      this.hasLocalMutations === other.hasLocalMutations &&\n      this.hasCommittedMutations === other.hasCommittedMutations &&\n      this.objectValue.isEqual(other.objectValue)\n    );\n  }\n\n  toString(): string {\n    return (\n      `Document(${this.key}, ${\n        this.version\n      }, ${this.objectValue.toString()}, ` +\n      `{hasLocalMutations: ${this.hasLocalMutations}}), ` +\n      `{hasCommittedMutations: ${this.hasCommittedMutations}})`\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n}\n\n/**\n * Compares the value for field `field` in the provided documents. Throws if\n * the field does not exist in both documents.\n */\nexport function compareDocumentsByField(\n  field: FieldPath,\n  d1: Document,\n  d2: Document\n): number {\n  const v1 = d1.field(field);\n  const v2 = d2.field(field);\n  if (v1 !== null && v2 !== null) {\n    return valueCompare(v1, v2);\n  } else {\n    return fail(\"Trying to compare documents on fields that don't exist\");\n  }\n}\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nexport class NoDocument extends MaybeDocument {\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    options?: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasCommittedMutations = !!(options && options.hasCommittedMutations);\n  }\n\n  toString(): string {\n    return `NoDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasCommittedMutations;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof NoDocument &&\n      other.hasCommittedMutations === this.hasCommittedMutations &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n\n/**\n * A class representing an existing document whose data is unknown (e.g. a\n * document that was updated without a known base document).\n */\nexport class UnknownDocument extends MaybeDocument {\n  toString(): string {\n    return `UnknownDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return true;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof UnknownDocument &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Resolver<R> {\n  (value?: R | Promise<R>): void;\n}\n\nexport interface Rejecter {\n  (reason?: Error): void;\n}\n\nexport class Deferred<R = void> {\n  promise: Promise<R>;\n  // Assigned synchronously in constructor by Promise constructor callback.\n  resolve!: Resolver<R>;\n  reject!: Rejecter;\n\n  constructor() {\n    this.promise = new Promise((resolve: Resolver<R>, reject: Rejecter) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * Takes an array of values and a function from a value to a Promise. The function is run on each\n * value sequentially, waiting for the previous promise to resolve before starting the next one.\n * The returned promise resolves once the function has been run on all values.\n */\nexport function sequence<T>(\n  values: T[],\n  fn: (value: T) => Promise<void>\n): Promise<void> {\n  let p = Promise.resolve();\n  for (const value of values) {\n    p = p.then(() => fn(value));\n  }\n  return p;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { logDebug } from '../util/log';\n\nconst LOG_TAG = 'ExponentialBackoff';\n\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\n\n/** Maximum backoff time in milliseconds */\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nexport class ExponentialBackoff {\n  private currentBaseMs: number = 0;\n  private timerPromise: DelayedOperation<void> | null = null;\n  /** The last backoff attempt, as epoch milliseconds. */\n  private lastAttemptTime = Date.now();\n\n  constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    private readonly queue: AsyncQueue,\n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    private readonly timerId: TimerId,\n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    private readonly initialDelayMs: number = DEFAULT_BACKOFF_INITIAL_DELAY_MS,\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */\n    private readonly backoffFactor: number = DEFAULT_BACKOFF_FACTOR,\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */\n    private readonly maxDelayMs: number = DEFAULT_BACKOFF_MAX_DELAY_MS\n  ) {\n    this.reset();\n  }\n\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  reset(): void {\n    this.currentBaseMs = 0;\n  }\n\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n  resetToMax(): void {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n  backoffAndRun(op: () => Promise<void>): void {\n    // Cancel any pending backoff operation.\n    this.cancel();\n\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const desiredDelayWithJitterMs = Math.floor(\n      this.currentBaseMs + this.jitterDelayMs()\n    );\n\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    const delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\n\n    // Guard against the backoff delay already being past.\n    const remainingDelayMs = Math.max(\n      0,\n      desiredDelayWithJitterMs - delaySoFarMs\n    );\n\n    if (remainingDelayMs > 0) {\n      logDebug(\n        LOG_TAG,\n        `Backing off for ${remainingDelayMs} ms ` +\n          `(base delay: ${this.currentBaseMs} ms, ` +\n          `delay with jitter: ${desiredDelayWithJitterMs} ms, ` +\n          `last attempt: ${delaySoFarMs} ms ago)`\n      );\n    }\n\n    this.timerPromise = this.queue.enqueueAfterDelay(\n      this.timerId,\n      remainingDelayMs,\n      () => {\n        this.lastAttemptTime = Date.now();\n        return op();\n      }\n    );\n\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.currentBaseMs *= this.backoffFactor;\n    if (this.currentBaseMs < this.initialDelayMs) {\n      this.currentBaseMs = this.initialDelayMs;\n    }\n    if (this.currentBaseMs > this.maxDelayMs) {\n      this.currentBaseMs = this.maxDelayMs;\n    }\n  }\n\n  skipBackoff(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.skipDelay();\n      this.timerPromise = null;\n    }\n  }\n\n  cancel(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.cancel();\n      this.timerPromise = null;\n    }\n  }\n\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  private jitterDelayMs(): number {\n    return (Math.random() - 0.5) * this.currentBaseMs;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The Platform's 'window' implementation or null if not available. */\nexport function getWindow(): Window | null {\n  // `window` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' ? window : null;\n}\n\n/** The Platform's 'document' implementation or null if not available. */\nexport function getDocument(): Document | null {\n  // `document` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return typeof document !== 'undefined' ? document : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { logDebug, logError } from './log';\nimport { Deferred } from './promise';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { isIndexedDbTransactionError } from '../local/simple_db';\nimport { getWindow } from '../platform/dom';\n\nconst LOG_TAG = 'AsyncQueue';\n\n// Accept any return type from setTimeout().\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype TimerHandle = any;\n\n/**\n * Wellknown \"timer\" IDs used when scheduling delayed operations on the\n * AsyncQueue. These IDs can then be used from tests to check for the presence\n * of operations or to run them early.\n *\n * The string values are used when encoding these timer IDs in JSON spec tests.\n */\nexport const enum TimerId {\n  /** All can be used with runDelayedOperationsEarly() to run all timers. */\n  All = 'all',\n\n  /**\n   * The following 4 timers are used in persistent_stream.ts for the listen and\n   * write streams. The \"Idle\" timer is used to close the stream due to\n   * inactivity. The \"ConnectionBackoff\" timer is used to restart a stream once\n   * the appropriate backoff delay has elapsed.\n   */\n  ListenStreamIdle = 'listen_stream_idle',\n  ListenStreamConnectionBackoff = 'listen_stream_connection_backoff',\n  WriteStreamIdle = 'write_stream_idle',\n  WriteStreamConnectionBackoff = 'write_stream_connection_backoff',\n\n  /**\n   * A timer used in online_state_tracker.ts to transition from\n   * OnlineState.Unknown to Offline after a set timeout, rather than waiting\n   * indefinitely for success or failure.\n   */\n  OnlineStateTimeout = 'online_state_timeout',\n\n  /**\n   * A timer used to update the client metadata in IndexedDb, which is used\n   * to determine the primary leaseholder.\n   */\n  ClientMetadataRefresh = 'client_metadata_refresh',\n\n  /** A timer used to periodically attempt LRU Garbage collection */\n  LruGarbageCollection = 'lru_garbage_collection',\n\n  /**\n   * A timer used to retry transactions. Since there can be multiple concurrent\n   * transactions, multiple of these may be in the queue at a given time.\n   */\n  TransactionRetry = 'transaction_retry',\n\n  /**\n   * A timer used to retry operations scheduled via retryable AsyncQueue\n   * operations.\n   */\n  AsyncQueueRetry = 'async_queue_retry'\n}\n\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\nexport class DelayedOperation<T extends unknown> implements PromiseLike<T> {\n  // handle for use with clearTimeout(), or null if the operation has been\n  // executed or canceled already.\n  private timerHandle: TimerHandle | null;\n\n  private readonly deferred = new Deferred<T>();\n\n  private constructor(\n    private readonly asyncQueue: AsyncQueue,\n    readonly timerId: TimerId,\n    readonly targetTimeMs: number,\n    private readonly op: () => Promise<T>,\n    private readonly removalCallback: (op: DelayedOperation<T>) => void\n  ) {\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(err => {});\n  }\n\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue The queue to schedule the operation on.\n   * @param id A Timer ID identifying the type of operation this is.\n   * @param delayMs The delay (ms) before the operation should be scheduled.\n   * @param op The operation to run.\n   * @param removalCallback A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  static createAndSchedule<R extends unknown>(\n    asyncQueue: AsyncQueue,\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<R>,\n    removalCallback: (op: DelayedOperation<R>) => void\n  ): DelayedOperation<R> {\n    const targetTime = Date.now() + delayMs;\n    const delayedOp = new DelayedOperation(\n      asyncQueue,\n      timerId,\n      targetTime,\n      op,\n      removalCallback\n    );\n    delayedOp.start(delayMs);\n    return delayedOp;\n  }\n\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n  private start(delayMs: number): void {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), delayMs);\n  }\n\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n  skipDelay(): void {\n    return this.handleDelayElapsed();\n  }\n\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n  cancel(reason?: string): void {\n    if (this.timerHandle !== null) {\n      this.clearTimeout();\n      this.deferred.reject(\n        new FirestoreError(\n          Code.CANCELLED,\n          'Operation cancelled' + (reason ? ': ' + reason : '')\n        )\n      );\n    }\n  }\n\n  then = this.deferred.promise.then.bind(this.deferred.promise);\n\n  private handleDelayElapsed(): void {\n    this.asyncQueue.enqueueAndForget(() => {\n      if (this.timerHandle !== null) {\n        this.clearTimeout();\n        return this.op().then(result => {\n          return this.deferred.resolve(result);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n\n  private clearTimeout(): void {\n    if (this.timerHandle !== null) {\n      this.removalCallback(this);\n      clearTimeout(this.timerHandle);\n      this.timerHandle = null;\n    }\n  }\n}\n\nexport class AsyncQueue {\n  // The last promise in the queue.\n  private tail: Promise<unknown> = Promise.resolve();\n\n  // A list of retryable operations. Retryable operations are run in order and\n  // retried with backoff.\n  private retryableOps: Array<() => Promise<void>> = [];\n\n  // Is this AsyncQueue being shut down? Once it is set to true, it will not\n  // be changed again.\n  private _isShuttingDown: boolean = false;\n\n  // Operations scheduled to be queued in the future. Operations are\n  // automatically removed after they are run or canceled.\n  private delayedOperations: Array<DelayedOperation<unknown>> = [];\n\n  // visible for testing\n  failure: Error | null = null;\n\n  // Flag set while there's an outstanding AsyncQueue operation, used for\n  // assertion sanity-checks.\n  private operationInProgress = false;\n\n  // List of TimerIds to fast-forward delays for.\n  private timerIdsToSkip: TimerId[] = [];\n\n  // Backoff timer used to schedule retries for retryable operations\n  private backoff = new ExponentialBackoff(this, TimerId.AsyncQueueRetry);\n\n  // Visibility handler that triggers an immediate retry of all retryable\n  // operations. Meant to speed up recovery when we regain file system access\n  // after page comes into foreground.\n  private visibilityHandler = (): void => this.backoff.skipBackoff();\n\n  constructor() {\n    const window = getWindow();\n    if (window && typeof window.addEventListener === 'function') {\n      window.addEventListener('visibilitychange', this.visibilityHandler);\n    }\n  }\n\n  // Is this AsyncQueue being shut down? If true, this instance will not enqueue\n  // any new operations, Promises from enqueue requests will not resolve.\n  get isShuttingDown(): boolean {\n    return this._isShuttingDown;\n  }\n\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget<T extends unknown>(op: () => Promise<T>): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue without waiting for it to complete (i.e. we ignore the Promise result).\n   */\n  enqueueAndForgetEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): void {\n    this.verifyNotFailed();\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueueInternal(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue.\n   */\n  private enqueueEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): Promise<T> {\n    this.verifyNotFailed();\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Adds a new operation to the queue and initialize the shut down of this queue.\n   * Returns a promise that will be resolved when the promise returned by the new\n   * operation is (with its value).\n   * Once this method is called, the only possible way to request running an operation\n   * is through `enqueueAndForgetEvenAfterShutdown`.\n   */\n  async enqueueAndInitiateShutdown(op: () => Promise<void>): Promise<void> {\n    this.verifyNotFailed();\n    if (!this._isShuttingDown) {\n      this._isShuttingDown = true;\n      const window = getWindow();\n      if (window) {\n        window.removeEventListener('visibilitychange', this.visibilityHandler);\n      }\n      await this.enqueueEvenAfterShutdown(op);\n    }\n  }\n\n  /**\n   * Adds a new operation to the queue. Returns a promise that will be resolved\n   * when the promise returned by the new operation is (with its value).\n   */\n  enqueue<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    this.verifyNotFailed();\n    if (this._isShuttingDown) {\n      // Return a Promise which never resolves.\n      return new Promise<T>(resolve => {});\n    }\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Enqueue a retryable operation.\n   *\n   * A retryable operation is rescheduled with backoff if it fails with a\n   * IndexedDbTransactionError (the error type used by SimpleDb). All\n   * retryable operations are executed in order and only run if all prior\n   * operations were retried successfully.\n   */\n  enqueueRetryable(op: () => Promise<void>): void {\n    this.retryableOps.push(op);\n    this.enqueueAndForget(() => this.retryNextOp());\n  }\n\n  /**\n   * Runs the next operation from the retryable queue. If the operation fails,\n   * reschedules with backoff.\n   */\n  private async retryNextOp(): Promise<void> {\n    if (this.retryableOps.length === 0) {\n      return;\n    }\n\n    try {\n      await this.retryableOps[0]();\n      this.retryableOps.shift();\n      this.backoff.reset();\n    } catch (e) {\n      if (isIndexedDbTransactionError(e)) {\n        logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e);\n      } else {\n        throw e; // Failure will be handled by AsyncQueue\n      }\n    }\n\n    if (this.retryableOps.length > 0) {\n      // If there are additional operations, we re-schedule `retryNextOp()`.\n      // This is necessary to run retryable operations that failed during\n      // their initial attempt since we don't know whether they are already\n      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n      // call scheduled here.\n      // Since `backoffAndRun()` cancels an existing backoff and schedules a\n      // new backoff on every call, there is only ever a single additional\n      // operation in the queue.\n      this.backoff.backoffAndRun(() => this.retryNextOp());\n    }\n  }\n\n  private enqueueInternal<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    const newTail = this.tail.then(() => {\n      this.operationInProgress = true;\n      return op()\n        .catch((error: FirestoreError) => {\n          this.failure = error;\n          this.operationInProgress = false;\n          const message = getMessageOrStack(error);\n          logError('INTERNAL UNHANDLED ERROR: ', message);\n\n          // Re-throw the error so that this.tail becomes a rejected Promise and\n          // all further attempts to chain (via .then) will just short-circuit\n          // and return the rejected Promise.\n          throw error;\n        })\n        .then(result => {\n          this.operationInProgress = false;\n          return result;\n        });\n    });\n    this.tail = newTail;\n    return newTail;\n  }\n\n  /**\n   * Schedules an operation to be queued on the AsyncQueue once the specified\n   * `delayMs` has elapsed. The returned DelayedOperation can be used to cancel\n   * or fast-forward the operation prior to its running.\n   */\n  enqueueAfterDelay<T extends unknown>(\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<T>\n  ): DelayedOperation<T> {\n    this.verifyNotFailed();\n\n    debugAssert(\n      delayMs >= 0,\n      `Attempted to schedule an operation with a negative delay of ${delayMs}`\n    );\n\n    // Fast-forward delays for timerIds that have been overriden.\n    if (this.timerIdsToSkip.indexOf(timerId) > -1) {\n      delayMs = 0;\n    }\n\n    const delayedOp = DelayedOperation.createAndSchedule<T>(\n      this,\n      timerId,\n      delayMs,\n      op,\n      removedOp =>\n        this.removeDelayedOperation(removedOp as DelayedOperation<unknown>)\n    );\n    this.delayedOperations.push(delayedOp as DelayedOperation<unknown>);\n    return delayedOp;\n  }\n\n  private verifyNotFailed(): void {\n    if (this.failure) {\n      fail('AsyncQueue is already failed: ' + getMessageOrStack(this.failure));\n    }\n  }\n\n  /**\n   * Verifies there's an operation currently in-progress on the AsyncQueue.\n   * Unfortunately we can't verify that the running code is in the promise chain\n   * of that operation, so this isn't a foolproof check, but it should be enough\n   * to catch some bugs.\n   */\n  verifyOperationInProgress(): void {\n    debugAssert(\n      this.operationInProgress,\n      'verifyOpInProgress() called when no op in progress on this queue.'\n    );\n  }\n\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n  async drain(): Promise<void> {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let currentTail: Promise<unknown>;\n    do {\n      currentTail = this.tail;\n      await currentTail;\n    } while (currentTail !== this.tail);\n  }\n\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n  containsDelayedOperation(timerId: TimerId): boolean {\n    for (const op of this.delayedOperations) {\n      if (op.timerId === timerId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId Delayed operations up to and including this TimerId will\n   *  be drained. Pass TimerId.All to run all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n  runAllDelayedOperationsUntil(lastTimerId: TimerId): Promise<void> {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.drain().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      this.delayedOperations.sort((a, b) => a.targetTimeMs - b.targetTimeMs);\n\n      for (const op of this.delayedOperations) {\n        op.skipDelay();\n        if (lastTimerId !== TimerId.All && op.timerId === lastTimerId) {\n          break;\n        }\n      }\n\n      return this.drain();\n    });\n  }\n\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n  skipDelaysForTimerId(timerId: TimerId): void {\n    this.timerIdsToSkip.push(timerId);\n  }\n\n  /** Called once a DelayedOperation is run or canceled. */\n  private removeDelayedOperation(op: DelayedOperation<unknown>): void {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const index = this.delayedOperations.indexOf(op);\n    debugAssert(index >= 0, 'Delayed operation not found.');\n    this.delayedOperations.splice(index, 1);\n  }\n}\n\n/**\n * Returns a FirestoreError that can be surfaced to the user if the provided\n * error is an IndexedDbTransactionError. Re-throws the error otherwise.\n */\nexport function wrapInUserErrorIfRecoverable(\n  e: Error,\n  msg: string\n): FirestoreError {\n  logError(LOG_TAG, `${msg}: ${e}`);\n  if (isIndexedDbTransactionError(e)) {\n    return new FirestoreError(Code.UNAVAILABLE, `${msg}: ${e}`);\n  } else {\n    throw e;\n  }\n}\n\n/**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error Error or FirestoreError\n */\nfunction getMessageOrStack(error: Error): string {\n  let message = error.message || '';\n  if (error.stack) {\n    if (error.stack.includes(error.message)) {\n      message = error.stack;\n    } else {\n      message = error.message + '\\n' + error.stack;\n    }\n  }\n  return message;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getUA } from '@firebase/util';\nimport { debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\nimport { Deferred } from '../util/promise';\nimport { PersistencePromise } from './persistence_promise';\n\n// References to `window` are guarded by SimpleDb.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'SimpleDb';\n\n/**\n * The maximum number of retry attempts for an IndexedDb transaction that fails\n * with a DOMException.\n */\nconst TRANSACTION_RETRY_COUNT = 3;\n\n// The different modes supported by `SimpleDb.runTransaction()`\ntype SimpleDbTransactionMode = 'readonly' | 'readwrite';\n\nexport interface SimpleDbSchemaConverter {\n  createOrUpgrade(\n    db: IDBDatabase,\n    txn: IDBTransaction,\n    fromVersion: number,\n    toVersion: number\n  ): PersistencePromise<void>;\n}\n\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nexport class SimpleDb {\n  private db?: IDBDatabase;\n  private versionchangelistener?: (event: IDBVersionChangeEvent) => void;\n\n  /** Deletes the specified database. */\n  static delete(name: string): Promise<void> {\n    logDebug(LOG_TAG, 'Removing database:', name);\n    return wrapRequest<void>(window.indexedDB.deleteDatabase(name)).toPromise();\n  }\n\n  /** Returns true if IndexedDB is available in the current environment. */\n  static isAvailable(): boolean {\n    if (typeof indexedDB === 'undefined') {\n      return false;\n    }\n\n    if (SimpleDb.isMockPersistence()) {\n      return true;\n    }\n\n    // We extensively use indexed array values and compound keys,\n    // which IE and Edge do not support. However, they still have indexedDB\n    // defined on the window, so we need to check for them here and make sure\n    // to return that persistence is not enabled for those browsers.\n    // For tracking support of this feature, see here:\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n\n    // Check the UA string to find out the browser.\n    const ua = getUA();\n\n    // IE 10\n    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n    // IE 11\n    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n    // Edge\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n    // iOS Safari: Disable for users running iOS version < 10.\n    const iOSVersion = SimpleDb.getIOSVersion(ua);\n    const isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;\n\n    // Android browser: Disable for userse running version < 4.5.\n    const androidVersion = SimpleDb.getAndroidVersion(ua);\n    const isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;\n\n    if (\n      ua.indexOf('MSIE ') > 0 ||\n      ua.indexOf('Trident/') > 0 ||\n      ua.indexOf('Edge/') > 0 ||\n      isUnsupportedIOS ||\n      isUnsupportedAndroid\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Returns true if the backing IndexedDB store is the Node IndexedDBShim\n   * (see https://github.com/axemclion/IndexedDBShim).\n   */\n  static isMockPersistence(): boolean {\n    return (\n      typeof process !== 'undefined' &&\n      process.env?.USE_MOCK_PERSISTENCE === 'YES'\n    );\n  }\n\n  /** Helper to get a typed SimpleDbStore from a transaction. */\n  static getStore<KeyType extends IDBValidKey, ValueType extends unknown>(\n    txn: SimpleDbTransaction,\n    store: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    return txn.store<KeyType, ValueType>(store);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine iOS version. Returns -1 if not found. */\n  static getIOSVersion(ua: string): number {\n    const iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\\d_]+)/i);\n    const version = iOSVersionRegex\n      ? iOSVersionRegex[1].split('_').slice(0, 2).join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine Android version. Returns -1 if not found. */\n  static getAndroidVersion(ua: string): number {\n    const androidVersionRegex = ua.match(/Android ([\\d.]+)/i);\n    const version = androidVersionRegex\n      ? androidVersionRegex[1].split('.').slice(0, 2).join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  /*\n   * Creates a new SimpleDb wrapper for IndexedDb database `name`.\n   *\n   * Note that `version` must not be a downgrade. IndexedDB does not support\n   * downgrading the schema version. We currently do not support any way to do\n   * versioning outside of IndexedDB's versioning mechanism, as only\n   * version-upgrade transactions are allowed to do things like create\n   * objectstores.\n   */\n  constructor(\n    private readonly name: string,\n    private readonly version: number,\n    private readonly schemaConverter: SimpleDbSchemaConverter\n  ) {\n    debugAssert(\n      SimpleDb.isAvailable(),\n      'IndexedDB not supported in current environment.'\n    );\n\n    const iOSVersion = SimpleDb.getIOSVersion(getUA());\n    // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the\n    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for\n    // whatever reason it's much harder to hit after 12.2 so we only proactively\n    // log on 12.2.\n    if (iOSVersion === 12.2) {\n      logError(\n        'Firestore persistence suffers from a bug in iOS 12.2 ' +\n          'Safari that may cause your app to stop working. See ' +\n          'https://stackoverflow.com/q/56496296/110915 for details ' +\n          'and a potential workaround.'\n      );\n    }\n  }\n\n  /**\n   * Opens the specified database, creating or upgrading it if necessary.\n   */\n  async ensureDb(): Promise<IDBDatabase> {\n    if (!this.db) {\n      logDebug(LOG_TAG, 'Opening database:', this.name);\n      this.db = await new Promise<IDBDatabase>((resolve, reject) => {\n        // TODO(mikelehen): Investigate browser compatibility.\n        // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n        // suggests IE9 and older WebKit browsers handle upgrade\n        // differently. They expect setVersion, as described here:\n        // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion\n        const request = indexedDB.open(this.name, this.version);\n\n        request.onsuccess = (event: Event) => {\n          const db = (event.target as IDBOpenDBRequest).result;\n          resolve(db);\n        };\n\n        request.onblocked = () => {\n          reject(\n            new IndexedDbTransactionError(\n              'Cannot upgrade IndexedDB schema while another tab is open. ' +\n                'Close all tabs that access Firestore and reload this page to proceed.'\n            )\n          );\n        };\n\n        request.onerror = (event: Event) => {\n          const error: DOMException = (event.target as IDBOpenDBRequest).error!;\n          if (error.name === 'VersionError') {\n            reject(\n              new FirestoreError(\n                Code.FAILED_PRECONDITION,\n                'A newer version of the Firestore SDK was previously used and so the persisted ' +\n                  'data is not compatible with the version of the SDK you are now using. The SDK ' +\n                  'will operate with persistence disabled. If you need persistence, please ' +\n                  're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' +\n                  'data for your app to start fresh.'\n              )\n            );\n          } else {\n            reject(new IndexedDbTransactionError(error));\n          }\n        };\n\n        request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n          logDebug(\n            LOG_TAG,\n            'Database \"' + this.name + '\" requires upgrade from version:',\n            event.oldVersion\n          );\n          const db = (event.target as IDBOpenDBRequest).result;\n          this.schemaConverter\n            .createOrUpgrade(\n              db,\n              request.transaction!,\n              event.oldVersion,\n              this.version\n            )\n            .next(() => {\n              logDebug(\n                LOG_TAG,\n                'Database upgrade to version ' + this.version + ' complete'\n              );\n            });\n        };\n      });\n    }\n\n    if (this.versionchangelistener) {\n      this.db.onversionchange = event => this.versionchangelistener!(event);\n    }\n    return this.db;\n  }\n\n  setVersionChangeListener(\n    versionChangeListener: (event: IDBVersionChangeEvent) => void\n  ): void {\n    this.versionchangelistener = versionChangeListener;\n    if (this.db) {\n      this.db.onversionchange = (event: IDBVersionChangeEvent) => {\n        return versionChangeListener(event);\n      };\n    }\n  }\n\n  async runTransaction<T>(\n    mode: SimpleDbTransactionMode,\n    objectStores: string[],\n    transactionFn: (transaction: SimpleDbTransaction) => PersistencePromise<T>\n  ): Promise<T> {\n    const readonly = mode === 'readonly';\n    let attemptNumber = 0;\n\n    while (true) {\n      ++attemptNumber;\n\n      try {\n        this.db = await this.ensureDb();\n\n        const transaction = SimpleDbTransaction.open(\n          this.db,\n          readonly ? 'readonly' : 'readwrite',\n          objectStores\n        );\n        const transactionFnResult = transactionFn(transaction)\n          .catch(error => {\n            // Abort the transaction if there was an error.\n            transaction.abort(error);\n            // We cannot actually recover, and calling `abort()` will cause the transaction's\n            // completion promise to be rejected. This in turn means that we won't use\n            // `transactionFnResult` below. We return a rejection here so that we don't add the\n            // possibility of returning `void` to the type of `transactionFnResult`.\n            return PersistencePromise.reject<T>(error);\n          })\n          .toPromise();\n\n        // As noted above, errors are propagated by aborting the transaction. So\n        // we swallow any error here to avoid the browser logging it as unhandled.\n        transactionFnResult.catch(() => {});\n\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        await transaction.completionPromise;\n        return transactionFnResult;\n      } catch (error) {\n        // TODO(schmidt-sebastian): We could probably be smarter about this and\n        // not retry exceptions that are likely unrecoverable (such as quota\n        // exceeded errors).\n\n        // Note: We cannot use an instanceof check for FirestoreException, since the\n        // exception is wrapped in a generic error by our async/await handling.\n        const retryable =\n          error.name !== 'FirebaseError' &&\n          attemptNumber < TRANSACTION_RETRY_COUNT;\n        logDebug(\n          LOG_TAG,\n          'Transaction failed with error: %s. Retrying: %s.',\n          error.message,\n          retryable\n        );\n\n        this.close();\n\n        if (!retryable) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  }\n\n  close(): void {\n    if (this.db) {\n      this.db.close();\n    }\n    this.db = undefined;\n  }\n}\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nexport class IterationController {\n  private shouldStop = false;\n  private nextKey: IDBValidKey | null = null;\n\n  constructor(private dbCursor: IDBCursorWithValue) {}\n\n  get isDone(): boolean {\n    return this.shouldStop;\n  }\n\n  get skipToKey(): IDBValidKey | null {\n    return this.nextKey;\n  }\n\n  set cursor(value: IDBCursorWithValue) {\n    this.dbCursor = value;\n  }\n\n  /**\n   * This function can be called to stop iteration at any point.\n   */\n  done(): void {\n    this.shouldStop = true;\n  }\n\n  /**\n   * This function can be called to skip to that next key, which could be\n   * an index or a primary key.\n   */\n  skip(key: IDBValidKey): void {\n    this.nextKey = key;\n  }\n\n  /**\n   * Delete the current cursor value from the object store.\n   *\n   * NOTE: You CANNOT do this with a keysOnly query.\n   */\n  delete(): PersistencePromise<void> {\n    return wrapRequest<void>(this.dbCursor.delete());\n  }\n}\n\n/**\n * Callback used with iterate() method.\n */\nexport type IterateCallback<KeyType, ValueType> = (\n  key: KeyType,\n  value: ValueType,\n  control: IterationController\n) => void | PersistencePromise<void>;\n\n/** Options available to the iterate() method. */\nexport interface IterateOptions {\n  /** Index to iterate over (else primary keys will be iterated) */\n  index?: string;\n\n  /** IndxedDB Range to iterate over (else entire store will be iterated) */\n  range?: IDBKeyRange;\n\n  /** If true, values aren't read while iterating. */\n  keysOnly?: boolean;\n\n  /** If true, iterate over the store in reverse. */\n  reverse?: boolean;\n}\n\n/** An error that wraps exceptions that thrown during IndexedDB execution. */\nexport class IndexedDbTransactionError extends FirestoreError {\n  name = 'IndexedDbTransactionError';\n\n  constructor(cause: Error | string) {\n    super(Code.UNAVAILABLE, 'IndexedDB transaction failed: ' + cause);\n  }\n}\n\n/** Verifies whether `e` is an IndexedDbTransactionError. */\nexport function isIndexedDbTransactionError(e: Error): boolean {\n  // Use name equality, as instanceof checks on errors don't work with errors\n  // that wrap other errors.\n  return e.name === 'IndexedDbTransactionError';\n}\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nexport class SimpleDbTransaction {\n  private aborted = false;\n\n  /**\n   * A promise that resolves with the result of the IndexedDb transaction.\n   */\n  private readonly completionDeferred = new Deferred<void>();\n\n  static open(\n    db: IDBDatabase,\n    mode: IDBTransactionMode,\n    objectStoreNames: string[]\n  ): SimpleDbTransaction {\n    try {\n      return new SimpleDbTransaction(db.transaction(objectStoreNames, mode));\n    } catch (e) {\n      throw new IndexedDbTransactionError(e);\n    }\n  }\n\n  constructor(private readonly transaction: IDBTransaction) {\n    this.transaction.oncomplete = () => {\n      this.completionDeferred.resolve();\n    };\n    this.transaction.onabort = () => {\n      if (transaction.error) {\n        this.completionDeferred.reject(\n          new IndexedDbTransactionError(transaction.error)\n        );\n      } else {\n        this.completionDeferred.resolve();\n      }\n    };\n    this.transaction.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      this.completionDeferred.reject(new IndexedDbTransactionError(error));\n    };\n  }\n\n  get completionPromise(): Promise<void> {\n    return this.completionDeferred.promise;\n  }\n\n  abort(error?: Error): void {\n    if (error) {\n      this.completionDeferred.reject(error);\n    }\n\n    if (!this.aborted) {\n      logDebug(\n        LOG_TAG,\n        'Aborting transaction:',\n        error ? error.message : 'Client-initiated abort'\n      );\n      this.aborted = true;\n      this.transaction.abort();\n    }\n  }\n\n  /**\n   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n   * operations performed on the SimpleDbStore happen within the context of this\n   * transaction and it cannot be used anymore once the transaction is\n   * completed.\n   *\n   * Note that we can't actually enforce that the KeyType and ValueType are\n   * correct, but they allow type safety through the rest of the consuming code.\n   */\n  store<KeyType extends IDBValidKey, ValueType extends unknown>(\n    storeName: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    const store = this.transaction.objectStore(storeName);\n    debugAssert(!!store, 'Object store not part of transaction: ' + storeName);\n    return new SimpleDbStore<KeyType, ValueType>(store);\n  }\n}\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nexport class SimpleDbStore<\n  KeyType extends IDBValidKey,\n  ValueType extends unknown\n> {\n  constructor(private store: IDBObjectStore) {}\n\n  /**\n   * Writes a value into the Object Store.\n   *\n   * @param key Optional explicit key to use when writing the object, else the\n   * key will be auto-assigned (e.g. via the defined keyPath for the store).\n   * @param value The object to write.\n   */\n  put(value: ValueType): PersistencePromise<void>;\n  put(key: KeyType, value: ValueType): PersistencePromise<void>;\n  put(\n    keyOrValue: KeyType | ValueType,\n    value?: ValueType\n  ): PersistencePromise<void> {\n    let request;\n    if (value !== undefined) {\n      logDebug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n      request = this.store.put(value, keyOrValue as KeyType);\n    } else {\n      logDebug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n      request = this.store.put(keyOrValue as ValueType);\n    }\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * Adds a new value into an Object Store and returns the new key. Similar to\n   * IndexedDb's `add()`, this method will fail on primary key collisions.\n   *\n   * @param value The object to write.\n   * @return The key of the value to add.\n   */\n  add(value: ValueType): PersistencePromise<KeyType> {\n    logDebug(LOG_TAG, 'ADD', this.store.name, value, value);\n    const request = this.store.add(value as ValueType);\n    return wrapRequest<KeyType>(request);\n  }\n\n  /**\n   * Gets the object with the specified key from the specified store, or null\n   * if no object exists with the specified key.\n   *\n   * @key The key of the object to get.\n   * @return The object with the specified key or null if no object exists.\n   */\n  get(key: KeyType): PersistencePromise<ValueType | null> {\n    const request = this.store.get(key);\n    // We're doing an unsafe cast to ValueType.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return wrapRequest<any>(request).next(result => {\n      // Normalize nonexistence to null.\n      if (result === undefined) {\n        result = null;\n      }\n      logDebug(LOG_TAG, 'GET', this.store.name, key, result);\n      return result;\n    });\n  }\n\n  delete(key: KeyType | IDBKeyRange): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE', this.store.name, key);\n    const request = this.store.delete(key);\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * If we ever need more of the count variants, we can add overloads. For now,\n   * all we need is to count everything in a store.\n   *\n   * Returns the number of rows in the store.\n   */\n  count(): PersistencePromise<number> {\n    logDebug(LOG_TAG, 'COUNT', this.store.name);\n    const request = this.store.count();\n    return wrapRequest<number>(request);\n  }\n\n  loadAll(): PersistencePromise<ValueType[]>;\n  loadAll(range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(index: string, range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<ValueType[]> {\n    const cursor = this.cursor(this.options(indexOrRange, range));\n    const results: ValueType[] = [];\n    return this.iterateCursor(cursor, (key, value) => {\n      results.push(value);\n    }).next(() => {\n      return results;\n    });\n  }\n\n  deleteAll(): PersistencePromise<void>;\n  deleteAll(range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(index: string, range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE ALL', this.store.name);\n    const options = this.options(indexOrRange, range);\n    options.keysOnly = false;\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, (key, value, control) => {\n      // NOTE: Calling delete() on a cursor is documented as more efficient than\n      // calling delete() on an object store with a single key\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n      // however, this requires us *not* to use a keysOnly cursor\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n      // may want to compare the performance of each method.\n      return control.delete();\n    });\n  }\n\n  /**\n   * Iterates over keys and values in an object store.\n   *\n   * @param options Options specifying how to iterate the objects in the store.\n   * @param callback will be called for each iterated object. Iteration can be\n   * canceled at any point by calling the doneFn passed to the callback.\n   * The callback can return a PersistencePromise if it performs async\n   * operations but note that iteration will continue without waiting for them\n   * to complete.\n   * @returns A PersistencePromise that resolves once all PersistencePromises\n   * returned by callbacks resolve.\n   */\n  iterate(\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    options: IterateOptions,\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    optionsOrCallback: IterateOptions | IterateCallback<KeyType, ValueType>,\n    callback?: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    let options;\n    if (!callback) {\n      options = {};\n      callback = optionsOrCallback as IterateCallback<KeyType, ValueType>;\n    } else {\n      options = optionsOrCallback as IterateOptions;\n    }\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, callback);\n  }\n\n  /**\n   * Iterates over a store, but waits for the given callback to complete for\n   * each entry before iterating the next entry. This allows the callback to do\n   * asynchronous work to determine if this iteration should continue.\n   *\n   * The provided callback should return `true` to continue iteration, and\n   * `false` otherwise.\n   */\n  iterateSerial(\n    callback: (k: KeyType, v: ValueType) => PersistencePromise<boolean>\n  ): PersistencePromise<void> {\n    const cursorRequest = this.cursor({});\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        const error = checkForAndReportiOSError(\n          (event.target as IDBRequest).error!\n        );\n        reject(error);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n\n        callback(cursor.primaryKey as KeyType, cursor.value).next(\n          shouldContinue => {\n            if (shouldContinue) {\n              cursor.continue();\n            } else {\n              resolve();\n            }\n          }\n        );\n      };\n    });\n  }\n\n  private iterateCursor(\n    cursorRequest: IDBRequest,\n    fn: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    const results: Array<PersistencePromise<void>> = [];\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        reject((event.target as IDBRequest).error!);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const controller = new IterationController(cursor);\n        const userResult = fn(\n          cursor.primaryKey as KeyType,\n          cursor.value,\n          controller\n        );\n        if (userResult instanceof PersistencePromise) {\n          const userPromise: PersistencePromise<void> = userResult.catch(\n            err => {\n              controller.done();\n              return PersistencePromise.reject(err);\n            }\n          );\n          results.push(userPromise);\n        }\n        if (controller.isDone) {\n          resolve();\n        } else if (controller.skipToKey === null) {\n          cursor.continue();\n        } else {\n          cursor.continue(controller.skipToKey);\n        }\n      };\n    }).next(() => {\n      return PersistencePromise.waitFor(results);\n    });\n  }\n\n  private options(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): IterateOptions {\n    let indexName: string | undefined = undefined;\n    if (indexOrRange !== undefined) {\n      if (typeof indexOrRange === 'string') {\n        indexName = indexOrRange;\n      } else {\n        debugAssert(\n          range === undefined,\n          '3rd argument must not be defined if 2nd is a range.'\n        );\n        range = indexOrRange;\n      }\n    }\n    return { index: indexName, range };\n  }\n\n  private cursor(options: IterateOptions): IDBRequest {\n    let direction: IDBCursorDirection = 'next';\n    if (options.reverse) {\n      direction = 'prev';\n    }\n    if (options.index) {\n      const index = this.store.index(options.index);\n      if (options.keysOnly) {\n        return index.openKeyCursor(options.range, direction);\n      } else {\n        return index.openCursor(options.range, direction);\n      }\n    } else {\n      return this.store.openCursor(options.range, direction);\n    }\n  }\n}\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest<R>(request: IDBRequest): PersistencePromise<R> {\n  return new PersistencePromise<R>((resolve, reject) => {\n    request.onsuccess = (event: Event) => {\n      const result = (event.target as IDBRequest).result;\n      resolve(result);\n    };\n\n    request.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      reject(error);\n    };\n  });\n}\n\n// Guard so we only report the error once.\nlet reportedIOSError = false;\nfunction checkForAndReportiOSError(error: DOMException): Error {\n  const iOSVersion = SimpleDb.getIOSVersion(getUA());\n  if (iOSVersion >= 12.2 && iOSVersion < 13) {\n    const IOS_ERROR =\n      'An internal error was encountered in the Indexed Database server';\n    if (error.message.indexOf(IOS_ERROR) >= 0) {\n      // Wrap error in a more descriptive one.\n      const newError = new FirestoreError(\n        'internal',\n        `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${IOS_ERROR}'. This is likely ` +\n          `due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 ` +\n          `for details and a potential workaround.`\n      );\n      if (!reportedIOSError) {\n        reportedIOSError = true;\n        // Throw a global exception outside of this promise chain, for the user to\n        // potentially catch.\n        setTimeout(() => {\n          throw newError;\n        }, 0);\n      }\n      return newError;\n    }\n  }\n  return error;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugAssert, debugCast, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { Connection } from './connection';\nimport {\n  fromDocument,\n  fromMaybeDocument,\n  getEncodedDatabaseId,\n  JsonProtoSerializer,\n  toMutation,\n  toName,\n  toQueryTarget\n} from './serializer';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream,\n  WatchStreamListener,\n  WriteStreamListener\n} from './persistent_stream';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Query, queryToTarget } from '../core/query';\n\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\nexport abstract class Datastore {\n  abstract start(connection: Connection): void;\n  abstract termiate(): Promise<void>;\n}\n\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass DatastoreImpl extends Datastore {\n  connection!: Connection;\n  terminated = false;\n\n  constructor(\n    readonly credentials: CredentialsProvider,\n    readonly serializer: JsonProtoSerializer\n  ) {\n    super();\n  }\n\n  verifyInitialized(): void {\n    debugAssert(!!this.connection, 'Datastore.start() not called');\n    if (this.terminated) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  start(connection: Connection): void {\n    debugAssert(!this.connection, 'Datastore.start() already called');\n    this.connection = connection;\n  }\n\n  /** Gets an auth token and invokes the provided RPC. */\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    request: Req\n  ): Promise<Resp> {\n    this.verifyInitialized();\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeRPC<Req, Resp>(\n          rpcName,\n          path,\n          request,\n          token\n        );\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n\n  /** Gets an auth token and invokes the provided RPC with streamed results. */\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    request: Req\n  ): Promise<Resp[]> {\n    this.verifyInitialized();\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeStreamingRPC<Req, Resp>(\n          rpcName,\n          path,\n          request,\n          token\n        );\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n\n  async termiate(): Promise<void> {\n    this.terminated = false;\n  }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nexport function newDatastore(\n  credentials: CredentialsProvider,\n  serializer: JsonProtoSerializer\n): Datastore {\n  return new DatastoreImpl(credentials, serializer);\n}\n\nexport async function invokeCommitRpc(\n  datastore: Datastore,\n  mutations: Mutation[]\n): Promise<void> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\n  const request = {\n    writes: mutations.map(m => toMutation(datastoreImpl.serializer, m))\n  };\n  await datastoreImpl.invokeRPC('Commit', path, request);\n}\n\nexport async function invokeBatchGetDocumentsRpc(\n  datastore: Datastore,\n  keys: DocumentKey[]\n): Promise<MaybeDocument[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\n  const request = {\n    documents: keys.map(k => toName(datastoreImpl.serializer, k))\n  };\n  const response = await datastoreImpl.invokeStreamingRPC<\n    api.BatchGetDocumentsRequest,\n    api.BatchGetDocumentsResponse\n  >('BatchGetDocuments', path, request);\n\n  const docs = new Map<string, MaybeDocument>();\n  response.forEach(proto => {\n    const doc = fromMaybeDocument(datastoreImpl.serializer, proto);\n    docs.set(doc.key.toString(), doc);\n  });\n  const result: MaybeDocument[] = [];\n  keys.forEach(key => {\n    const doc = docs.get(key.toString());\n    hardAssert(!!doc, 'Missing entity in write response for ' + key);\n    result.push(doc);\n  });\n  return result;\n}\n\nexport async function invokeRunQueryRpc(\n  datastore: Datastore,\n  query: Query\n): Promise<Document[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const request = toQueryTarget(datastoreImpl.serializer, queryToTarget(query));\n  const response = await datastoreImpl.invokeStreamingRPC<\n    api.RunQueryRequest,\n    api.RunQueryResponse\n  >('RunQuery', request.parent!, { structuredQuery: request.structuredQuery });\n  return (\n    response\n      // Omit RunQueryResponses that only contain readTimes.\n      .filter(proto => !!proto.document)\n      .map(proto =>\n        fromDocument(datastoreImpl.serializer, proto.document!, undefined)\n      )\n  );\n}\n\nexport function newPersistentWriteStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WriteStreamListener\n): PersistentWriteStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  datastoreImpl.verifyInitialized();\n  return new PersistentWriteStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.credentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n\nexport function newPersistentWatchStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WatchStreamListener\n): PersistentListenStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  datastoreImpl.verifyInitialized();\n  return new PersistentListenStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.credentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Token } from '../api/credentials';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { SDK_VERSION } from '../../src/core/version';\nimport { Connection, Stream } from './connection';\nimport { logDebug, logWarn } from '../util/log';\nimport { FirestoreError } from '../util/error';\nimport { StringMap } from '../util/types';\nimport { debugAssert } from '../util/assert';\n\nconst LOG_TAG = 'RestConnection';\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\nconst RPC_NAME_URL_MAPPING: StringMap = {};\n\nRPC_NAME_URL_MAPPING['BatchGetDocuments'] = 'batchGet';\nRPC_NAME_URL_MAPPING['Commit'] = 'commit';\nRPC_NAME_URL_MAPPING['RunQuery'] = 'runQuery';\n\nconst RPC_URL_VERSION = 'v1';\nconst X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\n\n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nexport abstract class RestConnection implements Connection {\n  protected readonly databaseId: DatabaseId;\n  protected readonly baseUrl: string;\n  private readonly databaseRoot: string;\n\n  constructor(private readonly databaseInfo: DatabaseInfo) {\n    this.databaseId = databaseInfo.databaseId;\n    const proto = databaseInfo.ssl ? 'https' : 'http';\n    this.baseUrl = proto + '://' + databaseInfo.host;\n    this.databaseRoot =\n      'projects/' +\n      this.databaseId.projectId +\n      '/databases/' +\n      this.databaseId.database +\n      '/documents';\n  }\n\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    req: Req,\n    token: Token | null\n  ): Promise<Resp> {\n    const url = this.makeUrl(rpcName, path);\n    logDebug(LOG_TAG, 'Sending: ', url, req);\n\n    const headers = {};\n    this.modifyHeadersForRequest(headers, token);\n\n    return this.performRPCRequest<Req, Resp>(rpcName, url, headers, req).then(\n      response => {\n        logDebug(LOG_TAG, 'Received: ', response);\n        return response;\n      },\n      (err: FirestoreError) => {\n        logWarn(\n          LOG_TAG,\n          `${rpcName} failed with error: `,\n          err,\n          'url: ',\n          url,\n          'request:',\n          req\n        );\n        throw err;\n      }\n    );\n  }\n\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp[]> {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.invokeRPC<Req, Resp[]>(rpcName, path, request, token);\n  }\n\n  abstract openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp>;\n\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n  protected modifyHeadersForRequest(\n    headers: StringMap,\n    token: Token | null\n  ): void {\n    headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n\n    // Content-Type: text/plain will avoid preflight requests which might\n    // mess with CORS and redirects by proxies. If we add custom headers\n    // we will need to change this code to potentially use the $httpOverwrite\n    // parameter supported by ESF to avoid\ttriggering preflight requests.\n    headers['Content-Type'] = 'text/plain';\n\n    if (token) {\n      for (const header in token.authHeaders) {\n        if (token.authHeaders.hasOwnProperty(header)) {\n          headers[header] = token.authHeaders[header];\n        }\n      }\n    }\n  }\n\n  /**\n   * Performs an RPC request using an implementation specific networking layer.\n   */\n  protected abstract performRPCRequest<Req, Resp>(\n    rpcName: string,\n    url: string,\n    headers: StringMap,\n    body: Req\n  ): Promise<Resp>;\n\n  private makeUrl<Req>(rpcName: string, path: string): string {\n    const urlRpcName = RPC_NAME_URL_MAPPING[rpcName];\n    debugAssert(\n      urlRpcName !== undefined,\n      'Unknown REST mapping for: ' + rpcName\n    );\n    return `${this.baseUrl}/${RPC_URL_VERSION}/${path}:${urlRpcName}`;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Token } from '../../api/credentials';\nimport { Stream } from '../../remote/connection';\nimport { mapCodeFromHttpStatus } from '../../remote/rpc_error';\nimport { FirestoreError } from '../../util/error';\nimport { StringMap } from '../../util/types';\nimport { RestConnection } from '../../remote/rest_connection';\nimport { DatabaseInfo } from '../../core/database_info';\n\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */\nexport class FetchConnection extends RestConnection {\n  /**\n   * @param databaseInfo The connection info.\n   * @param fetchImpl `fetch` or a Polyfill that implements the fetch API.\n   */\n  constructor(\n    databaseInfo: DatabaseInfo,\n    private readonly fetchImpl: typeof fetch\n  ) {\n    super(databaseInfo);\n  }\n\n  openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp> {\n    throw new Error('Not supported by FetchConnection');\n  }\n\n  protected async performRPCRequest<Req, Resp>(\n    rpcName: string,\n    url: string,\n    headers: StringMap,\n    body: Req\n  ): Promise<Resp> {\n    const requestJson = JSON.stringify(body);\n    let response: Response;\n\n    try {\n      response = await this.fetchImpl(url, {\n        method: 'POST',\n        headers,\n        body: requestJson\n      });\n    } catch (err) {\n      throw new FirestoreError(\n        mapCodeFromHttpStatus(err.status),\n        'Request failed with error: ' + err.statusText\n      );\n    }\n\n    if (!response.ok) {\n      throw new FirestoreError(\n        mapCodeFromHttpStatus(response.status),\n        'Request failed with error: ' + response.statusText\n      );\n    }\n\n    return response.json();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonProtoSerializer } from '../../remote/serializer';\nimport { DatabaseId } from '../../core/database_info';\n\nexport function newSerializer(databaseId: DatabaseId): JsonProtoSerializer {\n  return new JsonProtoSerializer(databaseId, /* useProto3Json= */ true);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Datastore, newDatastore } from '../../../src/remote/datastore';\nimport { newConnection } from '../../../src/platform/connection';\nimport { newSerializer } from '../../../src/platform/serializer';\nimport { Firestore } from './database';\nimport { DatabaseInfo } from '../../../src/core/database_info';\nimport { logDebug } from '../../../src/util/log';\nimport { Code, FirestoreError } from '../../../src/util/error';\n\nexport const LOG_TAG = 'ComponentProvider';\n\n// settings() defaults:\nexport const DEFAULT_HOST = 'firestore.googleapis.com';\nexport const DEFAULT_SSL = true;\n\n// The components module manages the lifetime of dependencies of the Firestore\n// client. Dependencies can be lazily constructed and only one exists per\n// Firestore instance.\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\nconst datastoreInstances = new Map<Firestore, Promise<Datastore>>();\n\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeDatastore() when the Firestore\n * instance is terminated.\n */\nexport function getDatastore(firestore: Firestore): Promise<Datastore> {\n  if (firestore._terminated) {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      'The client has already been terminated.'\n    );\n  }\n  if (!datastoreInstances.has(firestore)) {\n    logDebug(LOG_TAG, 'Initializing Datastore');\n    const settings = firestore._getSettings();\n    const databaseInfo = new DatabaseInfo(\n      firestore._databaseId,\n      firestore._persistenceKey,\n      settings.host ?? DEFAULT_HOST,\n      settings.ssl ?? DEFAULT_SSL,\n      /* forceLongPolling= */ false\n    );\n    const datastorePromise = newConnection(databaseInfo).then(connection => {\n      const serializer = newSerializer(databaseInfo.databaseId);\n      const datastore = newDatastore(firestore._credentials, serializer);\n      datastore.start(connection);\n      return datastore;\n    });\n    datastoreInstances.set(firestore, datastorePromise);\n  }\n  return datastoreInstances.get(firestore)!;\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the Firestore instance is terminated.\n */\nexport async function removeComponents(firestore: Firestore): Promise<void> {\n  const datastorePromise = await datastoreInstances.get(firestore);\n  if (datastorePromise) {\n    logDebug(LOG_TAG, 'Removing Datastore');\n    datastoreInstances.delete(firestore);\n    return (await datastorePromise).termiate();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseInfo } from '../../core/database_info';\nimport { Connection } from '../../remote/connection';\nimport { FetchConnection } from './fetch_connection';\n\nexport { newConnectivityMonitor } from '../browser/connection';\n\n/** Initializes the HTTP connection for the REST API. */\nexport function newConnection(databaseInfo: DatabaseInfo): Promise<Connection> {\n  return Promise.resolve(new FetchConnection(databaseInfo, fetch.bind(null)));\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '../../../lite-types';\n\nimport { _getProvider, _removeServiceInstance } from '@firebase/app-exp';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-types-exp';\nimport { Provider } from '@firebase/component';\n\nimport { Code, FirestoreError } from '../../../src/util/error';\nimport { DatabaseId } from '../../../src/core/database_info';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  CredentialsProvider,\n  FirebaseCredentialsProvider\n} from '../../../src/api/credentials';\nimport { cast } from './util';\nimport { removeComponents } from './components';\n\n/**\n * The root reference to the Firestore Lite database.\n */\nexport class Firestore\n  implements firestore.FirebaseFirestore, _FirebaseService {\n  readonly _databaseId: DatabaseId;\n  readonly _credentials: CredentialsProvider;\n  readonly _persistenceKey: string = '(lite)';\n\n  // Assigned via _configureClient()\n  protected _settings?: firestore.Settings;\n  private _settingsFrozen = false;\n\n  // A task that is assigned when the terminate() is invoked and resolved when\n  // all components have shut down.\n  private _terminateTask?: Promise<void>;\n\n  constructor(\n    readonly app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>\n  ) {\n    this._databaseId = Firestore.databaseIdFromApp(app);\n    this._credentials = new FirebaseCredentialsProvider(authProvider);\n  }\n\n  get _initialized(): boolean {\n    return this._settingsFrozen;\n  }\n\n  get _terminated(): boolean {\n    return this._terminateTask !== undefined;\n  }\n\n  _configureClient(settings: firestore.Settings): void {\n    if (this._settingsFrozen) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and its settings can no longer ' +\n          'be changed. initializeFirestore() cannot be called after calling ' +\n          'getFirestore().'\n      );\n    }\n    this._settings = settings;\n  }\n\n  _getSettings(): firestore.Settings {\n    if (!this._settings) {\n      this._settings = {};\n    }\n    this._settingsFrozen = true;\n    return this._settings;\n  }\n\n  private static databaseIdFromApp(app: FirebaseApp): DatabaseId {\n    if (!Object.prototype.hasOwnProperty.apply(app.options, ['projectId'])) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        '\"projectId\" not provided in firebase.initializeApp.'\n      );\n    }\n\n    return new DatabaseId(app.options.projectId!);\n  }\n\n  delete(): Promise<void> {\n    if (!this._terminateTask) {\n      this._terminateTask = this._terminate();\n    }\n    return this._terminateTask;\n  }\n\n  /**\n   * Terminates all components used by this client. Subclasses can override\n   * this method to clean up their own dependencies, but must also call this\n   * method.\n   *\n   * Only ever called once.\n   */\n  protected _terminate(): Promise<void> {\n    return removeComponents(this);\n  }\n\n  // TODO(firestoreexp): `deleteApp()` should call the delete method above,\n  // but it still calls INTERNAL.delete().\n  INTERNAL = {\n    delete: () => this.delete()\n  };\n}\n\nexport function initializeFirestore(\n  app: FirebaseApp,\n  settings: firestore.Settings\n): Firestore {\n  const firestore = _getProvider(\n    app,\n    'firestore/lite'\n  ).getImmediate() as Firestore;\n  firestore._configureClient(settings);\n  return firestore;\n}\n\nexport function getFirestore(app: FirebaseApp): Firestore {\n  return _getProvider(app, 'firestore/lite').getImmediate() as Firestore;\n}\n\nexport function terminate(\n  firestore: firestore.FirebaseFirestore\n): Promise<void> {\n  _removeServiceInstance(firestore.app, 'firestore/lite');\n  const firestoreClient = cast(firestore, Firestore);\n  return firestoreClient.delete();\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { Dict, forEach } from './obj';\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\n\n/** Types accepted by validateType() and related methods for validation. */\nexport type ValidationType =\n  | 'undefined'\n  | 'object'\n  | 'function'\n  | 'boolean'\n  | 'number'\n  | 'string'\n  | 'non-empty string';\n\n/**\n * Validates that no arguments were passed in the invocation of functionName.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateNoArgs('myFunction', arguments);\n */\nexport function validateNoArgs(functionName: string, args: IArguments): void {\n  if (args.length !== 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() does not support arguments, ` +\n        'but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(\n  functionName: string,\n  args: ArrayLike<unknown>,\n  numberOfArgs: number\n): void {\n  if (args.length !== numberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires ` +\n        formatPlural(numberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires at least ` +\n        formatPlural(minNumberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number,\n  maxNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires between ${minNumberOfArgs} and ` +\n        `${maxNumberOfArgs} arguments, but was called with ` +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements<T>(\n  functionName: string,\n  value: T[],\n  name: string,\n  minNumberOfElements: number\n): void {\n  if (!(value instanceof Array) || value.length < minNumberOfElements) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${name} argument to be an ` +\n        'array with at least ' +\n        `${formatPlural(minNumberOfElements, 'element')}.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${ordinal(position)} argument`, argument);\n}\n\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateArgType(functionName, type, position, argument);\n  }\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${optionName} option`, argument);\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateNamedType(functionName, type, optionName, argument);\n  }\n}\n\nexport function validateArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[],\n  validator: (arg0: T) => boolean\n): void {\n  if (!(argument instanceof Array)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${optionName} ` +\n        `option to be an array, but it was: ${valueDescription(argument)}`\n    );\n  }\n\n  for (let i = 0; i < argument.length; ++i) {\n    if (!validator(argument[i])) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function ${functionName}() requires all ${optionName} ` +\n          `elements to be ${typeDescription}, but the value at index ${i} ` +\n          `was: ${valueDescription(argument[i])}`\n      );\n    }\n  }\n}\n\nexport function validateOptionalArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[] | undefined,\n  validator: (arg0: T) => boolean\n): void {\n  if (argument !== undefined) {\n    validateArrayElements(\n      functionName,\n      optionName,\n      typeDescription,\n      argument,\n      validator\n    );\n  }\n}\n\n/**\n * Validates that the provided named option equals one of the expected values.\n */\nexport function validateNamedPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  const expectedDescription: string[] = [];\n\n  for (const val of expected) {\n    if (val === input) {\n      return;\n    }\n    expectedDescription.push(valueDescription(val));\n  }\n\n  const actualDescription = valueDescription(input);\n  throw new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Invalid value ${actualDescription} provided to function ${functionName}() for option ` +\n      `\"${optionName}\". Acceptable values: ${expectedDescription.join(', ')}`\n  );\n}\n\n/**\n * Validates that the provided named option equals one of the expected values or\n * is undefined.\n */\nexport function validateNamedOptionalPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  if (input !== undefined) {\n    validateNamedPropertyEquals(\n      functionName,\n      inputName,\n      optionName,\n      input,\n      expected\n    );\n  }\n}\n\n/**\n * Validates that the provided argument is a valid enum.\n *\n * @param functionName Function making the validation call.\n * @param enums Array containing all possible values for the enum.\n * @param position Position of the argument in `functionName`.\n * @param argument Argument to validate.\n * @return The value as T if the argument can be converted.\n */\nexport function validateStringEnum<T>(\n  functionName: string,\n  enums: T[],\n  position: number,\n  argument: unknown\n): T {\n  if (!enums.some(element => element === argument)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value ${valueDescription(argument)} provided to function ` +\n        `${functionName}() for its ${ordinal(position)} argument. Acceptable ` +\n        `values: ${enums.join(', ')}`\n    );\n  }\n  return argument as T;\n}\n\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nexport function validateDocumentPath(path: ResourcePath): void {\n  if (!DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid document reference. Document references must have an even number of segments, but ${path} has ${path.length}.`\n    );\n  }\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\nexport function validateCollectionPath(path: ResourcePath): void {\n  if (DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid collection reference. Collection references must have an odd number of segments, but ${path} has ${path.length}.`\n    );\n  }\n}\n\n/** Helper to validate the type of a provided input. */\nfunction validateType(\n  functionName: string,\n  type: ValidationType,\n  inputName: string,\n  input: unknown\n): void {\n  let valid = false;\n  if (type === 'object') {\n    valid = isPlainObject(input);\n  } else if (type === 'non-empty string') {\n    valid = typeof input === 'string' && input !== '';\n  } else {\n    valid = typeof input === type;\n  }\n\n  if (!valid) {\n    const description = valueDescription(input);\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${inputName} ` +\n        `to be of type ${type}, but it was: ${description}`\n    );\n  }\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    (Object.getPrototypeOf(input) === Object.prototype ||\n      Object.getPrototypeOf(input) === null)\n  );\n}\n\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input: unknown): string {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input!);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail('Unknown wrong type: ' + typeof input);\n  }\n}\n\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input: object): string | null {\n  if (input.constructor) {\n    const funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    const results = funcNameRegex.exec(input.constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n  return null;\n}\n\n/** Validates the provided argument is defined. */\nexport function validateDefined(\n  functionName: string,\n  position: number,\n  argument: unknown\n): void {\n  if (argument === undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires a valid ${ordinal(position)} ` +\n        `argument, but it was undefined.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(\n  functionName: string,\n  options: object,\n  optionNames: string[]\n): void {\n  forEach(options as Dict<unknown>, (key, _) => {\n    if (optionNames.indexOf(key) < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Unknown option '${key}' passed to function ${functionName}(). ` +\n          'Available options: ' +\n          optionNames.join(', ')\n      );\n    }\n  });\n}\n\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(\n  functionName: string,\n  type: string,\n  position: number,\n  argument: unknown\n): Error {\n  const description = valueDescription(argument);\n  return new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Function ${functionName}() requires its ${ordinal(position)} ` +\n      `argument to be a ${type}, but it was: ${description}`\n  );\n}\n\nexport function validatePositiveNumber(\n  functionName: string,\n  position: number,\n  n: number\n): void {\n  if (n <= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${ordinal(\n        position\n      )} argument to be a positive number, but it was: ${n}.`\n    );\n  }\n}\n\n/** Converts a number to its english word representation */\nfunction ordinal(num: number): string {\n  switch (num) {\n    case 1:\n      return 'first';\n    case 2:\n      return 'second';\n    case 3:\n      return 'third';\n    default:\n      return num + 'th';\n  }\n}\n\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num: number, str: string): string {\n  return `${num} ${str}` + (num === 1 ? '' : 's');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isBase64Available } from '../platform/base64';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { ByteString } from '../util/byte_string';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable(): void {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available(): void {\n  if (!isBase64Available()) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nexport class Blob {\n  // Prefix with underscore to signal that we consider this not part of the\n  // public API and to prevent it from showing up for autocompletion.\n  _byteString: ByteString;\n\n  constructor(byteString: ByteString) {\n    assertBase64Available();\n    this._byteString = byteString;\n  }\n\n  static fromBase64String(base64: string): Blob {\n    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n    validateArgType('Blob.fromBase64String', 'string', 1, base64);\n    assertBase64Available();\n    try {\n      return new Blob(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct Blob from Base64 string: ' + e\n      );\n    }\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n    assertUint8ArrayAvailable();\n    if (!(array instanceof Uint8Array)) {\n      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n    }\n    return new Blob(ByteString.fromUint8Array(array));\n  }\n\n  toBase64(): string {\n    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n    assertBase64Available();\n    return this._byteString.toBase64();\n  }\n\n  toUint8Array(): Uint8Array {\n    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n    assertUint8ArrayAvailable();\n    return this._byteString.toUint8Array();\n  }\n\n  toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n\n  isEqual(other: Blob): boolean {\n    return this._byteString.isEqual(other._byteString);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateNamedArrayAtLeastNumberOfElements\n} from '../util/input_validation';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A field class base class that is shared by the lite, full and legacy SDK,\n * which supports shared code that deals with FieldPaths.\n */\nexport abstract class BaseFieldPath {\n  /** Internal representation of a Firestore field path. */\n  readonly _internalPath: InternalFieldPath;\n\n  constructor(fieldNames: string[]) {\n    validateNamedArrayAtLeastNumberOfElements(\n      'FieldPath',\n      fieldNames,\n      'fieldNames',\n      1\n    );\n\n    for (let i = 0; i < fieldNames.length; ++i) {\n      validateArgType('FieldPath', 'string', i, fieldNames[i]);\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field name at argument $(i + 1). ` +\n            'Field names must not be empty.'\n        );\n      }\n    }\n\n    this._internalPath = new InternalFieldPath(fieldNames);\n  }\n}\n\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nexport class FieldPath extends BaseFieldPath implements firestore.FieldPath {\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    super(fieldNames);\n  }\n\n  static documentId(): FieldPath {\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    return new FieldPath(InternalFieldPath.keyField().canonicalString());\n  }\n\n  isEqual(other: firestore.FieldPath): boolean {\n    if (!(other instanceof FieldPath)) {\n      throw invalidClassError('isEqual', 'FieldPath', 1, other);\n    }\n    return this._internalPath.isEqual(other._internalPath);\n  }\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path: string): FieldPath {\n  const found = path.search(RESERVED);\n  if (found >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not contain ` +\n        `'~', '*', '/', '[', or ']'`\n    );\n  }\n  try {\n    return new FieldPath(...path.split('.'));\n  } catch (e) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not be empty, ` +\n        `begin with '.', end with '.', or contain '..'`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\nimport {\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateExactNumberOfArgs,\n  validateNoArgs\n} from '../util/input_validation';\nimport { FieldTransform } from '../model/mutation';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform\n} from '../model/transform_operation';\nimport { ParseContext, parseData, UserDataSource } from './user_data_reader';\nimport { debugAssert } from '../util/assert';\nimport { toNumber } from '../remote/serializer';\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API that\n * is shared between the full, lite and legacy SDK.\n */\nexport abstract class SerializableFieldValue {\n  /** The public API endpoint that returns this class. */\n  abstract readonly _methodName: string;\n\n  /** A pointer to the implementing class. */\n  readonly _delegate: SerializableFieldValue = this;\n\n  abstract _toFieldTransform(context: ParseContext): FieldTransform | null;\n\n  abstract isEqual(other: SerializableFieldValue): boolean;\n}\n\nexport class DeleteFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): null {\n    if (context.dataSource === UserDataSource.MergeSet) {\n      // No transform to add for a delete, but we need to add it to our\n      // fieldMask so it gets deleted.\n      context.fieldMask.push(context.path!);\n    } else if (context.dataSource === UserDataSource.Update) {\n      debugAssert(\n        context.path!.length > 0,\n        `${this._methodName}() at the top level should have already ` +\n          'been handled.'\n      );\n      throw context.createError(\n        `${this._methodName}() can only appear at the top level ` +\n          'of your update data'\n      );\n    } else {\n      // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n      throw context.createError(\n        `${this._methodName}() cannot be used with set() unless you pass ` +\n          '{merge:true}'\n      );\n    }\n    return null;\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof DeleteFieldValueImpl;\n  }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue The sentinel FieldValue for which to create a child\n *     context.\n * @param context The parent context.\n * @param arrayElement Whether or not the FieldValue has an array.\n */\nfunction createSentinelChildContext(\n  fieldValue: SerializableFieldValue,\n  context: ParseContext,\n  arrayElement: boolean\n): ParseContext {\n  return new ParseContext(\n    {\n      dataSource: UserDataSource.Argument,\n      targetDoc: context.settings.targetDoc,\n      methodName: fieldValue._methodName,\n      arrayElement\n    },\n    context.databaseId,\n    context.serializer,\n    context.ignoreUndefinedProperties\n  );\n}\n\nexport class ServerTimestampFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    return new FieldTransform(context.path!, new ServerTimestampTransform());\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof ServerTimestampFieldValueImpl;\n  }\n}\n\nexport class ArrayUnionFieldValueImpl extends SerializableFieldValue {\n  constructor(\n    readonly _methodName: string,\n    private readonly _elements: unknown[]\n  ) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    const parseContext = createSentinelChildContext(\n      this,\n      context,\n      /*array=*/ true\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayUnionTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class ArrayRemoveFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string, readonly _elements: unknown[]) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    const parseContext = createSentinelChildContext(\n      this,\n      context,\n      /*array=*/ true\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayRemoveTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class NumericIncrementFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string, private readonly _operand: number) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    const numericIncrement = new NumericIncrementTransformOperation(\n      context.serializer,\n      toNumber(context.serializer, this._operand)\n    );\n    return new FieldTransform(context.path!, numericIncrement);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\n/** The public FieldValue class of the lite API. */\nexport abstract class FieldValue extends SerializableFieldValue\n  implements firestore.FieldValue {\n  protected constructor() {\n    super();\n  }\n\n  static delete(): firestore.FieldValue {\n    validateNoArgs('FieldValue.delete', arguments);\n    return new FieldValueDelegate(\n      new DeleteFieldValueImpl('FieldValue.delete')\n    );\n  }\n\n  static serverTimestamp(): firestore.FieldValue {\n    validateNoArgs('FieldValue.serverTimestamp', arguments);\n    return new FieldValueDelegate(\n      new ServerTimestampFieldValueImpl('FieldValue.serverTimestamp')\n    );\n  }\n\n  static arrayUnion(...elements: unknown[]): firestore.FieldValue {\n    validateAtLeastNumberOfArgs('FieldValue.arrayUnion', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new FieldValueDelegate(\n      new ArrayUnionFieldValueImpl('FieldValue.arrayUnion', elements)\n    );\n  }\n\n  static arrayRemove(...elements: unknown[]): firestore.FieldValue {\n    validateAtLeastNumberOfArgs('FieldValue.arrayRemove', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new FieldValueDelegate(\n      new ArrayRemoveFieldValueImpl('FieldValue.arrayRemove', elements)\n    );\n  }\n\n  static increment(n: number): firestore.FieldValue {\n    validateArgType('FieldValue.increment', 'number', 1, n);\n    validateExactNumberOfArgs('FieldValue.increment', arguments, 1);\n    return new FieldValueDelegate(\n      new NumericIncrementFieldValueImpl('FieldValue.increment', n)\n    );\n  }\n}\n\n/**\n * A delegate class that allows the FieldValue implementations returned by\n * deleteField(), serverTimestamp(), arrayUnion(), arrayRemove() and\n * increment() to be an instance of the legacy FieldValue class declared above.\n *\n * We don't directly subclass `FieldValue` in the various field value\n * implementations as the base FieldValue class differs between the lite, full\n * and legacy SDK.\n */\nclass FieldValueDelegate extends FieldValue implements firestore.FieldValue {\n  readonly _methodName: string;\n\n  constructor(readonly _delegate: SerializableFieldValue) {\n    super();\n    this._methodName = _delegate._methodName;\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform | null {\n    return this._delegate._toFieldTransform(context);\n  }\n\n  isEqual(other: firestore.FieldValue): boolean {\n    if (!(other instanceof FieldValueDelegate)) {\n      return false;\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nexport class GeoPoint {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion when typing latitude or longitude.\n  private _lat: number;\n  private _long: number;\n\n  constructor(latitude: number, longitude: number) {\n    validateExactNumberOfArgs('GeoPoint', arguments, 2);\n    validateArgType('GeoPoint', 'number', 1, latitude);\n    validateArgType('GeoPoint', 'number', 2, longitude);\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Latitude must be a number between -90 and 90, but was: ' + latitude\n      );\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Longitude must be a number between -180 and 180, but was: ' + longitude\n      );\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  /**\n   * Returns the latitude of this geo point, a number between -90 and 90.\n   */\n  get latitude(): number {\n    return this._lat;\n  }\n\n  /**\n   * Returns the longitude of this geo point, a number between -180 and 180.\n   */\n  get longitude(): number {\n    return this._long;\n  }\n\n  isEqual(other: GeoPoint): boolean {\n    return this._lat === other._lat && this._long === other._long;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(other: GeoPoint): number {\n    return (\n      primitiveComparator(this._lat, other._lat) ||\n      primitiveComparator(this._long, other._long)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation\n} from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { Dict, forEach, isEmpty } from '../util/obj';\nimport { ObjectValue, ObjectValueBuilder } from '../model/object_value';\nimport {\n  JsonProtoSerializer,\n  toBytes,\n  toNumber,\n  toResourceName,\n  toTimestamp\n} from '../remote/serializer';\nimport { Blob } from './blob';\nimport { BaseFieldPath, fromDotSeparatedString } from './field_path';\nimport { DeleteFieldValueImpl, SerializableFieldValue } from './field_value';\nimport { GeoPoint } from './geo_point';\nimport { newSerializer } from '../platform/serializer';\n\nconst RESERVED_FIELD_REGEX = /^__.*__$/;\n\n/**\n * An untyped Firestore Data Converter interface that is shared between the\n * lite, full and legacy SDK.\n */\nexport interface UntypedFirestoreDataConverter<T> {\n  toFirestore(modelObject: T): firestore.DocumentData;\n  toFirestore(\n    modelObject: Partial<T>,\n    options: firestore.SetOptions\n  ): firestore.DocumentData;\n  fromFirestore(snapshot: unknown, options?: unknown): T;\n}\n\n/**\n * A reference to a document in a Firebase project.\n *\n * This class serves as a common base class for the public DocumentReferences\n * exposed in the lite, full and legacy SDK.\n */\nexport class DocumentKeyReference<T> {\n  constructor(\n    readonly _databaseId: DatabaseId,\n    readonly _key: DocumentKey,\n    readonly _converter: UntypedFirestoreDataConverter<T> | null\n  ) {}\n}\n\n/** The result of parsing document data (e.g. for a setData call). */\nexport class ParsedSetData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask | null,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [] as Mutation[];\n    if (this.fieldMask !== null) {\n      mutations.push(\n        new PatchMutation(key, this.data, this.fieldMask, precondition)\n      );\n    } else {\n      mutations.push(new SetMutation(key, this.data, precondition));\n    }\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nexport class ParsedUpdateData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [\n      new PatchMutation(key, this.data, this.fieldMask, precondition)\n    ] as Mutation[];\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nexport const enum UserDataSource {\n  Set,\n  Update,\n  MergeSet,\n  /**\n   * Indicates the source is a where clause, cursor bound, arrayUnion()\n   * element, etc. Of note, isWrite(source) will return false.\n   */\n  Argument,\n  /**\n   * Indicates that the source is an Argument that may directly contain nested\n   * arrays (e.g. the operand of an `in` query).\n   */\n  ArrayArgument\n}\n\nfunction isWrite(dataSource: UserDataSource): boolean {\n  switch (dataSource) {\n    case UserDataSource.Set: // fall through\n    case UserDataSource.MergeSet: // fall through\n    case UserDataSource.Update:\n      return true;\n    case UserDataSource.Argument:\n    case UserDataSource.ArrayArgument:\n      return false;\n    default:\n      throw fail(`Unexpected case for UserDataSource: ${dataSource}`);\n  }\n}\n\n/** Contains the settings that are mutated as we parse user data. */\ninterface ContextSettings {\n  /** Indicates what kind of API method this data came from. */\n  readonly dataSource: UserDataSource;\n  /** The name of the method the user called to create the ParseContext. */\n  readonly methodName: string;\n  /** The document the user is attempting to modify, if that applies. */\n  readonly targetDoc?: DocumentKey;\n  /**\n   * A path within the object being parsed. This could be an empty path (in\n   * which case the context represents the root of the data being parsed), or a\n   * nonempty path (indicating the context represents a nested location within\n   * the data).\n   */\n  readonly path?: FieldPath;\n  /**\n   * Whether or not this context corresponds to an element of an array.\n   * If not set, elements are treated as if they were outside of arrays.\n   */\n  readonly arrayElement?: boolean;\n  /**\n   * Whether or not a converter was specified in this context. If true, error\n   * messages will reference the converter when invalid data is provided.\n   */\n  readonly hasConverter?: boolean;\n}\n\n/** A \"context\" object passed around while parsing user data. */\nexport class ParseContext {\n  readonly fieldTransforms: FieldTransform[];\n  readonly fieldMask: FieldPath[];\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings The settings for the parser.\n   * @param databaseId The database ID of the Firestore instance.\n   * @param serializer The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms A mutable list of field transforms encountered while\n   *     parsing the data.\n   * @param fieldMask A mutable list of field paths encountered while parsing\n   *     the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(\n    readonly settings: ContextSettings,\n    readonly databaseId: DatabaseId,\n    readonly serializer: JsonProtoSerializer,\n    readonly ignoreUndefinedProperties: boolean,\n    fieldTransforms?: FieldTransform[],\n    fieldMask?: FieldPath[]\n  ) {\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    if (fieldTransforms === undefined) {\n      this.validatePath();\n    }\n    this.fieldTransforms = fieldTransforms || [];\n    this.fieldMask = fieldMask || [];\n  }\n\n  get path(): FieldPath | undefined {\n    return this.settings.path;\n  }\n\n  get dataSource(): UserDataSource {\n    return this.settings.dataSource;\n  }\n\n  /** Returns a new context with the specified settings overwritten. */\n  contextWith(configuration: Partial<ContextSettings>): ParseContext {\n    return new ParseContext(\n      { ...this.settings, ...configuration },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n  }\n\n  childContextForField(field: string): ParseContext {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePathSegment(field);\n    return context;\n  }\n\n  childContextForFieldPath(field: FieldPath): ParseContext {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePath();\n    return context;\n  }\n\n  childContextForArray(index: number): ParseContext {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.contextWith({ path: undefined, arrayElement: true });\n  }\n\n  createError(reason: string): Error {\n    return createError(\n      reason,\n      this.settings.methodName,\n      this.settings.hasConverter || false,\n      this.path,\n      this.settings.targetDoc\n    );\n  }\n\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(fieldPath: FieldPath): boolean {\n    return (\n      this.fieldMask.find(field => fieldPath.isPrefixOf(field)) !== undefined ||\n      this.fieldTransforms.find(transform =>\n        fieldPath.isPrefixOf(transform.field)\n      ) !== undefined\n    );\n  }\n\n  private validatePath(): void {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (!this.path) {\n      return;\n    }\n    for (let i = 0; i < this.path.length; i++) {\n      this.validatePathSegment(this.path.get(i));\n    }\n  }\n\n  private validatePathSegment(segment: string): void {\n    if (segment.length === 0) {\n      throw this.createError('Document fields must not be empty');\n    }\n    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n      throw this.createError('Document fields cannot begin and end with \"__\"');\n    }\n  }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nexport class UserDataReader {\n  private readonly serializer: JsonProtoSerializer;\n\n  constructor(\n    private readonly databaseId: DatabaseId,\n    private readonly ignoreUndefinedProperties: boolean,\n    serializer?: JsonProtoSerializer\n  ) {\n    this.serializer = serializer || newSerializer(databaseId);\n  }\n\n  /** Creates a new top-level parse context. */\n  createContext(\n    dataSource: UserDataSource,\n    methodName: string,\n    targetDoc?: DocumentKey,\n    hasConverter = false\n  ): ParseContext {\n    return new ParseContext(\n      {\n        dataSource,\n        methodName,\n        targetDoc,\n        path: FieldPath.emptyPath(),\n        arrayElement: false,\n        hasConverter\n      },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties\n    );\n  }\n}\n\n/** Parse document data from a set() call. */\nexport function parseSetData(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  input: unknown,\n  hasConverter: boolean,\n  options: firestore.SetOptions = {}\n): ParsedSetData {\n  const context = userDataReader.createContext(\n    options.merge || options.mergeFields\n      ? UserDataSource.MergeSet\n      : UserDataSource.Set,\n    methodName,\n    targetDoc,\n    hasConverter\n  );\n  validatePlainObject('Data must be an object, but it was:', context, input);\n  const updateData = parseObject(input, context)!;\n\n  let fieldMask: FieldMask | null;\n  let fieldTransforms: FieldTransform[];\n\n  if (options.merge) {\n    fieldMask = new FieldMask(context.fieldMask);\n    fieldTransforms = context.fieldTransforms;\n  } else if (options.mergeFields) {\n    const validatedFieldPaths: FieldPath[] = [];\n\n    for (const stringOrFieldPath of options.mergeFields) {\n      let fieldPath: FieldPath;\n\n      if (stringOrFieldPath instanceof BaseFieldPath) {\n        fieldPath = stringOrFieldPath._internalPath;\n      } else if (typeof stringOrFieldPath === 'string') {\n        fieldPath = fieldPathFromDotSeparatedString(\n          methodName,\n          stringOrFieldPath,\n          targetDoc\n        );\n      } else {\n        throw fail('Expected stringOrFieldPath to be a string or a FieldPath');\n      }\n\n      if (!context.contains(fieldPath)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Field '${fieldPath}' is specified in your field mask but missing from your input data.`\n        );\n      }\n\n      if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {\n        validatedFieldPaths.push(fieldPath);\n      }\n    }\n\n    fieldMask = new FieldMask(validatedFieldPaths);\n    fieldTransforms = context.fieldTransforms.filter(transform =>\n      fieldMask!.covers(transform.field)\n    );\n  } else {\n    fieldMask = null;\n    fieldTransforms = context.fieldTransforms;\n  }\n\n  return new ParsedSetData(\n    new ObjectValue(updateData),\n    fieldMask,\n    fieldTransforms\n  );\n}\n\n/** Parse update data from an update() call. */\nexport function parseUpdateData(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  input: unknown\n): ParsedUpdateData {\n  const context = userDataReader.createContext(\n    UserDataSource.Update,\n    methodName,\n    targetDoc\n  );\n  validatePlainObject('Data must be an object, but it was:', context, input);\n\n  const fieldMaskPaths: FieldPath[] = [];\n  const updateData = new ObjectValueBuilder();\n  forEach(input as Dict<unknown>, (key, value) => {\n    const path = fieldPathFromDotSeparatedString(methodName, key, targetDoc);\n\n    const childContext = context.childContextForFieldPath(path);\n    if (\n      value instanceof SerializableFieldValue &&\n      value._delegate instanceof DeleteFieldValueImpl\n    ) {\n      // Add it to the field mask, but don't add anything to updateData.\n      fieldMaskPaths.push(path);\n    } else {\n      const parsedValue = parseData(value, childContext);\n      if (parsedValue != null) {\n        fieldMaskPaths.push(path);\n        updateData.set(path, parsedValue);\n      }\n    }\n  });\n\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(\n    updateData.build(),\n    mask,\n    context.fieldTransforms\n  );\n}\n\n/** Parse update data from a list of field/value arguments. */\nexport function parseUpdateVarargs(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  field: string | BaseFieldPath,\n  value: unknown,\n  moreFieldsAndValues: unknown[]\n): ParsedUpdateData {\n  const context = userDataReader.createContext(\n    UserDataSource.Update,\n    methodName,\n    targetDoc\n  );\n  const keys = [fieldPathFromArgument(methodName, field, targetDoc)];\n  const values = [value];\n\n  if (moreFieldsAndValues.length % 2 !== 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() needs to be called with an even number ` +\n        'of arguments that alternate between field names and values.'\n    );\n  }\n\n  for (let i = 0; i < moreFieldsAndValues.length; i += 2) {\n    keys.push(\n      fieldPathFromArgument(\n        methodName,\n        moreFieldsAndValues[i] as string | BaseFieldPath\n      )\n    );\n    values.push(moreFieldsAndValues[i + 1]);\n  }\n\n  const fieldMaskPaths: FieldPath[] = [];\n  const updateData = new ObjectValueBuilder();\n\n  // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n  for (let i = keys.length - 1; i >= 0; --i) {\n    if (!fieldMaskContains(fieldMaskPaths, keys[i])) {\n      const path = keys[i];\n      const value = values[i];\n      const childContext = context.childContextForFieldPath(path);\n      if (\n        value instanceof SerializableFieldValue &&\n        value._delegate instanceof DeleteFieldValueImpl\n      ) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths.push(path);\n      } else {\n        const parsedValue = parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths.push(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    }\n  }\n\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(\n    updateData.build(),\n    mask,\n    context.fieldTransforms\n  );\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */\nexport function parseQueryValue(\n  userDataReader: UserDataReader,\n  methodName: string,\n  input: unknown,\n  allowArrays = false\n): api.Value {\n  const context = userDataReader.createContext(\n    allowArrays ? UserDataSource.ArrayArgument : UserDataSource.Argument,\n    methodName\n  );\n  const parsed = parseData(input, context);\n  debugAssert(parsed != null, 'Parsed data should not be null.');\n  debugAssert(\n    context.fieldTransforms.length === 0,\n    'Field transforms should have been disallowed.'\n  );\n  return parsed;\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input Data to be parsed.\n * @param context A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @return The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\nexport function parseData(\n  input: unknown,\n  context: ParseContext\n): api.Value | null {\n  if (looksLikeJsonObject(input)) {\n    validatePlainObject('Unsupported field value:', context, input);\n    return parseObject(input, context);\n  } else if (input instanceof SerializableFieldValue) {\n    // FieldValues usually parse into transforms (except FieldValue.delete())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    parseSentinelFieldValue(input, context);\n    return null;\n  } else {\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    if (context.path) {\n      context.fieldMask.push(context.path);\n    }\n\n    if (input instanceof Array) {\n      // TODO(b/34871131): Include the path containing the array in the error\n      // message.\n      // In the case of IN queries, the parsed data is an array (representing\n      // the set of values to be included for the IN query) that may directly\n      // contain additional arrays (each representing an individual field\n      // value), so we disable this validation.\n      if (\n        context.settings.arrayElement &&\n        context.dataSource !== UserDataSource.ArrayArgument\n      ) {\n        throw context.createError('Nested arrays are not supported');\n      }\n      return parseArray(input as unknown[], context);\n    } else {\n      return parseScalarValue(input, context);\n    }\n  }\n}\n\nfunction parseObject(\n  obj: Dict<unknown>,\n  context: ParseContext\n): { mapValue: api.MapValue } {\n  const fields: Dict<api.Value> = {};\n\n  if (isEmpty(obj)) {\n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    if (context.path && context.path.length > 0) {\n      context.fieldMask.push(context.path);\n    }\n  } else {\n    forEach(obj, (key: string, val: unknown) => {\n      const parsedValue = parseData(val, context.childContextForField(key));\n      if (parsedValue != null) {\n        fields[key] = parsedValue;\n      }\n    });\n  }\n\n  return { mapValue: { fields } };\n}\n\nfunction parseArray(array: unknown[], context: ParseContext): api.Value {\n  const values: api.Value[] = [];\n  let entryIndex = 0;\n  for (const entry of array) {\n    let parsedEntry = parseData(\n      entry,\n      context.childContextForArray(entryIndex)\n    );\n    if (parsedEntry == null) {\n      // Just include nulls in the array for fields being replaced with a\n      // sentinel.\n      parsedEntry = { nullValue: 'NULL_VALUE' };\n    }\n    values.push(parsedEntry);\n    entryIndex++;\n  }\n  return { arrayValue: { values } };\n}\n\n/**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\nfunction parseSentinelFieldValue(\n  value: SerializableFieldValue,\n  context: ParseContext\n): void {\n  // Sentinels are only supported with writes, and not within arrays.\n  if (!isWrite(context.dataSource)) {\n    throw context.createError(\n      `${value._methodName}() can only be used with update() and set()`\n    );\n  }\n  if (!context.path) {\n    throw context.createError(\n      `${value._methodName}() is not currently supported inside arrays`\n    );\n  }\n\n  const fieldTransform = value._toFieldTransform(context);\n  if (fieldTransform) {\n    context.fieldTransforms.push(fieldTransform);\n  }\n}\n\n/**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @return The parsed value\n */\nfunction parseScalarValue(\n  value: unknown,\n  context: ParseContext\n): api.Value | null {\n  if (value === null) {\n    return { nullValue: 'NULL_VALUE' };\n  } else if (typeof value === 'number') {\n    return toNumber(context.serializer, value);\n  } else if (typeof value === 'boolean') {\n    return { booleanValue: value };\n  } else if (typeof value === 'string') {\n    return { stringValue: value };\n  } else if (value instanceof Date) {\n    const timestamp = Timestamp.fromDate(value);\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof Timestamp) {\n    // Firestore backend truncates precision down to microseconds. To ensure\n    // offline mode works the same with regards to truncation, perform the\n    // truncation immediately without waiting for the backend to do that.\n    const timestamp = new Timestamp(\n      value.seconds,\n      Math.floor(value.nanoseconds / 1000) * 1000\n    );\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof GeoPoint) {\n    return {\n      geoPointValue: {\n        latitude: value.latitude,\n        longitude: value.longitude\n      }\n    };\n  } else if (value instanceof Blob) {\n    return { bytesValue: toBytes(context.serializer, value) };\n  } else if (value instanceof DocumentKeyReference) {\n    const thisDb = context.databaseId;\n    const otherDb = value._databaseId;\n    if (!otherDb.isEqual(thisDb)) {\n      throw context.createError(\n        'Document reference is for database ' +\n          `${otherDb.projectId}/${otherDb.database} but should be ` +\n          `for database ${thisDb.projectId}/${thisDb.database}`\n      );\n    }\n    return {\n      referenceValue: toResourceName(\n        value._databaseId || context.databaseId,\n        value._key.path\n      )\n    };\n  } else if (value === undefined && context.ignoreUndefinedProperties) {\n    return null;\n  } else {\n    throw context.createError(\n      `Unsupported field value: ${valueDescription(value)}`\n    );\n  }\n}\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    !(input instanceof Array) &&\n    !(input instanceof Date) &&\n    !(input instanceof Timestamp) &&\n    !(input instanceof GeoPoint) &&\n    !(input instanceof Blob) &&\n    !(input instanceof DocumentKeyReference) &&\n    !(input instanceof SerializableFieldValue)\n  );\n}\n\nfunction validatePlainObject(\n  message: string,\n  context: ParseContext,\n  input: unknown\n): asserts input is Dict<unknown> {\n  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n    const description = valueDescription(input);\n    if (description === 'an object') {\n      // Massage the error if it was an object.\n      throw context.createError(message + ' a custom object');\n    } else {\n      throw context.createError(message + ' ' + description);\n    }\n  }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(\n  methodName: string,\n  path: string | BaseFieldPath,\n  targetDoc?: DocumentKey\n): FieldPath {\n  if (path instanceof BaseFieldPath) {\n    return path._internalPath;\n  } else if (typeof path === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, path);\n  } else {\n    const message = 'Field path arguments must be of type string or FieldPath.';\n    throw createError(\n      message,\n      methodName,\n      /* hasConverter= */ false,\n      /* path= */ undefined,\n      targetDoc\n    );\n  }\n}\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n * @param targetDoc The document against which the field path will be evaluated.\n */\nexport function fieldPathFromDotSeparatedString(\n  methodName: string,\n  path: string,\n  targetDoc?: DocumentKey\n): FieldPath {\n  try {\n    return fromDotSeparatedString(path)._internalPath;\n  } catch (e) {\n    const message = errorMessage(e);\n    throw createError(\n      message,\n      methodName,\n      /* hasConverter= */ false,\n      /* path= */ undefined,\n      targetDoc\n    );\n  }\n}\n\nfunction createError(\n  reason: string,\n  methodName: string,\n  hasConverter: boolean,\n  path?: FieldPath,\n  targetDoc?: DocumentKey\n): Error {\n  const hasPath = path && !path.isEmpty();\n  const hasDocument = targetDoc !== undefined;\n  let message = `Function ${methodName}() called with invalid data`;\n  if (hasConverter) {\n    message += ' (via `toFirestore()`)';\n  }\n  message += '. ';\n\n  let description = '';\n  if (hasPath || hasDocument) {\n    description += ' (found';\n\n    if (hasPath) {\n      description += ` in field ${path}`;\n    }\n    if (hasDocument) {\n      description += ` in document ${targetDoc}`;\n    }\n    description += ')';\n  }\n\n  return new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    message + reason + description\n  );\n}\n\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error: Error | object): string {\n  return error instanceof Error ? error.message : error.toString();\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\nfunction fieldMaskContains(haystack: FieldPath[], needle: FieldPath): boolean {\n  return haystack.some(v => v.isEqual(needle));\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '../../../lite-types';\n\nimport { BaseFieldPath } from '../../../src/api/field_path';\nimport { cast } from './util';\nimport { DOCUMENT_KEY_NAME } from '../../../src/model/path';\n\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nexport class FieldPath extends BaseFieldPath implements firestore.FieldPath {\n  // Note: This class is stripped down a copy of the FieldPath class in the\n  // legacy SDK. The changes are:\n  // - The `documentId()` static method has been removed\n  // - Input validation is limited to errors that cannot be caught by the\n  //   TypeScript transpiler.\n\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    super(fieldNames);\n  }\n\n  isEqual(other: firestore.FieldPath): boolean {\n    const path = cast(other, FieldPath);\n    return this._internalPath.isEqual(path._internalPath);\n  }\n}\n\nexport function documentId(): firestore.FieldPath {\n  return new FieldPath(DOCUMENT_KEY_NAME);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { DocumentKeyReference } from './user_data_reader';\nimport { Blob } from './blob';\nimport { GeoPoint } from './geo_point';\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  normalizeByteString,\n  normalizeNumber,\n  normalizeTimestamp,\n  typeOrder\n} from '../model/values';\nimport {\n  getLocalWriteTime,\n  getPreviousValue\n} from '../model/server_timestamps';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach } from '../util/obj';\nimport { TypeOrder } from '../model/object_value';\nimport { ResourcePath } from '../model/path';\nimport { isValidResourceName } from '../remote/serializer';\nimport { logError } from '../util/log';\n\nexport type ServerTimestampBehavior = 'estimate' | 'previous' | 'none';\n\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n */\nexport class UserDataWriter {\n  constructor(\n    private readonly databaseId: DatabaseId,\n    private readonly timestampsInSnapshots: boolean,\n    private readonly serverTimestampBehavior: ServerTimestampBehavior,\n    private readonly referenceFactory: (\n      key: DocumentKey\n    ) => DocumentKeyReference<firestore.DocumentData>\n  ) {}\n\n  convertValue(value: api.Value): unknown {\n    switch (typeOrder(value)) {\n      case TypeOrder.NullValue:\n        return null;\n      case TypeOrder.BooleanValue:\n        return value.booleanValue!;\n      case TypeOrder.NumberValue:\n        return normalizeNumber(value.integerValue || value.doubleValue);\n      case TypeOrder.TimestampValue:\n        return this.convertTimestamp(value.timestampValue!);\n      case TypeOrder.ServerTimestampValue:\n        return this.convertServerTimestamp(value);\n      case TypeOrder.StringValue:\n        return value.stringValue!;\n      case TypeOrder.BlobValue:\n        return new Blob(normalizeByteString(value.bytesValue!));\n      case TypeOrder.RefValue:\n        return this.convertReference(value.referenceValue!);\n      case TypeOrder.GeoPointValue:\n        return this.convertGeoPoint(value.geoPointValue!);\n      case TypeOrder.ArrayValue:\n        return this.convertArray(value.arrayValue!);\n      case TypeOrder.ObjectValue:\n        return this.convertObject(value.mapValue!);\n      default:\n        throw fail('Invalid value type: ' + JSON.stringify(value));\n    }\n  }\n\n  private convertObject(mapValue: api.MapValue): firestore.DocumentData {\n    const result: firestore.DocumentData = {};\n    forEach(mapValue.fields || {}, (key, value) => {\n      result[key] = this.convertValue(value);\n    });\n    return result;\n  }\n\n  private convertGeoPoint(value: api.LatLng): GeoPoint {\n    return new GeoPoint(\n      normalizeNumber(value.latitude),\n      normalizeNumber(value.longitude)\n    );\n  }\n\n  private convertArray(arrayValue: api.ArrayValue): unknown[] {\n    return (arrayValue.values || []).map(value => this.convertValue(value));\n  }\n\n  private convertServerTimestamp(value: api.Value): unknown {\n    switch (this.serverTimestampBehavior) {\n      case 'previous':\n        const previousValue = getPreviousValue(value);\n        if (previousValue == null) {\n          return null;\n        }\n        return this.convertValue(previousValue);\n      case 'estimate':\n        return this.convertTimestamp(getLocalWriteTime(value));\n      default:\n        return null;\n    }\n  }\n\n  private convertTimestamp(value: api.Timestamp): Timestamp | Date {\n    const normalizedValue = normalizeTimestamp(value);\n    const timestamp = new Timestamp(\n      normalizedValue.seconds,\n      normalizedValue.nanos\n    );\n    if (this.timestampsInSnapshots) {\n      return timestamp;\n    } else {\n      return timestamp.toDate();\n    }\n  }\n\n  private convertReference(\n    name: string\n  ): DocumentKeyReference<firestore.DocumentData> {\n    const resourcePath = ResourcePath.fromString(name);\n    hardAssert(\n      isValidResourceName(resourcePath),\n      'ReferenceValue is not valid ' + name\n    );\n    const databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\n    const key = new DocumentKey(resourcePath.popFirst(5));\n\n    if (!databaseId.isEqual(this.databaseId)) {\n      // TODO(b/64130202): Somehow support foreign references.\n      logError(\n        `Document ${key} contains a document ` +\n          `reference within a different database (` +\n          `${databaseId.projectId}/${databaseId.database}) which is not ` +\n          `supported. It will be treated as a reference in the current ` +\n          `database (${this.databaseId.projectId}/${this.databaseId.database}) ` +\n          `instead.`\n      );\n    }\n\n    return this.referenceFactory(key);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '../../../lite-types';\n\nimport { Firestore } from './database';\nimport { DocumentReference, queryEqual } from './reference';\nimport { FieldPath } from './field_path';\nimport { cast } from './util';\nimport { DocumentKey } from '../../../src/model/document_key';\nimport { Document } from '../../../src/model/document';\nimport { UserDataWriter } from '../../../src/api/user_data_writer';\nimport { FieldPath as InternalFieldPath } from '../../../src/model/path';\nimport {\n  fieldPathFromDotSeparatedString,\n  UntypedFirestoreDataConverter\n} from '../../../src/api/user_data_reader';\nimport { arrayEquals } from '../../../src/util/misc';\n\nexport class DocumentSnapshot<T = firestore.DocumentData>\n  implements firestore.DocumentSnapshot<T> {\n  // Note: This class is stripped down version of the DocumentSnapshot in\n  // the legacy SDK. The changes are:\n  // - No support for SnapshotMetadata.\n  // - No support for SnapshotOptions.\n\n  constructor(\n    public _firestore: Firestore,\n    public _key: DocumentKey,\n    public _document: Document | null,\n    public _converter: UntypedFirestoreDataConverter<T> | null\n  ) {}\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get ref(): firestore.DocumentReference<T> {\n    return new DocumentReference<T>(\n      this._firestore,\n      this._converter,\n      this._key.path\n    );\n  }\n\n  exists(): this is firestore.QueryDocumentSnapshot<T> {\n    return this._document !== null;\n  }\n\n  data(): T | undefined {\n    if (!this._document) {\n      return undefined;\n    } else if (this._converter) {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      const snapshot = new QueryDocumentSnapshot(\n        this._firestore,\n        this._key,\n        this._document,\n        /* converter= */ null\n      );\n      return this._converter.fromFirestore(snapshot);\n    } else {\n      const userDataWriter = new UserDataWriter(\n        this._firestore._databaseId,\n        /* timestampsInSnapshots= */ true,\n        /* serverTimestampBehavior=*/ 'none',\n        key =>\n          new DocumentReference(\n            this._firestore,\n            /* converter= */ null,\n            key.path\n          )\n      );\n      return userDataWriter.convertValue(this._document.toProto()) as T;\n    }\n  }\n\n  get(fieldPath: string | firestore.FieldPath): unknown {\n    if (this._document) {\n      const value = this._document\n        .data()\n        .field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n      if (value !== null) {\n        const userDataWriter = new UserDataWriter(\n          this._firestore._databaseId,\n          /* timestampsInSnapshots= */ true,\n          /* serverTimestampBehavior=*/ 'none',\n          key =>\n            new DocumentReference(this._firestore, this._converter, key.path)\n        );\n        return userDataWriter.convertValue(value);\n      }\n    }\n    return undefined;\n  }\n}\n\nexport class QueryDocumentSnapshot<T = firestore.DocumentData>\n  extends DocumentSnapshot<T>\n  implements firestore.QueryDocumentSnapshot<T> {\n  data(): T {\n    return super.data() as T;\n  }\n}\n\nexport class QuerySnapshot<T = firestore.DocumentData>\n  implements firestore.QuerySnapshot<T> {\n  constructor(\n    readonly query: firestore.Query<T>,\n    readonly _docs: Array<QueryDocumentSnapshot<T>>\n  ) {}\n\n  get docs(): Array<firestore.QueryDocumentSnapshot<T>> {\n    return [...this._docs];\n  }\n\n  get size(): number {\n    return this.docs.length;\n  }\n\n  get empty(): boolean {\n    return this.docs.length === 0;\n  }\n\n  forEach(\n    callback: (result: firestore.QueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    this._docs.forEach(callback, thisArg);\n  }\n}\n\nexport function snapshotEqual<T>(\n  left: firestore.DocumentSnapshot<T> | firestore.QuerySnapshot<T>,\n  right: firestore.DocumentSnapshot<T> | firestore.QuerySnapshot<T>\n): boolean {\n  if (left instanceof DocumentSnapshot && right instanceof DocumentSnapshot) {\n    return (\n      left._firestore === right._firestore &&\n      left._key.isEqual(right._key) &&\n      (left._document === null\n        ? right._document === null\n        : left._document.isEqual(right._document)) &&\n      left._converter === right._converter\n    );\n  } else if (left instanceof QuerySnapshot && right instanceof QuerySnapshot) {\n    return (\n      queryEqual(left.query, right.query) &&\n      arrayEquals(left.docs, right.docs, snapshotEqual)\n    );\n  }\n\n  return false;\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(\n  methodName: string,\n  arg: string | firestore.FieldPath\n): InternalFieldPath {\n  if (typeof arg === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, arg);\n  } else {\n    const path = cast(arg, FieldPath);\n    return path._internalPath;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ParsedSetData, ParsedUpdateData } from '../api/user_data_reader';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\n\nimport { DocumentKey } from '../model/document_key';\nimport {\n  DeleteMutation,\n  Mutation,\n  Precondition,\n  VerifyMutation\n} from '../model/mutation';\nimport {\n  Datastore,\n  invokeBatchGetDocumentsRpc,\n  invokeCommitRpc\n} from '../remote/datastore';\nimport { fail, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { SnapshotVersion } from './snapshot_version';\nimport { ResourcePath } from '../model/path';\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nexport class Transaction {\n  // The version of each document that was read during this transaction.\n  private readVersions = new Map</* path */ string, SnapshotVersion>();\n  private mutations: Mutation[] = [];\n  private committed = false;\n\n  /**\n   * A deferred usage error that occurred previously in this transaction that\n   * will cause the transaction to fail once it actually commits.\n   */\n  private lastWriteError: FirestoreError | null = null;\n\n  /**\n   * Set of documents that have been written in the transaction.\n   *\n   * When there's more than one write to the same key in a transaction, any\n   * writes after the first are handled differently.\n   */\n  private writtenDocs: Set<DocumentKey> = new Set();\n\n  constructor(private datastore: Datastore) {}\n\n  async lookup(keys: DocumentKey[]): Promise<MaybeDocument[]> {\n    this.ensureCommitNotCalled();\n\n    if (this.mutations.length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Firestore transactions require all reads to be executed before all writes.'\n      );\n    }\n    const docs = await invokeBatchGetDocumentsRpc(this.datastore, keys);\n    docs.forEach(doc => {\n      if (doc instanceof NoDocument || doc instanceof Document) {\n        this.recordVersion(doc);\n      } else {\n        fail('Document in a transaction was a ' + doc.constructor.name);\n      }\n    });\n    return docs;\n  }\n\n  set(key: DocumentKey, data: ParsedSetData): void {\n    this.write(data.toMutations(key, this.precondition(key)));\n    this.writtenDocs.add(key);\n  }\n\n  update(key: DocumentKey, data: ParsedUpdateData): void {\n    try {\n      this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    } catch (e) {\n      this.lastWriteError = e;\n    }\n    this.writtenDocs.add(key);\n  }\n\n  delete(key: DocumentKey): void {\n    this.write([new DeleteMutation(key, this.precondition(key))]);\n    this.writtenDocs.add(key);\n  }\n\n  async commit(): Promise<void> {\n    this.ensureCommitNotCalled();\n\n    if (this.lastWriteError) {\n      throw this.lastWriteError;\n    }\n    const unwritten = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(mutation => {\n      unwritten.delete(mutation.key.toString());\n    });\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    unwritten.forEach((_, path) => {\n      const key = new DocumentKey(ResourcePath.fromString(path));\n      this.mutations.push(new VerifyMutation(key, this.precondition(key)));\n    });\n    await invokeCommitRpc(this.datastore, this.mutations);\n    this.committed = true;\n  }\n\n  private recordVersion(doc: MaybeDocument): void {\n    let docVersion: SnapshotVersion;\n\n    if (doc instanceof Document) {\n      docVersion = doc.version;\n    } else if (doc instanceof NoDocument) {\n      // For deleted docs, we must use baseVersion 0 when we overwrite them.\n      docVersion = SnapshotVersion.min();\n    } else {\n      throw fail('Document in a transaction was a ' + doc.constructor.name);\n    }\n\n    const existingVersion = this.readVersions.get(doc.key.toString());\n    if (existingVersion) {\n      if (!docVersion.isEqual(existingVersion)) {\n        // This transaction will fail no matter what.\n        throw new FirestoreError(\n          Code.ABORTED,\n          'Document version changed between two reads.'\n        );\n      }\n    } else {\n      this.readVersions.set(doc.key.toString(), docVersion);\n    }\n  }\n\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n  private precondition(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    if (!this.writtenDocs.has(key) && version) {\n      return Precondition.updateTime(version);\n    } else {\n      return Precondition.none();\n    }\n  }\n\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n  private preconditionForUpdate(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(key) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        // The document doesn't exist, so fail the transaction.\n\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't update a document that doesn't exist.\"\n        );\n      }\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(version);\n    } else {\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Precondition.exists(true);\n    }\n  }\n\n  private write(mutations: Mutation[]): void {\n    this.ensureCommitNotCalled();\n    this.mutations = this.mutations.concat(mutations);\n  }\n\n  private ensureCommitNotCalled(): void {\n    debugAssert(\n      !this.committed,\n      'A transaction object cannot be used after its update callback has been invoked.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '../util/promise';\nimport { TimerId, AsyncQueue } from '../util/async_queue';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { Transaction } from './transaction';\nimport { Datastore } from '../remote/datastore';\nimport { isNullOrUndefined } from '../util/types';\nimport { isPermanentError } from '../remote/rpc_error';\nimport { FirestoreError } from '../util/error';\n\nconst RETRY_COUNT = 5;\n\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nexport class TransactionRunner<T> {\n  private retries = RETRY_COUNT;\n  private backoff: ExponentialBackoff;\n\n  constructor(\n    private readonly asyncQueue: AsyncQueue,\n    private readonly datastore: Datastore,\n    private readonly updateFunction: (transaction: Transaction) => Promise<T>,\n    private readonly deferred: Deferred<T>\n  ) {\n    this.backoff = new ExponentialBackoff(\n      this.asyncQueue,\n      TimerId.TransactionRetry\n    );\n  }\n\n  /** Runs the transaction and sets the result on deferred. */\n  run(): void {\n    this.runWithBackOff();\n  }\n\n  private runWithBackOff(): void {\n    this.backoff.backoffAndRun(async () => {\n      const transaction = new Transaction(this.datastore);\n      const userPromise = this.tryRunUpdateFunction(transaction);\n      if (userPromise) {\n        userPromise\n          .then(result => {\n            this.asyncQueue.enqueueAndForget(() => {\n              return transaction\n                .commit()\n                .then(() => {\n                  this.deferred.resolve(result);\n                })\n                .catch(commitError => {\n                  this.handleTransactionError(commitError);\n                });\n            });\n          })\n          .catch(userPromiseError => {\n            this.handleTransactionError(userPromiseError);\n          });\n      }\n    });\n  }\n\n  private tryRunUpdateFunction(transaction: Transaction): Promise<T> | null {\n    try {\n      const userPromise = this.updateFunction(transaction);\n      if (\n        isNullOrUndefined(userPromise) ||\n        !userPromise.catch ||\n        !userPromise.then\n      ) {\n        this.deferred.reject(\n          Error('Transaction callback must return a Promise')\n        );\n        return null;\n      }\n      return userPromise;\n    } catch (error) {\n      // Do not retry errors thrown by user provided updateFunction.\n      this.deferred.reject(error);\n      return null;\n    }\n  }\n\n  private handleTransactionError(error: Error): void {\n    if (this.retries > 0 && this.isRetryableTransactionError(error)) {\n      this.retries -= 1;\n      this.asyncQueue.enqueueAndForget(() => {\n        this.runWithBackOff();\n        return Promise.resolve();\n      });\n    } else {\n      this.deferred.reject(error);\n    }\n  }\n\n  private isRetryableTransactionError(error: Error): boolean {\n    if (error.name === 'FirebaseError') {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const code = (error as FirestoreError).code;\n      return (\n        code === 'aborted' ||\n        code === 'failed-precondition' ||\n        !isPermanentError(code)\n      );\n    }\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp, FirebaseService } from '@firebase/app-types/private';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { ListenOptions } from '../core/event_manager';\nimport {\n  MemoryOfflineComponentProvider,\n  OfflineComponentProvider,\n  OnlineComponentProvider\n} from '../core/component_provider';\nimport { FirestoreClient, PersistenceSettings } from '../core/firestore_client';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  isCollectionGroupQuery,\n  LimitType,\n  newQueryComparator,\n  newQueryForCollectionGroup,\n  newQueryForPath,\n  Operator,\n  OrderBy,\n  Query as InternalQuery,\n  queryEquals,\n  queryOrderBy,\n  queryWithAddedFilter,\n  queryWithAddedOrderBy,\n  queryWithEndAt,\n  queryWithLimit,\n  queryWithStartAt\n} from '../core/query';\nimport { Transaction as InternalTransaction } from '../core/transaction';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { LruParams } from '../local/lru_garbage_collector';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DeleteMutation, Mutation, Precondition } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { isServerTimestamp } from '../model/server_timestamps';\nimport { refValue } from '../model/values';\nimport { debugAssert, fail } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateBetweenNumberOfArgs,\n  validateDefined,\n  validateExactNumberOfArgs,\n  validateNamedOptionalPropertyEquals,\n  validateNamedOptionalType,\n  validateNamedType,\n  validateOptionalArgType,\n  validateOptionalArrayElements,\n  validateOptionNames,\n  validatePositiveNumber,\n  validateStringEnum,\n  valueDescription\n} from '../util/input_validation';\nimport { getLogLevel, logError, LogLevel, setLogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { Deferred } from '../util/promise';\nimport { FieldPath as ExternalFieldPath } from './field_path';\nimport {\n  CredentialsProvider,\n  CredentialsSettings,\n  EmptyCredentialsProvider,\n  FirebaseCredentialsProvider,\n  makeCredentialsProvider\n} from './credentials';\nimport {\n  CompleteFn,\n  ErrorFn,\n  isPartialObserver,\n  NextFn,\n  PartialObserver,\n  Unsubscribe\n} from './observer';\nimport {\n  DocumentKeyReference,\n  fieldPathFromArgument,\n  parseQueryValue,\n  parseSetData,\n  parseUpdateData,\n  parseUpdateVarargs,\n  UntypedFirestoreDataConverter,\n  UserDataReader\n} from './user_data_reader';\nimport { UserDataWriter } from './user_data_writer';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n// settings() defaults:\nconst DEFAULT_HOST = 'firestore.googleapis.com';\nconst DEFAULT_SSL = true;\nconst DEFAULT_TIMESTAMPS_IN_SNAPSHOTS = true;\nconst DEFAULT_FORCE_LONG_POLLING = false;\nconst DEFAULT_IGNORE_UNDEFINED_PROPERTIES = false;\n\n/**\n * Constant used to indicate the LRU garbage collection should be disabled.\n * Set this value as the `cacheSizeBytes` on the settings passed to the\n * `Firestore` instance.\n */\nexport const CACHE_SIZE_UNLIMITED = LruParams.COLLECTION_DISABLED;\n\n// enablePersistence() defaults:\nconst DEFAULT_SYNCHRONIZE_TABS = false;\n\n/** Undocumented, private additional settings not exposed in our public API. */\ninterface PrivateSettings extends firestore.Settings {\n  // Can be a google-auth-library or gapi client.\n  credentials?: CredentialsSettings;\n}\n\n/**\n * Options that can be provided in the Firestore constructor when not using\n * Firebase (aka standalone mode).\n */\nexport interface FirestoreDatabase {\n  projectId: string;\n  database?: string;\n}\n\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettings {\n  /** The hostname to connect to. */\n  readonly host: string;\n\n  /** Whether to use SSL when connecting. */\n  readonly ssl: boolean;\n\n  readonly timestampsInSnapshots: boolean;\n\n  readonly cacheSizeBytes: number;\n\n  readonly forceLongPolling: boolean;\n\n  readonly ignoreUndefinedProperties: boolean;\n\n  // Can be a google-auth-library or gapi client.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  credentials?: any;\n\n  constructor(settings: PrivateSettings) {\n    if (settings.host === undefined) {\n      if (settings.ssl !== undefined) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't provide ssl option if host option is not set\"\n        );\n      }\n      this.host = DEFAULT_HOST;\n      this.ssl = DEFAULT_SSL;\n    } else {\n      validateNamedType('settings', 'non-empty string', 'host', settings.host);\n      this.host = settings.host;\n\n      validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n      this.ssl = settings.ssl ?? DEFAULT_SSL;\n    }\n    validateOptionNames('settings', settings, [\n      'host',\n      'ssl',\n      'credentials',\n      'timestampsInSnapshots',\n      'cacheSizeBytes',\n      'experimentalForceLongPolling',\n      'ignoreUndefinedProperties'\n    ]);\n\n    validateNamedOptionalType(\n      'settings',\n      'object',\n      'credentials',\n      settings.credentials\n    );\n    this.credentials = settings.credentials;\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'timestampsInSnapshots',\n      settings.timestampsInSnapshots\n    );\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'ignoreUndefinedProperties',\n      settings.ignoreUndefinedProperties\n    );\n\n    // Nobody should set timestampsInSnapshots anymore, but the error depends on\n    // whether they set it to true or false...\n    if (settings.timestampsInSnapshots === true) {\n      logError(\n        \"The setting 'timestampsInSnapshots: true' is no longer required \" +\n          'and should be removed.'\n      );\n    } else if (settings.timestampsInSnapshots === false) {\n      logError(\n        \"Support for 'timestampsInSnapshots: false' will be removed soon. \" +\n          'You must update your code to handle Timestamp objects.'\n      );\n    }\n    this.timestampsInSnapshots =\n      settings.timestampsInSnapshots ?? DEFAULT_TIMESTAMPS_IN_SNAPSHOTS;\n    this.ignoreUndefinedProperties =\n      settings.ignoreUndefinedProperties ?? DEFAULT_IGNORE_UNDEFINED_PROPERTIES;\n\n    validateNamedOptionalType(\n      'settings',\n      'number',\n      'cacheSizeBytes',\n      settings.cacheSizeBytes\n    );\n    if (settings.cacheSizeBytes === undefined) {\n      this.cacheSizeBytes = LruParams.DEFAULT_CACHE_SIZE_BYTES;\n    } else {\n      if (\n        settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED &&\n        settings.cacheSizeBytes < LruParams.MINIMUM_CACHE_SIZE_BYTES\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `cacheSizeBytes must be at least ${LruParams.MINIMUM_CACHE_SIZE_BYTES}`\n        );\n      } else {\n        this.cacheSizeBytes = settings.cacheSizeBytes;\n      }\n    }\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'experimentalForceLongPolling',\n      settings.experimentalForceLongPolling\n    );\n    this.forceLongPolling =\n      settings.experimentalForceLongPolling ?? DEFAULT_FORCE_LONG_POLLING;\n  }\n\n  isEqual(other: FirestoreSettings): boolean {\n    return (\n      this.host === other.host &&\n      this.ssl === other.ssl &&\n      this.timestampsInSnapshots === other.timestampsInSnapshots &&\n      this.credentials === other.credentials &&\n      this.cacheSizeBytes === other.cacheSizeBytes &&\n      this.forceLongPolling === other.forceLongPolling &&\n      this.ignoreUndefinedProperties === other.ignoreUndefinedProperties\n    );\n  }\n}\n\n/**\n * The root reference to the database.\n */\nexport class Firestore implements firestore.FirebaseFirestore, FirebaseService {\n  // The objects that are a part of this API are exposed to third-parties as\n  // compiled javascript so we want to flag our private members with a leading\n  // underscore to discourage their use.\n  readonly _databaseId: DatabaseId;\n  private readonly _persistenceKey: string;\n  private _credentials: CredentialsProvider;\n  private readonly _firebaseApp: FirebaseApp | null = null;\n  private _settings: FirestoreSettings;\n\n  // The firestore client instance. This will be available as soon as\n  // configureClient is called, but any calls against it will block until\n  // setup has completed.\n  //\n  // Operations on the _firestoreClient don't block on _firestoreReady. Those\n  // are already set to synchronize on the async queue.\n  private _firestoreClient: FirestoreClient | undefined;\n\n  // Public for use in tests.\n  // TODO(mikelehen): Use modularized initialization instead.\n  readonly _queue = new AsyncQueue();\n\n  _userDataReader: UserDataReader | undefined;\n\n  // Note: We are using `MemoryComponentProvider` as a default\n  // ComponentProvider to ensure backwards compatibility with the format\n  // expected by the console build.\n  constructor(\n    databaseIdOrApp: FirestoreDatabase | FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    private _offlineComponentProvider: OfflineComponentProvider = new MemoryOfflineComponentProvider(),\n    private _onlineComponentProvider = new OnlineComponentProvider()\n  ) {\n    if (typeof (databaseIdOrApp as FirebaseApp).options === 'object') {\n      // This is very likely a Firebase app object\n      // TODO(b/34177605): Can we somehow use instanceof?\n      const app = databaseIdOrApp as FirebaseApp;\n      this._firebaseApp = app;\n      this._databaseId = Firestore.databaseIdFromApp(app);\n      this._persistenceKey = app.name;\n      this._credentials = new FirebaseCredentialsProvider(authProvider);\n    } else {\n      const external = databaseIdOrApp as FirestoreDatabase;\n      if (!external.projectId) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Must provide projectId'\n        );\n      }\n\n      this._databaseId = new DatabaseId(external.projectId, external.database);\n      // Use a default persistenceKey that lines up with FirebaseApp.\n      this._persistenceKey = '[DEFAULT]';\n      this._credentials = new EmptyCredentialsProvider();\n    }\n\n    this._settings = new FirestoreSettings({});\n  }\n\n  get _dataReader(): UserDataReader {\n    debugAssert(\n      !!this._firestoreClient,\n      'Cannot obtain UserDataReader before instance is intitialized'\n    );\n    if (!this._userDataReader) {\n      // Lazy initialize UserDataReader once the settings are frozen\n      this._userDataReader = new UserDataReader(\n        this._databaseId,\n        this._settings.ignoreUndefinedProperties\n      );\n    }\n    return this._userDataReader;\n  }\n\n  settings(settingsLiteral: firestore.Settings): void {\n    validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n    validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n\n    const newSettings = new FirestoreSettings(settingsLiteral);\n    if (this._firestoreClient && !this._settings.isEqual(newSettings)) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and its settings can no longer ' +\n          'be changed. You can only call settings() before calling any other ' +\n          'methods on a Firestore object.'\n      );\n    }\n\n    this._settings = newSettings;\n    if (newSettings.credentials !== undefined) {\n      this._credentials = makeCredentialsProvider(newSettings.credentials);\n    }\n  }\n\n  enableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.disableNetwork();\n  }\n\n  enablePersistence(settings?: firestore.PersistenceSettings): Promise<void> {\n    if (this._firestoreClient) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and persistence can no longer ' +\n          'be enabled. You can only call enablePersistence() before calling ' +\n          'any other methods on a Firestore object.'\n      );\n    }\n\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      if (settings.experimentalTabSynchronization !== undefined) {\n        logError(\n          \"The 'experimentalTabSynchronization' setting will be removed. Use 'synchronizeTabs' instead.\"\n        );\n      }\n      synchronizeTabs =\n        settings.synchronizeTabs ??\n        settings.experimentalTabSynchronization ??\n        DEFAULT_SYNCHRONIZE_TABS;\n\n      experimentalForceOwningTab = settings.experimentalForceOwningTab\n        ? settings.experimentalForceOwningTab\n        : false;\n\n      if (synchronizeTabs && experimentalForceOwningTab) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"The 'experimentalForceOwningTab' setting cannot be used with 'synchronizeTabs'.\"\n        );\n      }\n    }\n\n    return this.configureClient(\n      this._offlineComponentProvider,\n      this._onlineComponentProvider,\n      {\n        durable: true,\n        cacheSizeBytes: this._settings.cacheSizeBytes,\n        synchronizeTabs,\n        forceOwningTab: experimentalForceOwningTab\n      }\n    );\n  }\n\n  async clearPersistence(): Promise<void> {\n    if (\n      this._firestoreClient !== undefined &&\n      !this._firestoreClient.clientTerminated\n    ) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Persistence can only be cleared before a Firestore instance is ' +\n          'initialized or after it is terminated.'\n      );\n    }\n\n    const deferred = new Deferred<void>();\n    this._queue.enqueueAndForgetEvenAfterShutdown(async () => {\n      try {\n        await this._offlineComponentProvider.clearPersistence(\n          this._databaseId,\n          this._persistenceKey\n        );\n        deferred.resolve();\n      } catch (e) {\n        deferred.reject(e);\n      }\n    });\n    return deferred.promise;\n  }\n\n  terminate(): Promise<void> {\n    (this.app as _FirebaseApp)._removeServiceInstance('firestore');\n    return this.INTERNAL.delete();\n  }\n\n  get _isTerminated(): boolean {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.clientTerminated;\n  }\n\n  waitForPendingWrites(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.waitForPendingWrites();\n  }\n\n  onSnapshotsInSync(observer: PartialObserver<void>): Unsubscribe;\n  onSnapshotsInSync(onSync: () => void): Unsubscribe;\n  onSnapshotsInSync(arg: unknown): Unsubscribe {\n    this.ensureClientConfigured();\n\n    if (isPartialObserver(arg)) {\n      return this._firestoreClient!.addSnapshotsInSyncListener(\n        arg as PartialObserver<void>\n      );\n    } else {\n      validateArgType('Firestore.onSnapshotsInSync', 'function', 1, arg);\n      const observer: PartialObserver<void> = {\n        next: arg as () => void\n      };\n      return this._firestoreClient!.addSnapshotsInSyncListener(observer);\n    }\n  }\n\n  ensureClientConfigured(): FirestoreClient {\n    if (!this._firestoreClient) {\n      // Kick off starting the client but don't actually wait for it.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.configureClient(\n        new MemoryOfflineComponentProvider(),\n        new OnlineComponentProvider(),\n        {\n          durable: false\n        }\n      );\n    }\n    return this._firestoreClient as FirestoreClient;\n  }\n\n  private makeDatabaseInfo(): DatabaseInfo {\n    return new DatabaseInfo(\n      this._databaseId,\n      this._persistenceKey,\n      this._settings.host,\n      this._settings.ssl,\n      this._settings.forceLongPolling\n    );\n  }\n\n  private configureClient(\n    offlineComponentProvider: OfflineComponentProvider,\n    onlineComponentProvider: OnlineComponentProvider,\n    persistenceSettings: PersistenceSettings\n  ): Promise<void> {\n    debugAssert(!!this._settings.host, 'FirestoreSettings.host is not set');\n\n    debugAssert(\n      !this._firestoreClient,\n      'configureClient() called multiple times'\n    );\n\n    const databaseInfo = this.makeDatabaseInfo();\n\n    this._firestoreClient = new FirestoreClient(this._credentials, this._queue);\n\n    return this._firestoreClient.start(\n      databaseInfo,\n      offlineComponentProvider,\n      onlineComponentProvider,\n      persistenceSettings\n    );\n  }\n\n  private static databaseIdFromApp(app: FirebaseApp): DatabaseId {\n    if (!contains(app.options, 'projectId')) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        '\"projectId\" not provided in firebase.initializeApp.'\n      );\n    }\n\n    const projectId = app.options.projectId;\n    if (!projectId || typeof projectId !== 'string') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'projectId must be a string in FirebaseApp.options'\n      );\n    }\n    return new DatabaseId(projectId);\n  }\n\n  get app(): FirebaseApp {\n    if (!this._firebaseApp) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._firebaseApp;\n  }\n\n  INTERNAL = {\n    delete: async (): Promise<void> => {\n      // The client must be initalized to ensure that all subsequent API usage\n      // throws an exception.\n      this.ensureClientConfigured();\n      await this._firestoreClient!.terminate();\n    }\n  };\n\n  collection(pathString: string): firestore.CollectionReference {\n    validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n    validateArgType('Firestore.collection', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return new CollectionReference(\n      ResourcePath.fromString(pathString),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  doc(pathString: string): firestore.DocumentReference {\n    validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n    validateArgType('Firestore.doc', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return DocumentReference.forPath(\n      ResourcePath.fromString(pathString),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  collectionGroup(collectionId: string): firestore.Query {\n    validateExactNumberOfArgs('Firestore.collectionGroup', arguments, 1);\n    validateArgType(\n      'Firestore.collectionGroup',\n      'non-empty string',\n      1,\n      collectionId\n    );\n    if (collectionId.indexOf('/') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid collection ID '${collectionId}' passed to function ` +\n          `Firestore.collectionGroup(). Collection IDs must not contain '/'.`\n      );\n    }\n    this.ensureClientConfigured();\n    return new Query(\n      newQueryForCollectionGroup(collectionId),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  runTransaction<T>(\n    updateFunction: (transaction: firestore.Transaction) => Promise<T>\n  ): Promise<T> {\n    validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n    validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n    return this.ensureClientConfigured().transaction(\n      (transaction: InternalTransaction) => {\n        return updateFunction(new Transaction(this, transaction));\n      }\n    );\n  }\n\n  batch(): firestore.WriteBatch {\n    this.ensureClientConfigured();\n\n    return new WriteBatch(this);\n  }\n\n  static get logLevel(): firestore.LogLevel {\n    switch (getLogLevel()) {\n      case LogLevel.DEBUG:\n        return 'debug';\n      case LogLevel.ERROR:\n        return 'error';\n      case LogLevel.SILENT:\n        return 'silent';\n      case LogLevel.WARN:\n        return 'warn';\n      case LogLevel.INFO:\n        return 'info';\n      case LogLevel.VERBOSE:\n        return 'verbose';\n      default:\n        // The default log level is error\n        return 'error';\n    }\n  }\n\n  static setLogLevel(level: firestore.LogLevel): void {\n    validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n    validateStringEnum(\n      'setLogLevel',\n      ['debug', 'error', 'silent', 'warn', 'info', 'verbose'],\n      1,\n      level\n    );\n    setLogLevel(level);\n  }\n\n  // Note: this is not a property because the minifier can't work correctly with\n  // the way TypeScript compiler outputs properties.\n  _areTimestampsInSnapshotsEnabled(): boolean {\n    return this._settings.timestampsInSnapshots;\n  }\n}\n\n/**\n * A reference to a transaction.\n */\nexport class Transaction implements firestore.Transaction {\n  constructor(\n    private _firestore: Firestore,\n    private _transaction: InternalTransaction\n  ) {}\n\n  get<T>(\n    documentRef: firestore.DocumentReference<T>\n  ): Promise<firestore.DocumentSnapshot<T>> {\n    validateExactNumberOfArgs('Transaction.get', arguments, 1);\n    const ref = validateReference(\n      'Transaction.get',\n      documentRef,\n      this._firestore\n    );\n    return this._transaction\n      .lookup([ref._key])\n      .then((docs: MaybeDocument[]) => {\n        if (!docs || docs.length !== 1) {\n          return fail('Mismatch in docs returned from document lookup.');\n        }\n        const doc = docs[0];\n        if (doc instanceof NoDocument) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            null,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else if (doc instanceof Document) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            doc,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else {\n          throw fail(\n            `BatchGetDocumentsRequest returned unexpected document type: ${doc.constructor.name}`\n          );\n        }\n      });\n  }\n\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: firestore.SetOptions\n  ): Transaction;\n  set<T>(documentRef: DocumentReference<T>, data: T): Transaction;\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T | Partial<T>,\n    options?: firestore.SetOptions\n  ): Transaction {\n    validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n    const ref = validateReference(\n      'Transaction.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('Transaction.set', options);\n    const convertedValue = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this._firestore._dataReader,\n      'Transaction.set',\n      ref._key,\n      convertedValue,\n      ref._converter !== null,\n      options\n    );\n    this._transaction.set(ref._key, parsed);\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction {\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateVarargs(\n        this._firestore._dataReader,\n        'Transaction.update',\n        ref._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('Transaction.update', arguments, 2);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateData(\n        this._firestore._dataReader,\n        'Transaction.update',\n        ref._key,\n        fieldOrUpdateData\n      );\n    }\n\n    this._transaction.update(ref._key, parsed);\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): Transaction {\n    validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n    const ref = validateReference(\n      'Transaction.delete',\n      documentRef,\n      this._firestore\n    );\n    this._transaction.delete(ref._key);\n    return this;\n  }\n}\n\nexport class WriteBatch implements firestore.WriteBatch {\n  private _mutations = [] as Mutation[];\n  private _committed = false;\n\n  constructor(private _firestore: Firestore) {}\n\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: firestore.SetOptions\n  ): WriteBatch;\n  set<T>(documentRef: DocumentReference<T>, data: T): WriteBatch;\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T | Partial<T>,\n    options?: firestore.SetOptions\n  ): WriteBatch {\n    validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('WriteBatch.set', options);\n    const convertedValue = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this._firestore._dataReader,\n      'WriteBatch.set',\n      ref._key,\n      convertedValue,\n      ref._converter !== null,\n      options\n    );\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    this.verifyNotCommitted();\n\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateVarargs(\n        this._firestore._dataReader,\n        'WriteBatch.update',\n        ref._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = parseUpdateData(\n        this._firestore._dataReader,\n        'WriteBatch.update',\n        ref._key,\n        fieldOrUpdateData\n      );\n    }\n\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.exists(true))\n    );\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): WriteBatch {\n    validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.delete',\n      documentRef,\n      this._firestore\n    );\n    this._mutations = this._mutations.concat(\n      new DeleteMutation(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  commit(): Promise<void> {\n    this.verifyNotCommitted();\n    this._committed = true;\n    if (this._mutations.length > 0) {\n      return this._firestore.ensureClientConfigured().write(this._mutations);\n    }\n\n    return Promise.resolve();\n  }\n\n  private verifyNotCommitted(): void {\n    if (this._committed) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'A write batch can no longer be used after commit() ' +\n          'has been called.'\n      );\n    }\n  }\n}\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = firestore.DocumentData>\n  extends DocumentKeyReference<T>\n  implements firestore.DocumentReference<T> {\n  private _firestoreClient: FirestoreClient;\n\n  constructor(\n    public _key: DocumentKey,\n    readonly firestore: Firestore,\n    readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    super(firestore._databaseId, _key, _converter);\n    this._firestoreClient = this.firestore.ensureClientConfigured();\n  }\n\n  static forPath<U>(\n    path: ResourcePath,\n    firestore: Firestore,\n    converter: firestore.FirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid document reference. Document ' +\n          'references must have an even number of segments, but ' +\n          `${path.canonicalString()} has ${path.length}`\n      );\n    }\n    return new DocumentReference(new DocumentKey(path), firestore, converter);\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get parent(): firestore.CollectionReference<T> {\n    return new CollectionReference(\n      this._key.path.popLast(),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  get path(): string {\n    return this._key.path.canonicalString();\n  }\n\n  collection(\n    pathString: string\n  ): firestore.CollectionReference<firestore.DocumentData> {\n    validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n    validateArgType(\n      'DocumentReference.collection',\n      'non-empty string',\n      1,\n      pathString\n    );\n    if (!pathString) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Must provide a non-empty collection name to collection()'\n      );\n    }\n    const path = ResourcePath.fromString(pathString);\n    return new CollectionReference(\n      this._key.path.child(path),\n      this.firestore,\n      /* converter= */ null\n    );\n  }\n\n  isEqual(other: firestore.DocumentReference<T>): boolean {\n    if (!(other instanceof DocumentReference)) {\n      throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n    }\n    return (\n      this.firestore === other.firestore &&\n      this._key.isEqual(other._key) &&\n      this._converter === other._converter\n    );\n  }\n\n  set(value: Partial<T>, options: firestore.SetOptions): Promise<void>;\n  set(value: T): Promise<void>;\n  set(value: T | Partial<T>, options?: firestore.SetOptions): Promise<void> {\n    validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n    options = validateSetOptions('DocumentReference.set', options);\n    const convertedValue = applyFirestoreDataConverter(\n      this._converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this.firestore._dataReader,\n      'DocumentReference.set',\n      this._key,\n      convertedValue,\n      this._converter !== null,\n      options\n    );\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.none())\n    );\n  }\n\n  update(value: firestore.UpdateData): Promise<void>;\n  update(\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void>;\n  update(\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void> {\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n      parsed = parseUpdateVarargs(\n        this.firestore._dataReader,\n        'DocumentReference.update',\n        this._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n      parsed = parseUpdateData(\n        this.firestore._dataReader,\n        'DocumentReference.update',\n        this._key,\n        fieldOrUpdateData\n      );\n    }\n\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.exists(true))\n    );\n  }\n\n  delete(): Promise<void> {\n    validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n    return this._firestoreClient.write([\n      new DeleteMutation(this._key, Precondition.none())\n    ]);\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs(\n      'DocumentReference.onSnapshot',\n      arguments,\n      1,\n      4\n    );\n    let options: ListenOptions = {\n      includeMetadataChanges: false\n    };\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('DocumentReference.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'DocumentReference.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    const internalOptions = {\n      includeMetadataChanges: options.includeMetadataChanges\n    };\n\n    if (isPartialObserver(args[currArg])) {\n      const userObserver = args[currArg] as PartialObserver<\n        firestore.DocumentSnapshot<T>\n      >;\n      args[currArg] = userObserver.next?.bind(userObserver);\n      args[currArg + 1] = userObserver.error?.bind(userObserver);\n      args[currArg + 2] = userObserver.complete?.bind(userObserver);\n    } else {\n      validateArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg,\n        args[currArg]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n    }\n\n    const observer: PartialObserver<ViewSnapshot> = {\n      next: snapshot => {\n        if (args[currArg]) {\n          (args[currArg] as NextFn<firestore.DocumentSnapshot<T>>)(\n            this._convertToDocSnapshot(snapshot)\n          );\n        }\n      },\n      error: args[currArg + 1] as ErrorFn,\n      complete: args[currArg + 2] as CompleteFn\n    };\n\n    return this._firestoreClient.listen(\n      newQueryForPath(this._key.path),\n      internalOptions,\n      observer\n    );\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.DocumentSnapshot<T>> {\n    validateBetweenNumberOfArgs('DocumentReference.get', arguments, 0, 1);\n    validateGetOptions('DocumentReference.get', options);\n\n    const firestoreClient = this.firestore.ensureClientConfigured();\n    if (options && options.source === 'cache') {\n      return firestoreClient\n        .getDocumentFromLocalCache(this._key)\n        .then(\n          doc =>\n            new DocumentSnapshot(\n              this.firestore,\n              this._key,\n              doc,\n              /*fromCache=*/ true,\n              doc instanceof Document ? doc.hasLocalMutations : false,\n              this._converter\n            )\n        );\n    } else {\n      return firestoreClient\n        .getDocumentViaSnapshotListener(this._key, options)\n        .then(snapshot => this._convertToDocSnapshot(snapshot));\n    }\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.DocumentReference<U> {\n    return new DocumentReference<U>(this._key, this.firestore, converter);\n  }\n\n  /**\n   * Converts a ViewSnapshot that contains the current document to a\n   * DocumentSnapshot.\n   */\n  private _convertToDocSnapshot(snapshot: ViewSnapshot): DocumentSnapshot<T> {\n    debugAssert(\n      snapshot.docs.size <= 1,\n      'Too many documents returned on a document query'\n    );\n    const doc = snapshot.docs.get(this._key);\n\n    return new DocumentSnapshot(\n      this.firestore,\n      this._key,\n      doc,\n      snapshot.fromCache,\n      snapshot.hasPendingWrites,\n      this._converter\n    );\n  }\n}\n\nexport class SnapshotMetadata implements firestore.SnapshotMetadata {\n  constructor(\n    readonly hasPendingWrites: boolean,\n    readonly fromCache: boolean\n  ) {}\n\n  isEqual(other: firestore.SnapshotMetadata): boolean {\n    return (\n      this.hasPendingWrites === other.hasPendingWrites &&\n      this.fromCache === other.fromCache\n    );\n  }\n}\n\n/**\n * Options interface that can be provided to configure the deserialization of\n * DocumentSnapshots.\n */\nexport interface SnapshotOptions extends firestore.SnapshotOptions {}\n\nexport class DocumentSnapshot<T = firestore.DocumentData>\n  implements firestore.DocumentSnapshot<T> {\n  constructor(\n    private _firestore: Firestore,\n    private _key: DocumentKey,\n    public _document: Document | null,\n    private _fromCache: boolean,\n    private _hasPendingWrites: boolean,\n    private readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {}\n\n  data(options?: firestore.SnapshotOptions): T | undefined {\n    validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);\n    options = validateSnapshotOptions('DocumentSnapshot.data', options);\n    if (!this._document) {\n      return undefined;\n    } else {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      if (this._converter) {\n        const snapshot = new QueryDocumentSnapshot(\n          this._firestore,\n          this._key,\n          this._document,\n          this._fromCache,\n          this._hasPendingWrites,\n          /* converter= */ null\n        );\n        return this._converter.fromFirestore(snapshot, options);\n      } else {\n        const userDataWriter = new UserDataWriter(\n          this._firestore._databaseId,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps || 'none',\n          key =>\n            new DocumentReference(key, this._firestore, /* converter= */ null)\n        );\n        return userDataWriter.convertValue(this._document.toProto()) as T;\n      }\n    }\n  }\n\n  get(\n    fieldPath: string | ExternalFieldPath,\n    options?: firestore.SnapshotOptions\n  ): unknown {\n    validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);\n    options = validateSnapshotOptions('DocumentSnapshot.get', options);\n    if (this._document) {\n      const value = this._document\n        .data()\n        .field(\n          fieldPathFromArgument('DocumentSnapshot.get', fieldPath, this._key)\n        );\n      if (value !== null) {\n        const userDataWriter = new UserDataWriter(\n          this._firestore._databaseId,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps || 'none',\n          key => new DocumentReference(key, this._firestore, this._converter)\n        );\n        return userDataWriter.convertValue(value);\n      }\n    }\n    return undefined;\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get ref(): firestore.DocumentReference<T> {\n    return new DocumentReference<T>(\n      this._key,\n      this._firestore,\n      this._converter\n    );\n  }\n\n  get exists(): boolean {\n    return this._document !== null;\n  }\n\n  get metadata(): firestore.SnapshotMetadata {\n    return new SnapshotMetadata(this._hasPendingWrites, this._fromCache);\n  }\n\n  isEqual(other: firestore.DocumentSnapshot<T>): boolean {\n    if (!(other instanceof DocumentSnapshot)) {\n      throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);\n    }\n    return (\n      this._firestore === other._firestore &&\n      this._fromCache === other._fromCache &&\n      this._key.isEqual(other._key) &&\n      (this._document === null\n        ? other._document === null\n        : this._document.isEqual(other._document)) &&\n      this._converter === other._converter\n    );\n  }\n}\n\nexport class QueryDocumentSnapshot<T = firestore.DocumentData>\n  extends DocumentSnapshot<T>\n  implements firestore.QueryDocumentSnapshot<T> {\n  data(options?: SnapshotOptions): T {\n    const data = super.data(options);\n    debugAssert(\n      data !== undefined,\n      'Document in a QueryDocumentSnapshot should exist'\n    );\n    return data;\n  }\n}\n\nexport function newQueryFilter(\n  query: InternalQuery,\n  methodName: string,\n  dataReader: UserDataReader,\n  databaseId: DatabaseId,\n  fieldPath: FieldPath,\n  op: Operator,\n  value: unknown\n): FieldFilter {\n  let fieldValue: api.Value;\n  if (fieldPath.isKeyField()) {\n    if (op === Operator.ARRAY_CONTAINS || op === Operator.ARRAY_CONTAINS_ANY) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. You can't perform '${op}' ` +\n          'queries on FieldPath.documentId().'\n      );\n    } else if (op === Operator.IN || op === Operator.NOT_IN) {\n      validateDisjunctiveFilterElements(value, op);\n      const referenceList: api.Value[] = [];\n      for (const arrayValue of value as api.Value[]) {\n        referenceList.push(parseDocumentIdValue(databaseId, query, arrayValue));\n      }\n      fieldValue = { arrayValue: { values: referenceList } };\n    } else {\n      fieldValue = parseDocumentIdValue(databaseId, query, value);\n    }\n  } else {\n    if (\n      op === Operator.IN ||\n      op === Operator.NOT_IN ||\n      op === Operator.ARRAY_CONTAINS_ANY\n    ) {\n      validateDisjunctiveFilterElements(value, op);\n    }\n    fieldValue = parseQueryValue(\n      dataReader,\n      methodName,\n      value,\n      /* allowArrays= */ op === Operator.IN || op === Operator.NOT_IN\n    );\n  }\n  const filter = FieldFilter.create(fieldPath, op, fieldValue);\n  validateNewFilter(query, filter);\n  return filter;\n}\n\nexport function newQueryOrderBy(\n  query: InternalQuery,\n  fieldPath: FieldPath,\n  direction: Direction\n): OrderBy {\n  if (query.startAt !== null) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid query. You must not call startAt() or startAfter() before ' +\n        'calling orderBy().'\n    );\n  }\n  if (query.endAt !== null) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid query. You must not call endAt() or endBefore() before ' +\n        'calling orderBy().'\n    );\n  }\n  const orderBy = new OrderBy(fieldPath, direction);\n  validateNewOrderBy(query, orderBy);\n  return orderBy;\n}\n\n/**\n * Create a Bound from a query and a document.\n *\n * Note that the Bound will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */\nexport function newQueryBoundFromDocument(\n  query: InternalQuery,\n  databaseId: DatabaseId,\n  methodName: string,\n  doc: Document | null,\n  before: boolean\n): Bound {\n  if (!doc) {\n    throw new FirestoreError(\n      Code.NOT_FOUND,\n      `Can't use a DocumentSnapshot that doesn't exist for ` +\n        `${methodName}().`\n    );\n  }\n\n  const components: api.Value[] = [];\n\n  // Because people expect to continue/end a query at the exact document\n  // provided, we need to use the implicit sort order rather than the explicit\n  // sort order, because it's guaranteed to contain the document key. That way\n  // the position becomes unambiguous and the query continues/ends exactly at\n  // the provided document. Without the key (by using the explicit sort\n  // orders), multiple documents could match the position, yielding duplicate\n  // results.\n  for (const orderBy of queryOrderBy(query)) {\n    if (orderBy.field.isKeyField()) {\n      components.push(refValue(databaseId, doc.key));\n    } else {\n      const value = doc.field(orderBy.field);\n      if (isServerTimestamp(value)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. You are trying to start or end a query using a ' +\n            'document for which the field \"' +\n            orderBy.field +\n            '\" is an uncommitted server timestamp. (Since the value of ' +\n            'this field is unknown, you cannot start/end a query with it.)'\n        );\n      } else if (value !== null) {\n        components.push(value);\n      } else {\n        const field = orderBy.field.canonicalString();\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. You are trying to start or end a query using a ` +\n            `document for which the field '${field}' (used as the ` +\n            `orderBy) does not exist.`\n        );\n      }\n    }\n  }\n  return new Bound(components, before);\n}\n\n/**\n * Converts a list of field values to a Bound for the given query.\n */\nexport function newQueryBoundFromFields(\n  query: InternalQuery,\n  databaseId: DatabaseId,\n  dataReader: UserDataReader,\n  methodName: string,\n  values: unknown[],\n  before: boolean\n): Bound {\n  // Use explicit order by's because it has to match the query the user made\n  const orderBy = query.explicitOrderBy;\n  if (values.length > orderBy.length) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Too many arguments provided to ${methodName}(). ` +\n        `The number of arguments must be less than or equal to the ` +\n        `number of orderBy() clauses`\n    );\n  }\n\n  const components: api.Value[] = [];\n  for (let i = 0; i < values.length; i++) {\n    const rawValue = values[i];\n    const orderByComponent = orderBy[i];\n    if (orderByComponent.field.isKeyField()) {\n      if (typeof rawValue !== 'string') {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. Expected a string for document ID in ` +\n            `${methodName}(), but got a ${typeof rawValue}`\n        );\n      }\n      if (!isCollectionGroupQuery(query) && rawValue.indexOf('/') !== -1) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection and ordering by FieldPath.documentId(), ` +\n            `the value passed to ${methodName}() must be a plain document ID, but ` +\n            `'${rawValue}' contains a slash.`\n        );\n      }\n      const path = query.path.child(ResourcePath.fromString(rawValue));\n      if (!DocumentKey.isDocumentKey(path)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection group and ordering by ` +\n            `FieldPath.documentId(), the value passed to ${methodName}() must result in a ` +\n            `valid document path, but '${path}' is not because it contains an odd number ` +\n            `of segments.`\n        );\n      }\n      const key = new DocumentKey(path);\n      components.push(refValue(databaseId, key));\n    } else {\n      const wrapped = parseQueryValue(dataReader, methodName, rawValue);\n      components.push(wrapped);\n    }\n  }\n\n  return new Bound(components, before);\n}\n\n/**\n * Parses the given documentIdValue into a ReferenceValue, throwing\n * appropriate errors if the value is anything other than a DocumentReference\n * or String, or if the string is malformed.\n */\nfunction parseDocumentIdValue(\n  databaseId: DatabaseId,\n  query: InternalQuery,\n  documentIdValue: unknown\n): api.Value {\n  if (typeof documentIdValue === 'string') {\n    if (documentIdValue === '') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. When querying with FieldPath.documentId(), you ' +\n          'must provide a valid document ID, but it was an empty string.'\n      );\n    }\n    if (!isCollectionGroupQuery(query) && documentIdValue.indexOf('/') !== -1) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying a collection by ` +\n          `FieldPath.documentId(), you must provide a plain document ID, but ` +\n          `'${documentIdValue}' contains a '/' character.`\n      );\n    }\n    const path = query.path.child(ResourcePath.fromString(documentIdValue));\n    if (!DocumentKey.isDocumentKey(path)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying a collection group by ` +\n          `FieldPath.documentId(), the value provided must result in a valid document path, ` +\n          `but '${path}' is not because it has an odd number of segments (${path.length}).`\n      );\n    }\n    return refValue(databaseId, new DocumentKey(path));\n  } else if (documentIdValue instanceof DocumentKeyReference) {\n    return refValue(databaseId, documentIdValue._key);\n  } else {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid query. When querying with FieldPath.documentId(), you must provide a valid ` +\n        `string or a DocumentReference, but it was: ` +\n        `${valueDescription(documentIdValue)}.`\n    );\n  }\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */\nfunction validateDisjunctiveFilterElements(\n  value: unknown,\n  operator: Operator\n): void {\n  if (!Array.isArray(value) || value.length === 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid Query. A non-empty array is required for ' +\n        `'${operator.toString()}' filters.`\n    );\n  }\n  if (value.length > 10) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid Query. '${operator.toString()}' filters support a ` +\n        'maximum of 10 elements in the value array.'\n    );\n  }\n  if (operator === Operator.IN || operator === Operator.ARRAY_CONTAINS_ANY) {\n    if (value.indexOf(null) >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters cannot contain 'null' ` +\n          'in the value array.'\n      );\n    }\n    if (value.filter(element => Number.isNaN(element)).length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters cannot contain 'NaN' ` +\n          'in the value array.'\n      );\n    }\n  }\n}\n\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one array operator is allowed.\n * 2. Only one disjunctive operator is allowed.\n * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.\n * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.\n *\n * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY\n * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN\n */\nfunction conflictingOps(op: Operator): Operator[] {\n  switch (op) {\n    case Operator.NOT_EQUAL:\n      return [Operator.NOT_EQUAL, Operator.NOT_IN];\n    case Operator.ARRAY_CONTAINS:\n      return [\n        Operator.ARRAY_CONTAINS,\n        Operator.ARRAY_CONTAINS_ANY,\n        Operator.NOT_IN\n      ];\n    case Operator.IN:\n      return [Operator.ARRAY_CONTAINS_ANY, Operator.IN, Operator.NOT_IN];\n    case Operator.ARRAY_CONTAINS_ANY:\n      return [\n        Operator.ARRAY_CONTAINS,\n        Operator.ARRAY_CONTAINS_ANY,\n        Operator.IN,\n        Operator.NOT_IN\n      ];\n    case Operator.NOT_IN:\n      return [\n        Operator.ARRAY_CONTAINS,\n        Operator.ARRAY_CONTAINS_ANY,\n        Operator.IN,\n        Operator.NOT_IN,\n        Operator.NOT_EQUAL\n      ];\n    default:\n      return [];\n  }\n}\n\nfunction validateNewFilter(query: InternalQuery, filter: Filter): void {\n  debugAssert(filter instanceof FieldFilter, 'Only FieldFilters are supported');\n\n  if (filter.isInequality()) {\n    const existingField = query.getInequalityFilterField();\n    if (existingField !== null && !existingField.isEqual(filter.field)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. All where filters with an inequality' +\n          ' (<, <=, >, or >=) must be on the same field. But you have' +\n          ` inequality filters on '${existingField.toString()}'` +\n          ` and '${filter.field.toString()}'`\n      );\n    }\n\n    const firstOrderByField = query.getFirstOrderByField();\n    if (firstOrderByField !== null) {\n      validateOrderByAndInequalityMatch(query, filter.field, firstOrderByField);\n    }\n  }\n\n  const conflictingOp = query.findFilterOperator(conflictingOps(filter.op));\n  if (conflictingOp !== null) {\n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    if (conflictingOp === filter.op) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You cannot use more than one ' +\n          `'${filter.op.toString()}' filter.`\n      );\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. You cannot use '${filter.op.toString()}' filters ` +\n          `with '${conflictingOp.toString()}' filters.`\n      );\n    }\n  }\n}\n\nfunction validateNewOrderBy(query: InternalQuery, orderBy: OrderBy): void {\n  if (query.getFirstOrderByField() === null) {\n    // This is the first order by. It must match any inequality.\n    const inequalityField = query.getInequalityFilterField();\n    if (inequalityField !== null) {\n      validateOrderByAndInequalityMatch(query, inequalityField, orderBy.field);\n    }\n  }\n}\n\nfunction validateOrderByAndInequalityMatch(\n  baseQuery: InternalQuery,\n  inequality: FieldPath,\n  orderBy: FieldPath\n): void {\n  if (!orderBy.isEqual(inequality)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid query. You have a where filter with an inequality ` +\n        `(<, <=, >, or >=) on field '${inequality.toString()}' ` +\n        `and so you must also use '${inequality.toString()}' ` +\n        `as your first orderBy(), but your first orderBy() ` +\n        `is on field '${orderBy.toString()}' instead.`\n    );\n  }\n}\n\nexport function validateHasExplicitOrderByForLimitToLast(\n  query: InternalQuery\n): void {\n  if (query.hasLimitToLast() && query.explicitOrderBy.length === 0) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'limitToLast() queries require specifying at least one orderBy() clause'\n    );\n  }\n}\n\nexport class Query<T = firestore.DocumentData> implements firestore.Query<T> {\n  constructor(\n    public _query: InternalQuery,\n    readonly firestore: Firestore,\n    protected readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {}\n\n  where(\n    field: string | ExternalFieldPath,\n    opStr: firestore.WhereFilterOp,\n    value: unknown\n  ): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.where', arguments, 3);\n    validateDefined('Query.where', 3, value);\n\n    // TODO(ne-queries): Add 'not-in' and '!=' to validation.\n    let op: Operator;\n    if ((opStr as unknown) === 'not-in' || (opStr as unknown) === '!=') {\n      op = opStr as Operator;\n    } else {\n      // Enumerated from the WhereFilterOp type in index.d.ts.\n      const whereFilterOpEnums = [\n        Operator.LESS_THAN,\n        Operator.LESS_THAN_OR_EQUAL,\n        Operator.EQUAL,\n        Operator.GREATER_THAN_OR_EQUAL,\n        Operator.GREATER_THAN,\n        Operator.ARRAY_CONTAINS,\n        Operator.IN,\n        Operator.ARRAY_CONTAINS_ANY\n      ];\n      op = validateStringEnum('Query.where', whereFilterOpEnums, 2, opStr);\n    }\n\n    const fieldPath = fieldPathFromArgument('Query.where', field);\n    const filter = newQueryFilter(\n      this._query,\n      'Query.where',\n      this.firestore._dataReader,\n      this.firestore._databaseId,\n      fieldPath,\n      op,\n      value\n    );\n    return new Query(\n      queryWithAddedFilter(this._query, filter),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  orderBy(\n    field: string | ExternalFieldPath,\n    directionStr?: firestore.OrderByDirection\n  ): firestore.Query<T> {\n    validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n    validateOptionalArgType(\n      'Query.orderBy',\n      'non-empty string',\n      2,\n      directionStr\n    );\n    let direction: Direction;\n    if (directionStr === undefined || directionStr === 'asc') {\n      direction = Direction.ASCENDING;\n    } else if (directionStr === 'desc') {\n      direction = Direction.DESCENDING;\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function Query.orderBy() has unknown direction '${directionStr}', ` +\n          `expected 'asc' or 'desc'.`\n      );\n    }\n    const fieldPath = fieldPathFromArgument('Query.orderBy', field);\n    const orderBy = newQueryOrderBy(this._query, fieldPath, direction);\n    return new Query(\n      queryWithAddedOrderBy(this._query, orderBy),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limit(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limit', arguments, 1);\n    validateArgType('Query.limit', 'number', 1, n);\n    validatePositiveNumber('Query.limit', 1, n);\n    return new Query(\n      queryWithLimit(this._query, n, LimitType.First),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limitToLast(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limitToLast', arguments, 1);\n    validateArgType('Query.limitToLast', 'number', 1, n);\n    validatePositiveNumber('Query.limitToLast', 1, n);\n    return new Query(\n      queryWithLimit(this._query, n, LimitType.Last),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAt',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      queryWithStartAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAfter(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAfter',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      queryWithStartAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endBefore(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endBefore',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      queryWithEndAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endAt',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      queryWithEndAt(this._query, bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  isEqual(other: firestore.Query<T>): boolean {\n    if (!(other instanceof Query)) {\n      throw invalidClassError('isEqual', 'Query', 1, other);\n    }\n    return (\n      this.firestore === other.firestore &&\n      queryEquals(this._query, other._query) &&\n      this._converter === other._converter\n    );\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.Query<U> {\n    return new Query<U>(this._query, this.firestore, converter);\n  }\n\n  /** Helper function to create a bound from a document or fields */\n  private boundFromDocOrFields(\n    methodName: string,\n    docOrField: unknown | firestore.DocumentSnapshot<T>,\n    fields: unknown[],\n    before: boolean\n  ): Bound {\n    validateDefined(methodName, 1, docOrField);\n    if (docOrField instanceof DocumentSnapshot) {\n      validateExactNumberOfArgs(methodName, [docOrField, ...fields], 1);\n      return newQueryBoundFromDocument(\n        this._query,\n        this.firestore._databaseId,\n        methodName,\n        docOrField._document,\n        before\n      );\n    } else {\n      const allFields = [docOrField].concat(fields);\n      return newQueryBoundFromFields(\n        this._query,\n        this.firestore._databaseId,\n        this.firestore._dataReader,\n        methodName,\n        allFields,\n        before\n      );\n    }\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n    let options: ListenOptions = {};\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('Query.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'Query.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    if (isPartialObserver(args[currArg])) {\n      const userObserver = args[currArg] as PartialObserver<\n        firestore.QuerySnapshot<T>\n      >;\n      args[currArg] = userObserver.next?.bind(userObserver);\n      args[currArg + 1] = userObserver.error?.bind(userObserver);\n      args[currArg + 2] = userObserver.complete?.bind(userObserver);\n    } else {\n      validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n    }\n\n    const observer: PartialObserver<ViewSnapshot> = {\n      next: snapshot => {\n        if (args[currArg]) {\n          (args[currArg] as NextFn<firestore.QuerySnapshot<T>>)(\n            new QuerySnapshot(\n              this.firestore,\n              this._query,\n              snapshot,\n              this._converter\n            )\n          );\n        }\n      },\n      error: args[currArg + 1] as ErrorFn,\n      complete: args[currArg + 2] as CompleteFn\n    };\n\n    validateHasExplicitOrderByForLimitToLast(this._query);\n    const firestoreClient = this.firestore.ensureClientConfigured();\n    return firestoreClient.listen(this._query, options, observer);\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.QuerySnapshot<T>> {\n    validateBetweenNumberOfArgs('Query.get', arguments, 0, 1);\n    validateGetOptions('Query.get', options);\n    validateHasExplicitOrderByForLimitToLast(this._query);\n\n    const firestoreClient = this.firestore.ensureClientConfigured();\n    return (options && options.source === 'cache'\n      ? firestoreClient.getDocumentsFromLocalCache(this._query)\n      : firestoreClient.getDocumentsViaSnapshotListener(this._query, options)\n    ).then(\n      snap =>\n        new QuerySnapshot(this.firestore, this._query, snap, this._converter)\n    );\n  }\n}\n\nexport class QuerySnapshot<T = firestore.DocumentData>\n  implements firestore.QuerySnapshot<T> {\n  private _cachedChanges: Array<firestore.DocumentChange<T>> | null = null;\n  private _cachedChangesIncludeMetadataChanges: boolean | null = null;\n\n  readonly metadata: firestore.SnapshotMetadata;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    private readonly _originalQuery: InternalQuery,\n    private readonly _snapshot: ViewSnapshot,\n    private readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    this.metadata = new SnapshotMetadata(\n      _snapshot.hasPendingWrites,\n      _snapshot.fromCache\n    );\n  }\n\n  get docs(): Array<firestore.QueryDocumentSnapshot<T>> {\n    const result: Array<firestore.QueryDocumentSnapshot<T>> = [];\n    this.forEach(doc => result.push(doc));\n    return result;\n  }\n\n  get empty(): boolean {\n    return this._snapshot.docs.isEmpty();\n  }\n\n  get size(): number {\n    return this._snapshot.docs.size;\n  }\n\n  forEach(\n    callback: (result: firestore.QueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n    validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n    this._snapshot.docs.forEach(doc => {\n      callback.call(\n        thisArg,\n        this.convertToDocumentImpl(\n          doc,\n          this.metadata.fromCache,\n          this._snapshot.mutatedKeys.has(doc.key)\n        )\n      );\n    });\n  }\n\n  get query(): firestore.Query<T> {\n    return new Query(this._originalQuery, this._firestore, this._converter);\n  }\n\n  docChanges(\n    options?: firestore.SnapshotListenOptions\n  ): Array<firestore.DocumentChange<T>> {\n    if (options) {\n      validateOptionNames('QuerySnapshot.docChanges', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'QuerySnapshot.docChanges',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n    }\n\n    const includeMetadataChanges = !!(\n      options && options.includeMetadataChanges\n    );\n\n    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'To include metadata changes with your document changes, you must ' +\n          'also pass { includeMetadataChanges:true } to onSnapshot().'\n      );\n    }\n\n    if (\n      !this._cachedChanges ||\n      this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges\n    ) {\n      this._cachedChanges = changesFromSnapshot<QueryDocumentSnapshot<T>>(\n        this._snapshot,\n        includeMetadataChanges,\n        this.convertToDocumentImpl.bind(this)\n      );\n      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\n    }\n\n    return this._cachedChanges;\n  }\n\n  /** Check the equality. The call can be very expensive. */\n  isEqual(other: firestore.QuerySnapshot<T>): boolean {\n    if (!(other instanceof QuerySnapshot)) {\n      throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);\n    }\n\n    return (\n      this._firestore === other._firestore &&\n      queryEquals(this._originalQuery, other._originalQuery) &&\n      this._snapshot.isEqual(other._snapshot) &&\n      this._converter === other._converter\n    );\n  }\n\n  private convertToDocumentImpl(\n    doc: Document,\n    fromCache: boolean,\n    hasPendingWrites: boolean\n  ): QueryDocumentSnapshot<T> {\n    return new QueryDocumentSnapshot(\n      this._firestore,\n      doc.key,\n      doc,\n      fromCache,\n      hasPendingWrites,\n      this._converter\n    );\n  }\n}\n\nexport class CollectionReference<T = firestore.DocumentData> extends Query<T>\n  implements firestore.CollectionReference<T> {\n  constructor(\n    readonly _path: ResourcePath,\n    firestore: Firestore,\n    _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    super(newQueryForPath(_path), firestore, _converter);\n    if (_path.length % 2 !== 1) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid collection reference. Collection ' +\n          'references must have an odd number of segments, but ' +\n          `${_path.canonicalString()} has ${_path.length}`\n      );\n    }\n  }\n\n  get id(): string {\n    return this._query.path.lastSegment();\n  }\n\n  get parent(): firestore.DocumentReference<firestore.DocumentData> | null {\n    const parentPath = this._query.path.popLast();\n    if (parentPath.isEmpty()) {\n      return null;\n    } else {\n      return new DocumentReference<firestore.DocumentData>(\n        new DocumentKey(parentPath),\n        this.firestore,\n        /* converter= */ null\n      );\n    }\n  }\n\n  get path(): string {\n    return this._query.path.canonicalString();\n  }\n\n  doc(pathString?: string): firestore.DocumentReference<T> {\n    validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    if (arguments.length === 0) {\n      pathString = AutoId.newId();\n    }\n    validateArgType(\n      'CollectionReference.doc',\n      'non-empty string',\n      1,\n      pathString\n    );\n    const path = ResourcePath.fromString(pathString!);\n    return DocumentReference.forPath<T>(\n      this._query.path.child(path),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  add(value: T): Promise<firestore.DocumentReference<T>> {\n    validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n    const convertedValue = this._converter\n      ? this._converter.toFirestore(value)\n      : value;\n    validateArgType('CollectionReference.add', 'object', 1, convertedValue);\n    const docRef = this.doc();\n    return docRef.set(value).then(() => docRef);\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.CollectionReference<U> {\n    return new CollectionReference<U>(this._path, this.firestore, converter);\n  }\n}\n\nfunction validateSetOptions(\n  methodName: string,\n  options: firestore.SetOptions | undefined\n): firestore.SetOptions {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  validateOptionNames(methodName, options, ['merge', 'mergeFields']);\n  validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n  validateOptionalArrayElements(\n    methodName,\n    'mergeFields',\n    'a string or a FieldPath',\n    options.mergeFields,\n    element =>\n      typeof element === 'string' || element instanceof ExternalFieldPath\n  );\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid options passed to function ${methodName}(): You cannot specify both \"merge\" ` +\n        `and \"mergeFields\".`\n    );\n  }\n\n  return options;\n}\n\nfunction validateSnapshotOptions(\n  methodName: string,\n  options: firestore.SnapshotOptions | undefined\n): firestore.SnapshotOptions {\n  if (options === undefined) {\n    return {};\n  }\n\n  validateOptionNames(methodName, options, ['serverTimestamps']);\n  validateNamedOptionalPropertyEquals(\n    methodName,\n    'options',\n    'serverTimestamps',\n    options.serverTimestamps,\n    ['estimate', 'previous', 'none']\n  );\n  return options;\n}\n\nfunction validateGetOptions(\n  methodName: string,\n  options: firestore.GetOptions | undefined\n): void {\n  validateOptionalArgType(methodName, 'object', 1, options);\n  if (options) {\n    validateOptionNames(methodName, options, ['source']);\n    validateNamedOptionalPropertyEquals(\n      methodName,\n      'options',\n      'source',\n      options.source,\n      ['default', 'server', 'cache']\n    );\n  }\n}\n\nfunction validateReference<T>(\n  methodName: string,\n  documentRef: firestore.DocumentReference<T>,\n  firestore: Firestore\n): DocumentKeyReference<T> {\n  if (!(documentRef instanceof DocumentKeyReference)) {\n    throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n  } else if (documentRef.firestore !== firestore) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Provided document reference is from a different Firestore instance.'\n    );\n  } else {\n    return documentRef;\n  }\n}\n\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n *\n * @param snapshot The ViewSnapshot that represents the expected state.\n * @param includeMetadataChanges Whether to include metadata changes.\n * @param converter A factory function that returns a QueryDocumentSnapshot.\n * @return An objecyt that matches the firestore.DocumentChange API.\n */\nexport function changesFromSnapshot<DocSnap>(\n  snapshot: ViewSnapshot,\n  includeMetadataChanges: boolean,\n  converter: (\n    doc: Document,\n    fromCache: boolean,\n    hasPendingWrite: boolean\n  ) => DocSnap\n): Array<{\n  type: firestore.DocumentChangeType;\n  doc: DocSnap;\n  oldIndex: number;\n  newIndex: number;\n}> {\n  if (snapshot.oldDocs.isEmpty()) {\n    // Special case the first snapshot because index calculation is easy and\n    // fast\n    let lastDoc: Document;\n    let index = 0;\n    return snapshot.docChanges.map(change => {\n      const doc = converter(\n        change.doc,\n        snapshot.fromCache,\n        snapshot.mutatedKeys.has(change.doc.key)\n      );\n      debugAssert(\n        change.type === ChangeType.Added,\n        'Invalid event type for first snapshot'\n      );\n      debugAssert(\n        !lastDoc || newQueryComparator(snapshot.query)(lastDoc, change.doc) < 0,\n        'Got added events in wrong order'\n      );\n      lastDoc = change.doc;\n      return {\n        type: 'added' as firestore.DocumentChangeType,\n        doc,\n        oldIndex: -1,\n        newIndex: index++\n      };\n    });\n  } else {\n    // A DocumentSet that is updated incrementally as changes are applied to use\n    // to lookup the index of a document.\n    let indexTracker = snapshot.oldDocs;\n    return snapshot.docChanges\n      .filter(\n        change => includeMetadataChanges || change.type !== ChangeType.Metadata\n      )\n      .map(change => {\n        const doc = converter(\n          change.doc,\n          snapshot.fromCache,\n          snapshot.mutatedKeys.has(change.doc.key)\n        );\n        let oldIndex = -1;\n        let newIndex = -1;\n        if (change.type !== ChangeType.Added) {\n          oldIndex = indexTracker.indexOf(change.doc.key);\n          debugAssert(oldIndex >= 0, 'Index for document not found');\n          indexTracker = indexTracker.delete(change.doc.key);\n        }\n        if (change.type !== ChangeType.Removed) {\n          indexTracker = indexTracker.add(change.doc);\n          newIndex = indexTracker.indexOf(change.doc.key);\n        }\n        return { type: resultChangeType(change.type), doc, oldIndex, newIndex };\n      });\n  }\n}\n\nfunction resultChangeType(type: ChangeType): firestore.DocumentChangeType {\n  switch (type) {\n    case ChangeType.Added:\n      return 'added';\n    case ChangeType.Modified:\n    case ChangeType.Metadata:\n      return 'modified';\n    case ChangeType.Removed:\n      return 'removed';\n    default:\n      return fail('Unknown change type: ' + type);\n  }\n}\n\n/**\n * Converts custom model object of type T into DocumentData by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to DocumentData\n * because we want to provide the user with a more specific error message if\n * their set() or fails due to invalid data originating from a toFirestore()\n * call.\n */\nexport function applyFirestoreDataConverter<T>(\n  converter: UntypedFirestoreDataConverter<T> | null,\n  value: T,\n  options?: firestore.SetOptions\n): firestore.DocumentData {\n  let convertedValue;\n  if (converter) {\n    if (options && (options.merge || options.mergeFields)) {\n      // Cast to `any` in order to satisfy the union type constraint on\n      // toFirestore().\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      convertedValue = (converter as any).toFirestore(value, options);\n    } else {\n      convertedValue = converter.toFirestore(value);\n    }\n  } else {\n    convertedValue = value as firestore.DocumentData;\n  }\n  return convertedValue;\n}\n\nfunction contains(obj: object, key: string): obj is { key: unknown } {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '../../../lite-types';\n\nimport { Document } from '../../../src/model/document';\nimport { DocumentKey } from '../../../src/model/document_key';\nimport { Firestore } from './database';\nimport {\n  DocumentKeyReference,\n  ParsedUpdateData,\n  parseSetData,\n  parseUpdateData,\n  parseUpdateVarargs,\n  UserDataReader\n} from '../../../src/api/user_data_reader';\nimport {\n  Bound,\n  Direction,\n  LimitType,\n  newQueryForCollectionGroup,\n  newQueryForPath,\n  Operator,\n  Query as InternalQuery,\n  queryEquals,\n  queryWithAddedFilter,\n  queryWithAddedOrderBy,\n  queryWithEndAt,\n  queryWithLimit,\n  queryWithStartAt\n} from '../../../src/core/query';\nimport {\n  FieldPath as InternalFieldPath,\n  ResourcePath\n} from '../../../src/model/path';\nimport { AutoId } from '../../../src/util/misc';\nimport {\n  DocumentSnapshot,\n  fieldPathFromArgument,\n  QueryDocumentSnapshot,\n  QuerySnapshot\n} from './snapshot';\nimport {\n  invokeBatchGetDocumentsRpc,\n  invokeCommitRpc,\n  invokeRunQueryRpc\n} from '../../../src/remote/datastore';\nimport { hardAssert } from '../../../src/util/assert';\nimport { DeleteMutation, Precondition } from '../../../src/model/mutation';\nimport {\n  applyFirestoreDataConverter,\n  newQueryBoundFromDocument,\n  newQueryBoundFromFields,\n  newQueryFilter,\n  newQueryOrderBy,\n  validateHasExplicitOrderByForLimitToLast\n} from '../../../src/api/database';\nimport { FieldPath } from './field_path';\nimport { cast } from './util';\nimport {\n  validateArgType,\n  validateCollectionPath,\n  validateDocumentPath,\n  validateExactNumberOfArgs,\n  validatePositiveNumber\n} from '../../../src/util/input_validation';\nimport { newSerializer } from '../../../src/platform/serializer';\nimport { FieldPath as ExternalFieldPath } from '../../../src/api/field_path';\nimport { Code, FirestoreError } from '../../../src/util/error';\nimport { getDatastore } from './components';\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = firestore.DocumentData>\n  extends DocumentKeyReference<T>\n  implements firestore.DocumentReference<T> {\n  readonly type = 'document';\n\n  constructor(\n    readonly firestore: Firestore,\n    readonly converter: firestore.FirestoreDataConverter<T> | null,\n    readonly _path: ResourcePath\n  ) {\n    super(firestore._databaseId, new DocumentKey(_path), converter);\n  }\n\n  get id(): string {\n    return this._path.lastSegment();\n  }\n\n  get path(): string {\n    return this._path.canonicalString();\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.DocumentReference<U> {\n    return new DocumentReference<U>(this.firestore, converter, this._path);\n  }\n}\n\nexport class Query<T = firestore.DocumentData> implements firestore.Query<T> {\n  readonly type: 'query' | 'collection' = 'query';\n\n  // This is the lite version of the Query class in the main SDK.\n  constructor(\n    readonly firestore: Firestore,\n    readonly converter: firestore.FirestoreDataConverter<T> | null,\n    readonly _query: InternalQuery\n  ) {}\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.Query<U> {\n    return new Query<U>(this.firestore, converter, this._query);\n  }\n}\n\nexport abstract class QueryConstraint implements firestore.QueryConstraint {\n  abstract readonly type: firestore.QueryConstraintType;\n\n  /**\n   * Takes the provided Query and returns a copy of the Query with this\n   * QueryConstraint applied.\n   */\n  abstract apply<T>(query: Query<T>): Query<T>;\n}\n\nexport function query<T>(\n  query: firestore.Query<T>,\n  ...queryConstraints: QueryConstraint[]\n): Query<T> {\n  let queryImpl = cast<Query<T>>(query, Query);\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint.apply(queryImpl);\n  }\n  return queryImpl;\n}\n\nclass QueryFilterConstraint extends QueryConstraint {\n  readonly type = 'where';\n\n  constructor(\n    private readonly _field: InternalFieldPath,\n    private _op: Operator,\n    private _value: unknown\n  ) {\n    super();\n  }\n\n  apply<T>(query: Query<T>): Query<T> {\n    const reader = newUserDataReader(query.firestore);\n    const filter = newQueryFilter(\n      query._query,\n      'where',\n      reader,\n      query.firestore._databaseId,\n      this._field,\n      this._op,\n      this._value\n    );\n    return new Query(\n      query.firestore,\n      query.converter,\n      queryWithAddedFilter(query._query, filter)\n    );\n  }\n}\n\nexport function where(\n  fieldPath: string | firestore.FieldPath,\n  opStr: firestore.WhereFilterOp,\n  value: unknown\n): QueryConstraint {\n  // TODO(firestorelite): Consider validating the enum strings (note that\n  // TypeScript does not support passing invalid values).\n  const op = opStr as Operator;\n  const field = fieldPathFromArgument('where', fieldPath);\n  return new QueryFilterConstraint(field, op, value);\n}\n\nclass QueryOrderByConstraint extends QueryConstraint {\n  readonly type = 'orderBy';\n\n  constructor(\n    private readonly _field: InternalFieldPath,\n    private _direction: Direction\n  ) {\n    super();\n  }\n\n  apply<T>(query: Query<T>): Query<T> {\n    const orderBy = newQueryOrderBy(query._query, this._field, this._direction);\n    return new Query(\n      query.firestore,\n      query.converter,\n      queryWithAddedOrderBy(query._query, orderBy)\n    );\n  }\n}\n\nexport function orderBy(\n  field: string | ExternalFieldPath,\n  directionStr: firestore.OrderByDirection = 'asc'\n): QueryConstraint {\n  // TODO(firestorelite): Consider validating the enum strings (note that\n  // TypeScript does not support passing invalid values).\n  const direction = directionStr as Direction;\n  const fieldPath = fieldPathFromArgument('orderBy', field);\n  return new QueryOrderByConstraint(fieldPath, direction);\n}\n\nclass QueryLimitConstraint extends QueryConstraint {\n  constructor(\n    readonly type: 'limit' | 'limitToLast',\n    private readonly _limit: number,\n    private readonly _limitType: LimitType\n  ) {\n    super();\n  }\n\n  apply<T>(query: Query<T>): Query<T> {\n    return new Query(\n      query.firestore,\n      query.converter,\n      queryWithLimit(query._query, this._limit, this._limitType)\n    );\n  }\n}\n\nexport function limit(n: number): QueryConstraint {\n  validatePositiveNumber('limit', 1, n);\n  return new QueryLimitConstraint('limit', n, LimitType.First);\n}\n\nexport function limitToLast(n: number): QueryConstraint {\n  validatePositiveNumber('limitToLast', 1, n);\n  return new QueryLimitConstraint('limitToLast', n, LimitType.Last);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  constructor(\n    readonly type: 'startAt' | 'startAfter',\n    private readonly _docOrFields: Array<\n      unknown | firestore.DocumentSnapshot<unknown>\n    >,\n    private readonly _before: boolean\n  ) {\n    super();\n  }\n\n  apply<T>(query: Query<T>): Query<T> {\n    const bound = newQueryBoundFromDocOrFields(\n      query,\n      this.type,\n      this._docOrFields,\n      this._before\n    );\n    return new Query(\n      query.firestore,\n      query.converter,\n      queryWithStartAt(query._query, bound)\n    );\n  }\n}\n\nexport function startAt(\n  ...docOrFields: Array<unknown | firestore.DocumentSnapshot<unknown>>\n): QueryConstraint {\n  return new QueryStartAtConstraint('startAt', docOrFields, /*before=*/ true);\n}\n\nexport function startAfter(\n  ...docOrFields: Array<unknown | firestore.DocumentSnapshot<unknown>>\n): QueryConstraint {\n  return new QueryStartAtConstraint(\n    'startAfter',\n    docOrFields,\n    /*before=*/ false\n  );\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  constructor(\n    readonly type: 'endBefore' | 'endAt',\n    private readonly _docOrFields: Array<\n      unknown | firestore.DocumentSnapshot<unknown>\n    >,\n    private readonly _before: boolean\n  ) {\n    super();\n  }\n\n  apply<T>(query: Query<T>): Query<T> {\n    const bound = newQueryBoundFromDocOrFields(\n      query,\n      this.type,\n      this._docOrFields,\n      this._before\n    );\n    return new Query(\n      query.firestore,\n      query.converter,\n      queryWithEndAt(query._query, bound)\n    );\n  }\n}\n\nexport function endBefore(\n  ...docOrFields: Array<unknown | firestore.DocumentSnapshot<unknown>>\n): QueryConstraint {\n  return new QueryEndAtConstraint('endBefore', docOrFields, /*before=*/ true);\n}\n\nexport function endAt(\n  ...docOrFields: Array<unknown | firestore.DocumentSnapshot<unknown>>\n): QueryConstraint {\n  return new QueryEndAtConstraint('endAt', docOrFields, /*before=*/ false);\n}\n\n/** Helper function to create a bound from a document or fields */\nfunction newQueryBoundFromDocOrFields<T>(\n  query: Query,\n  methodName: string,\n  docOrFields: Array<unknown | firestore.DocumentSnapshot<T>>,\n  before: boolean\n): Bound {\n  if (docOrFields[0] instanceof DocumentSnapshot) {\n    validateExactNumberOfArgs(methodName, docOrFields, 1);\n    return newQueryBoundFromDocument(\n      query._query,\n      query.firestore._databaseId,\n      methodName,\n      docOrFields[0]._document,\n      before\n    );\n  } else {\n    const reader = newUserDataReader(query.firestore);\n    return newQueryBoundFromFields(\n      query._query,\n      query.firestore._databaseId,\n      reader,\n      methodName,\n      docOrFields,\n      before\n    );\n  }\n}\n\nexport class CollectionReference<T = firestore.DocumentData> extends Query<T>\n  implements firestore.CollectionReference<T> {\n  readonly type = 'collection';\n\n  constructor(\n    readonly firestore: Firestore,\n    readonly _path: ResourcePath,\n    converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    super(firestore, converter, newQueryForPath(_path));\n  }\n\n  get id(): string {\n    return this._query.path.lastSegment();\n  }\n\n  get path(): string {\n    return this._query.path.canonicalString();\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.CollectionReference<U> {\n    return new CollectionReference<U>(this.firestore, this._path, converter);\n  }\n}\n\nexport function collection(\n  firestore: firestore.FirebaseFirestore,\n  collectionPath: string\n): CollectionReference<firestore.DocumentData>;\nexport function collection(\n  reference: firestore.CollectionReference<unknown>,\n  collectionPath: string\n): CollectionReference<firestore.DocumentData>;\nexport function collection(\n  reference: firestore.DocumentReference,\n  collectionPath: string\n): CollectionReference<firestore.DocumentData>;\nexport function collection(\n  parent:\n    | firestore.FirebaseFirestore\n    | firestore.DocumentReference<unknown>\n    | firestore.CollectionReference<unknown>,\n  relativePath: string\n): CollectionReference<firestore.DocumentData> {\n  validateArgType('collection', 'non-empty string', 2, relativePath);\n  if (parent instanceof Firestore) {\n    const absolutePath = ResourcePath.fromString(relativePath);\n    validateCollectionPath(absolutePath);\n    return new CollectionReference(parent, absolutePath, /* converter= */ null);\n  } else {\n    if (\n      !(parent instanceof DocumentReference) &&\n      !(parent instanceof CollectionReference)\n    ) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Expected first argument to collection() to be a CollectionReference, ' +\n          'a DocumentReference or FirebaseFirestore'\n      );\n    }\n    const absolutePath = ResourcePath.fromString(parent.path).child(\n      ResourcePath.fromString(relativePath)\n    );\n    validateCollectionPath(absolutePath);\n    return new CollectionReference(\n      parent.firestore,\n      absolutePath,\n      /* converter= */ null\n    );\n  }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\nexport function collectionGroup(\n  firestore: firestore.FirebaseFirestore,\n  collectionId: string\n): Query<firestore.DocumentData> {\n  const firestoreClient = cast(firestore, Firestore);\n\n  validateArgType('collectionGroup', 'non-empty string', 1, collectionId);\n  if (collectionId.indexOf('/') >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid collection ID '${collectionId}' passed to function ` +\n        `collectionGroup(). Collection IDs must not contain '/'.`\n    );\n  }\n\n  return new Query(\n    firestoreClient,\n    /* converter= */ null,\n    newQueryForCollectionGroup(collectionId)\n  );\n}\n\nexport function doc(\n  firestore: firestore.FirebaseFirestore,\n  documentPath: string\n): DocumentReference<firestore.DocumentData>;\nexport function doc<T>(\n  reference: firestore.CollectionReference<T>,\n  documentPath?: string\n): DocumentReference<T>;\nexport function doc(\n  reference: firestore.DocumentReference<unknown>,\n  documentPath: string\n): DocumentReference<firestore.DocumentData>;\nexport function doc<T>(\n  parent:\n    | firestore.FirebaseFirestore\n    | firestore.CollectionReference<T>\n    | firestore.DocumentReference<unknown>,\n  relativePath?: string\n): DocumentReference {\n  // We allow omission of 'pathString' but explicitly prohibit passing in both\n  // 'undefined' and 'null'.\n  if (arguments.length === 1) {\n    relativePath = AutoId.newId();\n  }\n  validateArgType('doc', 'non-empty string', 2, relativePath);\n\n  if (parent instanceof Firestore) {\n    const absolutePath = ResourcePath.fromString(relativePath!);\n    validateDocumentPath(absolutePath);\n    return new DocumentReference(parent, /* converter= */ null, absolutePath);\n  } else {\n    if (\n      !(parent instanceof DocumentReference) &&\n      !(parent instanceof CollectionReference)\n    ) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Expected first argument to collection() to be a CollectionReference, ' +\n          'a DocumentReference or FirebaseFirestore'\n      );\n    }\n    const absolutePath = parent._path.child(\n      ResourcePath.fromString(relativePath!)\n    );\n    validateDocumentPath(absolutePath);\n    return new DocumentReference(\n      parent.firestore,\n      parent instanceof CollectionReference ? parent.converter : null,\n      absolutePath\n    );\n  }\n}\n\nexport function parent(\n  reference: firestore.CollectionReference<unknown>\n): DocumentReference<firestore.DocumentData> | null;\nexport function parent<T>(\n  reference: firestore.DocumentReference<T>\n): CollectionReference<T>;\nexport function parent<T>(\n  child: firestore.CollectionReference<unknown> | firestore.DocumentReference<T>\n): DocumentReference<firestore.DocumentData> | CollectionReference<T> | null {\n  if (child instanceof CollectionReference) {\n    const parentPath = child._path.popLast();\n    if (parentPath.isEmpty()) {\n      return null;\n    } else {\n      return new DocumentReference(\n        child.firestore,\n        /* converter= */ null,\n        parentPath\n      );\n    }\n  } else {\n    const doc = cast<DocumentReference<T>>(child, DocumentReference);\n    return new CollectionReference<T>(\n      doc.firestore,\n      doc._key.path.popLast(),\n      doc._converter\n    );\n  }\n}\n\nexport function getDoc<T>(\n  reference: firestore.DocumentReference<T>\n): Promise<firestore.DocumentSnapshot<T>> {\n  const ref = cast<DocumentReference<T>>(reference, DocumentReference);\n  return getDatastore(ref.firestore).then(async datastore => {\n    const result = await invokeBatchGetDocumentsRpc(datastore, [ref._key]);\n    hardAssert(result.length === 1, 'Expected a single document result');\n    const maybeDocument = result[0];\n    return new DocumentSnapshot<T>(\n      ref.firestore,\n      ref._key,\n      maybeDocument instanceof Document ? maybeDocument : null,\n      ref._converter\n    );\n  });\n}\n\nexport function getDocs<T>(\n  query: firestore.Query<T>\n): Promise<firestore.QuerySnapshot<T>> {\n  const internalQuery = cast<Query<T>>(query, Query);\n  validateHasExplicitOrderByForLimitToLast(internalQuery._query);\n  return getDatastore(internalQuery.firestore).then(async datastore => {\n    const result = await invokeRunQueryRpc(datastore, internalQuery._query);\n    const docs = result.map(\n      doc =>\n        new QueryDocumentSnapshot<T>(\n          internalQuery.firestore,\n          doc.key,\n          doc,\n          internalQuery.converter\n        )\n    );\n\n    if (internalQuery._query.hasLimitToLast()) {\n      // Limit to last queries reverse the orderBy constraint that was\n      // specified by the user. As such, we need to reverse the order of the\n      // results to return the documents in the expected order.\n      docs.reverse();\n    }\n\n    return new QuerySnapshot<T>(query, docs);\n  });\n}\n\nexport function setDoc<T>(\n  reference: firestore.DocumentReference<T>,\n  data: T\n): Promise<void>;\nexport function setDoc<T>(\n  reference: firestore.DocumentReference<T>,\n  data: Partial<T>,\n  options: firestore.SetOptions\n): Promise<void>;\nexport function setDoc<T>(\n  reference: firestore.DocumentReference<T>,\n  data: T,\n  options?: firestore.SetOptions\n): Promise<void> {\n  const ref = cast<DocumentReference<T>>(reference, DocumentReference);\n\n  const convertedValue = applyFirestoreDataConverter(\n    ref._converter,\n    data,\n    options\n  );\n  const dataReader = newUserDataReader(ref.firestore);\n  const parsed = parseSetData(\n    dataReader,\n    'setDoc',\n    ref._key,\n    convertedValue,\n    ref._converter !== null,\n    options\n  );\n\n  return getDatastore(ref.firestore).then(datastore =>\n    invokeCommitRpc(\n      datastore,\n      parsed.toMutations(ref._key, Precondition.none())\n    )\n  );\n}\n\nexport function updateDoc(\n  reference: firestore.DocumentReference<unknown>,\n  data: firestore.UpdateData\n): Promise<void>;\nexport function updateDoc(\n  reference: firestore.DocumentReference<unknown>,\n  field: string | firestore.FieldPath,\n  value: unknown,\n  ...moreFieldsAndValues: unknown[]\n): Promise<void>;\nexport function updateDoc(\n  reference: firestore.DocumentReference<unknown>,\n  fieldOrUpdateData: string | firestore.FieldPath | firestore.UpdateData,\n  value?: unknown,\n  ...moreFieldsAndValues: unknown[]\n): Promise<void> {\n  const ref = cast<DocumentReference<unknown>>(reference, DocumentReference);\n  const dataReader = newUserDataReader(ref.firestore);\n\n  let parsed: ParsedUpdateData;\n  if (\n    typeof fieldOrUpdateData === 'string' ||\n    fieldOrUpdateData instanceof FieldPath\n  ) {\n    parsed = parseUpdateVarargs(\n      dataReader,\n      'updateDoc',\n      ref._key,\n      fieldOrUpdateData,\n      value,\n      moreFieldsAndValues\n    );\n  } else {\n    parsed = parseUpdateData(\n      dataReader,\n      'updateDoc',\n      ref._key,\n      fieldOrUpdateData\n    );\n  }\n\n  return getDatastore(ref.firestore).then(datastore =>\n    invokeCommitRpc(\n      datastore,\n      parsed.toMutations(ref._key, Precondition.exists(true))\n    )\n  );\n}\n\nexport function deleteDoc(\n  reference: firestore.DocumentReference\n): Promise<void> {\n  const ref = cast<DocumentReference<unknown>>(reference, DocumentReference);\n  return getDatastore(ref.firestore).then(datastore =>\n    invokeCommitRpc(datastore, [\n      new DeleteMutation(ref._key, Precondition.none())\n    ])\n  );\n}\n\nexport function addDoc<T>(\n  reference: firestore.CollectionReference<T>,\n  data: T\n): Promise<firestore.DocumentReference<T>> {\n  const collRef = cast<CollectionReference<T>>(reference, CollectionReference);\n  const docRef = doc(collRef);\n\n  const convertedValue = applyFirestoreDataConverter(collRef.converter, data);\n\n  const dataReader = newUserDataReader(collRef.firestore);\n  const parsed = parseSetData(\n    dataReader,\n    'addDoc',\n    docRef._key,\n    convertedValue,\n    docRef._converter !== null,\n    {}\n  );\n\n  return getDatastore(collRef.firestore)\n    .then(datastore =>\n      invokeCommitRpc(\n        datastore,\n        parsed.toMutations(docRef._key, Precondition.exists(false))\n      )\n    )\n    .then(() => docRef);\n}\n\nexport function refEqual<T>(\n  left: firestore.DocumentReference<T> | firestore.CollectionReference<T>,\n  right: firestore.DocumentReference<T> | firestore.CollectionReference<T>\n): boolean {\n  if (\n    (left instanceof DocumentReference ||\n      left instanceof CollectionReference) &&\n    (right instanceof DocumentReference || right instanceof CollectionReference)\n  ) {\n    return (\n      left.firestore === right.firestore &&\n      left.path === right.path &&\n      left.converter === right.converter\n    );\n  }\n  return false;\n}\n\nexport function queryEqual<T>(\n  left: firestore.Query<T>,\n  right: firestore.Query<T>\n): boolean {\n  if (left instanceof Query && right instanceof Query) {\n    return (\n      left.firestore === right.firestore &&\n      queryEquals(left._query, right._query) &&\n      left.converter === right.converter\n    );\n  }\n  return false;\n}\n\nexport function newUserDataReader(firestore: Firestore): UserDataReader {\n  const settings = firestore._getSettings();\n  const serializer = newSerializer(firestore._databaseId);\n  return new UserDataReader(\n    firestore._databaseId,\n    !!settings.ignoreUndefinedProperties,\n    serializer\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '../../../lite-types';\n\nimport { validateAtLeastNumberOfArgs } from '../../../src/util/input_validation';\nimport {\n  ArrayRemoveFieldValueImpl,\n  ArrayUnionFieldValueImpl,\n  DeleteFieldValueImpl,\n  NumericIncrementFieldValueImpl,\n  SerializableFieldValue,\n  ServerTimestampFieldValueImpl\n} from '../../../src/api/field_value';\nimport { ParseContext } from '../../../src/api/user_data_reader';\nimport { FieldTransform } from '../../../src/model/mutation';\n\n/** The public FieldValue class of the lite API. */\nexport abstract class FieldValue extends SerializableFieldValue\n  implements firestore.FieldValue {}\n\n/**\n * A delegate class that allows the FieldValue implementations returned by\n * deleteField(), serverTimestamp(), arrayUnion(), arrayRemove() and\n * increment() to be an instance of the lite FieldValue class declared above.\n *\n * We don't directly subclass `FieldValue` in the various field value\n * implementations as the base FieldValue class differs between the lite, full\n * and legacy SDK.\n */\nclass FieldValueDelegate extends FieldValue implements firestore.FieldValue {\n  readonly _methodName: string;\n\n  constructor(readonly _delegate: SerializableFieldValue) {\n    super();\n    this._methodName = _delegate._methodName;\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform | null {\n    return this._delegate._toFieldTransform(context);\n  }\n\n  isEqual(other: firestore.FieldValue): boolean {\n    if (!(other instanceof FieldValueDelegate)) {\n      return false;\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n\nexport function deleteField(): firestore.FieldValue {\n  return new FieldValueDelegate(new DeleteFieldValueImpl('deleteField'));\n}\n\nexport function serverTimestamp(): firestore.FieldValue {\n  return new FieldValueDelegate(\n    new ServerTimestampFieldValueImpl('serverTimestamp')\n  );\n}\n\nexport function arrayUnion(...elements: unknown[]): firestore.FieldValue {\n  validateAtLeastNumberOfArgs('arrayUnion()', arguments, 1);\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new FieldValueDelegate(\n    new ArrayUnionFieldValueImpl('arrayUnion', elements)\n  );\n}\n\nexport function arrayRemove(...elements: unknown[]): firestore.FieldValue {\n  validateAtLeastNumberOfArgs('arrayRemove()', arguments, 1);\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new FieldValueDelegate(\n    new ArrayRemoveFieldValueImpl('arrayRemove', elements)\n  );\n}\n\nexport function increment(n: number): firestore.FieldValue {\n  return new FieldValueDelegate(\n    new NumericIncrementFieldValueImpl('increment', n)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '../../../lite-types';\n\nimport {\n  DeleteMutation,\n  Mutation,\n  Precondition\n} from '../../../src/model/mutation';\nimport { Code, FirestoreError } from '../../../src/util/error';\nimport { applyFirestoreDataConverter } from '../../../src/api/database';\nimport {\n  parseSetData,\n  parseUpdateData,\n  parseUpdateVarargs,\n  UserDataReader\n} from '../../../src/api/user_data_reader';\nimport { cast } from './util';\nimport { DocumentReference, newUserDataReader } from './reference';\nimport { Firestore } from './database';\nimport { invokeCommitRpc } from '../../../src/remote/datastore';\nimport { FieldPath } from './field_path';\nimport { getDatastore } from './components';\n\nexport class WriteBatch implements firestore.WriteBatch {\n  // This is the lite version of the WriteBatch API used in the legacy SDK. The\n  // class is a close copy but takes different input types.\n\n  private readonly _dataReader: UserDataReader;\n  private _mutations = [] as Mutation[];\n  private _committed = false;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    private readonly _commitHandler: (m: Mutation[]) => Promise<void>\n  ) {\n    this._dataReader = newUserDataReader(_firestore);\n  }\n\n  set<T>(documentRef: firestore.DocumentReference<T>, value: T): WriteBatch;\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: Partial<T>,\n    options: firestore.SetOptions\n  ): WriteBatch;\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T,\n    options?: firestore.SetOptions\n  ): WriteBatch {\n    this.verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n\n    const convertedValue = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this._dataReader,\n      'WriteBatch.set',\n      ref._key,\n      convertedValue,\n      ref._converter !== null,\n      options\n    );\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | firestore.FieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | firestore.FieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    this.verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof FieldPath\n    ) {\n      parsed = parseUpdateVarargs(\n        this._dataReader,\n        'WriteBatch.update',\n        ref._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      parsed = parseUpdateData(\n        this._dataReader,\n        'WriteBatch.update',\n        ref._key,\n        fieldOrUpdateData\n      );\n    }\n\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.exists(true))\n    );\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): WriteBatch {\n    this.verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n    this._mutations = this._mutations.concat(\n      new DeleteMutation(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  commit(): Promise<void> {\n    this.verifyNotCommitted();\n    this._committed = true;\n    if (this._mutations.length > 0) {\n      return this._commitHandler(this._mutations);\n    }\n\n    return Promise.resolve();\n  }\n\n  private verifyNotCommitted(): void {\n    if (this._committed) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'A write batch can no longer be used after commit() ' +\n          'has been called.'\n      );\n    }\n  }\n}\n\nexport function validateReference<T>(\n  documentRef: firestore.DocumentReference<T>,\n  firestore: Firestore\n): DocumentReference<T> {\n  if (documentRef.firestore !== firestore) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Provided document reference is from a different Firestore instance.'\n    );\n  } else {\n    return cast(documentRef, DocumentReference) as DocumentReference<T>;\n  }\n}\n\nexport function writeBatch(\n  firestore: firestore.FirebaseFirestore\n): firestore.WriteBatch {\n  const firestoreImpl = cast(firestore, Firestore);\n  return new WriteBatch(firestoreImpl, writes =>\n    getDatastore(firestoreImpl).then(datastore =>\n      invokeCommitRpc(datastore, writes)\n    )\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '../../../lite-types';\n\nimport {\n  parseSetData,\n  parseUpdateData,\n  parseUpdateVarargs,\n  UserDataReader\n} from '../../../src/api/user_data_reader';\nimport { Transaction as InternalTransaction } from '../../../src/core/transaction';\nimport {\n  Document,\n  MaybeDocument,\n  NoDocument\n} from '../../../src/model/document';\nimport { fail } from '../../../src/util/assert';\nimport { applyFirestoreDataConverter } from '../../../src/api/database';\nimport { DocumentSnapshot } from './snapshot';\nimport { Firestore } from './database';\nimport { TransactionRunner } from '../../../src/core/transaction_runner';\nimport { AsyncQueue } from '../../../src/util/async_queue';\nimport { Deferred } from '../../../src/util/promise';\nimport { FieldPath as ExternalFieldPath } from '../../../src/api/field_path';\nimport { validateReference } from './write_batch';\nimport { newUserDataReader } from './reference';\nimport { FieldPath } from './field_path';\nimport { cast } from './util';\nimport { getDatastore } from './components';\n\n// TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n// legacy SDK.\nexport class Transaction {\n  // This is the tree-shakeable version of the Transaction class used in the\n  // legacy SDK. The class is a close copy but takes different input and output\n  // types. The firestore-exp SDK further extends this class to return its API\n  // type.\n\n  private readonly _dataReader: UserDataReader;\n\n  constructor(\n    protected readonly _firestore: Firestore,\n    private readonly _transaction: InternalTransaction\n  ) {\n    this._dataReader = newUserDataReader(_firestore);\n  }\n\n  get<T>(\n    documentRef: firestore.DocumentReference<T>\n  ): Promise<DocumentSnapshot<T>> {\n    const ref = validateReference(documentRef, this._firestore);\n    return this._transaction\n      .lookup([ref._key])\n      .then((docs: MaybeDocument[]) => {\n        if (!docs || docs.length !== 1) {\n          return fail('Mismatch in docs returned from document lookup.');\n        }\n        const doc = docs[0];\n        if (doc instanceof NoDocument) {\n          return new DocumentSnapshot(\n            this._firestore,\n            ref._key,\n            null,\n            ref._converter\n          );\n        } else if (doc instanceof Document) {\n          return new DocumentSnapshot(\n            this._firestore,\n            doc.key,\n            doc,\n            ref._converter\n          );\n        } else {\n          throw fail(\n            `BatchGetDocumentsRequest returned unexpected document type: ${doc.constructor.name}`\n          );\n        }\n      });\n  }\n\n  set<T>(documentRef: firestore.DocumentReference<T>, value: T): this;\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: Partial<T>,\n    options: firestore.SetOptions\n  ): this;\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T,\n    options?: firestore.SetOptions\n  ): this {\n    const ref = validateReference(documentRef, this._firestore);\n    const convertedValue = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this._dataReader,\n      'Transaction.set',\n      ref._key,\n      convertedValue,\n      ref._converter !== null,\n      options\n    );\n    this._transaction.set(ref._key, parsed);\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): this;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): this;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): this {\n    const ref = validateReference(documentRef, this._firestore);\n\n    let parsed;\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof FieldPath\n    ) {\n      parsed = parseUpdateVarargs(\n        this._dataReader,\n        'Transaction.update',\n        ref._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      parsed = parseUpdateData(\n        this._dataReader,\n        'Transaction.update',\n        ref._key,\n        fieldOrUpdateData\n      );\n    }\n\n    this._transaction.update(ref._key, parsed);\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): this {\n    const ref = validateReference(documentRef, this._firestore);\n    this._transaction.delete(ref._key);\n    return this;\n  }\n}\n\nexport function runTransaction<T>(\n  firestore: firestore.FirebaseFirestore,\n  updateFunction: (transaction: firestore.Transaction) => Promise<T>\n): Promise<T> {\n  const firestoreClient = cast(firestore, Firestore);\n  return getDatastore(firestoreClient).then(async datastore => {\n    const deferred = new Deferred<T>();\n    new TransactionRunner<T>(\n      new AsyncQueue(),\n      datastore,\n      internalTransaction =>\n        updateFunction(new Transaction(firestoreClient, internalTransaction)),\n      deferred\n    ).run();\n    return deferred.promise;\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, registerVersion } from '@firebase/app-exp';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { Firestore } from './src/api/database';\nimport { version } from '../package.json';\n\nexport function registerFirestore(): void {\n  _registerComponent(\n    new Component(\n      'firestore/lite',\n      container => {\n        const app = container.getProvider('app-exp').getImmediate()!;\n        return ((app, auth) => new Firestore(app, auth))(\n          app,\n          container.getProvider('auth-internal')\n        );\n      },\n      ComponentType.PUBLIC\n    )\n  );\n  registerVersion('firestore-lite', version, 'node');\n}\n"],"names":["Code","FirestoreError","Error","[object Object]","code","message","super","this","toString","name","__PRIVATE_logClient","Logger","setLogLevel","__PRIVATE_newLevel","__PRIVATE_logDebug","msg","obj","logLevel","LogLevel","DEBUG","args","map","__PRIVATE_argToString","debug","__PRIVATE_logError","ERROR","error","value","JSON","stringify","e","fail","__PRIVATE_failure","__PRIVATE_hardAssert","assertion","__PRIVATE_debugCast","constructor","__PRIVATE_randomBytes","__PRIVATE_nBytes","crypto","self","bytes","Uint8Array","getRandomValues","__PRIVATE_i","Math","floor","random","__PRIVATE_AutoId","__PRIVATE_chars","__PRIVATE_maxMultiple","length","__PRIVATE_autoId","charAt","__PRIVATE_primitiveComparator","left","right","__PRIVATE_arrayEquals","__PRIVATE_comparator","every","index","__PRIVATE_DatabaseInfo","__PRIVATE_databaseId","persistenceKey","host","ssl","forceLongPolling","__PRIVATE_DatabaseId","projectId","database","i","other","User","uid","__PRIVATE_isAuthenticated","__PRIVATE_otherUser","__PRIVATE_OAuthToken","user","__PRIVATE_authHeaders","__PRIVATE_FirebaseCredentialsProvider","__PRIVATE_authProvider","UNAUTHENTICATED","__PRIVATE_tokenListener","__PRIVATE_tokenCounter","currentUser","__PRIVATE_getUser","__PRIVATE_receivedInitialUser","__PRIVATE_changeListener","auth","getImmediate","optional","addAuthTokenListener","get","then","__PRIVATE_initialTokenCounter","forceRefresh","getToken","__PRIVATE_tokenData","accessToken","Promise","resolve","removeAuthTokenListener","__PRIVATE_currentUid","getUid","__PRIVATE_cast","Timestamp","seconds","nanoseconds","fromMillis","Date","now","date","getTime","milliseconds","toMillis","__PRIVATE_adjustedSeconds","String","padStart","__PRIVATE_SnapshotVersion","timestamp","__PRIVATE__compareTo","isEqual","__PRIVATE_BasePath","segments","offset","undefined","__PRIVATE_len","__PRIVATE_nameOrPath","slice","limit","forEach","__PRIVATE_segment","push","__PRIVATE_construct","size","__PRIVATE_potentialChild","fn","end","p1","p2","min","ResourcePath","__PRIVATE_toArray","join","__PRIVATE_canonicalString","path","indexOf","split","filter","__PRIVATE_identifierRegExp","FieldPath","test","str","replace","__PRIVATE_isValidIdentifier","__PRIVATE_current","__PRIVATE_addCurrentSegment","__PRIVATE_inBackticks","c","next","__PRIVATE_DocumentKey","__PRIVATE_fromString","__PRIVATE_popFirst","collectionId","k1","k2","__PRIVATE_objectSize","count","key","Object","prototype","hasOwnProperty","call","__PRIVATE_ByteString","__PRIVATE_binaryString","base64","atob","array","fromCharCode","raw","btoa","buffer","charCodeAt","__PRIVATE_isNullOrUndefined","__PRIVATE_isNegativeZero","__PRIVATE_isServerTimestamp","mapValue","fields","stringValue","__PRIVATE_getLocalWriteTime","__PRIVATE_localWriteTime","__PRIVATE_normalizeTimestamp","nanos","__PRIVATE_ISO_TIMESTAMP_REG_EXP","RegExp","__PRIVATE_typeOrder","__PRIVATE_valueEquals","__PRIVATE_leftType","booleanValue","timestampValue","__PRIVATE_leftTimestamp","__PRIVATE_rightTimestamp","__PRIVATE_timestampEquals","__PRIVATE_normalizeByteString","__PRIVATE_blobEquals","referenceValue","__PRIVATE_normalizeNumber","geoPointValue","latitude","longitude","__PRIVATE_geoPointEquals","integerValue","__PRIVATE_n1","__PRIVATE_n2","isNaN","__PRIVATE_numberEquals","arrayValue","values","__PRIVATE_leftMap","__PRIVATE_rightMap","__PRIVATE_arrayValueContains","__PRIVATE_haystack","__PRIVATE_needle","find","v","__PRIVATE_valueCompare","__PRIVATE_rightType","__PRIVATE_leftNumber","doubleValue","__PRIVATE_rightNumber","__PRIVATE_compareNumbers","__PRIVATE_compareTimestamps","__PRIVATE_leftBytes","__PRIVATE_rightBytes","__PRIVATE_compareTo","__PRIVATE_compareBlobs","__PRIVATE_leftPath","__PRIVATE_rightPath","__PRIVATE_leftSegments","__PRIVATE_rightSegments","__PRIVATE_comparison","__PRIVATE_compareReferences","__PRIVATE_compareGeoPoints","__PRIVATE_leftArray","__PRIVATE_rightArray","compare","__PRIVATE_compareArrays","__PRIVATE_leftKeys","keys","__PRIVATE_rightKeys","sort","__PRIVATE_keyCompare","__PRIVATE_fraction","exec","__PRIVATE_nanoStr","substr","Number","__PRIVATE_parsedDate","blob","fromBase64String","fromUint8Array","__PRIVATE_refValue","isArray","__PRIVATE_isNullValue","__PRIVATE_isNanValue","__PRIVATE_isMapValue","__PRIVATE_TargetImpl","collectionGroup","orderBy","filters","startAt","endAt","__PRIVATE_newTarget","__PRIVATE_QueryImpl","__PRIVATE_explicitOrderBy","__PRIVATE_limitType","field","__PRIVATE_isKeyField","__PRIVATE_isInequality","__PRIVATE_operators","op","__PRIVATE_isCollectionGroupQuery","query","__PRIVATE_queryOrderBy","__PRIVATE_queryImpl","__PRIVATE_memoizedOrderBy","__PRIVATE_inequalityField","__PRIVATE_getInequalityFilterField","__PRIVATE_firstOrderByField","__PRIVATE_getFirstOrderByField","__PRIVATE_OrderBy","__PRIVATE_keyField","__PRIVATE_foundKeyOrdering","__PRIVATE_lastDirection","dir","__PRIVATE_queryToTarget","__PRIVATE_memoizedTarget","__PRIVATE_orderBys","__PRIVATE_Bound","position","before","__PRIVATE_queryEquals","__PRIVATE_orderByEquals","__PRIVATE_f1","__PRIVATE_f2","__PRIVATE_boundEquals","__PRIVATE_targetEquals","FieldFilter","__PRIVATE_createKeyFieldInFilter","__PRIVATE_KeyFieldFilter","__PRIVATE_ArrayContainsFilter","__PRIVATE_InFilter","__PRIVATE_NotInFilter","__PRIVATE_ArrayContainsAnyFilter","__PRIVATE_KeyFieldInFilter","__PRIVATE_KeyFieldNotInFilter","doc","__PRIVATE_matchesComparison","__PRIVATE_fromName","__PRIVATE_extractDocumentKeysFromArrayValue","some","val","__PRIVATE_RpcCode","__PRIVATE_mapCodeFromHttpStatus","status","RpcCode","__PRIVATE_DIRECTIONS","__PRIVATE_dirs","asc","desc","__PRIVATE_OPERATORS","__PRIVATE_ops","<","<=",">",">=","==","!=","array-contains","in","not-in","array-contains-any","__PRIVATE_JsonProtoSerializer","__PRIVATE_useProto3Json","__PRIVATE_toNumber","serializer","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","Infinity","__PRIVATE_toDouble","__PRIVATE_toTimestamp","toISOString","toVersion","version","fromVersion","__PRIVATE_fromTimestamp","__PRIVATE_toResourceName","__PRIVATE_fullyQualifiedPrefixPath","child","__PRIVATE_toName","__PRIVATE_resource","__PRIVATE_isValidResourceName","__PRIVATE_fromResourceName","__PRIVATE_resourceName","__PRIVATE_toQueryPath","__PRIVATE_getEncodedDatabaseId","__PRIVATE_toMutationDocument","proto","__PRIVATE_fromMaybeDocument","result","found","updateTime","data","__PRIVATE_ObjectValue","Document","__PRIVATE_fromFound","missing","readTime","__PRIVATE_NoDocument","__PRIVATE_fromMissing","__PRIVATE_toMutation","__PRIVATE_mutation","__PRIVATE_SetMutation","update","__PRIVATE_DeleteMutation","delete","__PRIVATE_PatchMutation","updateMask","__PRIVATE_toDocumentMask","__PRIVATE_fieldMask","__PRIVATE_TransformMutation","transform","document","fieldTransforms","__PRIVATE_fieldTransform","__PRIVATE_ServerTimestampTransform","fieldPath","setToServerValue","__PRIVATE_ArrayUnionTransformOperation","appendMissingElements","elements","__PRIVATE_ArrayRemoveTransformOperation","removeAllFromArray","__PRIVATE_NumericIncrementTransformOperation","increment","__PRIVATE_operand","__PRIVATE_toFieldTransform","__PRIVATE_VerifyMutation","verify","__PRIVATE_precondition","__PRIVATE_isNone","currentDocument","exists","__PRIVATE_toPrecondition","__PRIVATE_toQueryTarget","target","structuredQuery","parent","from","allDescendants","__PRIVATE_popLast","__PRIVATE_lastSegment","where","__PRIVATE_protos","unaryFilter","__PRIVATE_toFieldPathReference","fieldFilter","__PRIVATE_toUnaryOrFieldFilter","compositeFilter","__PRIVATE_toFilter","order","direction","__PRIVATE_toPropertyOrder","__PRIVATE_toOrder","__PRIVATE_toInt32Proto","__PRIVATE_toCursor","cursor","__PRIVATE_canonicalFields","fieldPaths","__PRIVATE_TransformOperation","__PRIVATE_FieldMask","__PRIVATE_fieldMaskPath","__PRIVATE_isPrefixOf","__PRIVATE_l","r","FieldTransform","Precondition","Vt","__PRIVATE_Mutation","__PRIVATE_isEmpty","__PRIVATE_ObjectValueBuilder","__PRIVATE_baseObject","empty","Map","__PRIVATE_setOverlay","__PRIVATE_currentLevel","__PRIVATE_overlayMap","__PRIVATE_currentSegment","currentValue","entries","set","__PRIVATE_mergedResult","__PRIVATE_applyOverlay","__PRIVATE_emptyPath","__PRIVATE_currentPath","__PRIVATE_currentOverlays","__PRIVATE_modified","__PRIVATE_existingValue","__PRIVATE_resultAtPath","__PRIVATE_pathSegment","__PRIVATE_nested","__PRIVATE_MaybeDocument","__PRIVATE_objectValue","options","__PRIVATE_hasLocalMutations","hasCommittedMutations","hasPendingWrites","__PRIVATE_Deferred","promise","reject","__PRIVATE_ExponentialBackoff","__PRIVATE_queue","__PRIVATE_timerId","__PRIVATE_initialDelayMs","__PRIVATE_backoffFactor","__PRIVATE_maxDelayMs","reset","__PRIVATE_currentBaseMs","cancel","__PRIVATE_desiredDelayWithJitterMs","__PRIVATE_jitterDelayMs","__PRIVATE_delaySoFarMs","max","__PRIVATE_lastAttemptTime","__PRIVATE_remainingDelayMs","__PRIVATE_timerPromise","__PRIVATE_enqueueAfterDelay","__PRIVATE_skipDelay","__PRIVATE_getWindow","window","__PRIVATE_DelayedOperation","__PRIVATE_asyncQueue","__PRIVATE_targetTimeMs","__PRIVATE_removalCallback","__PRIVATE_deferred","bind","catch","err","__PRIVATE_delayMs","__PRIVATE_targetTime","__PRIVATE_delayedOp","start","__PRIVATE_timerHandle","setTimeout","__PRIVATE_handleDelayElapsed","reason","clearTimeout","__PRIVATE_enqueueAndForget","__PRIVATE_AsyncQueue","__PRIVATE_backoff","__PRIVATE_skipBackoff","addEventListener","__PRIVATE_visibilityHandler","mn","__PRIVATE__isShuttingDown","enqueue","__PRIVATE_verifyNotFailed","__PRIVATE_enqueueInternal","removeEventListener","__PRIVATE_enqueueEvenAfterShutdown","__PRIVATE_retryableOps","__PRIVATE_retryNextOp","shift","__PRIVATE_isIndexedDbTransactionError","__PRIVATE_backoffAndRun","__PRIVATE_newTail","__PRIVATE_tail","__PRIVATE_operationInProgress","stack","includes","__PRIVATE_timerIdsToSkip","__PRIVATE_createAndSchedule","__PRIVATE_removedOp","__PRIVATE_removeDelayedOperation","__PRIVATE_delayedOperations","__PRIVATE_currentTail","__PRIVATE_lastTimerId","__PRIVATE_drain","a","b","splice","__PRIVATE_DatastoreImpl","credentials","__PRIVATE_terminated","__PRIVATE_connection","__PRIVATE_rpcName","request","__PRIVATE_verifyInitialized","token","__PRIVATE_invokeRPC","__PRIVATE_invalidateToken","__PRIVATE_invokeStreamingRPC","__PRIVATE_invokeCommitRpc","__PRIVATE_datastore","mutations","__PRIVATE_datastoreImpl","writes","m","async","__PRIVATE_invokeBatchGetDocumentsRpc","documents","k","response","docs","__PRIVATE_invokeRunQueryRpc","__PRIVATE_fromDocument","__PRIVATE_RPC_NAME_URL_MAPPING","BatchGetDocuments","Commit","RunQuery","__PRIVATE_FetchConnection","__PRIVATE_databaseInfo","__PRIVATE_baseUrl","__PRIVATE_databaseRoot","__PRIVATE_req","url","__PRIVATE_makeUrl","headers","__PRIVATE_modifyHeadersForRequest","__PRIVATE_performRPCRequest","WARN","warn","__PRIVATE_logWarn","__PRIVATE_header","__PRIVATE_urlRpcName","__PRIVATE_fetchImpl","body","__PRIVATE_requestJson","method","statusText","ok","json","__PRIVATE_newSerializer","__PRIVATE_datastoreInstances","__PRIVATE_getDatastore","firestore","__PRIVATE__terminated","has","settings","__PRIVATE__getSettings","__PRIVATE__databaseId","__PRIVATE__persistenceKey","__PRIVATE_datastorePromise","fetch","__PRIVATE_newConnection","__PRIVATE_newDatastore","__PRIVATE__credentials","Firestore","app","__PRIVATE_databaseIdFromApp","Zn","__PRIVATE__settingsFrozen","Qn","__PRIVATE__terminateTask","__PRIVATE__settings","apply","__PRIVATE__terminate","__PRIVATE_termiate","__PRIVATE_removeComponents","initializeFirestore","_getProvider","__PRIVATE__configureClient","getFirestore","terminate","_removeServiceInstance","__PRIVATE_validateExactNumberOfArgs","functionName","__PRIVATE_numberOfArgs","__PRIVATE_formatPlural","__PRIVATE_validateAtLeastNumberOfArgs","__PRIVATE_minNumberOfArgs","__PRIVATE_validateArgType","type","__PRIVATE_argument","__PRIVATE_inputName","input","valid","__PRIVATE_isPlainObject","description","__PRIVATE_valueDescription","__PRIVATE_ordinal","__PRIVATE_validateDocumentPath","__PRIVATE_isDocumentKey","__PRIVATE_validateCollectionPath","getPrototypeOf","substring","Array","__PRIVATE_customObjectName","results","__PRIVATE_invalidClassError","__PRIVATE_validatePositiveNumber","n","num","__PRIVATE_assertUint8ArrayAvailable","__PRIVATE_assertBase64Available","Blob","__PRIVATE_byteString","__PRIVATE__byteString","arguments","toBase64","toUint8Array","__PRIVATE_BaseFieldPath","fieldNames","__PRIVATE_minNumberOfElements","__PRIVATE_validateNamedArrayAtLeastNumberOfElements","__PRIVATE__internalPath","__PRIVATE_InternalFieldPath","__PRIVATE_RESERVED","__PRIVATE_SerializableFieldValue","__PRIVATE_DeleteFieldValueImpl","__PRIVATE__methodName","context","__PRIVATE_dataSource","__PRIVATE_createError","__PRIVATE_createSentinelChildContext","__PRIVATE_fieldValue","__PRIVATE_arrayElement","__PRIVATE_ParseContext","ue","ce","__PRIVATE_targetDoc","methodName","he","ignoreUndefinedProperties","__PRIVATE_ServerTimestampFieldValueImpl","__PRIVATE_ArrayUnionFieldValueImpl","__PRIVATE__elements","__PRIVATE_parseContext","__PRIVATE_parsedElements","element","__PRIVATE_parseData","arrayUnion","__PRIVATE_ArrayRemoveFieldValueImpl","__PRIVATE_NumericIncrementFieldValueImpl","__PRIVATE__operand","__PRIVATE_numericIncrement","GeoPoint","isFinite","__PRIVATE__lat","__PRIVATE__long","__PRIVATE_RESERVED_FIELD_REGEX","__PRIVATE_DocumentKeyReference","__PRIVATE__key","__PRIVATE__converter","__PRIVATE_ParsedSetData","__PRIVATE_ParsedUpdateData","__PRIVATE_isWrite","__PRIVATE_validatePath","configuration","__PRIVATE_childPath","__PRIVATE_contextWith","__PRIVATE_validatePathSegment","__PRIVATE_hasConverter","__PRIVATE_UserDataReader","Re","__PRIVATE_parseSetData","__PRIVATE_userDataReader","__PRIVATE_createContext","merge","mergeFields","__PRIVATE_validatePlainObject","__PRIVATE_updateData","__PRIVATE_parseObject","__PRIVATE_validatedFieldPaths","__PRIVATE_stringOrFieldPath","__PRIVATE_fieldPathFromDotSeparatedString","contains","__PRIVATE_fieldMaskContains","__PRIVATE_covers","__PRIVATE_parseUpdateData","__PRIVATE_fieldMaskPaths","__PRIVATE_childContext","__PRIVATE_childContextForFieldPath","__PRIVATE__delegate","__PRIVATE_parsedValue","mask","__PRIVATE_build","__PRIVATE_parseUpdateVarargs","moreFieldsAndValues","__PRIVATE_fieldPathFromArgument","__PRIVATE_parseQueryValue","__PRIVATE_allowArrays","__PRIVATE_looksLikeJsonObject","__PRIVATE__toFieldTransform","__PRIVATE_entryIndex","__PRIVATE_entry","__PRIVATE_parsedEntry","__PRIVATE_childContextForArray","nullValue","__PRIVATE_parseArray","fromDate","bytesValue","__PRIVATE_thisDb","__PRIVATE_otherDb","__PRIVATE_childContextForField","search","__PRIVATE_fromDotSeparatedString","__PRIVATE_hasPath","__PRIVATE_hasDocument","documentId","__PRIVATE_UserDataWriter","timestampsInSnapshots","__PRIVATE_serverTimestampBehavior","__PRIVATE_referenceFactory","__PRIVATE_convertTimestamp","__PRIVATE_convertServerTimestamp","__PRIVATE_convertReference","__PRIVATE_convertGeoPoint","__PRIVATE_convertArray","__PRIVATE_convertObject","__PRIVATE_convertValue","previousValue","__PRIVATE_getPreviousValue","__PRIVATE_normalizedValue","toDate","__PRIVATE_resourcePath","DocumentSnapshot","__PRIVATE__firestore","__PRIVATE__document","id","ref","DocumentReference","snapshot","QueryDocumentSnapshot","fromFirestore","__PRIVATE_toProto","QuerySnapshot","__PRIVATE__docs","callback","thisArg","snapshotEqual","queryEqual","arg","Transaction","Set","__PRIVATE_ensureCommitNotCalled","__PRIVATE_recordVersion","write","__PRIVATE_toMutations","__PRIVATE_writtenDocs","add","__PRIVATE_preconditionForUpdate","__PRIVATE_lastWriteError","__PRIVATE_unwritten","__PRIVATE_readVersions","__PRIVATE__","__PRIVATE_committed","__PRIVATE_docVersion","__PRIVATE_existingVersion","__PRIVATE_none","concat","__PRIVATE_TransactionRunner","updateFunction","__PRIVATE_runWithBackOff","transaction","__PRIVATE_userPromise","__PRIVATE_tryRunUpdateFunction","commit","__PRIVATE_commitError","__PRIVATE_handleTransactionError","__PRIVATE_userPromiseError","__PRIVATE_retries","__PRIVATE_isRetryableTransactionError","__PRIVATE_isPermanentError","__PRIVATE_newQueryFilter","__PRIVATE_dataReader","__PRIVATE_validateDisjunctiveFilterElements","__PRIVATE_referenceList","__PRIVATE_parseDocumentIdValue","create","__PRIVATE_existingField","__PRIVATE_validateOrderByAndInequalityMatch","__PRIVATE_conflictingOp","__PRIVATE_findFilterOperator","__PRIVATE_conflictingOps","__PRIVATE_validateNewFilter","__PRIVATE_newQueryOrderBy","__PRIVATE_validateNewOrderBy","__PRIVATE_documentIdValue","operator","__PRIVATE_baseQuery","__PRIVATE_inequality","__PRIVATE_applyFirestoreDataConverter","converter","__PRIVATE_convertedValue","toFirestore","__PRIVATE__path","Query","__PRIVATE__query","QueryConstraint","__PRIVATE_queryConstraints","constraint","__PRIVATE_QueryFilterConstraint","__PRIVATE__field","__PRIVATE__op","__PRIVATE__value","__PRIVATE_reader","__PRIVATE_newUserDataReader","__PRIVATE_newFilters","__PRIVATE_queryWithAddedFilter","opStr","__PRIVATE_QueryOrderByConstraint","__PRIVATE__direction","__PRIVATE_newOrderBy","__PRIVATE_queryWithAddedOrderBy","directionStr","__PRIVATE_QueryLimitConstraint","__PRIVATE__limit","__PRIVATE__limitType","__PRIVATE_queryWithLimit","limitToLast","__PRIVATE_QueryStartAtConstraint","__PRIVATE__docOrFields","__PRIVATE__before","bound","__PRIVATE_newQueryBoundFromDocOrFields","__PRIVATE_queryWithStartAt","__PRIVATE_docOrFields","startAfter","__PRIVATE_QueryEndAtConstraint","__PRIVATE_queryWithEndAt","endBefore","components","__PRIVATE_rawValue","__PRIVATE_wrapped","__PRIVATE_newQueryBoundFromFields","CollectionReference","collection","__PRIVATE_relativePath","__PRIVATE_absolutePath","__PRIVATE_firestoreClient","__PRIVATE_newQueryForCollectionGroup","__PRIVATE_newId","parentPath","getDoc","reference","__PRIVATE_maybeDocument","getDocs","__PRIVATE_internalQuery","__PRIVATE_hasLimitToLast","__PRIVATE_validateHasExplicitOrderByForLimitToLast","reverse","setDoc","__PRIVATE_parsed","updateDoc","__PRIVATE_fieldOrUpdateData","deleteDoc","addDoc","__PRIVATE_collRef","__PRIVATE_docRef","refEqual","FieldValue","__PRIVATE_FieldValueDelegate","deleteField","serverTimestamp","arrayRemove","WriteBatch","__PRIVATE__commitHandler","__PRIVATE__dataReader","documentRef","__PRIVATE_verifyNotCommitted","__PRIVATE_validateReference","__PRIVATE__mutations","__PRIVATE__committed","writeBatch","__PRIVATE_firestoreImpl","__PRIVATE__transaction","__PRIVATE_lookup","runTransaction","__PRIVATE_internalTransaction","run","Component","container","getProvider","registerVersion"],"mappings":"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"}