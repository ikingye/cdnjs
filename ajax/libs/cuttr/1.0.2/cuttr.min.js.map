{"version":3,"sources":["cuttr.js"],"names":["root","define","amd","factory","module","exports","Cuttr","this","el","options","self","Object","create","prototype","elementsToTruncate","originalContent","document","querySelectorAll","contentVisibilityState","contentTruncationState","truncate","length","ending","loadedClass","readMoreText","readMore","readMoreBtnPosition","readLessText","dataIndex","keys","forEach","key","truncateIt","thisElement","str","thisIndex","dataset","cuttrIndex","truncateMethod","cuttrMethod","words","split","sentences","match","splice","join","btnPosition","currentElement","btnAdditionalClasses","cuttrReadmoreAdditionalClasses","btnAriaExpanded","substring","addReadMore","updated","insertAdjacentHTML","btnMarkup","cuttrReadmore","cuttrReadless","cuttrReadmorePosition","console","cuttrReadmoreTag","readMoreBtnTag","btnSelectorClass","readMoreBtnSelectorClass","readMoreBtnAdditionalClasses","btnText","btnTag","replace","nextElementSibling","btnExists","matches","addEventListener","querySelector","updateContent","trancatedContent","event","target","classList","contains","previousElementSibling","parentNode","currentContent","innerHTML","truncateLength","cuttrLength","truncateEnding","cuttrEnding","trim","i","setAttribute","push","call","init"],"mappings":"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","file":"cuttr.min.js","sourcesContent":["/*!\n * Cuttr 1.0.2\n * https://github.com/d-e-v-s-k/cuttr-js\n *\n * @license GPLv3 for open source use only\n * or Cuttr Commercial License for commercial use\n * https://cuttr.kulahs.de/pricing/\n *\n * Copyright (C) 2020 https://cuttr.kulahs.de/ - A project by DEVSK\n **/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.Cuttr = factory();\n    }\n}(this, function () {\n    const Cuttr = function (el, options){\n        'use strict';\n\n        const self = Object.create(Cuttr.prototype);\n\n        /**\n         * Default settings\n         */\n        self.options = {\n            elementsToTruncate: (el) ? document.querySelectorAll(el) : document.querySelectorAll('.cuttr'),\n            originalContent: [],\n            contentVisibilityState: [],\n            contentTruncationState: [],\n\n            //  set default options\n            truncate: 'characters', // truncate method [characters|words|sentences]\n            length: 100,  //  truncation limit\n            ending: '...',    //  truncation ending string\n            loadedClass: 'cuttr--loaded', //  class to set when truncation finished\n            readMore: false, // read more button enabled/disabled\n            readMoreText: 'read more',\n            readLessText: 'read less',\n            readMoreBtnPosition: 'after',  // [after|inside]\n            readMoreBtnTag: 'button', //  read-more button tag [button|a|...]\n            readMoreBtnSelectorClass: 'cuttr-readmore', //  read-more button selector\n            readMoreBtnAdditionalClasses: '',\n\n            //  private options\n            dataIndex: 'data-cuttr-index',   // cuttr index data attribute\n        };\n\n        /**\n         * User defined options\n         */\n        if (options) {\n            Object.keys(options).forEach(function (key){\n                self.options[key] = options[key];\n            });\n        }\n\n\n        const init = function () {\n            prepare.call(this);\n        };\n\n\n        /*\n            prepare cuttable elements\n         */\n        function prepare() {\n\n            for (let i = 0; i < self.options.elementsToTruncate.length; i++) {\n\n                const currentElement  = self.options.elementsToTruncate[i];\n                const currentContent  = currentElement.innerHTML;\n                const truncateLength  = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n                const truncateEnding  = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n                let trancatedContent;\n\n                //  add truncate-element index to element\n                currentElement.setAttribute(self.options.dataIndex, i);\n\n                //  temporary save elements original content\n                self.options.originalContent.push(currentContent);\n\n                //  truncate content\n                trancatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n                currentElement.innerHTML = trancatedContent;\n\n                //  add read-more button if current content is truncated\n                if (self.options.contentTruncationState[i]) {\n\n                    if (self.options.readMore)\n                        addReadMore(currentElement);\n\n                    currentElement.classList += ' ' + self.options.loadedClass;\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            truncate text to specific length\n        */\n        function truncateIt(thisElement, str, length, ending) {\n\n            const thisIndex       = thisElement.dataset.cuttrIndex;\n            const truncateMethod  = (thisElement.dataset.cuttrMethod) ? thisElement.dataset.cuttrMethod : self.options.truncate;\n\n            //  set defaults\n            if (length == null) {\n                length = 100;\n            }\n\n            //  set defaults\n            if (ending == null) {\n                ending = '...';\n            }\n\n            //  truncate content based on method\n            switch (truncateMethod) {\n\n                //  truncate characters only\n                case 'characters':\n\n                    //  check if content (string) is longer than truncation limit\n                    if (str.length > length) {\n\n                        //  set current content truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n\n                        //  return new string\n                        return str.substring(0, length - ending.length) + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate words\n                case 'words':\n\n                    const words = str.split(/ (?=[^>]*(?:<|$))/);\n\n                    //  check if content (string) is longer than truncation limit\n                    if (words.length > length) {\n\n                        //  set current content truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        //  split spaces followed by sequence of characters are NOT greater-than signs, less-than sign\n                        return words.splice(0,length).join(' ') + ' ' + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate full sentences\n                case 'sentences':\n\n                    const sentences = str.match(/[^\\.!\\?]+[\\.!\\?]+/g);\n\n                    //  check if content (string) is longer than truncation limit\n                    if (sentences.length > length) {\n\n                        //  set current contetn truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        return sentences.splice(0,length).join(' ') + ' ' + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate characters by default\n                default:\n\n                    //  check if content (string) is longer than truncation limit\n                    if (str.length > length) {\n\n                        //  set current contetn truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        return str.substring(0, length - ending.length) + ending;\n\n                    } else {\n                        return str;\n                    }\n\n            }\n\n        }\n\n\n        /*\n            append read more button\n        */\n        function addReadMore(thisElement, updated) {\n\n            const currentElement      = thisElement;\n            const thisIndex           = currentElement.dataset.cuttrIndex;\n            const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n            const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n            const btnPosition         = (currentElement.dataset.cuttrReadmorePosition) ? currentElement.dataset.cuttrReadmorePosition : self.options.readMoreBtnPosition;\n            const btnTag              = (currentElement.dataset.cuttrReadmoreTag) ? currentElement.dataset.cuttrReadmoreTag : self.options.readMoreBtnTag;\n            const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n            const btnAdditionalClasses = (currentElement.dataset.cuttrReadmoreAdditionalClasses) ? currentElement.dataset.cuttrReadmoreAdditionalClasses : self.options.readMoreBtnAdditionalClasses;\n            const btnText             = (self.options.contentVisibilityState[thisIndex]) ? readLessText : readMoreText;\n            const btnAriaExpanded     = (self.options.contentVisibilityState[thisIndex]) ? 'true' : 'false';\n            const btnMarkup           = ' <' + btnTag + ' aria-expanded=\"' + btnAriaExpanded + '\" class=\"' + self.options.readMoreBtnSelectorClass + ' ' + btnAdditionalClasses + '\">' + btnText.replace(/<[^>]*>/g, \"\") + '</' + btnTag + '>';\n            let btnExists;\n\n            //  check for button existence depending on btn position\n            if (btnPosition == 'after' && currentElement.nextElementSibling) {\n                btnExists = currentElement.nextElementSibling.matches(btnSelectorClass);\n            } else if (btnPosition == 'inside') {\n                btnExists = currentElement.querySelector(btnSelectorClass);\n            }\n\n            //  insert element only if it doesn't exist\n            if (!btnExists) {\n\n                //  add read-more button to dom\n                switch (btnPosition) {\n                    case 'after':\n                        currentElement.insertAdjacentHTML('afterend', btnMarkup);\n                        break;\n                    case 'inside':\n                        currentElement.insertAdjacentHTML('beforeend', btnMarkup);\n                        break;\n                    default:\n                        console.log('no matching read-more button position defined');\n                }\n\n                //  listen to read-more clicks - show/hide content\n                if (!updated) {\n\n                    if (btnPosition == 'after') {\n                        currentElement.nextElementSibling.addEventListener('click',function(event) {\n                            if (event.target && event.target.classList.contains(self.options.readMoreBtnSelectorClass)) {\n                                updateContent(event, btnPosition);\n                            }\n                        });\n                    } else if (btnPosition == 'inside') {\n                        currentElement.addEventListener('click',function(event) {\n                            if (event.target && event.target.classList.contains(self.options.readMoreBtnSelectorClass)) {\n                                updateContent(event, btnPosition);\n                            }\n                        });\n                    }\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            display original/truncated content\n        */\n        function updateContent(event, btnPosition) {\n\n            const currentElement      = (btnPosition == 'after') ? event.target.previousElementSibling : event.target.parentNode;\n            const currentContent      = currentElement.innerHTML;\n            const thisIndex           = currentElement.dataset.cuttrIndex;\n            const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n            const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n            const truncateLength      = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n            const truncateEnding      = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n            let trancatedContent;\n\n            //  show content if its currently truncated\n            if (!self.options.contentVisibilityState[thisIndex]) {\n\n                //  replace content with original content from element at specific index\n                currentElement.innerHTML = self.options.originalContent[thisIndex];\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = true;\n\n                if (btnPosition == 'inside' && self.options.readMore)\n                    addReadMore(currentElement, true);\n\n                //  update button text and aria\n                event.target.innerHTML = readLessText.replace(/<[^>]*>/g, \"\");\n                //event.target.setAttribute('aria-expanded', 'true');\n\n                //  truncate content if its shown completely currently\n            } else {\n\n                //  truncate content\n                trancatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n                currentElement.innerHTML = trancatedContent;\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = false;\n\n                if (btnPosition == 'inside' && self.options.readMore)\n                    addReadMore(currentElement, true);\n\n                //  update button text and aria\n                event.target.innerHTML = readMoreText.replace(/<[^>]*>/g, \"\");\n                //event.target.setAttribute('aria-expanded', 'false');\n\n            }\n\n        }\n\n        init();\n        return self;\n    };\n    return Cuttr;\n}));"]}