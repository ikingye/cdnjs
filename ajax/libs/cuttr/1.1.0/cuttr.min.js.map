{"version":3,"sources":["cuttr.js"],"names":["root","define","amd","factory","module","exports","Cuttr","this","el","options","self","Object","create","prototype","elementsToTruncate","originalContent","document","querySelectorAll","contentVisibilityState","contentTruncationState","truncate","length","ending","loadedClass","readMoreText","readMore","readMoreBtnPosition","readLessText","dataIndex","keys","forEach","key","truncateIt","thisElement","str","thisIndex","dataset","cuttrIndex","cuttrMethod","substring","sentences","match","split","words","splice","join","btnPosition","btnAdditionalClasses","currentElement","btnTag","btnAriaExpanded","nextElementSibling","matches","btnSelectorClass","insertAdjacentHTML","btnExists","console","cuttrReadmore","cuttrReadless","cuttrReadmorePosition","cuttrReadmoreTag","readMoreBtnTag","updated","readMoreBtnSelectorClass","cuttrReadmoreAdditionalClasses","readMoreBtnAdditionalClasses","addEventListener","updateContent","target","classList","btnText","replace","contains","querySelector","btnMarkup","previousElementSibling","trancatedContent","event","innerHTML","parentNode","currentContent","truncateLength","cuttrLength","truncateEnding","cuttrEnding","trim","addReadMore","$","extend","i","setAttribute","call","init","window","jQuery","fn","fp_utils","showError"],"mappings":"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","file":"cuttr.min.js","sourcesContent":["/*!\n * Cuttr 1.0.2\n * https://github.com/d-e-v-s-k/cuttr-js\n *\n * @license GPLv3 for open source use only\n * or Cuttr Commercial License for commercial use\n * https://cuttr.kulahs.de/pricing/\n *\n * Copyright (C) 2020 https://cuttr.kulahs.de/ - A project by DEVSK\n **/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.Cuttr = factory();\n    }\n}(this, function () {\n    const Cuttr = function (el, options){\n        'use strict';\n\n        const self = Object.create(Cuttr.prototype);\n\n        /**\n         * Default settings\n         */\n        self.options = {\n            elementsToTruncate:  typeof el === 'string' ? document.querySelectorAll(el) : el,\n            originalContent: [],\n            contentVisibilityState: [],\n            contentTruncationState: [],\n\n            //  set default options\n            truncate: 'characters', // truncate method [characters|words|sentences]\n            length: 100,  //  truncation limit\n            ending: '...',    //  truncation ending string\n            loadedClass: 'cuttr--loaded', //  class to set when truncation finished\n            readMore: false, // read more button enabled/disabled\n            readMoreText: 'read more',\n            readLessText: 'read less',\n            readMoreBtnPosition: 'after',  // [after|inside]\n            readMoreBtnTag: 'button', //  read-more button tag [button|a|...]\n            readMoreBtnSelectorClass: 'cuttr-readmore', //  read-more button selector\n            readMoreBtnAdditionalClasses: '',\n\n            //  private options\n            dataIndex: 'data-cuttr-index',   // cuttr index data attribute\n        };\n\n        /**\n         * User defined options\n         */\n        if (options) {\n            Object.keys(options).forEach(function (key){\n                self.options[key] = options[key];\n            });\n        }\n\n\n        const init = function () {\n            prepare.call(this);\n        };\n\n\n        /*\n            prepare cuttable elements\n         */\n        function prepare() {\n\n            //  return if no target element defined\n            if (!self.options.elementsToTruncate) return;\n\n            //  set element type depending on source\n            if ( !('length' in self.options.elementsToTruncate) )\n                self.options.elementsToTruncate = [self.options.elementsToTruncate];\n\n            //  loop through target elements to truncate\n            for (let i = 0; i < self.options.elementsToTruncate.length; i++) {\n\n                const currentElement  = self.options.elementsToTruncate[i];\n                const currentContent  = currentElement.innerHTML;\n                const truncateLength  = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n                const truncateEnding  = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n                let trancatedContent;\n\n                //  add truncate-element index to element\n                currentElement.setAttribute(self.options.dataIndex, i);\n\n                //  temporary save elements original content\n                self.options.originalContent.push(currentContent);\n\n                //  truncate content\n                trancatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n                currentElement.innerHTML = trancatedContent;\n\n                //  add read-more button if current content is truncated\n                if (self.options.contentTruncationState[i]) {\n\n                    if (self.options.readMore)\n                        addReadMore(currentElement);\n\n                    currentElement.classList += ' ' + self.options.loadedClass;\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            truncate text to specific length\n        */\n        function truncateIt(thisElement, str, length, ending) {\n\n            const thisIndex       = thisElement.dataset.cuttrIndex;\n            const truncateMethod  = (thisElement.dataset.cuttrMethod) ? thisElement.dataset.cuttrMethod : self.options.truncate;\n\n            //  set defaults\n            if (length == null) {\n                length = 100;\n            }\n\n            //  set defaults\n            if (ending == null) {\n                ending = '...';\n            }\n\n            //  truncate content based on method\n            switch (truncateMethod) {\n\n                //  truncate characters only\n                case 'characters':\n\n                    //  check if content (string) is longer than truncation limit\n                    if (str.length > length) {\n\n                        //  set current content truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n\n                        //  return new string\n                        return str.substring(0, length - ending.length) + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate words\n                case 'words':\n\n                    const words = str.split(/ (?=[^>]*(?:<|$))/);\n\n                    //  check if content (string) is longer than truncation limit\n                    if (words.length > length) {\n\n                        //  set current content truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        //  split spaces followed by sequence of characters are NOT greater-than signs, less-than sign\n                        return words.splice(0,length).join(' ') + ' ' + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate full sentences\n                case 'sentences':\n\n                    const sentences = str.match(/[^\\.!\\?]+[\\.!\\?]+/g);\n\n                    //  check if content (string) is longer than truncation limit\n                    if (sentences.length > length) {\n\n                        //  set current contetn truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        return sentences.splice(0,length).join(' ') + ' ' + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate characters by default\n                default:\n\n                    //  check if content (string) is longer than truncation limit\n                    if (str.length > length) {\n\n                        //  set current contetn truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        return str.substring(0, length - ending.length) + ending;\n\n                    } else {\n                        return str;\n                    }\n\n            }\n\n        }\n\n\n        /*\n            append read more button\n        */\n        function addReadMore(thisElement, updated) {\n\n            const currentElement      = thisElement;\n            const thisIndex           = currentElement.dataset.cuttrIndex;\n            const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n            const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n            const btnPosition         = (currentElement.dataset.cuttrReadmorePosition) ? currentElement.dataset.cuttrReadmorePosition : self.options.readMoreBtnPosition;\n            const btnTag              = (currentElement.dataset.cuttrReadmoreTag) ? currentElement.dataset.cuttrReadmoreTag : self.options.readMoreBtnTag;\n            const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n            const btnAdditionalClasses = (currentElement.dataset.cuttrReadmoreAdditionalClasses) ? currentElement.dataset.cuttrReadmoreAdditionalClasses : self.options.readMoreBtnAdditionalClasses;\n            const btnText             = (self.options.contentVisibilityState[thisIndex]) ? readLessText : readMoreText;\n            const btnAriaExpanded     = (self.options.contentVisibilityState[thisIndex]) ? 'true' : 'false';\n            const btnMarkup           = ' <' + btnTag + ' aria-expanded=\"' + btnAriaExpanded + '\" class=\"' + self.options.readMoreBtnSelectorClass + ' ' + btnAdditionalClasses + '\">' + btnText.replace(/<[^>]*>/g, \"\") + '</' + btnTag + '>';\n            let btnExists;\n\n            //  check for button existence depending on btn position\n            if (btnPosition == 'after' && currentElement.nextElementSibling) {\n                btnExists = currentElement.nextElementSibling.matches(btnSelectorClass);\n            } else if (btnPosition == 'inside') {\n                btnExists = currentElement.querySelector(btnSelectorClass);\n            }\n\n            //  insert element only if it doesn't exist\n            if (!btnExists) {\n\n                //  add read-more button to dom\n                switch (btnPosition) {\n                    case 'after':\n                        currentElement.insertAdjacentHTML('afterend', btnMarkup);\n                        break;\n                    case 'inside':\n                        currentElement.insertAdjacentHTML('beforeend', btnMarkup);\n                        break;\n                    default:\n                        console.log('no matching read-more button position defined');\n                }\n\n                //  listen to read-more clicks - show/hide content\n                if (!updated) {\n\n                    if (btnPosition == 'after') {\n                        currentElement.nextElementSibling.addEventListener('click',function(event) {\n                            if (event.target && event.target.classList.contains(self.options.readMoreBtnSelectorClass)) {\n                                updateContent(event, btnPosition);\n                            }\n                        });\n                    } else if (btnPosition == 'inside') {\n                        currentElement.addEventListener('click',function(event) {\n                            if (event.target && event.target.classList.contains(self.options.readMoreBtnSelectorClass)) {\n                                updateContent(event, btnPosition);\n                            }\n                        });\n                    }\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            display original/truncated content\n        */\n        function updateContent(event, btnPosition) {\n\n            const currentElement      = (btnPosition == 'after') ? event.target.previousElementSibling : event.target.parentNode;\n            const currentContent      = currentElement.innerHTML;\n            const thisIndex           = currentElement.dataset.cuttrIndex;\n            const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n            const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n            const truncateLength      = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n            const truncateEnding      = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n            let trancatedContent;\n\n            //  show content if its currently truncated\n            if (!self.options.contentVisibilityState[thisIndex]) {\n\n                //  replace content with original content from element at specific index\n                currentElement.innerHTML = self.options.originalContent[thisIndex];\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = true;\n\n                if (btnPosition == 'inside' && self.options.readMore)\n                    addReadMore(currentElement, true);\n\n                //  update button text and aria\n                event.target.innerHTML = readLessText.replace(/<[^>]*>/g, \"\");\n                //event.target.setAttribute('aria-expanded', 'true');\n\n                //  truncate content if its shown completely currently\n            } else {\n\n                //  truncate content\n                trancatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n                currentElement.innerHTML = trancatedContent;\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = false;\n\n                if (btnPosition == 'inside' && self.options.readMore)\n                    addReadMore(currentElement, true);\n\n                //  update button text and aria\n                event.target.innerHTML = readMoreText.replace(/<[^>]*>/g, \"\");\n                //event.target.setAttribute('aria-expanded', 'false');\n\n            }\n\n        }\n\n        init();\n        return self;\n    };\n    return Cuttr;\n}));\n\n\n/**\n * jQuery adapter for Cuttr.js 1.1.0\n */\nif(window.jQuery && window.Cuttr){\n    (function ($, Cuttr) {\n        'use strict';\n\n        // No jQuery No Go\n        if (!$ || !Cuttr) {\n            window.fp_utils.showError('error', 'jQuery is required to use the jQuery Cuttr adapter!');\n            return;\n        }\n\n        $.fn.Cuttr = function(options) {\n            options = $.extend({}, options, {'$': $});\n            var instance = new Cuttr(this, options);\n        };\n    })(window.jQuery, window.Cuttr);\n}"]}