"use strict";function ownKeys(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),i.push.apply(i,n)}return i}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(i),!0).forEach(function(t){_defineProperty(e,t,i[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):ownKeys(Object(i)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))})}return e}function _defineProperty(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function _inheritsLoose(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}import{AnimatedEvent}from"../AnimatedEvent";import AnimatedNode from"./AnimatedNode";import AnimatedStyle from"./AnimatedStyle";import NativeAnimatedHelper from"../NativeAnimatedHelper";import findNodeHandle from"../../../../exports/findNodeHandle";import invariant from"fbjs/lib/invariant";var AnimatedProps=function(e){function t(t,i){var n;return n=e.call(this)||this,t.style&&(t=_objectSpread({},t,{style:new AnimatedStyle(t.style)})),n._props=t,n._callback=i,n.__attach(),n}_inheritsLoose(t,e);var i=t.prototype;return i.__getValue=function(){var e={};for(var t in this._props){var i=this._props[t];i instanceof AnimatedNode?(!i.__isNative||i instanceof AnimatedStyle)&&(e[t]=i.__getValue()):e[t]=i instanceof AnimatedEvent?i.__getHandler():i}return e},i.__getAnimatedValue=function(){var e={};for(var t in this._props){var i=this._props[t];i instanceof AnimatedNode&&(e[t]=i.__getAnimatedValue())}return e},i.__attach=function(){for(var e in this._props){var t=this._props[e];t instanceof AnimatedNode&&t.__addChild(this)}},i.__detach=function(){for(var t in this.__isNative&&this._animatedView&&this.__disconnectAnimatedView(),this._props){var i=this._props[t];i instanceof AnimatedNode&&i.__removeChild(this)}e.prototype.__detach.call(this)},i.update=function(){this._callback()},i.__makeNative=function(){if(!this.__isNative){for(var e in this.__isNative=!0,this._props){var t=this._props[e];t instanceof AnimatedNode&&t.__makeNative()}this._animatedView&&this.__connectAnimatedView()}},i.setNativeView=function(e){this._animatedView!==e&&(this._animatedView=e,this.__isNative&&this.__connectAnimatedView())},i.__connectAnimatedView=function(){invariant(this.__isNative,'Expected node to be marked as "native"');var e=findNodeHandle(this._animatedView);invariant(null!=e,"Unable to locate attached view in the native tree"),NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(),e)},i.__disconnectAnimatedView=function(){invariant(this.__isNative,'Expected node to be marked as "native"');var e=findNodeHandle(this._animatedView);invariant(null!=e,"Unable to locate attached view in the native tree"),NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(),e)},i.__getNativeConfig=function(){var e={};for(var t in this._props){var i=this._props[t];i instanceof AnimatedNode&&(i.__makeNative(),e[t]=i.__getNativeTag())}return{type:"props",props:e}},t}(AnimatedNode);export default AnimatedProps;