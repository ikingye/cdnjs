"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var turnOrder=require("./turn-order-d6c2e620.js"),base=require("./base-bdd9c13b.js"),master=require("./master-2ed30af7.js"),io=_interopDefault(require("socket.io-client"));class InMemory extends base.Sync{constructor(){super(),this.state=new Map,this.initial=new Map,this.metadata=new Map,this.log=new Map}createGame(t,e){this.initial.set(t,e.initialState),this.setState(t,e.initialState),this.setMetadata(t,e.metadata)}setMetadata(t,e){this.metadata.set(t,e)}setState(t,e,s){if(s&&s.length>0){const e=this.log.get(t)||[];this.log.set(t,e.concat(s))}this.state.set(t,e)}fetch(t,e){let s={};return e.state&&(s.state=this.state.get(t)),e.metadata&&(s.metadata=this.metadata.get(t)),e.log&&(s.log=this.log.get(t)||[]),e.initialState&&(s.initialState=this.initial.get(t)),s}wipe(t){this.state.delete(t),this.metadata.delete(t)}listGames(t){if(t&&void 0!==t.gameName){let e=[];return this.metadata.forEach((s,a)=>{s.gameName===t.gameName&&e.push(a)}),e}return[...this.metadata.keys()]}}class Transport{constructor({store:t,gameName:e,playerID:s,gameID:a,numPlayers:i}){this.store=t,this.gameName=e||"default",this.playerID=s||null,this.gameID=a||"default",this.numPlayers=i||2}}function GetBotPlayer(t,e){if(void 0!==t.ctx.gameover)return null;if(t.ctx.activePlayers){for(const s of Object.keys(e))if(s in t.ctx.activePlayers)return s}else if(t.ctx.currentPlayer in e)return t.ctx.currentPlayer;return null}class LocalMaster extends master.Master{constructor({game:t,bots:e}){const s={},a={};if(t&&t.ai&&e)for(const s in e){const i=e[s];a[s]=new i({game:t,enumerate:t.ai.enumerate,seed:t.seed})}const i=({playerID:t,type:e,args:a})=>{const i=s[t];void 0!==i&&i.apply(null,[e,...a])},r={send:i,sendAll:t=>{for(const e in s){const s=t(e);i({playerID:e,...s})}}};super(t,new InMemory,r,!1),this.connect=((t,e,a)=>{s[e]=a}),this.subscribe(({state:t,gameID:s})=>{if(!e)return;const i=GetBotPlayer(t,a);null!==i&&setTimeout(async()=>{const e=await a[i].play(t,i);await this.onUpdate(e.action,t._stateID,s,e.action.payload.playerID)},100)})}}class LocalTransport extends Transport{constructor({master:t,store:e,gameID:s,playerID:a,gameName:i,numPlayers:r}){super({store:e,gameName:i,playerID:a,gameID:s,numPlayers:r}),this.master=t,this.isConnected=!0}async onUpdate(t,e,s){const a=this.store.getState();if(t==this.gameID&&e._stateID>=a._stateID){const t=turnOrder.update(e,s);this.store.dispatch(t)}}onSync(t,e){if(t==this.gameID){const t=turnOrder.sync(e);this.store.dispatch(t)}}onAction(t,e){this.master.onUpdate(e,t._stateID,this.gameID,this.playerID)}connect(){this.master.connect(this.gameID,this.playerID,(t,...e)=>{"sync"==t&&this.onSync.apply(this,e),"update"==t&&this.onUpdate.apply(this,e)}),this.master.onSync(this.gameID,this.playerID,this.numPlayers)}disconnect(){}subscribe(){}subscribeGameMetadata(){}updateGameID(t){this.gameID=t;const e=turnOrder.reset(null);this.store.dispatch(e),this.connect()}updatePlayerID(t){this.playerID=t;const e=turnOrder.reset(null);this.store.dispatch(e),this.connect()}}const localMasters=new Map;function Local(t){return e=>{let s;return localMasters.has(e.gameKey)&&!t?s=localMasters.get(e.gameKey):(s=new LocalMaster({game:e.game,bots:t&&t.bots}),localMasters.set(e.gameKey,s)),new LocalTransport({master:s,...e})}}class SocketIOTransport extends Transport{constructor({socket:t,socketOpts:e,store:s,gameID:a,playerID:i,gameName:r,numPlayers:n,server:c}={}){super({store:s,gameName:r,playerID:i,gameID:a,numPlayers:n}),this.server=c,this.socket=t,this.socketOpts=e,this.isConnected=!1,this.callback=(()=>{}),this.gameMetadataCallback=(()=>{})}onAction(t,e){this.socket.emit("update",e,t._stateID,this.gameID,this.playerID)}connect(){if(!this.socket)if(this.server){let t=this.server;-1==t.search(/^https?:\/\//)&&(t="http://"+this.server),"/"!=t.substr(-1)&&(t+="/"),this.socket=io(t+this.gameName,this.socketOpts)}else this.socket=io("/"+this.gameName,this.socketOpts);this.socket.on("update",(t,e,s)=>{const a=this.store.getState();if(t==this.gameID&&e._stateID>=a._stateID){const t=turnOrder.update(e,s);this.store.dispatch(t)}}),this.socket.on("sync",(t,e)=>{if(t==this.gameID){const t=turnOrder.sync(e);this.gameMetadataCallback(e.filteredMetadata),this.store.dispatch(t)}}),this.socket.on("connect",()=>{this.socket.emit("sync",this.gameID,this.playerID,this.numPlayers),this.isConnected=!0,this.callback()}),this.socket.on("disconnect",()=>{this.isConnected=!1,this.callback()})}disconnect(){this.socket.close(),this.socket=null,this.isConnected=!1,this.callback()}subscribe(t){this.callback=t}subscribeGameMetadata(t){this.gameMetadataCallback=t}updateGameID(t){this.gameID=t;const e=turnOrder.reset(null);this.store.dispatch(e),this.socket&&this.socket.emit("sync",this.gameID,this.playerID,this.numPlayers)}updatePlayerID(t){this.playerID=t;const e=turnOrder.reset(null);this.store.dispatch(e),this.socket&&this.socket.emit("sync",this.gameID,this.playerID,this.numPlayers)}}function SocketIO({server:t,socketOpts:e}={}){return s=>new SocketIOTransport({server:t,socketOpts:e,...s})}exports.Local=Local,exports.SocketIO=SocketIO;