"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.QuadTree=void 0;const Rectangle_1=require("./Rectangle");class QuadTree{constructor(t,e){this.rectangle=t,this.capacity=e,this.points=[],this.divided=!1}subdivide(){const t=this.rectangle.position.x,e=this.rectangle.position.y,i=this.rectangle.size.width,s=this.rectangle.size.height,n=this.capacity;this.northEast=new QuadTree(new Rectangle_1.Rectangle(t,e,i/2,s/2),n),this.northWest=new QuadTree(new Rectangle_1.Rectangle(t+i/2,e,i/2,s/2),n),this.southEast=new QuadTree(new Rectangle_1.Rectangle(t,e+s/2,i/2,s/2),n),this.southWest=new QuadTree(new Rectangle_1.Rectangle(t+i/2,e+s/2,i/2,s/2),n),this.divided=!0}insert(t){var e,i,s,n,o;return!!this.rectangle.contains(t.position)&&(this.points.length<this.capacity?(this.points.push(t),!0):(this.divided||this.subdivide(),null!==(o=(null===(e=this.northEast)||void 0===e?void 0:e.insert(t))||(null===(i=this.northWest)||void 0===i?void 0:i.insert(t))||(null===(s=this.southEast)||void 0===s?void 0:s.insert(t))||(null===(n=this.southWest)||void 0===n?void 0:n.insert(t)))&&void 0!==o&&o))}query(t,e){var i,s,n,o;const r=null!=e?e:[];if(!t.intersects(this.rectangle))return[];for(const e of this.points.filter(e=>t.contains(e.position)))r.push(e.particle);return this.divided&&(null===(i=this.northEast)||void 0===i||i.query(t,r),null===(s=this.northWest)||void 0===s||s.query(t,r),null===(n=this.southEast)||void 0===n||n.query(t,r),null===(o=this.southWest)||void 0===o||o.query(t,r)),r}}exports.QuadTree=QuadTree;