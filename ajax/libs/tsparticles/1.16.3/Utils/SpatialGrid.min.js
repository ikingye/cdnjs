"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.SpatialGrid=void 0;const Utils_1=require("./Utils");class SpatialGrid{constructor(i){this.grid=[],this.cellSize=20,this.widthSegment=Math.round(i.width/this.cellSize),this.heightSegment=Math.round(i.height/this.cellSize)}init(i){this.widthSegment=(null==i?void 0:i.width)?(null==i?void 0:i.width)/this.cellSize:this.widthSegment,this.heightSegment=(null==i?void 0:i.height)?(null==i?void 0:i.height)/this.cellSize:this.heightSegment,this.grid=[]}setGrid(i,t){this.init(t);for(const t of i)this.insert(t)}insert(i){const t=i.getPosition(),s=this.index(t);Array.isArray(this.grid[s.x])||(this.grid[s.x]=[]),Array.isArray(this.grid[s.x][s.y])||(this.grid[s.x][s.y]=[]),this.grid[s.x][s.y].push(i)}queryInCell(i){const t=this.index(i);return Array.isArray(this.grid[t.x])&&Array.isArray(this.grid[t.x][t.y])&&this.grid[t.x][t.y]||[]}queryRadius(i,t){const s=this.index(i),e=this.radius({x:t,y:t}),r=this.select(this.indexOp(s,"-",e),this.indexOp(s,"+",e)),h=[];for(const s of r){const e=s.getPosition();Utils_1.Utils.getDistance(e,i)<=t&&h.push(s)}return h}queryRadiusWithDistance(i,t){const s=this.index(i),e=this.radius({x:t,y:t}),r=this.select(this.indexOp(s,"-",e),this.indexOp(s,"+",e)),h=[];for(const s of r){const e=s.getPosition(),r=Utils_1.Utils.getDistance(e,i);r<=t&&h.push({distance:r,particle:s})}return h}select(i,t){const s=[];for(let e=i.x;e<=t.x;e++)if(Array.isArray(this.grid[e]))for(let r=i.y;r<=t.y;r++)if(Array.isArray(this.grid[e][r]))for(const i of this.grid[e][r])s.push(i);return s}index(i){return{x:Math.round(i.x/this.widthSegment),y:Math.round(i.y/this.heightSegment)}}radius(i){return{x:Math.ceil(i.x/this.widthSegment),y:Math.ceil(i.y/this.heightSegment)}}indexOp(i,t,s){return"+"===t?{x:this.clamp(i.x+s.x),y:this.clamp(i.y+s.y)}:{x:this.clamp(i.x-s.x),y:this.clamp(i.y-s.y)}}clamp(i){return Utils_1.Utils.clamp(i,0,this.cellSize)}}exports.SpatialGrid=SpatialGrid;