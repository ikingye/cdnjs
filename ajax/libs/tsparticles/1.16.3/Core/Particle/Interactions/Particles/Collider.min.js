"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Collider=void 0;const Utils_1=require("../../../../Utils"),Enums_1=require("../../../../Enums");class Collider{constructor(e){this.container=e}static rotate(e,i){return{horizontal:e.horizontal*Math.cos(i)-e.vertical*Math.sin(i),vertical:e.horizontal*Math.sin(i)+e.vertical*Math.cos(i)}}static collisionVelocity(e,i,o,l){return{horizontal:e.horizontal*(o-l)/(o+l)+2*i.horizontal*l/(o+l),vertical:e.vertical}}static bounce(e,i){const o=e.getPosition(),l=i.getPosition(),t=e.velocity.horizontal-i.velocity.horizontal,s=e.velocity.vertical-i.velocity.vertical;if(t*(l.x-o.x)+s*(l.y-o.y)>=0){const t=-Math.atan2(l.y-o.y,l.x-o.x),s=e.size.value,a=i.size.value,r=Collider.rotate(e.velocity,t),n=Collider.rotate(i.velocity,t),c=Collider.collisionVelocity(r,n,s,a),v=Collider.collisionVelocity(n,r,s,a),u=Collider.rotate(c,-t),d=Collider.rotate(v,-t);e.velocity.horizontal=u.horizontal,e.velocity.vertical=u.vertical,i.velocity.horizontal=d.horizontal,i.velocity.vertical=d.vertical}}static destroy(e,i){void 0===e.size.value&&void 0!==i.size.value?e.destroy():void 0!==e.size.value&&void 0===i.size.value?i.destroy():void 0!==e.size.value&&void 0!==i.size.value&&(e.size.value>=i.size.value?i.destroy():e.destroy())}static getRadius(e,i){return e.bubble.radius||e.size.value||i}isEnabled(e){return e.particlesOptions.collisions.enable}reset(){}interact(e){const i=this.container,o=e.getPosition(),l=i.particles.quadTree.query(new Utils_1.Circle(o.x,o.y,2*e.size.value));for(const t of l){if(e===t||!t.particlesOptions.collisions.enable||e.particlesOptions.collisions.mode!==t.particlesOptions.collisions.mode)continue;const l=t.getPosition(),s=Utils_1.Utils.getDistance(o,l),a=i.retina.sizeValue;s<=Collider.getRadius(e,a)+Collider.getRadius(t,a)&&this.resolveCollision(e,t)}}resolveCollision(e,i){switch(e.particlesOptions.collisions.mode){case Enums_1.CollisionMode.absorb:this.absorb(e,i);break;case Enums_1.CollisionMode.bounce:Collider.bounce(e,i);break;case Enums_1.CollisionMode.destroy:Collider.destroy(e,i)}}absorb(e,i){const o=this.container,l=o.options.fpsLimit/1e3;if(void 0===e.size.value&&void 0!==i.size.value)e.destroy();else if(void 0!==e.size.value&&void 0===i.size.value)i.destroy();else if(void 0!==e.size.value&&void 0!==i.size.value)if(e.size.value>=i.size.value){const t=Utils_1.Utils.clamp(e.size.value/i.size.value,0,i.size.value)*l;e.size.value+=t,i.size.value-=t,i.size.value<=o.retina.pixelRatio&&(i.size.value=0,i.destroy())}else{const t=Utils_1.Utils.clamp(i.size.value/e.size.value,0,e.size.value)*l;e.size.value-=t,i.size.value+=t,e.size.value<=o.retina.pixelRatio&&(e.size.value=0,e.destroy())}}}exports.Collider=Collider;