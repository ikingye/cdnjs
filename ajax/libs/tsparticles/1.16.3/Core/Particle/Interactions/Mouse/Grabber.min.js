"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Grabber=void 0;const Utils_1=require("../../../../Utils"),Modes_1=require("../../../../Enums/Modes");class Grabber{constructor(t){this.container=t}isEnabled(){const t=this.container,o=t.interactivity.mouse,e=t.options.interactivity.events;if(!e.onHover.enable||!o.position)return!1;const i=e.onHover.mode;return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab,i)}reset(){}interact(){var t,o;const e=this.container,i=e.options.interactivity;if(i.events.onHover.enable&&e.interactivity.status===Utils_1.Constants.mouseMoveEvent){const r=e.interactivity.mouse.position;if(void 0===r)return;const s=e.retina.grabModeDistance,n=e.particles.quadTree.query(new Utils_1.Circle(r.x,r.y,s));for(const s of n){const n=s.getPosition(),a=Utils_1.Utils.getDistance(n,r);if(a<=e.retina.grabModeDistance){const n=i.modes.grab.links,l=n.opacity,c=l-a*l/e.retina.grabModeDistance;if(c>0){const i=null!==(t=n.color)&&void 0!==t?t:s.particlesOptions.links.color;let a;if(e.particles.grabLineColor||(e.particles.grabLineColor=i===Utils_1.Constants.randomColorValue||(null===(o=i)||void 0===o?void 0:o.value)===Utils_1.Constants.randomColorValue?Utils_1.Constants.randomColorValue:Utils_1.ColorUtils.colorToRgb(i)),void 0===(a=e.particles.grabLineColor===Utils_1.Constants.randomColorValue?Utils_1.ColorUtils.getRandomRgbColor():e.particles.grabLineColor))return;e.canvas.drawGrabLine(s,a,c,r)}}}}}}exports.Grabber=Grabber;