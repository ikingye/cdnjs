"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Canvas=void 0;const Utils_1=require("../Utils");class Canvas{constructor(t){this.container=t,this.size={height:0,width:0},this.context=null,this.generatedCanvas=!1}init(){this.resize();const t=this.container.options,i=t.backgroundMask.cover.color,s=t.particles.move.trail;this.coverColor=Utils_1.ColorUtils.colorToRgb(i),this.trailFillColor=Utils_1.ColorUtils.colorToRgb(s.fillColor),this.paint()}loadCanvas(t,i){var s;t.className||(t.className=Utils_1.Constants.canvasClass),this.generatedCanvas&&(null===(s=this.element)||void 0===s||s.remove()),this.generatedCanvas=null!=i&&i,this.element=t,this.size.height=t.offsetHeight,this.size.width=t.offsetWidth,this.context=this.element.getContext("2d"),this.container.retina.init(),this.initBackground()}destroy(){var t;this.generatedCanvas&&(null===(t=this.element)||void 0===t||t.remove()),this.context&&Utils_1.CanvasUtils.clear(this.context,this.size)}resize(){this.element&&(this.element.width=this.size.width,this.element.height=this.size.height)}paint(){const t=this.container.options;this.context&&(t.backgroundMask.enable&&t.backgroundMask.cover&&this.coverColor?this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor)):this.paintBase())}clear(){const t=this.container.options,i=t.particles.move.trail;t.backgroundMask.enable?this.paint():i.enable&&i.length>0&&this.trailFillColor?this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor,1/i.length)):this.context&&Utils_1.CanvasUtils.clear(this.context,this.size)}drawLinkTriangle(t,i,s){var o,n;const e=this.container,l=e.options,a=i.destination,r=s.destination,c=t.particlesOptions.links.triangles,h=null!==(o=c.opacity)&&void 0!==o?o:(i.opacity+s.opacity)/2,d=t.getPosition(),g=a.getPosition(),v=r.getPosition(),C=this.context;if(!C)return;let p=Utils_1.ColorUtils.colorToRgb(c.color);if(!p){const i=t.particlesOptions.links,s=void 0!==i.id?e.particles.linksColors[i.id]:e.particles.linksColor;if(s===Utils_1.Constants.randomColorValue)p=Utils_1.ColorUtils.getRandomRgbColor();else if("mid"===s){const i=t.getColor(),s=a.getColor();if(i&&s)p=Utils_1.ColorUtils.mix(i,s,t.size.value,a.size.value);else{const t=null!=i?i:s;if(!t)return;p=Utils_1.ColorUtils.hslToRgb(t)}}else p=s}const U=null!==(n=t.linksWidth)&&void 0!==n?n:e.retina.linksWidth;Utils_1.CanvasUtils.drawLinkTriangle(C,U,d,g,v,l.backgroundMask.enable,p,h)}drawLinkLine(t,i){var s;const o=this.container,n=o.options,e=i.destination;let l=i.opacity;const a=t.getPosition(),r=e.getPosition(),c=this.context;if(!c)return;let h;const d=t.particlesOptions.twinkle.lines;if(d.enable){const t=d.frequency,i=Utils_1.ColorUtils.colorToRgb(d.color);Math.random()<t&&void 0!==i&&(h=i,l=d.opacity)}if(!h){const i=t.particlesOptions.links,s=void 0!==i.id?o.particles.linksColors[i.id]:o.particles.linksColor;if(s===Utils_1.Constants.randomColorValue)h=Utils_1.ColorUtils.getRandomRgbColor();else if("mid"===s){const i=t.getColor(),s=e.getColor();if(i&&s)h=Utils_1.ColorUtils.mix(i,s,t.size.value,e.size.value);else{const t=null!=i?i:s;if(!t)return;h=Utils_1.ColorUtils.hslToRgb(t)}}else h=s}const g=null!==(s=t.linksWidth)&&void 0!==s?s:o.retina.linksWidth;Utils_1.CanvasUtils.drawLinkLine(c,g,a,r,t.particlesOptions.links.distance,o.canvas.size,t.particlesOptions.links.warp,n.backgroundMask.enable,h,l,t.particlesOptions.links.shadow)}drawConnectLine(t,i){var s;const o=this.lineStyle(t,i);if(!o)return;const n=this.context;if(!n)return;const e=t.getPosition(),l=i.getPosition();Utils_1.CanvasUtils.drawConnectLine(n,null!==(s=t.linksWidth)&&void 0!==s?s:this.container.retina.linksWidth,o,e,l)}drawGrabLine(t,i,s,o){var n;const e=this.container,l=e.canvas.context;if(!l)return;const a=t.getPosition();Utils_1.CanvasUtils.drawGrabLine(l,null!==(n=t.linksWidth)&&void 0!==n?n:e.retina.linksWidth,a,o,i,s)}drawParticle(t,i){var s,o;const n=t.getColor();if(void 0===n)return;const e=this.container.options,l=t.particlesOptions.twinkle.particles,a=l.frequency,r=Utils_1.ColorUtils.colorToRgb(l.color),c=l.enable&&Math.random()<a,h=null!==(s=t.bubble.radius)&&void 0!==s?s:t.size.value,d=c?l.opacity:null!==(o=t.bubble.opacity)&&void 0!==o?o:t.opacity.value,g=t.infectionStage,v=e.infection.stages,C=void 0!==g?v[g].color:void 0,p=Utils_1.ColorUtils.colorToRgb(C),U=c&&void 0!==r?r:null!=p?p:Utils_1.ColorUtils.hslToRgb(n),u=void 0!==U?Utils_1.ColorUtils.getStyleFromRgb(U,d):void 0;if(this.context&&u){if(t.links.length>0){this.context.save();for(const i of t.links){if(t.particlesOptions.links.triangles.enable){const s=t.links.map(t=>t.destination),o=i.destination.links.filter(t=>s.indexOf(t.destination)>=0);if(o.length)for(const s of o)this.drawLinkTriangle(t,i,s)}this.drawLinkLine(t,i)}this.context.restore()}Utils_1.CanvasUtils.drawParticle(this.container,this.context,t,i,u,e.backgroundMask.enable,h,d,t.particlesOptions.shadow)}}drawPlugin(t,i){this.context&&Utils_1.CanvasUtils.drawPlugin(this.context,t,i)}paintBase(t){this.context&&Utils_1.CanvasUtils.paintBase(this.context,this.size,t)}lineStyle(t,i){const s=this.container.options.interactivity.modes.connect;if(this.context)return Utils_1.CanvasUtils.gradient(this.context,t,i,s.links.opacity)}initBackground(){const t=this.container.options.background,i=this.element;if(!i)return;const s=i.style;if(t.color){const i=Utils_1.ColorUtils.colorToRgb(t.color);i&&(s.backgroundColor=Utils_1.ColorUtils.getStyleFromRgb(i,t.opacity))}t.image&&(s.backgroundImage=t.image),t.position&&(s.backgroundPosition=t.position),t.repeat&&(s.backgroundRepeat=t.repeat),t.size&&(s.backgroundSize=t.size)}}exports.Canvas=Canvas;