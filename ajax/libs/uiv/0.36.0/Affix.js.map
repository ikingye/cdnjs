{"version":3,"file":"Affix.js","sources":["../src/utils/objectUtils.js","../src/utils/domUtils.js","../src/directives/scroll.js","../src/components/affix/Affix.vue"],"sourcesContent":["export function isExist (obj) {\n  return typeof obj !== 'undefined' && obj !== null\n}\n\nexport function isFunction (obj) {\n  return typeof obj === 'function'\n}\n\nexport function isNumber (obj) {\n  return typeof obj === 'number'\n}\n\nexport function isString (obj) {\n  return typeof obj === 'string'\n}\n\nexport function isBoolean (obj) {\n  return typeof obj === 'boolean'\n}\n\nexport function isPromiseSupported () {\n  return typeof window !== 'undefined' && isExist(window.Promise)\n}\n","import {isExist, isString, isFunction} from './objectUtils'\n\nexport const EVENTS = {\n  MOUSE_ENTER: 'mouseenter',\n  MOUSE_LEAVE: 'mouseleave',\n  MOUSE_DOWN: 'mousedown',\n  MOUSE_UP: 'mouseup',\n  FOCUS: 'focus',\n  BLUR: 'blur',\n  CLICK: 'click',\n  INPUT: 'input',\n  KEY_DOWN: 'keydown',\n  KEY_UP: 'keyup',\n  KEY_PRESS: 'keypress',\n  RESIZE: 'resize',\n  SCROLL: 'scroll',\n  TOUCH_START: 'touchstart',\n  TOUCH_END: 'touchend'\n}\n\nexport const TRIGGERS = {\n  CLICK: 'click',\n  HOVER: 'hover',\n  FOCUS: 'focus',\n  HOVER_FOCUS: 'hover-focus',\n  OUTSIDE_CLICK: 'outside-click',\n  MANUAL: 'manual'\n}\n\nexport const PLACEMENTS = {\n  TOP: 'top',\n  RIGHT: 'right',\n  BOTTOM: 'bottom',\n  LEFT: 'left'\n}\n\nexport function isIE11 () {\n  return !!window.MSInputMethodContext && !!document.documentMode\n}\n\nexport function isIE10 () {\n  return window.navigator.appVersion.indexOf('MSIE 10') !== -1\n}\n\nexport function getComputedStyle (el) {\n  return window.getComputedStyle(el)\n}\n\nexport function getViewportSize () {\n  let width = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\n  let height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)\n  return {width, height}\n}\n\nlet scrollbarWidth = null\nlet savedScreenSize = null\n\nexport function getScrollbarWidth (recalculate = false) {\n  let screenSize = getViewportSize()\n  // return directly when already calculated & not force recalculate & screen size not changed\n  if (scrollbarWidth !== null && !recalculate &&\n    screenSize.height === savedScreenSize.height && screenSize.width === savedScreenSize.width) {\n    return scrollbarWidth\n  }\n  if (document.readyState === 'loading') {\n    return null\n  }\n  const div1 = document.createElement('div')\n  const div2 = document.createElement('div')\n  div1.style.width = div2.style.width = div1.style.height = div2.style.height = '100px'\n  div1.style.overflow = 'scroll'\n  div2.style.overflow = 'hidden'\n  document.body.appendChild(div1)\n  document.body.appendChild(div2)\n  scrollbarWidth = Math.abs(div1.scrollHeight - div2.scrollHeight)\n  document.body.removeChild(div1)\n  document.body.removeChild(div2)\n  // save new screen size\n  savedScreenSize = screenSize\n  return scrollbarWidth\n}\n\nexport function on (element, event, handler) {\n  element.addEventListener(event, handler)\n}\n\nexport function off (element, event, handler) {\n  element.removeEventListener(event, handler)\n}\n\nexport function isElement (el) {\n  return el && el.nodeType === Node.ELEMENT_NODE\n}\n\nexport function removeFromDom (el) {\n  isElement(el) && isElement(el.parentNode) && el.parentNode.removeChild(el)\n}\n\nexport function ensureElementMatchesFunction () {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches =\n      Element.prototype.matchesSelector ||\n      Element.prototype.mozMatchesSelector ||\n      Element.prototype.msMatchesSelector ||\n      Element.prototype.oMatchesSelector ||\n      Element.prototype.webkitMatchesSelector ||\n      function (s) {\n        let matches = (this.document || this.ownerDocument).querySelectorAll(s)\n        let i = matches.length\n        while (--i >= 0 && matches.item(i) !== this) {\n        }\n        return i > -1\n      }\n  }\n}\n\nexport function addClass (el, className) {\n  if (!isElement(el)) {\n    return\n  }\n  if (el.className) {\n    let classes = el.className.split(' ')\n    if (classes.indexOf(className) < 0) {\n      classes.push(className)\n      el.className = classes.join(' ')\n    }\n  } else {\n    el.className = className\n  }\n}\n\nexport function removeClass (el, className) {\n  if (!isElement(el)) {\n    return\n  }\n  if (el.className) {\n    let classes = el.className.split(' ')\n    let newClasses = []\n    for (let i = 0, l = classes.length; i < l; i++) {\n      if (classes[i] !== className) {\n        newClasses.push(classes[i])\n      }\n    }\n    el.className = newClasses.join(' ')\n  }\n}\n\nexport function hasClass (el, className) {\n  if (!isElement(el)) {\n    return false\n  }\n  let classes = el.className.split(' ')\n  for (let i = 0, l = classes.length; i < l; i++) {\n    if (classes[i] === className) {\n      return true\n    }\n  }\n  return false\n}\n\nexport function setDropdownPosition (dropdown, trigger, options = {}) {\n  let doc = document.documentElement\n  let containerScrollLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0)\n  let containerScrollTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0)\n  let rect = trigger.getBoundingClientRect()\n  let dropdownRect = dropdown.getBoundingClientRect()\n  dropdown.style.right = 'auto'\n  dropdown.style.bottom = 'auto'\n  if (options.menuRight) {\n    dropdown.style.left = containerScrollLeft + rect.left + rect.width - dropdownRect.width + 'px'\n  } else {\n    dropdown.style.left = containerScrollLeft + rect.left + 'px'\n  }\n  if (options.dropup) {\n    dropdown.style.top = containerScrollTop + rect.top - dropdownRect.height - 4 + 'px'\n  } else {\n    dropdown.style.top = containerScrollTop + rect.top + rect.height + 'px'\n  }\n}\n\nexport function isAvailableAtPosition (trigger, popup, placement) {\n  let triggerRect = trigger.getBoundingClientRect()\n  let popupRect = popup.getBoundingClientRect()\n  let viewPortSize = getViewportSize()\n  let top = true\n  let right = true\n  let bottom = true\n  let left = true\n  switch (placement) {\n    case PLACEMENTS.TOP:\n      top = triggerRect.top >= popupRect.height\n      left = triggerRect.left + triggerRect.width / 2 >= popupRect.width / 2\n      right = triggerRect.right - triggerRect.width / 2 + popupRect.width / 2 <= viewPortSize.width\n      break\n    case PLACEMENTS.BOTTOM:\n      bottom = triggerRect.bottom + popupRect.height <= viewPortSize.height\n      left = triggerRect.left + triggerRect.width / 2 >= popupRect.width / 2\n      right = triggerRect.right - triggerRect.width / 2 + popupRect.width / 2 <= viewPortSize.width\n      break\n    case PLACEMENTS.RIGHT:\n      right = triggerRect.right + popupRect.width <= viewPortSize.width\n      top = triggerRect.top + triggerRect.height / 2 >= popupRect.height / 2\n      bottom = triggerRect.bottom - triggerRect.height / 2 + popupRect.height / 2 <= viewPortSize.height\n      break\n    case PLACEMENTS.LEFT:\n      left = triggerRect.left >= popupRect.width\n      top = triggerRect.top + triggerRect.height / 2 >= popupRect.height / 2\n      bottom = triggerRect.bottom - triggerRect.height / 2 + popupRect.height / 2 <= viewPortSize.height\n      break\n  }\n  return top && right && bottom && left\n}\n\nexport function setTooltipPosition (tooltip, trigger, placement, auto, appendToSelector, viewport) {\n  if (!isElement(tooltip) || !isElement(trigger)) {\n    return\n  }\n  const isPopover = tooltip && tooltip.className && tooltip.className.indexOf('popover') >= 0\n  let containerScrollTop\n  let containerScrollLeft\n  if (!isExist(appendToSelector) || appendToSelector === 'body') {\n    const doc = document.documentElement\n    containerScrollLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0)\n    containerScrollTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0)\n  } else {\n    const container = document.querySelector(appendToSelector)\n    containerScrollLeft = container.scrollLeft\n    containerScrollTop = container.scrollTop\n  }\n  // auto adjust placement\n  if (auto) {\n    // Try: right -> bottom -> left -> top\n    // Cause the default placement is top\n    let placements = [PLACEMENTS.RIGHT, PLACEMENTS.BOTTOM, PLACEMENTS.LEFT, PLACEMENTS.TOP]\n    // The class switch helper function\n    const changePlacementClass = (placement) => {\n      // console.log(placement)\n      placements.forEach(placement => {\n        removeClass(tooltip, placement)\n      })\n      addClass(tooltip, placement)\n    }\n    // No need to adjust if the default placement fits\n    if (!isAvailableAtPosition(trigger, tooltip, placement)) {\n      for (let i = 0, l = placements.length; i < l; i++) {\n        // Re-assign placement class\n        changePlacementClass(placements[i])\n        // Break if new placement fits\n        if (isAvailableAtPosition(trigger, tooltip, placements[i])) {\n          placement = placements[i]\n          break\n        }\n      }\n      changePlacementClass(placement)\n    }\n  }\n  // fix left and top for tooltip\n  let rect = trigger.getBoundingClientRect()\n  let tooltipRect = tooltip.getBoundingClientRect()\n  let top\n  let left\n  if (placement === PLACEMENTS.BOTTOM) {\n    top = containerScrollTop + rect.top + rect.height\n    left = containerScrollLeft + rect.left + rect.width / 2 - tooltipRect.width / 2\n  } else if (placement === PLACEMENTS.LEFT) {\n    top = containerScrollTop + rect.top + rect.height / 2 - tooltipRect.height / 2\n    left = containerScrollLeft + rect.left - tooltipRect.width\n  } else if (placement === PLACEMENTS.RIGHT) {\n    top = containerScrollTop + rect.top + rect.height / 2 - tooltipRect.height / 2\n    // https://github.com/wxsms/uiv/issues/272\n    // add 1px to fix above issue\n    left = containerScrollLeft + rect.left + rect.width + 1\n  } else {\n    top = containerScrollTop + rect.top - tooltipRect.height\n    left = containerScrollLeft + rect.left + rect.width / 2 - tooltipRect.width / 2\n  }\n  let viewportEl\n  // viewport option\n  if (isString(viewport)) {\n    viewportEl = document.querySelector(viewport)\n  } else if (isFunction(viewport)) {\n    viewportEl = viewport(trigger)\n  }\n  if (isElement(viewportEl)) {\n    const popoverFix = isPopover ? 11 : 0\n    const viewportReact = viewportEl.getBoundingClientRect()\n    const viewportTop = containerScrollTop + viewportReact.top\n    const viewportLeft = containerScrollLeft + viewportReact.left\n    const viewportBottom = viewportTop + viewportReact.height\n    const viewportRight = viewportLeft + viewportReact.width\n    // fix top\n    if (top < viewportTop) {\n      top = viewportTop\n    } else if (top + tooltipRect.height > viewportBottom) {\n      top = viewportBottom - tooltipRect.height\n    }\n    // fix left\n    if (left < viewportLeft) {\n      left = viewportLeft\n    } else if (left + tooltipRect.width > viewportRight) {\n      left = viewportRight - tooltipRect.width\n    }\n    // fix for popover pointer\n    if (placement === PLACEMENTS.BOTTOM) {\n      top -= popoverFix\n    } else if (placement === PLACEMENTS.LEFT) {\n      left += popoverFix\n    } else if (placement === PLACEMENTS.RIGHT) {\n      left -= popoverFix\n    } else {\n      top += popoverFix\n    }\n  }\n  // set position finally\n  tooltip.style.top = `${top}px`\n  tooltip.style.left = `${left}px`\n}\n\nexport function hasScrollbar (el) {\n  const SCROLL = 'scroll'\n  const hasVScroll = el.scrollHeight > el.clientHeight\n  const style = getComputedStyle(el)\n  return hasVScroll || style.overflow === SCROLL || style.overflowY === SCROLL\n}\n\nexport function toggleBodyOverflow (enable) {\n  const MODAL_OPEN = 'modal-open'\n  const body = document.body\n  if (enable) {\n    removeClass(body, MODAL_OPEN)\n    body.style.paddingRight = null\n  } else {\n    const browsersWithFloatingScrollbar = isIE10() || isIE11()\n    const documentHasScrollbar = hasScrollbar(document.documentElement) || hasScrollbar(document.body)\n    if (documentHasScrollbar && !browsersWithFloatingScrollbar) {\n      body.style.paddingRight = `${getScrollbarWidth()}px`\n    }\n    addClass(body, MODAL_OPEN)\n  }\n}\n\nexport function getClosest (el, selector) {\n  ensureElementMatchesFunction()\n  let parent\n  let _el = el\n  while (_el) {\n    parent = _el.parentElement\n    if (parent && parent.matches(selector)) {\n      return parent\n    }\n    _el = parent\n  }\n  return null\n}\n\nexport function getParents (el, selector, until = null) {\n  ensureElementMatchesFunction()\n  let parents = []\n  let parent = el.parentElement\n  while (parent) {\n    if (parent.matches(selector)) {\n      parents.push(parent)\n    } else if (until && (until === parent || parent.matches(until))) {\n      break\n    }\n    parent = parent.parentElement\n  }\n  return parents\n}\n\nexport function focus (el) {\n  if (!isElement(el)) {\n    return\n  }\n  el.getAttribute('tabindex') ? null : el.setAttribute('tabindex', '-1')\n  el.focus()\n}\n","import {EVENTS, on, off} from '../utils/domUtils'\nimport {isFunction} from '../utils/objectUtils'\n\nconst HANDLER = '_uiv_scroll_handler'\nconst events = [EVENTS.RESIZE, EVENTS.SCROLL]\n\nconst bind = (el, binding) => {\n  let callback = binding.value\n  if (!isFunction(callback)) {\n    return\n  }\n  unbind(el)\n  el[HANDLER] = callback\n  events.forEach(event => {\n    on(window, event, el[HANDLER])\n  })\n}\n\nconst unbind = (el) => {\n  events.forEach(event => {\n    off(window, event, el[HANDLER])\n  })\n  delete el[HANDLER]\n}\n\nconst update = (el, binding) => {\n  if (binding.value !== binding.oldValue) {\n    bind(el, binding)\n  }\n}\n\nexport default {bind, unbind, update}\n","<template>\n  <div class=\"hidden-print\">\n    <div :class=\"classes\" :style=\"styles\" v-scroll=\"onScroll\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\n  import scroll from './../../directives/scroll'\n\n  export default {\n    directives: {\n      scroll\n    },\n    props: {\n      offset: {\n        type: Number,\n        default: 0\n      }\n    },\n    data () {\n      return {\n        affixed: false\n      }\n    },\n    computed: {\n      classes () {\n        return {\n          affix: this.affixed\n        }\n      },\n      styles () {\n        return {\n          top: this.affixed ? this.offset + 'px' : null\n        }\n      }\n    },\n    methods: {\n      // from https://github.com/ant-design/ant-design/blob/master/components/affix/index.jsx#L20\n      onScroll () {\n        // if is hidden don't calculate anything\n        if (!(this.$el.offsetWidth || this.$el.offsetHeight || this.$el.getClientRects().length)) {\n          return\n        }\n        // get window scroll and element position to detect if have to be normal or affixed\n        let scroll = {}\n        let element = {}\n        const rect = this.$el.getBoundingClientRect()\n        const body = document.body\n        for (let type of ['Top', 'Left']) {\n          let t = type.toLowerCase()\n          scroll[t] = window['page' + (type === 'Top' ? 'Y' : 'X') + 'Offset']\n          element[t] = scroll[t] + rect[t] - (this.$el['client' + type] || body['client' + type] || 0)\n        }\n        let fix = scroll.top > element.top - this.offset\n        if (this.affixed !== fix) {\n          this.affixed = fix\n          if (this.affixed) {\n            this.$emit('affix')\n            this.$nextTick(() => {\n              this.$emit('affixed')\n            })\n          }\n        }\n      }\n    }\n  }\n</script>\n"],"names":["isFunction","obj","EVENTS","on","element","event","handler","addEventListener","off","removeEventListener","HANDLER","events","RESIZE","SCROLL","bind","el","binding","callback","value","forEach","window","unbind","update","oldValue","render","Number","affixed","offset","$el","offsetWidth","offsetHeight","getClientRects","length","scroll","rect","getBoundingClientRect","body","document","type","t","toLowerCase","fix","top","$emit","$nextTick"],"mappings":"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"}