!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Recorder=t():e.Recorder=t()}("undefined"!=typeof self?self:this,(function(){return function(e){var t={};function o(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(i,n,function(t){return e[t]}.bind(null,n));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";(function(t){const{version:i}=o(2);var n=t.AudioContext||t.webkitAudioContext,r=function(e={}){if(!r.isRecordingSupported())throw new Error("Recording is not supported in this browser");this.state="inactive",this.config=Object.assign({bufferLength:4096,encoderApplication:2049,encoderFrameSize:20,encoderPath:"encoderWorker.min.js",encoderSampleRate:48e3,maxFramesPerPage:40,mediaTrackConstraints:!0,monitorGain:0,numberOfChannels:1,recordingGain:1,resampleQuality:3,streamPages:!1,wavBitDepth:16},e),this.encodedSamplePosition=0};r.isRecordingSupported=function(){const e=t.navigator&&t.navigator.mediaDevices&&t.navigator.mediaDevices.getUserMedia;return n&&e&&t.WebAssembly},r.version=i,r.prototype.clearStream=function(){this.stream&&(this.stream.getTracks?this.stream.getTracks().forEach(e=>e.stop()):this.stream.stop(),delete this.stream),this.audioContext&&this.closeAudioContext&&(this.audioContext.close(),delete this.audioContext)},r.prototype.encodeBuffers=function(e){if("recording"===this.state){for(var t=[],o=0;o<e.numberOfChannels;o++)t[o]=e.getChannelData(o);this.encoder.postMessage({command:"encode",buffers:t})}},r.prototype.initAudioContext=function(e){e&&e.context?(this.audioContext=e.context,this.closeAudioContext=!1):(this.audioContext=new n,this.closeAudioContext=!0)},r.prototype.initAudioGraph=function(){this.encodeBuffers=function(){delete this.encodeBuffers},this.monitorGainNode=this.audioContext.createGain(),this.setMonitorGain(this.config.monitorGain),this.monitorGainNode.connect(this.audioContext.destination),this.recordingGainNode=this.audioContext.createGain(),this.setRecordingGain(this.config.recordingGain)},r.prototype.initSourceNode=function(e){return e&&e.context?t.Promise.resolve(e):t.navigator.mediaDevices.getUserMedia({audio:this.config.mediaTrackConstraints}).then(e=>(this.stream=e,this.audioContext.createMediaStreamSource(e)))},r.prototype.loadWorker=function(){if(!this.encoder){if(this.audioContext.audioWorklet)return this.audioContext.audioWorklet.addModule(this.config.encoderPath).then(()=>{this.encoderNode=new AudioWorkletNode(this.audioContext,"encoder-worklet",{numberOfOutputs:0}),this.encoder=this.encoderNode.port});console.log("audioWorklet support not detected. Falling back to scriptProcessor"),this.encoderNode=this.audioContext.createScriptProcessor(this.config.bufferLength,this.config.numberOfChannels,this.config.numberOfChannels),this.encoderNode.onaudioprocess=({inputBuffer:e})=>this.encodeBuffers(e),this.encoder=new t.Worker(this.config.encoderPath)}return Promise.resolve()},r.prototype.initWorker=function(){var e=(this.config.streamPages?this.streamPage:this.storePage).bind(this);return this.recordedPages=[],this.totalLength=0,this.loadWorker().then(()=>new Promise(t=>{var o=({data:i})=>{switch(i.message){case"ready":t();break;case"page":this.encodedSamplePosition=i.samplePosition,e(i.page);break;case"done":this.encoder.removeEventListener("message",o),this.finish()}};this.encoder.addEventListener("message",o),this.encoder.start&&this.encoder.start(),this.encoder.postMessage(Object.assign({command:"init",originalSampleRate:this.audioContext.sampleRate,wavSampleRate:this.audioContext.sampleRate},this.config))}))},r.prototype.pause=function(e){if("recording"===this.state)return this.state="paused",this.recordingGainNode.disconnect(),e&&this.config.streamPages?new Promise(e=>{var t=({data:o})=>{"flushed"===o.message&&(this.encoder.removeEventListener("message",t),this.onpause(),e())};this.encoder.addEventListener("message",t),this.encoder.start&&this.encoder.start(),this.encoder.postMessage({command:"flush"})}):(this.onpause(),Promise.resolve())},r.prototype.resume=function(){"paused"===this.state&&(this.state="recording",this.recordingGainNode.connect(this.encoderNode),this.onresume())},r.prototype.setRecordingGain=function(e){this.config.recordingGain=e,this.recordingGainNode&&this.audioContext&&this.recordingGainNode.gain.setTargetAtTime(e,this.audioContext.currentTime,.01)},r.prototype.setMonitorGain=function(e){this.config.monitorGain=e,this.monitorGainNode&&this.audioContext&&this.monitorGainNode.gain.setTargetAtTime(e,this.audioContext.currentTime,.01)},r.prototype.start=function(e){if("inactive"===this.state)return this.initAudioContext(e),this.initAudioGraph(),this.encodedSamplePosition=0,Promise.all([this.initSourceNode(e),this.initWorker()]).then(e=>{this.state="recording",this.encoder.postMessage({command:"getHeaderPages"}),this.sourceNode=e[0],this.sourceNode.connect(this.monitorGainNode),this.sourceNode.connect(this.recordingGainNode),this.recordingGainNode.connect(this.encoderNode),this.encoderNode.onaudioprocess&&this.encoderNode.connect(this.audioContext.destination),this.onstart()})},r.prototype.stop=function(){return"inactive"!==this.state?(this.state="inactive",this.monitorGainNode.disconnect(),this.encoderNode.disconnect(),this.recordingGainNode.disconnect(),this.sourceNode.disconnect(),this.clearStream(),new Promise(e=>{var t=({data:o})=>{"done"===o.message&&(this.encoder&&this.encoder.removeEventListener("message",t),e())};this.encoder.addEventListener("message",t),this.encoder.start&&this.encoder.start(),this.encoder.postMessage({command:"done"}),this.encoder.postMessage({command:"close"})})):Promise.resolve()},r.prototype.storePage=function(e){this.recordedPages.push(e),this.totalLength+=e.length},r.prototype.streamPage=function(e){this.ondataavailable(e)},r.prototype.finish=function(){if(!this.config.streamPages){var e=new Uint8Array(this.totalLength);this.recordedPages.reduce((function(t,o){return e.set(o,t),t+o.length}),0),this.ondataavailable(e)}this.onstop(),delete this.encoder},r.prototype.ondataavailable=function(){},r.prototype.onpause=function(){},r.prototype.onresume=function(){},r.prototype.onstart=function(){},r.prototype.onstop=function(){},e.exports=r}).call(this,o(1))},function(e,t){var o;o=function(){return this}();try{o=o||new Function("return this")()}catch(e){"object"==typeof window&&(o=window)}e.exports=o},function(e){e.exports=JSON.parse('{"name":"opus-recorder","version":"7.0.0","description":"A library for recording opus encoded audio","homepage":"https://github.com/chris-rudmin/opus-recorder","author":"Chris Rudmin","keywords":["Ogg","Opus","PCM","Decoder","Resampler","Streamer","Audio","Microphone","Recorder","Wav","Wave","WebAssembly"],"license":"MIT","main":"dist/recorder.min.js","files":["dist/"],"repository":{"type":"git","url":"git://github.com/chris-rudmin/opus-recorder.git"},"bugs":{"url":"https://github.com/chris-rudmin/opus-recorder/issues","email":"chris.rudmin@gmail.com"},"scripts":{"make":"make","test":"make test","webpack":"webpack"},"devDependencies":{"chai":"^4.2.0","mocha":"^8.0.1","promise":"^8.1.0","require-uncached":"^2.0.0","sinon":"^9.0.2","sinon-chai":"^3.5.0","webpack":"^4.43.0","webpack-cli":"^3.3.12"},"dependencies":{}}')}])}));