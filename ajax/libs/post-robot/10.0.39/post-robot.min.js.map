{"version":3,"sources":["webpack://postRobot/webpack/universalModuleDefinition","webpack://postRobot/webpack/bootstrap","webpack://postRobot/./node_modules/cross-domain-utils/src/util.js","webpack://postRobot/./node_modules/cross-domain-utils/src/constants.js","webpack://postRobot/./node_modules/cross-domain-utils/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/exceptions.js","webpack://postRobot/./node_modules/zalgo-promise/src/flush.js","webpack://postRobot/./node_modules/zalgo-promise/src/promise.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://postRobot/./node_modules/belter/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://postRobot/./src/global.js","webpack://postRobot/./node_modules/belter/src/dom.js","webpack://postRobot/./src/lib/hello.js","webpack://postRobot/./src/conf/constants.js","webpack://postRobot/./src/lib/windows.js","webpack://postRobot/./node_modules/universal-serialize/src/common.js","webpack://postRobot/./node_modules/universal-serialize/src/constants.js","webpack://postRobot/./node_modules/universal-serialize/src/serialize.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/function.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/error.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/promise.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/regex.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/date.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/array.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/object.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/string.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/number.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/null.js","webpack://postRobot/./node_modules/universal-serialize/src/deserialize.js","webpack://postRobot/./src/serialize/window.js","webpack://postRobot/./src/bridge/common.js","webpack://postRobot/./src/serialize/function.js","webpack://postRobot/./src/serialize/serialize.js","webpack://postRobot/./src/serialize/promise.js","webpack://postRobot/./src/drivers/send/strategies.js","webpack://postRobot/./src/drivers/send/index.js","webpack://postRobot/./src/drivers/listeners.js","webpack://postRobot/./src/drivers/receive/types.js","webpack://postRobot/./src/drivers/receive/index.js","webpack://postRobot/./src/public/on.js","webpack://postRobot/./src/public/send.js","webpack://postRobot/./src/conf/config.js","webpack://postRobot/./src/setup.js","webpack://postRobot/./src/types.js","webpack://postRobot/./src/clean.js","webpack://postRobot/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","isRegex","item","toString","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","window","location","protocol","getParent","parent","err","getOpener","opener","canReadFromWindow","getActualDomain","Error","PROTOCOL","host","getDomain","domain","mockDomain","indexOf","isSameDomain","desc","getOwnPropertyDescriptor","isActuallySameDomain","assertSameDomain","isAncestorParent","child","childParent","result","push","getParents","getFrames","frames","len","length","frame","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","top","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getAncestor","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","isWindow","obj","Window","__cross_domain_utils_window_check__","closeWindow","close","isPromise","Promise","constructor","then","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","resolved","rejected","errorHandled","error","handlers","dispatching","stack","isAsync","res","reject","dispatch","setTimeout","j","dispatchPossiblyUnhandledError","asyncReject","chain","firstPromise","secondPromise","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","clearTimeout","toPromise","TypeError","all","promises","count","results","prom","hash","awaitPromises","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","apply","delay","flush","objectIDs","CrossDomainSafeWeakMap","weakmap","keys","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","uniqueID","chars","replace","charAt","floor","str","btoa","encodeURIComponent","p1","String","fromCharCode","parseInt","Buffer","from","base64encode","Date","toISOString","slice","toLowerCase","serializeArgs","subkey","val","uid","getObjectID","memoizePromise","fn","cache","memoizedPromiseFunction","arguments","reset","__name__","displayName","setFunctionName","noop","stringifyError","level","newErr","getGlobal","prototype","getObj","globalStore","defStore","store","storeKey","defVal","del","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","resolveHelloPromise","helloPromises","existingPromise","newPromise","sayHello","send","instanceID","data","getWindowInstanceID","markWindowKnown","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","code","source","toJSON","defaultSerializers","DESERIALIZER","RegExp","defaultDeserializers","cleanupProxyWindows","idToProxyWindow","id","shouldClean","getSerializedWindow","winPromise","windowNamePromise","windowTypePromise","getType","getName","focus","isClosed","setLocation","href","setName","sameDomain","frameElement","document","querySelectorAll","getFrameForWindow","setAttribute","body","interval","setInterval","clearInterval","ProxyWindow","serializedWindow","isProxyWindow","actualWindow","actualWindowPromise","getID","setWindow","isPopup","isPopupPromise","getNamePromise","reopenPromise","open","focusPromise","getWindow","awaitWindow","matchWindow","proxyInstanceID","knownWindowInstanceID","unwrap","serialize","toProxyWindow","deserialize","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","on","meth","methodSource","arg","join","__id__","serializeMessage","serializers","serializer","serializePromise","deserializeMessage","deserializers","parse","deserializer","serializedPromise","deserializePromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","fireAndForget","__origin__","__source__","deserializeFunction","SEND_MESSAGE_STRATEGIES","sendMessage","domainBuffer","buffer","serializedMessage","strategies","errors","strategyName","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","listener","regex","postMessage","RECEIVE_MESSAGE_TYPES","options","logName","sendResponse","ack","pathname","handleError","receiveMessage","event","receivedMessages","messages","parsedMessage","parseMessages","deserializeMessages","requestListener","addRequestListener","listenersCollection","existingListener","regexListeners","regexListener","strDomain","errorHandler","once","domainMatcher","responseTimeout","childTimeout","validateOptions","actualParent","getAllChildFrames","getTop","isAncestor","getHelloPromise","awaitWindowHello","targetDomain","actualDomain","normalizedDomain","normalizeDomain","responseListener","addResponseListener","reqPromises","markResponseListenerErrored","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cancelled","max","loop","internalSerializeMessage","internalDeserializeMessage","createProxyWindow","setup","initialized","addEventListener","sourceElement","originalEvent","messageListener","removeEventListener","listenForMessages","initHello","destroy","responseListeners","cancelResponseListeners","TYPES","cleanUpWindow"],"mappings":"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","file":"post-robot.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"postRobot\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postRobot\"] = factory();\n\telse\n\t\troot[\"postRobot\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win? : SameDomainWindowType = window) : string {\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win? : SameDomainWindowType = window) : string {\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    let result = [ ...getAllChildFrames(top), top ];\n\n    // Win may be in shadow dom\n    if (result.indexOf(win) === -1) {\n        result = [ ...result, win, ...getAllChildFrames(win) ];\n    }\n\n    return result;\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        let parent = frame;\n\n        while (parent.parentNode && parent.parentNode !== parent) {\n            parent = parent.parentNode;\n        }\n\n        // $FlowFixMe\n        if (!parent.host || !doc.documentElement.contains(parent.host)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getOpener(win));\n}\n\nexport function isIframe(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getParent(win));\n}\n\nexport function isFullpage(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(!isIframe(win) && !isPopup(win));\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if ('postMessage' in obj && 'self' in obj && 'location' in obj) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getFrameForWindow(win : CrossDomainWindowType) : ?HTMLElement {\n    if (isSameDomain(win)) {\n        return assertSameDomain(win).frameElement;\n    }\n\n    for (const frame of document.querySelectorAll('iframe')) {\n        if (frame && frame.contentWindow && frame.contentWindow === win) {\n            return frame;\n        }\n    }\n}\n","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.Window === 'function' && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.constructor === 'function' && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers : Array<(mixed, promise? : ZalgoPromise<mixed>) => void> = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<mixed>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        const chain = <T>(firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                secondPromise.resolve(res);\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    chain(result, promise);\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        const chain = <T>(i : number, firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                results[i] = res;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            chain(i, ZalgoPromise.resolve(prom), promise);\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : Object>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        let awaitPromises = [];\n\n        for (const key in promises) {\n            if (promises.hasOwnProperty(key)) {\n                let value = promises[key];\n\n                if (isPromise(value)) {\n                    awaitPromises.push(value.then(res => {\n                        result[key] = res;\n                    }));\n                } else {\n                    result[key] = value;\n                }\n            }\n        }\n        \n        return ZalgoPromise.all(awaitPromises).then(() => result);\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : ?WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let name = this.name;\n                let entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    Object.defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let values = this.values;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function getFunctionName <T : Function>(fn : T) : string {\n    return fn.name || fn.__name__ || fn.displayName || 'anonymous';\n}\n\nexport function setFunctionName <T : Function>(fn : T, name : string) : T {\n    try {\n        delete fn.name;\n        fn.name = name;\n    } catch (err) {\n        // pass\n    }\n\n    fn.__name__ = fn.displayName = name;\n    return fn;\n}\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (m, p1) => {\n            return String.fromCharCode(parseInt(p1, 16));\n        }));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof atob === 'function') {\n        return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n            // eslint-disable-next-line prefer-template\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    const chars = '0123456789abcdef';\n\n    const randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    const timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : $ReadOnlyArray<T>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\ntype MemoizeOptions = {|\n    name? : string,\n    time? : number,\n    thisNamespace? : boolean\n|};\n\nconst getDefaultMemoizeOptions = () : MemoizeOptions => {\n    // $FlowFixMe\n    return {};\n};\n\nconst memoizedFunctions = [];\n\nexport function memoize<F : Function>(method : F, options? : MemoizeOptions = getDefaultMemoizeOptions()) : F & {| reset : () => void |} {\n    const cacheMap = new WeakMap();\n\n    const memoizedFunction = function memoizedFunction(...args) : mixed {\n        const cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        const key : string = serializeArgs(args);\n\n        const cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        const time  = Date.now();\n        const value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    };\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    memoizedFunctions.push(memoizedFunction);\n\n    // $FlowFixMe\n    const result : F = memoizedFunction;\n\n    return setFunctionName(result, `${ options.name || getFunctionName(method) }::memoized`);\n}\n\nmemoize.clear = () => {\n    for (const memoizedFunction of memoizedFunctions) {\n        memoizedFunction.reset();\n    }\n};\n\nexport function promiseIdentity<T : mixed>(item : ZalgoPromise<T> | T) : ZalgoPromise<T> {\n    // $FlowFixMe\n    return ZalgoPromise.resolve(item);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : $ReadOnlyArray<any>) : ZalgoPromise<R> {\n        const key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = ZalgoPromise.try(() => method.apply(this, arguments))\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return setFunctionName(memoizedPromiseFunction, `${ getFunctionName(method) }::promiseMemoized`);\n}\n\ntype PromisifyOptions = {|\n    name ? : string\n|};\n\nconst getDefaultPromisifyOptions = () : PromisifyOptions => {\n    // $FlowFixMe\n    return {};\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : $ReadOnlyArray<any>) => R, options : PromisifyOptions = getDefaultPromisifyOptions()) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return setFunctionName(promisifiedFunction, `${ getFunctionName(method) }::promisified`);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : $ReadOnlyArray<any>) => R, logic : (...args : $ReadOnlyArray<any>) => R, args : $ReadOnlyArray<any> = []) : R {\n    // $FlowFixMe\n    const cache : {| [string] : R |} = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    const key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    const result = cache[key] = logic(...args);\n\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : $ReadOnlyArray<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    const onceFunction = function() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n\n    return setFunctionName(onceFunction, `${ getFunctionName(method) }::once`);\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    const regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            const stack = err && err.stack;\n            const message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) {\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    const defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    const index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    const original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (const key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : $ReadOnlyArray<T> {\n    const result = [];\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : $ReadOnlyArray<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : $ReadOnlyArray<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : $ReadOnlyArray<T> {\n    const results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    const result = {};\n\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : $ReadOnlyArray<string> {\n    const result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    const promiseDebounced = function() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        const localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n\n    return setFunctionName(promiseDebounced, `${ getFunctionName(method) }::promiseDebounced`);\n}\n\nexport function safeInterval(method : Function, time : number) : {| cancel : () => void |} {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    const result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, -2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        const parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            const isLast = (i + 1 === parts.length);\n            const isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (part === 'constructor' || part === 'prototype' || part === '__proto__') {\n                throw new Error(`Disallowed key: ${ part }`);\n            }\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {|\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    reset : () => void\n|};\n\nexport function eventEmitter() : EventEmitterType {\n    const triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            const handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            const listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            const handlerList = handlers[eventName];\n            const promises = [];\n\n            if (handlerList) {\n                for (const handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        },\n\n        reset() {\n            handlers = {};\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    const pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    const interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | $ReadOnlyArray<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            const value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : $ReadOnlyArray<T> { // eslint-disable-line no-undef\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    const constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    const prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : $ReadOnlyArray<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        const length = item.length;\n        const result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                const itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                const el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        const result = {};\n\n        for (const key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                const itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                const el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        const descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {|\n    text : string,\n    groups : $ReadOnlyArray<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n|};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    const result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    const index : number = result.index;\n    const regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : $ReadOnlyArray<RegexResultType> {\n\n    const matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : $ReadOnlyArray<mixed>) => T, time : number = 100) : (...args : $ReadOnlyArray<mixed>) => void {\n\n    let timeout;\n\n    const debounceWrapper = function() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n\n    return setFunctionName(debounceWrapper, `${ getFunctionName(method) }::debounced`);\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport const weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : $ReadOnlyArray<any>) => R) => {\n\n    const weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport const weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) => {\n\n    const weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            }));\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.shift();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\n// eslint-disable-next-line flowtype/no-mutable-array\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n                            \n    return thing;\n}\n\nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\nexport function deleteGlobal() {\n    delete window[__POST_ROBOT__.__GLOBAL_KEY__];\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            const interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        const params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : {| query? : { [string] : string }, hash? : { [string] : string } |}) : string {\n\n    const query = options.query || {};\n    const hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    const queryString = extendQuery(originalQuery, query);\n    const hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    const meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function getPerformance() : ?Performance {\n    return inlineMemoize(getPerformance, () : ?Performance => {\n        const performance = window.performance;\n\n        if (\n            performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        ) {\n            return performance;\n        }\n    });\n}\n\nexport function enablePerformance() : boolean {\n    return Boolean(getPerformance());\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n        const performance = getPerformance();\n\n        if (!performance) {\n            return;\n        }\n        \n        const timing = performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : $ReadOnlyArray<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER || event.keyCode === KEY_CODES.SPACE) { // eslint-disable-line unicorn/prefer-event-key\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : {| host? : string, path : string |}) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        const url = `${ host }${ path }`;\n        const scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (const script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            const src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                const value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                const result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : $ReadOnlyArray<{| country? : string, lang : string |}> {\n    const nav = window.navigator; // eslint-disable-line compat/compat\n\n    const locales = nav.languages\n        ? [ ...nav.languages ]\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            const [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    const element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        const name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        const interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    const { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    if (width && height) {\n        // $FlowFixMe\n        options = {\n            top,\n            left,\n            width,\n            height,\n            status:     1,\n            toolbar:    0,\n            menubar:    0,\n            resizable:  1,\n            scrollbars: 1,\n            ...options\n        };\n    }\n\n    const name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    const params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key] !== null && options[key] !== undefined) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        const err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    const tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    const documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {|\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?$ReadOnlyArray<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n|};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        const promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    const promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nconst getDefaultCreateElementOptions = () : ElementOptionsType => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = getDefaultCreateElementOptions(), container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    const element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (const key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\ntype StringMap = {|\n    [ string ] : string\n|};\n\nexport type IframeElementOptionsType = {|\n    style? : StringMap,\n    class? : ?$ReadOnlyArray<string>,\n    attributes? : StringMap,\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n|};\n\nconst getDefaultIframeOptions = () : IframeElementOptionsType => {\n    // $FlowFixMe\n    return {};\n};\n\nconst getDefaultStringMap = () : StringMap => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function iframe(options : IframeElementOptionsType = getDefaultIframeOptions(), container : ?HTMLElement) : HTMLIFrameElement {\n\n    const attributes = options.attributes || getDefaultStringMap();\n    const style = options.style || getDefaultStringMap();\n\n    // $FlowFixMe\n    const newAttributes = {\n        allowTransparency: 'true',\n        ...attributes\n    };\n\n    // $FlowFixMe\n    const newStyle = {\n        backgroundColor: 'transparent',\n        border:          'none',\n        ...style\n    };\n\n    const frame = createElement('iframe', {\n        attributes: newAttributes,\n        style:      newStyle,\n        html:       options.html,\n        class:      options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i); // eslint-disable-line compat/compat\n\n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        const el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : $ReadOnlyArray<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (const eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (const eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    const capitalizedName = capitalizeFirstLetter(name);\n\n    for (const prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        const el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        // eslint-disable-next-line prefer-const\n        let startTimeout;\n        let endTimeout;\n        // eslint-disable-next-line prefer-const\n        let startEvent;\n        // eslint-disable-next-line prefer-const\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', 'hidden', 'important');\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', 'none', 'important');\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    const animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (const script of querySelectorAll('script', el)) {\n        const parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        const newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({| width : number, height : number |}) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {| cancel : () => void |} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    const check = () => {\n        const newWidth = el.offsetWidth;\n        const newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        const loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function getResourceLoadTime(url : string) : ?number {\n    const performance = getPerformance();\n\n    if (!performance) {\n        return;\n    }\n\n    if (typeof performance.getEntries !== 'function') {\n        return;\n    }\n\n    const entries = performance.getEntries();\n\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n\n        if (entry && entry.name && entry.name.indexOf(url) === 0 && typeof entry.duration === 'number') {\n            return Math.floor(entry.duration);\n        }\n    }\n}\n\nexport function isShadowElement(element : Node) : boolean {\n    while (element.parentNode) {\n        element = element.parentNode;\n    }\n\n    return element.toString() === '[object ShadowRoot]';\n}\n\nexport function getShadowRoot(element : Node) : ?Node {\n    while (element.parentNode) {\n        element = element.parentNode;\n    }\n\n    if (isShadowElement(element)) {\n        return element;\n    }\n}\n\nexport function getShadowHost(element : Node) : ?HTMLElement {\n    const shadowRoot = getShadowRoot(element);\n\n    // $FlowFixMe\n    if (shadowRoot.host) {\n        // $FlowFixMe\n        return shadowRoot.host;\n    }\n}\n\nexport function insertShadowSlot(element : HTMLElement) : HTMLElement {\n    const shadowHost = getShadowHost(element);\n\n    if (!shadowHost) {\n        throw new Error(`Element is not in shadow dom`);\n    }\n\n    if (isShadowElement(shadowHost)) {\n        throw new Error(`Host element is also in shadow dom`);\n    }\n\n    const slotName = `shadow-slot-${ uniqueID() }`;\n\n    const slot = document.createElement('slot');\n    slot.setAttribute('name', slotName);\n    element.appendChild(slot);\n    \n    const slotProvider = document.createElement('div');\n    slotProvider.setAttribute('slot', slotName);\n    shadowHost.appendChild(slotProvider);\n\n    return slotProvider;\n}\n\nexport function preventClickFocus(el : HTMLElement) {\n    const onFocus = (event : Event) => {\n        el.removeEventListener('focus', onFocus);\n        event.preventDefault();\n        el.blur();\n        return false;\n    };\n\n    el.addEventListener('mousedown', () => {\n        el.addEventListener('focus', onFocus);\n        setTimeout(() => {\n            el.removeEventListener('focus', onFocus);\n        }, 1);\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{| domain : string |}> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction resolveHelloPromise(win : CrossDomainWindowType, { domain }) : ZalgoPromise<{| domain : string |}> {\n    const helloPromises = windowStore('helloPromises');\n    const existingPromise = helloPromises.get(win);\n    if (existingPromise) {\n        existingPromise.resolve({ domain });\n    }\n    const newPromise = ZalgoPromise.resolve({ domain });\n    helloPromises.set(win, newPromise);\n    return newPromise;\n}\n\nfunction listenForHello({ on } : {| on : OnType |}) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        resolveHelloPromise(source, { domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : {| send : SendType |}) : ZalgoPromise<{| win : CrossDomainWindowType, domain : string, instanceID : string |}> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            resolveHelloPromise(win, { domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : {| send : SendType |}) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : {| on : OnType, send : SendType |}) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(err => {\n                if (__TEST__ && parent[__POST_ROBOT__.__GLOBAL_KEY__]) {\n                    throw err;\n                }\n            });\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{| domain : string |}> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nimport { serializeObject } from './object';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void,\n    data : mixed\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code, data } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code, data });\n}\n\nexport function deserializeError({ message, stack, code, data } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n\n    if (data) {\n        // $FlowFixMe\n        error.data = serializeObject(data);\n    }\n\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, closeWindow,\n    type DomainMatcher, getOpener, WINDOW_TYPE, isWindow, assertSameDomain, getFrameForWindow } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise, noop } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedWindowType = {|\n    id : string,\n    getType : () => ZalgoPromise<$Values<typeof WINDOW_TYPE>>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    getName : () => ZalgoPromise<?string>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nfunction getSerializedWindow(winPromise : ZalgoPromise<CrossDomainWindowType>, { send, id = uniqueID() } : {| send : SendType, id? : string |}) : SerializedWindowType {\n    \n    let windowNamePromise = winPromise.then(win => {\n        if (isSameDomain(win)) {\n            return assertSameDomain(win).name;\n        }\n    });\n    \n    const windowTypePromise = winPromise.then(window => {\n        if (!isWindowClosed(window)) {\n            return getOpener(window) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME;\n        } else {\n            throw new Error(`Window is closed, can not determine type`);\n        }\n    });\n\n    windowNamePromise.catch(noop);\n    windowTypePromise.catch(noop);\n\n    return {\n        id,\n        getType: () => {\n            return windowTypePromise;\n        },\n        getInstanceID: memoizePromise(() => winPromise.then(win => getWindowInstanceID(win, { send }))),\n        close:         () => winPromise.then(closeWindow),\n        getName:       () => winPromise.then(win => {\n            if (isWindowClosed(win)) {\n                return;\n            }\n\n            if (isSameDomain(win)) {\n                return assertSameDomain(win).name;\n            }\n\n            return windowNamePromise;\n        }),\n        focus:   () => winPromise.then(win => {\n            win.focus();\n        }),\n        isClosed: () => winPromise.then(win => {\n            return isWindowClosed(win);\n        }),\n        setLocation: (href) => winPromise.then(win => {\n            const domain = `${ window.location.protocol }//${ window.location.host }`;\n\n            if (href.indexOf('/') === 0) {\n                href = `${ domain }${ href }`;\n            } else if (!href.match(/^https?:\\/\\//) && href.indexOf(domain) !== 0) {\n                throw new Error(`Expected url to be http or https url, or absolute path, got ${ JSON.stringify(href) }`);\n            }\n\n            if (isSameDomain(win)) {\n                try {\n                    if (win.location && typeof win.location.replace === 'function') {\n                        // $FlowFixMe\n                        win.location.replace(href);\n                        return;\n                    }\n                } catch (err) {\n                    // pass\n                }\n            }\n\n            win.location = href;\n        }),\n        setName: (name) => winPromise.then(win => {\n            if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                linkWindow({ win, name });\n            }\n\n            const sameDomain = isSameDomain(win);\n            const frame = getFrameForWindow(win);\n\n            if (!sameDomain) {\n                throw new Error(`Can not set name for cross-domain window: ${ name }`);\n            }\n\n            assertSameDomain(win).name = name;\n            if (frame) {\n                frame.setAttribute('name', name);\n            }\n\n            windowNamePromise = ZalgoPromise.resolve(name);\n        })\n    };\n}\n\nexport class ProxyWindow {\n\n    id : string\n    isProxyWindow : true = true\n    serializedWindow : SerializedWindowType\n    actualWindow : ?CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n    name : string\n\n    constructor({ send, win, serializedWindow } : {| win? : CrossDomainWindowType, serializedWindow? : SerializedWindowType, send : SendType |}) {\n        this.actualWindowPromise = new ZalgoPromise();\n        this.serializedWindow = serializedWindow || getSerializedWindow(this.actualWindowPromise, { send });\n        \n        globalStore('idToProxyWindow').set(this.getID(), this);\n        if (win) {\n            this.setWindow(win, { send });\n        }\n    }\n\n    getID() : string {\n        return this.serializedWindow.id;\n    }\n\n    getType() : ZalgoPromise<$Values<typeof WINDOW_TYPE>> {\n        return this.serializedWindow.getType();\n    }\n\n    isPopup() : ZalgoPromise<boolean> {\n        return this.getType().then(type => {\n            return type === WINDOW_TYPE.POPUP;\n        });\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setLocation(href).then(() => this);\n    }\n\n    getName() : ZalgoPromise<?string> {\n        return this.serializedWindow.getName();\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setName(name).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.close().then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        const isPopupPromise = this.isPopup();\n        const getNamePromise = this.getName();\n\n        const reopenPromise = ZalgoPromise.hash({ isPopup: isPopupPromise, name: getNamePromise }).then(({ isPopup, name }) => {\n            if (isPopup && name) {\n                window.open('', name);\n            }\n        });\n        const focusPromise = this.serializedWindow.focus();\n\n        return ZalgoPromise.all([\n            reopenPromise,\n            focusPromise\n        ]).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return this.serializedWindow.isClosed();\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType, { send } : {| send : SendType |}) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(this.actualWindow);\n        this.serializedWindow = getSerializedWindow(this.actualWindowPromise, { send, id: this.getID() });\n        windowStore('winToProxyWindow').set(win, this);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType, { send } : {| send : SendType |}) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.hash({\n                proxyInstanceID:       this.getInstanceID(),\n                knownWindowInstanceID: getWindowInstanceID(win, { send })\n            }).then(({ proxyInstanceID, knownWindowInstanceID }) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win, { send });\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        return this.serializedWindow.getInstanceID();\n    }\n\n    shouldClean() : boolean {\n        return Boolean(this.actualWindow && isWindowClosed(this.actualWindow));\n    }\n\n    serialize() : SerializedWindowType {\n        return this.serializedWindow;\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : {| send : SendType |}) : SerializedWindowType {\n        cleanupProxyWindows();\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedWindowType, { send } : {| send : SendType |}) : ProxyWindow {\n        cleanupProxyWindows();\n        return globalStore('idToProxyWindow').get(serializedWindow.id) || new ProxyWindow({ serializedWindow, send });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : {| send : SendType |}) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        const actualWindow : CrossDomainWindowType = win;\n        \n        return windowStore('winToProxyWindow').get(actualWindow) || new ProxyWindow({ win: actualWindow, send });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedWindowType>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : {| send : SendType |}) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedWindowType, { send } : {| send : SendType |}) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { send });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : {| win? : CrossDomainWindowType, domain? : string |}) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\ntype SendMessageType = {|\n    (string) : void,\n    fireAndForget : (string) => void\n|};\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : SendMessageType) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex, arrayFrom } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction stringifyArguments(args : $ReadOnlyArray<mixed> = []) : string {\n    return arrayFrom(args).map(arg => {\n        if (typeof arg === 'string') {\n            return `'${ arg }'`;\n        }\n        if (arg === undefined) {\n            return 'undefined';\n        }\n        if (arg === null) {\n            return 'null';\n        }\n        if (typeof arg === 'boolean') {\n            return arg.toString();\n        }\n        if (Array.isArray(arg)) {\n            return '[ ... ]';\n        }\n        if (typeof arg === 'object') {\n            return '{ ... }';\n        }\n        if (typeof arg === 'function') {\n            return '() => { ... }';\n        }\n        return `<${ typeof arg }>`;\n    }).join(', ');\n}\n\nfunction listenForFunctionCalls({ on, send } : {| on : OnType, send : SendType |}) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : {| source : CrossDomainWindowType, origin : string, data : Object |}) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source, { send }).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    // $FlowFixMe\n                    if (err.stack) {\n                        // $FlowFixMe\n                        err.stack = `Remote call to ${ name }(${ stringifyArguments(data.args) }) failed\\n\\n${ err.stack }`;\n                    }\n\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {|\n    id : string,\n    name : string\n|}>;\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype SerializableFunction<T> = {\n    () : ZalgoPromise<T> | T,\n    __id__? : string,\n    __name__? : string\n};\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : SerializableFunction<T>, key : string, { on, send } : {| on : OnType, send : SendType |}) : SerializedFunction {\n    listenForFunctionCalls({ on, send });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    let name = val.__name__ || val.name || key;\n\n    if (typeof name === 'string' && typeof name.indexOf === 'function' && name.indexOf('anonymous::') === 0) {\n        name = name.replace('anonymous::', `${ key }::`);\n    }\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : {| id : string, name : string |}, { send } : {| send : SendType |}) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    const args = Array.prototype.slice.call(arguments);\n\n                    if (opts.fireAndForget) {\n                        return send(win, MESSAGE_NAME.METHOD, { id, name, args }, { domain: origin, fireAndForget: true });\n                    } else {\n                        return send(win, MESSAGE_NAME.METHOD, { id, name, args }, { domain: origin, fireAndForget: false })\n                            .then(res => res.data.result);\n                    }\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `Remote call to ${ name }(${ stringifyArguments(arguments) }) failed\\n\\n${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : {| on : OnType, send : SendType |}) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { send } : {| on : OnType, send : SendType |}) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {|\n    then : SerializedFunction\n|}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : {| on : OnType, send : SendType |}) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : {| then : Function |}) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n    if (domain.indexOf(PROTOCOL.FILE) === 0) {\n        domain = WILDCARD;\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n\n        if (domain.indexOf(PROTOCOL.MOCK) === 0) {\n            if (!isActuallySameDomain(win)) {\n                throw new Error(`Attempting to send message to mock domain ${ domain }, but window is actually cross-domain`);\n            }\n\n            // $FlowFixMe\n            const windowDomain = getDomain(win);\n                \n            if (windowDomain !== domain) {\n                throw new Error(`Mock domain target ${ domain } does not match window domain ${ windowDomain }`);\n            }\n\n            // $FlowFixMe\n            domain = getActualDomain(win);\n\n        }\n    }\n\n    win.postMessage(serializedMessage, domain);\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            throw new Error(`Bridge not needed for browser`);\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            throw new Error(`Global messaging not needed for browser`);\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { stringifyError, noop } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport { windowStore } from '../../global';\nimport type { Message, PackedMessages } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nfunction packMessages(messages : $ReadOnlyArray<Message>) : PackedMessages {\n    return {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: messages\n    };\n}\n\nexport function sendMessage(win : CrossDomainWindowType, domain : string, message : Message, { on, send } : {| on : OnType, send : SendType |}) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        const messageBuffer = windowStore();\n\n        const domainBuffer = messageBuffer.getOrSet(win, () => ({}));\n\n        domainBuffer.buffer = domainBuffer.buffer || [];\n        domainBuffer.buffer.push(message);\n\n        domainBuffer.flush = domainBuffer.flush || ZalgoPromise.flush().then(() => {\n            if (isWindowClosed(win)) {\n                throw new Error('Window is closed');\n            }\n\n            const serializedMessage = serializeMessage(win, domain, packMessages(domainBuffer.buffer || []), { on, send });\n            delete domainBuffer.buffer;\n\n            const strategies = Object.keys(SEND_MESSAGE_STRATEGIES);\n            const errors = [];\n\n            for (const strategyName of strategies) {\n                try {\n                    SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n                } catch (err) {\n                    errors.push(err);\n                }\n            }\n\n            if (errors.length === strategies.length) {\n                throw new Error(`All post-robot messaging strategies failed:\\n\\n${ errors.map((err, i) => `${ i }. ${ stringifyError(err) }`).join('\\n\\n') }`);\n            }\n        });\n\n        return domainBuffer.flush.then(() => {\n            delete domainBuffer.flush;\n        });\n    }).then(noop);\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({| source : CrossDomainWindowType, origin : string, data : mixed |}) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean,\n    cancelled? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function cancelResponseListeners() {\n    const responseListeners = globalStore('responseListeners');\n    for (const hash of responseListeners.keys()) {\n        const listener = responseListeners.get(hash);\n        if (listener) {\n            listener.cancelled = true;\n        }\n        responseListeners.del(hash);\n    }\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : {| name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) |}) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : {| name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher |}, listener : RequestListenerType) : {| cancel : () => void |} {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                delete nameListeners[name];\n            }\n\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, stringifyError, uniqueID } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, ResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : {| on : OnType, send : SendType |}) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendAck() : ZalgoPromise<void> {\n            return ZalgoPromise.flush().then(() => {\n                if (message.fireAndForget || isWindowClosed(source)) {\n                    return;\n                }\n\n                try {\n                    return sendMessage(source, origin, {\n                        id:     uniqueID(),\n                        origin: getDomain(window),\n                        type:   MESSAGE_TYPE.ACK,\n                        hash:   message.hash,\n                        name:   message.name\n                    }, { on, send });\n                } catch (err) {\n                    throw new Error(`Send ack message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n                }\n            });\n        }\n\n\n        function sendResponse(ack : $Values<typeof MESSAGE_ACK>, data : ?Object, error : ?mixed) : ZalgoPromise<void> {\n            return ZalgoPromise.flush().then(() => {\n                if (message.fireAndForget || isWindowClosed(source)) {\n                    return;\n                }\n\n                if (__DEBUG__) {\n                    if (ack === MESSAGE_ACK.SUCCESS) {\n                        console.info('respond::res', logName, origin, '\\n\\n', data);  // eslint-disable-line no-console\n                    } else if (ack === MESSAGE_ACK.ERROR) {\n                        console.error('respond::err', logName, origin, '\\n\\n', error); // eslint-disable-line no-console\n                    }\n                }\n\n                try {\n                    return sendMessage(source, origin, {\n                        id:     uniqueID(),\n                        origin: getDomain(window),\n                        type:   MESSAGE_TYPE.RESPONSE,\n                        hash:   message.hash,\n                        name:   message.name,\n                        ack,\n                        data,\n                        error\n                    }, { on, send });\n                } catch (err) {\n                    throw new Error(`Send response message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n                }\n            });\n        }\n\n    \n        return ZalgoPromise.all([\n            sendAck(),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_ACK.SUCCESS, data);\n\n            }, error => {\n                return sendResponse(MESSAGE_ACK.ERROR, null, error);\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        try {\n            if (!matchDomain(options.domain, origin)) {\n                throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n            }\n    \n            if (source !== options.win) {\n                throw new Error(`Ack source does not match registered window`);\n            }\n        } catch (err) {\n            options.promise.reject(err);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : ResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow, PROTOCOL  } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport type { Message } from '../types';\nimport { MESSAGE_TYPE } from '../../conf';\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction deserializeMessages(message : string, source : CrossDomainWindowType, origin : string, { on, send } : {| on : OnType, send : SendType |}) : ?$ReadOnlyArray<Message> {\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    const parseMessages = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!Array.isArray(parseMessages)) {\n        return;\n    }\n\n    return parseMessages;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : {| on : OnType, send : SendType |}) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    try {\n        if (!window || window.closed || !event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const messages = deserializeMessages(data, source, origin, { on, send });\n\n    if (!messages) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    for (const message of messages) {\n        if (receivedMessages.has(message.id)) {\n            return;\n        }\n\n        receivedMessages.set(message.id, true);\n\n        if (isWindowClosed(source) && !message.fireAndForget) {\n            return;\n        }\n\n        if (message.origin.indexOf(PROTOCOL.FILE) === 0) {\n            origin = `${ PROTOCOL.FILE }//`;\n        }\n\n        try {\n            if (message.type === MESSAGE_TYPE.REQUEST) {\n                RECEIVE_MESSAGE_TYPES[MESSAGE_TYPE.REQUEST](source, origin, message, { on, send });\n            } else if (message.type === MESSAGE_TYPE.RESPONSE) {\n                RECEIVE_MESSAGE_TYPES[MESSAGE_TYPE.RESPONSE](source, origin, message);\n            } else if (message.type === MESSAGE_TYPE.ACK) {\n                RECEIVE_MESSAGE_TYPES[MESSAGE_TYPE.ACK](source, origin, message);\n            }\n        } catch (err) {\n            setTimeout(() => {\n                throw err;\n            }, 0);\n        }\n    }\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : {| on : OnType, send : SendType |}) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : {| origin : string |}\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : {| on : OnType, send : SendType |}) {\n    ZalgoPromise.try(() => {\n        try {\n            noop(event.source);\n        } catch (err) {\n            return;\n        }\n\n        const source = event.source || event.sourceElement;\n        let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\n        const data = event.data;\n\n        if (origin === 'null') {\n            origin = `${ PROTOCOL.FILE }//`;\n        }\n\n        if (!source) {\n            return;\n        }\n\n        if (!origin) {\n            throw new Error(`Post message did not have origin domain`);\n        }\n\n        if (__TEST__) {\n            if (needsGlobalMessagingForBrowser() && isSameTopWindow(source, window) === false) {\n                return;\n            }\n        }\n\n        receiveMessage({ source, origin, data }, { on, send });\n    });\n}\n\nexport function listenForMessages({ on, send } : {| on : OnType, send : SendType |}) : CancelableType {\n    return globalStore().getOrSet('postMessageListener', () => {\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n\nexport function stopListenForMessages() {\n    const listener = globalStore().get('postMessageListener');\n    if (listener) {\n        listener.cancel();\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nconst getDefaultServerOptions = () : ServerOptionsType => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    options = options || getDefaultServerOptions();\n    if (typeof options === 'function') {\n        handler = options;\n        options = getDefaultServerOptions();\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : ZalgoPromise<{| source : mixed, origin : string, data : Object |}> {\n    \n    options = options || getDefaultServerOptions();\n    if (typeof options === 'function') {\n        handler = options;\n        options = getDefaultServerOptions();\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop, safeInterval, stringify, stringifyError } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN, RESPONSE_CYCLE_TIME } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { SendType } from '../types';\n\nimport { on } from './on';\n\nfunction validateOptions(name : string, win : CrossDomainWindowType, domain : ?DomainMatcher) {\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (domain) {\n        if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n            throw new TypeError(`Can not send ${ name }. Expected domain ${ JSON.stringify(domain) } to be a string, array, or regex`);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        throw new Error(`Can not send ${ name }. Target window is closed`);\n    }\n}\n\nfunction normalizeDomain(win : CrossDomainWindowType, targetDomain : DomainMatcher, actualDomain : ?string, { send } : {| send : SendType |}) : ZalgoPromise<string> {\n    return ZalgoPromise.try(() => {\n        if (typeof targetDomain === 'string') {\n            return targetDomain;\n        }\n\n        return ZalgoPromise.try(() => {\n            return actualDomain || sayHello(win, { send }).then(({ domain }) => domain);\n\n        }).then(normalizedDomain => {\n            if (!matchDomain(targetDomain, targetDomain)) {\n                throw new Error(`Domain ${ stringify(targetDomain) } does not match ${ stringify(targetDomain) }`);\n            }\n\n            return normalizedDomain;\n        });\n    });\n}\n\nexport const send : SendType = (win, name, data, options) => {\n    options = options || {};\n    const domainMatcher = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    // $FlowFixMe\n    return ZalgoPromise.try(() => {\n        validateOptions(name, win, domainMatcher);\n\n        if (isAncestor(window, win)) {\n            return awaitWindowHello(win, childTimeout);\n        }\n        \n    }).then(({ domain: actualDomain } = {}) => {\n\n        return normalizeDomain(win, domainMatcher, actualDomain, { send });\n    }).then(targetDomain => {\n        const domain = targetDomain;\n\n        const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n        if (__DEBUG__) {\n            console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n        }\n\n        const promise = new ZalgoPromise();\n        const hash = `${ name }_${ uniqueID() }`;\n\n        if (!fireAndForget) {\n            const responseListener : ResponseListenerType = { name, win, domain, promise };\n            addResponseListener(hash, responseListener);\n\n            const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n            reqPromises.push(promise);\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n        \n            const interval = safeInterval(() => {\n                if (isWindowClosed(win)) {\n                    return promise.reject(new Error(`Window closed for ${ name } before ${ responseListener.ack ? 'response' : 'ack' }`));\n                }\n\n                if (responseListener.cancelled) {\n                    return promise.reject(new Error(`Response listener was cancelled for ${ name }`));\n                }\n\n                ackTimeout = Math.max(ackTimeout - RESPONSE_CYCLE_TIME, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - RESPONSE_CYCLE_TIME, 0);\n                }\n\n                if (!responseListener.ack && ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ logName } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ logName } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n            }, RESPONSE_CYCLE_TIME);\n\n            promise.finally(() => {\n                interval.cancel();\n                reqPromises.splice(reqPromises.indexOf(promise, 1));\n            }).catch(noop);\n        }\n\n        return sendMessage(win, domain, {\n            id:     uniqueID(),\n            origin: getDomain(window),\n            type:   MESSAGE_TYPE.REQUEST,\n            hash,\n            name,\n            data,\n            fireAndForget\n        }, { on, send }).then(() => {\n            return fireAndForget ? promise.resolve() : promise;\n        }, err => {\n            throw new Error(`Send request message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n        });\n    });\n};\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\nexport const RESPONSE_CYCLE_TIME = 500;\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, stopListenForMessages, receiveMessage, setupGlobalReceiveMessage, cancelResponseListeners } from './drivers';\nimport { getGlobal, deleteGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function createProxyWindow(win? : CrossDomainWindowType) : ProxyWindow {\n    return new ProxyWindow({ send, win });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        setupGlobalReceiveMessage({ on, send });\n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n    }\n}\n\nexport function destroy() {\n    cancelResponseListeners();\n    stopListenForMessages();\n    deleteGlobal();\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from 'zalgo-promise/src';\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\n// export something to force webpack to see this as an ES module\nexport const TYPES = true;\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type CancelableType = {\n    cancel : () => void\n};\n\nexport type ErrorHandlerType = (err : mixed) => void;\n\nexport type HandlerType = ({|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : any // eslint-disable-line flowtype/no-weak-types\n|}) => (void | any | ZalgoPromise<any>); // eslint-disable-line flowtype/no-weak-types\n\nexport type ServerOptionsType = {|\n    handler? : ?HandlerType,\n    errorHandler? : ?ErrorHandlerType,\n    window? : CrossDomainWindowType,\n    name? : ?string,\n    domain? : ?DomainMatcher,\n    once? : ?boolean,\n    errorOnClose? : ?boolean\n|};\n\nexport type OnType = (\n    name : string,\n    options : ServerOptionsType | HandlerType,\n    handler : ?HandlerType\n) => CancelableType;\n\ntype RegularRequestOptionsType = {|\n    domain? : ?DomainMatcher,\n    fireAndForget? : false,\n    timeout? : ?number\n|};\n\ntype FireAndForgetRequestOptionsType = {|\n    domain? : ?DomainMatcher,\n    fireAndForget : true,\n    timeout? : ?number\n|};\n\nexport type RequestOptionsType = RegularRequestOptionsType | FireAndForgetRequestOptionsType;\n\nexport type ResponseMessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : Object\n|};\n\ntype RegularSendType = (\n    win : CrossDomainWindowType,\n    name : string,\n    data : ?Object,\n    options? : RegularRequestOptionsType\n) => ZalgoPromise<ResponseMessageEvent>;\n\ntype FireAndForgetSendType = (\n    win : CrossDomainWindowType,\n    name : string,\n    data : ?Object,\n    options? : FireAndForgetRequestOptionsType\n) => ZalgoPromise<void>;\n\nexport type SendType = RegularSendType & FireAndForgetSendType;\n\nexport type MessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string\n|};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type CrossDomainFunctionType<A, R> = {\n    (...args : A) : ZalgoPromise<R>,\n    fireAndForget : (...args : A) => ZalgoPromise<void>,\n    __id__? : string,\n    __name__? : string\n};\n\nexport type ReceiveMessageType = (MessageEvent, {| on : OnType, send : SendType |}) => void;\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindowClosed } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window ${ isWindowClosed(win) ? 'closed' : 'cleaned up' } before response`)).catch(noop);\n    }\n}\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, destroy, serializeMessage, deserializeMessage, createProxyWindow, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n"],"sourceRoot":""}