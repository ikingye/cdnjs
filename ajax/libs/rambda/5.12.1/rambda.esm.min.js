function F(){return!1}function T(){return!0}function add(t,n){return 1===arguments.length?n=>add(t,n):Number(t)+Number(n)}function curry(t,n=[]){return(...e)=>(n=>n.length>=t.length?t(...n):curry(t,n))([...n,...e])}function adjustFn(t,n,e){const r=t<0?e.length+t:t;if(t>=e.length||r<0)return e;const i=e.slice();return i[r]=n(i[r]),i}const adjust=curry(adjustFn);function all(t,n){if(1===arguments.length)return n=>all(t,n);for(let e=0;e<n.length;e++)if(!t(n[e],e))return!1;return!0}function allPass(t){return n=>{let e=0;for(;e<t.length;){if(!t[e](n))return!1;e++}return!0}}function always(t){return()=>t}function and(t,n){return 1===arguments.length?n=>and(t,n):t&&n}function any(t,n){if(1===arguments.length)return n=>any(t,n);let e=0;for(;e<n.length;){if(t(n[e],e))return!0;e++}return!1}function anyPass(t){return n=>{let e=0;for(;e<t.length;){if(t[e](n))return!0;e++}return!1}}function append(t,n){if(1===arguments.length)return n=>append(t,n);if("string"==typeof n)return`${n}${t}`;const e=n.slice();return e.push(t),e}const _isArray=Array.isArray;function __findHighestArity(t,n=0){for(const e in t)!1!==t.hasOwnProperty(e)&&"constructor"!==e&&("object"==typeof t[e]&&(n=Math.max(n,__findHighestArity(t[e]))),"function"==typeof t[e]&&(n=Math.max(n,t[e].length)));return n}function __filterUndefined(){const t=[];let n=0;const e=arguments.length;for(;n<e&&void 0!==arguments[n];)t[n]=arguments[n],n++;return t}function __applySpecWithArity(t,n,e){const r=n-e.length;if(1===r)return r=>__applySpecWithArity(t,n,__filterUndefined(...e,r));if(2===r)return(r,i)=>__applySpecWithArity(t,n,__filterUndefined(...e,r,i));if(3===r)return(r,i,u)=>__applySpecWithArity(t,n,__filterUndefined(...e,r,i,u));if(4===r)return(r,i,u,o)=>__applySpecWithArity(t,n,__filterUndefined(...e,r,i,u,o));if(r>4)return(...r)=>__applySpecWithArity(t,n,__filterUndefined(...e,...r));if(_isArray(t)){const r=[];let i=0;const u=t.length;for(;i<u;i++)("object"==typeof t[i]||_isArray(t[i]))&&(r[i]=__applySpecWithArity(t[i],n,e)),"function"==typeof t[i]&&(r[i]=t[i](...e));return r}const i={};for(const r in t)!1!==t.hasOwnProperty(r)&&"constructor"!==r&&("object"!=typeof t[r]?"function"==typeof t[r]&&(i[r]=t[r](...e)):i[r]=__applySpecWithArity(t[r],n,e));return i}function applySpec(t,...n){const e=__findHighestArity(t);return 0===e?()=>({}):__applySpecWithArity(t,e,n)}function assocFn(t,n,e){return Object.assign({},e,{[t]:n})}const assoc=curry(assocFn);function _isInteger(t){return t<<0===t}var _isInteger$1=Number.isInteger||_isInteger;function assocPathFn(t,n,e){const r="string"==typeof t?t.split("."):t;if(0===r.length)return n;const i=r[0];if(r.length>1){const t="object"!=typeof e||null===e||!e.hasOwnProperty(i)?_isInteger(parseInt(r[1],10))?[]:{}:e[i];n=assocPathFn(Array.prototype.slice.call(r,1),n,t)}return assoc(i,n,e)}const assocPath=curry(assocPathFn);function both(t,n){return 1===arguments.length?n=>both(t,n):(...e)=>t(...e)&&n(...e)}function chain(t,n){return 1===arguments.length?n=>chain(t,n):[].concat(...n.map(t))}function clampFn(t,n,e){if(t>n)throw new Error("min must not be greater than max in clamp(min, max, value)");return e>=t&&e<=n?e:e>n?n:e<t?t:void 0}const clamp=curry(clampFn);function clone(t){const n=_isArray(t)?Array(t.length):{};if(t&&t.getTime)return new Date(t.getTime());for(const e in t){const r=t[e];n[e]="object"==typeof r&&null!==r?r.getTime?new Date(r.getTime()):clone(r):r}return n}function complement(t){return(...n)=>!t(...n)}function compose(...t){if(0===t.length)throw new Error("compose requires at least one argument");return(...n)=>{const e=t.slice();if(e.length>0){let t=e.pop()(...n);for(;e.length>0;)t=e.pop()(t);return t}}}function concat(t,n){return 1===arguments.length?n=>concat(t,n):"string"==typeof t?`${t}${n}`:[...t,...n]}function cond(t){return n=>{let e,r=!1;return t.forEach(([t,i])=>{!r&&t(n)&&(r=!0,e=i(n))}),e}}function _curryN(t,n,e){return function(){let r=0,i=0;const u=n.length,o=arguments.length,c=new Array(u+o);for(;r<u;)c[r]=n[r],r++;for(;i<o;)c[u+i]=arguments[i],i++;const s=t-c.length;return c.length>=t?e.apply(this,c):_arity(s,_curryN(t,c,e))}}function _arity(t,n){switch(t){case 0:return function(){return n.apply(this,arguments)};case 1:return function(t){return n.apply(this,arguments)};case 2:return function(t,e){return n.apply(this,arguments)};case 3:return function(t,e,r){return n.apply(this,arguments)};case 4:return function(t,e,r,i){return n.apply(this,arguments)};case 5:return function(t,e,r,i,u){return n.apply(this,arguments)};case 6:return function(t,e,r,i,u,o){return n.apply(this,arguments)};case 7:return function(t,e,r,i,u,o,c){return n.apply(this,arguments)};case 8:return function(t,e,r,i,u,o,c,s){return n.apply(this,arguments)};case 9:return function(t,e,r,i,u,o,c,s,f){return n.apply(this,arguments)};case 10:return function(t,e,r,i,u,o,c,s,f,l){return n.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}function curryN(t,n){return 1===arguments.length?n=>curryN(t,n):_arity(t,_curryN(t,[],n))}const _keys=Object.keys;function map(t,n){if(1===arguments.length)return n=>map(t,n);if(void 0===n)return[];if(_isArray(n)){let e=0;const r=n.length,i=Array(r);for(;e<r;)i[e]=t(n[e],e,n),e++;return i}let e=0;const r=_keys(n),i=r.length,u={};for(;e<i;){const i=r[e];u[i]=t(n[i],i,n),e++}return u}function max(t,n){return 1===arguments.length?n=>max(t,n):n>t?n:t}function reduceFn(t,n,e){if(!_isArray(e))throw new TypeError("reduce: list must be array or iterable");let r=0;const i=e.length;for(;r<i;)n=t(n,e[r],r,e),r++;return n}const reduce=curry(reduceFn);function converge(t,n){if(1===arguments.length)return n=>converge(t,n);return curryN(reduce((t,n)=>max(t,n.length),0,n),function(){return t.apply(this,map(t=>t.apply(this,arguments),n))})}const dec=t=>t-1;function flagIs(t){return null==t||!0===Number.isNaN(t)}function defaultTo(t,...n){if(1===arguments.length)return(...n)=>defaultTo(t,...n);const e=n.length-1;let r,i=e+1,u=!1;for(;!u;){const t=n[e-i+1];0===i?u=!0:flagIs(t)?i-=1:(r=t,u=!0)}return void 0===r?t:r}function type(t){const n=typeof t;if(null===t)return"Null";if(void 0===t)return"Undefined";if("boolean"===n)return"Boolean";if("number"===n)return Number.isNaN(t)?"NaN":"Number";if("string"===n)return"String";if(_isArray(t))return"Array";if(t instanceof RegExp)return"RegExp";const e=t&&t.toString?t.toString():"";return["true","false"].includes(e)?"Boolean":Number.isNaN(Number(e))?e.startsWith("async")?"Async":"[object Promise]"===e?"Promise":"function"===n?"Function":t instanceof String?"String":"Object":"Number"}function parseError(t){const n=t.__proto__.toString();return["Error","TypeError"].includes(n)?[n,t.message]:[]}function parseDate(t){return t.toDateString?[!0,t.getTime()]:[!1]}function parseRegex(t){return t.constructor!==RegExp?[!1]:[!0,t.toString()]}function equals(t,n){if(1===arguments.length)return n=>equals(t,n);const e=type(t);if(e!==type(n))return!1;if(["NaN","Undefined","Null"].includes(e))return!0;if("Number"===e)return Object.is(-0,t)===Object.is(-0,n)&&t.toString()===n.toString();if(["String","Boolean"].includes(e))return t.toString()===n.toString();if("Array"===e){const e=Array.from(t),r=Array.from(n);if(e.toString()!==r.toString())return!1;let i=!0;return e.forEach((t,n)=>{i&&(t===r[n]||equals(t,r[n])||(i=!1))}),i}const r=parseRegex(t),i=parseRegex(n);if(r[0])return!!i[0]&&r[1]===i[1];if(i[0])return!1;const u=parseDate(t),o=parseDate(n);if(u[0])return!!o[0]&&u[1]===o[1];if(o[0])return!1;const c=parseError(t),s=parseError(n);if(c[0])return!!s[0]&&(c[0]===s[0]&&c[1]===s[1]);if("Object"===e){const e=Object.keys(t);if(e.length!==Object.keys(n).length)return!1;let r=!0;return e.forEach(e=>{if(r){const i=t[e],u=n[e];i===u||equals(i,u)||(r=!1)}}),r}return!1}function includes(t,n){if(1===arguments.length)return n=>includes(t,n);if("string"==typeof n)return n.includes(t);if(!n)throw new TypeError(`Cannot read property 'indexOf' of ${n}`);if(!_isArray(n))return!1;let e=-1;for(;++e<n.length;)if(equals(n[e],t))return!0;return!1}function uniq(t){let n=-1;const e=[];for(;++n<t.length;){const r=t[n];includes(r,e)||e.push(r)}return e}function difference(t,n){return 1===arguments.length?n=>difference(t,n):uniq(t).filter(t=>!includes(t,n))}function dissoc(t,n){if(1===arguments.length)return n=>dissoc(t,n);if(null==n)return{};const e={};for(const t in n)e[t]=n[t];return delete e[t],e}function divide(t,n){return 1===arguments.length?n=>divide(t,n):t/n}function drop(t,n){return 1===arguments.length?n=>drop(t,n):n.slice(t>0?t:0)}function dropLast(t,n){return 1===arguments.length?n=>dropLast(t,n):t>0?n.slice(0,-t):n.slice()}function either(t,n){return 1===arguments.length?n=>either(t,n):(...e)=>Boolean(t(...e)||n(...e))}function endsWith(t,n){return 1===arguments.length?n=>endsWith(t,n):n.endsWith(t)}function filterObject(t,n){const e={};for(const r in n)t(n[r],r,n)&&(e[r]=n[r]);return e}function filter(t,n){if(1===arguments.length)return n=>filter(t,n);if(!n)return[];if(!_isArray(n))return filterObject(t,n);let e=0;const r=n.length,i=[];for(;e<r;){const r=n[e];t(r,e)&&i.push(r),e++}return i}function find(t,n){if(1===arguments.length)return n=>find(t,n);let e=0;const r=n.length;for(;e<r;){const r=n[e];if(t(r,e))return r;e++}}function findIndex(t,n){if(1===arguments.length)return n=>findIndex(t,n);const e=n.length;let r=-1;for(;++r<e;)if(t(n[r],r))return r;return-1}function findLast(t,n){if(1===arguments.length)return n=>findLast(t,n);let e=n.length;for(;--e>=0;)if(t(n[e],e))return n[e]}function findLastIndex(t,n){if(1===arguments.length)return n=>findLastIndex(t,n);let e=n.length;for(;--e>=0;)if(t(n[e],e))return e;return-1}function flatten(t,n){const e=void 0===n?[]:n;for(let n=0;n<t.length;n++)_isArray(t[n])?flatten(t[n],e):e.push(t[n]);return e}function flipFn(t){return(...n)=>{if(1===n.length)return e=>t(e,n[0]);if(2===n.length)return t(n[1],n[0]);if(3===n.length)return t(n[1],n[0],n[2]);if(4===n.length)return t(n[1],n[0],n[2],n[3]);throw new Error("R.flip doesn't work with arity > 4")}}function flip(t){return flipFn(t)}function forEach(t,n){if(1===arguments.length)return n=>forEach(t,n);if(void 0!==n){if(_isArray(n)){let e=0;const r=n.length;for(;e<r;)t(n[e],e,n),e++}else{let e=0;const r=_keys(n),i=r.length;for(;e<i;){const i=r[e];t(n[i],i,n),e++}}return n}}function fromPairs(t){const n={};return t.forEach(([t,e])=>n[t]=e),n}function groupBy(t,n){if(1===arguments.length)return n=>groupBy(t,n);const e={};for(let r=0;r<n.length;r++){const i=n[r],u=t(i);e[u]||(e[u]=[]),e[u].push(i)}return e}function groupWith(t,n){if(!_isArray(n))throw new TypeError("list.reduce is not a function");const e=n.slice();if(1===n.length)return[e];const r=[];let i=[];return e.reduce((e,u,o)=>{if(0===o)return u;const c=t(e,u),s=0===i.length,f=o===n.length-1;return c?(s&&i.push(e),i.push(u),f&&r.push(i),u):s?(r.push([e]),f&&r.push([u]),u):(r.push(i),f&&r.push([u]),i=[],u)},void 0),r}function has(t,n){return 1===arguments.length?n=>has(t,n):!!n&&void 0!==n[t]}function path(t,n){if(1===arguments.length)return n=>path(t,n);if(null==n)return;let e=n,r=0;const i="string"==typeof t?t.split("."):t;for(;r<i.length;){if(null==e)return;e=e[i[r]],r++}return e}function hasPath(t,n){return 1===arguments.length?n=>hasPath(t,n):void 0!==path(t,n)}function head(t){return"string"==typeof t?t[0]||"":t[0]}function _objectIs(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}var _objectIs$1=Object.is||_objectIs;function identical(t,n){return 1===arguments.length?n=>identical(t,n):_objectIs$1(t,n)}function identity(t){return t}function ifElseFn(t,n,e){return(...r)=>{return!0===("boolean"==typeof t?t:t(...r))?n(...r):e(...r)}}const ifElse=curry(ifElseFn),inc=t=>t+1;function indexByPath(t,n){const e={};for(let r=0;r<n.length;r++){const i=n[r];e[path(t,i)]=i}return e}function indexBy(t,n){if(1===arguments.length)return n=>indexBy(t,n);if("string"==typeof t)return indexByPath(t,n);const e={};for(let r=0;r<n.length;r++){const i=n[r];e[t(i)]=i}return e}function indexOf(t,n){if(1===arguments.length)return n=>indexOf(t,n);let e=-1;const{length:r}=n;for(;++e<r;)if(n[e]===t)return e;return-1}function baseSlice(t,n,e){let r=-1,{length:i}=t;(e=e>i?i:e)<0&&(e+=i),i=n>e?0:e-n>>>0,n>>>=0;const u=Array(i);for(;++r<i;)u[r]=t[r+n];return u}function init(t){return"string"==typeof t?t.slice(0,-1):t.length?baseSlice(t,0,-1):[]}function intersection(t,n){return 1===arguments.length?n=>intersection(t,n):filter(t=>includes(t,n),t)}function intersperse(t,n){if(1===arguments.length)return n=>intersperse(t,n);let e=-1;const r=n.length,i=[];for(;++e<r;)e===r-1?i.push(n[e]):i.push(n[e],t);return i}function is(t,n){return 1===arguments.length?n=>is(t,n):null!=n&&n.constructor===t||n instanceof t}function isEmpty(t){const n=type(t);return!["Undefined","NaN","Number","Null"].includes(n)&&(!t||("Object"===n?0===Object.keys(t).length:"Array"===n&&0===t.length))}function isNil(t){return null==t}function join(t,n){return 1===arguments.length?n=>join(t,n):n.join(t)}function keys(t){return Object.keys(t)}function last(t){return"string"==typeof t?t[t.length-1]||"":t[t.length-1]}function lastIndexOf(t,n){if(1===arguments.length)return n=>lastIndexOf(t,n);let e=n.length;for(;--e>0;)if(equals(n[e],t))return e;return-1}function length(t){return!t&&""!==t||void 0===t.length?NaN:t.length}function lens(t,n){return 1===arguments.length?n=>lens(t,n):function(e){return function(r){return e(t(r)).map(t=>n(t,r))}}}function nth(t,n){if(1===arguments.length)return n=>nth(t,n);const e=t<0?n.length+t:t;return"[object String]"===Object.prototype.toString.call(n)?n.charAt(e):n[e]}function updateFn(t,n,e){return e.slice().fill(n,t,t+1)}const update=curry(updateFn);function lensIndex(t){return lens(nth(t),update(t))}function lensPath(t){return lens(path(t),assocPath(t))}function prop(t,n){return 1===arguments.length?n=>prop(t,n):n?n[t]:void 0}function lensProp(t){return lens(prop(t),assoc(t))}function match(t,n){if(1===arguments.length)return n=>match(t,n);const e=n.match(t);return null===e?[]:e}function mathMod(t,n){return 1===arguments.length?n=>mathMod(t,n):!_isInteger$1(t)||!_isInteger$1(n)||n<1?NaN:(t%n+n)%n}function maxByFn(t,n,e){return t(e)>t(n)?e:n}const maxBy=curry(maxByFn);function sum(t){return t.reduce((t,n)=>t+n,0)}function mean(t){return sum(t)/t.length}function median(t){const n=t.length;if(0===n)return NaN;const e=2-n%2,r=(n-e)/2;return mean(Array.prototype.slice.call(t,0).sort((t,n)=>t===n?0:t<n?-1:1).slice(r,r+e))}function merge(t,n){return 1===arguments.length?n=>merge(t,n):Object.assign({},t||{},n||{})}function mergeAll(t){let n={};return map(t=>{n=merge(n,t)},t),n}function mergeDeepRight(t,n){if(1===arguments.length)return n=>mergeDeepRight(t,n);const e=JSON.parse(JSON.stringify(t));return Object.keys(n).forEach(r=>{"Object"===type(n[r])&&"Object"===type(t[r])?e[r]=mergeDeepRight(t[r],n[r]):e[r]=n[r]}),e}function mergeLeft(t,n){return 1===arguments.length?n=>mergeLeft(t,n):merge(n,t)}function min(t,n){return 1===arguments.length?n=>min(t,n):n<t?n:t}function minByFn(t,n,e){return t(e)<t(n)?e:n}const minBy=curry(minByFn);function modulo(t,n){return 1===arguments.length?n=>modulo(t,n):t%n}function moveFn(t,n,e){if(t<0||n<0)throw new Error("Rambda.move does not support negative indexes");if(t>e.length-1||n>e.length-1)return e;const r=e.slice();return r[t]=e[n],r[n]=e[t],r}const move=curry(moveFn);function multiply(t,n){return 1===arguments.length?n=>multiply(t,n):t*n}function negate(t){return-t}function none(t,n){if(1===arguments.length)return n=>none(t,n);for(let e=0;e<n.length;e++)if(!t(n[e],e))return!0;return!1}function not(t){return!t}function of(t){return[t]}function omit(t,n){if(1===arguments.length)return n=>omit(t,n);if(null==n)return;const e="string"==typeof t?t.split(","):t,r={};for(const t in n)e.includes(t)||(r[t]=n[t]);return r}const Identity=t=>({x:t,map:n=>Identity(n(t))});function overFn(t,n,e){return t(t=>Identity(n(t)))(e).x}const over=curry(overFn);function partial(t,...n){const e=t.length;return(...r)=>n.length+r.length>=e?t(...n,...r):partial(t,...[...n,...r])}function whenObject(t,n){const e={},r={};return Object.entries(n).forEach(([n,i])=>{t(i,n)?e[n]=i:r[n]=i}),[e,r]}function partition(t,n){if(1===arguments.length)return n=>partition(t,n);if(!_isArray(n))return whenObject(t,n);const e=[],r=[];let i=-1;for(;i++<n.length-1;)t(n[i],i)?e.push(n[i]):r.push(n[i]);return[e,r]}function pathEqFn(t,n,e){return equals(path(t,e),n)}const pathEq=curry(pathEqFn);function pathOrFn(t,n,e){return defaultTo(t,path(n,e))}const pathOr=curry(pathOrFn);function paths(t,n){return 1===arguments.length?n=>paths(t,n):t.map(t=>path(t,n))}function pick(t,n){if(1===arguments.length)return n=>pick(t,n);if(null==n)return;const e="string"==typeof t?t.split(","):t,r={};let i=0;for(;i<e.length;)e[i]in n&&(r[e[i]]=n[e[i]]),i++;return r}function pickAll(t,n){if(1===arguments.length)return n=>pickAll(t,n);if(null==n)return;const e="string"==typeof t?t.split(","):t,r={};let i=0;for(;i<e.length;)e[i]in n?r[e[i]]=n[e[i]]:r[e[i]]=void 0,i++;return r}function pipe(...t){if(0===t.length)throw new Error("pipe requires at least one argument");return compose(...t.reverse())}function pluck(t,n){if(1===arguments.length)return n=>pluck(t,n);const e=[];return map(n=>{void 0!==n[t]&&e.push(n[t])},n),e}function prepend(t,n){return 1===arguments.length?n=>prepend(t,n):"string"==typeof n?`${t}${n}`:[t].concat(n)}const product=reduce(multiply,1);function propEqFn(t,n,e){return!!e&&e[t]===n}const propEq=curry(propEqFn);function propIsFn(t,n,e){return is(t,e[n])}const propIs=curry(propIsFn);function propOrFn(t,n,e){return e?defaultTo(t,e[n]):t}const propOr=curry(propOrFn);function range(t,n){if(1===arguments.length)return n=>range(t,n);if(Number.isNaN(Number(t))||Number.isNaN(Number(n)))throw new TypeError("Both arguments to range must be numbers");if(n<t)return[];const e=n-t,r=Array(e);for(let n=0;n<e;n++)r[n]=t+n;return r}function reject(t,n){return 1===arguments.length?n=>reject(t,n):filter((n,e)=>!t(n,e),n)}function repeat(t,n){return 1===arguments.length?n=>repeat(t,n):Array(n).fill(t)}function replaceFn(t,n,e){return e.replace(t,n)}const replace=curry(replaceFn);function reverse(t){if("string"==typeof t)return t.split("").reverse().join("");return t.slice().reverse()}function setFn(t,n,e){return over(t,always(n),e)}const set=curry(setFn);function sliceFn(t,n,e){return e.slice(t,n)}const slice=curry(sliceFn);function sort(t,n){if(1===arguments.length)return n=>sort(t,n);return n.slice().sort(t)}function sortBy(t,n){if(1===arguments.length)return n=>sortBy(t,n);return n.slice().sort((n,e)=>{const r=t(n),i=t(e);return r===i?0:r<i?-1:1})}function split(t,n){return 1===arguments.length?n=>split(t,n):n.split(t)}function splitEvery(t,n){if(1===arguments.length)return n=>splitEvery(t,n);if(t<1)throw new Error("First argument to splitEvery must be a positive integer");const e=[];let r=0;for(;r<n.length;)e.push(n.slice(r,r+=t));return e}function startsWith(t,n){return 1===arguments.length?n=>startsWith(t,n):n.startsWith(t)}function subtract(t,n){return 1===arguments.length?n=>subtract(t,n):t-n}function symmetricDifference(t,n){return 1===arguments.length?n=>symmetricDifference(t,n):concat(filter(t=>!includes(t,n),t),filter(n=>!includes(n,t),n))}function tail(t){return drop(1,t)}function take(t,n){return 1===arguments.length?n=>take(t,n):t<0?n.slice():"string"==typeof n?n.slice(0,t):baseSlice(n,0,t)}function takeLast(t,n){if(1===arguments.length)return n=>takeLast(t,n);const e=n.length;if(t<0)return n.slice();let r=t>e?e:t;return"string"==typeof n?n.slice(e-r):baseSlice(n,r=e-r,e)}function tap(t,n){return 1===arguments.length?n=>tap(t,n):(t(n),n)}function test(t,n){if(1===arguments.length)return n=>test(t,n);if("string"==typeof t)throw new TypeError(`‘test’ requires a value of type RegExp as its first argument; received "${t}"`);return-1!==n.search(t)}function times(t,n){if(1===arguments.length)return n=>times(t,n);if(!Number.isInteger(n)||n<0)throw new RangeError("n must be an integer");return map(t,range(0,n))}function toLower(t){return t.toLowerCase()}function toPairs(t){return Object.entries(t)}function toString(t){return t.toString()}function toUpper(t){return t.toUpperCase()}function transpose(t){return t.reduce((t,n)=>(n.forEach((n,e)=>_isArray(t[e])?t[e].push(n):t.push([n])),t),[])}function trim(t){return t.trim()}function isFunction(t){return["Async","Function"].includes(type(t))}function isPromise(t){return["Async","Promise"].includes(type(t))}function tryCatch(t,n){if(!isFunction(t))throw new Error(`R.tryCatch | fn '${t}'`);const e=isFunction(n);return isPromise(t)?(...r)=>new Promise(i=>{t(...r).then(i).catch(()=>e?isPromise(n)?void n(...r).then(i):i(n(...r)):i(n))}):(...r)=>{try{return t(...r)}catch(t){return e?n(t,...r):n}}}function union(t,n){if(1===arguments.length)return n=>union(t,n);const e=t.slice();return n.forEach(n=>{includes(n,t)||e.push(n)}),e}function uniqWith(t,n){if(1===arguments.length)return n=>uniqWith(t,n);let e=-1;const r=n.length,i=[];for(;++e<r;){const r=n[e];any(n=>t(r,n),i)||i.push(r)}return i}function unless(t,n){return 1===arguments.length?n=>unless(t,n):e=>t(e)?e:n(e)}function values(t){return"Object"!==type(t)?[]:Object.values(t)}const Const=t=>({x:t,map:n=>Const(t)});function view(t,n){return 1===arguments.length?n=>view(t,n):t(Const)(n).x}function whenFn(t,n,e){return t(e)?n(e):e}const when=curry(whenFn);function where(t,n){if(void 0===n)return n=>where(t,n);let e=!0;for(const r in t){const i=t[r](n[r]);e&&!1===i&&(e=!1)}return e}function whereEq(t,n){if(1===arguments.length)return n=>whereEq(t,n);const e=filter((t,e)=>equals(t,n[e]),t);return Object.keys(e).length===Object.keys(t).length}function without(t,n){return void 0===n?n=>without(t,n):reduce((n,e)=>includes(e,t)?n:n.concat(e),[],n)}function xor(t,n){return 1===arguments.length?n=>xor(t,n):Boolean(t)&&!n||Boolean(n)&&!t}function zip(t,n){if(1===arguments.length)return n=>zip(t,n);const e=[],r=Math.min(t.length,n.length);for(let i=0;i<r;i++)e[i]=[t[i],n[i]];return e}function zipObj(t,n){return 1===arguments.length?n=>zipObj(t,n):take(n.length,t).reduce((t,e,r)=>(t[e]=n[r],t),{})}export{F,T,add,adjust,all,allPass,always,and,any,anyPass,append,applySpec,assoc,assocPath,both,chain,clamp,clone,complement,compose,concat,cond,converge,curry,curryN,dec,defaultTo,difference,dissoc,divide,drop,dropLast,either,endsWith,equals,filter,find,findIndex,findLast,findLastIndex,flatten,flip,forEach,fromPairs,groupBy,groupWith,has,hasPath,head,identical,identity,ifElse,inc,includes,indexBy,indexOf,init,intersection,intersperse,is,isEmpty,isNil,join,keys,last,lastIndexOf,length,lens,lensIndex,lensPath,lensProp,map,match,mathMod,max,maxBy,maxByFn,mean,median,merge,mergeAll,mergeDeepRight,mergeLeft,min,minBy,minByFn,modulo,move,multiply,negate,none,not,nth,of,omit,over,partial,partition,path,pathEq,pathOr,paths,pick,pickAll,pipe,pluck,prepend,product,prop,propEq,propIs,propOr,range,reduce,reject,repeat,replace,reverse,set,slice,sort,sortBy,split,splitEvery,startsWith,subtract,sum,symmetricDifference,tail,take,takeLast,tap,test,times,toLower,toPairs,toString,toUpper,transpose,trim,tryCatch,type,union,uniq,uniqWith,unless,update,values,view,when,where,whereEq,without,xor,zip,zipObj};