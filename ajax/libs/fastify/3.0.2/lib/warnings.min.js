"use strict";const{inherits:inherits,format:format}=require("util"),codes={},emittedWarnings=new Map,{kTestInternals:kTestInternals}=require("./symbols");function createWarning(e,t,r){if(!t)throw new Error("Fastify warning code must not be empty");if(!r)throw new Error("Fastify warning message must not be empty");function n(s,i,a){Error.captureStackTrace(this,n),this.name=e,this.code=t,this.message=s&&i&&a?format(r,s,i,a):s&&i?format(r,s,i):s?format(r,s):r}return t=t.toUpperCase(),n.prototype[Symbol.toStringTag]="Warning",n.prototype.toString=function(){return`${this.name} [${this.code}]: ${this.message}`},inherits(n,Error),codes[t]=n,codes[t]}function emitWarning(e){if(void 0===codes[e])throw new Error(`The code '${e}' does not exist`);!0!==emittedWarnings.has(e)&&(emittedWarnings.set(e,!0),process.emitWarning(new codes[e]))}createWarning("FastifyDeprecation","FSTDEP001",'You are accessing the Node.js core request object via "request.req", Use "request.raw" instead.'),createWarning("FastifyDeprecation","FSTDEP002",'You are accessing the Node.js core response object via "reply.res", Use "reply.raw" instead.'),createWarning("FastifyDeprecation","FSTDEP003","You are using the legacy Content Type Parser function signature. Use the one suggested in the documentation instead."),createWarning("FastifyDeprecation","FSTDEP004","You are using the legacy preParsing hook signature. Use the one suggested in the documentation instead."),module.exports={codes:codes,createWarning:createWarning,emitWarning:emitWarning},module.exports[kTestInternals]={emittedWarnings:emittedWarnings};