import{CollisionContact}from"./CollisionContact";import{ConvexPolygon}from"./ConvexPolygon";export var CollisionJumpTable={CollideCircleCircle:function(e,n){var l=e.radius+n.radius,t=e.worldPos,o=n.worldPos;if(t.distance(o)>l)return null;var i=o.sub(t).normalize(),r=i.scale(l-o.distance(t)),a=e.getFurthestPoint(i);return new CollisionContact(e.collider,n.collider,r,a,i)},CollideCirclePolygon:function(e,n){var l=e.testSeparatingAxisTheorem(n);if(!l)return null;l=l.dot(n.center.sub(e.center))<0?l.negate():l;var t=[],o=n.getFurthestPoint(l.negate()),i=e.getFurthestPoint(l);return e.contains(o)&&t.push(o),n.contains(i)&&t.push(i),0===t.length?null:new CollisionContact(e.collider,n.collider,l,2===t.length?t[0].average(t[1]):t[0],l.normalize())},CollideCircleEdge:function(e,n){var l=e.center,t=n.end.sub(n.begin),o=t.dot(n.end.sub(l)),i=t.dot(l.sub(n.begin));if(i<=0){var r=n.begin.sub(l),a=r.dot(r);return a>e.radius*e.radius?null:new CollisionContact(e.collider,n.collider,r.normalize().scale(e.radius-Math.sqrt(a)),n.begin,r.normalize())}if(o<=0){var s=n.end.sub(l),d=s.dot(s);return d>e.radius*e.radius?null:new CollisionContact(e.collider,n.collider,s.normalize().scale(e.radius-Math.sqrt(d)),n.end,s.normalize())}var c=t.dot(t),u=n.begin.scale(o).add(n.end.scale(i)).scale(1/c),g=l.sub(u),C=g.dot(g);if(C>e.radius*e.radius)return null;var b=t.perpendicular();b.dot(l.sub(n.begin))<0&&(b.x=-b.x,b.y=-b.y);var h=(b=b.normalize()).scale(Math.abs(e.radius-Math.sqrt(C)));return new CollisionContact(e.collider,n.collider,h.negate(),u,b.negate())},CollideEdgeEdge:function(){return null},CollidePolygonEdge:function(e,n){var l=n.end.sub(n.begin).normal();if(e.contains(n.begin)){var t=e.getClosestFace(n.begin),o=t.distance,i=t.face;if(o)return new CollisionContact(e.collider,n.collider,o.negate(),n.begin.add(o.negate()),i.normal().negate())}if(e.contains(n.end)){var r=e.getClosestFace(n.end);o=r.distance,i=r.face;if(o)return new CollisionContact(e.collider,n.collider,o.negate(),n.end.add(o.negate()),i.normal().negate())}var a=e.center,s=n.center.sub(a).normalize(),d=new ConvexPolygon({collider:n.collider,points:[n.begin,n.end,n.end.add(s.scale(30)),n.begin.add(s.scale(30))]}),c=e.testSeparatingAxisTheorem(d);return c?(l=l.dot(s)<0?l.negate():l,c=c.dot(s)<0?c.negate():c,new CollisionContact(e.collider,n.collider,c,e.getFurthestPoint(l),l)):null},CollidePolygonPolygon:function(e,n){var l=e.testSeparatingAxisTheorem(n);if(!l)return null;l=l.dot(n.center.sub(e.center))<0?l.negate():l;var t=[],o=e.getFurthestPoint(l),i=n.getFurthestPoint(l.negate());n.contains(o)&&t.push(o),e.contains(i)&&t.push(i),0===t.length&&t.push(i);var r=2===t.length?t[0].add(t[1]).scale(.5):t[0];return new CollisionContact(e.collider,n.collider,l,r,l.normalize())}};