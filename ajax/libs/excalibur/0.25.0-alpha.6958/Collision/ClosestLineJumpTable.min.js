import{Line,Vector,Ray}from"../Algebra";export function ClosestLine(e,a,s,o){var r=e.sub(s),n=a.dot(a),t=a.dot(o),d=o.dot(o),i=a.dot(r),l=o.dot(r),y=n*d-t*t,g=y,c=y;if(0===y||y<=.01){var w=i/t;return new Line(e,s.add(o.scale(w)))}var u=t*l-d*i,x=n*l-t*i;return u<0?(u=0,x=l,c=d):u>g&&(u=g,x=l+t,c=d),x<0?(x=0,-i<0?u=0:-i>n?u=g:(u=-i,g=n)):x>c&&(x=c,-i+t<0?u=0:-i+t>n?u=g:(u=-i+t,g=n)),u=Math.abs(u)<.001?0:u/g,x=Math.abs(x)<.001?0:x/c,new Line(e.add(a.scale(u)),s.add(o.scale(x)))};export var ClosestLineJumpTable={PolygonPolygonClosestLine:function(e,a){var s=a.worldPos,o=s.sub(e.worldPos),r=o.negate(),n=new Ray(e.worldPos,o),t=new Ray(s,r),d=e.rayCast(n).add(n.dir.scale(.1)),i=a.rayCast(t).add(t.dir.scale(.1)),l=e.getClosestFace(d),y=a.getClosestFace(i);return ClosestLine(l.face.begin,l.face.getEdge(),y.face.begin,y.face.getEdge())},PolygonEdgeClosestLine:function(e,a){var s=a.worldPos.sub(e.worldPos),o=new Ray(e.worldPos,s),r=e.rayCast(o).add(o.dir.scale(.1)),n=e.getClosestFace(r),t=n.face.begin,d=n.face.getEdge(),i=a.asLine();return ClosestLine(t,d,i.begin,i.getEdge())},PolygonCircleClosestLine:function(e,a){var s=a.worldPos,o=s.sub(e.worldPos),r=new Ray(e.worldPos,o.normalize()),n=e.rayCast(r).add(r.dir.scale(.1)),t=e.getClosestFace(n),d=t.face.begin,i=t.face.getEdge(),l=(i.x*(s.x-d.x)+i.y*(s.y-d.y))/(i.x*i.x+i.y*i.y);l>1?l=1:l<0&&(l=0);var y=Math.sqrt(Math.pow(d.x+i.x*l-s.x,2)+Math.pow(d.y+i.y*l-s.y,2))-a.radius,g=(d.x+i.x*l-s.x)*a.radius/(a.radius+y),c=(d.y+i.y*l-s.y)*a.radius/(a.radius+y);return new Line(i.scale(l).add(d),new Vector(s.x+g,s.y+c))},CircleCircleClosestLine:function(e,a){var s=a.worldPos.sub(e.worldPos),o=e.worldPos.sub(a.worldPos),r=new Ray(e.worldPos,s),n=new Ray(a.worldPos,o),t=e.rayCast(r),d=a.rayCast(n);return new Line(t,d)},CircleEdgeClosestLine:function(e,a){var s=e.worldPos,o=a.asLine(),r=o.begin,n=o.getEdge(),t=(n.x*(s.x-r.x)+n.y*(s.y-r.y))/(n.x*n.x+n.y*n.y);t>1?t=1:t<0&&(t=0);var d=Math.sqrt(Math.pow(r.x+n.x*t-s.x,2)+Math.pow(r.y+n.y*t-s.y,2))-e.radius,i=(r.x+n.x*t-s.x)*e.radius/(e.radius+d),l=(r.y+n.y*t-s.y)*e.radius/(e.radius+d);return new Line(n.scale(t).add(r),new Vector(s.x+i,s.y+l))},EdgeEdgeClosestLine:function(e,a){var s=e.asLine(),o=s.begin,r=s.getEdge(),n=a.asLine();return ClosestLine(o,r,n.begin,n.getEdge())}};