import{Color}from"../Drawing/Color";import{Physics}from"../Physics";import{BoundingBox}from"./BoundingBox";import{Edge}from"./Edge";import{CollisionJumpTable}from"./CollisionJumpTable";import{Circle}from"./Circle";import{Vector,Line,Ray,Projection}from"../Algebra";import{ClosestLineJumpTable}from"./ClosestLineJumpTable";var ConvexPolygon=function(){function t(t){this._transformedPoints=[],this._axes=[],this._sides=[],this.offset=t.offset||Vector.Zero;var o=!!t.clockwiseWinding;this.points=(o?t.points.reverse():t.points)||[],this.collider=this.collider=t.collider||null,this._calculateTransformation()}return t.prototype.clone=function(){return new t({offset:this.offset.clone(),points:this.points.map(function(t){return t.clone()}),collider:null})},Object.defineProperty(t.prototype,"worldPos",{get:function(){return this.collider&&this.collider.body?this.collider.body.pos.add(this.offset):this.offset},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"center",{get:function(){var t=this.collider?this.collider.body:null;return t?t.pos.add(this.offset):this.offset},enumerable:!1,configurable:!0}),t.prototype._calculateTransformation=function(){var t=this.collider?this.collider.body:null,o=t?t.pos.add(this.offset):this.offset,e=t?t.rotation:0,i=t?t.scale:Vector.One,n=this.points.length;this._transformedPoints.length=0;for(var r=0;r<n;r++)this._transformedPoints[r]=this.points[r].scale(i).rotate(e).add(o)},t.prototype.getTransformedPoints=function(){return this._transformedPoints.length&&(!this.collider||!this.collider.body||this.collider.body.oldPos.equals(this.collider.body.pos)&&this.collider.body.oldRotation===this.collider.body.rotation&&this.collider.body.oldScale===this.collider.body.scale)||this._calculateTransformation(),this._transformedPoints},t.prototype.getSides=function(){if(this._sides.length)return this._sides;for(var t=[],o=this.getTransformedPoints(),e=o.length,i=0;i<e;i++)t.push(new Line(o[i],o[(i-1+e)%e]));return this._sides=t,this._sides},t.prototype.recalc=function(){this._sides.length=0,this._axes.length=0,this._transformedPoints.length=0,this.getTransformedPoints(),this.getSides()},t.prototype.contains=function(t){var o=new Ray(t,new Vector(1,0));return this.getSides().reduce(function(t,e){return o.intersect(e)>=0?t+1:t},0)%2!=0},t.prototype.getClosestLineBetween=function(o){if(o instanceof Circle)return ClosestLineJumpTable.PolygonCircleClosestLine(this,o);if(o instanceof t)return ClosestLineJumpTable.PolygonPolygonClosestLine(this,o);if(o instanceof Edge)return ClosestLineJumpTable.PolygonEdgeClosestLine(this,o);throw new Error("Polygon could not collide with unknown CollisionShape "+typeof o)},t.prototype.collide=function(o){if(o instanceof Circle)return CollisionJumpTable.CollideCirclePolygon(o,this);if(o instanceof t)return CollisionJumpTable.CollidePolygonPolygon(this,o);if(o instanceof Edge)return CollisionJumpTable.CollidePolygonEdge(this,o);throw new Error("Polygon could not collide with unknown CollisionShape "+typeof o)},t.prototype.getFurthestPoint=function(t){for(var o=this.getTransformedPoints(),e=null,i=-Number.MAX_VALUE,n=0;n<o.length;n++){var r=t.dot(o[n]);r>i&&(i=r,e=o[n])}return e},t.prototype.getClosestFace=function(t){for(var o=this.getSides(),e=Number.POSITIVE_INFINITY,i=-1,n=-1,r=0;r<o.length;r++){var s=o[r].distanceToPoint(t);s<e&&(e=s,i=r,n=s)}return-1!==i?{distance:o[i].normal().scale(n),face:o[i]}:null},Object.defineProperty(t.prototype,"bounds",{get:function(){var t=this.getTransformedPoints();return BoundingBox.fromPoints(t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"localBounds",{get:function(){return BoundingBox.fromPoints(this.points)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"inertia",{get:function(){for(var t=this.collider?this.collider.mass:Physics.defaultMass,o=0,e=0,i=0;i<this.points.length;i++){var n=(i+1)%this.points.length,r=this.points[n].cross(this.points[i]);o+=r*(this.points[i].dot(this.points[i])+this.points[i].dot(this.points[n])+this.points[n].dot(this.points[n])),e+=r}return t/6*(o/e)},enumerable:!1,configurable:!0}),t.prototype.rayCast=function(t,o){void 0===o&&(o=1/0);for(var e=this.getSides(),i=e.length,n=Number.MAX_VALUE,r=-1,s=0;s<i;s++){var l=t.intersect(e[s]);l>=0&&l<n&&l<=o&&(n=l,r=s)}return r>=0?t.getPoint(n):null},Object.defineProperty(t.prototype,"axes",{get:function(){if(this._axes.length)return this._axes;for(var t=[],o=this.getTransformedPoints(),e=o.length,i=0;i<e;i++)t.push(o[i].sub(o[(i+1)%e]).normal());return this._axes=t,this._axes},enumerable:!1,configurable:!0}),t.prototype.testSeparatingAxisTheorem=function(t){for(var o=t,e=this.axes.concat(o.axes),i=Number.MAX_VALUE,n=null,r=-1,s=0;s<e.length;s++){var l=this.project(e[s]),a=o.project(e[s]),c=l.getOverlap(a);if(c<=0)return null;c<i&&(i=c,n=e[s],r=s)}return-1===r?null:n.normalize().scale(i)},t.prototype.project=function(t){for(var o=this.getTransformedPoints(),e=o.length,i=Number.MAX_VALUE,n=-Number.MAX_VALUE,r=0;r<e;r++){var s=o[r].dot(t);i=Math.min(i,s),n=Math.max(n,s)}return new Projection(i,n)},t.prototype.draw=function(t,o,e){void 0===o&&(o=Color.Green),void 0===e&&(e=Vector.Zero),t.beginPath(),t.fillStyle=o.toString();var i=e.add(this.offset),n=this.points[0].add(i);t.moveTo(n.x,n.y),this.points.map(function(t){return t.add(i)}).forEach(function(o){t.lineTo(o.x,o.y)}),t.lineTo(n.x,n.y),t.closePath(),t.fill()},t.prototype.debugDraw=function(t,o){void 0===o&&(o=Color.Red),t.beginPath(),t.strokeStyle=o.toString();var e=this.getTransformedPoints()[0];t.moveTo(e.x,e.y),this.getTransformedPoints().forEach(function(o){t.lineTo(o.x,o.y)}),t.lineTo(e.x,e.y),t.closePath(),t.stroke()},t}();export{ConvexPolygon};