var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var i,o=1,n=arguments.length;o<n;o++)for(var r in i=arguments[o])Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r]);return t}).apply(this,arguments)};import{Vector}from"../Algebra";import{nullish}from"../Util/Util";var Polygon=function(){function t(t){this.lineWidth=5,this.filled=!1,this._points=[],this.anchor=Vector.Zero,this.offset=Vector.Zero,this.rotation=0,this.scale=Vector.One,this.opacity=1,this._points=t;var i=this._points.reduce(function(t,i){return Math.min(t,i.x)},0),o=this._points.reduce(function(t,i){return Math.max(t,i.x)},0);this.drawWidth=o-i;var n=this._points.reduce(function(t,i){return Math.min(t,i.y)},0),r=this._points.reduce(function(t,i){return Math.max(t,i.y)},0);this.drawHeight=r-n,this.height=this.drawHeight,this.width=this.drawWidth}return t.prototype.addEffect=function(){},t.prototype.removeEffect=function(){},t.prototype.clearEffects=function(){},t.prototype.reset=function(){},t.prototype.draw=function(t,i,o){t instanceof CanvasRenderingContext2D?this._drawWithOptions({ctx:t,x:i,y:o}):this._drawWithOptions(t)},t.prototype._drawWithOptions=function(t){var i=__assign(__assign({},t),{rotation:nullish(t.rotation,this.rotation),drawWidth:nullish(t.drawWidth,this.drawWidth),drawHeight:nullish(t.drawHeight,this.drawHeight),flipHorizontal:nullish(t.flipHorizontal,this.flipHorizontal),flipVertical:nullish(t.flipVertical,this.flipVertical),anchor:nullish(t.anchor,this.anchor),offset:nullish(t.offset,this.offset),opacity:nullish(t.opacity,this.opacity)}),o=i.ctx,n=i.x,r=i.y,s=i.rotation,a=i.drawWidth,e=i.drawHeight,h=i.anchor,l=i.offset,c=i.opacity,f=i.flipHorizontal,p=i.flipVertical,d=a*h.x+l.x+n,u=e*h.y+l.y+r;o.save(),o.translate(d,u),o.scale(this.scale.x,this.scale.y),o.rotate(s),o.beginPath(),o.lineWidth=this.lineWidth;var y=this._points[0];o.moveTo(y.x,y.y);for(var g=0,_=this._points.length;g<_;g++)o.lineTo(this._points[g].x,this._points[g].y);o.lineTo(y.x,y.y),o.closePath(),this.filled&&(o.fillStyle=this.fillColor.toString(),o.fill()),o.strokeStyle=this.lineColor.toString(),f&&(o.translate(a,0),o.scale(-1,1)),p&&(o.translate(0,e),o.scale(1,-1));var w=o.globalAlpha;o.globalAlpha=nullish(c,1),o.stroke(),o.globalAlpha=w,o.restore()},t}();export{Polygon};