import{Vector}from"../Algebra";import{Physics,CollisionResolutionStrategy}from"../Physics";import{PostCollisionEvent,PreCollisionEvent}from"../Events";import*as Util from"../Util/Util";import{CollisionType}from"./CollisionType";var CollisionContact=function(){function i(i,o,l,e,t){this.colliderA=i,this.colliderB=o,this.mtv=l,this.point=e,this.normal=t}return i.prototype.resolve=function(i){if(i===CollisionResolutionStrategy.RigidBody)this._resolveRigidBodyCollision();else{if(i!==CollisionResolutionStrategy.Box)throw new Error("Unknown collision resolution strategy");this._resolveBoxCollision()}},i.prototype._applyBoxImpulse=function(i,o,l){if(i.type===CollisionType.Active&&o.type!==CollisionType.Passive){i.type===CollisionType.Active&&o.type===CollisionType.Active&&(l=l.scale(.5)),i.body.pos.y+=l.y,i.body.pos.x+=l.x;var e=l.normalize();if(e.dot(i.body.vel)<0){var t=e.scale(e.dot(i.body.vel.negate()));i.body.vel=i.body.vel.add(t)}i.emit("postcollision",new PostCollisionEvent(i,o,Util.getSideFromDirection(l),l))}},i.prototype._resolveBoxCollision=function(){var i=Util.getSideFromDirection(this.mtv),o=this.mtv.negate();this.colliderA.emit("precollision",new PreCollisionEvent(this.colliderA,this.colliderB,i,o)),this.colliderB.emit("precollision",new PreCollisionEvent(this.colliderB,this.colliderA,Util.getOppositeSide(i),o.negate())),this._applyBoxImpulse(this.colliderA,this.colliderB,o),this._applyBoxImpulse(this.colliderB,this.colliderA,o.negate())},i.prototype._resolveRigidBodyCollision=function(){var i=this.colliderA.body,o=this.colliderB.body,l=this.mtv,e=this.normal;if(i!==o){var t=Util.getSideFromDirection(this.mtv);if(this.colliderA.emit("precollision",new PreCollisionEvent(this.colliderA,this.colliderB,t,this.mtv)),this.colliderB.emit("precollision",new PreCollisionEvent(this.colliderB,this.colliderA,Util.getOppositeSide(t),this.mtv.negate())),this.colliderA.type!==CollisionType.Passive&&this.colliderB.type!==CollisionType.Passive){var s=this.colliderA.type===CollisionType.Fixed?0:1/this.colliderA.mass,r=this.colliderB.type===CollisionType.Fixed?0:1/this.colliderB.mass,n=this.colliderA.type===CollisionType.Fixed?0:1/this.colliderA.inertia,d=this.colliderB.type===CollisionType.Fixed?0:1/this.colliderB.inertia,c=Math.min(this.colliderA.bounciness,this.colliderB.bounciness),a=Math.min(this.colliderA.friction,this.colliderB.friction),h=(e=e.normalize()).normal().normalize(),p=this.point.sub(this.colliderA.center),y=this.point.sub(this.colliderB.center),v=o.vel.add(y.cross(-o.rx)).sub(i.vel.sub(p.cross(i.rx))),m=v.dot(e),B=v.dot(h),C=p.dot(h),g=p.dot(e),x=y.dot(h),A=y.dot(e);if(!(m>0)){var u=-(1+c)*m/(s+r+n*C*C+d*x*x);if(this.colliderA.type===CollisionType.Fixed?(o.vel=o.vel.add(e.scale(u*r)),Physics.allowRigidBodyRotation&&(o.rx-=u*d*-y.cross(e)),o.addMtv(l)):this.colliderB.type===CollisionType.Fixed?(i.vel=i.vel.sub(e.scale(u*s)),Physics.allowRigidBodyRotation&&(i.rx+=u*n*-p.cross(e)),i.addMtv(l.negate())):(o.vel=o.vel.add(e.scale(u*r)),i.vel=i.vel.sub(e.scale(u*s)),Physics.allowRigidBodyRotation&&(o.rx-=u*d*-y.cross(e),i.rx+=u*n*-p.cross(e)),o.addMtv(l.scale(.5)),i.addMtv(l.scale(-.5))),a&&B){var b=v.sub(e.scale(v.dot(e))).normalize(),f=v.dot(b)/(s+r+g*g*n+A*A*d),P=new Vector(0,0);P=Math.abs(f)<=u*a?b.scale(f).negate():b.scale(-u*a),this.colliderA.type===CollisionType.Fixed?(o.vel=o.vel.add(P.scale(r)),Physics.allowRigidBodyRotation&&(o.rx+=P.dot(b)*d*y.cross(b))):this.colliderB.type===CollisionType.Fixed?(i.vel=i.vel.sub(P.scale(s)),Physics.allowRigidBodyRotation&&(i.rx-=P.dot(b)*n*p.cross(b))):(o.vel=o.vel.add(P.scale(r)),i.vel=i.vel.sub(P.scale(s)),Physics.allowRigidBodyRotation&&(o.rx+=P.dot(b)*d*y.cross(b),i.rx-=P.dot(b)*n*p.cross(b)))}this.colliderA.emit("postcollision",new PostCollisionEvent(this.colliderA,this.colliderB,t,this.mtv)),this.colliderB.emit("postcollision",new PostCollisionEvent(this.colliderB,this.colliderA,Util.getOppositeSide(t),this.mtv.negate()))}}}},i}();export{CollisionContact};