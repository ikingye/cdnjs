function t(t,e,i,s){var n,r=arguments.length,o=r<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,s);else for(var a=t.length-1;a>=0;a--)(n=t[a])&&(o=(r<3?n(o):r>3?n(e,i,o):n(e,i))||o);return r>3&&o&&Object.defineProperty(e,i,o),o}const e="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,i=(t,e,i=null)=>{for(;e!==i;){const i=e.nextSibling;t.removeChild(e),e=i}},s=`{{lit-${(Math.random()+"").slice(2)}}}`,n=`\x3c!--${s}--\x3e`,r=RegExp(`${s}|${n}`);class o{constructor(t,e){this.parts=[],this.element=e;const i=[],n=[],o=document.createTreeWalker(e.content,133,null,!1);let h=0,c=-1,p=0;const{strings:u,values:{length:_}}=t;for(;p<_;){const t=o.nextNode();if(null!==t){if(c++,1===t.nodeType){if(t.hasAttributes()){const e=t.attributes,{length:i}=e;let s=0;for(let t=0;t<i;t++)a(e[t].name,"$lit$")&&s++;for(;s-- >0;){const e=u[p],i=d.exec(e)[2],s=i.toLowerCase()+"$lit$",n=t.getAttribute(s);t.removeAttribute(s);const o=n.split(r);this.parts.push({type:"attribute",index:c,name:i,strings:o}),p+=o.length-1}}"TEMPLATE"===t.tagName&&(n.push(t),o.currentNode=t.content)}else if(3===t.nodeType){const e=t.data;if(e.indexOf(s)>=0){const s=t.parentNode,n=e.split(r),o=n.length-1;for(let e=0;e<o;e++){let i,r=n[e];if(""===r)i=l();else{const t=d.exec(r);null!==t&&a(t[2],"$lit$")&&(r=r.slice(0,t.index)+t[1]+t[2].slice(0,-5)+t[3]),i=document.createTextNode(r)}s.insertBefore(i,t),this.parts.push({type:"node",index:++c})}""===n[o]?(s.insertBefore(l(),t),i.push(t)):t.data=n[o],p+=o}}else if(8===t.nodeType)if(t.data===s){const e=t.parentNode;null!==t.previousSibling&&c!==h||(c++,e.insertBefore(l(),t)),h=c,this.parts.push({type:"node",index:c}),null===t.nextSibling?t.data="":(i.push(t),c--),p++}else{let e=-1;for(;-1!==(e=t.data.indexOf(s,e+1));)this.parts.push({type:"node",index:-1}),p++}}else o.currentNode=n.pop()}for(const t of i)t.parentNode.removeChild(t)}}const a=(t,e)=>{const i=t.length-e.length;return i>=0&&t.slice(i)===e},h=t=>-1!==t.index,l=()=>document.createComment(""),d=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function c(t,e){const{element:{content:i},parts:s}=t,n=document.createTreeWalker(i,133,null,!1);let r=u(s),o=s[r],a=-1,h=0;const l=[];let d=null;for(;n.nextNode();){a++;const t=n.currentNode;for(t.previousSibling===d&&(d=null),e.has(t)&&(l.push(t),null===d&&(d=t)),null!==d&&h++;void 0!==o&&o.index===a;)o.index=null!==d?-1:o.index-h,r=u(s,r),o=s[r]}l.forEach(t=>t.parentNode.removeChild(t))}const p=t=>{let e=11===t.nodeType?0:1;const i=document.createTreeWalker(t,133,null,!1);for(;i.nextNode();)e++;return e},u=(t,e=-1)=>{for(let i=e+1;i<t.length;i++){const e=t[i];if(h(e))return i}return-1};const _=new WeakMap,m=t=>"function"==typeof t&&_.has(t),g={},f={};class y{constructor(t,e,i){this.__parts=[],this.template=t,this.processor=e,this.options=i}update(t){let e=0;for(const i of this.__parts)void 0!==i&&i.setValue(t[e]),e++;for(const t of this.__parts)void 0!==t&&t.commit()}_clone(){const t=e?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),i=[],s=this.template.parts,n=document.createTreeWalker(t,133,null,!1);let r,o=0,a=0,l=n.nextNode();for(;o<s.length;)if(r=s[o],h(r)){for(;a<r.index;)a++,"TEMPLATE"===l.nodeName&&(i.push(l),n.currentNode=l.content),null===(l=n.nextNode())&&(n.currentNode=i.pop(),l=n.nextNode());if("node"===r.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(l.previousSibling),this.__parts.push(t)}else this.__parts.push(...this.processor.handleAttributeExpressions(l,r.name,r.strings,this.options));o++}else this.__parts.push(void 0),o++;return e&&(document.adoptNode(t),customElements.upgrade(t)),t}}const v=` ${s} `;class b{constructor(t,e,i,s){this.strings=t,this.values=e,this.type=i,this.processor=s}getHTML(){const t=this.strings.length-1;let e="",i=!1;for(let r=0;r<t;r++){const t=this.strings[r],o=t.lastIndexOf("\x3c!--");i=(o>-1||i)&&-1===t.indexOf("--\x3e",o+1);const a=d.exec(t);e+=null===a?t+(i?v:n):t.substr(0,a.index)+a[1]+a[2]+"$lit$"+a[3]+s}return e+=this.strings[t],e}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}const w=t=>null===t||!("object"==typeof t||"function"==typeof t),S=t=>Array.isArray(t)||!(!t||!t[Symbol.iterator]);class x{constructor(t,e,i){this.dirty=!0,this.element=t,this.name=e,this.strings=i,this.parts=[];for(let t=0;t<i.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new P(this)}_getValue(){const t=this.strings,e=t.length-1;let i="";for(let s=0;s<e;s++){i+=t[s];const e=this.parts[s];if(void 0!==e){const t=e.value;if(w(t)||!S(t))i+="string"==typeof t?t:t+"";else for(const e of t)i+="string"==typeof e?e:e+""}}return i+=t[e],i}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class P{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===g||w(t)&&t===this.value||(this.value=t,m(t)||(this.committer.dirty=!0))}commit(){for(;m(this.value);){const t=this.value;this.value=g,t(this)}this.value!==g&&this.committer.commit()}}class N{constructor(t){this.value=void 0,this.__pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(l()),this.endNode=t.appendChild(l())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t.__insert(this.startNode=l()),t.__insert(this.endNode=l())}insertAfterPart(t){t.__insert(this.startNode=l()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this.__pendingValue=t}commit(){if(null===this.startNode.parentNode)return;for(;m(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=g,t(this)}const t=this.__pendingValue;t!==g&&(w(t)?t!==this.value&&this.__commitText(t):t instanceof b?this.__commitTemplateResult(t):t instanceof Node?this.__commitNode(t):S(t)?this.__commitIterable(t):t===f?(this.value=f,this.clear()):this.__commitText(t))}__insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}__commitNode(t){this.value!==t&&(this.clear(),this.__insert(t),this.value=t)}__commitText(t){const e=this.startNode.nextSibling,i="string"==typeof(t=null==t?"":t)?t:t+"";e===this.endNode.previousSibling&&3===e.nodeType?e.data=i:this.__commitNode(document.createTextNode(i)),this.value=t}__commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof y&&this.value.template===e)this.value.update(t.values);else{const i=new y(e,t.processor,this.options),s=i._clone();i.update(t.values),this.__commitNode(s),this.value=i}}__commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let i,s=0;for(const n of t)i=e[s],void 0===i&&(i=new N(this.options),e.push(i),0===s?i.appendIntoPart(this):i.insertAfterPart(e[s-1])),i.setValue(n),i.commit(),s++;s<e.length&&(e.length=s,this.clear(i&&i.endNode))}clear(t=this.startNode){i(this.startNode.parentNode,t.nextSibling,this.endNode)}}class E{constructor(t,e,i){if(this.value=void 0,this.__pendingValue=void 0,2!==i.length||""!==i[0]||""!==i[1])throw Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=i}setValue(t){this.__pendingValue=t}commit(){for(;m(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=g,t(this)}if(this.__pendingValue===g)return;const t=!!this.__pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.__pendingValue=g}}class C extends x{constructor(t,e,i){super(t,e,i),this.single=2===i.length&&""===i[0]&&""===i[1]}_createPart(){return new T(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class T extends P{}let A=!1;(()=>{try{const t={get capture(){return A=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}})();class O{constructor(t,e,i){this.value=void 0,this.__pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=i,this.__boundHandleEvent=t=>this.handleEvent(t)}setValue(t){this.__pendingValue=t}commit(){for(;m(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=g,t(this)}if(this.__pendingValue===g)return;const t=this.__pendingValue,e=this.value,i=null==t||null!=e&&(t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive),s=null!=t&&(null==e||i);i&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),s&&(this.__options=k(t),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=t,this.__pendingValue=g}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const k=t=>t&&(A?{capture:t.capture,passive:t.passive,once:t.once}:t.capture);function z(t){let e=V.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},V.set(t.type,e));let i=e.stringsArray.get(t.strings);if(void 0!==i)return i;const n=t.strings.join(s);return i=e.keyString.get(n),void 0===i&&(i=new o(t,t.getTemplateElement()),e.keyString.set(n,i)),e.stringsArray.set(t.strings,i),i}const V=new Map,M=new WeakMap;const R=new class{handleAttributeExpressions(t,e,i,s){const n=e[0];if("."===n){return new C(t,e.slice(1),i).parts}if("@"===n)return[new O(t,e.slice(1),s.eventContext)];if("?"===n)return[new E(t,e.slice(1),i)];return new x(t,e,i).parts}handleTextExpression(t){return new N(t)}};"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.2.1");const $=(t,...e)=>new b(t,e,"html",R),U=(t,e)=>`${t}--${e}`;let H=!0;void 0===window.ShadyCSS?H=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),H=!1);const W=t=>e=>{const i=U(e.type,t);let n=V.get(i);void 0===n&&(n={stringsArray:new WeakMap,keyString:new Map},V.set(i,n));let r=n.stringsArray.get(e.strings);if(void 0!==r)return r;const a=e.strings.join(s);if(r=n.keyString.get(a),void 0===r){const i=e.getTemplateElement();H&&window.ShadyCSS.prepareTemplateDom(i,t),r=new o(e,i),n.keyString.set(a,r)}return n.stringsArray.set(e.strings,r),r},j=["html","svg"],L=new Set,I=(t,e,i)=>{L.add(t);const s=i?i.element:document.createElement("template"),n=e.querySelectorAll("style"),{length:r}=n;if(0===r)return void window.ShadyCSS.prepareTemplateStyles(s,t);const o=document.createElement("style");for(let t=0;t<r;t++){const e=n[t];e.parentNode.removeChild(e),o.textContent+=e.textContent}(t=>{j.forEach(e=>{const i=V.get(U(e,t));void 0!==i&&i.keyString.forEach(t=>{const{element:{content:e}}=t,i=new Set;Array.from(e.querySelectorAll("style")).forEach(t=>{i.add(t)}),c(t,i)})})})(t);const a=s.content;i?function(t,e,i=null){const{element:{content:s},parts:n}=t;if(null==i)return void s.appendChild(e);const r=document.createTreeWalker(s,133,null,!1);let o=u(n),a=0,h=-1;for(;r.nextNode();){h++;for(r.currentNode===i&&(a=p(e),i.parentNode.insertBefore(e,i));-1!==o&&n[o].index===h;){if(a>0){for(;-1!==o;)n[o].index+=a,o=u(n,o);return}o=u(n,o)}}}(i,o,a.firstChild):a.insertBefore(o,a.firstChild),window.ShadyCSS.prepareTemplateStyles(s,t);const h=a.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==h)e.insertBefore(h.cloneNode(!0),e.firstChild);else if(i){a.insertBefore(o,a.firstChild);const t=new Set;t.add(o),c(i,t)}};window.JSCompiler_renameProperty=(t,e)=>t;const D={toAttribute(t,e){switch(e){case Boolean:return t?"":null;case Object:case Array:return null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){switch(e){case Boolean:return null!==t;case Number:return null===t?null:Number(t);case Object:case Array:return JSON.parse(t)}return t}},q=(t,e)=>e!==t&&(e==e||t==t),B={attribute:!0,type:String,converter:D,reflect:!1,hasChanged:q};class X extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=new Promise(t=>this._enableUpdatingResolver=t),this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const t=[];return this._classProperties.forEach((e,i)=>{const s=this._attributeNameForProperty(i,e);void 0!==s&&(this._attributeToPropertyMap.set(s,i),t.push(s))}),t}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const t=Object.getPrototypeOf(this)._classProperties;void 0!==t&&t.forEach((t,e)=>this._classProperties.set(e,t))}}static createProperty(t,e=B){if(this._ensureClassProperties(),this._classProperties.set(t,e),e.noAccessor||this.prototype.hasOwnProperty(t))return;const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(i){const s=this[t];this[e]=i,this._requestUpdate(t,s)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this._classProperties&&this._classProperties.get(t)||B}static finalize(){const t=Object.getPrototypeOf(this);if(t.hasOwnProperty("finalized")||t.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const t=this.properties,e=[...Object.getOwnPropertyNames(t),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[]];for(const i of e)this.createProperty(i,t[i])}}static _attributeNameForProperty(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}static _valueHasChanged(t,e,i=q){return i(t,e)}static _propertyValueFromAttribute(t,e){const i=e.type,s=e.converter||D,n="function"==typeof s?s:s.fromAttribute;return n?n(t,i):t}static _propertyValueToAttribute(t,e){if(void 0===e.reflect)return;const i=e.type,s=e.converter;return(s&&s.toAttribute||D.toAttribute)(t,i)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((t,e)=>{if(this.hasOwnProperty(e)){const t=this[e];delete this[e],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(e,t)}})}_applyInstanceProperties(){this._instanceProperties.forEach((t,e)=>this[e]=t),this._instanceProperties=void 0}connectedCallback(){this.enableUpdating()}enableUpdating(){void 0!==this._enableUpdatingResolver&&(this._enableUpdatingResolver(),this._enableUpdatingResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(t,e,i){e!==i&&this._attributeToProperty(t,i)}_propertyToAttribute(t,e,i=B){const s=this.constructor,n=s._attributeNameForProperty(t,i);if(void 0!==n){const t=s._propertyValueToAttribute(e,i);if(void 0===t)return;this._updateState=8|this._updateState,null==t?this.removeAttribute(n):this.setAttribute(n,t),this._updateState=-9&this._updateState}}_attributeToProperty(t,e){if(8&this._updateState)return;const i=this.constructor,s=i._attributeToPropertyMap.get(t);if(void 0!==s){const t=i.getPropertyOptions(s);this._updateState=16|this._updateState,this[s]=i._propertyValueFromAttribute(e,t),this._updateState=-17&this._updateState}}_requestUpdate(t,e){let i=!0;if(void 0!==t){const s=this.constructor,n=s.getPropertyOptions(t);s._valueHasChanged(this[t],e,n.hasChanged)?(this._changedProperties.has(t)||this._changedProperties.set(t,e),!0!==n.reflect||16&this._updateState||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(t,n))):i=!1}!this._hasRequestedUpdate&&i&&(this._updatePromise=this._enqueueUpdate())}requestUpdate(t,e){return this._requestUpdate(t,e),this.updateComplete}async _enqueueUpdate(){this._updateState=4|this._updateState;try{await this._updatePromise}catch(t){}const t=this.performUpdate();return null!=t&&await t,!this._hasRequestedUpdate}get _hasRequestedUpdate(){return 4&this._updateState}get hasUpdated(){return 1&this._updateState}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let t=!1;const e=this._changedProperties;try{t=this.shouldUpdate(e),t?this.update(e):this._markUpdated()}catch(e){throw t=!1,this._markUpdated(),e}t&&(1&this._updateState||(this._updateState=1|this._updateState,this.firstUpdated(e)),this.updated(e))}_markUpdated(){this._changedProperties=new Map,this._updateState=-5&this._updateState}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(t){return!0}update(t){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((t,e)=>this._propertyToAttribute(e,this[e],t)),this._reflectingProperties=void 0),this._markUpdated()}updated(t){}firstUpdated(t){}}X.finalized=!0;const Y=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(e){window.customElements.define(t,e)}}})(t,e),F=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?Object.assign(Object.assign({},e),{finisher(i){i.createProperty(e.key,t)}}):{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function J(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):F(t,e)}function G(t){return J({attribute:!1,hasChanged:null==t?void 0:t.hasChanged})}const K="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,Q=Symbol();class Z{constructor(t,e){if(e!==Q)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}get styleSheet(){return void 0===this._styleSheet&&(K?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const tt=(t,...e)=>{const i=e.reduce((e,i,s)=>e+(t=>{if(t instanceof Z)return t.cssText;if("number"==typeof t)return t;throw Error(`Value passed to 'css' function must be a 'css' function result: ${t}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`)})(i)+t[s+1],t[0]);return new Z(i,Q)};(window.litElementVersions||(window.litElementVersions=[])).push("2.3.1");const et={};class it extends X{static getStyles(){return this.styles}static _getUniqueStyles(){if(this.hasOwnProperty(JSCompiler_renameProperty("_styles",this)))return;const t=this.getStyles();if(void 0===t)this._styles=[];else if(Array.isArray(t)){const e=(t,i)=>t.reduceRight((t,i)=>Array.isArray(i)?e(i,t):(t.add(i),t),i),i=e(t,new Set),s=[];i.forEach(t=>s.unshift(t)),this._styles=s}else this._styles=[t]}initialize(){super.initialize(),this.constructor._getUniqueStyles(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const t=this.constructor._styles;0!==t.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?K?this.renderRoot.adoptedStyleSheets=t.map(t=>t.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(t.map(t=>t.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(t){const e=this.render();super.update(t),e!==et&&this.constructor.render(e,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(t=>{const e=document.createElement("style");e.textContent=t.cssText,this.renderRoot.appendChild(e)}))}render(){return et}}it.finalized=!0,it.render=(t,e,s)=>{if(!s||"object"!=typeof s||!s.scopeName)throw Error("The `scopeName` option is required.");const n=s.scopeName,r=M.has(e),o=H&&11===e.nodeType&&!!e.host,a=o&&!L.has(n),h=a?document.createDocumentFragment():e;if(((t,e,s)=>{let n=M.get(e);void 0===n&&(i(e,e.firstChild),M.set(e,n=new N(Object.assign({templateFactory:z},s))),n.appendInto(e)),n.setValue(t),n.commit()})(t,h,Object.assign({templateFactory:W(n)},s)),a){const t=M.get(h);M.delete(h);const s=t.value instanceof y?t.value.template:void 0;I(n,h,s),i(e,e.firstChild),e.appendChild(h),M.set(e,t)}!r&&o&&window.ShadyCSS.styleElement(e.host)};const st=t=>{let e=0;for(const i of t){const t=i.posY+i.height;e=t>e?t:e}return e},nt=(t,e)=>t.key!==e.key&&(!(t.posX+t.width<=e.posX)&&(!(t.posX>=e.posX+e.width)&&(!(t.posY+t.height<=e.posY)&&!(t.posY>=e.posY+e.height)))),rt=(t,e)=>{for(const i of t)if(nt(i,e))return i},ot=(t,e,i)=>{e.posY+=1;for(let s=t.map(t=>t.key).indexOf(e.key)+1;s<t.length;s++){const n=t[s];if(n.posY>e.posY+e.height)break;nt(e,n)&&ot(t,n,i+e.height)}e.posY=i};function at(t){return t.slice(0).sort((function(t,e){return t.posY>e.posY||t.posY===e.posY&&t.posX>e.posX?1:t.posY===e.posY&&t.posX===e.posX?0:-1}))}const ht=t=>{const e=[],i=[],s=at(t);for(const n of s){for(;n.posY>0&&!rt(e,n);)n.posY--;let r;for(;r=rt(e,n);)ot(s,n,r.posY+r.height);n.hasMoved=!1,e.push(n),i[t.indexOf(n)]=n}return i};function lt(t,e,i,s,n){if(n){n=!1;const r={posX:i.posX,posY:Math.max(i.height-e.posY,0),width:i.width,height:i.height,key:"-1"};if(!rt(t,r))return dt(t,i,void 0,r.posY,s,n)}return dt(t,i,void 0,i.posY+1,s,n)}function dt(t,e,i,s,n,r){if(e.posY===s&&e.posX===i)return t;const o=e.posY;void 0!==i&&(e.posX=i),void 0!==s&&(e.posY=s),e.hasMoved=!0;let a=at(t);void 0!==s&&o>=s&&(a=a.reverse());const h=function(t,e){return t.filter(t=>nt(t,e))}(a,e),l=t.findIndex(t=>t.key===e.key);t[l]=e;for(let i=0,s=h.length;i<s;i++){const s=h[i];s.hasMoved||(t=lt([...t],e,s,n,r))}return t}const ct=(t,e,i={})=>{t.dispatchEvent(new CustomEvent(e,{detail:i}))};function pt(t,e,i,s){var n,r=arguments.length,o=r<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,s);else for(var a=t.length-1;a>=0;a--)(n=t[a])&&(o=(r<3?n(o):r>3?n(e,i,o):n(e,i))||o);return r>3&&o&&Object.defineProperty(e,i,o),o}const ut="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,_t=(t,e,i=null)=>{for(;e!==i;){const i=e.nextSibling;t.removeChild(e),e=i}},mt=`{{lit-${(Math.random()+"").slice(2)}}}`,gt=`\x3c!--${mt}--\x3e`,ft=RegExp(`${mt}|${gt}`);class yt{constructor(t,e){this.parts=[],this.element=e;const i=[],s=[],n=document.createTreeWalker(e.content,133,null,!1);let r=0,o=-1,a=0;const{strings:h,values:{length:l}}=t;for(;a<l;){const t=n.nextNode();if(null!==t){if(o++,1===t.nodeType){if(t.hasAttributes()){const e=t.attributes,{length:i}=e;let s=0;for(let t=0;t<i;t++)vt(e[t].name,"$lit$")&&s++;for(;s-- >0;){const e=h[a],i=St.exec(e)[2],s=i.toLowerCase()+"$lit$",n=t.getAttribute(s);t.removeAttribute(s);const r=n.split(ft);this.parts.push({type:"attribute",index:o,name:i,strings:r}),a+=r.length-1}}"TEMPLATE"===t.tagName&&(s.push(t),n.currentNode=t.content)}else if(3===t.nodeType){const e=t.data;if(e.indexOf(mt)>=0){const s=t.parentNode,n=e.split(ft),r=n.length-1;for(let e=0;e<r;e++){let i,r=n[e];if(""===r)i=wt();else{const t=St.exec(r);null!==t&&vt(t[2],"$lit$")&&(r=r.slice(0,t.index)+t[1]+t[2].slice(0,-5)+t[3]),i=document.createTextNode(r)}s.insertBefore(i,t),this.parts.push({type:"node",index:++o})}""===n[r]?(s.insertBefore(wt(),t),i.push(t)):t.data=n[r],a+=r}}else if(8===t.nodeType)if(t.data===mt){const e=t.parentNode;null!==t.previousSibling&&o!==r||(o++,e.insertBefore(wt(),t)),r=o,this.parts.push({type:"node",index:o}),null===t.nextSibling?t.data="":(i.push(t),o--),a++}else{let e=-1;for(;-1!==(e=t.data.indexOf(mt,e+1));)this.parts.push({type:"node",index:-1}),a++}}else n.currentNode=s.pop()}for(const t of i)t.parentNode.removeChild(t)}}const vt=(t,e)=>{const i=t.length-e.length;return i>=0&&t.slice(i)===e},bt=t=>-1!==t.index,wt=()=>document.createComment(""),St=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function xt(t,e){const{element:{content:i},parts:s}=t,n=document.createTreeWalker(i,133,null,!1);let r=Nt(s),o=s[r],a=-1,h=0;const l=[];let d=null;for(;n.nextNode();){a++;const t=n.currentNode;for(t.previousSibling===d&&(d=null),e.has(t)&&(l.push(t),null===d&&(d=t)),null!==d&&h++;void 0!==o&&o.index===a;)o.index=null!==d?-1:o.index-h,r=Nt(s,r),o=s[r]}l.forEach(t=>t.parentNode.removeChild(t))}const Pt=t=>{let e=11===t.nodeType?0:1;const i=document.createTreeWalker(t,133,null,!1);for(;i.nextNode();)e++;return e},Nt=(t,e=-1)=>{for(let i=e+1;i<t.length;i++){const e=t[i];if(bt(e))return i}return-1},Et=new WeakMap,Ct=t=>"function"==typeof t&&Et.has(t),Tt={},At={};class Ot{constructor(t,e,i){this.__parts=[],this.template=t,this.processor=e,this.options=i}update(t){let e=0;for(const i of this.__parts)void 0!==i&&i.setValue(t[e]),e++;for(const t of this.__parts)void 0!==t&&t.commit()}_clone(){const t=ut?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=[],i=this.template.parts,s=document.createTreeWalker(t,133,null,!1);let n,r=0,o=0,a=s.nextNode();for(;r<i.length;)if(n=i[r],bt(n)){for(;o<n.index;)o++,"TEMPLATE"===a.nodeName&&(e.push(a),s.currentNode=a.content),null===(a=s.nextNode())&&(s.currentNode=e.pop(),a=s.nextNode());if("node"===n.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(a.previousSibling),this.__parts.push(t)}else this.__parts.push(...this.processor.handleAttributeExpressions(a,n.name,n.strings,this.options));r++}else this.__parts.push(void 0),r++;return ut&&(document.adoptNode(t),customElements.upgrade(t)),t}}const kt=` ${mt} `;class zt{constructor(t,e,i,s){this.strings=t,this.values=e,this.type=i,this.processor=s}getHTML(){const t=this.strings.length-1;let e="",i=!1;for(let s=0;s<t;s++){const t=this.strings[s],n=t.lastIndexOf("\x3c!--");i=(n>-1||i)&&-1===t.indexOf("--\x3e",n+1);const r=St.exec(t);e+=null===r?t+(i?kt:gt):t.substr(0,r.index)+r[1]+r[2]+"$lit$"+r[3]+mt}return e+=this.strings[t],e}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}class Vt extends zt{getHTML(){return`<svg>${super.getHTML()}</svg>`}getTemplateElement(){const t=super.getTemplateElement(),e=t.content,i=e.firstChild;return e.removeChild(i),((t,e,i=null,s=null)=>{for(;e!==i;){const i=e.nextSibling;t.insertBefore(e,s),e=i}})(e,i.firstChild),t}}const Mt=t=>null===t||!("object"==typeof t||"function"==typeof t),Rt=t=>Array.isArray(t)||!(!t||!t[Symbol.iterator]);class $t{constructor(t,e,i){this.dirty=!0,this.element=t,this.name=e,this.strings=i,this.parts=[];for(let t=0;t<i.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new Ut(this)}_getValue(){const t=this.strings,e=t.length-1;let i="";for(let s=0;s<e;s++){i+=t[s];const e=this.parts[s];if(void 0!==e){const t=e.value;if(Mt(t)||!Rt(t))i+="string"==typeof t?t:t+"";else for(const e of t)i+="string"==typeof e?e:e+""}}return i+=t[e],i}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class Ut{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===Tt||Mt(t)&&t===this.value||(this.value=t,Ct(t)||(this.committer.dirty=!0))}commit(){for(;Ct(this.value);){const t=this.value;this.value=Tt,t(this)}this.value!==Tt&&this.committer.commit()}}class Ht{constructor(t){this.value=void 0,this.__pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(wt()),this.endNode=t.appendChild(wt())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t.__insert(this.startNode=wt()),t.__insert(this.endNode=wt())}insertAfterPart(t){t.__insert(this.startNode=wt()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this.__pendingValue=t}commit(){if(null===this.startNode.parentNode)return;for(;Ct(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=Tt,t(this)}const t=this.__pendingValue;t!==Tt&&(Mt(t)?t!==this.value&&this.__commitText(t):t instanceof zt?this.__commitTemplateResult(t):t instanceof Node?this.__commitNode(t):Rt(t)?this.__commitIterable(t):t===At?(this.value=At,this.clear()):this.__commitText(t))}__insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}__commitNode(t){this.value!==t&&(this.clear(),this.__insert(t),this.value=t)}__commitText(t){const e=this.startNode.nextSibling,i="string"==typeof(t=null==t?"":t)?t:t+"";e===this.endNode.previousSibling&&3===e.nodeType?e.data=i:this.__commitNode(document.createTextNode(i)),this.value=t}__commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof Ot&&this.value.template===e)this.value.update(t.values);else{const i=new Ot(e,t.processor,this.options),s=i._clone();i.update(t.values),this.__commitNode(s),this.value=i}}__commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let i,s=0;for(const n of t)i=e[s],void 0===i&&(i=new Ht(this.options),e.push(i),0===s?i.appendIntoPart(this):i.insertAfterPart(e[s-1])),i.setValue(n),i.commit(),s++;s<e.length&&(e.length=s,this.clear(i&&i.endNode))}clear(t=this.startNode){_t(this.startNode.parentNode,t.nextSibling,this.endNode)}}class Wt{constructor(t,e,i){if(this.value=void 0,this.__pendingValue=void 0,2!==i.length||""!==i[0]||""!==i[1])throw Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=i}setValue(t){this.__pendingValue=t}commit(){for(;Ct(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=Tt,t(this)}if(this.__pendingValue===Tt)return;const t=!!this.__pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.__pendingValue=Tt}}class jt extends $t{constructor(t,e,i){super(t,e,i),this.single=2===i.length&&""===i[0]&&""===i[1]}_createPart(){return new Lt(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class Lt extends Ut{}let It=!1;(()=>{try{const t={get capture(){return It=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}})();class Dt{constructor(t,e,i){this.value=void 0,this.__pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=i,this.__boundHandleEvent=t=>this.handleEvent(t)}setValue(t){this.__pendingValue=t}commit(){for(;Ct(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=Tt,t(this)}if(this.__pendingValue===Tt)return;const t=this.__pendingValue,e=this.value,i=null==t||null!=e&&(t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive),s=null!=t&&(null==e||i);i&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),s&&(this.__options=qt(t),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=t,this.__pendingValue=Tt}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const qt=t=>t&&(It?{capture:t.capture,passive:t.passive,once:t.once}:t.capture);function Bt(t){let e=Xt.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},Xt.set(t.type,e));let i=e.stringsArray.get(t.strings);if(void 0!==i)return i;const s=t.strings.join(mt);return i=e.keyString.get(s),void 0===i&&(i=new yt(t,t.getTemplateElement()),e.keyString.set(s,i)),e.stringsArray.set(t.strings,i),i}const Xt=new Map,Yt=new WeakMap,Ft=new class{handleAttributeExpressions(t,e,i,s){const n=e[0];return"."===n?new jt(t,e.slice(1),i).parts:"@"===n?[new Dt(t,e.slice(1),s.eventContext)]:"?"===n?[new Wt(t,e.slice(1),i)]:new $t(t,e,i).parts}handleTextExpression(t){return new Ht(t)}};"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.2.1");const Jt=(t,...e)=>new zt(t,e,"html",Ft),Gt=(t,...e)=>new Vt(t,e,"svg",Ft),Kt=(t,e)=>`${t}--${e}`;let Qt=!0;void 0===window.ShadyCSS?Qt=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),Qt=!1);const Zt=t=>e=>{const i=Kt(e.type,t);let s=Xt.get(i);void 0===s&&(s={stringsArray:new WeakMap,keyString:new Map},Xt.set(i,s));let n=s.stringsArray.get(e.strings);if(void 0!==n)return n;const r=e.strings.join(mt);if(n=s.keyString.get(r),void 0===n){const i=e.getTemplateElement();Qt&&window.ShadyCSS.prepareTemplateDom(i,t),n=new yt(e,i),s.keyString.set(r,n)}return s.stringsArray.set(e.strings,n),n},te=["html","svg"],ee=new Set;window.JSCompiler_renameProperty=(t,e)=>t;const ie={toAttribute(t,e){switch(e){case Boolean:return t?"":null;case Object:case Array:return null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){switch(e){case Boolean:return null!==t;case Number:return null===t?null:Number(t);case Object:case Array:return JSON.parse(t)}return t}},se=(t,e)=>e!==t&&(e==e||t==t),ne={attribute:!0,type:String,converter:ie,reflect:!1,hasChanged:se};class re extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=new Promise(t=>this._enableUpdatingResolver=t),this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const t=[];return this._classProperties.forEach((e,i)=>{const s=this._attributeNameForProperty(i,e);void 0!==s&&(this._attributeToPropertyMap.set(s,i),t.push(s))}),t}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const t=Object.getPrototypeOf(this)._classProperties;void 0!==t&&t.forEach((t,e)=>this._classProperties.set(e,t))}}static createProperty(t,e=ne){if(this._ensureClassProperties(),this._classProperties.set(t,e),e.noAccessor||this.prototype.hasOwnProperty(t))return;const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(i){const s=this[t];this[e]=i,this._requestUpdate(t,s)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this._classProperties&&this._classProperties.get(t)||ne}static finalize(){const t=Object.getPrototypeOf(this);if(t.hasOwnProperty("finalized")||t.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const t=this.properties,e=[...Object.getOwnPropertyNames(t),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[]];for(const i of e)this.createProperty(i,t[i])}}static _attributeNameForProperty(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}static _valueHasChanged(t,e,i=se){return i(t,e)}static _propertyValueFromAttribute(t,e){const i=e.type,s=e.converter||ie,n="function"==typeof s?s:s.fromAttribute;return n?n(t,i):t}static _propertyValueToAttribute(t,e){if(void 0===e.reflect)return;const i=e.type,s=e.converter;return(s&&s.toAttribute||ie.toAttribute)(t,i)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((t,e)=>{if(this.hasOwnProperty(e)){const t=this[e];delete this[e],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(e,t)}})}_applyInstanceProperties(){this._instanceProperties.forEach((t,e)=>this[e]=t),this._instanceProperties=void 0}connectedCallback(){this.enableUpdating()}enableUpdating(){void 0!==this._enableUpdatingResolver&&(this._enableUpdatingResolver(),this._enableUpdatingResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(t,e,i){e!==i&&this._attributeToProperty(t,i)}_propertyToAttribute(t,e,i=ne){const s=this.constructor,n=s._attributeNameForProperty(t,i);if(void 0!==n){const t=s._propertyValueToAttribute(e,i);if(void 0===t)return;this._updateState=8|this._updateState,null==t?this.removeAttribute(n):this.setAttribute(n,t),this._updateState=-9&this._updateState}}_attributeToProperty(t,e){if(8&this._updateState)return;const i=this.constructor,s=i._attributeToPropertyMap.get(t);if(void 0!==s){const t=i.getPropertyOptions(s);this._updateState=16|this._updateState,this[s]=i._propertyValueFromAttribute(e,t),this._updateState=-17&this._updateState}}_requestUpdate(t,e){let i=!0;if(void 0!==t){const s=this.constructor,n=s.getPropertyOptions(t);s._valueHasChanged(this[t],e,n.hasChanged)?(this._changedProperties.has(t)||this._changedProperties.set(t,e),!0!==n.reflect||16&this._updateState||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(t,n))):i=!1}!this._hasRequestedUpdate&&i&&(this._updatePromise=this._enqueueUpdate())}requestUpdate(t,e){return this._requestUpdate(t,e),this.updateComplete}async _enqueueUpdate(){this._updateState=4|this._updateState;try{await this._updatePromise}catch(t){}const t=this.performUpdate();return null!=t&&await t,!this._hasRequestedUpdate}get _hasRequestedUpdate(){return 4&this._updateState}get hasUpdated(){return 1&this._updateState}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let t=!1;const e=this._changedProperties;try{t=this.shouldUpdate(e),t?this.update(e):this._markUpdated()}catch(e){throw t=!1,this._markUpdated(),e}t&&(1&this._updateState||(this._updateState=1|this._updateState,this.firstUpdated(e)),this.updated(e))}_markUpdated(){this._changedProperties=new Map,this._updateState=-5&this._updateState}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(t){return!0}update(t){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((t,e)=>this._propertyToAttribute(e,this[e],t)),this._reflectingProperties=void 0),this._markUpdated()}updated(t){}firstUpdated(t){}}re.finalized=!0;const oe=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?Object.assign(Object.assign({},e),{finisher(i){i.createProperty(e.key,t)}}):{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function ae(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):oe(t,e)}const he="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,le=Symbol();class de{constructor(t,e){if(e!==le)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}get styleSheet(){return void 0===this._styleSheet&&(he?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const ce=(t,...e)=>{const i=e.reduce((e,i,s)=>e+(t=>{if(t instanceof de)return t.cssText;if("number"==typeof t)return t;throw Error(`Value passed to 'css' function must be a 'css' function result: ${t}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`)})(i)+t[s+1],t[0]);return new de(i,le)};(window.litElementVersions||(window.litElementVersions=[])).push("2.3.1");const pe={};class ue extends re{static getStyles(){return this.styles}static _getUniqueStyles(){if(this.hasOwnProperty(JSCompiler_renameProperty("_styles",this)))return;const t=this.getStyles();if(void 0===t)this._styles=[];else if(Array.isArray(t)){const e=(t,i)=>t.reduceRight((t,i)=>Array.isArray(i)?e(i,t):(t.add(i),t),i),i=e(t,new Set),s=[];i.forEach(t=>s.unshift(t)),this._styles=s}else this._styles=[t]}initialize(){super.initialize(),this.constructor._getUniqueStyles(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const t=this.constructor._styles;0!==t.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?he?this.renderRoot.adoptedStyleSheets=t.map(t=>t.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(t.map(t=>t.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(t){const e=this.render();super.update(t),e!==pe&&this.constructor.render(e,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(t=>{const e=document.createElement("style");e.textContent=t.cssText,this.renderRoot.appendChild(e)}))}render(){return pe}}function _e(t,e,i,s){var n,r=arguments.length,o=r<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,s);else for(var a=t.length-1;a>=0;a--)(n=t[a])&&(o=(r<3?n(o):r>3?n(e,i,o):n(e,i))||o);return r>3&&o&&Object.defineProperty(e,i,o),o}ue.finalized=!0,ue.render=(t,e,i)=>{if(!i||"object"!=typeof i||!i.scopeName)throw Error("The `scopeName` option is required.");const s=i.scopeName,n=Yt.has(e),r=Qt&&11===e.nodeType&&!!e.host,o=r&&!ee.has(s),a=o?document.createDocumentFragment():e;if(((t,e,i)=>{let s=Yt.get(e);void 0===s&&(_t(e,e.firstChild),Yt.set(e,s=new Ht(Object.assign({templateFactory:Bt},i))),s.appendInto(e)),s.setValue(t),s.commit()})(t,a,Object.assign({templateFactory:Zt(s)},i)),o){const t=Yt.get(a);Yt.delete(a);((t,e,i)=>{ee.add(t);const s=i?i.element:document.createElement("template"),n=e.querySelectorAll("style"),{length:r}=n;if(0===r)return void window.ShadyCSS.prepareTemplateStyles(s,t);const o=document.createElement("style");for(let t=0;t<r;t++){const e=n[t];e.parentNode.removeChild(e),o.textContent+=e.textContent}(t=>{te.forEach(e=>{const i=Xt.get(Kt(e,t));void 0!==i&&i.keyString.forEach(t=>{const{element:{content:e}}=t,i=new Set;Array.from(e.querySelectorAll("style")).forEach(t=>{i.add(t)}),xt(t,i)})})})(t);const a=s.content;i?function(t,e,i=null){const{element:{content:s},parts:n}=t;if(null==i)return void s.appendChild(e);const r=document.createTreeWalker(s,133,null,!1);let o=Nt(n),a=0,h=-1;for(;r.nextNode();)for(h++,r.currentNode===i&&(a=Pt(e),i.parentNode.insertBefore(e,i));-1!==o&&n[o].index===h;){if(a>0){for(;-1!==o;)n[o].index+=a,o=Nt(n,o);return}o=Nt(n,o)}}(i,o,a.firstChild):a.insertBefore(o,a.firstChild),window.ShadyCSS.prepareTemplateStyles(s,t);const h=a.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==h)e.insertBefore(h.cloneNode(!0),e.firstChild);else if(i){a.insertBefore(o,a.firstChild);const t=new Set;t.add(o),xt(i,t)}})(s,a,t.value instanceof Ot?t.value.template:void 0),_t(e,e.firstChild),e.appendChild(a),Yt.set(e,t)}!n&&r&&window.ShadyCSS.styleElement(e.host)};const me="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,ge=(t,e,i=null)=>{for(;e!==i;){const i=e.nextSibling;t.removeChild(e),e=i}},fe=`{{lit-${(Math.random()+"").slice(2)}}}`,ye=`\x3c!--${fe}--\x3e`,ve=RegExp(`${fe}|${ye}`);class be{constructor(t,e){this.parts=[],this.element=e;const i=[],s=[],n=document.createTreeWalker(e.content,133,null,!1);let r=0,o=-1,a=0;const{strings:h,values:{length:l}}=t;for(;a<l;){const t=n.nextNode();if(null!==t){if(o++,1===t.nodeType){if(t.hasAttributes()){const e=t.attributes,{length:i}=e;let s=0;for(let t=0;t<i;t++)we(e[t].name,"$lit$")&&s++;for(;s-- >0;){const e=h[a],i=Pe.exec(e)[2],s=i.toLowerCase()+"$lit$",n=t.getAttribute(s);t.removeAttribute(s);const r=n.split(ve);this.parts.push({type:"attribute",index:o,name:i,strings:r}),a+=r.length-1}}"TEMPLATE"===t.tagName&&(s.push(t),n.currentNode=t.content)}else if(3===t.nodeType){const e=t.data;if(e.indexOf(fe)>=0){const s=t.parentNode,n=e.split(ve),r=n.length-1;for(let e=0;e<r;e++){let i,r=n[e];if(""===r)i=xe();else{const t=Pe.exec(r);null!==t&&we(t[2],"$lit$")&&(r=r.slice(0,t.index)+t[1]+t[2].slice(0,-5)+t[3]),i=document.createTextNode(r)}s.insertBefore(i,t),this.parts.push({type:"node",index:++o})}""===n[r]?(s.insertBefore(xe(),t),i.push(t)):t.data=n[r],a+=r}}else if(8===t.nodeType)if(t.data===fe){const e=t.parentNode;null!==t.previousSibling&&o!==r||(o++,e.insertBefore(xe(),t)),r=o,this.parts.push({type:"node",index:o}),null===t.nextSibling?t.data="":(i.push(t),o--),a++}else{let e=-1;for(;-1!==(e=t.data.indexOf(fe,e+1));)this.parts.push({type:"node",index:-1}),a++}}else n.currentNode=s.pop()}for(const t of i)t.parentNode.removeChild(t)}}const we=(t,e)=>{const i=t.length-e.length;return i>=0&&t.slice(i)===e},Se=t=>-1!==t.index,xe=()=>document.createComment(""),Pe=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function Ne(t,e){const{element:{content:i},parts:s}=t,n=document.createTreeWalker(i,133,null,!1);let r=Ce(s),o=s[r],a=-1,h=0;const l=[];let d=null;for(;n.nextNode();){a++;const t=n.currentNode;for(t.previousSibling===d&&(d=null),e.has(t)&&(l.push(t),null===d&&(d=t)),null!==d&&h++;void 0!==o&&o.index===a;)o.index=null!==d?-1:o.index-h,r=Ce(s,r),o=s[r]}l.forEach(t=>t.parentNode.removeChild(t))}const Ee=t=>{let e=11===t.nodeType?0:1;const i=document.createTreeWalker(t,133,null,!1);for(;i.nextNode();)e++;return e},Ce=(t,e=-1)=>{for(let i=e+1;i<t.length;i++){const e=t[i];if(Se(e))return i}return-1},Te=new WeakMap,Ae=t=>"function"==typeof t&&Te.has(t),Oe={},ke={};class ze{constructor(t,e,i){this.__parts=[],this.template=t,this.processor=e,this.options=i}update(t){let e=0;for(const i of this.__parts)void 0!==i&&i.setValue(t[e]),e++;for(const t of this.__parts)void 0!==t&&t.commit()}_clone(){const t=me?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=[],i=this.template.parts,s=document.createTreeWalker(t,133,null,!1);let n,r=0,o=0,a=s.nextNode();for(;r<i.length;)if(n=i[r],Se(n)){for(;o<n.index;)o++,"TEMPLATE"===a.nodeName&&(e.push(a),s.currentNode=a.content),null===(a=s.nextNode())&&(s.currentNode=e.pop(),a=s.nextNode());if("node"===n.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(a.previousSibling),this.__parts.push(t)}else this.__parts.push(...this.processor.handleAttributeExpressions(a,n.name,n.strings,this.options));r++}else this.__parts.push(void 0),r++;return me&&(document.adoptNode(t),customElements.upgrade(t)),t}}const Ve=` ${fe} `;class Me{constructor(t,e,i,s){this.strings=t,this.values=e,this.type=i,this.processor=s}getHTML(){const t=this.strings.length-1;let e="",i=!1;for(let s=0;s<t;s++){const t=this.strings[s],n=t.lastIndexOf("\x3c!--");i=(n>-1||i)&&-1===t.indexOf("--\x3e",n+1);const r=Pe.exec(t);e+=null===r?t+(i?Ve:ye):t.substr(0,r.index)+r[1]+r[2]+"$lit$"+r[3]+fe}return e+=this.strings[t],e}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}const Re=t=>null===t||!("object"==typeof t||"function"==typeof t),$e=t=>Array.isArray(t)||!(!t||!t[Symbol.iterator]);class Ue{constructor(t,e,i){this.dirty=!0,this.element=t,this.name=e,this.strings=i,this.parts=[];for(let t=0;t<i.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new He(this)}_getValue(){const t=this.strings,e=t.length-1;let i="";for(let s=0;s<e;s++){i+=t[s];const e=this.parts[s];if(void 0!==e){const t=e.value;if(Re(t)||!$e(t))i+="string"==typeof t?t:t+"";else for(const e of t)i+="string"==typeof e?e:e+""}}return i+=t[e],i}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class He{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===Oe||Re(t)&&t===this.value||(this.value=t,Ae(t)||(this.committer.dirty=!0))}commit(){for(;Ae(this.value);){const t=this.value;this.value=Oe,t(this)}this.value!==Oe&&this.committer.commit()}}class We{constructor(t){this.value=void 0,this.__pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(xe()),this.endNode=t.appendChild(xe())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t.__insert(this.startNode=xe()),t.__insert(this.endNode=xe())}insertAfterPart(t){t.__insert(this.startNode=xe()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this.__pendingValue=t}commit(){if(null===this.startNode.parentNode)return;for(;Ae(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=Oe,t(this)}const t=this.__pendingValue;t!==Oe&&(Re(t)?t!==this.value&&this.__commitText(t):t instanceof Me?this.__commitTemplateResult(t):t instanceof Node?this.__commitNode(t):$e(t)?this.__commitIterable(t):t===ke?(this.value=ke,this.clear()):this.__commitText(t))}__insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}__commitNode(t){this.value!==t&&(this.clear(),this.__insert(t),this.value=t)}__commitText(t){const e=this.startNode.nextSibling,i="string"==typeof(t=null==t?"":t)?t:t+"";e===this.endNode.previousSibling&&3===e.nodeType?e.data=i:this.__commitNode(document.createTextNode(i)),this.value=t}__commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof ze&&this.value.template===e)this.value.update(t.values);else{const i=new ze(e,t.processor,this.options),s=i._clone();i.update(t.values),this.__commitNode(s),this.value=i}}__commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let i,s=0;for(const n of t)i=e[s],void 0===i&&(i=new We(this.options),e.push(i),0===s?i.appendIntoPart(this):i.insertAfterPart(e[s-1])),i.setValue(n),i.commit(),s++;s<e.length&&(e.length=s,this.clear(i&&i.endNode))}clear(t=this.startNode){ge(this.startNode.parentNode,t.nextSibling,this.endNode)}}class je{constructor(t,e,i){if(this.value=void 0,this.__pendingValue=void 0,2!==i.length||""!==i[0]||""!==i[1])throw Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=i}setValue(t){this.__pendingValue=t}commit(){for(;Ae(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=Oe,t(this)}if(this.__pendingValue===Oe)return;const t=!!this.__pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.__pendingValue=Oe}}class Le extends Ue{constructor(t,e,i){super(t,e,i),this.single=2===i.length&&""===i[0]&&""===i[1]}_createPart(){return new Ie(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class Ie extends He{}let De=!1;(()=>{try{const t={get capture(){return De=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}})();class qe{constructor(t,e,i){this.value=void 0,this.__pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=i,this.__boundHandleEvent=t=>this.handleEvent(t)}setValue(t){this.__pendingValue=t}commit(){for(;Ae(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=Oe,t(this)}if(this.__pendingValue===Oe)return;const t=this.__pendingValue,e=this.value,i=null==t||null!=e&&(t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive),s=null!=t&&(null==e||i);i&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),s&&(this.__options=Be(t),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=t,this.__pendingValue=Oe}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const Be=t=>t&&(De?{capture:t.capture,passive:t.passive,once:t.once}:t.capture);function Xe(t){let e=Ye.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},Ye.set(t.type,e));let i=e.stringsArray.get(t.strings);if(void 0!==i)return i;const s=t.strings.join(fe);return i=e.keyString.get(s),void 0===i&&(i=new be(t,t.getTemplateElement()),e.keyString.set(s,i)),e.stringsArray.set(t.strings,i),i}const Ye=new Map,Fe=new WeakMap,Je=new class{handleAttributeExpressions(t,e,i,s){const n=e[0];return"."===n?new Le(t,e.slice(1),i).parts:"@"===n?[new qe(t,e.slice(1),s.eventContext)]:"?"===n?[new je(t,e.slice(1),i)]:new Ue(t,e,i).parts}handleTextExpression(t){return new We(t)}};"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.2.1");const Ge=(t,...e)=>new Me(t,e,"html",Je),Ke=(t,e)=>`${t}--${e}`;let Qe=!0;void 0===window.ShadyCSS?Qe=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),Qe=!1);const Ze=t=>e=>{const i=Ke(e.type,t);let s=Ye.get(i);void 0===s&&(s={stringsArray:new WeakMap,keyString:new Map},Ye.set(i,s));let n=s.stringsArray.get(e.strings);if(void 0!==n)return n;const r=e.strings.join(fe);if(n=s.keyString.get(r),void 0===n){const i=e.getTemplateElement();Qe&&window.ShadyCSS.prepareTemplateDom(i,t),n=new be(e,i),s.keyString.set(r,n)}return s.stringsArray.set(e.strings,n),n},ti=["html","svg"],ei=new Set;window.JSCompiler_renameProperty=(t,e)=>t;const ii={toAttribute(t,e){switch(e){case Boolean:return t?"":null;case Object:case Array:return null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){switch(e){case Boolean:return null!==t;case Number:return null===t?null:Number(t);case Object:case Array:return JSON.parse(t)}return t}},si=(t,e)=>e!==t&&(e==e||t==t),ni={attribute:!0,type:String,converter:ii,reflect:!1,hasChanged:si};class ri extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=new Promise(t=>this._enableUpdatingResolver=t),this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const t=[];return this._classProperties.forEach((e,i)=>{const s=this._attributeNameForProperty(i,e);void 0!==s&&(this._attributeToPropertyMap.set(s,i),t.push(s))}),t}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const t=Object.getPrototypeOf(this)._classProperties;void 0!==t&&t.forEach((t,e)=>this._classProperties.set(e,t))}}static createProperty(t,e=ni){if(this._ensureClassProperties(),this._classProperties.set(t,e),e.noAccessor||this.prototype.hasOwnProperty(t))return;const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(i){const s=this[t];this[e]=i,this._requestUpdate(t,s)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this._classProperties&&this._classProperties.get(t)||ni}static finalize(){const t=Object.getPrototypeOf(this);if(t.hasOwnProperty("finalized")||t.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const t=this.properties,e=[...Object.getOwnPropertyNames(t),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[]];for(const i of e)this.createProperty(i,t[i])}}static _attributeNameForProperty(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}static _valueHasChanged(t,e,i=si){return i(t,e)}static _propertyValueFromAttribute(t,e){const i=e.type,s=e.converter||ii,n="function"==typeof s?s:s.fromAttribute;return n?n(t,i):t}static _propertyValueToAttribute(t,e){if(void 0===e.reflect)return;const i=e.type,s=e.converter;return(s&&s.toAttribute||ii.toAttribute)(t,i)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((t,e)=>{if(this.hasOwnProperty(e)){const t=this[e];delete this[e],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(e,t)}})}_applyInstanceProperties(){this._instanceProperties.forEach((t,e)=>this[e]=t),this._instanceProperties=void 0}connectedCallback(){this.enableUpdating()}enableUpdating(){void 0!==this._enableUpdatingResolver&&(this._enableUpdatingResolver(),this._enableUpdatingResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(t,e,i){e!==i&&this._attributeToProperty(t,i)}_propertyToAttribute(t,e,i=ni){const s=this.constructor,n=s._attributeNameForProperty(t,i);if(void 0!==n){const t=s._propertyValueToAttribute(e,i);if(void 0===t)return;this._updateState=8|this._updateState,null==t?this.removeAttribute(n):this.setAttribute(n,t),this._updateState=-9&this._updateState}}_attributeToProperty(t,e){if(8&this._updateState)return;const i=this.constructor,s=i._attributeToPropertyMap.get(t);if(void 0!==s){const t=i.getPropertyOptions(s);this._updateState=16|this._updateState,this[s]=i._propertyValueFromAttribute(e,t),this._updateState=-17&this._updateState}}_requestUpdate(t,e){let i=!0;if(void 0!==t){const s=this.constructor,n=s.getPropertyOptions(t);s._valueHasChanged(this[t],e,n.hasChanged)?(this._changedProperties.has(t)||this._changedProperties.set(t,e),!0!==n.reflect||16&this._updateState||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(t,n))):i=!1}!this._hasRequestedUpdate&&i&&(this._updatePromise=this._enqueueUpdate())}requestUpdate(t,e){return this._requestUpdate(t,e),this.updateComplete}async _enqueueUpdate(){this._updateState=4|this._updateState;try{await this._updatePromise}catch(t){}const t=this.performUpdate();return null!=t&&await t,!this._hasRequestedUpdate}get _hasRequestedUpdate(){return 4&this._updateState}get hasUpdated(){return 1&this._updateState}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let t=!1;const e=this._changedProperties;try{t=this.shouldUpdate(e),t?this.update(e):this._markUpdated()}catch(e){throw t=!1,this._markUpdated(),e}t&&(1&this._updateState||(this._updateState=1|this._updateState,this.firstUpdated(e)),this.updated(e))}_markUpdated(){this._changedProperties=new Map,this._updateState=-5&this._updateState}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(t){return!0}update(t){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((t,e)=>this._propertyToAttribute(e,this[e],t)),this._reflectingProperties=void 0),this._markUpdated()}updated(t){}firstUpdated(t){}}ri.finalized=!0;const oi=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?Object.assign(Object.assign({},e),{finisher(i){i.createProperty(e.key,t)}}):{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function ai(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):oi(t,e)}const hi="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype;(window.litElementVersions||(window.litElementVersions=[])).push("2.3.1");const li={};class di extends ri{static getStyles(){return this.styles}static _getUniqueStyles(){if(this.hasOwnProperty(JSCompiler_renameProperty("_styles",this)))return;const t=this.getStyles();if(void 0===t)this._styles=[];else if(Array.isArray(t)){const e=(t,i)=>t.reduceRight((t,i)=>Array.isArray(i)?e(i,t):(t.add(i),t),i),i=e(t,new Set),s=[];i.forEach(t=>s.unshift(t)),this._styles=s}else this._styles=[t]}initialize(){super.initialize(),this.constructor._getUniqueStyles(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const t=this.constructor._styles;0!==t.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?hi?this.renderRoot.adoptedStyleSheets=t.map(t=>t.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(t.map(t=>t.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(t){const e=this.render();super.update(t),e!==li&&this.constructor.render(e,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(t=>{const e=document.createElement("style");e.textContent=t.cssText,this.renderRoot.appendChild(e)}))}render(){return li}}di.finalized=!0,di.render=(t,e,i)=>{if(!i||"object"!=typeof i||!i.scopeName)throw Error("The `scopeName` option is required.");const s=i.scopeName,n=Fe.has(e),r=Qe&&11===e.nodeType&&!!e.host,o=r&&!ei.has(s),a=o?document.createDocumentFragment():e;if(((t,e,i)=>{let s=Fe.get(e);void 0===s&&(ge(e,e.firstChild),Fe.set(e,s=new We(Object.assign({templateFactory:Xe},i))),s.appendInto(e)),s.setValue(t),s.commit()})(t,a,Object.assign({templateFactory:Ze(s)},i)),o){const t=Fe.get(a);Fe.delete(a),((t,e,i)=>{ei.add(t);const s=i?i.element:document.createElement("template"),n=e.querySelectorAll("style"),{length:r}=n;if(0===r)return void window.ShadyCSS.prepareTemplateStyles(s,t);const o=document.createElement("style");for(let t=0;t<r;t++){const e=n[t];e.parentNode.removeChild(e),o.textContent+=e.textContent}(t=>{ti.forEach(e=>{const i=Ye.get(Ke(e,t));void 0!==i&&i.keyString.forEach(t=>{const{element:{content:e}}=t,i=new Set;Array.from(e.querySelectorAll("style")).forEach(t=>{i.add(t)}),Ne(t,i)})})})(t);const a=s.content;i?function(t,e,i=null){const{element:{content:s},parts:n}=t;if(null==i)return void s.appendChild(e);const r=document.createTreeWalker(s,133,null,!1);let o=Ce(n),a=0,h=-1;for(;r.nextNode();)for(h++,r.currentNode===i&&(a=Ee(e),i.parentNode.insertBefore(e,i));-1!==o&&n[o].index===h;){if(a>0){for(;-1!==o;)n[o].index+=a,o=Ce(n,o);return}o=Ce(n,o)}}(i,o,a.firstChild):a.insertBefore(o,a.firstChild),window.ShadyCSS.prepareTemplateStyles(s,t);const h=a.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==h)e.insertBefore(h.cloneNode(!0),e.firstChild);else if(i){a.insertBefore(o,a.firstChild);const t=new Set;t.add(o),Ne(i,t)}})(s,a,t.value instanceof ze?t.value.template:void 0),ge(e,e.firstChild),e.appendChild(a),Fe.set(e,t)}!n&&r&&window.ShadyCSS.styleElement(e.host)};const ci=(t,e,i={})=>{t.dispatchEvent(new CustomEvent(e,{detail:i}))},pi=(t,e)=>{if(t.type.startsWith("touch")){if(void 0===e)return;const i=ui(t,e);return{x:i.x,y:i.y}}return{x:t.clientX,y:t.clientY}},ui=(t,e)=>{const i=t.targetTouches&&Array.prototype.find.call(t.targetTouches,t=>e===t.identifier)||t.changedTouches&&Array.prototype.find.call(t.changedTouches,t=>e===t.identifier);return{x:i.clientX,y:i.clientY}};let _i="";const mi=(t,e)=>(_i||(_i=["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"].find(e=>gi(t[e]))),!(!_i||!gi(t[_i]))&&t[_i](e)),gi=t=>"function"==typeof t||"[object Function]"===Object.prototype.toString.call(t);let fi=class extends di{constructor(){super(...arguments),this.disabled=!1,this._dragging=!1}firstUpdated(){this.addEventListener("mousedown",this._dragStart.bind(this),{capture:!0,passive:!1}),this.addEventListener("touchstart",this._dragStart.bind(this),{capture:!0,passive:!1}),document.addEventListener("mousemove",this._drag.bind(this),{capture:!0,passive:!1}),document.addEventListener("touchmove",this._drag.bind(this),{capture:!0,passive:!1}),document.addEventListener("mouseup",this._dragEnd.bind(this),{capture:!0,passive:!1}),document.addEventListener("touchcancel",this._dragEnd.bind(this),{capture:!0,passive:!1}),document.addEventListener("touchend",this._dragEnd.bind(this),{capture:!0,passive:!1})}render(){return Ge`<slot></slot>`}_dragStart(t){if(t.type.startsWith("mouse")&&0!==t.button||this.disabled)return;if(this.handle&&!((t,e,i)=>{let s=t;do{if(console.log("Selector: ",e,"Node: ",s),mi(s,e))return!0;if(s===i)return!1;s=s.parentNode}while(s);return!1})(t.target,this.handle,this.offsetParent))return;var e;t.preventDefault(),t.stopPropagation(),"touchstart"===t.type&&(this._touchIdentifier=(e=t).targetTouches&&e.targetTouches[0]?e.targetTouches[0].identifier:e.changedTouches&&e.changedTouches[0]?e.changedTouches[0].identifier:0);const i=pi(t,this._touchIdentifier);i&&(this.startX=i.x,this.startY=i.y,this._dragging=!0,ci(this,"dragStart",{startX:this.startX,startY:this.startY}))}_drag(t){if(!this._dragging||this.disabled)return;t.preventDefault(),t.stopPropagation();const e=pi(t,this._touchIdentifier);if(!e)return;let i=e.x-this.startX,s=e.y-this.startY;this.grid&&(i=Math.round(i/this.grid[0])*this.grid[0],s=Math.round(s/this.grid[1])*this.grid[1]),(i||s)&&ci(this,"dragging",{deltaX:i,deltaY:s})}_dragEnd(t){this._dragging&&!this.disabled&&(t.preventDefault(),t.stopPropagation(),this._touchIdentifier=void 0,this._dragging=!1,ci(this,"dragEnd"))}};_e([ai({type:Array})],fi.prototype,"grid",void 0),_e([ai({type:Boolean,reflect:!0})],fi.prototype,"disabled",void 0),_e([ai()],fi.prototype,"handle",void 0),fi=_e([t=>"function"==typeof t?((t,e)=>(window.customElements.define("lit-draggable",e),e))(0,t):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(t){window.customElements.define("lit-draggable",t)}}})(0,t)],fi);const yi=(t,e,i={})=>{t.dispatchEvent(new CustomEvent(e,{detail:i}))};let vi=class extends ue{constructor(){super(...arguments),this.disabled=!1}render(){return Jt`
      <slot></slot>

      ${this.disabled?"":Jt`
            <lit-draggable
              @dragging=${this._resize}
              @dragStart=${this._resizeStart}
              @dragEnd=${this._resizeEnd}
            >
              ${this.handle?Jt`${this.handle}`:Gt`
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="icon-tabler-arrows-diagonal-2"
                      viewBox="0 0 24 24"
                    >
                      <path stroke="none" d="M0 0h24v24H0z" />
                      <polyline points="16 20 20 20 20 16" />
                      <line x1="14" y1="14" x2="20" y2="20" />
                      <polyline points="8 4 4 4 4 8" />
                      <line x1="4" y1="4" x2="10" y2="10" />
                    </svg>
                  `}
            </lit-draggable>
          `}
    `}_resizeStart(t){t.preventDefault(),t.stopPropagation(),this.startWidth=this.clientWidth,this.startHeight=this.clientHeight,yi(this,"resizeStart")}_resize(t){if(t.preventDefault(),t.stopPropagation(),void 0===this.startWidth||void 0===this.startHeight)return;const{deltaX:e,deltaY:i}=t.detail;if(0===i&&0===e)return;const s=this.startWidth+e,n=this.startHeight+i;yi(this,"resize",{width:s,height:n,deltaX:e,deltaY:i})}_resizeEnd(t){t.preventDefault(),t.stopPropagation(),this.startWidth=void 0,this.startHeight=void 0,yi(this,"resizeEnd")}static get styles(){return ce`
      :host {
        position: relative;
        display: block;
      }

      lit-draggable {
        position: absolute;
        left: var(--resize-handle-position-left, unset);
        top: var(--resize-handle-postion-top, unset);
        bottom: var(--resize-handle-position-bottom, 0);
        right: var(--resize-handle-postion-right, 0);
        width: var(--resize-handle-width, 18px);
        height: var(--resize-handle-height, 18px);
        user-select: none;
      }

      .icon-tabler-arrows-diagonal-2 {
        width: 100%;
        height: 100%;
        stroke-width: 1.5;
        stroke: #607d8b;
        fill: none;
        stroke-linecap: round;
        stroke-linejoin: round;
        cursor: se-resize;
      }
    `}};pt([ae({attribute:!1})],vi.prototype,"handle",void 0),pt([ae({type:Boolean})],vi.prototype,"disabled",void 0),vi=pt([("lit-resizable",t=>"function"==typeof t?((t,e)=>(window.customElements.define("lit-resizable",e),e))(0,t):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(t){window.customElements.define("lit-resizable",t)}}})(0,t))],vi);let bi=class extends it{constructor(){super(...arguments),this.minWidth=1,this.minHeight=1,this.isDraggable=!0,this.isResizable=!0,this._isDragging=!1,this._isResizing=!1,this._firstLayoutFinished=!1}shouldUpdate(t){return!(!t.has("_isDragging")&&this._isDragging)}updated(t){if(t.has("parentWidth")||t.has("margin")||t.has("columns")||t.has("containerPadding")||t.has("minHeight")||t.has("minWidth")||t.has("maxWidth")||t.has("maxHeight")||t.has("rowHeight")){this._columnWidth=(this.parentWidth-this.margin[0]*(this.columns-1)-2*this.containerPadding[0])/this.columns,this._fullColumnWidth=this._columnWidth+this.margin[0],this._fullRowHeight=this.rowHeight+this.margin[1],this._minWidthPX=this._fullColumnWidth*this.minWidth-this.margin[0];const t=void 0!==this.maxWidth?Math.min(this.maxWidth,this.columns-this.posX):this.columns-this.posX;this._maxWidthPX=this._fullColumnWidth*t-this.margin[0],this._minHeightPX=this._fullRowHeight*this.minHeight-this.margin[1],this._maxHeightPX=this._fullRowHeight*(this.maxHeight||1/0)-this.margin[1]}this.style.setProperty("--item-left",Math.round(this.posX*this._fullColumnWidth+this.containerPadding[0])+"px"),this.style.setProperty("--item-top",(this.parentWidth?Math.round(this.posY*this._fullRowHeight+this.containerPadding[1]):0)+"px"),this._isResizing||(this.style.setProperty("--item-width",this.width*this._columnWidth+Math.max(0,this.width-1)*this.margin[0]+"px"),this.style.setProperty("--item-height",this.height*this.rowHeight+Math.max(0,this.height-1)*this.margin[1]+"px"),!this._firstLayoutFinished&&this.parentWidth>0&&setTimeout(()=>this._firstLayoutFinished=!0,200))}render(){let t=$`<slot></slot>`;return this.isDraggable&&(t=$`<lit-draggable .handle="${this.dragHandle}" @dragStart="${this._dragStart}" @dragging="${this._drag}" @dragEnd="${this._dragEnd}">${t}</lit-draggable>`),this.isResizable&&(t=$`<lit-resizable .handle="${this.resizeHandle}" @resizeStart="${this._resizeStart}" @resize="${this._resize}" @resizeEnd="${this._resizeEnd}">${t}</lit-resizable>`),t}_resizeStart(){this.isDraggable=!1,this._isResizing=!0,this._isDragging=!1,ct(this,"resizeStart")}_resize(t){if(!this._isResizing)return;let{width:e,height:i}=t.detail;e=Math.max(this._minWidthPX,e),e=Math.min(this._maxWidthPX,e),i=Math.max(this._minHeightPX,i),i=Math.min(this._maxHeightPX,i),this.style.setProperty("--item-width",e+"px"),this.style.setProperty("--item-height",i+"px");const s=Math.round((e+this.margin[0])/this._fullColumnWidth),n=Math.round((i+this.margin[1])/this._fullRowHeight);s===this.width&&n===this.height||ct(this,"resize",{newWidth:s,newHeight:n})}_resizeEnd(){this.isDraggable=!0,this._isResizing=!1,ct(this,"resizeEnd")}_dragStart(){if(!this.isDraggable)return;const t=this.getBoundingClientRect(),e=this.offsetParent.getBoundingClientRect();this._startLeft=t.left-e.left,this._startTop=t.top-e.top,this._startPosX=this.posX,this._startPosY=this.posY,this._isDragging=!0,ct(this,"dragStart")}_drag(t){if(void 0===this._startPosX||void 0===this._startPosY||void 0===this._startLeft||void 0===this._startTop||!this.isDraggable)return;const{deltaX:e,deltaY:i}=t.detail;this.style.setProperty("--item-left",this._startLeft+e+"px"),this.style.setProperty("--item-top",this._startTop+i+"px");const s=Math.round(e/this._fullColumnWidth),n=Math.round(i/this._fullRowHeight);if(!n&&!s)return;let r=this._startPosX+s,o=this._startPosY+n;r=Math.max(0,r),o=Math.max(0,o),r=Math.min(this.columns-this.width,r),ct(this,"dragging",{newPosX:r,newPosY:o})}_dragEnd(){this._isDragging=!1,this._startLeft=void 0,this._startTop=void 0,this._startPosX=void 0,this._startPosY=void 0,ct(this,"dragEnd")}static get styles(){return tt`:host{position:absolute;width:var(--item-width);height:var(--item-height);transform:translate(var(--item-left),var(--item-top));transition:var(--grid-item-transition,all 200ms);z-index:2;opacity:0}:host([dragging]){transition:none;z-index:3;opacity:var(--grid-item-dragging-opacity,.8)}:host([resizing]){transition-property:transform;z-index:3;opacity:var(--grid-item-resizing-opacity,.8)}:host([finished]){opacity:1}lit-resizable{width:100%;height:100%}`}};t([J({type:Number})],bi.prototype,"width",void 0),t([J({type:Number})],bi.prototype,"height",void 0),t([J({type:Number})],bi.prototype,"posX",void 0),t([J({type:Number})],bi.prototype,"posY",void 0),t([J({type:Number})],bi.prototype,"rowHeight",void 0),t([J({type:Number})],bi.prototype,"columns",void 0),t([J({type:Number})],bi.prototype,"parentWidth",void 0),t([J({type:Array})],bi.prototype,"margin",void 0),t([J({type:Array})],bi.prototype,"containerPadding",void 0),t([J({type:Number})],bi.prototype,"minWidth",void 0),t([J({type:Number})],bi.prototype,"minHeight",void 0),t([J({type:Number})],bi.prototype,"maxWidth",void 0),t([J({type:Number})],bi.prototype,"maxHeight",void 0),t([J({type:Boolean})],bi.prototype,"isDraggable",void 0),t([J({type:Boolean})],bi.prototype,"isResizable",void 0),t([J({attribute:!1})],bi.prototype,"resizeHandle",void 0),t([J({attribute:!1})],bi.prototype,"dragHandle",void 0),t([J()],bi.prototype,"key",void 0),t([J({attribute:"dragging",reflect:!0,type:Boolean})],bi.prototype,"_isDragging",void 0),t([J({attribute:"resizing",reflect:!0,type:Boolean})],bi.prototype,"_isResizing",void 0),t([J({attribute:"finished",reflect:!0,type:Boolean})],bi.prototype,"_firstLayoutFinished",void 0),bi=t([Y("lit-grid-item")],bi);const wi=(t,e,i=!1)=>{let s;return function(...n){const r=this,o=i&&!s;clearTimeout(s),s=setTimeout(()=>{s=null,i||t.apply(r,n)},e),o&&t.apply(r,n)}};let Si=class extends it{constructor(){super(...arguments),this.items=[],this.margin=[10,10],this.containerPadding=[20,20],this.rowHeight=30,this.columns=12,this.dragDisabled=!1,this.resizeDisabled=!1,this.resizing=!1,this.dragging=!1,this._width=0,this._layout=[]}get _childrenElements(){return this.items.concat(...Array.prototype.filter.call(this.children,t=>t.classList.contains("grid-item")))}get _layoutHeight(){const t=st(this._layout);return t*this.rowHeight+(t-1)*this.margin[1]+2*this.containerPadding[1]}disconnectedCallback(){this._resizeObserver&&this._resizeObserver.disconnect()}connectedCallback(){super.connectedCallback(),this.updateComplete.then(()=>this._attachObserver())}updated(t){super.updated(t),t.has("layout")&&this.setupLayout(),this.style.height=this._layoutHeight+"px"}render(){var t;return(null===(t=this._layout)||void 0===t?void 0:t.length)?$`${this._childrenElements.map(t=>{const e=this._layout.find(e=>e.key===t.key);return e?$`<lit-grid-item .width="${e.width}" .height="${e.height}" .posY="${e.posY}" .posX="${e.posX}" .minWidth="${e.minWidth||1}" .minHeight="${e.minHeight||1}" .maxWidth="${e.maxHeight}" .maxHeight="${e.maxHeight}" .key="${e.key}" .parentWidth="${this._width}" .columns="${this.columns}" .rowHeight="${this.rowHeight}" .margin="${this.margin}" .containerPadding="${this.containerPadding}" .isDraggable="${!this.dragDisabled}" .isResizable="${!this.resizeDisabled}" .resizeHandle="${this.resizeHandle}" .dragHandle="${this.dragHandle}" @resizeStart="${this._itemResizeStart}" @resize="${this._itemResize}" @resizeEnd="${this._itemResizeEnd}" @dragStart="${this._itemDragStart}" @dragging="${this._itemDrag}" @dragEnd="${this._itemDragEnd}">${t}</lit-grid-item>`:$``})} ${this._renderPlaceHolder()}`:$``}setupLayout(){let t=[];for(const e of this._childrenElements){let i=this.layout.find(t=>t.key===e.key);if(!i){const s=e.grid||{width:1,height:1,posX:0,posY:st(t)};i=Object.assign(Object.assign({},s),{key:e.key})}t.push(i)}t=((t,e)=>{for(const i of t)i.width>e&&(i.width=e),i.posX+i.width>e&&(i.posX=e-i.width),i.posX<0&&(i.posX=0);return t})(t,this.columns),this._layout=ht(t)}_itemResizeStart(t){this._oldItemIndex=this._layout.findIndex(e=>e.key===t.currentTarget.key),this._placeholder=this._layout[this._oldItemIndex],this._oldItemLayout=this._layout[this._oldItemIndex]}_itemResize(t){if(!this._oldItemLayout||void 0===this._oldItemIndex)return;const{newWidth:e,newHeight:i}=t.detail,s=Object.assign(Object.assign({},this._oldItemLayout),{width:e,height:i});this._layout[this._oldItemIndex]=s,this._placeholder=s,this._layout=ht(this._layout)}_itemResizeEnd(){this._placeholder=void 0,this._oldItemLayout=void 0,this._oldItemIndex=void 0,ct(this,"layout-changed",{layout:this._layout})}_itemDragStart(t){const e=this._layout.findIndex(e=>e.key===t.currentTarget.key);this._placeholder=this._layout[e],this._oldItemLayout=this._layout[e]}_itemDrag(t){if(!this._oldItemLayout)return;t.stopPropagation(),t.preventDefault();const{newPosX:e,newPosY:i}=t.detail,s=dt([...this._layout],this._oldItemLayout,e,i,this.columns,!0);this._layout=ht(s),this._oldItemLayout=this._layout.find(t=>t.key===this._oldItemLayout.key),this._placeholder=this._oldItemLayout}_itemDragEnd(){this._placeholder=void 0,this._oldItemLayout=void 0,this._oldItemIndex=void 0,ct(this,"layout-changed",{layout:this._layout})}_renderPlaceHolder(){return this._placeholder?$`<lit-grid-item .width="${this._placeholder.width}" .height="${this._placeholder.height}" .posY="${this._placeholder.posY}" .posX="${this._placeholder.posX}" .key="${this._placeholder.key}" .parentWidth="${this.clientWidth}" .columns="${this.columns}" .rowHeight="${this.rowHeight}" .margin="${this.margin}" .containerPadding="${this.containerPadding}" .isDraggable="${!1}" .isResizable="${!1}" class="placeholder"></lit-grid-item>`:$``}async _attachObserver(){this._resizeObserver||(await(async()=>{"function"!=typeof ResizeObserver&&(window.ResizeObserver=(await Promise.resolve().then((function(){return Bi}))).default)})(),this._resizeObserver=new ResizeObserver(wi(()=>this._measure(),250,!1))),this._resizeObserver.observe(this)}_measure(){this.offsetParent&&(this._width=this.offsetParent.clientWidth)}static get styles(){return tt`:host{display:block;position:relative}:host([dragging]),:host([dragging]) lit-grid-item,:host([resizing]),:host([resizing]) lit-grid-item{user-select:none;touch-action:none}.placeholder{background-color:var(--placeholder-background-color,red);opacity:var(--placeholder-background-opacity,.2);z-index:1}`}};t([J({type:Array})],Si.prototype,"layout",void 0),t([J({type:Array})],Si.prototype,"items",void 0),t([J({type:Array})],Si.prototype,"margin",void 0),t([J({type:Array})],Si.prototype,"containerPadding",void 0),t([J({type:Number})],Si.prototype,"rowHeight",void 0),t([J({type:Number})],Si.prototype,"columns",void 0),t([J({type:Boolean})],Si.prototype,"dragDisabled",void 0),t([J({type:Boolean})],Si.prototype,"resizeDisabled",void 0),t([J({attribute:!1})],Si.prototype,"resizeHandle",void 0),t([J({attribute:!1})],Si.prototype,"dragHandle",void 0),t([J({type:Boolean,attribute:!0,reflect:!0})],Si.prototype,"resizing",void 0),t([J({type:Boolean,attribute:!0,reflect:!0})],Si.prototype,"dragging",void 0),t([G()],Si.prototype,"_width",void 0),t([G()],Si.prototype,"_layout",void 0),t([G()],Si.prototype,"_placeholder",void 0),Si=t([Y("lit-grid-layout")],Si);var xi=function(){if("undefined"!=typeof Map)return Map;function t(t,e){var i=-1;return t.some((function(t,s){return t[0]===e&&(i=s,!0)})),i}return function(){function e(){this.__entries__=[]}return Object.defineProperty(e.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),e.prototype.get=function(e){var i=t(this.__entries__,e),s=this.__entries__[i];return s&&s[1]},e.prototype.set=function(e,i){var s=t(this.__entries__,e);~s?this.__entries__[s][1]=i:this.__entries__.push([e,i])},e.prototype.delete=function(e){var i=this.__entries__,s=t(i,e);~s&&i.splice(s,1)},e.prototype.has=function(e){return!!~t(this.__entries__,e)},e.prototype.clear=function(){this.__entries__.splice(0)},e.prototype.forEach=function(t,e){void 0===e&&(e=null);for(var i=0,s=this.__entries__;i<s.length;i++){var n=s[i];t.call(e,n[1],n[0])}},e}()}(),Pi="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,Ni="undefined"!=typeof global&&global.Math===Math?global:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),Ei="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(Ni):function(t){return setTimeout((function(){return t(Date.now())}),1e3/60)};var Ci=["top","right","bottom","left","width","height","size","weight"],Ti="undefined"!=typeof MutationObserver,Ai=function(){function t(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(t,e){var i=!1,s=!1,n=0;function r(){i&&(i=!1,t()),s&&a()}function o(){Ei(r)}function a(){var t=Date.now();if(i){if(t-n<2)return;s=!0}else i=!0,s=!1,setTimeout(o,e);n=t}return a}(this.refresh.bind(this),20)}return t.prototype.addObserver=function(t){~this.observers_.indexOf(t)||this.observers_.push(t),this.connected_||this.connect_()},t.prototype.removeObserver=function(t){var e=this.observers_,i=e.indexOf(t);~i&&e.splice(i,1),!e.length&&this.connected_&&this.disconnect_()},t.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},t.prototype.updateObservers_=function(){var t=this.observers_.filter((function(t){return t.gatherActive(),t.hasActive()}));return t.forEach((function(t){return t.broadcastActive()})),t.length>0},t.prototype.connect_=function(){Pi&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),Ti?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},t.prototype.disconnect_=function(){Pi&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},t.prototype.onTransitionEnd_=function(t){var e=t.propertyName,i=void 0===e?"":e;Ci.some((function(t){return!!~i.indexOf(t)}))&&this.refresh()},t.getInstance=function(){return this.instance_||(this.instance_=new t),this.instance_},t.instance_=null,t}(),Oi=function(t,e){for(var i=0,s=Object.keys(e);i<s.length;i++){var n=s[i];Object.defineProperty(t,n,{value:e[n],enumerable:!1,writable:!1,configurable:!0})}return t},ki=function(t){return t&&t.ownerDocument&&t.ownerDocument.defaultView||Ni},zi=Hi(0,0,0,0);function Vi(t){return parseFloat(t)||0}function Mi(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i];return e.reduce((function(e,i){return e+Vi(t["border-"+i+"-width"])}),0)}function Ri(t){var e=t.clientWidth,i=t.clientHeight;if(!e&&!i)return zi;var s=ki(t).getComputedStyle(t),n=function(t){for(var e={},i=0,s=["top","right","bottom","left"];i<s.length;i++){var n=s[i],r=t["padding-"+n];e[n]=Vi(r)}return e}(s),r=n.left+n.right,o=n.top+n.bottom,a=Vi(s.width),h=Vi(s.height);if("border-box"===s.boxSizing&&(Math.round(a+r)!==e&&(a-=Mi(s,"left","right")+r),Math.round(h+o)!==i&&(h-=Mi(s,"top","bottom")+o)),!function(t){return t===ki(t).document.documentElement}(t)){var l=Math.round(a+r)-e,d=Math.round(h+o)-i;1!==Math.abs(l)&&(a-=l),1!==Math.abs(d)&&(h-=d)}return Hi(n.left,n.top,a,h)}var $i="undefined"!=typeof SVGGraphicsElement?function(t){return t instanceof ki(t).SVGGraphicsElement}:function(t){return t instanceof ki(t).SVGElement&&"function"==typeof t.getBBox};function Ui(t){return Pi?$i(t)?function(t){var e=t.getBBox();return Hi(0,0,e.width,e.height)}(t):Ri(t):zi}function Hi(t,e,i,s){return{x:t,y:e,width:i,height:s}}var Wi=function(){function t(t){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=Hi(0,0,0,0),this.target=t}return t.prototype.isActive=function(){var t=Ui(this.target);return this.contentRect_=t,t.width!==this.broadcastWidth||t.height!==this.broadcastHeight},t.prototype.broadcastRect=function(){var t=this.contentRect_;return this.broadcastWidth=t.width,this.broadcastHeight=t.height,t},t}(),ji=function(t,e){var i=function(t){var e=t.x,i=t.y,s=t.width,n=t.height,r="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,o=Object.create(r.prototype);return Oi(o,{x:e,y:i,width:s,height:n,top:i,right:e+s,bottom:n+i,left:e}),o}(e);Oi(this,{target:t,contentRect:i})},Li=function(){function t(t,e,i){if(this.activeObservations_=[],this.observations_=new xi,"function"!=typeof t)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=t,this.controller_=e,this.callbackCtx_=i}return t.prototype.observe=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof ki(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)||(e.set(t,new Wi(t)),this.controller_.addObserver(this),this.controller_.refresh())}},t.prototype.unobserve=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof ki(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)&&(e.delete(t),e.size||this.controller_.removeObserver(this))}},t.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},t.prototype.gatherActive=function(){var t=this;this.clearActive(),this.observations_.forEach((function(e){e.isActive()&&t.activeObservations_.push(e)}))},t.prototype.broadcastActive=function(){if(this.hasActive()){var t=this.callbackCtx_,e=this.activeObservations_.map((function(t){return new ji(t.target,t.broadcastRect())}));this.callback_.call(t,e,t),this.clearActive()}},t.prototype.clearActive=function(){this.activeObservations_.splice(0)},t.prototype.hasActive=function(){return this.activeObservations_.length>0},t}(),Ii="undefined"!=typeof WeakMap?new WeakMap:new xi,Di=function t(e){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var i=Ai.getInstance(),s=new Li(e,i,this);Ii.set(this,s)};["observe","unobserve","disconnect"].forEach((function(t){Di.prototype[t]=function(){var e;return(e=Ii.get(this))[t].apply(e,arguments)}}));var qi=void 0!==Ni.ResizeObserver?Ni.ResizeObserver:Di,Bi=Object.freeze({__proto__:null,default:qi});export{Si as LitGridLayout};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl0LWdyaWQtbGF5b3V0LmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9kb20uanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3RlbXBsYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9tb2RpZnktdGVtcGxhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL2RpcmVjdGl2ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcGFydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUtaW5zdGFuY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3RlbXBsYXRlLXJlc3VsdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcGFydHMuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3RlbXBsYXRlLWZhY3RvcnkuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3JlbmRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3NoYWR5LXJlbmRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9saWIvdXBkYXRpbmctZWxlbWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9saWIvZGVjb3JhdG9ycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9saWIvY3NzLXRhZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9saXQtZWxlbWVudC5qcyIsIi4uL3NyYy91dGlsL2ZpbmQtbGF5b3V0LWJvdHRvbS50cyIsIi4uL3NyYy91dGlsL2ludGVyc2VjdHMudHMiLCIuLi9zcmMvdXRpbC9nZXQtaXRlbS1pbnRlcnNlY3QudHMiLCIuLi9zcmMvdXRpbC9yZXNvbHZlLWludGVyc2VjdGlvbi50cyIsIi4uL3NyYy91dGlsL3NvcnQtbGF5b3V0LnRzIiwiLi4vc3JjL3V0aWwvY29uZGVuc2UtbGF5b3V0LnRzIiwiLi4vc3JjL3V0aWwvbW92ZS1pdGVtLWF3YXktZnJvbS1pbnRlcnNlY3QudHMiLCIuLi9zcmMvdXRpbC9tb3ZlLWl0ZW0udHMiLCIuLi9zcmMvdXRpbC9nZXQtYWxsLWludGVyc2VjdHMudHMiLCIuLi9zcmMvdXRpbC9maXJlLWV2ZW50LnRzIiwiLi4vbm9kZV9tb2R1bGVzL2xpdC1yZXNpemFibGUvZGlzdC9saXQtcmVzaXphYmxlLmpzIiwiLi4vc3JjL2xpdC1ncmlkLWl0ZW0udHMiLCIuLi9zcmMvdXRpbC9pbnN0YWxsLXJlc2l6ZS1vYnNlcnZlci50cyIsIi4uL3NyYy91dGlsL2RlYm91bmNlLnRzIiwiLi4vc3JjL2xpdC1ncmlkLWxheW91dC50cyIsIi4uL3NyYy91dGlsL2ZpeC1sYXlvdXQtYm91bmRzLnRzIiwiLi4vbm9kZV9tb2R1bGVzL3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbC9kaXN0L1Jlc2l6ZU9ic2VydmVyLmVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NyZWF0ZUJpbmRpbmcobywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogVHJ1ZSBpZiB0aGUgY3VzdG9tIGVsZW1lbnRzIHBvbHlmaWxsIGlzIGluIHVzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzQ0VQb2x5ZmlsbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgd2luZG93LmN1c3RvbUVsZW1lbnRzICE9IG51bGwgJiZcbiAgICB3aW5kb3cuY3VzdG9tRWxlbWVudHMucG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayAhPT1cbiAgICAgICAgdW5kZWZpbmVkO1xuLyoqXG4gKiBSZXBhcmVudHMgbm9kZXMsIHN0YXJ0aW5nIGZyb20gYHN0YXJ0YCAoaW5jbHVzaXZlKSB0byBgZW5kYCAoZXhjbHVzaXZlKSxcbiAqIGludG8gYW5vdGhlciBjb250YWluZXIgKGNvdWxkIGJlIHRoZSBzYW1lIGNvbnRhaW5lciksIGJlZm9yZSBgYmVmb3JlYC4gSWZcbiAqIGBiZWZvcmVgIGlzIG51bGwsIGl0IGFwcGVuZHMgdGhlIG5vZGVzIHRvIHRoZSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjb25zdCByZXBhcmVudE5vZGVzID0gKGNvbnRhaW5lciwgc3RhcnQsIGVuZCA9IG51bGwsIGJlZm9yZSA9IG51bGwpID0+IHtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGVuZCkge1xuICAgICAgICBjb25zdCBuID0gc3RhcnQubmV4dFNpYmxpbmc7XG4gICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc3RhcnQsIGJlZm9yZSk7XG4gICAgICAgIHN0YXJ0ID0gbjtcbiAgICB9XG59O1xuLyoqXG4gKiBSZW1vdmVzIG5vZGVzLCBzdGFydGluZyBmcm9tIGBzdGFydGAgKGluY2x1c2l2ZSkgdG8gYGVuZGAgKGV4Y2x1c2l2ZSksIGZyb21cbiAqIGBjb250YWluZXJgLlxuICovXG5leHBvcnQgY29uc3QgcmVtb3ZlTm9kZXMgPSAoY29udGFpbmVyLCBzdGFydCwgZW5kID0gbnVsbCkgPT4ge1xuICAgIHdoaWxlIChzdGFydCAhPT0gZW5kKSB7XG4gICAgICAgIGNvbnN0IG4gPSBzdGFydC5uZXh0U2libGluZztcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKHN0YXJ0KTtcbiAgICAgICAgc3RhcnQgPSBuO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb20uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuLyoqXG4gKiBBbiBleHByZXNzaW9uIG1hcmtlciB3aXRoIGVtYmVkZGVkIHVuaXF1ZSBrZXkgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGhcbiAqIHBvc3NpYmxlIHRleHQgaW4gdGVtcGxhdGVzLlxuICovXG5leHBvcnQgY29uc3QgbWFya2VyID0gYHt7bGl0LSR7U3RyaW5nKE1hdGgucmFuZG9tKCkpLnNsaWNlKDIpfX19YDtcbi8qKlxuICogQW4gZXhwcmVzc2lvbiBtYXJrZXIgdXNlZCB0ZXh0LXBvc2l0aW9ucywgbXVsdGktYmluZGluZyBhdHRyaWJ1dGVzLCBhbmRcbiAqIGF0dHJpYnV0ZXMgd2l0aCBtYXJrdXAtbGlrZSB0ZXh0IHZhbHVlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vZGVNYXJrZXIgPSBgPCEtLSR7bWFya2VyfS0tPmA7XG5leHBvcnQgY29uc3QgbWFya2VyUmVnZXggPSBuZXcgUmVnRXhwKGAke21hcmtlcn18JHtub2RlTWFya2VyfWApO1xuLyoqXG4gKiBTdWZmaXggYXBwZW5kZWQgdG8gYWxsIGJvdW5kIGF0dHJpYnV0ZSBuYW1lcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGJvdW5kQXR0cmlidXRlU3VmZml4ID0gJyRsaXQkJztcbi8qKlxuICogQW4gdXBkYXRhYmxlIFRlbXBsYXRlIHRoYXQgdHJhY2tzIHRoZSBsb2NhdGlvbiBvZiBkeW5hbWljIHBhcnRzLlxuICovXG5leHBvcnQgY2xhc3MgVGVtcGxhdGUge1xuICAgIGNvbnN0cnVjdG9yKHJlc3VsdCwgZWxlbWVudCkge1xuICAgICAgICB0aGlzLnBhcnRzID0gW107XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IG5vZGVzVG9SZW1vdmUgPSBbXTtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICAgICAgLy8gRWRnZSBuZWVkcyBhbGwgNCBwYXJhbWV0ZXJzIHByZXNlbnQ7IElFMTEgbmVlZHMgM3JkIHBhcmFtZXRlciB0byBiZSBudWxsXG4gICAgICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZWxlbWVudC5jb250ZW50LCAxMzMgLyogTm9kZUZpbHRlci5TSE9XX3tFTEVNRU5UfENPTU1FTlR8VEVYVH0gKi8sIG51bGwsIGZhbHNlKTtcbiAgICAgICAgLy8gS2VlcHMgdHJhY2sgb2YgdGhlIGxhc3QgaW5kZXggYXNzb2NpYXRlZCB3aXRoIGEgcGFydC4gV2UgdHJ5IHRvIGRlbGV0ZVxuICAgICAgICAvLyB1bm5lY2Vzc2FyeSBub2RlcywgYnV0IHdlIG5ldmVyIHdhbnQgdG8gYXNzb2NpYXRlIHR3byBkaWZmZXJlbnQgcGFydHNcbiAgICAgICAgLy8gdG8gdGhlIHNhbWUgaW5kZXguIFRoZXkgbXVzdCBoYXZlIGEgY29uc3RhbnQgbm9kZSBiZXR3ZWVuLlxuICAgICAgICBsZXQgbGFzdFBhcnRJbmRleCA9IDA7XG4gICAgICAgIGxldCBpbmRleCA9IC0xO1xuICAgICAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzLCB2YWx1ZXM6IHsgbGVuZ3RoIH0gfSA9IHJlc3VsdDtcbiAgICAgICAgd2hpbGUgKHBhcnRJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAgICAgaWYgKG5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSd2ZSBleGhhdXN0ZWQgdGhlIGNvbnRlbnQgaW5zaWRlIGEgbmVzdGVkIHRlbXBsYXRlIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gQmVjYXVzZSB3ZSBzdGlsbCBoYXZlIHBhcnRzICh0aGUgb3V0ZXIgZm9yLWxvb3ApLCB3ZSBrbm93OlxuICAgICAgICAgICAgICAgIC8vIC0gVGhlcmUgaXMgYSB0ZW1wbGF0ZSBpbiB0aGUgc3RhY2tcbiAgICAgICAgICAgICAgICAvLyAtIFRoZSB3YWxrZXIgd2lsbCBmaW5kIGEgbmV4dE5vZGUgb3V0c2lkZSB0aGUgdGVtcGxhdGVcbiAgICAgICAgICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAvKiBOb2RlLkVMRU1FTlRfTk9ERSAqLykge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGxlbmd0aCB9ID0gYXR0cmlidXRlcztcbiAgICAgICAgICAgICAgICAgICAgLy8gUGVyXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9OYW1lZE5vZGVNYXAsXG4gICAgICAgICAgICAgICAgICAgIC8vIGF0dHJpYnV0ZXMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlIHJldHVybmVkIGluIGRvY3VtZW50IG9yZGVyLlxuICAgICAgICAgICAgICAgICAgICAvLyBJbiBwYXJ0aWN1bGFyLCBFZGdlL0lFIGNhbiByZXR1cm4gdGhlbSBvdXQgb2Ygb3JkZXIsIHNvIHdlIGNhbm5vdFxuICAgICAgICAgICAgICAgICAgICAvLyBhc3N1bWUgYSBjb3JyZXNwb25kZW5jZSBiZXR3ZWVuIHBhcnQgaW5kZXggYW5kIGF0dHJpYnV0ZSBpbmRleC5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZHNXaXRoKGF0dHJpYnV0ZXNbaV0ubmFtZSwgYm91bmRBdHRyaWJ1dGVTdWZmaXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgdGVtcGxhdGUgbGl0ZXJhbCBzZWN0aW9uIGxlYWRpbmcgdXAgdG8gdGhlIGZpcnN0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBleHByZXNzaW9uIGluIHRoaXMgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdGb3JQYXJ0ID0gc3RyaW5nc1twYXJ0SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgYXR0cmlidXRlIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMoc3RyaW5nRm9yUGFydClbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBjb3JyZXNwb25kaW5nIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsIGJvdW5kIGF0dHJpYnV0ZXMgaGF2ZSBoYWQgYSBzdWZmaXggYWRkZWQgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRlbXBsYXRlUmVzdWx0I2dldEhUTUwgdG8gb3B0IG91dCBvZiBzcGVjaWFsIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxpbmcuIFRvIGxvb2sgdXAgdGhlIGF0dHJpYnV0ZSB2YWx1ZSB3ZSBhbHNvIG5lZWQgdG8gYWRkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc3VmZml4LlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlTG9va3VwTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKSArIGJvdW5kQXR0cmlidXRlU3VmZml4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlVmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVMb29rdXBOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZUxvb2t1cE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGljcyA9IGF0dHJpYnV0ZVZhbHVlLnNwbGl0KG1hcmtlclJlZ2V4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7IHR5cGU6ICdhdHRyaWJ1dGUnLCBpbmRleCwgbmFtZSwgc3RyaW5nczogc3RhdGljcyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCArPSBzdGF0aWNzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gJ1RFTVBMQVRFJykge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSBub2RlLmNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMyAvKiBOb2RlLlRFWFRfTk9ERSAqLykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBub2RlLmRhdGE7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuaW5kZXhPZihtYXJrZXIpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdzID0gZGF0YS5zcGxpdChtYXJrZXJSZWdleCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IHN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBuZXcgdGV4dCBub2RlIGZvciBlYWNoIGxpdGVyYWwgc2VjdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSBub2RlcyBhcmUgYWxzbyB1c2VkIGFzIHRoZSBtYXJrZXJzIGZvciBub2RlIHBhcnRzXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFzdEluZGV4OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnNlcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcyA9IHN0cmluZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocyA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQgPSBjcmVhdGVNYXJrZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbGFzdEF0dHJpYnV0ZU5hbWVSZWdleC5leGVjKHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCAmJiBlbmRzV2l0aChtYXRjaFsyXSwgYm91bmRBdHRyaWJ1dGVTdWZmaXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBzLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArIG1hdGNoWzFdICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzJdLnNsaWNlKDAsIC1ib3VuZEF0dHJpYnV0ZVN1ZmZpeC5sZW5ndGgpICsgbWF0Y2hbM107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShpbnNlcnQsIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHsgdHlwZTogJ25vZGUnLCBpbmRleDogKytpbmRleCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIHRleHQsIHdlIG11c3QgaW5zZXJ0IGEgY29tbWVudCB0byBtYXJrIG91ciBwbGFjZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gRWxzZSwgd2UgY2FuIHRydXN0IGl0IHdpbGwgc3RpY2sgYXJvdW5kIGFmdGVyIGNsb25pbmcuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmdzW2xhc3RJbmRleF0gPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNyZWF0ZU1hcmtlcigpLCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9SZW1vdmUucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9IHN0cmluZ3NbbGFzdEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGEgcGFydCBmb3IgZWFjaCBtYXRjaCBmb3VuZFxuICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXggKz0gbGFzdEluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggLyogTm9kZS5DT01NRU5UX05PREUgKi8pIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhID09PSBtYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYSBuZXcgbWFya2VyIG5vZGUgdG8gYmUgdGhlIHN0YXJ0Tm9kZSBvZiB0aGUgUGFydCBpZiBhbnkgb2ZcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGZvbGxvd2luZyBhcmUgdHJ1ZTpcbiAgICAgICAgICAgICAgICAgICAgLy8gICogV2UgZG9uJ3QgaGF2ZSBhIHByZXZpb3VzU2libGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyAgKiBUaGUgcHJldmlvdXNTaWJsaW5nIGlzIGFscmVhZHkgdGhlIHN0YXJ0IG9mIGEgcHJldmlvdXMgcGFydFxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5wcmV2aW91c1NpYmxpbmcgPT09IG51bGwgfHwgaW5kZXggPT09IGxhc3RQYXJ0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNyZWF0ZU1hcmtlcigpLCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYXN0UGFydEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7IHR5cGU6ICdub2RlJywgaW5kZXggfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBuZXh0U2libGluZywga2VlcCB0aGlzIG5vZGUgc28gd2UgaGF2ZSBhbiBlbmQuXG4gICAgICAgICAgICAgICAgICAgIC8vIEVsc2UsIHdlIGNhbiByZW1vdmUgaXQgdG8gc2F2ZSBmdXR1cmUgY29zdHMuXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmRhdGEgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9SZW1vdmUucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IC0xO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGkgPSBub2RlLmRhdGEuaW5kZXhPZihtYXJrZXIsIGkgKyAxKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21tZW50IG5vZGUgaGFzIGEgYmluZGluZyBtYXJrZXIgaW5zaWRlLCBtYWtlIGFuIGluYWN0aXZlIHBhcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBiaW5kaW5nIHdvbid0IHdvcmssIGJ1dCBzdWJzZXF1ZW50IGJpbmRpbmdzIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gKGp1c3RpbmZhZ25hbmkpOiBjb25zaWRlciB3aGV0aGVyIGl0J3MgZXZlbiB3b3J0aCBpdCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBiaW5kaW5ncyBpbiBjb21tZW50cyB3b3JrXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goeyB0eXBlOiAnbm9kZScsIGluZGV4OiAtMSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSB0ZXh0IGJpbmRpbmcgbm9kZXMgYWZ0ZXIgdGhlIHdhbGsgdG8gbm90IGRpc3R1cmIgdGhlIFRyZWVXYWxrZXJcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIG5vZGVzVG9SZW1vdmUpIHtcbiAgICAgICAgICAgIG4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IGVuZHNXaXRoID0gKHN0ciwgc3VmZml4KSA9PiB7XG4gICAgY29uc3QgaW5kZXggPSBzdHIubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aDtcbiAgICByZXR1cm4gaW5kZXggPj0gMCAmJiBzdHIuc2xpY2UoaW5kZXgpID09PSBzdWZmaXg7XG59O1xuZXhwb3J0IGNvbnN0IGlzVGVtcGxhdGVQYXJ0QWN0aXZlID0gKHBhcnQpID0+IHBhcnQuaW5kZXggIT09IC0xO1xuLy8gQWxsb3dzIGBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcnKWAgdG8gYmUgcmVuYW1lZCBmb3IgYVxuLy8gc21hbGwgbWFudWFsIHNpemUtc2F2aW5ncy5cbmV4cG9ydCBjb25zdCBjcmVhdGVNYXJrZXIgPSAoKSA9PiBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcnKTtcbi8qKlxuICogVGhpcyByZWdleCBleHRyYWN0cyB0aGUgYXR0cmlidXRlIG5hbWUgcHJlY2VkaW5nIGFuIGF0dHJpYnV0ZS1wb3NpdGlvblxuICogZXhwcmVzc2lvbi4gSXQgZG9lcyB0aGlzIGJ5IG1hdGNoaW5nIHRoZSBzeW50YXggYWxsb3dlZCBmb3IgYXR0cmlidXRlc1xuICogYWdhaW5zdCB0aGUgc3RyaW5nIGxpdGVyYWwgZGlyZWN0bHkgcHJlY2VkaW5nIHRoZSBleHByZXNzaW9uLCBhc3N1bWluZyB0aGF0XG4gKiB0aGUgZXhwcmVzc2lvbiBpcyBpbiBhbiBhdHRyaWJ1dGUtdmFsdWUgcG9zaXRpb24uXG4gKlxuICogU2VlIGF0dHJpYnV0ZXMgaW4gdGhlIEhUTUwgc3BlYzpcbiAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9zeW50YXguaHRtbCNlbGVtZW50cy1hdHRyaWJ1dGVzXG4gKlxuICogXCIgXFx4MDlcXHgwYVxceDBjXFx4MGRcIiBhcmUgSFRNTCBzcGFjZSBjaGFyYWN0ZXJzOlxuICogaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2luZnJhc3RydWN0dXJlLmh0bWwjc3BhY2UtY2hhcmFjdGVyc1xuICpcbiAqIFwiXFwwLVxceDFGXFx4N0YtXFx4OUZcIiBhcmUgVW5pY29kZSBjb250cm9sIGNoYXJhY3RlcnMsIHdoaWNoIGluY2x1ZGVzIGV2ZXJ5XG4gKiBzcGFjZSBjaGFyYWN0ZXIgZXhjZXB0IFwiIFwiLlxuICpcbiAqIFNvIGFuIGF0dHJpYnV0ZSBpczpcbiAqICAqIFRoZSBuYW1lOiBhbnkgY2hhcmFjdGVyIGV4Y2VwdCBhIGNvbnRyb2wgY2hhcmFjdGVyLCBzcGFjZSBjaGFyYWN0ZXIsICgnKSxcbiAqICAgIChcIiksIFwiPlwiLCBcIj1cIiwgb3IgXCIvXCJcbiAqICAqIEZvbGxvd2VkIGJ5IHplcm8gb3IgbW9yZSBzcGFjZSBjaGFyYWN0ZXJzXG4gKiAgKiBGb2xsb3dlZCBieSBcIj1cIlxuICogICogRm9sbG93ZWQgYnkgemVybyBvciBtb3JlIHNwYWNlIGNoYXJhY3RlcnNcbiAqICAqIEZvbGxvd2VkIGJ5OlxuICogICAgKiBBbnkgY2hhcmFjdGVyIGV4Y2VwdCBzcGFjZSwgKCcpLCAoXCIpLCBcIjxcIiwgXCI+XCIsIFwiPVwiLCAoYCksIG9yXG4gKiAgICAqIChcIikgdGhlbiBhbnkgbm9uLShcIiksIG9yXG4gKiAgICAqICgnKSB0aGVuIGFueSBub24tKCcpXG4gKi9cbmV4cG9ydCBjb25zdCBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4ID0gXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuLyhbIFxceDA5XFx4MGFcXHgwY1xceDBkXSkoW15cXDAtXFx4MUZcXHg3Ri1cXHg5RiBcIic+PS9dKykoWyBcXHgwOVxceDBhXFx4MGNcXHgwZF0qPVsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKig/OlteIFxceDA5XFx4MGFcXHgwY1xceDBkXCInYDw+PV0qfFwiW15cIl0qfCdbXiddKikpJC87XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEBtb2R1bGUgc2hhZHktcmVuZGVyXG4gKi9cbmltcG9ydCB7IGlzVGVtcGxhdGVQYXJ0QWN0aXZlIH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5jb25zdCB3YWxrZXJOb2RlRmlsdGVyID0gMTMzIC8qIE5vZGVGaWx0ZXIuU0hPV197RUxFTUVOVHxDT01NRU5UfFRFWFR9ICovO1xuLyoqXG4gKiBSZW1vdmVzIHRoZSBsaXN0IG9mIG5vZGVzIGZyb20gYSBUZW1wbGF0ZSBzYWZlbHkuIEluIGFkZGl0aW9uIHRvIHJlbW92aW5nXG4gKiBub2RlcyBmcm9tIHRoZSBUZW1wbGF0ZSwgdGhlIFRlbXBsYXRlIHBhcnQgaW5kaWNlcyBhcmUgdXBkYXRlZCB0byBtYXRjaFxuICogdGhlIG11dGF0ZWQgVGVtcGxhdGUgRE9NLlxuICpcbiAqIEFzIHRoZSB0ZW1wbGF0ZSBpcyB3YWxrZWQgdGhlIHJlbW92YWwgc3RhdGUgaXMgdHJhY2tlZCBhbmRcbiAqIHBhcnQgaW5kaWNlcyBhcmUgYWRqdXN0ZWQgYXMgbmVlZGVkLlxuICpcbiAqIGRpdlxuICogICBkaXYjMSAocmVtb3ZlKSA8LS0gc3RhcnQgcmVtb3ZpbmcgKHJlbW92aW5nIG5vZGUgaXMgZGl2IzEpXG4gKiAgICAgZGl2XG4gKiAgICAgICBkaXYjMiAocmVtb3ZlKSAgPC0tIGNvbnRpbnVlIHJlbW92aW5nIChyZW1vdmluZyBub2RlIGlzIHN0aWxsIGRpdiMxKVxuICogICAgICAgICBkaXZcbiAqIGRpdiA8LS0gc3RvcCByZW1vdmluZyBzaW5jZSBwcmV2aW91cyBzaWJsaW5nIGlzIHRoZSByZW1vdmluZyBub2RlIChkaXYjMSxcbiAqIHJlbW92ZWQgNCBub2RlcylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZU5vZGVzRnJvbVRlbXBsYXRlKHRlbXBsYXRlLCBub2Rlc1RvUmVtb3ZlKSB7XG4gICAgY29uc3QgeyBlbGVtZW50OiB7IGNvbnRlbnQgfSwgcGFydHMgfSA9IHRlbXBsYXRlO1xuICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoY29udGVudCwgd2Fsa2VyTm9kZUZpbHRlciwgbnVsbCwgZmFsc2UpO1xuICAgIGxldCBwYXJ0SW5kZXggPSBuZXh0QWN0aXZlSW5kZXhJblRlbXBsYXRlUGFydHMocGFydHMpO1xuICAgIGxldCBwYXJ0ID0gcGFydHNbcGFydEluZGV4XTtcbiAgICBsZXQgbm9kZUluZGV4ID0gLTE7XG4gICAgbGV0IHJlbW92ZUNvdW50ID0gMDtcbiAgICBjb25zdCBub2Rlc1RvUmVtb3ZlSW5UZW1wbGF0ZSA9IFtdO1xuICAgIGxldCBjdXJyZW50UmVtb3ZpbmdOb2RlID0gbnVsbDtcbiAgICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICAgICAgbm9kZUluZGV4Kys7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB3YWxrZXIuY3VycmVudE5vZGU7XG4gICAgICAgIC8vIEVuZCByZW1vdmFsIGlmIHN0ZXBwZWQgcGFzdCB0aGUgcmVtb3Zpbmcgbm9kZVxuICAgICAgICBpZiAobm9kZS5wcmV2aW91c1NpYmxpbmcgPT09IGN1cnJlbnRSZW1vdmluZ05vZGUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZW1vdmluZ05vZGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEEgbm9kZSB0byByZW1vdmUgd2FzIGZvdW5kIGluIHRoZSB0ZW1wbGF0ZVxuICAgICAgICBpZiAobm9kZXNUb1JlbW92ZS5oYXMobm9kZSkpIHtcbiAgICAgICAgICAgIG5vZGVzVG9SZW1vdmVJblRlbXBsYXRlLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAvLyBUcmFjayBub2RlIHdlJ3JlIHJlbW92aW5nXG4gICAgICAgICAgICBpZiAoY3VycmVudFJlbW92aW5nTm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRSZW1vdmluZ05vZGUgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFdoZW4gcmVtb3ZpbmcsIGluY3JlbWVudCBjb3VudCBieSB3aGljaCB0byBhZGp1c3Qgc3Vic2VxdWVudCBwYXJ0IGluZGljZXNcbiAgICAgICAgaWYgKGN1cnJlbnRSZW1vdmluZ05vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlbW92ZUNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHBhcnQgIT09IHVuZGVmaW5lZCAmJiBwYXJ0LmluZGV4ID09PSBub2RlSW5kZXgpIHtcbiAgICAgICAgICAgIC8vIElmIHBhcnQgaXMgaW4gYSByZW1vdmVkIG5vZGUgZGVhY3RpdmF0ZSBpdCBieSBzZXR0aW5nIGluZGV4IHRvIC0xIG9yXG4gICAgICAgICAgICAvLyBhZGp1c3QgdGhlIGluZGV4IGFzIG5lZWRlZC5cbiAgICAgICAgICAgIHBhcnQuaW5kZXggPSBjdXJyZW50UmVtb3ZpbmdOb2RlICE9PSBudWxsID8gLTEgOiBwYXJ0LmluZGV4IC0gcmVtb3ZlQ291bnQ7XG4gICAgICAgICAgICAvLyBnbyB0byB0aGUgbmV4dCBhY3RpdmUgcGFydC5cbiAgICAgICAgICAgIHBhcnRJbmRleCA9IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyhwYXJ0cywgcGFydEluZGV4KTtcbiAgICAgICAgICAgIHBhcnQgPSBwYXJ0c1twYXJ0SW5kZXhdO1xuICAgICAgICB9XG4gICAgfVxuICAgIG5vZGVzVG9SZW1vdmVJblRlbXBsYXRlLmZvckVhY2goKG4pID0+IG4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKSk7XG59XG5jb25zdCBjb3VudE5vZGVzID0gKG5vZGUpID0+IHtcbiAgICBsZXQgY291bnQgPSAobm9kZS5ub2RlVHlwZSA9PT0gMTEgLyogTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFICovKSA/IDAgOiAxO1xuICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIobm9kZSwgd2Fsa2VyTm9kZUZpbHRlciwgbnVsbCwgZmFsc2UpO1xuICAgIHdoaWxlICh3YWxrZXIubmV4dE5vZGUoKSkge1xuICAgICAgICBjb3VudCsrO1xuICAgIH1cbiAgICByZXR1cm4gY291bnQ7XG59O1xuY29uc3QgbmV4dEFjdGl2ZUluZGV4SW5UZW1wbGF0ZVBhcnRzID0gKHBhcnRzLCBzdGFydEluZGV4ID0gLTEpID0+IHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleCArIDE7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgIGlmIChpc1RlbXBsYXRlUGFydEFjdGl2ZShwYXJ0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufTtcbi8qKlxuICogSW5zZXJ0cyB0aGUgZ2l2ZW4gbm9kZSBpbnRvIHRoZSBUZW1wbGF0ZSwgb3B0aW9uYWxseSBiZWZvcmUgdGhlIGdpdmVuXG4gKiByZWZOb2RlLiBJbiBhZGRpdGlvbiB0byBpbnNlcnRpbmcgdGhlIG5vZGUgaW50byB0aGUgVGVtcGxhdGUsIHRoZSBUZW1wbGF0ZVxuICogcGFydCBpbmRpY2VzIGFyZSB1cGRhdGVkIHRvIG1hdGNoIHRoZSBtdXRhdGVkIFRlbXBsYXRlIERPTS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc2VydE5vZGVJbnRvVGVtcGxhdGUodGVtcGxhdGUsIG5vZGUsIHJlZk5vZGUgPSBudWxsKSB7XG4gICAgY29uc3QgeyBlbGVtZW50OiB7IGNvbnRlbnQgfSwgcGFydHMgfSA9IHRlbXBsYXRlO1xuICAgIC8vIElmIHRoZXJlJ3Mgbm8gcmVmTm9kZSwgdGhlbiBwdXQgbm9kZSBhdCBlbmQgb2YgdGVtcGxhdGUuXG4gICAgLy8gTm8gcGFydCBpbmRpY2VzIG5lZWQgdG8gYmUgc2hpZnRlZCBpbiB0aGlzIGNhc2UuXG4gICAgaWYgKHJlZk5vZGUgPT09IG51bGwgfHwgcmVmTm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihjb250ZW50LCB3YWxrZXJOb2RlRmlsdGVyLCBudWxsLCBmYWxzZSk7XG4gICAgbGV0IHBhcnRJbmRleCA9IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyhwYXJ0cyk7XG4gICAgbGV0IGluc2VydENvdW50ID0gMDtcbiAgICBsZXQgd2Fsa2VySW5kZXggPSAtMTtcbiAgICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICAgICAgd2Fsa2VySW5kZXgrKztcbiAgICAgICAgY29uc3Qgd2Fsa2VyTm9kZSA9IHdhbGtlci5jdXJyZW50Tm9kZTtcbiAgICAgICAgaWYgKHdhbGtlck5vZGUgPT09IHJlZk5vZGUpIHtcbiAgICAgICAgICAgIGluc2VydENvdW50ID0gY291bnROb2Rlcyhub2RlKTtcbiAgICAgICAgICAgIHJlZk5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgcmVmTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHBhcnRJbmRleCAhPT0gLTEgJiYgcGFydHNbcGFydEluZGV4XS5pbmRleCA9PT0gd2Fsa2VySW5kZXgpIHtcbiAgICAgICAgICAgIC8vIElmIHdlJ3ZlIGluc2VydGVkIHRoZSBub2RlLCBzaW1wbHkgYWRqdXN0IGFsbCBzdWJzZXF1ZW50IHBhcnRzXG4gICAgICAgICAgICBpZiAoaW5zZXJ0Q291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHBhcnRJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydHNbcGFydEluZGV4XS5pbmRleCArPSBpbnNlcnRDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4ID0gbmV4dEFjdGl2ZUluZGV4SW5UZW1wbGF0ZVBhcnRzKHBhcnRzLCBwYXJ0SW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJ0SW5kZXggPSBuZXh0QWN0aXZlSW5kZXhJblRlbXBsYXRlUGFydHMocGFydHMsIHBhcnRJbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RpZnktdGVtcGxhdGUuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuY29uc3QgZGlyZWN0aXZlcyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIEJyYW5kcyBhIGZ1bmN0aW9uIGFzIGEgZGlyZWN0aXZlIGZhY3RvcnkgZnVuY3Rpb24gc28gdGhhdCBsaXQtaHRtbCB3aWxsIGNhbGxcbiAqIHRoZSBmdW5jdGlvbiBkdXJpbmcgdGVtcGxhdGUgcmVuZGVyaW5nLCByYXRoZXIgdGhhbiBwYXNzaW5nIGFzIGEgdmFsdWUuXG4gKlxuICogQSBfZGlyZWN0aXZlXyBpcyBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBQYXJ0IGFzIGFuIGFyZ3VtZW50LiBJdCBoYXMgdGhlXG4gKiBzaWduYXR1cmU6IGAocGFydDogUGFydCkgPT4gdm9pZGAuXG4gKlxuICogQSBkaXJlY3RpdmUgX2ZhY3RvcnlfIGlzIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhcmd1bWVudHMgZm9yIGRhdGEgYW5kXG4gKiBjb25maWd1cmF0aW9uIGFuZCByZXR1cm5zIGEgZGlyZWN0aXZlLiBVc2VycyBvZiBkaXJlY3RpdmUgdXN1YWxseSByZWZlciB0b1xuICogdGhlIGRpcmVjdGl2ZSBmYWN0b3J5IGFzIHRoZSBkaXJlY3RpdmUuIEZvciBleGFtcGxlLCBcIlRoZSByZXBlYXQgZGlyZWN0aXZlXCIuXG4gKlxuICogVXN1YWxseSBhIHRlbXBsYXRlIGF1dGhvciB3aWxsIGludm9rZSBhIGRpcmVjdGl2ZSBmYWN0b3J5IGluIHRoZWlyIHRlbXBsYXRlXG4gKiB3aXRoIHJlbGV2YW50IGFyZ3VtZW50cywgd2hpY2ggd2lsbCB0aGVuIHJldHVybiBhIGRpcmVjdGl2ZSBmdW5jdGlvbi5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiB1c2luZyB0aGUgYHJlcGVhdCgpYCBkaXJlY3RpdmUgZmFjdG9yeSB0aGF0IHRha2VzIGFuXG4gKiBhcnJheSBhbmQgYSBmdW5jdGlvbiB0byByZW5kZXIgYW4gaXRlbTpcbiAqXG4gKiBgYGBqc1xuICogaHRtbGA8dWw+PCR7cmVwZWF0KGl0ZW1zLCAoaXRlbSkgPT4gaHRtbGA8bGk+JHtpdGVtfTwvbGk+YCl9PC91bD5gXG4gKiBgYGBcbiAqXG4gKiBXaGVuIGByZXBlYXRgIGlzIGludm9rZWQsIGl0IHJldHVybnMgYSBkaXJlY3RpdmUgZnVuY3Rpb24gdGhhdCBjbG9zZXMgb3ZlclxuICogYGl0ZW1zYCBhbmQgdGhlIHRlbXBsYXRlIGZ1bmN0aW9uLiBXaGVuIHRoZSBvdXRlciB0ZW1wbGF0ZSBpcyByZW5kZXJlZCwgdGhlXG4gKiByZXR1cm4gZGlyZWN0aXZlIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHRoZSBQYXJ0IGZvciB0aGUgZXhwcmVzc2lvbi5cbiAqIGByZXBlYXRgIHRoZW4gcGVyZm9ybXMgaXQncyBjdXN0b20gbG9naWMgdG8gcmVuZGVyIG11bHRpcGxlIGl0ZW1zLlxuICpcbiAqIEBwYXJhbSBmIFRoZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbi4gTXVzdCBiZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhXG4gKiBmdW5jdGlvbiBvZiB0aGUgc2lnbmF0dXJlIGAocGFydDogUGFydCkgPT4gdm9pZGAuIFRoZSByZXR1cm5lZCBmdW5jdGlvbiB3aWxsXG4gKiBiZSBjYWxsZWQgd2l0aCB0aGUgcGFydCBvYmplY3QuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQge2RpcmVjdGl2ZSwgaHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuICpcbiAqIGNvbnN0IGltbXV0YWJsZSA9IGRpcmVjdGl2ZSgodikgPT4gKHBhcnQpID0+IHtcbiAqICAgaWYgKHBhcnQudmFsdWUgIT09IHYpIHtcbiAqICAgICBwYXJ0LnNldFZhbHVlKHYpXG4gKiAgIH1cbiAqIH0pO1xuICovXG5leHBvcnQgY29uc3QgZGlyZWN0aXZlID0gKGYpID0+ICgoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGQgPSBmKC4uLmFyZ3MpO1xuICAgIGRpcmVjdGl2ZXMuc2V0KGQsIHRydWUpO1xuICAgIHJldHVybiBkO1xufSk7XG5leHBvcnQgY29uc3QgaXNEaXJlY3RpdmUgPSAobykgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgbyA9PT0gJ2Z1bmN0aW9uJyAmJiBkaXJlY3RpdmVzLmhhcyhvKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJlY3RpdmUuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuLyoqXG4gKiBBIHNlbnRpbmVsIHZhbHVlIHRoYXQgc2lnbmFscyB0aGF0IGEgdmFsdWUgd2FzIGhhbmRsZWQgYnkgYSBkaXJlY3RpdmUgYW5kXG4gKiBzaG91bGQgbm90IGJlIHdyaXR0ZW4gdG8gdGhlIERPTS5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vQ2hhbmdlID0ge307XG4vKipcbiAqIEEgc2VudGluZWwgdmFsdWUgdGhhdCBzaWduYWxzIGEgTm9kZVBhcnQgdG8gZnVsbHkgY2xlYXIgaXRzIGNvbnRlbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBub3RoaW5nID0ge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogQG1vZHVsZSBsaXQtaHRtbFxuICovXG5pbXBvcnQgeyBpc0NFUG9seWZpbGwgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBpc1RlbXBsYXRlUGFydEFjdGl2ZSB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiBhIGBUZW1wbGF0ZWAgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gdGhlIERPTSBhbmQgdXBkYXRlZFxuICogd2l0aCBuZXcgdmFsdWVzLlxuICovXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVJbnN0YW5jZSB7XG4gICAgY29uc3RydWN0b3IodGVtcGxhdGUsIHByb2Nlc3Nvciwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9fcGFydHMgPSBbXTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgICAgICB0aGlzLnByb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgdXBkYXRlKHZhbHVlcykge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgcGFydCBvZiB0aGlzLl9fcGFydHMpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJ0LnNldFZhbHVlKHZhbHVlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIHRoaXMuX19wYXJ0cykge1xuICAgICAgICAgICAgaWYgKHBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhcnQuY29tbWl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2Nsb25lKCkge1xuICAgICAgICAvLyBUaGVyZSBhcmUgYSBudW1iZXIgb2Ygc3RlcHMgaW4gdGhlIGxpZmVjeWNsZSBvZiBhIHRlbXBsYXRlIGluc3RhbmNlJ3NcbiAgICAgICAgLy8gRE9NIGZyYWdtZW50OlxuICAgICAgICAvLyAgMS4gQ2xvbmUgLSBjcmVhdGUgdGhlIGluc3RhbmNlIGZyYWdtZW50XG4gICAgICAgIC8vICAyLiBBZG9wdCAtIGFkb3B0IGludG8gdGhlIG1haW4gZG9jdW1lbnRcbiAgICAgICAgLy8gIDMuIFByb2Nlc3MgLSBmaW5kIHBhcnQgbWFya2VycyBhbmQgY3JlYXRlIHBhcnRzXG4gICAgICAgIC8vICA0LiBVcGdyYWRlIC0gdXBncmFkZSBjdXN0b20gZWxlbWVudHNcbiAgICAgICAgLy8gIDUuIFVwZGF0ZSAtIHNldCBub2RlLCBhdHRyaWJ1dGUsIHByb3BlcnR5LCBldGMuLCB2YWx1ZXNcbiAgICAgICAgLy8gIDYuIENvbm5lY3QgLSBjb25uZWN0IHRvIHRoZSBkb2N1bWVudC4gT3B0aW9uYWwgYW5kIG91dHNpZGUgb2YgdGhpc1xuICAgICAgICAvLyAgICAgbWV0aG9kLlxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBoYXZlIGEgZmV3IGNvbnN0cmFpbnRzIG9uIHRoZSBvcmRlcmluZyBvZiB0aGVzZSBzdGVwczpcbiAgICAgICAgLy8gICogV2UgbmVlZCB0byB1cGdyYWRlIGJlZm9yZSB1cGRhdGluZywgc28gdGhhdCBwcm9wZXJ0eSB2YWx1ZXMgd2lsbCBwYXNzXG4gICAgICAgIC8vICAgIHRocm91Z2ggYW55IHByb3BlcnR5IHNldHRlcnMuXG4gICAgICAgIC8vICAqIFdlIHdvdWxkIGxpa2UgdG8gcHJvY2VzcyBiZWZvcmUgdXBncmFkaW5nIHNvIHRoYXQgd2UncmUgc3VyZSB0aGF0IHRoZVxuICAgICAgICAvLyAgICBjbG9uZWQgZnJhZ21lbnQgaXMgaW5lcnQgYW5kIG5vdCBkaXN0dXJiZWQgYnkgc2VsZi1tb2RpZnlpbmcgRE9NLlxuICAgICAgICAvLyAgKiBXZSB3YW50IGN1c3RvbSBlbGVtZW50cyB0byB1cGdyYWRlIGV2ZW4gaW4gZGlzY29ubmVjdGVkIGZyYWdtZW50cy5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gR2l2ZW4gdGhlc2UgY29uc3RyYWludHMsIHdpdGggZnVsbCBjdXN0b20gZWxlbWVudHMgc3VwcG9ydCB3ZSB3b3VsZFxuICAgICAgICAvLyBwcmVmZXIgdGhlIG9yZGVyOiBDbG9uZSwgUHJvY2VzcywgQWRvcHQsIFVwZ3JhZGUsIFVwZGF0ZSwgQ29ubmVjdFxuICAgICAgICAvL1xuICAgICAgICAvLyBCdXQgU2FmYXJpIGRvZXMgbm90IGltcGxlbWVudCBDdXN0b21FbGVtZW50UmVnaXN0cnkjdXBncmFkZSwgc28gd2VcbiAgICAgICAgLy8gY2FuIG5vdCBpbXBsZW1lbnQgdGhhdCBvcmRlciBhbmQgc3RpbGwgaGF2ZSB1cGdyYWRlLWJlZm9yZS11cGRhdGUgYW5kXG4gICAgICAgIC8vIHVwZ3JhZGUgZGlzY29ubmVjdGVkIGZyYWdtZW50cy4gU28gd2UgaW5zdGVhZCBzYWNyaWZpY2UgdGhlXG4gICAgICAgIC8vIHByb2Nlc3MtYmVmb3JlLXVwZ3JhZGUgY29uc3RyYWludCwgc2luY2UgaW4gQ3VzdG9tIEVsZW1lbnRzIHYxIGVsZW1lbnRzXG4gICAgICAgIC8vIG11c3Qgbm90IG1vZGlmeSB0aGVpciBsaWdodCBET00gaW4gdGhlIGNvbnN0cnVjdG9yLiBXZSBzdGlsbCBoYXZlIGlzc3Vlc1xuICAgICAgICAvLyB3aGVuIGNvLWV4aXN0aW5nIHdpdGggQ0V2MCBlbGVtZW50cyBsaWtlIFBvbHltZXIgMSwgYW5kIHdpdGggcG9seWZpbGxzXG4gICAgICAgIC8vIHRoYXQgZG9uJ3Qgc3RyaWN0bHkgYWRoZXJlIHRvIHRoZSBuby1tb2RpZmljYXRpb24gcnVsZSBiZWNhdXNlIHNoYWRvd1xuICAgICAgICAvLyBET00sIHdoaWNoIG1heSBiZSBjcmVhdGVkIGluIHRoZSBjb25zdHJ1Y3RvciwgaXMgZW11bGF0ZWQgYnkgYmVpbmcgcGxhY2VkXG4gICAgICAgIC8vIGluIHRoZSBsaWdodCBET00uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoZSByZXN1bHRpbmcgb3JkZXIgaXMgb24gbmF0aXZlIGlzOiBDbG9uZSwgQWRvcHQsIFVwZ3JhZGUsIFByb2Nlc3MsXG4gICAgICAgIC8vIFVwZGF0ZSwgQ29ubmVjdC4gZG9jdW1lbnQuaW1wb3J0Tm9kZSgpIHBlcmZvcm1zIENsb25lLCBBZG9wdCwgYW5kIFVwZ3JhZGVcbiAgICAgICAgLy8gaW4gb25lIHN0ZXAuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoZSBDdXN0b20gRWxlbWVudHMgdjEgcG9seWZpbGwgc3VwcG9ydHMgdXBncmFkZSgpLCBzbyB0aGUgb3JkZXIgd2hlblxuICAgICAgICAvLyBwb2x5ZmlsbGVkIGlzIHRoZSBtb3JlIGlkZWFsOiBDbG9uZSwgUHJvY2VzcywgQWRvcHQsIFVwZ3JhZGUsIFVwZGF0ZSxcbiAgICAgICAgLy8gQ29ubmVjdC5cbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBpc0NFUG9seWZpbGwgP1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZS5lbGVtZW50LmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpIDpcbiAgICAgICAgICAgIGRvY3VtZW50LmltcG9ydE5vZGUodGhpcy50ZW1wbGF0ZS5lbGVtZW50LmNvbnRlbnQsIHRydWUpO1xuICAgICAgICBjb25zdCBzdGFjayA9IFtdO1xuICAgICAgICBjb25zdCBwYXJ0cyA9IHRoaXMudGVtcGxhdGUucGFydHM7XG4gICAgICAgIC8vIEVkZ2UgbmVlZHMgYWxsIDQgcGFyYW1ldGVycyBwcmVzZW50OyBJRTExIG5lZWRzIDNyZCBwYXJhbWV0ZXIgdG8gYmUgbnVsbFxuICAgICAgICBjb25zdCB3YWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGZyYWdtZW50LCAxMzMgLyogTm9kZUZpbHRlci5TSE9XX3tFTEVNRU5UfENPTU1FTlR8VEVYVH0gKi8sIG51bGwsIGZhbHNlKTtcbiAgICAgICAgbGV0IHBhcnRJbmRleCA9IDA7XG4gICAgICAgIGxldCBub2RlSW5kZXggPSAwO1xuICAgICAgICBsZXQgcGFydDtcbiAgICAgICAgbGV0IG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgbm9kZXMgYW5kIHBhcnRzIG9mIGEgdGVtcGxhdGVcbiAgICAgICAgd2hpbGUgKHBhcnRJbmRleCA8IHBhcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcGFydCA9IHBhcnRzW3BhcnRJbmRleF07XG4gICAgICAgICAgICBpZiAoIWlzVGVtcGxhdGVQYXJ0QWN0aXZlKHBhcnQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3BhcnRzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByb2dyZXNzIHRoZSB0cmVlIHdhbGtlciB1bnRpbCB3ZSBmaW5kIG91ciBuZXh0IHBhcnQncyBub2RlLlxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG11bHRpcGxlIHBhcnRzIG1heSBzaGFyZSB0aGUgc2FtZSBub2RlIChhdHRyaWJ1dGUgcGFydHNcbiAgICAgICAgICAgIC8vIG9uIGEgc2luZ2xlIGVsZW1lbnQpLCBzbyB0aGlzIGxvb3AgbWF5IG5vdCBydW4gYXQgYWxsLlxuICAgICAgICAgICAgd2hpbGUgKG5vZGVJbmRleCA8IHBhcnQuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBub2RlSW5kZXgrKztcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gJ1RFTVBMQVRFJykge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSBub2RlLmNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgobm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSd2ZSBleGhhdXN0ZWQgdGhlIGNvbnRlbnQgaW5zaWRlIGEgbmVzdGVkIHRlbXBsYXRlIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIC8vIEJlY2F1c2Ugd2Ugc3RpbGwgaGF2ZSBwYXJ0cyAodGhlIG91dGVyIGZvci1sb29wKSwgd2Uga25vdzpcbiAgICAgICAgICAgICAgICAgICAgLy8gLSBUaGVyZSBpcyBhIHRlbXBsYXRlIGluIHRoZSBzdGFja1xuICAgICAgICAgICAgICAgICAgICAvLyAtIFRoZSB3YWxrZXIgd2lsbCBmaW5kIGEgbmV4dE5vZGUgb3V0c2lkZSB0aGUgdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSd2ZSBhcnJpdmVkIGF0IG91ciBwYXJ0J3Mgbm9kZS5cbiAgICAgICAgICAgIGlmIChwYXJ0LnR5cGUgPT09ICdub2RlJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnQgPSB0aGlzLnByb2Nlc3Nvci5oYW5kbGVUZXh0RXhwcmVzc2lvbih0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHBhcnQuaW5zZXJ0QWZ0ZXJOb2RlKG5vZGUucHJldmlvdXNTaWJsaW5nKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9fcGFydHMucHVzaChwYXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX19wYXJ0cy5wdXNoKC4uLnRoaXMucHJvY2Vzc29yLmhhbmRsZUF0dHJpYnV0ZUV4cHJlc3Npb25zKG5vZGUsIHBhcnQubmFtZSwgcGFydC5zdHJpbmdzLCB0aGlzLm9wdGlvbnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NFUG9seWZpbGwpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkb3B0Tm9kZShmcmFnbWVudCk7XG4gICAgICAgICAgICBjdXN0b21FbGVtZW50cy51cGdyYWRlKGZyYWdtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVtcGxhdGUtaW5zdGFuY2UuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuLyoqXG4gKiBAbW9kdWxlIGxpdC1odG1sXG4gKi9cbmltcG9ydCB7IHJlcGFyZW50Tm9kZXMgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBib3VuZEF0dHJpYnV0ZVN1ZmZpeCwgbGFzdEF0dHJpYnV0ZU5hbWVSZWdleCwgbWFya2VyLCBub2RlTWFya2VyIH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5jb25zdCBjb21tZW50TWFya2VyID0gYCAke21hcmtlcn0gYDtcbi8qKlxuICogVGhlIHJldHVybiB0eXBlIG9mIGBodG1sYCwgd2hpY2ggaG9sZHMgYSBUZW1wbGF0ZSBhbmQgdGhlIHZhbHVlcyBmcm9tXG4gKiBpbnRlcnBvbGF0ZWQgZXhwcmVzc2lvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgY29uc3RydWN0b3Ioc3RyaW5ncywgdmFsdWVzLCB0eXBlLCBwcm9jZXNzb3IpIHtcbiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIG9mIEhUTUwgdXNlZCB0byBjcmVhdGUgYSBgPHRlbXBsYXRlPmAgZWxlbWVudC5cbiAgICAgKi9cbiAgICBnZXRIVE1MKCkge1xuICAgICAgICBjb25zdCBsID0gdGhpcy5zdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBodG1sID0gJyc7XG4gICAgICAgIGxldCBpc0NvbW1lbnRCaW5kaW5nID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gdGhpcy5zdHJpbmdzW2ldO1xuICAgICAgICAgICAgLy8gRm9yIGVhY2ggYmluZGluZyB3ZSB3YW50IHRvIGRldGVybWluZSB0aGUga2luZCBvZiBtYXJrZXIgdG8gaW5zZXJ0XG4gICAgICAgICAgICAvLyBpbnRvIHRoZSB0ZW1wbGF0ZSBzb3VyY2UgYmVmb3JlIGl0J3MgcGFyc2VkIGJ5IHRoZSBicm93c2VyJ3MgSFRNTFxuICAgICAgICAgICAgLy8gcGFyc2VyLiBUaGUgbWFya2VyIHR5cGUgaXMgYmFzZWQgb24gd2hldGhlciB0aGUgZXhwcmVzc2lvbiBpcyBpbiBhblxuICAgICAgICAgICAgLy8gYXR0cmlidXRlLCB0ZXh0LCBvciBjb21tZW50IHBvc2l0aW9uLlxuICAgICAgICAgICAgLy8gICAqIEZvciBub2RlLXBvc2l0aW9uIGJpbmRpbmdzIHdlIGluc2VydCBhIGNvbW1lbnQgd2l0aCB0aGUgbWFya2VyXG4gICAgICAgICAgICAvLyAgICAgc2VudGluZWwgYXMgaXRzIHRleHQgY29udGVudCwgbGlrZSA8IS0te3tsaXQtZ3VpZH19LS0+LlxuICAgICAgICAgICAgLy8gICAqIEZvciBhdHRyaWJ1dGUgYmluZGluZ3Mgd2UgaW5zZXJ0IGp1c3QgdGhlIG1hcmtlciBzZW50aW5lbCBmb3IgdGhlXG4gICAgICAgICAgICAvLyAgICAgZmlyc3QgYmluZGluZywgc28gdGhhdCB3ZSBzdXBwb3J0IHVucXVvdGVkIGF0dHJpYnV0ZSBiaW5kaW5ncy5cbiAgICAgICAgICAgIC8vICAgICBTdWJzZXF1ZW50IGJpbmRpbmdzIGNhbiB1c2UgYSBjb21tZW50IG1hcmtlciBiZWNhdXNlIG11bHRpLWJpbmRpbmdcbiAgICAgICAgICAgIC8vICAgICBhdHRyaWJ1dGVzIG11c3QgYmUgcXVvdGVkLlxuICAgICAgICAgICAgLy8gICAqIEZvciBjb21tZW50IGJpbmRpbmdzIHdlIGluc2VydCBqdXN0IHRoZSBtYXJrZXIgc2VudGluZWwgc28gd2UgZG9uJ3RcbiAgICAgICAgICAgIC8vICAgICBjbG9zZSB0aGUgY29tbWVudC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgc2NhbnMgdGhlIHRlbXBsYXRlIHNvdXJjZSwgYnV0IGlzICpub3QqIGFuIEhUTUxcbiAgICAgICAgICAgIC8vIHBhcnNlci4gV2UgZG9uJ3QgbmVlZCB0byB0cmFjayB0aGUgdHJlZSBzdHJ1Y3R1cmUgb2YgdGhlIEhUTUwsIG9ubHlcbiAgICAgICAgICAgIC8vIHdoZXRoZXIgYSBiaW5kaW5nIGlzIGluc2lkZSBhIGNvbW1lbnQsIGFuZCBpZiBub3QsIGlmIGl0IGFwcGVhcnMgdG8gYmVcbiAgICAgICAgICAgIC8vIHRoZSBmaXJzdCBiaW5kaW5nIGluIGFuIGF0dHJpYnV0ZS5cbiAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRPcGVuID0gcy5sYXN0SW5kZXhPZignPCEtLScpO1xuICAgICAgICAgICAgLy8gV2UncmUgaW4gY29tbWVudCBwb3NpdGlvbiBpZiB3ZSBoYXZlIGEgY29tbWVudCBvcGVuIHdpdGggbm8gZm9sbG93aW5nXG4gICAgICAgICAgICAvLyBjb21tZW50IGNsb3NlLiBCZWNhdXNlIDwtLSBjYW4gYXBwZWFyIGluIGFuIGF0dHJpYnV0ZSB2YWx1ZSB0aGVyZSBjYW5cbiAgICAgICAgICAgIC8vIGJlIGZhbHNlIHBvc2l0aXZlcy5cbiAgICAgICAgICAgIGlzQ29tbWVudEJpbmRpbmcgPSAoY29tbWVudE9wZW4gPiAtMSB8fCBpc0NvbW1lbnRCaW5kaW5nKSAmJlxuICAgICAgICAgICAgICAgIHMuaW5kZXhPZignLS0+JywgY29tbWVudE9wZW4gKyAxKSA9PT0gLTE7XG4gICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhbiBhdHRyaWJ1dGUtbGlrZSBzZXF1ZW5jZSBwcmVjZWRpbmcgdGhlXG4gICAgICAgICAgICAvLyBleHByZXNzaW9uLiBUaGlzIGNhbiBtYXRjaCBcIm5hbWU9dmFsdWVcIiBsaWtlIHN0cnVjdHVyZXMgaW4gdGV4dCxcbiAgICAgICAgICAgIC8vIGNvbW1lbnRzLCBhbmQgYXR0cmlidXRlIHZhbHVlcywgc28gdGhlcmUgY2FuIGJlIGZhbHNlLXBvc2l0aXZlcy5cbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZU1hdGNoID0gbGFzdEF0dHJpYnV0ZU5hbWVSZWdleC5leGVjKHMpO1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZU1hdGNoID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UncmUgb25seSBpbiB0aGlzIGJyYW5jaCBpZiB3ZSBkb24ndCBoYXZlIGEgYXR0cmlidXRlLWxpa2VcbiAgICAgICAgICAgICAgICAvLyBwcmVjZWRpbmcgc2VxdWVuY2UuIEZvciBjb21tZW50cywgdGhpcyBndWFyZHMgYWdhaW5zdCB1bnVzdWFsXG4gICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlIHZhbHVlcyBsaWtlIDxkaXYgZm9vPVwiPCEtLSR7J2Jhcid9XCI+LiBDYXNlcyBsaWtlXG4gICAgICAgICAgICAgICAgLy8gPCEtLSBmb289JHsnYmFyJ30tLT4gYXJlIGhhbmRsZWQgY29ycmVjdGx5IGluIHRoZSBhdHRyaWJ1dGUgYnJhbmNoXG4gICAgICAgICAgICAgICAgLy8gYmVsb3cuXG4gICAgICAgICAgICAgICAgaHRtbCArPSBzICsgKGlzQ29tbWVudEJpbmRpbmcgPyBjb21tZW50TWFya2VyIDogbm9kZU1hcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgYXR0cmlidXRlcyB3ZSB1c2UganVzdCBhIG1hcmtlciBzZW50aW5lbCwgYW5kIGFsc28gYXBwZW5kIGFcbiAgICAgICAgICAgICAgICAvLyAkbGl0JCBzdWZmaXggdG8gdGhlIG5hbWUgdG8gb3B0LW91dCBvZiBhdHRyaWJ1dGUtc3BlY2lmaWMgcGFyc2luZ1xuICAgICAgICAgICAgICAgIC8vIHRoYXQgSUUgYW5kIEVkZ2UgZG8gZm9yIHN0eWxlIGFuZCBjZXJ0YWluIFNWRyBhdHRyaWJ1dGVzLlxuICAgICAgICAgICAgICAgIGh0bWwgKz0gcy5zdWJzdHIoMCwgYXR0cmlidXRlTWF0Y2guaW5kZXgpICsgYXR0cmlidXRlTWF0Y2hbMV0gK1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVNYXRjaFsyXSArIGJvdW5kQXR0cmlidXRlU3VmZml4ICsgYXR0cmlidXRlTWF0Y2hbM10gK1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaHRtbCArPSB0aGlzLnN0cmluZ3NbbF07XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH1cbiAgICBnZXRUZW1wbGF0ZUVsZW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdGhpcy5nZXRIVE1MKCk7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG59XG4vKipcbiAqIEEgVGVtcGxhdGVSZXN1bHQgZm9yIFNWRyBmcmFnbWVudHMuXG4gKlxuICogVGhpcyBjbGFzcyB3cmFwcyBIVE1MIGluIGFuIGA8c3ZnPmAgdGFnIGluIG9yZGVyIHRvIHBhcnNlIGl0cyBjb250ZW50cyBpbiB0aGVcbiAqIFNWRyBuYW1lc3BhY2UsIHRoZW4gbW9kaWZpZXMgdGhlIHRlbXBsYXRlIHRvIHJlbW92ZSB0aGUgYDxzdmc+YCB0YWcgc28gdGhhdFxuICogY2xvbmVzIG9ubHkgY29udGFpbmVyIHRoZSBvcmlnaW5hbCBmcmFnbWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNWR1RlbXBsYXRlUmVzdWx0IGV4dGVuZHMgVGVtcGxhdGVSZXN1bHQge1xuICAgIGdldEhUTUwoKSB7XG4gICAgICAgIHJldHVybiBgPHN2Zz4ke3N1cGVyLmdldEhUTUwoKX08L3N2Zz5gO1xuICAgIH1cbiAgICBnZXRUZW1wbGF0ZUVsZW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gc3VwZXIuZ2V0VGVtcGxhdGVFbGVtZW50KCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50O1xuICAgICAgICBjb25zdCBzdmdFbGVtZW50ID0gY29udGVudC5maXJzdENoaWxkO1xuICAgICAgICBjb250ZW50LnJlbW92ZUNoaWxkKHN2Z0VsZW1lbnQpO1xuICAgICAgICByZXBhcmVudE5vZGVzKGNvbnRlbnQsIHN2Z0VsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS1yZXN1bHQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuLyoqXG4gKiBAbW9kdWxlIGxpdC1odG1sXG4gKi9cbmltcG9ydCB7IGlzRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmUuanMnO1xuaW1wb3J0IHsgcmVtb3ZlTm9kZXMgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBub0NoYW5nZSwgbm90aGluZyB9IGZyb20gJy4vcGFydC5qcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZUluc3RhbmNlIH0gZnJvbSAnLi90ZW1wbGF0ZS1pbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJy4vdGVtcGxhdGUtcmVzdWx0LmpzJztcbmltcG9ydCB7IGNyZWF0ZU1hcmtlciB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuZXhwb3J0IGNvbnN0IGlzUHJpbWl0aXZlID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuICh2YWx1ZSA9PT0gbnVsbCB8fFxuICAgICAgICAhKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSk7XG59O1xuZXhwb3J0IGNvbnN0IGlzSXRlcmFibGUgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgISEodmFsdWUgJiYgdmFsdWVbU3ltYm9sLml0ZXJhdG9yXSk7XG59O1xuLyoqXG4gKiBXcml0ZXMgYXR0cmlidXRlIHZhbHVlcyB0byB0aGUgRE9NIGZvciBhIGdyb3VwIG9mIEF0dHJpYnV0ZVBhcnRzIGJvdW5kIHRvIGFcbiAqIHNpbmdsZSBhdHRyaWJ1dGUuIFRoZSB2YWx1ZSBpcyBvbmx5IHNldCBvbmNlIGV2ZW4gaWYgdGhlcmUgYXJlIG11bHRpcGxlIHBhcnRzXG4gKiBmb3IgYW4gYXR0cmlidXRlLlxuICovXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlQ29tbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKSB7XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzO1xuICAgICAgICB0aGlzLnBhcnRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucGFydHNbaV0gPSB0aGlzLl9jcmVhdGVQYXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNpbmdsZSBwYXJ0LiBPdmVycmlkZSB0aGlzIHRvIGNyZWF0ZSBhIGRpZmZlcm50IHR5cGUgb2YgcGFydC5cbiAgICAgKi9cbiAgICBfY3JlYXRlUGFydCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGVQYXJ0KHRoaXMpO1xuICAgIH1cbiAgICBfZ2V0VmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IHN0cmluZ3MgPSB0aGlzLnN0cmluZ3M7XG4gICAgICAgIGNvbnN0IGwgPSBzdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCB0ZXh0ID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0ZXh0ICs9IHN0cmluZ3NbaV07XG4gICAgICAgICAgICBjb25zdCBwYXJ0ID0gdGhpcy5wYXJ0c1tpXTtcbiAgICAgICAgICAgIGlmIChwYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gcGFydC52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmltaXRpdmUodikgfHwgIWlzSXRlcmFibGUodikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dCArPSB0eXBlb2YgdiA9PT0gJ3N0cmluZycgPyB2IDogU3RyaW5nKHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gdHlwZW9mIHQgPT09ICdzdHJpbmcnID8gdCA6IFN0cmluZyh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0ZXh0ICs9IHN0cmluZ3NbbF07XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmRpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgdGhpcy5fZ2V0VmFsdWUoKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEEgUGFydCB0aGF0IGNvbnRyb2xzIGFsbCBvciBwYXJ0IG9mIGFuIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZVBhcnQge1xuICAgIGNvbnN0cnVjdG9yKGNvbW1pdHRlcikge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNvbW1pdHRlciA9IGNvbW1pdHRlcjtcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBub0NoYW5nZSAmJiAoIWlzUHJpbWl0aXZlKHZhbHVlKSB8fCB2YWx1ZSAhPT0gdGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIC8vIElmIHRoZSB2YWx1ZSBpcyBhIG5vdCBhIGRpcmVjdGl2ZSwgZGlydHkgdGhlIGNvbW1pdHRlciBzbyB0aGF0IGl0J2xsXG4gICAgICAgICAgICAvLyBjYWxsIHNldEF0dHJpYnV0ZS4gSWYgdGhlIHZhbHVlIGlzIGEgZGlyZWN0aXZlLCBpdCdsbCBkaXJ0eSB0aGVcbiAgICAgICAgICAgIC8vIGNvbW1pdHRlciBpZiBpdCBjYWxscyBzZXRWYWx1ZSgpLlxuICAgICAgICAgICAgaWYgKCFpc0RpcmVjdGl2ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1pdHRlci5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICB3aGlsZSAoaXNEaXJlY3RpdmUodGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICAgICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IG5vQ2hhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21taXR0ZXIuY29tbWl0KCk7XG4gICAgfVxufVxuLyoqXG4gKiBBIFBhcnQgdGhhdCBjb250cm9scyBhIGxvY2F0aW9uIHdpdGhpbiBhIE5vZGUgdHJlZS4gTGlrZSBhIFJhbmdlLCBOb2RlUGFydFxuICogaGFzIHN0YXJ0IGFuZCBlbmQgbG9jYXRpb25zIGFuZCBjYW4gc2V0IGFuZCB1cGRhdGUgdGhlIE5vZGVzIGJldHdlZW4gdGhvc2VcbiAqIGxvY2F0aW9ucy5cbiAqXG4gKiBOb2RlUGFydHMgc3VwcG9ydCBzZXZlcmFsIHZhbHVlIHR5cGVzOiBwcmltaXRpdmVzLCBOb2RlcywgVGVtcGxhdGVSZXN1bHRzLFxuICogYXMgd2VsbCBhcyBhcnJheXMgYW5kIGl0ZXJhYmxlcyBvZiB0aG9zZSB0eXBlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vZGVQYXJ0IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgdGhpcyBwYXJ0IGludG8gYSBjb250YWluZXIuXG4gICAgICpcbiAgICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICAgKi9cbiAgICBhcHBlbmRJbnRvKGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLnN0YXJ0Tm9kZSA9IGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVNYXJrZXIoKSk7XG4gICAgICAgIHRoaXMuZW5kTm9kZSA9IGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVNYXJrZXIoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2VydHMgdGhpcyBwYXJ0IGFmdGVyIHRoZSBgcmVmYCBub2RlIChiZXR3ZWVuIGByZWZgIGFuZCBgcmVmYCdzIG5leHRcbiAgICAgKiBzaWJsaW5nKS4gQm90aCBgcmVmYCBhbmQgaXRzIG5leHQgc2libGluZyBtdXN0IGJlIHN0YXRpYywgdW5jaGFuZ2luZyBub2Rlc1xuICAgICAqIHN1Y2ggYXMgdGhvc2UgdGhhdCBhcHBlYXIgaW4gYSBsaXRlcmFsIHNlY3Rpb24gb2YgYSB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIFRoaXMgcGFydCBtdXN0IGJlIGVtcHR5LCBhcyBpdHMgY29udGVudHMgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IG1vdmVkLlxuICAgICAqL1xuICAgIGluc2VydEFmdGVyTm9kZShyZWYpIHtcbiAgICAgICAgdGhpcy5zdGFydE5vZGUgPSByZWY7XG4gICAgICAgIHRoaXMuZW5kTm9kZSA9IHJlZi5uZXh0U2libGluZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwZW5kcyB0aGlzIHBhcnQgaW50byBhIHBhcmVudCBwYXJ0LlxuICAgICAqXG4gICAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAgICovXG4gICAgYXBwZW5kSW50b1BhcnQocGFydCkge1xuICAgICAgICBwYXJ0Ll9faW5zZXJ0KHRoaXMuc3RhcnROb2RlID0gY3JlYXRlTWFya2VyKCkpO1xuICAgICAgICBwYXJ0Ll9faW5zZXJ0KHRoaXMuZW5kTm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB0aGlzIHBhcnQgYWZ0ZXIgdGhlIGByZWZgIHBhcnQuXG4gICAgICpcbiAgICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICAgKi9cbiAgICBpbnNlcnRBZnRlclBhcnQocmVmKSB7XG4gICAgICAgIHJlZi5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICAgICAgdGhpcy5lbmROb2RlID0gcmVmLmVuZE5vZGU7XG4gICAgICAgIHJlZi5lbmROb2RlID0gdGhpcy5zdGFydE5vZGU7XG4gICAgfVxuICAgIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX19wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX19wZW5kaW5nVmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fY29tbWl0VGV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX19jb21taXROb2RlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0l0ZXJhYmxlKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gbm90aGluZykge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5vdGhpbmc7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFjaywgd2lsbCByZW5kZXIgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvblxuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdFRleHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9faW5zZXJ0KG5vZGUpIHtcbiAgICAgICAgdGhpcy5lbmROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIHRoaXMuZW5kTm9kZSk7XG4gICAgfVxuICAgIF9fY29tbWl0Tm9kZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX19pbnNlcnQodmFsdWUpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIF9fY29tbWl0VGV4dCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG4gICAgICAgIC8vIElmIGB2YWx1ZWAgaXNuJ3QgYWxyZWFkeSBhIHN0cmluZywgd2UgZXhwbGljaXRseSBjb252ZXJ0IGl0IGhlcmUgaW4gY2FzZVxuICAgICAgICAvLyBpdCBjYW4ndCBiZSBpbXBsaWNpdGx5IGNvbnZlcnRlZCAtIGkuZS4gaXQncyBhIHN5bWJvbC5cbiAgICAgICAgY29uc3QgdmFsdWVBc1N0cmluZyA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZSA6IFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLmVuZE5vZGUucHJldmlvdXNTaWJsaW5nICYmXG4gICAgICAgICAgICBub2RlLm5vZGVUeXBlID09PSAzIC8qIE5vZGUuVEVYVF9OT0RFICovKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBvbmx5IGhhdmUgYSBzaW5nbGUgdGV4dCBub2RlIGJldHdlZW4gdGhlIG1hcmtlcnMsIHdlIGNhbiBqdXN0XG4gICAgICAgICAgICAvLyBzZXQgaXRzIHZhbHVlLCByYXRoZXIgdGhhbiByZXBsYWNpbmcgaXQuXG4gICAgICAgICAgICAvLyBUT0RPKGp1c3RpbmZhZ25hbmkpOiBDYW4gd2UganVzdCBjaGVjayBpZiB0aGlzLnZhbHVlIGlzIHByaW1pdGl2ZT9cbiAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZhbHVlQXNTdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9fY29tbWl0Tm9kZShkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZUFzU3RyaW5nKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBfX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlRmFjdG9yeSh2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVJbnN0YW5jZSAmJlxuICAgICAgICAgICAgdGhpcy52YWx1ZS50ZW1wbGF0ZSA9PT0gdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUudXBkYXRlKHZhbHVlLnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgcHJvcGFnYXRlIHRoZSB0ZW1wbGF0ZSBwcm9jZXNzb3IgZnJvbSB0aGUgVGVtcGxhdGVSZXN1bHRcbiAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgdXNlIGl0cyBzeW50YXggZXh0ZW5zaW9uLCBldGMuIFRoZSB0ZW1wbGF0ZSBmYWN0b3J5IGNvbWVzXG4gICAgICAgICAgICAvLyBmcm9tIHRoZSByZW5kZXIgZnVuY3Rpb24gb3B0aW9ucyBzbyB0aGF0IGl0IGNhbiBjb250cm9sIHRlbXBsYXRlXG4gICAgICAgICAgICAvLyBjYWNoaW5nIGFuZCBwcmVwcm9jZXNzaW5nLlxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgVGVtcGxhdGVJbnN0YW5jZSh0ZW1wbGF0ZSwgdmFsdWUucHJvY2Vzc29yLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBpbnN0YW5jZS5fY2xvbmUoKTtcbiAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSh2YWx1ZS52YWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy5fX2NvbW1pdE5vZGUoZnJhZ21lbnQpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9fY29tbWl0SXRlcmFibGUodmFsdWUpIHtcbiAgICAgICAgLy8gRm9yIGFuIEl0ZXJhYmxlLCB3ZSBjcmVhdGUgYSBuZXcgSW5zdGFuY2VQYXJ0IHBlciBpdGVtLCB0aGVuIHNldCBpdHNcbiAgICAgICAgLy8gdmFsdWUgdG8gdGhlIGl0ZW0uIFRoaXMgaXMgYSBsaXR0bGUgYml0IG9mIG92ZXJoZWFkIGZvciBldmVyeSBpdGVtIGluXG4gICAgICAgIC8vIGFuIEl0ZXJhYmxlLCBidXQgaXQgbGV0cyB1cyByZWN1cnNlIGVhc2lseSBhbmQgZWZmaWNpZW50bHkgdXBkYXRlIEFycmF5c1xuICAgICAgICAvLyBvZiBUZW1wbGF0ZVJlc3VsdHMgdGhhdCB3aWxsIGJlIGNvbW1vbmx5IHJldHVybmVkIGZyb20gZXhwcmVzc2lvbnMgbGlrZTpcbiAgICAgICAgLy8gYXJyYXkubWFwKChpKSA9PiBodG1sYCR7aX1gKSwgYnkgcmV1c2luZyBleGlzdGluZyBUZW1wbGF0ZUluc3RhbmNlcy5cbiAgICAgICAgLy8gSWYgX3ZhbHVlIGlzIGFuIGFycmF5LCB0aGVuIHRoZSBwcmV2aW91cyByZW5kZXIgd2FzIG9mIGFuXG4gICAgICAgIC8vIGl0ZXJhYmxlIGFuZCBfdmFsdWUgd2lsbCBjb250YWluIHRoZSBOb2RlUGFydHMgZnJvbSB0aGUgcHJldmlvdXNcbiAgICAgICAgLy8gcmVuZGVyLiBJZiBfdmFsdWUgaXMgbm90IGFuIGFycmF5LCBjbGVhciB0aGlzIHBhcnQgYW5kIG1ha2UgYSBuZXdcbiAgICAgICAgLy8gYXJyYXkgZm9yIE5vZGVQYXJ0cy5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gW107XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTGV0cyB1cyBrZWVwIHRyYWNrIG9mIGhvdyBtYW55IGl0ZW1zIHdlIHN0YW1wZWQgc28gd2UgY2FuIGNsZWFyIGxlZnRvdmVyXG4gICAgICAgIC8vIGl0ZW1zIGZyb20gYSBwcmV2aW91cyByZW5kZXJcbiAgICAgICAgY29uc3QgaXRlbVBhcnRzID0gdGhpcy52YWx1ZTtcbiAgICAgICAgbGV0IHBhcnRJbmRleCA9IDA7XG4gICAgICAgIGxldCBpdGVtUGFydDtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBUcnkgdG8gcmV1c2UgYW4gZXhpc3RpbmcgcGFydFxuICAgICAgICAgICAgaXRlbVBhcnQgPSBpdGVtUGFydHNbcGFydEluZGV4XTtcbiAgICAgICAgICAgIC8vIElmIG5vIGV4aXN0aW5nIHBhcnQsIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgICAgICAgIGlmIChpdGVtUGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaXRlbVBhcnQgPSBuZXcgTm9kZVBhcnQodGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpdGVtUGFydHMucHVzaChpdGVtUGFydCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtUGFydC5hcHBlbmRJbnRvUGFydCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1QYXJ0Lmluc2VydEFmdGVyUGFydChpdGVtUGFydHNbcGFydEluZGV4IC0gMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW1QYXJ0LnNldFZhbHVlKGl0ZW0pO1xuICAgICAgICAgICAgaXRlbVBhcnQuY29tbWl0KCk7XG4gICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydEluZGV4IDwgaXRlbVBhcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gVHJ1bmNhdGUgdGhlIHBhcnRzIGFycmF5IHNvIF92YWx1ZSByZWZsZWN0cyB0aGUgY3VycmVudCBzdGF0ZVxuICAgICAgICAgICAgaXRlbVBhcnRzLmxlbmd0aCA9IHBhcnRJbmRleDtcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoaXRlbVBhcnQgJiYgaXRlbVBhcnQuZW5kTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXIoc3RhcnROb2RlID0gdGhpcy5zdGFydE5vZGUpIHtcbiAgICAgICAgcmVtb3ZlTm9kZXModGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSwgc3RhcnROb2RlLm5leHRTaWJsaW5nLCB0aGlzLmVuZE5vZGUpO1xuICAgIH1cbn1cbi8qKlxuICogSW1wbGVtZW50cyBhIGJvb2xlYW4gYXR0cmlidXRlLCByb3VnaGx5IGFzIGRlZmluZWQgaW4gdGhlIEhUTUxcbiAqIHNwZWNpZmljYXRpb24uXG4gKlxuICogSWYgdGhlIHZhbHVlIGlzIHRydXRoeSwgdGhlbiB0aGUgYXR0cmlidXRlIGlzIHByZXNlbnQgd2l0aCBhIHZhbHVlIG9mXG4gKiAnJy4gSWYgdGhlIHZhbHVlIGlzIGZhbHNleSwgdGhlIGF0dHJpYnV0ZSBpcyByZW1vdmVkLlxuICovXG5leHBvcnQgY2xhc3MgQm9vbGVhbkF0dHJpYnV0ZVBhcnQge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHN0cmluZ3MubGVuZ3RoICE9PSAyIHx8IHN0cmluZ3NbMF0gIT09ICcnIHx8IHN0cmluZ3NbMV0gIT09ICcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb2xlYW4gYXR0cmlidXRlcyBjYW4gb25seSBjb250YWluIGEgc2luZ2xlIGV4cHJlc3Npb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMuX19wZW5kaW5nVmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9fcGVuZGluZ1ZhbHVlID09PSBub0NoYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gISF0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICAgIH1cbn1cbi8qKlxuICogU2V0cyBhdHRyaWJ1dGUgdmFsdWVzIGZvciBQcm9wZXJ0eVBhcnRzLCBzbyB0aGF0IHRoZSB2YWx1ZSBpcyBvbmx5IHNldCBvbmNlXG4gKiBldmVuIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBwYXJ0cyBmb3IgYSBwcm9wZXJ0eS5cbiAqXG4gKiBJZiBhbiBleHByZXNzaW9uIGNvbnRyb2xzIHRoZSB3aG9sZSBwcm9wZXJ0eSB2YWx1ZSwgdGhlbiB0aGUgdmFsdWUgaXMgc2ltcGx5XG4gKiBhc3NpZ25lZCB0byB0aGUgcHJvcGVydHkgdW5kZXIgY29udHJvbC4gSWYgdGhlcmUgYXJlIHN0cmluZyBsaXRlcmFscyBvclxuICogbXVsdGlwbGUgZXhwcmVzc2lvbnMsIHRoZW4gdGhlIHN0cmluZ3MgYXJlIGV4cHJlc3Npb25zIGFyZSBpbnRlcnBvbGF0ZWQgaW50b1xuICogYSBzdHJpbmcgZmlyc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eUNvbW1pdHRlciBleHRlbmRzIEF0dHJpYnV0ZUNvbW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgbmFtZSwgc3RyaW5ncykge1xuICAgICAgICBzdXBlcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKTtcbiAgICAgICAgdGhpcy5zaW5nbGUgPVxuICAgICAgICAgICAgKHN0cmluZ3MubGVuZ3RoID09PSAyICYmIHN0cmluZ3NbMF0gPT09ICcnICYmIHN0cmluZ3NbMV0gPT09ICcnKTtcbiAgICB9XG4gICAgX2NyZWF0ZVBhcnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcGVydHlQYXJ0KHRoaXMpO1xuICAgIH1cbiAgICBfZ2V0VmFsdWUoKSB7XG4gICAgICAgIGlmICh0aGlzLnNpbmdsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFydHNbMF0udmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRWYWx1ZSgpO1xuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmRpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgdGhpcy5lbGVtZW50W3RoaXMubmFtZV0gPSB0aGlzLl9nZXRWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFByb3BlcnR5UGFydCBleHRlbmRzIEF0dHJpYnV0ZVBhcnQge1xufVxuLy8gRGV0ZWN0IGV2ZW50IGxpc3RlbmVyIG9wdGlvbnMgc3VwcG9ydC4gSWYgdGhlIGBjYXB0dXJlYCBwcm9wZXJ0eSBpcyByZWFkXG4vLyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCwgdGhlbiBvcHRpb25zIGFyZSBzdXBwb3J0ZWQuIElmIG5vdCwgdGhlbiB0aGUgdGhpcmRcbi8vIGFyZ3VtZW50IHRvIGFkZC9yZW1vdmVFdmVudExpc3RlbmVyIGlzIGludGVycHJldGVkIGFzIHRoZSBib29sZWFuIGNhcHR1cmVcbi8vIHZhbHVlIHNvIHdlIHNob3VsZCBvbmx5IHBhc3MgdGhlIGBjYXB0dXJlYCBwcm9wZXJ0eS5cbmxldCBldmVudE9wdGlvbnNTdXBwb3J0ZWQgPSBmYWxzZTtcbi8vIFdyYXAgaW50byBhbiBJSUZFIGJlY2F1c2UgTVMgRWRnZSA8PSB2NDEgZG9lcyBub3Qgc3VwcG9ydCBoYXZpbmcgdHJ5L2NhdGNoXG4vLyBibG9ja3MgcmlnaHQgaW50byB0aGUgYm9keSBvZiBhIG1vZHVsZVxuKCgpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgZ2V0IGNhcHR1cmUoKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRPcHRpb25zU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgfVxuICAgIGNhdGNoIChfZSkge1xuICAgICAgICAvLyBldmVudCBvcHRpb25zIG5vdCBzdXBwb3J0ZWRcbiAgICB9XG59KSgpO1xuZXhwb3J0IGNsYXNzIEV2ZW50UGFydCB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgZXZlbnROYW1lLCBldmVudENvbnRleHQpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5ldmVudE5hbWUgPSBldmVudE5hbWU7XG4gICAgICAgIHRoaXMuZXZlbnRDb250ZXh0ID0gZXZlbnRDb250ZXh0O1xuICAgICAgICB0aGlzLl9fYm91bmRIYW5kbGVFdmVudCA9IChlKSA9PiB0aGlzLmhhbmRsZUV2ZW50KGUpO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9fcGVuZGluZ1ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMuX19wZW5kaW5nVmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9fcGVuZGluZ1ZhbHVlID09PSBub0NoYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0xpc3RlbmVyID0gdGhpcy5fX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgY29uc3Qgb2xkTGlzdGVuZXIgPSB0aGlzLnZhbHVlO1xuICAgICAgICBjb25zdCBzaG91bGRSZW1vdmVMaXN0ZW5lciA9IG5ld0xpc3RlbmVyID09IG51bGwgfHxcbiAgICAgICAgICAgIG9sZExpc3RlbmVyICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAobmV3TGlzdGVuZXIuY2FwdHVyZSAhPT0gb2xkTGlzdGVuZXIuY2FwdHVyZSB8fFxuICAgICAgICAgICAgICAgICAgICBuZXdMaXN0ZW5lci5vbmNlICE9PSBvbGRMaXN0ZW5lci5vbmNlIHx8XG4gICAgICAgICAgICAgICAgICAgIG5ld0xpc3RlbmVyLnBhc3NpdmUgIT09IG9sZExpc3RlbmVyLnBhc3NpdmUpO1xuICAgICAgICBjb25zdCBzaG91bGRBZGRMaXN0ZW5lciA9IG5ld0xpc3RlbmVyICE9IG51bGwgJiYgKG9sZExpc3RlbmVyID09IG51bGwgfHwgc2hvdWxkUmVtb3ZlTGlzdGVuZXIpO1xuICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCB0aGlzLl9fYm91bmRIYW5kbGVFdmVudCwgdGhpcy5fX29wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRBZGRMaXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5fX29wdGlvbnMgPSBnZXRPcHRpb25zKG5ld0xpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCB0aGlzLl9fYm91bmRIYW5kbGVFdmVudCwgdGhpcy5fX29wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWUgPSBuZXdMaXN0ZW5lcjtcbiAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICAgIH1cbiAgICBoYW5kbGVFdmVudChldmVudCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUuY2FsbCh0aGlzLmV2ZW50Q29udGV4dCB8fCB0aGlzLmVsZW1lbnQsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUuaGFuZGxlRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gV2UgY29weSBvcHRpb25zIGJlY2F1c2Ugb2YgdGhlIGluY29uc2lzdGVudCBiZWhhdmlvciBvZiBicm93c2VycyB3aGVuIHJlYWRpbmdcbi8vIHRoZSB0aGlyZCBhcmd1bWVudCBvZiBhZGQvcmVtb3ZlRXZlbnRMaXN0ZW5lci4gSUUxMSBkb2Vzbid0IHN1cHBvcnQgb3B0aW9uc1xuLy8gYXQgYWxsLiBDaHJvbWUgNDEgb25seSByZWFkcyBgY2FwdHVyZWAgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIG9iamVjdC5cbmNvbnN0IGdldE9wdGlvbnMgPSAobykgPT4gbyAmJlxuICAgIChldmVudE9wdGlvbnNTdXBwb3J0ZWQgP1xuICAgICAgICB7IGNhcHR1cmU6IG8uY2FwdHVyZSwgcGFzc2l2ZTogby5wYXNzaXZlLCBvbmNlOiBvLm9uY2UgfSA6XG4gICAgICAgIG8uY2FwdHVyZSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5pbXBvcnQgeyBtYXJrZXIsIFRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG4vKipcbiAqIFRoZSBkZWZhdWx0IFRlbXBsYXRlRmFjdG9yeSB3aGljaCBjYWNoZXMgVGVtcGxhdGVzIGtleWVkIG9uXG4gKiByZXN1bHQudHlwZSBhbmQgcmVzdWx0LnN0cmluZ3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZUZhY3RvcnkocmVzdWx0KSB7XG4gICAgbGV0IHRlbXBsYXRlQ2FjaGUgPSB0ZW1wbGF0ZUNhY2hlcy5nZXQocmVzdWx0LnR5cGUpO1xuICAgIGlmICh0ZW1wbGF0ZUNhY2hlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGVtcGxhdGVDYWNoZSA9IHtcbiAgICAgICAgICAgIHN0cmluZ3NBcnJheTogbmV3IFdlYWtNYXAoKSxcbiAgICAgICAgICAgIGtleVN0cmluZzogbmV3IE1hcCgpXG4gICAgICAgIH07XG4gICAgICAgIHRlbXBsYXRlQ2FjaGVzLnNldChyZXN1bHQudHlwZSwgdGVtcGxhdGVDYWNoZSk7XG4gICAgfVxuICAgIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LmdldChyZXN1bHQuc3RyaW5ncyk7XG4gICAgaWYgKHRlbXBsYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgVGVtcGxhdGVTdHJpbmdzQXJyYXkgaXMgbmV3LCBnZW5lcmF0ZSBhIGtleSBmcm9tIHRoZSBzdHJpbmdzXG4gICAgLy8gVGhpcyBrZXkgaXMgc2hhcmVkIGJldHdlZW4gYWxsIHRlbXBsYXRlcyB3aXRoIGlkZW50aWNhbCBjb250ZW50XG4gICAgY29uc3Qga2V5ID0gcmVzdWx0LnN0cmluZ3Muam9pbihtYXJrZXIpO1xuICAgIC8vIENoZWNrIGlmIHdlIGFscmVhZHkgaGF2ZSBhIFRlbXBsYXRlIGZvciB0aGlzIGtleVxuICAgIHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5rZXlTdHJpbmcuZ2V0KGtleSk7XG4gICAgaWYgKHRlbXBsYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBub3Qgc2VlbiB0aGlzIGtleSBiZWZvcmUsIGNyZWF0ZSBhIG5ldyBUZW1wbGF0ZVxuICAgICAgICB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShyZXN1bHQsIHJlc3VsdC5nZXRUZW1wbGF0ZUVsZW1lbnQoKSk7XG4gICAgICAgIC8vIENhY2hlIHRoZSBUZW1wbGF0ZSBmb3IgdGhpcyBrZXlcbiAgICAgICAgdGVtcGxhdGVDYWNoZS5rZXlTdHJpbmcuc2V0KGtleSwgdGVtcGxhdGUpO1xuICAgIH1cbiAgICAvLyBDYWNoZSBhbGwgZnV0dXJlIHF1ZXJpZXMgZm9yIHRoaXMgVGVtcGxhdGVTdHJpbmdzQXJyYXlcbiAgICB0ZW1wbGF0ZUNhY2hlLnN0cmluZ3NBcnJheS5zZXQocmVzdWx0LnN0cmluZ3MsIHRlbXBsYXRlKTtcbiAgICByZXR1cm4gdGVtcGxhdGU7XG59XG5leHBvcnQgY29uc3QgdGVtcGxhdGVDYWNoZXMgPSBuZXcgTWFwKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS1mYWN0b3J5LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbi8qKlxuICogQG1vZHVsZSBsaXQtaHRtbFxuICovXG5pbXBvcnQgeyByZW1vdmVOb2RlcyB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IE5vZGVQYXJ0IH0gZnJvbSAnLi9wYXJ0cy5qcyc7XG5pbXBvcnQgeyB0ZW1wbGF0ZUZhY3RvcnkgfSBmcm9tICcuL3RlbXBsYXRlLWZhY3RvcnkuanMnO1xuZXhwb3J0IGNvbnN0IHBhcnRzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogUmVuZGVycyBhIHRlbXBsYXRlIHJlc3VsdCBvciBvdGhlciB2YWx1ZSB0byBhIGNvbnRhaW5lci5cbiAqXG4gKiBUbyB1cGRhdGUgYSBjb250YWluZXIgd2l0aCBuZXcgdmFsdWVzLCByZWV2YWx1YXRlIHRoZSB0ZW1wbGF0ZSBsaXRlcmFsIGFuZFxuICogY2FsbCBgcmVuZGVyYCB3aXRoIHRoZSBuZXcgcmVzdWx0LlxuICpcbiAqIEBwYXJhbSByZXN1bHQgQW55IHZhbHVlIHJlbmRlcmFibGUgYnkgTm9kZVBhcnQgLSB0eXBpY2FsbHkgYSBUZW1wbGF0ZVJlc3VsdFxuICogICAgIGNyZWF0ZWQgYnkgZXZhbHVhdGluZyBhIHRlbXBsYXRlIHRhZyBsaWtlIGBodG1sYCBvciBgc3ZnYC5cbiAqIEBwYXJhbSBjb250YWluZXIgQSBET00gcGFyZW50IHRvIHJlbmRlciB0by4gVGhlIGVudGlyZSBjb250ZW50cyBhcmUgZWl0aGVyXG4gKiAgICAgcmVwbGFjZWQsIG9yIGVmZmljaWVudGx5IHVwZGF0ZWQgaWYgdGhlIHNhbWUgcmVzdWx0IHR5cGUgd2FzIHByZXZpb3VzXG4gKiAgICAgcmVuZGVyZWQgdGhlcmUuXG4gKiBAcGFyYW0gb3B0aW9ucyBSZW5kZXJPcHRpb25zIGZvciB0aGUgZW50aXJlIHJlbmRlciB0cmVlIHJlbmRlcmVkIHRvIHRoaXNcbiAqICAgICBjb250YWluZXIuIFJlbmRlciBvcHRpb25zIG11c3QgKm5vdCogY2hhbmdlIGJldHdlZW4gcmVuZGVycyB0byB0aGUgc2FtZVxuICogICAgIGNvbnRhaW5lciwgYXMgdGhvc2UgY2hhbmdlcyB3aWxsIG5vdCBlZmZlY3QgcHJldmlvdXNseSByZW5kZXJlZCBET00uXG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXIgPSAocmVzdWx0LCBjb250YWluZXIsIG9wdGlvbnMpID0+IHtcbiAgICBsZXQgcGFydCA9IHBhcnRzLmdldChjb250YWluZXIpO1xuICAgIGlmIChwYXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVtb3ZlTm9kZXMoY29udGFpbmVyLCBjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIHBhcnRzLnNldChjb250YWluZXIsIHBhcnQgPSBuZXcgTm9kZVBhcnQoT2JqZWN0LmFzc2lnbih7IHRlbXBsYXRlRmFjdG9yeSB9LCBvcHRpb25zKSkpO1xuICAgICAgICBwYXJ0LmFwcGVuZEludG8oY29udGFpbmVyKTtcbiAgICB9XG4gICAgcGFydC5zZXRWYWx1ZShyZXN1bHQpO1xuICAgIHBhcnQuY29tbWl0KCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuZGVyLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IEF0dHJpYnV0ZUNvbW1pdHRlciwgQm9vbGVhbkF0dHJpYnV0ZVBhcnQsIEV2ZW50UGFydCwgTm9kZVBhcnQsIFByb3BlcnR5Q29tbWl0dGVyIH0gZnJvbSAnLi9wYXJ0cy5qcyc7XG4vKipcbiAqIENyZWF0ZXMgUGFydHMgd2hlbiBhIHRlbXBsYXRlIGlzIGluc3RhbnRpYXRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHBhcnRzIGZvciBhbiBhdHRyaWJ1dGUtcG9zaXRpb24gYmluZGluZywgZ2l2ZW4gdGhlIGV2ZW50LCBhdHRyaWJ1dGVcbiAgICAgKiBuYW1lLCBhbmQgc3RyaW5nIGxpdGVyYWxzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgY29udGFpbmluZyB0aGUgYmluZGluZ1xuICAgICAqIEBwYXJhbSBuYW1lICBUaGUgYXR0cmlidXRlIG5hbWVcbiAgICAgKiBAcGFyYW0gc3RyaW5ncyBUaGUgc3RyaW5nIGxpdGVyYWxzLiBUaGVyZSBhcmUgYWx3YXlzIGF0IGxlYXN0IHR3byBzdHJpbmdzLFxuICAgICAqICAgZXZlbnQgZm9yIGZ1bGx5LWNvbnRyb2xsZWQgYmluZGluZ3Mgd2l0aCBhIHNpbmdsZSBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIGhhbmRsZUF0dHJpYnV0ZUV4cHJlc3Npb25zKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gbmFtZVswXTtcbiAgICAgICAgaWYgKHByZWZpeCA9PT0gJy4nKSB7XG4gICAgICAgICAgICBjb25zdCBjb21taXR0ZXIgPSBuZXcgUHJvcGVydHlDb21taXR0ZXIoZWxlbWVudCwgbmFtZS5zbGljZSgxKSwgc3RyaW5ncyk7XG4gICAgICAgICAgICByZXR1cm4gY29tbWl0dGVyLnBhcnRzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVmaXggPT09ICdAJykge1xuICAgICAgICAgICAgcmV0dXJuIFtuZXcgRXZlbnRQYXJ0KGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIG9wdGlvbnMuZXZlbnRDb250ZXh0KV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWZpeCA9PT0gJz8nKSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBCb29sZWFuQXR0cmlidXRlUGFydChlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBzdHJpbmdzKV07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tbWl0dGVyID0gbmV3IEF0dHJpYnV0ZUNvbW1pdHRlcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKTtcbiAgICAgICAgcmV0dXJuIGNvbW1pdHRlci5wYXJ0cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHBhcnRzIGZvciBhIHRleHQtcG9zaXRpb24gYmluZGluZy5cbiAgICAgKiBAcGFyYW0gdGVtcGxhdGVGYWN0b3J5XG4gICAgICovXG4gICAgaGFuZGxlVGV4dEV4cHJlc3Npb24ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IE5vZGVQYXJ0KG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IgPSBuZXcgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0LXRlbXBsYXRlLXByb2Nlc3Nvci5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqXG4gKiBNYWluIGxpdC1odG1sIG1vZHVsZS5cbiAqXG4gKiBNYWluIGV4cG9ydHM6XG4gKlxuICogLSAgW1todG1sXV1cbiAqIC0gIFtbc3ZnXV1cbiAqIC0gIFtbcmVuZGVyXV1cbiAqXG4gKiBAbW9kdWxlIGxpdC1odG1sXG4gKiBAcHJlZmVycmVkXG4gKi9cbi8qKlxuICogRG8gbm90IHJlbW92ZSB0aGlzIGNvbW1lbnQ7IGl0IGtlZXBzIHR5cGVkb2MgZnJvbSBtaXNwbGFjaW5nIHRoZSBtb2R1bGVcbiAqIGRvY3MuXG4gKi9cbmltcG9ydCB7IGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciB9IGZyb20gJy4vbGliL2RlZmF1bHQtdGVtcGxhdGUtcHJvY2Vzc29yLmpzJztcbmltcG9ydCB7IFNWR1RlbXBsYXRlUmVzdWx0LCBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJy4vbGliL3RlbXBsYXRlLXJlc3VsdC5qcyc7XG5leHBvcnQgeyBEZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciB9IGZyb20gJy4vbGliL2RlZmF1bHQtdGVtcGxhdGUtcHJvY2Vzc29yLmpzJztcbmV4cG9ydCB7IGRpcmVjdGl2ZSwgaXNEaXJlY3RpdmUgfSBmcm9tICcuL2xpYi9kaXJlY3RpdmUuanMnO1xuLy8gVE9ETyhqdXN0aW5mYWduYW5pKTogcmVtb3ZlIGxpbmUgd2hlbiB3ZSBnZXQgTm9kZVBhcnQgbW92aW5nIG1ldGhvZHNcbmV4cG9ydCB7IHJlbW92ZU5vZGVzLCByZXBhcmVudE5vZGVzIH0gZnJvbSAnLi9saWIvZG9tLmpzJztcbmV4cG9ydCB7IG5vQ2hhbmdlLCBub3RoaW5nIH0gZnJvbSAnLi9saWIvcGFydC5qcyc7XG5leHBvcnQgeyBBdHRyaWJ1dGVDb21taXR0ZXIsIEF0dHJpYnV0ZVBhcnQsIEJvb2xlYW5BdHRyaWJ1dGVQYXJ0LCBFdmVudFBhcnQsIGlzSXRlcmFibGUsIGlzUHJpbWl0aXZlLCBOb2RlUGFydCwgUHJvcGVydHlDb21taXR0ZXIsIFByb3BlcnR5UGFydCB9IGZyb20gJy4vbGliL3BhcnRzLmpzJztcbmV4cG9ydCB7IHBhcnRzLCByZW5kZXIgfSBmcm9tICcuL2xpYi9yZW5kZXIuanMnO1xuZXhwb3J0IHsgdGVtcGxhdGVDYWNoZXMsIHRlbXBsYXRlRmFjdG9yeSB9IGZyb20gJy4vbGliL3RlbXBsYXRlLWZhY3RvcnkuanMnO1xuZXhwb3J0IHsgVGVtcGxhdGVJbnN0YW5jZSB9IGZyb20gJy4vbGliL3RlbXBsYXRlLWluc3RhbmNlLmpzJztcbmV4cG9ydCB7IFNWR1RlbXBsYXRlUmVzdWx0LCBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJy4vbGliL3RlbXBsYXRlLXJlc3VsdC5qcyc7XG5leHBvcnQgeyBjcmVhdGVNYXJrZXIsIGlzVGVtcGxhdGVQYXJ0QWN0aXZlLCBUZW1wbGF0ZSB9IGZyb20gJy4vbGliL3RlbXBsYXRlLmpzJztcbi8vIElNUE9SVEFOVDogZG8gbm90IGNoYW5nZSB0aGUgcHJvcGVydHkgbmFtZSBvciB0aGUgYXNzaWdubWVudCBleHByZXNzaW9uLlxuLy8gVGhpcyBsaW5lIHdpbGwgYmUgdXNlZCBpbiByZWdleGVzIHRvIHNlYXJjaCBmb3IgbGl0LWh0bWwgdXNhZ2UuXG4vLyBUT0RPKGp1c3RpbmZhZ25hbmkpOiBpbmplY3QgdmVyc2lvbiBudW1iZXIgYXQgYnVpbGQgdGltZVxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgKHdpbmRvd1snbGl0SHRtbFZlcnNpb25zJ10gfHwgKHdpbmRvd1snbGl0SHRtbFZlcnNpb25zJ10gPSBbXSkpLnB1c2goJzEuMi4xJyk7XG59XG4vKipcbiAqIEludGVycHJldHMgYSB0ZW1wbGF0ZSBsaXRlcmFsIGFzIGFuIEhUTUwgdGVtcGxhdGUgdGhhdCBjYW4gZWZmaWNpZW50bHlcbiAqIHJlbmRlciB0byBhbmQgdXBkYXRlIGEgY29udGFpbmVyLlxuICovXG5leHBvcnQgY29uc3QgaHRtbCA9IChzdHJpbmdzLCAuLi52YWx1ZXMpID0+IG5ldyBUZW1wbGF0ZVJlc3VsdChzdHJpbmdzLCB2YWx1ZXMsICdodG1sJywgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yKTtcbi8qKlxuICogSW50ZXJwcmV0cyBhIHRlbXBsYXRlIGxpdGVyYWwgYXMgYW4gU1ZHIHRlbXBsYXRlIHRoYXQgY2FuIGVmZmljaWVudGx5XG4gKiByZW5kZXIgdG8gYW5kIHVwZGF0ZSBhIGNvbnRhaW5lci5cbiAqL1xuZXhwb3J0IGNvbnN0IHN2ZyA9IChzdHJpbmdzLCAuLi52YWx1ZXMpID0+IG5ldyBTVkdUZW1wbGF0ZVJlc3VsdChzdHJpbmdzLCB2YWx1ZXMsICdzdmcnLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWh0bWwuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuLyoqXG4gKiBNb2R1bGUgdG8gYWRkIHNoYWR5IERPTS9zaGFkeSBDU1MgcG9seWZpbGwgc3VwcG9ydCB0byBsaXQtaHRtbCB0ZW1wbGF0ZVxuICogcmVuZGVyaW5nLiBTZWUgdGhlIFtbcmVuZGVyXV0gbWV0aG9kIGZvciBkZXRhaWxzLlxuICpcbiAqIEBtb2R1bGUgc2hhZHktcmVuZGVyXG4gKiBAcHJlZmVycmVkXG4gKi9cbi8qKlxuICogRG8gbm90IHJlbW92ZSB0aGlzIGNvbW1lbnQ7IGl0IGtlZXBzIHR5cGVkb2MgZnJvbSBtaXNwbGFjaW5nIHRoZSBtb2R1bGVcbiAqIGRvY3MuXG4gKi9cbmltcG9ydCB7IHJlbW92ZU5vZGVzIH0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHsgaW5zZXJ0Tm9kZUludG9UZW1wbGF0ZSwgcmVtb3ZlTm9kZXNGcm9tVGVtcGxhdGUgfSBmcm9tICcuL21vZGlmeS10ZW1wbGF0ZS5qcyc7XG5pbXBvcnQgeyBwYXJ0cywgcmVuZGVyIGFzIGxpdFJlbmRlciB9IGZyb20gJy4vcmVuZGVyLmpzJztcbmltcG9ydCB7IHRlbXBsYXRlQ2FjaGVzIH0gZnJvbSAnLi90ZW1wbGF0ZS1mYWN0b3J5LmpzJztcbmltcG9ydCB7IFRlbXBsYXRlSW5zdGFuY2UgfSBmcm9tICcuL3RlbXBsYXRlLWluc3RhbmNlLmpzJztcbmltcG9ydCB7IG1hcmtlciwgVGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbmV4cG9ydCB7IGh0bWwsIHN2ZywgVGVtcGxhdGVSZXN1bHQgfSBmcm9tICcuLi9saXQtaHRtbC5qcyc7XG4vLyBHZXQgYSBrZXkgdG8gbG9va3VwIGluIGB0ZW1wbGF0ZUNhY2hlc2AuXG5jb25zdCBnZXRUZW1wbGF0ZUNhY2hlS2V5ID0gKHR5cGUsIHNjb3BlTmFtZSkgPT4gYCR7dHlwZX0tLSR7c2NvcGVOYW1lfWA7XG5sZXQgY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbiA9IHRydWU7XG5pZiAodHlwZW9mIHdpbmRvdy5TaGFkeUNTUyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uID0gZmFsc2U7XG59XG5lbHNlIGlmICh0eXBlb2Ygd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZURvbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLndhcm4oYEluY29tcGF0aWJsZSBTaGFkeUNTUyB2ZXJzaW9uIGRldGVjdGVkLiBgICtcbiAgICAgICAgYFBsZWFzZSB1cGRhdGUgdG8gYXQgbGVhc3QgQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzQDIuMC4yIGFuZCBgICtcbiAgICAgICAgYEB3ZWJjb21wb25lbnRzL3NoYWR5Y3NzQDEuMy4xLmApO1xuICAgIGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24gPSBmYWxzZTtcbn1cbi8qKlxuICogVGVtcGxhdGUgZmFjdG9yeSB3aGljaCBzY29wZXMgdGVtcGxhdGUgRE9NIHVzaW5nIFNoYWR5Q1NTLlxuICogQHBhcmFtIHNjb3BlTmFtZSB7c3RyaW5nfVxuICovXG5jb25zdCBzaGFkeVRlbXBsYXRlRmFjdG9yeSA9IChzY29wZU5hbWUpID0+IChyZXN1bHQpID0+IHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGdldFRlbXBsYXRlQ2FjaGVLZXkocmVzdWx0LnR5cGUsIHNjb3BlTmFtZSk7XG4gICAgbGV0IHRlbXBsYXRlQ2FjaGUgPSB0ZW1wbGF0ZUNhY2hlcy5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICh0ZW1wbGF0ZUNhY2hlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGVtcGxhdGVDYWNoZSA9IHtcbiAgICAgICAgICAgIHN0cmluZ3NBcnJheTogbmV3IFdlYWtNYXAoKSxcbiAgICAgICAgICAgIGtleVN0cmluZzogbmV3IE1hcCgpXG4gICAgICAgIH07XG4gICAgICAgIHRlbXBsYXRlQ2FjaGVzLnNldChjYWNoZUtleSwgdGVtcGxhdGVDYWNoZSk7XG4gICAgfVxuICAgIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LmdldChyZXN1bHQuc3RyaW5ncyk7XG4gICAgaWYgKHRlbXBsYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cbiAgICBjb25zdCBrZXkgPSByZXN1bHQuc3RyaW5ncy5qb2luKG1hcmtlcik7XG4gICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmtleVN0cmluZy5nZXQoa2V5KTtcbiAgICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gcmVzdWx0LmdldFRlbXBsYXRlRWxlbWVudCgpO1xuICAgICAgICBpZiAoY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbikge1xuICAgICAgICAgICAgd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZURvbShlbGVtZW50LCBzY29wZU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKHJlc3VsdCwgZWxlbWVudCk7XG4gICAgICAgIHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLnNldChrZXksIHRlbXBsYXRlKTtcbiAgICB9XG4gICAgdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuc2V0KHJlc3VsdC5zdHJpbmdzLCB0ZW1wbGF0ZSk7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xufTtcbmNvbnN0IFRFTVBMQVRFX1RZUEVTID0gWydodG1sJywgJ3N2ZyddO1xuLyoqXG4gKiBSZW1vdmVzIGFsbCBzdHlsZSBlbGVtZW50cyBmcm9tIFRlbXBsYXRlcyBmb3IgdGhlIGdpdmVuIHNjb3BlTmFtZS5cbiAqL1xuY29uc3QgcmVtb3ZlU3R5bGVzRnJvbUxpdFRlbXBsYXRlcyA9IChzY29wZU5hbWUpID0+IHtcbiAgICBURU1QTEFURV9UWVBFUy5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlcyA9IHRlbXBsYXRlQ2FjaGVzLmdldChnZXRUZW1wbGF0ZUNhY2hlS2V5KHR5cGUsIHNjb3BlTmFtZSkpO1xuICAgICAgICBpZiAodGVtcGxhdGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlcy5rZXlTdHJpbmcuZm9yRWFjaCgodGVtcGxhdGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVsZW1lbnQ6IHsgY29udGVudCB9IH0gPSB0ZW1wbGF0ZTtcbiAgICAgICAgICAgICAgICAvLyBJRSAxMSBkb2Vzbid0IHN1cHBvcnQgdGhlIGl0ZXJhYmxlIHBhcmFtIFNldCBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKSkuZm9yRWFjaCgocykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXMuYWRkKHMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlbW92ZU5vZGVzRnJvbVRlbXBsYXRlKHRlbXBsYXRlLCBzdHlsZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5jb25zdCBzaGFkeVJlbmRlclNldCA9IG5ldyBTZXQoKTtcbi8qKlxuICogRm9yIHRoZSBnaXZlbiBzY29wZSBuYW1lLCBlbnN1cmVzIHRoYXQgU2hhZHlDU1Mgc3R5bGUgc2NvcGluZyBpcyBwZXJmb3JtZWQuXG4gKiBUaGlzIGlzIGRvbmUganVzdCBvbmNlIHBlciBzY29wZSBuYW1lIHNvIHRoZSBmcmFnbWVudCBhbmQgdGVtcGxhdGUgY2Fubm90XG4gKiBiZSBtb2RpZmllZC5cbiAqICgxKSBleHRyYWN0cyBzdHlsZXMgZnJvbSB0aGUgcmVuZGVyZWQgZnJhZ21lbnQgYW5kIGhhbmRzIHRoZW0gdG8gU2hhZHlDU1NcbiAqIHRvIGJlIHNjb3BlZCBhbmQgYXBwZW5kZWQgdG8gdGhlIGRvY3VtZW50XG4gKiAoMikgcmVtb3ZlcyBzdHlsZSBlbGVtZW50cyBmcm9tIGFsbCBsaXQtaHRtbCBUZW1wbGF0ZXMgZm9yIHRoaXMgc2NvcGUgbmFtZS5cbiAqXG4gKiBOb3RlLCA8c3R5bGU+IGVsZW1lbnRzIGNhbiBvbmx5IGJlIHBsYWNlZCBpbnRvIHRlbXBsYXRlcyBmb3IgdGhlXG4gKiBpbml0aWFsIHJlbmRlcmluZyBvZiB0aGUgc2NvcGUuIElmIDxzdHlsZT4gZWxlbWVudHMgYXJlIGluY2x1ZGVkIGluIHRlbXBsYXRlc1xuICogZHluYW1pY2FsbHkgcmVuZGVyZWQgdG8gdGhlIHNjb3BlIChhZnRlciB0aGUgZmlyc3Qgc2NvcGUgcmVuZGVyKSwgdGhleSB3aWxsXG4gKiBub3QgYmUgc2NvcGVkIGFuZCB0aGUgPHN0eWxlPiB3aWxsIGJlIGxlZnQgaW4gdGhlIHRlbXBsYXRlIGFuZCByZW5kZXJlZFxuICogb3V0cHV0LlxuICovXG5jb25zdCBwcmVwYXJlVGVtcGxhdGVTdHlsZXMgPSAoc2NvcGVOYW1lLCByZW5kZXJlZERPTSwgdGVtcGxhdGUpID0+IHtcbiAgICBzaGFkeVJlbmRlclNldC5hZGQoc2NvcGVOYW1lKTtcbiAgICAvLyBJZiBgcmVuZGVyZWRET01gIGlzIHN0YW1wZWQgZnJvbSBhIFRlbXBsYXRlLCB0aGVuIHdlIG5lZWQgdG8gZWRpdCB0aGF0XG4gICAgLy8gVGVtcGxhdGUncyB1bmRlcmx5aW5nIHRlbXBsYXRlIGVsZW1lbnQuIE90aGVyd2lzZSwgd2UgY3JlYXRlIG9uZSBoZXJlXG4gICAgLy8gdG8gZ2l2ZSB0byBTaGFkeUNTUywgd2hpY2ggc3RpbGwgcmVxdWlyZXMgb25lIHdoaWxlIHNjb3BpbmcuXG4gICAgY29uc3QgdGVtcGxhdGVFbGVtZW50ID0gISF0ZW1wbGF0ZSA/IHRlbXBsYXRlLmVsZW1lbnQgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgIC8vIE1vdmUgc3R5bGVzIG91dCBvZiByZW5kZXJlZCBET00gYW5kIHN0b3JlLlxuICAgIGNvbnN0IHN0eWxlcyA9IHJlbmRlcmVkRE9NLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJyk7XG4gICAgY29uc3QgeyBsZW5ndGggfSA9IHN0eWxlcztcbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gc3R5bGVzLCBza2lwIHVubmVjZXNzYXJ5IHdvcmtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIEVuc3VyZSBwcmVwYXJlVGVtcGxhdGVTdHlsZXMgaXMgY2FsbGVkIHRvIHN1cHBvcnQgYWRkaW5nXG4gICAgICAgIC8vIHN0eWxlcyB2aWEgYHByZXBhcmVBZG9wdGVkQ3NzVGV4dGAgc2luY2UgdGhhdCByZXF1aXJlcyB0aGF0XG4gICAgICAgIC8vIGBwcmVwYXJlVGVtcGxhdGVTdHlsZXNgIGlzIGNhbGxlZC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gU2hhZHlDU1Mgd2lsbCBvbmx5IHVwZGF0ZSBzdHlsZXMgY29udGFpbmluZyBAYXBwbHkgaW4gdGhlIHRlbXBsYXRlXG4gICAgICAgIC8vIGdpdmVuIHRvIGBwcmVwYXJlVGVtcGxhdGVTdHlsZXNgLiBJZiBubyBsaXQgVGVtcGxhdGUgd2FzIGdpdmVuLFxuICAgICAgICAvLyBTaGFkeUNTUyB3aWxsIG5vdCBiZSBhYmxlIHRvIHVwZGF0ZSB1c2VzIG9mIEBhcHBseSBpbiBhbnkgcmVsZXZhbnRcbiAgICAgICAgLy8gdGVtcGxhdGUuIEhvd2V2ZXIsIHRoaXMgaXMgbm90IGEgcHJvYmxlbSBiZWNhdXNlIHdlIG9ubHkgY3JlYXRlIHRoZVxuICAgICAgICAvLyB0ZW1wbGF0ZSBmb3IgdGhlIHB1cnBvc2Ugb2Ygc3VwcG9ydGluZyBgcHJlcGFyZUFkb3B0ZWRDc3NUZXh0YCxcbiAgICAgICAgLy8gd2hpY2ggZG9lc24ndCBzdXBwb3J0IEBhcHBseSBhdCBhbGwuXG4gICAgICAgIHdpbmRvdy5TaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVTdHlsZXModGVtcGxhdGVFbGVtZW50LCBzY29wZU5hbWUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNvbmRlbnNlZFN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAvLyBDb2xsZWN0IHN0eWxlcyBpbnRvIGEgc2luZ2xlIHN0eWxlLiBUaGlzIGhlbHBzIHVzIG1ha2Ugc3VyZSBTaGFkeUNTU1xuICAgIC8vIG1hbmlwdWxhdGlvbnMgd2lsbCBub3QgcHJldmVudCB1cyBmcm9tIGJlaW5nIGFibGUgdG8gZml4IHVwIHRlbXBsYXRlXG4gICAgLy8gcGFydCBpbmRpY2VzLlxuICAgIC8vIE5PVEU6IGNvbGxlY3Rpbmcgc3R5bGVzIGlzIGluZWZmaWNpZW50IGZvciBicm93c2VycyBidXQgU2hhZHlDU1NcbiAgICAvLyBjdXJyZW50bHkgZG9lcyB0aGlzIGFueXdheS4gV2hlbiBpdCBkb2VzIG5vdCwgdGhpcyBzaG91bGQgYmUgY2hhbmdlZC5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gc3R5bGVzW2ldO1xuICAgICAgICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbiAgICAgICAgY29uZGVuc2VkU3R5bGUudGV4dENvbnRlbnQgKz0gc3R5bGUudGV4dENvbnRlbnQ7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBzdHlsZXMgZnJvbSBuZXN0ZWQgdGVtcGxhdGVzIGluIHRoaXMgc2NvcGUuXG4gICAgcmVtb3ZlU3R5bGVzRnJvbUxpdFRlbXBsYXRlcyhzY29wZU5hbWUpO1xuICAgIC8vIEFuZCB0aGVuIHB1dCB0aGUgY29uZGVuc2VkIHN0eWxlIGludG8gdGhlIFwicm9vdFwiIHRlbXBsYXRlIHBhc3NlZCBpbiBhc1xuICAgIC8vIGB0ZW1wbGF0ZWAuXG4gICAgY29uc3QgY29udGVudCA9IHRlbXBsYXRlRWxlbWVudC5jb250ZW50O1xuICAgIGlmICghIXRlbXBsYXRlKSB7XG4gICAgICAgIGluc2VydE5vZGVJbnRvVGVtcGxhdGUodGVtcGxhdGUsIGNvbmRlbnNlZFN0eWxlLCBjb250ZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29udGVudC5pbnNlcnRCZWZvcmUoY29uZGVuc2VkU3R5bGUsIGNvbnRlbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIC8vIE5vdGUsIGl0J3MgaW1wb3J0YW50IHRoYXQgU2hhZHlDU1MgZ2V0cyB0aGUgdGVtcGxhdGUgdGhhdCBgbGl0LWh0bWxgXG4gICAgLy8gd2lsbCBhY3R1YWxseSByZW5kZXIgc28gdGhhdCBpdCBjYW4gdXBkYXRlIHRoZSBzdHlsZSBpbnNpZGUgd2hlblxuICAgIC8vIG5lZWRlZCAoZS5nLiBAYXBwbHkgbmF0aXZlIFNoYWRvdyBET00gY2FzZSkuXG4gICAgd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZVN0eWxlcyh0ZW1wbGF0ZUVsZW1lbnQsIHNjb3BlTmFtZSk7XG4gICAgY29uc3Qgc3R5bGUgPSBjb250ZW50LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJyk7XG4gICAgaWYgKHdpbmRvdy5TaGFkeUNTUy5uYXRpdmVTaGFkb3cgJiYgc3R5bGUgIT09IG51bGwpIHtcbiAgICAgICAgLy8gV2hlbiBpbiBuYXRpdmUgU2hhZG93IERPTSwgZW5zdXJlIHRoZSBzdHlsZSBjcmVhdGVkIGJ5IFNoYWR5Q1NTIGlzXG4gICAgICAgIC8vIGluY2x1ZGVkIGluIGluaXRpYWxseSByZW5kZXJlZCBvdXRwdXQgKGByZW5kZXJlZERPTWApLlxuICAgICAgICByZW5kZXJlZERPTS5pbnNlcnRCZWZvcmUoc3R5bGUuY2xvbmVOb2RlKHRydWUpLCByZW5kZXJlZERPTS5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoISF0ZW1wbGF0ZSkge1xuICAgICAgICAvLyBXaGVuIG5vIHN0eWxlIGlzIGxlZnQgaW4gdGhlIHRlbXBsYXRlLCBwYXJ0cyB3aWxsIGJlIGJyb2tlbiBhcyBhXG4gICAgICAgIC8vIHJlc3VsdC4gVG8gZml4IHRoaXMsIHdlIHB1dCBiYWNrIHRoZSBzdHlsZSBub2RlIFNoYWR5Q1NTIHJlbW92ZWRcbiAgICAgICAgLy8gYW5kIHRoZW4gdGVsbCBsaXQgdG8gcmVtb3ZlIHRoYXQgbm9kZSBmcm9tIHRoZSB0ZW1wbGF0ZS5cbiAgICAgICAgLy8gVGhlcmUgY2FuIGJlIG5vIHN0eWxlIGluIHRoZSB0ZW1wbGF0ZSBpbiAyIGNhc2VzICgxKSB3aGVuIFNoYWR5IERPTVxuICAgICAgICAvLyBpcyBpbiB1c2UsIFNoYWR5Q1NTIHJlbW92ZXMgYWxsIHN0eWxlcywgKDIpIHdoZW4gbmF0aXZlIFNoYWRvdyBET01cbiAgICAgICAgLy8gaXMgaW4gdXNlIFNoYWR5Q1NTIHJlbW92ZXMgdGhlIHN0eWxlIGlmIGl0IGNvbnRhaW5zIG5vIGNvbnRlbnQuXG4gICAgICAgIC8vIE5PVEUsIFNoYWR5Q1NTIGNyZWF0ZXMgaXRzIG93biBzdHlsZSBzbyB3ZSBjYW4gc2FmZWx5IGFkZC9yZW1vdmVcbiAgICAgICAgLy8gYGNvbmRlbnNlZFN0eWxlYCBoZXJlLlxuICAgICAgICBjb250ZW50Lmluc2VydEJlZm9yZShjb25kZW5zZWRTdHlsZSwgY29udGVudC5maXJzdENoaWxkKTtcbiAgICAgICAgY29uc3QgcmVtb3ZlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgcmVtb3Zlcy5hZGQoY29uZGVuc2VkU3R5bGUpO1xuICAgICAgICByZW1vdmVOb2Rlc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSwgcmVtb3Zlcyk7XG4gICAgfVxufTtcbi8qKlxuICogRXh0ZW5zaW9uIHRvIHRoZSBzdGFuZGFyZCBgcmVuZGVyYCBtZXRob2Qgd2hpY2ggc3VwcG9ydHMgcmVuZGVyaW5nXG4gKiB0byBTaGFkb3dSb290cyB3aGVuIHRoZSBTaGFkeURPTSAoaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvc2hhZHlkb20pXG4gKiBhbmQgU2hhZHlDU1MgKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3NoYWR5Y3NzKSBwb2x5ZmlsbHMgYXJlIHVzZWRcbiAqIG9yIHdoZW4gdGhlIHdlYmNvbXBvbmVudHNqc1xuICogKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcykgcG9seWZpbGwgaXMgdXNlZC5cbiAqXG4gKiBBZGRzIGEgYHNjb3BlTmFtZWAgb3B0aW9uIHdoaWNoIGlzIHVzZWQgdG8gc2NvcGUgZWxlbWVudCBET00gYW5kIHN0eWxlc2hlZXRzXG4gKiB3aGVuIG5hdGl2ZSBTaGFkb3dET00gaXMgdW5hdmFpbGFibGUuIFRoZSBgc2NvcGVOYW1lYCB3aWxsIGJlIGFkZGVkIHRvXG4gKiB0aGUgY2xhc3MgYXR0cmlidXRlIG9mIGFsbCByZW5kZXJlZCBET00uIEluIGFkZGl0aW9uLCBhbnkgc3R5bGUgZWxlbWVudHMgd2lsbFxuICogYmUgYXV0b21hdGljYWxseSByZS13cml0dGVuIHdpdGggdGhpcyBgc2NvcGVOYW1lYCBzZWxlY3RvciBhbmQgbW92ZWQgb3V0XG4gKiBvZiB0aGUgcmVuZGVyZWQgRE9NIGFuZCBpbnRvIHRoZSBkb2N1bWVudCBgPGhlYWQ+YC5cbiAqXG4gKiBJdCBpcyBjb21tb24gdG8gdXNlIHRoaXMgcmVuZGVyIG1ldGhvZCBpbiBjb25qdW5jdGlvbiB3aXRoIGEgY3VzdG9tIGVsZW1lbnRcbiAqIHdoaWNoIHJlbmRlcnMgYSBzaGFkb3dSb290LiBXaGVuIHRoaXMgaXMgZG9uZSwgdHlwaWNhbGx5IHRoZSBlbGVtZW50J3NcbiAqIGBsb2NhbE5hbWVgIHNob3VsZCBiZSB1c2VkIGFzIHRoZSBgc2NvcGVOYW1lYC5cbiAqXG4gKiBJbiBhZGRpdGlvbiB0byBET00gc2NvcGluZywgU2hhZHlDU1MgYWxzbyBzdXBwb3J0cyBhIGJhc2ljIHNoaW0gZm9yIGNzc1xuICogY3VzdG9tIHByb3BlcnRpZXMgKG5lZWRlZCBvbmx5IG9uIG9sZGVyIGJyb3dzZXJzIGxpa2UgSUUxMSkgYW5kIGEgc2hpbSBmb3JcbiAqIGEgZGVwcmVjYXRlZCBmZWF0dXJlIGNhbGxlZCBgQGFwcGx5YCB0aGF0IHN1cHBvcnRzIGFwcGx5aW5nIGEgc2V0IG9mIGNzc1xuICogY3VzdG9tIHByb3BlcnRpZXMgdG8gYSBnaXZlbiBsb2NhdGlvbi5cbiAqXG4gKiBVc2FnZSBjb25zaWRlcmF0aW9uczpcbiAqXG4gKiAqIFBhcnQgdmFsdWVzIGluIGA8c3R5bGU+YCBlbGVtZW50cyBhcmUgb25seSBhcHBsaWVkIHRoZSBmaXJzdCB0aW1lIGEgZ2l2ZW5cbiAqIGBzY29wZU5hbWVgIHJlbmRlcnMuIFN1YnNlcXVlbnQgY2hhbmdlcyB0byBwYXJ0cyBpbiBzdHlsZSBlbGVtZW50cyB3aWxsIGhhdmVcbiAqIG5vIGVmZmVjdC4gQmVjYXVzZSBvZiB0aGlzLCBwYXJ0cyBpbiBzdHlsZSBlbGVtZW50cyBzaG91bGQgb25seSBiZSB1c2VkIGZvclxuICogdmFsdWVzIHRoYXQgd2lsbCBuZXZlciBjaGFuZ2UsIGZvciBleGFtcGxlIHBhcnRzIHRoYXQgc2V0IHNjb3BlLXdpZGUgdGhlbWVcbiAqIHZhbHVlcyBvciBwYXJ0cyB3aGljaCByZW5kZXIgc2hhcmVkIHN0eWxlIGVsZW1lbnRzLlxuICpcbiAqICogTm90ZSwgZHVlIHRvIGEgbGltaXRhdGlvbiBvZiB0aGUgU2hhZHlET00gcG9seWZpbGwsIHJlbmRlcmluZyBpbiBhXG4gKiBjdXN0b20gZWxlbWVudCdzIGBjb25zdHJ1Y3RvcmAgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCByZW5kZXJpbmcgc2hvdWxkXG4gKiBlaXRoZXIgZG9uZSBhc3luY2hyb25vdXNseSwgZm9yIGV4YW1wbGUgYXQgbWljcm90YXNrIHRpbWluZyAoZm9yIGV4YW1wbGVcbiAqIGBQcm9taXNlLnJlc29sdmUoKWApLCBvciBiZSBkZWZlcnJlZCB1bnRpbCB0aGUgZmlyc3QgdGltZSB0aGUgZWxlbWVudCdzXG4gKiBgY29ubmVjdGVkQ2FsbGJhY2tgIHJ1bnMuXG4gKlxuICogVXNhZ2UgY29uc2lkZXJhdGlvbnMgd2hlbiB1c2luZyBzaGltbWVkIGN1c3RvbSBwcm9wZXJ0aWVzIG9yIGBAYXBwbHlgOlxuICpcbiAqICogV2hlbmV2ZXIgYW55IGR5bmFtaWMgY2hhbmdlcyBhcmUgbWFkZSB3aGljaCBhZmZlY3RcbiAqIGNzcyBjdXN0b20gcHJvcGVydGllcywgYFNoYWR5Q1NTLnN0eWxlRWxlbWVudChlbGVtZW50KWAgbXVzdCBiZSBjYWxsZWRcbiAqIHRvIHVwZGF0ZSB0aGUgZWxlbWVudC4gVGhlcmUgYXJlIHR3byBjYXNlcyB3aGVuIHRoaXMgaXMgbmVlZGVkOlxuICogKDEpIHRoZSBlbGVtZW50IGlzIGNvbm5lY3RlZCB0byBhIG5ldyBwYXJlbnQsICgyKSBhIGNsYXNzIGlzIGFkZGVkIHRvIHRoZVxuICogZWxlbWVudCB0aGF0IGNhdXNlcyBpdCB0byBtYXRjaCBkaWZmZXJlbnQgY3VzdG9tIHByb3BlcnRpZXMuXG4gKiBUbyBhZGRyZXNzIHRoZSBmaXJzdCBjYXNlIHdoZW4gcmVuZGVyaW5nIGEgY3VzdG9tIGVsZW1lbnQsIGBzdHlsZUVsZW1lbnRgXG4gKiBzaG91bGQgYmUgY2FsbGVkIGluIHRoZSBlbGVtZW50J3MgYGNvbm5lY3RlZENhbGxiYWNrYC5cbiAqXG4gKiAqIFNoaW1tZWQgY3VzdG9tIHByb3BlcnRpZXMgbWF5IG9ubHkgYmUgZGVmaW5lZCBlaXRoZXIgZm9yIGFuIGVudGlyZVxuICogc2hhZG93Um9vdCAoZm9yIGV4YW1wbGUsIGluIGEgYDpob3N0YCBydWxlKSBvciB2aWEgYSBydWxlIHRoYXQgZGlyZWN0bHlcbiAqIG1hdGNoZXMgYW4gZWxlbWVudCB3aXRoIGEgc2hhZG93Um9vdC4gSW4gb3RoZXIgd29yZHMsIGluc3RlYWQgb2YgZmxvd2luZyBmcm9tXG4gKiBwYXJlbnQgdG8gY2hpbGQgYXMgZG8gbmF0aXZlIGNzcyBjdXN0b20gcHJvcGVydGllcywgc2hpbW1lZCBjdXN0b20gcHJvcGVydGllc1xuICogZmxvdyBvbmx5IGZyb20gc2hhZG93Um9vdHMgdG8gbmVzdGVkIHNoYWRvd1Jvb3RzLlxuICpcbiAqICogV2hlbiB1c2luZyBgQGFwcGx5YCBtaXhpbmcgY3NzIHNob3J0aGFuZCBwcm9wZXJ0eSBuYW1lcyB3aXRoXG4gKiBub24tc2hvcnRoYW5kIG5hbWVzIChmb3IgZXhhbXBsZSBgYm9yZGVyYCBhbmQgYGJvcmRlci13aWR0aGApIGlzIG5vdFxuICogc3VwcG9ydGVkLlxuICovXG5leHBvcnQgY29uc3QgcmVuZGVyID0gKHJlc3VsdCwgY29udGFpbmVyLCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKCFvcHRpb25zIHx8IHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCAhb3B0aW9ucy5zY29wZU5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYHNjb3BlTmFtZWAgb3B0aW9uIGlzIHJlcXVpcmVkLicpO1xuICAgIH1cbiAgICBjb25zdCBzY29wZU5hbWUgPSBvcHRpb25zLnNjb3BlTmFtZTtcbiAgICBjb25zdCBoYXNSZW5kZXJlZCA9IHBhcnRzLmhhcyhjb250YWluZXIpO1xuICAgIGNvbnN0IG5lZWRzU2NvcGluZyA9IGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24gJiZcbiAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlID09PSAxMSAvKiBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUgKi8gJiZcbiAgICAgICAgISFjb250YWluZXIuaG9zdDtcbiAgICAvLyBIYW5kbGUgZmlyc3QgcmVuZGVyIHRvIGEgc2NvcGUgc3BlY2lhbGx5Li4uXG4gICAgY29uc3QgZmlyc3RTY29wZVJlbmRlciA9IG5lZWRzU2NvcGluZyAmJiAhc2hhZHlSZW5kZXJTZXQuaGFzKHNjb3BlTmFtZSk7XG4gICAgLy8gT24gZmlyc3Qgc2NvcGUgcmVuZGVyLCByZW5kZXIgaW50byBhIGZyYWdtZW50OyB0aGlzIGNhbm5vdCBiZSBhIHNpbmdsZVxuICAgIC8vIGZyYWdtZW50IHRoYXQgaXMgcmV1c2VkIHNpbmNlIG5lc3RlZCByZW5kZXJzIGNhbiBvY2N1ciBzeW5jaHJvbm91c2x5LlxuICAgIGNvbnN0IHJlbmRlckNvbnRhaW5lciA9IGZpcnN0U2NvcGVSZW5kZXIgPyBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkgOiBjb250YWluZXI7XG4gICAgbGl0UmVuZGVyKHJlc3VsdCwgcmVuZGVyQ29udGFpbmVyLCBPYmplY3QuYXNzaWduKHsgdGVtcGxhdGVGYWN0b3J5OiBzaGFkeVRlbXBsYXRlRmFjdG9yeShzY29wZU5hbWUpIH0sIG9wdGlvbnMpKTtcbiAgICAvLyBXaGVuIHBlcmZvcm1pbmcgZmlyc3Qgc2NvcGUgcmVuZGVyLFxuICAgIC8vICgxKSBXZSd2ZSByZW5kZXJlZCBpbnRvIGEgZnJhZ21lbnQgc28gdGhhdCB0aGVyZSdzIGEgY2hhbmNlIHRvXG4gICAgLy8gYHByZXBhcmVUZW1wbGF0ZVN0eWxlc2AgYmVmb3JlIHN1Yi1lbGVtZW50cyBoaXQgdGhlIERPTVxuICAgIC8vICh3aGljaCBtaWdodCBjYXVzZSB0aGVtIHRvIHJlbmRlciBiYXNlZCBvbiBhIGNvbW1vbiBwYXR0ZXJuIG9mXG4gICAgLy8gcmVuZGVyaW5nIGluIGEgY3VzdG9tIGVsZW1lbnQncyBgY29ubmVjdGVkQ2FsbGJhY2tgKTtcbiAgICAvLyAoMikgU2NvcGUgdGhlIHRlbXBsYXRlIHdpdGggU2hhZHlDU1Mgb25lIHRpbWUgb25seSBmb3IgdGhpcyBzY29wZS5cbiAgICAvLyAoMykgUmVuZGVyIHRoZSBmcmFnbWVudCBpbnRvIHRoZSBjb250YWluZXIgYW5kIG1ha2Ugc3VyZSB0aGVcbiAgICAvLyBjb250YWluZXIga25vd3MgaXRzIGBwYXJ0YCBpcyB0aGUgb25lIHdlIGp1c3QgcmVuZGVyZWQuIFRoaXMgZW5zdXJlc1xuICAgIC8vIERPTSB3aWxsIGJlIHJlLXVzZWQgb24gc3Vic2VxdWVudCByZW5kZXJzLlxuICAgIGlmIChmaXJzdFNjb3BlUmVuZGVyKSB7XG4gICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0cy5nZXQocmVuZGVyQ29udGFpbmVyKTtcbiAgICAgICAgcGFydHMuZGVsZXRlKHJlbmRlckNvbnRhaW5lcik7XG4gICAgICAgIC8vIFNoYWR5Q1NTIG1pZ2h0IGhhdmUgc3R5bGUgc2hlZXRzIChlLmcuIGZyb20gYHByZXBhcmVBZG9wdGVkQ3NzVGV4dGApXG4gICAgICAgIC8vIHRoYXQgc2hvdWxkIGFwcGx5IHRvIGByZW5kZXJDb250YWluZXJgIGV2ZW4gaWYgdGhlIHJlbmRlcmVkIHZhbHVlIGlzXG4gICAgICAgIC8vIG5vdCBhIFRlbXBsYXRlSW5zdGFuY2UuIEhvd2V2ZXIsIGl0IHdpbGwgb25seSBpbnNlcnQgc2NvcGVkIHN0eWxlc1xuICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudCBpZiBgcHJlcGFyZVRlbXBsYXRlU3R5bGVzYCBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZFxuICAgICAgICAvLyBmb3IgdGhlIGdpdmVuIHNjb3BlIG5hbWUuXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gcGFydC52YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlSW5zdGFuY2UgP1xuICAgICAgICAgICAgcGFydC52YWx1ZS50ZW1wbGF0ZSA6XG4gICAgICAgICAgICB1bmRlZmluZWQ7XG4gICAgICAgIHByZXBhcmVUZW1wbGF0ZVN0eWxlcyhzY29wZU5hbWUsIHJlbmRlckNvbnRhaW5lciwgdGVtcGxhdGUpO1xuICAgICAgICByZW1vdmVOb2Rlcyhjb250YWluZXIsIGNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHJlbmRlckNvbnRhaW5lcik7XG4gICAgICAgIHBhcnRzLnNldChjb250YWluZXIsIHBhcnQpO1xuICAgIH1cbiAgICAvLyBBZnRlciBlbGVtZW50cyBoYXZlIGhpdCB0aGUgRE9NLCB1cGRhdGUgc3R5bGluZyBpZiB0aGlzIGlzIHRoZVxuICAgIC8vIGluaXRpYWwgcmVuZGVyIHRvIHRoaXMgY29udGFpbmVyLlxuICAgIC8vIFRoaXMgaXMgbmVlZGVkIHdoZW5ldmVyIGR5bmFtaWMgY2hhbmdlcyBhcmUgbWFkZSBzbyBpdCB3b3VsZCBiZVxuICAgIC8vIHNhZmVzdCB0byBkbyBldmVyeSByZW5kZXI7IGhvd2V2ZXIsIHRoaXMgd291bGQgcmVncmVzcyBwZXJmb3JtYW5jZVxuICAgIC8vIHNvIHdlIGxlYXZlIGl0IHVwIHRvIHRoZSB1c2VyIHRvIGNhbGwgYFNoYWR5Q1NTLnN0eWxlRWxlbWVudGBcbiAgICAvLyBmb3IgZHluYW1pYyBjaGFuZ2VzLlxuICAgIGlmICghaGFzUmVuZGVyZWQgJiYgbmVlZHNTY29waW5nKSB7XG4gICAgICAgIHdpbmRvdy5TaGFkeUNTUy5zdHlsZUVsZW1lbnQoY29udGFpbmVyLmhvc3QpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFkeS1yZW5kZXIuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xudmFyIF9hO1xuLyoqXG4gKiBXaGVuIHVzaW5nIENsb3N1cmUgQ29tcGlsZXIsIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkocHJvcGVydHksIG9iamVjdCkgaXNcbiAqIHJlcGxhY2VkIGF0IGNvbXBpbGUgdGltZSBieSB0aGUgbXVuZ2VkIG5hbWUgZm9yIG9iamVjdFtwcm9wZXJ0eV0uIFdlIGNhbm5vdFxuICogYWxpYXMgdGhpcyBmdW5jdGlvbiwgc28gd2UgaGF2ZSB0byB1c2UgYSBzbWFsbCBzaGltIHRoYXQgaGFzIHRoZSBzYW1lXG4gKiBiZWhhdmlvciB3aGVuIG5vdCBjb21waWxpbmcuXG4gKi9cbndpbmRvdy5KU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5ID1cbiAgICAocHJvcCwgX29iaikgPT4gcHJvcDtcbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29udmVydGVyID0ge1xuICAgIHRvQXR0cmlidXRlKHZhbHVlLCB0eXBlKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA/ICcnIDogbnVsbDtcbiAgICAgICAgICAgIGNhc2UgT2JqZWN0OlxuICAgICAgICAgICAgY2FzZSBBcnJheTpcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdmFsdWUgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgIHBhc3MgdGhpcyB0aHJvdWdoXG4gICAgICAgICAgICAgICAgLy8gdG8gYWxsb3cgcmVtb3Zpbmcvbm8gY2hhbmdlIGJlaGF2aW9yLlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdmFsdWUgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgZnJvbUF0dHJpYnV0ZSh2YWx1ZSwgdHlwZSkge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgIT09IG51bGw7XG4gICAgICAgICAgICBjYXNlIE51bWJlcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBudWxsIDogTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgT2JqZWN0OlxuICAgICAgICAgICAgY2FzZSBBcnJheTpcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn07XG4vKipcbiAqIENoYW5nZSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGRpZmZlcmVudCBmcm9tIGBvbGRWYWx1ZWAuXG4gKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGFzIHRoZSBkZWZhdWx0IGZvciBhIHByb3BlcnR5J3MgYGhhc0NoYW5nZWRgIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgY29uc3Qgbm90RXF1YWwgPSAodmFsdWUsIG9sZCkgPT4ge1xuICAgIC8vIFRoaXMgZW5zdXJlcyAob2xkPT1OYU4sIHZhbHVlPT1OYU4pIGFsd2F5cyByZXR1cm5zIGZhbHNlXG4gICAgcmV0dXJuIG9sZCAhPT0gdmFsdWUgJiYgKG9sZCA9PT0gb2xkIHx8IHZhbHVlID09PSB2YWx1ZSk7XG59O1xuY29uc3QgZGVmYXVsdFByb3BlcnR5RGVjbGFyYXRpb24gPSB7XG4gICAgYXR0cmlidXRlOiB0cnVlLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBjb252ZXJ0ZXI6IGRlZmF1bHRDb252ZXJ0ZXIsXG4gICAgcmVmbGVjdDogZmFsc2UsXG4gICAgaGFzQ2hhbmdlZDogbm90RXF1YWxcbn07XG5jb25zdCBTVEFURV9IQVNfVVBEQVRFRCA9IDE7XG5jb25zdCBTVEFURV9VUERBVEVfUkVRVUVTVEVEID0gMSA8PCAyO1xuY29uc3QgU1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEUgPSAxIDw8IDM7XG5jb25zdCBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZID0gMSA8PCA0O1xuLyoqXG4gKiBUaGUgQ2xvc3VyZSBKUyBDb21waWxlciBkb2Vzbid0IGN1cnJlbnRseSBoYXZlIGdvb2Qgc3VwcG9ydCBmb3Igc3RhdGljXG4gKiBwcm9wZXJ0eSBzZW1hbnRpY3Mgd2hlcmUgXCJ0aGlzXCIgaXMgZHluYW1pYyAoZS5nLlxuICogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8zMTc3IGFuZCBvdGhlcnMpIHNvIHdlIHVzZVxuICogdGhpcyBoYWNrIHRvIGJ5cGFzcyBhbnkgcmV3cml0aW5nIGJ5IHRoZSBjb21waWxlci5cbiAqL1xuY29uc3QgZmluYWxpemVkID0gJ2ZpbmFsaXplZCc7XG4vKipcbiAqIEJhc2UgZWxlbWVudCBjbGFzcyB3aGljaCBtYW5hZ2VzIGVsZW1lbnQgcHJvcGVydGllcyBhbmQgYXR0cmlidXRlcy4gV2hlblxuICogcHJvcGVydGllcyBjaGFuZ2UsIHRoZSBgdXBkYXRlYCBtZXRob2QgaXMgYXN5bmNocm9ub3VzbHkgY2FsbGVkLiBUaGlzIG1ldGhvZFxuICogc2hvdWxkIGJlIHN1cHBsaWVkIGJ5IHN1YmNsYXNzZXJzIHRvIHJlbmRlciB1cGRhdGVzIGFzIGRlc2lyZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBVcGRhdGluZ0VsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gMDtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyBJbml0aWFsaXplIHRvIGFuIHVucmVzb2x2ZWQgUHJvbWlzZSBzbyB3ZSBjYW4gbWFrZSBzdXJlIHRoZSBlbGVtZW50IGhhc1xuICAgICAgICAvLyBjb25uZWN0ZWQgYmVmb3JlIGZpcnN0IHVwZGF0ZS5cbiAgICAgICAgdGhpcy5fdXBkYXRlUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXMpID0+IHRoaXMuX2VuYWJsZVVwZGF0aW5nUmVzb2x2ZXIgPSByZXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogTWFwIHdpdGgga2V5cyBmb3IgYW55IHByb3BlcnRpZXMgdGhhdCBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3RcbiAgICAgICAgICogdXBkYXRlIGN5Y2xlIHdpdGggcHJldmlvdXMgdmFsdWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fY2hhbmdlZFByb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXAgd2l0aCBrZXlzIG9mIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgcmVmbGVjdGVkIHdoZW4gdXBkYXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgYXR0cmlidXRlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSByZWdpc3RlcmVkIHByb3BlcnRpZXMuXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICAgICAgLy8gbm90ZTogcGlnZ3kgYmFja2luZyBvbiB0aGlzIHRvIGVuc3VyZSB3ZSdyZSBmaW5hbGl6ZWQuXG4gICAgICAgIHRoaXMuZmluYWxpemUoKTtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IFtdO1xuICAgICAgICAvLyBVc2UgZm9yRWFjaCBzbyB0aGlzIHdvcmtzIGV2ZW4gaWYgZm9yL29mIGxvb3BzIGFyZSBjb21waWxlZCB0byBmb3IgbG9vcHNcbiAgICAgICAgLy8gZXhwZWN0aW5nIGFycmF5c1xuICAgICAgICB0aGlzLl9jbGFzc1Byb3BlcnRpZXMuZm9yRWFjaCgodiwgcCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwLCB2KTtcbiAgICAgICAgICAgIGlmIChhdHRyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwLnNldChhdHRyLCBwKTtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goYXR0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5zdXJlcyB0aGUgcHJpdmF0ZSBgX2NsYXNzUHJvcGVydGllc2AgcHJvcGVydHkgbWV0YWRhdGEgaXMgY3JlYXRlZC5cbiAgICAgKiBJbiBhZGRpdGlvbiB0byBgZmluYWxpemVgIHRoaXMgaXMgYWxzbyBjYWxsZWQgaW4gYGNyZWF0ZVByb3BlcnR5YCB0b1xuICAgICAqIGVuc3VyZSB0aGUgYEBwcm9wZXJ0eWAgZGVjb3JhdG9yIGNhbiBhZGQgcHJvcGVydHkgbWV0YWRhdGEuXG4gICAgICovXG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgc3RhdGljIF9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKSB7XG4gICAgICAgIC8vIGVuc3VyZSBwcml2YXRlIHN0b3JhZ2UgZm9yIHByb3BlcnR5IGRlY2xhcmF0aW9ucy5cbiAgICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19jbGFzc1Byb3BlcnRpZXMnLCB0aGlzKSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIC8vIE5PVEU6IFdvcmthcm91bmQgSUUxMSBub3Qgc3VwcG9ydGluZyBNYXAgY29uc3RydWN0b3IgYXJndW1lbnQuXG4gICAgICAgICAgICBjb25zdCBzdXBlclByb3BlcnRpZXMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2NsYXNzUHJvcGVydGllcztcbiAgICAgICAgICAgIGlmIChzdXBlclByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHN1cGVyUHJvcGVydGllcy5mb3JFYWNoKCh2LCBrKSA9PiB0aGlzLl9jbGFzc1Byb3BlcnRpZXMuc2V0KGssIHYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcHJvcGVydHkgYWNjZXNzb3Igb24gdGhlIGVsZW1lbnQgcHJvdG90eXBlIGlmIG9uZSBkb2VzIG5vdCBleGlzdFxuICAgICAqIGFuZCBzdG9yZXMgYSBQcm9wZXJ0eURlY2xhcmF0aW9uIGZvciB0aGUgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAgICAgKiBUaGUgcHJvcGVydHkgc2V0dGVyIGNhbGxzIHRoZSBwcm9wZXJ0eSdzIGBoYXNDaGFuZ2VkYCBwcm9wZXJ0eSBvcHRpb25cbiAgICAgKiBvciB1c2VzIGEgc3RyaWN0IGlkZW50aXR5IGNoZWNrIHRvIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdCB0byByZXF1ZXN0XG4gICAgICogYW4gdXBkYXRlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgbWF5IGJlIG92ZXJyaWRkZW4gdG8gY3VzdG9taXplIHByb3BlcnRpZXM7IGhvd2V2ZXIsXG4gICAgICogd2hlbiBkb2luZyBzbywgaXQncyBpbXBvcnRhbnQgdG8gY2FsbCBgc3VwZXIuY3JlYXRlUHJvcGVydHlgIHRvIGVuc3VyZVxuICAgICAqIHRoZSBwcm9wZXJ0eSBpcyBzZXR1cCBjb3JyZWN0bHkuIFRoaXMgbWV0aG9kIGNhbGxzXG4gICAgICogYGdldFByb3BlcnR5RGVzY3JpcHRvcmAgaW50ZXJuYWxseSB0byBnZXQgYSBkZXNjcmlwdG9yIHRvIGluc3RhbGwuXG4gICAgICogVG8gY3VzdG9taXplIHdoYXQgcHJvcGVydGllcyBkbyB3aGVuIHRoZXkgYXJlIGdldCBvciBzZXQsIG92ZXJyaWRlXG4gICAgICogYGdldFByb3BlcnR5RGVzY3JpcHRvcmAuIFRvIGN1c3RvbWl6ZSB0aGUgb3B0aW9ucyBmb3IgYSBwcm9wZXJ0eSxcbiAgICAgKiBpbXBsZW1lbnQgYGNyZWF0ZVByb3BlcnR5YCBsaWtlIHRoaXM6XG4gICAgICpcbiAgICAgKiBzdGF0aWMgY3JlYXRlUHJvcGVydHkobmFtZSwgb3B0aW9ucykge1xuICAgICAqICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24ob3B0aW9ucywge215T3B0aW9uOiB0cnVlfSk7XG4gICAgICogICBzdXBlci5jcmVhdGVQcm9wZXJ0eShuYW1lLCBvcHRpb25zKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVQcm9wZXJ0eShuYW1lLCBvcHRpb25zID0gZGVmYXVsdFByb3BlcnR5RGVjbGFyYXRpb24pIHtcbiAgICAgICAgLy8gTm90ZSwgc2luY2UgdGhpcyBjYW4gYmUgY2FsbGVkIGJ5IHRoZSBgQHByb3BlcnR5YCBkZWNvcmF0b3Igd2hpY2hcbiAgICAgICAgLy8gaXMgY2FsbGVkIGJlZm9yZSBgZmluYWxpemVgLCB3ZSBlbnN1cmUgc3RvcmFnZSBleGlzdHMgZm9yIHByb3BlcnR5XG4gICAgICAgIC8vIG1ldGFkYXRhLlxuICAgICAgICB0aGlzLl9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKTtcbiAgICAgICAgdGhpcy5fY2xhc3NQcm9wZXJ0aWVzLnNldChuYW1lLCBvcHRpb25zKTtcbiAgICAgICAgLy8gRG8gbm90IGdlbmVyYXRlIGFuIGFjY2Vzc29yIGlmIHRoZSBwcm90b3R5cGUgYWxyZWFkeSBoYXMgb25lLCBzaW5jZVxuICAgICAgICAvLyBpdCB3b3VsZCBiZSBsb3N0IG90aGVyd2lzZSBhbmQgdGhhdCB3b3VsZCBuZXZlciBiZSB0aGUgdXNlcidzIGludGVudGlvbjtcbiAgICAgICAgLy8gSW5zdGVhZCwgd2UgZXhwZWN0IHVzZXJzIHRvIGNhbGwgYHJlcXVlc3RVcGRhdGVgIHRoZW1zZWx2ZXMgZnJvbVxuICAgICAgICAvLyB1c2VyLWRlZmluZWQgYWNjZXNzb3JzLiBOb3RlIHRoYXQgaWYgdGhlIHN1cGVyIGhhcyBhbiBhY2Nlc3NvciB3ZSB3aWxsXG4gICAgICAgIC8vIHN0aWxsIG92ZXJ3cml0ZSBpdFxuICAgICAgICBpZiAob3B0aW9ucy5ub0FjY2Vzc29yIHx8IHRoaXMucHJvdG90eXBlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2V5ID0gdHlwZW9mIG5hbWUgPT09ICdzeW1ib2wnID8gU3ltYm9sKCkgOiBgX18ke25hbWV9YDtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHRoaXMuZ2V0UHJvcGVydHlEZXNjcmlwdG9yKG5hbWUsIGtleSwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnByb3RvdHlwZSwgbmFtZSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHByb3BlcnR5IGRlc2NyaXB0b3IgdG8gYmUgZGVmaW5lZCBvbiB0aGUgZ2l2ZW4gbmFtZWQgcHJvcGVydHkuXG4gICAgICogSWYgbm8gZGVzY3JpcHRvciBpcyByZXR1cm5lZCwgdGhlIHByb3BlcnR5IHdpbGwgbm90IGJlY29tZSBhbiBhY2Nlc3Nvci5cbiAgICAgKiBGb3IgZXhhbXBsZSxcbiAgICAgKlxuICAgICAqICAgY2xhc3MgTXlFbGVtZW50IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgICogICAgIHN0YXRpYyBnZXRQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSwga2V5LCBvcHRpb25zKSB7XG4gICAgICogICAgICAgY29uc3QgZGVmYXVsdERlc2NyaXB0b3IgPVxuICAgICAqICAgICAgICAgICBzdXBlci5nZXRQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSwga2V5LCBvcHRpb25zKTtcbiAgICAgKiAgICAgICBjb25zdCBzZXR0ZXIgPSBkZWZhdWx0RGVzY3JpcHRvci5zZXQ7XG4gICAgICogICAgICAgcmV0dXJuIHtcbiAgICAgKiAgICAgICAgIGdldDogZGVmYXVsdERlc2NyaXB0b3IuZ2V0LFxuICAgICAqICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICogICAgICAgICAgIHNldHRlci5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgKiAgICAgICAgICAgLy8gY3VzdG9tIGFjdGlvbi5cbiAgICAgKiAgICAgICAgIH0sXG4gICAgICogICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICogICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICogICAgICAgfVxuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSwga2V5LCBfb3B0aW9ucykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBubyBzeW1ib2wgaW4gaW5kZXhcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1trZXldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0VXBkYXRlKG5hbWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHByb3BlcnR5IG9wdGlvbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKiBUaGVzZSBvcHRpb25zIGFyZSBkZWZpbmVkIHdpdGggYSBQcm9wZXJ0eURlY2xhcmF0aW9uIHZpYSB0aGUgYHByb3BlcnRpZXNgXG4gICAgICogb2JqZWN0IG9yIHRoZSBgQHByb3BlcnR5YCBkZWNvcmF0b3IgYW5kIGFyZSByZWdpc3RlcmVkIGluXG4gICAgICogYGNyZWF0ZVByb3BlcnR5KC4uLilgLlxuICAgICAqXG4gICAgICogTm90ZSwgdGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNvbnNpZGVyZWQgXCJmaW5hbFwiIGFuZCBub3Qgb3ZlcnJpZGRlbi4gVG9cbiAgICAgKiBjdXN0b21pemUgdGhlIG9wdGlvbnMgZm9yIGEgZ2l2ZW4gcHJvcGVydHksIG92ZXJyaWRlIGBjcmVhdGVQcm9wZXJ0eWAuXG4gICAgICpcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqIEBmaW5hbFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRQcm9wZXJ0eU9wdGlvbnMobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xhc3NQcm9wZXJ0aWVzICYmIHRoaXMuX2NsYXNzUHJvcGVydGllcy5nZXQobmFtZSkgfHxcbiAgICAgICAgICAgIGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHByb3BlcnR5IGFjY2Vzc29ycyBmb3IgcmVnaXN0ZXJlZCBwcm9wZXJ0aWVzIGFuZCBlbnN1cmVzXG4gICAgICogYW55IHN1cGVyY2xhc3NlcyBhcmUgYWxzbyBmaW5hbGl6ZWQuXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgZmluYWxpemUoKSB7XG4gICAgICAgIC8vIGZpbmFsaXplIGFueSBzdXBlcmNsYXNzZXNcbiAgICAgICAgY29uc3Qgc3VwZXJDdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO1xuICAgICAgICBpZiAoIXN1cGVyQ3Rvci5oYXNPd25Qcm9wZXJ0eShmaW5hbGl6ZWQpKSB7XG4gICAgICAgICAgICBzdXBlckN0b3IuZmluYWxpemUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW2ZpbmFsaXplZF0gPSB0cnVlO1xuICAgICAgICB0aGlzLl9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKTtcbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBNYXAgcG9wdWxhdGVkIGluIG9ic2VydmVkQXR0cmlidXRlc1xuICAgICAgICB0aGlzLl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyBtYWtlIGFueSBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIE5vdGUsIG9ubHkgcHJvY2VzcyBcIm93blwiIHByb3BlcnRpZXMgc2luY2UgdGhpcyBlbGVtZW50IHdpbGwgaW5oZXJpdFxuICAgICAgICAvLyBhbnkgcHJvcGVydGllcyBkZWZpbmVkIG9uIHRoZSBzdXBlckNsYXNzLCBhbmQgZmluYWxpemF0aW9uIGVuc3VyZXNcbiAgICAgICAgLy8gdGhlIGVudGlyZSBwcm90b3R5cGUgY2hhaW4gaXMgZmluYWxpemVkLlxuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdwcm9wZXJ0aWVzJywgdGhpcykpKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcGVydGllcztcbiAgICAgICAgICAgIC8vIHN1cHBvcnQgc3ltYm9scyBpbiBwcm9wZXJ0aWVzIChJRTExIGRvZXMgbm90IHN1cHBvcnQgdGhpcylcbiAgICAgICAgICAgIGNvbnN0IHByb3BLZXlzID0gW1xuICAgICAgICAgICAgICAgIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3BzKSxcbiAgICAgICAgICAgICAgICAuLi4odHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpID9cbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhwcm9wcykgOlxuICAgICAgICAgICAgICAgICAgICBbXVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIC8vIFRoaXMgZm9yL29mIGlzIG9rIGJlY2F1c2UgcHJvcEtleXMgaXMgYW4gYXJyYXlcbiAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiBwcm9wS2V5cykge1xuICAgICAgICAgICAgICAgIC8vIG5vdGUsIHVzZSBvZiBgYW55YCBpcyBkdWUgdG8gVHlwZVNyaXB0IGxhY2sgb2Ygc3VwcG9ydCBmb3Igc3ltYm9sIGluXG4gICAgICAgICAgICAgICAgLy8gaW5kZXggdHlwZXNcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IG5vIHN5bWJvbCBpbiBpbmRleFxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUHJvcGVydHkocCwgcHJvcHNbcF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHByb3BlcnR5IG5hbWUgZm9yIHRoZSBnaXZlbiBhdHRyaWJ1dGUgYG5hbWVgLlxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkobmFtZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBvcHRpb25zLmF0dHJpYnV0ZTtcbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZSA9PT0gZmFsc2UgP1xuICAgICAgICAgICAgdW5kZWZpbmVkIDpcbiAgICAgICAgICAgICh0eXBlb2YgYXR0cmlidXRlID09PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlIDpcbiAgICAgICAgICAgICAgICAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnID8gbmFtZS50b0xvd2VyQ2FzZSgpIDogdW5kZWZpbmVkKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhIHByb3BlcnR5IHNob3VsZCByZXF1ZXN0IGFuIHVwZGF0ZS5cbiAgICAgKiBDYWxsZWQgd2hlbiBhIHByb3BlcnR5IHZhbHVlIGlzIHNldCBhbmQgdXNlcyB0aGUgYGhhc0NoYW5nZWRgXG4gICAgICogb3B0aW9uIGZvciB0aGUgcHJvcGVydHkgaWYgcHJlc2VudCBvciBhIHN0cmljdCBpZGVudGl0eSBjaGVjay5cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfdmFsdWVIYXNDaGFuZ2VkKHZhbHVlLCBvbGQsIGhhc0NoYW5nZWQgPSBub3RFcXVhbCkge1xuICAgICAgICByZXR1cm4gaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgZm9yIHRoZSBnaXZlbiBhdHRyaWJ1dGUgdmFsdWUuXG4gICAgICogQ2FsbGVkIHZpYSB0aGUgYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2AgYW5kIHVzZXMgdGhlIHByb3BlcnR5J3NcbiAgICAgKiBgY29udmVydGVyYCBvciBgY29udmVydGVyLmZyb21BdHRyaWJ1dGVgIHByb3BlcnR5IG9wdGlvbi5cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICAgICAgY29uc3QgY29udmVydGVyID0gb3B0aW9ucy5jb252ZXJ0ZXIgfHwgZGVmYXVsdENvbnZlcnRlcjtcbiAgICAgICAgY29uc3QgZnJvbUF0dHJpYnV0ZSA9ICh0eXBlb2YgY29udmVydGVyID09PSAnZnVuY3Rpb24nID8gY29udmVydGVyIDogY29udmVydGVyLmZyb21BdHRyaWJ1dGUpO1xuICAgICAgICByZXR1cm4gZnJvbUF0dHJpYnV0ZSA/IGZyb21BdHRyaWJ1dGUodmFsdWUsIHR5cGUpIDogdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIHByb3BlcnR5IHZhbHVlLiBJZiB0aGlzXG4gICAgICogcmV0dXJucyB1bmRlZmluZWQsIHRoZSBwcm9wZXJ0eSB3aWxsICpub3QqIGJlIHJlZmxlY3RlZCB0byBhbiBhdHRyaWJ1dGUuXG4gICAgICogSWYgdGhpcyByZXR1cm5zIG51bGwsIHRoZSBhdHRyaWJ1dGUgd2lsbCBiZSByZW1vdmVkLCBvdGhlcndpc2UgdGhlXG4gICAgICogYXR0cmlidXRlIHdpbGwgYmUgc2V0IHRvIHRoZSB2YWx1ZS5cbiAgICAgKiBUaGlzIHVzZXMgdGhlIHByb3BlcnR5J3MgYHJlZmxlY3RgIGFuZCBgdHlwZS50b0F0dHJpYnV0ZWAgcHJvcGVydHkgb3B0aW9ucy5cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcHJvcGVydHlWYWx1ZVRvQXR0cmlidXRlKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnJlZmxlY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHR5cGUgPSBvcHRpb25zLnR5cGU7XG4gICAgICAgIGNvbnN0IGNvbnZlcnRlciA9IG9wdGlvbnMuY29udmVydGVyO1xuICAgICAgICBjb25zdCB0b0F0dHJpYnV0ZSA9IGNvbnZlcnRlciAmJiBjb252ZXJ0ZXIudG9BdHRyaWJ1dGUgfHxcbiAgICAgICAgICAgIGRlZmF1bHRDb252ZXJ0ZXIudG9BdHRyaWJ1dGU7XG4gICAgICAgIHJldHVybiB0b0F0dHJpYnV0ZSh2YWx1ZSwgdHlwZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGVsZW1lbnQgaW5pdGlhbGl6YXRpb24uIEJ5IGRlZmF1bHQgY2FwdHVyZXMgYW55IHByZS1zZXQgdmFsdWVzIGZvclxuICAgICAqIHJlZ2lzdGVyZWQgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLl9zYXZlSW5zdGFuY2VQcm9wZXJ0aWVzKCk7XG4gICAgICAgIC8vIGVuc3VyZXMgZmlyc3QgdXBkYXRlIHdpbGwgYmUgY2F1Z2h0IGJ5IGFuIGVhcmx5IGFjY2VzcyBvZlxuICAgICAgICAvLyBgdXBkYXRlQ29tcGxldGVgXG4gICAgICAgIHRoaXMuX3JlcXVlc3RVcGRhdGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRml4ZXMgYW55IHByb3BlcnRpZXMgc2V0IG9uIHRoZSBpbnN0YW5jZSBiZWZvcmUgdXBncmFkZSB0aW1lLlxuICAgICAqIE90aGVyd2lzZSB0aGVzZSB3b3VsZCBzaGFkb3cgdGhlIGFjY2Vzc29yIGFuZCBicmVhayB0aGVzZSBwcm9wZXJ0aWVzLlxuICAgICAqIFRoZSBwcm9wZXJ0aWVzIGFyZSBzdG9yZWQgaW4gYSBNYXAgd2hpY2ggaXMgcGxheWVkIGJhY2sgYWZ0ZXIgdGhlXG4gICAgICogY29uc3RydWN0b3IgcnVucy4gTm90ZSwgb24gdmVyeSBvbGQgdmVyc2lvbnMgb2YgU2FmYXJpICg8PTkpIG9yIENocm9tZVxuICAgICAqICg8PTQxKSwgcHJvcGVydGllcyBjcmVhdGVkIGZvciBuYXRpdmUgcGxhdGZvcm0gcHJvcGVydGllcyBsaWtlIChgaWRgIG9yXG4gICAgICogYG5hbWVgKSBtYXkgbm90IGhhdmUgZGVmYXVsdCB2YWx1ZXMgc2V0IGluIHRoZSBlbGVtZW50IGNvbnN0cnVjdG9yLiBPblxuICAgICAqIHRoZXNlIGJyb3dzZXJzIG5hdGl2ZSBwcm9wZXJ0aWVzIGFwcGVhciBvbiBpbnN0YW5jZXMgYW5kIHRoZXJlZm9yZSB0aGVpclxuICAgICAqIGRlZmF1bHQgdmFsdWUgd2lsbCBvdmVyd3JpdGUgYW55IGVsZW1lbnQgZGVmYXVsdCAoZS5nLiBpZiB0aGUgZWxlbWVudCBzZXRzXG4gICAgICogdGhpcy5pZCA9ICdpZCcgaW4gdGhlIGNvbnN0cnVjdG9yLCB0aGUgJ2lkJyB3aWxsIGJlY29tZSAnJyBzaW5jZSB0aGlzIGlzXG4gICAgICogdGhlIG5hdGl2ZSBwbGF0Zm9ybSBkZWZhdWx0KS5cbiAgICAgKi9cbiAgICBfc2F2ZUluc3RhbmNlUHJvcGVydGllcygpIHtcbiAgICAgICAgLy8gVXNlIGZvckVhY2ggc28gdGhpcyB3b3JrcyBldmVuIGlmIGZvci9vZiBsb29wcyBhcmUgY29tcGlsZWQgdG8gZm9yIGxvb3BzXG4gICAgICAgIC8vIGV4cGVjdGluZyBhcnJheXNcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvclxuICAgICAgICAgICAgLl9jbGFzc1Byb3BlcnRpZXMuZm9yRWFjaCgoX3YsIHApID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW3BdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW3BdO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzLnNldChwLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHByZXZpb3VzbHkgc2F2ZWQgaW5zdGFuY2UgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBfYXBwbHlJbnN0YW5jZVByb3BlcnRpZXMoKSB7XG4gICAgICAgIC8vIFVzZSBmb3JFYWNoIHNvIHRoaXMgd29ya3MgZXZlbiBpZiBmb3Ivb2YgbG9vcHMgYXJlIGNvbXBpbGVkIHRvIGZvciBsb29wc1xuICAgICAgICAvLyBleHBlY3RpbmcgYXJyYXlzXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgICAgdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzLmZvckVhY2goKHYsIHApID0+IHRoaXNbcF0gPSB2KTtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgLy8gRW5zdXJlIGZpcnN0IGNvbm5lY3Rpb24gY29tcGxldGVzIGFuIHVwZGF0ZS4gVXBkYXRlcyBjYW5ub3QgY29tcGxldGVcbiAgICAgICAgLy8gYmVmb3JlIGNvbm5lY3Rpb24uXG4gICAgICAgIHRoaXMuZW5hYmxlVXBkYXRpbmcoKTtcbiAgICB9XG4gICAgZW5hYmxlVXBkYXRpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLl9lbmFibGVVcGRhdGluZ1Jlc29sdmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2VuYWJsZVVwZGF0aW5nUmVzb2x2ZXIoKTtcbiAgICAgICAgICAgIHRoaXMuX2VuYWJsZVVwZGF0aW5nUmVzb2x2ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxsb3dzIGZvciBgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKWAgaW4gZXh0ZW5zaW9ucyB3aGlsZVxuICAgICAqIHJlc2VydmluZyB0aGUgcG9zc2liaWxpdHkgb2YgbWFraW5nIG5vbi1icmVha2luZyBmZWF0dXJlIGFkZGl0aW9uc1xuICAgICAqIHdoZW4gZGlzY29ubmVjdGluZyBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUuXG4gICAgICovXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN5bmNocm9uaXplcyBwcm9wZXJ0eSB2YWx1ZXMgd2hlbiBhdHRyaWJ1dGVzIGNoYW5nZS5cbiAgICAgKi9cbiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkLCB2YWx1ZSkge1xuICAgICAgICBpZiAob2xkICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3Byb3BlcnR5VG9BdHRyaWJ1dGUobmFtZSwgdmFsdWUsIG9wdGlvbnMgPSBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbikge1xuICAgICAgICBjb25zdCBjdG9yID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgY29uc3QgYXR0ciA9IGN0b3IuX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShuYW1lLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGF0dHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgYXR0clZhbHVlID0gY3Rvci5fcHJvcGVydHlWYWx1ZVRvQXR0cmlidXRlKHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIC8vIGFuIHVuZGVmaW5lZCB2YWx1ZSBkb2VzIG5vdCBjaGFuZ2UgdGhlIGF0dHJpYnV0ZS5cbiAgICAgICAgICAgIGlmIChhdHRyVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRyYWNrIGlmIHRoZSBwcm9wZXJ0eSBpcyBiZWluZyByZWZsZWN0ZWQgdG8gYXZvaWRcbiAgICAgICAgICAgIC8vIHNldHRpbmcgdGhlIHByb3BlcnR5IGFnYWluIHZpYSBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYC4gTm90ZTpcbiAgICAgICAgICAgIC8vIDEuIHRoaXMgdGFrZXMgYWR2YW50YWdlIG9mIHRoZSBmYWN0IHRoYXQgdGhlIGNhbGxiYWNrIGlzIHN5bmNocm9ub3VzLlxuICAgICAgICAgICAgLy8gMi4gd2lsbCBiZWhhdmUgaW5jb3JyZWN0bHkgaWYgbXVsdGlwbGUgYXR0cmlidXRlcyBhcmUgaW4gdGhlIHJlYWN0aW9uXG4gICAgICAgICAgICAvLyBzdGFjayBhdCB0aW1lIG9mIGNhbGxpbmcuIEhvd2V2ZXIsIHNpbmNlIHdlIHByb2Nlc3MgYXR0cmlidXRlc1xuICAgICAgICAgICAgLy8gaW4gYHVwZGF0ZWAgdGhpcyBzaG91bGQgbm90IGJlIHBvc3NpYmxlIChvciBhbiBleHRyZW1lIGNvcm5lciBjYXNlXG4gICAgICAgICAgICAvLyB0aGF0IHdlJ2QgbGlrZSB0byBkaXNjb3ZlcikuXG4gICAgICAgICAgICAvLyBtYXJrIHN0YXRlIHJlZmxlY3RpbmdcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9JU19SRUZMRUNUSU5HX1RPX0FUVFJJQlVURTtcbiAgICAgICAgICAgIGlmIChhdHRyVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0clZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG1hcmsgc3RhdGUgbm90IHJlZmxlY3RpbmdcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgJiB+U1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2F0dHJpYnV0ZVRvUHJvcGVydHkobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgLy8gVXNlIHRyYWNraW5nIGluZm8gdG8gYXZvaWQgZGVzZXJpYWxpemluZyBhdHRyaWJ1dGUgdmFsdWUgaWYgaXQgd2FzXG4gICAgICAgIC8vIGp1c3Qgc2V0IGZyb20gYSBwcm9wZXJ0eSBzZXR0ZXIuXG4gICAgICAgIGlmICh0aGlzLl91cGRhdGVTdGF0ZSAmIFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3RvciA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIC8vIE5vdGUsIGhpbnQgdGhpcyBhcyBhbiBgQXR0cmlidXRlTWFwYCBzbyBjbG9zdXJlIGNsZWFybHkgdW5kZXJzdGFuZHNcbiAgICAgICAgLy8gdGhlIHR5cGU7IGl0IGhhcyBpc3N1ZXMgd2l0aCB0cmFja2luZyB0eXBlcyB0aHJvdWdoIHN0YXRpY3NcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVubmVjZXNzYXJ5LXR5cGUtYXNzZXJ0aW9uXG4gICAgICAgIGNvbnN0IHByb3BOYW1lID0gY3Rvci5fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcC5nZXQobmFtZSk7XG4gICAgICAgIGlmIChwcm9wTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gY3Rvci5nZXRQcm9wZXJ0eU9wdGlvbnMocHJvcE5hbWUpO1xuICAgICAgICAgICAgLy8gbWFyayBzdGF0ZSByZWZsZWN0aW5nXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlIHwgU1RBVEVfSVNfUkVGTEVDVElOR19UT19QUk9QRVJUWTtcbiAgICAgICAgICAgIHRoaXNbcHJvcE5hbWVdID1cbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgICAgICAgICAgICAgY3Rvci5fcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUodmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgLy8gbWFyayBzdGF0ZSBub3QgcmVmbGVjdGluZ1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSAmIH5TVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgcHJpdmF0ZSB2ZXJzaW9uIG9mIGByZXF1ZXN0VXBkYXRlYCBkb2VzIG5vdCBhY2Nlc3Mgb3IgcmV0dXJuIHRoZVxuICAgICAqIGB1cGRhdGVDb21wbGV0ZWAgcHJvbWlzZS4gVGhpcyBwcm9taXNlIGNhbiBiZSBvdmVycmlkZGVuIGFuZCBpcyB0aGVyZWZvcmVcbiAgICAgKiBub3QgZnJlZSB0byBhY2Nlc3MuXG4gICAgICovXG4gICAgX3JlcXVlc3RVcGRhdGUobmFtZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgbGV0IHNob3VsZFJlcXVlc3RVcGRhdGUgPSB0cnVlO1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgcHJvcGVydHkga2V5LCBwZXJmb3JtIHByb3BlcnR5IHVwZGF0ZSBzdGVwcy5cbiAgICAgICAgaWYgKG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgY3RvciA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gY3Rvci5nZXRQcm9wZXJ0eU9wdGlvbnMobmFtZSk7XG4gICAgICAgICAgICBpZiAoY3Rvci5fdmFsdWVIYXNDaGFuZ2VkKHRoaXNbbmFtZV0sIG9sZFZhbHVlLCBvcHRpb25zLmhhc0NoYW5nZWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jaGFuZ2VkUHJvcGVydGllcy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlZFByb3BlcnRpZXMuc2V0KG5hbWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQWRkIHRvIHJlZmxlY3RpbmcgcHJvcGVydGllcyBzZXQuXG4gICAgICAgICAgICAgICAgLy8gTm90ZSwgaXQncyBpbXBvcnRhbnQgdGhhdCBldmVyeSBjaGFuZ2UgaGFzIGEgY2hhbmNlIHRvIGFkZCB0aGVcbiAgICAgICAgICAgICAgICAvLyBwcm9wZXJ0eSB0byBgX3JlZmxlY3RpbmdQcm9wZXJ0aWVzYC4gVGhpcyBlbnN1cmVzIHNldHRpbmdcbiAgICAgICAgICAgICAgICAvLyBhdHRyaWJ1dGUgKyBwcm9wZXJ0eSByZWZsZWN0cyBjb3JyZWN0bHkuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVmbGVjdCA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgICAgICAgICAhKHRoaXMuX3VwZGF0ZVN0YXRlICYgU1RBVEVfSVNfUkVGTEVDVElOR19UT19QUk9QRVJUWSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzLnNldChuYW1lLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBBYm9ydCB0aGUgcmVxdWVzdCBpZiB0aGUgcHJvcGVydHkgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGNoYW5nZWQuXG4gICAgICAgICAgICAgICAgc2hvdWxkUmVxdWVzdFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faGFzUmVxdWVzdGVkVXBkYXRlICYmIHNob3VsZFJlcXVlc3RVcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVByb21pc2UgPSB0aGlzLl9lbnF1ZXVlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVxdWVzdHMgYW4gdXBkYXRlIHdoaWNoIGlzIHByb2Nlc3NlZCBhc3luY2hyb25vdXNseS4gVGhpcyBzaG91bGRcbiAgICAgKiBiZSBjYWxsZWQgd2hlbiBhbiBlbGVtZW50IHNob3VsZCB1cGRhdGUgYmFzZWQgb24gc29tZSBzdGF0ZSBub3QgdHJpZ2dlcmVkXG4gICAgICogYnkgc2V0dGluZyBhIHByb3BlcnR5LiBJbiB0aGlzIGNhc2UsIHBhc3Mgbm8gYXJndW1lbnRzLiBJdCBzaG91bGQgYWxzbyBiZVxuICAgICAqIGNhbGxlZCB3aGVuIG1hbnVhbGx5IGltcGxlbWVudGluZyBhIHByb3BlcnR5IHNldHRlci4gSW4gdGhpcyBjYXNlLCBwYXNzIHRoZVxuICAgICAqIHByb3BlcnR5IGBuYW1lYCBhbmQgYG9sZFZhbHVlYCB0byBlbnN1cmUgdGhhdCBhbnkgY29uZmlndXJlZCBwcm9wZXJ0eVxuICAgICAqIG9wdGlvbnMgYXJlIGhvbm9yZWQuIFJldHVybnMgdGhlIGB1cGRhdGVDb21wbGV0ZWAgUHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZFxuICAgICAqIHdoZW4gdGhlIHVwZGF0ZSBjb21wbGV0ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSB7UHJvcGVydHlLZXl9IChvcHRpb25hbCkgbmFtZSBvZiByZXF1ZXN0aW5nIHByb3BlcnR5XG4gICAgICogQHBhcmFtIG9sZFZhbHVlIHthbnl9IChvcHRpb25hbCkgb2xkIHZhbHVlIG9mIHJlcXVlc3RpbmcgcHJvcGVydHlcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgdXBkYXRlIGNvbXBsZXRlcy5cbiAgICAgKi9cbiAgICByZXF1ZXN0VXBkYXRlKG5hbWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RVcGRhdGUobmFtZSwgb2xkVmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVDb21wbGV0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB1cCB0aGUgZWxlbWVudCB0byBhc3luY2hyb25vdXNseSB1cGRhdGUuXG4gICAgICovXG4gICAgYXN5bmMgX2VucXVldWVVcGRhdGUoKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9VUERBVEVfUkVRVUVTVEVEO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gRW5zdXJlIGFueSBwcmV2aW91cyB1cGRhdGUgaGFzIHJlc29sdmVkIGJlZm9yZSB1cGRhdGluZy5cbiAgICAgICAgICAgIC8vIFRoaXMgYGF3YWl0YCBhbHNvIGVuc3VyZXMgdGhhdCBwcm9wZXJ0eSBjaGFuZ2VzIGFyZSBiYXRjaGVkLlxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fdXBkYXRlUHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gSWdub3JlIGFueSBwcmV2aW91cyBlcnJvcnMuIFdlIG9ubHkgY2FyZSB0aGF0IHRoZSBwcmV2aW91cyBjeWNsZSBpc1xuICAgICAgICAgICAgLy8gZG9uZS4gQW55IGVycm9yIHNob3VsZCBoYXZlIGJlZW4gaGFuZGxlZCBpbiB0aGUgcHJldmlvdXMgdXBkYXRlLlxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGVyZm9ybVVwZGF0ZSgpO1xuICAgICAgICAvLyBJZiBgcGVyZm9ybVVwZGF0ZWAgcmV0dXJucyBhIFByb21pc2UsIHdlIGF3YWl0IGl0LiBUaGlzIGlzIGRvbmUgdG9cbiAgICAgICAgLy8gZW5hYmxlIGNvb3JkaW5hdGluZyB1cGRhdGVzIHdpdGggYSBzY2hlZHVsZXIuIE5vdGUsIHRoZSByZXN1bHQgaXNcbiAgICAgICAgLy8gY2hlY2tlZCB0byBhdm9pZCBkZWxheWluZyBhbiBhZGRpdGlvbmFsIG1pY3JvdGFzayB1bmxlc3Mgd2UgbmVlZCB0by5cbiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhd2FpdCByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGU7XG4gICAgfVxuICAgIGdldCBfaGFzUmVxdWVzdGVkVXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX3VwZGF0ZVN0YXRlICYgU1RBVEVfVVBEQVRFX1JFUVVFU1RFRCk7XG4gICAgfVxuICAgIGdldCBoYXNVcGRhdGVkKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX3VwZGF0ZVN0YXRlICYgU1RBVEVfSEFTX1VQREFURUQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhbiBlbGVtZW50IHVwZGF0ZS4gTm90ZSwgaWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBkdXJpbmcgdGhlXG4gICAgICogdXBkYXRlLCBgZmlyc3RVcGRhdGVkYCBhbmQgYHVwZGF0ZWRgIHdpbGwgbm90IGJlIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gY2hhbmdlIHRoZSB0aW1pbmcgb2YgdXBkYXRlcy4gSWYgdGhpc1xuICAgICAqIG1ldGhvZCBpcyBvdmVycmlkZGVuLCBgc3VwZXIucGVyZm9ybVVwZGF0ZSgpYCBtdXN0IGJlIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIEZvciBpbnN0YW5jZSwgdG8gc2NoZWR1bGUgdXBkYXRlcyB0byBvY2N1ciBqdXN0IGJlZm9yZSB0aGUgbmV4dCBmcmFtZTpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIHByb3RlY3RlZCBhc3luYyBwZXJmb3JtVXBkYXRlKCk6IFByb21pc2U8dW5rbm93bj4ge1xuICAgICAqICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiByZXNvbHZlKCkpKTtcbiAgICAgKiAgIHN1cGVyLnBlcmZvcm1VcGRhdGUoKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcGVyZm9ybVVwZGF0ZSgpIHtcbiAgICAgICAgLy8gTWl4aW4gaW5zdGFuY2UgcHJvcGVydGllcyBvbmNlLCBpZiB0aGV5IGV4aXN0LlxuICAgICAgICBpZiAodGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0aGlzLl9hcHBseUluc3RhbmNlUHJvcGVydGllcygpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzaG91bGRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgY2hhbmdlZFByb3BlcnRpZXMgPSB0aGlzLl9jaGFuZ2VkUHJvcGVydGllcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IHRoaXMuc2hvdWxkVXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIGlmIChzaG91bGRVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXJrVXBkYXRlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IGBmaXJzdFVwZGF0ZWRgIGFuZCBgdXBkYXRlZGAgZnJvbSBydW5uaW5nIHdoZW4gdGhlcmUncyBhblxuICAgICAgICAgICAgLy8gdXBkYXRlIGV4Y2VwdGlvbi5cbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gRW5zdXJlIGVsZW1lbnQgY2FuIGFjY2VwdCBhZGRpdGlvbmFsIHVwZGF0ZXMgYWZ0ZXIgYW4gZXhjZXB0aW9uLlxuICAgICAgICAgICAgdGhpcy5fbWFya1VwZGF0ZWQoKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgICAgICAgaWYgKCEodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9IQVNfVVBEQVRFRCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlIHwgU1RBVEVfSEFTX1VQREFURUQ7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfbWFya1VwZGF0ZWQoKSB7XG4gICAgICAgIHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlICYgflNUQVRFX1VQREFURV9SRVFVRVNURUQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZWxlbWVudCBoYXMgY29tcGxldGVkIHVwZGF0aW5nLlxuICAgICAqIFRoZSBQcm9taXNlIHZhbHVlIGlzIGEgYm9vbGVhbiB0aGF0IGlzIGB0cnVlYCBpZiB0aGUgZWxlbWVudCBjb21wbGV0ZWQgdGhlXG4gICAgICogdXBkYXRlIHdpdGhvdXQgdHJpZ2dlcmluZyBhbm90aGVyIHVwZGF0ZS4gVGhlIFByb21pc2UgcmVzdWx0IGlzIGBmYWxzZWAgaWZcbiAgICAgKiBhIHByb3BlcnR5IHdhcyBzZXQgaW5zaWRlIGB1cGRhdGVkKClgLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgYW5cbiAgICAgKiBleGNlcHRpb24gd2FzIHRocm93biBkdXJpbmcgdGhlIHVwZGF0ZS5cbiAgICAgKlxuICAgICAqIFRvIGF3YWl0IGFkZGl0aW9uYWwgYXN5bmNocm9ub3VzIHdvcmssIG92ZXJyaWRlIHRoZSBgX2dldFVwZGF0ZUNvbXBsZXRlYFxuICAgICAqIG1ldGhvZC4gRm9yIGV4YW1wbGUsIGl0IGlzIHNvbWV0aW1lcyB1c2VmdWwgdG8gYXdhaXQgYSByZW5kZXJlZCBlbGVtZW50XG4gICAgICogYmVmb3JlIGZ1bGZpbGxpbmcgdGhpcyBQcm9taXNlLiBUbyBkbyB0aGlzLCBmaXJzdCBhd2FpdFxuICAgICAqIGBzdXBlci5fZ2V0VXBkYXRlQ29tcGxldGUoKWAsIHRoZW4gYW55IHN1YnNlcXVlbnQgc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgcmV0dXJucyBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlXG4gICAgICogdXBkYXRlIHJlc29sdmVkIHdpdGhvdXQgdHJpZ2dlcmluZyBhbm90aGVyIHVwZGF0ZS5cbiAgICAgKi9cbiAgICBnZXQgdXBkYXRlQ29tcGxldGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRVcGRhdGVDb21wbGV0ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBwb2ludCBmb3IgdGhlIGB1cGRhdGVDb21wbGV0ZWAgcHJvbWlzZS5cbiAgICAgKlxuICAgICAqIEl0IGlzIG5vdCBzYWZlIHRvIG92ZXJyaWRlIHRoZSBgdXBkYXRlQ29tcGxldGVgIGdldHRlciBkaXJlY3RseSBkdWUgdG8gYVxuICAgICAqIGxpbWl0YXRpb24gaW4gVHlwZVNjcmlwdCB3aGljaCBtZWFucyBpdCBpcyBub3QgcG9zc2libGUgdG8gY2FsbCBhXG4gICAgICogc3VwZXJjbGFzcyBnZXR0ZXIgKGUuZy4gYHN1cGVyLnVwZGF0ZUNvbXBsZXRlLnRoZW4oLi4uKWApIHdoZW4gdGhlIHRhcmdldFxuICAgICAqIGxhbmd1YWdlIGlzIEVTNSAoaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMzgpLlxuICAgICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBvdmVycmlkZGVuIGluc3RlYWQuIEZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogICBjbGFzcyBNeUVsZW1lbnQgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICAgKiAgICAgYXN5bmMgX2dldFVwZGF0ZUNvbXBsZXRlKCkge1xuICAgICAqICAgICAgIGF3YWl0IHN1cGVyLl9nZXRVcGRhdGVDb21wbGV0ZSgpO1xuICAgICAqICAgICAgIGF3YWl0IHRoaXMuX215Q2hpbGQudXBkYXRlQ29tcGxldGU7XG4gICAgICogICAgIH1cbiAgICAgKiAgIH1cbiAgICAgKi9cbiAgICBfZ2V0VXBkYXRlQ29tcGxldGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGVQcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb250cm9scyB3aGV0aGVyIG9yIG5vdCBgdXBkYXRlYCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gdGhlIGVsZW1lbnQgcmVxdWVzdHNcbiAgICAgKiBhbiB1cGRhdGUuIEJ5IGRlZmF1bHQsIHRoaXMgbWV0aG9kIGFsd2F5cyByZXR1cm5zIGB0cnVlYCwgYnV0IHRoaXMgY2FuIGJlXG4gICAgICogY3VzdG9taXplZCB0byBjb250cm9sIHdoZW4gdG8gdXBkYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIF9jaGFuZ2VkUHJvcGVydGllcyBNYXAgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIHdpdGggb2xkIHZhbHVlc1xuICAgICAqL1xuICAgIHNob3VsZFVwZGF0ZShfY2hhbmdlZFByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGVsZW1lbnQuIFRoaXMgbWV0aG9kIHJlZmxlY3RzIHByb3BlcnR5IHZhbHVlcyB0byBhdHRyaWJ1dGVzLlxuICAgICAqIEl0IGNhbiBiZSBvdmVycmlkZGVuIHRvIHJlbmRlciBhbmQga2VlcCB1cGRhdGVkIGVsZW1lbnQgRE9NLlxuICAgICAqIFNldHRpbmcgcHJvcGVydGllcyBpbnNpZGUgdGhpcyBtZXRob2Qgd2lsbCAqbm90KiB0cmlnZ2VyXG4gICAgICogYW5vdGhlciB1cGRhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gX2NoYW5nZWRQcm9wZXJ0aWVzIE1hcCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgd2l0aCBvbGQgdmFsdWVzXG4gICAgICovXG4gICAgdXBkYXRlKF9jaGFuZ2VkUHJvcGVydGllcykge1xuICAgICAgICBpZiAodGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIC8vIFVzZSBmb3JFYWNoIHNvIHRoaXMgd29ya3MgZXZlbiBpZiBmb3Ivb2YgbG9vcHMgYXJlIGNvbXBpbGVkIHRvIGZvclxuICAgICAgICAgICAgLy8gbG9vcHMgZXhwZWN0aW5nIGFycmF5c1xuICAgICAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuZm9yRWFjaCgodiwgaykgPT4gdGhpcy5fcHJvcGVydHlUb0F0dHJpYnV0ZShrLCB0aGlzW2tdLCB2KSk7XG4gICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tYXJrVXBkYXRlZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW5ldmVyIHRoZSBlbGVtZW50IGlzIHVwZGF0ZWQuIEltcGxlbWVudCB0byBwZXJmb3JtXG4gICAgICogcG9zdC11cGRhdGluZyB0YXNrcyB2aWEgRE9NIEFQSXMsIGZvciBleGFtcGxlLCBmb2N1c2luZyBhbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZSB0aGlzIG1ldGhvZCB3aWxsIHRyaWdnZXIgdGhlIGVsZW1lbnQgdG8gdXBkYXRlXG4gICAgICogYWdhaW4gYWZ0ZXIgdGhpcyB1cGRhdGUgY3ljbGUgY29tcGxldGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIF9jaGFuZ2VkUHJvcGVydGllcyBNYXAgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIHdpdGggb2xkIHZhbHVlc1xuICAgICAqL1xuICAgIHVwZGF0ZWQoX2NoYW5nZWRQcm9wZXJ0aWVzKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgZWxlbWVudCBpcyBmaXJzdCB1cGRhdGVkLiBJbXBsZW1lbnQgdG8gcGVyZm9ybSBvbmUgdGltZVxuICAgICAqIHdvcmsgb24gdGhlIGVsZW1lbnQgYWZ0ZXIgdXBkYXRlLlxuICAgICAqXG4gICAgICogU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZSB0aGlzIG1ldGhvZCB3aWxsIHRyaWdnZXIgdGhlIGVsZW1lbnQgdG8gdXBkYXRlXG4gICAgICogYWdhaW4gYWZ0ZXIgdGhpcyB1cGRhdGUgY3ljbGUgY29tcGxldGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIF9jaGFuZ2VkUHJvcGVydGllcyBNYXAgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIHdpdGggb2xkIHZhbHVlc1xuICAgICAqL1xuICAgIGZpcnN0VXBkYXRlZChfY2hhbmdlZFByb3BlcnRpZXMpIHtcbiAgICB9XG59XG5fYSA9IGZpbmFsaXplZDtcbi8qKlxuICogTWFya3MgY2xhc3MgYXMgaGF2aW5nIGZpbmlzaGVkIGNyZWF0aW5nIHByb3BlcnRpZXMuXG4gKi9cblVwZGF0aW5nRWxlbWVudFtfYV0gPSB0cnVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBkYXRpbmctZWxlbWVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5jb25zdCBsZWdhY3lDdXN0b21FbGVtZW50ID0gKHRhZ05hbWUsIGNsYXp6KSA9PiB7XG4gICAgd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBjbGF6eik7XG4gICAgLy8gQ2FzdCBhcyBhbnkgYmVjYXVzZSBUUyBkb2Vzbid0IHJlY29nbml6ZSB0aGUgcmV0dXJuIHR5cGUgYXMgYmVpbmcgYVxuICAgIC8vIHN1YnR5cGUgb2YgdGhlIGRlY29yYXRlZCBjbGFzcyB3aGVuIGNsYXp6IGlzIHR5cGVkIGFzXG4gICAgLy8gYENvbnN0cnVjdG9yPEhUTUxFbGVtZW50PmAgZm9yIHNvbWUgcmVhc29uLlxuICAgIC8vIGBDb25zdHJ1Y3RvcjxIVE1MRWxlbWVudD5gIGlzIGhlbHBmdWwgdG8gbWFrZSBzdXJlIHRoZSBkZWNvcmF0b3IgaXNcbiAgICAvLyBhcHBsaWVkIHRvIGVsZW1lbnRzIGhvd2V2ZXIuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIHJldHVybiBjbGF6ejtcbn07XG5jb25zdCBzdGFuZGFyZEN1c3RvbUVsZW1lbnQgPSAodGFnTmFtZSwgZGVzY3JpcHRvcikgPT4ge1xuICAgIGNvbnN0IHsga2luZCwgZWxlbWVudHMgfSA9IGRlc2NyaXB0b3I7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZCxcbiAgICAgICAgZWxlbWVudHMsXG4gICAgICAgIC8vIFRoaXMgY2FsbGJhY2sgaXMgY2FsbGVkIG9uY2UgdGhlIGNsYXNzIGlzIG90aGVyd2lzZSBmdWxseSBkZWZpbmVkXG4gICAgICAgIGZpbmlzaGVyKGNsYXp6KSB7XG4gICAgICAgICAgICB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKHRhZ05hbWUsIGNsYXp6KTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuLyoqXG4gKiBDbGFzcyBkZWNvcmF0b3IgZmFjdG9yeSB0aGF0IGRlZmluZXMgdGhlIGRlY29yYXRlZCBjbGFzcyBhcyBhIGN1c3RvbSBlbGVtZW50LlxuICpcbiAqIGBgYFxuICogQGN1c3RvbUVsZW1lbnQoJ215LWVsZW1lbnQnKVxuICogY2xhc3MgTXlFbGVtZW50IHtcbiAqICAgcmVuZGVyKCkge1xuICogICAgIHJldHVybiBodG1sYGA7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB0YWdOYW1lIFRoZSBuYW1lIG9mIHRoZSBjdXN0b20gZWxlbWVudCB0byBkZWZpbmUuXG4gKi9cbmV4cG9ydCBjb25zdCBjdXN0b21FbGVtZW50ID0gKHRhZ05hbWUpID0+IChjbGFzc09yRGVzY3JpcHRvcikgPT4gKHR5cGVvZiBjbGFzc09yRGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykgP1xuICAgIGxlZ2FjeUN1c3RvbUVsZW1lbnQodGFnTmFtZSwgY2xhc3NPckRlc2NyaXB0b3IpIDpcbiAgICBzdGFuZGFyZEN1c3RvbUVsZW1lbnQodGFnTmFtZSwgY2xhc3NPckRlc2NyaXB0b3IpO1xuY29uc3Qgc3RhbmRhcmRQcm9wZXJ0eSA9IChvcHRpb25zLCBlbGVtZW50KSA9PiB7XG4gICAgLy8gV2hlbiBkZWNvcmF0aW5nIGFuIGFjY2Vzc29yLCBwYXNzIGl0IHRocm91Z2ggYW5kIGFkZCBwcm9wZXJ0eSBtZXRhZGF0YS5cbiAgICAvLyBOb3RlLCB0aGUgYGhhc093blByb3BlcnR5YCBjaGVjayBpbiBgY3JlYXRlUHJvcGVydHlgIGVuc3VyZXMgd2UgZG9uJ3RcbiAgICAvLyBzdG9tcCBvdmVyIHRoZSB1c2VyJ3MgYWNjZXNzb3IuXG4gICAgaWYgKGVsZW1lbnQua2luZCA9PT0gJ21ldGhvZCcgJiYgZWxlbWVudC5kZXNjcmlwdG9yICYmXG4gICAgICAgICEoJ3ZhbHVlJyBpbiBlbGVtZW50LmRlc2NyaXB0b3IpKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGVsZW1lbnQpLCB7IGZpbmlzaGVyKGNsYXp6KSB7XG4gICAgICAgICAgICAgICAgY2xhenouY3JlYXRlUHJvcGVydHkoZWxlbWVudC5rZXksIG9wdGlvbnMpO1xuICAgICAgICAgICAgfSB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGNyZWF0ZVByb3BlcnR5KCkgdGFrZXMgY2FyZSBvZiBkZWZpbmluZyB0aGUgcHJvcGVydHksIGJ1dCB3ZSBzdGlsbFxuICAgICAgICAvLyBtdXN0IHJldHVybiBzb21lIGtpbmQgb2YgZGVzY3JpcHRvciwgc28gcmV0dXJuIGEgZGVzY3JpcHRvciBmb3IgYW5cbiAgICAgICAgLy8gdW51c2VkIHByb3RvdHlwZSBmaWVsZC4gVGhlIGZpbmlzaGVyIGNhbGxzIGNyZWF0ZVByb3BlcnR5KCkuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiAnZmllbGQnLFxuICAgICAgICAgICAga2V5OiBTeW1ib2woKSxcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ293bicsXG4gICAgICAgICAgICBkZXNjcmlwdG9yOiB7fSxcbiAgICAgICAgICAgIC8vIFdoZW4gQGJhYmVsL3BsdWdpbi1wcm9wb3NhbC1kZWNvcmF0b3JzIGltcGxlbWVudHMgaW5pdGlhbGl6ZXJzLFxuICAgICAgICAgICAgLy8gZG8gdGhpcyBpbnN0ZWFkIG9mIHRoZSBpbml0aWFsaXplciBiZWxvdy4gU2VlOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JhYmVsL2JhYmVsL2lzc3Vlcy85MjYwIGV4dHJhczogW1xuICAgICAgICAgICAgLy8gICB7XG4gICAgICAgICAgICAvLyAgICAga2luZDogJ2luaXRpYWxpemVyJyxcbiAgICAgICAgICAgIC8vICAgICBwbGFjZW1lbnQ6ICdvd24nLFxuICAgICAgICAgICAgLy8gICAgIGluaXRpYWxpemVyOiBkZXNjcmlwdG9yLmluaXRpYWxpemVyLFxuICAgICAgICAgICAgLy8gICB9XG4gICAgICAgICAgICAvLyBdLFxuICAgICAgICAgICAgaW5pdGlhbGl6ZXIoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50LmluaXRpYWxpemVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbZWxlbWVudC5rZXldID0gZWxlbWVudC5pbml0aWFsaXplci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaW5pc2hlcihjbGF6eikge1xuICAgICAgICAgICAgICAgIGNsYXp6LmNyZWF0ZVByb3BlcnR5KGVsZW1lbnQua2V5LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59O1xuY29uc3QgbGVnYWN5UHJvcGVydHkgPSAob3B0aW9ucywgcHJvdG8sIG5hbWUpID0+IHtcbiAgICBwcm90by5jb25zdHJ1Y3RvclxuICAgICAgICAuY3JlYXRlUHJvcGVydHkobmFtZSwgb3B0aW9ucyk7XG59O1xuLyoqXG4gKiBBIHByb3BlcnR5IGRlY29yYXRvciB3aGljaCBjcmVhdGVzIGEgTGl0RWxlbWVudCBwcm9wZXJ0eSB3aGljaCByZWZsZWN0cyBhXG4gKiBjb3JyZXNwb25kaW5nIGF0dHJpYnV0ZSB2YWx1ZS4gQSBgUHJvcGVydHlEZWNsYXJhdGlvbmAgbWF5IG9wdGlvbmFsbHkgYmVcbiAqIHN1cHBsaWVkIHRvIGNvbmZpZ3VyZSBwcm9wZXJ0eSBmZWF0dXJlcy5cbiAqXG4gKiBUaGlzIGRlY29yYXRvciBzaG91bGQgb25seSBiZSB1c2VkIGZvciBwdWJsaWMgZmllbGRzLiBQcml2YXRlIG9yIHByb3RlY3RlZFxuICogZmllbGRzIHNob3VsZCB1c2UgdGhlIGludGVybmFsUHJvcGVydHkgZGVjb3JhdG9yLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogICAgIGNsYXNzIE15RWxlbWVudCB7XG4gKiAgICAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuIH0pXG4gKiAgICAgICBjbGlja2VkID0gZmFsc2U7XG4gKiAgICAgfVxuICpcbiAqIEBFeHBvcnREZWNvcmF0ZWRJdGVtc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHkob3B0aW9ucykge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgZGVjb3JhdG9yXG4gICAgcmV0dXJuIChwcm90b09yRGVzY3JpcHRvciwgbmFtZSkgPT4gKG5hbWUgIT09IHVuZGVmaW5lZCkgP1xuICAgICAgICBsZWdhY3lQcm9wZXJ0eShvcHRpb25zLCBwcm90b09yRGVzY3JpcHRvciwgbmFtZSkgOlxuICAgICAgICBzdGFuZGFyZFByb3BlcnR5KG9wdGlvbnMsIHByb3RvT3JEZXNjcmlwdG9yKTtcbn1cbi8qKlxuICogRGVjbGFyZXMgYSBwcml2YXRlIG9yIHByb3RlY3RlZCBwcm9wZXJ0eSB0aGF0IHN0aWxsIHRyaWdnZXJzIHVwZGF0ZXMgdG8gdGhlXG4gKiBlbGVtZW50IHdoZW4gaXQgY2hhbmdlcy5cbiAqXG4gKiBQcm9wZXJ0aWVzIGRlY2xhcmVkIHRoaXMgd2F5IG11c3Qgbm90IGJlIHVzZWQgZnJvbSBIVE1MIG9yIEhUTUwgdGVtcGxhdGluZ1xuICogc3lzdGVtcywgdGhleSdyZSBzb2xlbHkgZm9yIHByb3BlcnRpZXMgaW50ZXJuYWwgdG8gdGhlIGVsZW1lbnQuIFRoZXNlXG4gKiBwcm9wZXJ0aWVzIG1heSBiZSByZW5hbWVkIGJ5IG9wdGltaXphdGlvbiB0b29scyBsaWtlIGNsb3N1cmUgY29tcGlsZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcm5hbFByb3BlcnR5KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcHJvcGVydHkoeyBhdHRyaWJ1dGU6IGZhbHNlLCBoYXNDaGFuZ2VkOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGFzQ2hhbmdlZCB9KTtcbn1cbi8qKlxuICogQSBwcm9wZXJ0eSBkZWNvcmF0b3IgdGhhdCBjb252ZXJ0cyBhIGNsYXNzIHByb3BlcnR5IGludG8gYSBnZXR0ZXIgdGhhdFxuICogZXhlY3V0ZXMgYSBxdWVyeVNlbGVjdG9yIG9uIHRoZSBlbGVtZW50J3MgcmVuZGVyUm9vdC5cbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3IgQSBET01TdHJpbmcgY29udGFpbmluZyBvbmUgb3IgbW9yZSBzZWxlY3RvcnMgdG8gbWF0Y2guXG4gKlxuICogU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvcXVlcnlTZWxlY3RvclxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogICAgIGNsYXNzIE15RWxlbWVudCB7XG4gKiAgICAgICBAcXVlcnkoJyNmaXJzdCcpXG4gKiAgICAgICBmaXJzdDtcbiAqXG4gKiAgICAgICByZW5kZXIoKSB7XG4gKiAgICAgICAgIHJldHVybiBodG1sYFxuICogICAgICAgICAgIDxkaXYgaWQ9XCJmaXJzdFwiPjwvZGl2PlxuICogICAgICAgICAgIDxkaXYgaWQ9XCJzZWNvbmRcIj48L2Rpdj5cbiAqICAgICAgICAgYDtcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVlcnkoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gKHByb3RvT3JEZXNjcmlwdG9yLCBcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGRlY29yYXRvclxuICAgIG5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJSb290LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiAobmFtZSAhPT0gdW5kZWZpbmVkKSA/XG4gICAgICAgICAgICBsZWdhY3lRdWVyeShkZXNjcmlwdG9yLCBwcm90b09yRGVzY3JpcHRvciwgbmFtZSkgOlxuICAgICAgICAgICAgc3RhbmRhcmRRdWVyeShkZXNjcmlwdG9yLCBwcm90b09yRGVzY3JpcHRvcik7XG4gICAgfTtcbn1cbi8vIE5vdGUsIGluIHRoZSBmdXR1cmUsIHdlIG1heSBleHRlbmQgdGhpcyBkZWNvcmF0b3IgdG8gc3VwcG9ydCB0aGUgdXNlIGNhc2Vcbi8vIHdoZXJlIHRoZSBxdWVyaWVkIGVsZW1lbnQgbWF5IG5lZWQgdG8gZG8gd29yayB0byBiZWNvbWUgcmVhZHkgdG8gaW50ZXJhY3Rcbi8vIHdpdGggKGUuZy4gbG9hZCBzb21lIGltcGxlbWVudGF0aW9uIGNvZGUpLiBJZiBzbywgd2UgbWlnaHQgZWxlY3QgdG9cbi8vIGFkZCBhIHNlY29uZCBhcmd1bWVudCBkZWZpbmluZyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHJ1biB0byBtYWtlIHRoZVxuLy8gcXVlcmllZCBlbGVtZW50IGxvYWRlZC91cGRhdGVkL3JlYWR5LlxuLyoqXG4gKiBBIHByb3BlcnR5IGRlY29yYXRvciB0aGF0IGNvbnZlcnRzIGEgY2xhc3MgcHJvcGVydHkgaW50byBhIGdldHRlciB0aGF0XG4gKiByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSByZXN1bHQgb2YgYSBxdWVyeVNlbGVjdG9yIG9uIHRoZVxuICogZWxlbWVudCdzIHJlbmRlclJvb3QgZG9uZSBhZnRlciB0aGUgZWxlbWVudCdzIGB1cGRhdGVDb21wbGV0ZWAgcHJvbWlzZVxuICogcmVzb2x2ZXMuIFdoZW4gdGhlIHF1ZXJpZWQgcHJvcGVydHkgbWF5IGNoYW5nZSB3aXRoIGVsZW1lbnQgc3RhdGUsIHRoaXNcbiAqIGRlY29yYXRvciBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIHJlcXVpcmluZyB1c2VycyB0byBhd2FpdCB0aGVcbiAqIGB1cGRhdGVDb21wbGV0ZWAgYmVmb3JlIGFjY2Vzc2luZyB0aGUgcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIEEgRE9NU3RyaW5nIGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgc2VsZWN0b3JzIHRvIG1hdGNoLlxuICpcbiAqIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RvY3VtZW50L3F1ZXJ5U2VsZWN0b3JcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICBjbGFzcyBNeUVsZW1lbnQge1xuICogICAgICAgQHF1ZXJ5QXN5bmMoJyNmaXJzdCcpXG4gKiAgICAgICBmaXJzdDtcbiAqXG4gKiAgICAgICByZW5kZXIoKSB7XG4gKiAgICAgICAgIHJldHVybiBodG1sYFxuICogICAgICAgICAgIDxkaXYgaWQ9XCJmaXJzdFwiPjwvZGl2PlxuICogICAgICAgICAgIDxkaXYgaWQ9XCJzZWNvbmRcIj48L2Rpdj5cbiAqICAgICAgICAgYDtcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKlxuICogICAgIC8vIGV4dGVybmFsIHVzYWdlXG4gKiAgICAgYXN5bmMgZG9Tb21ldGhpbmdXaXRoRmlyc3QoKSB7XG4gKiAgICAgIChhd2FpdCBhTXlFbGVtZW50LmZpcnN0KS5kb1NvbWV0aGluZygpO1xuICogICAgIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5QXN5bmMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gKHByb3RvT3JEZXNjcmlwdG9yLCBcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGRlY29yYXRvclxuICAgIG5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIGFzeW5jIGdldCgpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUNvbXBsZXRlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlclJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIChuYW1lICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgICAgIGxlZ2FjeVF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yLCBuYW1lKSA6XG4gICAgICAgICAgICBzdGFuZGFyZFF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yKTtcbiAgICB9O1xufVxuLyoqXG4gKiBBIHByb3BlcnR5IGRlY29yYXRvciB0aGF0IGNvbnZlcnRzIGEgY2xhc3MgcHJvcGVydHkgaW50byBhIGdldHRlclxuICogdGhhdCBleGVjdXRlcyBhIHF1ZXJ5U2VsZWN0b3JBbGwgb24gdGhlIGVsZW1lbnQncyByZW5kZXJSb290LlxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciBBIERPTVN0cmluZyBjb250YWluaW5nIG9uZSBvciBtb3JlIHNlbGVjdG9ycyB0byBtYXRjaC5cbiAqXG4gKiBTZWU6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvcXVlcnlTZWxlY3RvckFsbFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogICAgIGNsYXNzIE15RWxlbWVudCB7XG4gKiAgICAgICBAcXVlcnlBbGwoJ2RpdicpXG4gKiAgICAgICBkaXZzO1xuICpcbiAqICAgICAgIHJlbmRlcigpIHtcbiAqICAgICAgICAgcmV0dXJuIGh0bWxgXG4gKiAgICAgICAgICAgPGRpdiBpZD1cImZpcnN0XCI+PC9kaXY+XG4gKiAgICAgICAgICAgPGRpdiBpZD1cInNlY29uZFwiPjwvZGl2PlxuICogICAgICAgICBgO1xuICogICAgICAgfVxuICogICAgIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5QWxsKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIChwcm90b09yRGVzY3JpcHRvciwgXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBkZWNvcmF0b3JcbiAgICBuYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyUm9vdC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKG5hbWUgIT09IHVuZGVmaW5lZCkgP1xuICAgICAgICAgICAgbGVnYWN5UXVlcnkoZGVzY3JpcHRvciwgcHJvdG9PckRlc2NyaXB0b3IsIG5hbWUpIDpcbiAgICAgICAgICAgIHN0YW5kYXJkUXVlcnkoZGVzY3JpcHRvciwgcHJvdG9PckRlc2NyaXB0b3IpO1xuICAgIH07XG59XG5jb25zdCBsZWdhY3lRdWVyeSA9IChkZXNjcmlwdG9yLCBwcm90bywgbmFtZSkgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgbmFtZSwgZGVzY3JpcHRvcik7XG59O1xuY29uc3Qgc3RhbmRhcmRRdWVyeSA9IChkZXNjcmlwdG9yLCBlbGVtZW50KSA9PiAoe1xuICAgIGtpbmQ6ICdtZXRob2QnLFxuICAgIHBsYWNlbWVudDogJ3Byb3RvdHlwZScsXG4gICAga2V5OiBlbGVtZW50LmtleSxcbiAgICBkZXNjcmlwdG9yLFxufSk7XG5jb25zdCBzdGFuZGFyZEV2ZW50T3B0aW9ucyA9IChvcHRpb25zLCBlbGVtZW50KSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZWxlbWVudCksIHsgZmluaXNoZXIoY2xhenopIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY2xhenoucHJvdG90eXBlW2VsZW1lbnQua2V5XSwgb3B0aW9ucyk7XG4gICAgICAgIH0gfSk7XG59O1xuY29uc3QgbGVnYWN5RXZlbnRPcHRpb25zID0gXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGxlZ2FjeSBkZWNvcmF0b3JcbihvcHRpb25zLCBwcm90bywgbmFtZSkgPT4ge1xuICAgIE9iamVjdC5hc3NpZ24ocHJvdG9bbmFtZV0sIG9wdGlvbnMpO1xufTtcbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lciBvcHRpb25zIHRvIGEgbWV0aG9kIHVzZWQgYXMgYW4gZXZlbnQgbGlzdGVuZXIgaW4gYVxuICogbGl0LWh0bWwgdGVtcGxhdGUuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgQW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGV2ZW50IGxpc3RlbmVyIG9wdGlvbnMgYXMgYWNjZXB0ZWQgYnlcbiAqIGBFdmVudFRhcmdldCNhZGRFdmVudExpc3RlbmVyYCBhbmQgYEV2ZW50VGFyZ2V0I3JlbW92ZUV2ZW50TGlzdGVuZXJgLlxuICpcbiAqIEN1cnJlbnQgYnJvd3NlcnMgc3VwcG9ydCB0aGUgYGNhcHR1cmVgLCBgcGFzc2l2ZWAsIGFuZCBgb25jZWAgb3B0aW9ucy4gU2VlOlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXIjUGFyYW1ldGVyc1xuICpcbiAqIEBleGFtcGxlXG4gKlxuICogICAgIGNsYXNzIE15RWxlbWVudCB7XG4gKiAgICAgICBjbGlja2VkID0gZmFsc2U7XG4gKlxuICogICAgICAgcmVuZGVyKCkge1xuICogICAgICAgICByZXR1cm4gaHRtbGBcbiAqICAgICAgICAgICA8ZGl2IEBjbGljaz0ke3RoaXMuX29uQ2xpY2t9YD5cbiAqICAgICAgICAgICAgIDxidXR0b24+PC9idXR0b24+XG4gKiAgICAgICAgICAgPC9kaXY+XG4gKiAgICAgICAgIGA7XG4gKiAgICAgICB9XG4gKlxuICogICAgICAgQGV2ZW50T3B0aW9ucyh7Y2FwdHVyZTogdHJ1ZX0pXG4gKiAgICAgICBfb25DbGljayhlKSB7XG4gKiAgICAgICAgIHRoaXMuY2xpY2tlZCA9IHRydWU7XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAvLyBSZXR1cm4gdmFsdWUgdHlwZWQgYXMgYW55IHRvIHByZXZlbnQgVHlwZVNjcmlwdCBmcm9tIGNvbXBsYWluaW5nIHRoYXRcbiAgICAvLyBzdGFuZGFyZCBkZWNvcmF0b3IgZnVuY3Rpb24gc2lnbmF0dXJlIGRvZXMgbm90IG1hdGNoIFR5cGVTY3JpcHQgZGVjb3JhdG9yXG4gICAgLy8gc2lnbmF0dXJlXG4gICAgLy8gVE9ETyhrc2NoYWFmKTogdW5jbGVhciB3aHkgaXQgd2FzIG9ubHkgZmFpbGluZyBvbiB0aGlzIGRlY29yYXRvciBhbmQgbm90XG4gICAgLy8gdGhlIG90aGVyc1xuICAgIHJldHVybiAoKHByb3RvT3JEZXNjcmlwdG9yLCBuYW1lKSA9PiAobmFtZSAhPT0gdW5kZWZpbmVkKSA/XG4gICAgICAgIGxlZ2FjeUV2ZW50T3B0aW9ucyhvcHRpb25zLCBwcm90b09yRGVzY3JpcHRvciwgbmFtZSkgOlxuICAgICAgICBzdGFuZGFyZEV2ZW50T3B0aW9ucyhvcHRpb25zLCBwcm90b09yRGVzY3JpcHRvcikpO1xufVxuLyoqXG4gKiBBIHByb3BlcnR5IGRlY29yYXRvciB0aGF0IGNvbnZlcnRzIGEgY2xhc3MgcHJvcGVydHkgaW50byBhIGdldHRlciB0aGF0XG4gKiByZXR1cm5zIHRoZSBgYXNzaWduZWROb2Rlc2Agb2YgdGhlIGdpdmVuIG5hbWVkIGBzbG90YC4gTm90ZSwgdGhlIHR5cGUgb2ZcbiAqIHRoaXMgcHJvcGVydHkgc2hvdWxkIGJlIGFubm90YXRlZCBhcyBgTm9kZUxpc3RPZjxIVE1MRWxlbWVudD5gLlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5QXNzaWduZWROb2RlcyhzbG90TmFtZSA9ICcnLCBmbGF0dGVuID0gZmFsc2UpIHtcbiAgICByZXR1cm4gKHByb3RvT3JEZXNjcmlwdG9yLCBcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGRlY29yYXRvclxuICAgIG5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IGBzbG90JHtzbG90TmFtZSA/IGBbbmFtZT0ke3Nsb3ROYW1lfV1gIDogJyd9YDtcbiAgICAgICAgICAgICAgICBjb25zdCBzbG90ID0gdGhpcy5yZW5kZXJSb290LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzbG90ICYmIHNsb3QuYXNzaWduZWROb2Rlcyh7IGZsYXR0ZW4gfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIChuYW1lICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgICAgIGxlZ2FjeVF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yLCBuYW1lKSA6XG4gICAgICAgICAgICBzdGFuZGFyZFF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb3JhdG9ycy5qcy5tYXAiLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTkgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZVxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXNcbnBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnRcbmZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmV4cG9ydCBjb25zdCBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMgPSAoJ2Fkb3B0ZWRTdHlsZVNoZWV0cycgaW4gRG9jdW1lbnQucHJvdG90eXBlKSAmJlxuICAgICgncmVwbGFjZScgaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUpO1xuY29uc3QgY29uc3RydWN0aW9uVG9rZW4gPSBTeW1ib2woKTtcbmV4cG9ydCBjbGFzcyBDU1NSZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKGNzc1RleHQsIHNhZmVUb2tlbikge1xuICAgICAgICBpZiAoc2FmZVRva2VuICE9PSBjb25zdHJ1Y3Rpb25Ub2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDU1NSZXN1bHQgaXMgbm90IGNvbnN0cnVjdGFibGUuIFVzZSBgdW5zYWZlQ1NTYCBvciBgY3NzYCBpbnN0ZWFkLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3NzVGV4dCA9IGNzc1RleHQ7XG4gICAgfVxuICAgIC8vIE5vdGUsIHRoaXMgaXMgYSBnZXR0ZXIgc28gdGhhdCBpdCdzIGxhenkuIEluIHByYWN0aWNlLCB0aGlzIG1lYW5zXG4gICAgLy8gc3R5bGVzaGVldHMgYXJlIG5vdCBjcmVhdGVkIHVudGlsIHRoZSBmaXJzdCBlbGVtZW50IGluc3RhbmNlIGlzIG1hZGUuXG4gICAgZ2V0IHN0eWxlU2hlZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdHlsZVNoZWV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIE5vdGUsIGlmIGBhZG9wdGVkU3R5bGVTaGVldHNgIGlzIHN1cHBvcnRlZCB0aGVuIHdlIGFzc3VtZSBDU1NTdHlsZVNoZWV0XG4gICAgICAgICAgICAvLyBpcyBjb25zdHJ1Y3RhYmxlLlxuICAgICAgICAgICAgaWYgKHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlU2hlZXQgPSBuZXcgQ1NTU3R5bGVTaGVldCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlU2hlZXQucmVwbGFjZVN5bmModGhpcy5jc3NUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlU2hlZXQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHlsZVNoZWV0O1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3NzVGV4dDtcbiAgICB9XG59XG4vKipcbiAqIFdyYXAgYSB2YWx1ZSBmb3IgaW50ZXJwb2xhdGlvbiBpbiBhIGNzcyB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbC5cbiAqXG4gKiBUaGlzIGlzIHVuc2FmZSBiZWNhdXNlIHVudHJ1c3RlZCBDU1MgdGV4dCBjYW4gYmUgdXNlZCB0byBwaG9uZSBob21lXG4gKiBvciBleGZpbHRyYXRlIGRhdGEgdG8gYW4gYXR0YWNrZXIgY29udHJvbGxlZCBzaXRlLiBUYWtlIGNhcmUgdG8gb25seSB1c2VcbiAqIHRoaXMgd2l0aCB0cnVzdGVkIGlucHV0LlxuICovXG5leHBvcnQgY29uc3QgdW5zYWZlQ1NTID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBDU1NSZXN1bHQoU3RyaW5nKHZhbHVlKSwgY29uc3RydWN0aW9uVG9rZW4pO1xufTtcbmNvbnN0IHRleHRGcm9tQ1NTUmVzdWx0ID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQ1NTUmVzdWx0KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5jc3NUZXh0O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVmFsdWUgcGFzc2VkIHRvICdjc3MnIGZ1bmN0aW9uIG11c3QgYmUgYSAnY3NzJyBmdW5jdGlvbiByZXN1bHQ6ICR7dmFsdWV9LiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dFxuICAgICAgICAgICAgdGFrZSBjYXJlIHRvIGVuc3VyZSBwYWdlIHNlY3VyaXR5LmApO1xuICAgIH1cbn07XG4vKipcbiAqIFRlbXBsYXRlIHRhZyB3aGljaCB3aGljaCBjYW4gYmUgdXNlZCB3aXRoIExpdEVsZW1lbnQncyBgc3R5bGVgIHByb3BlcnR5IHRvXG4gKiBzZXQgZWxlbWVudCBzdHlsZXMuIEZvciBzZWN1cml0eSByZWFzb25zLCBvbmx5IGxpdGVyYWwgc3RyaW5nIHZhbHVlcyBtYXkgYmVcbiAqIHVzZWQuIFRvIGluY29ycG9yYXRlIG5vbi1saXRlcmFsIHZhbHVlcyBgdW5zYWZlQ1NTYCBtYXkgYmUgdXNlZCBpbnNpZGUgYVxuICogdGVtcGxhdGUgc3RyaW5nIHBhcnQuXG4gKi9cbmV4cG9ydCBjb25zdCBjc3MgPSAoc3RyaW5ncywgLi4udmFsdWVzKSA9PiB7XG4gICAgY29uc3QgY3NzVGV4dCA9IHZhbHVlcy5yZWR1Y2UoKGFjYywgdiwgaWR4KSA9PiBhY2MgKyB0ZXh0RnJvbUNTU1Jlc3VsdCh2KSArIHN0cmluZ3NbaWR4ICsgMV0sIHN0cmluZ3NbMF0pO1xuICAgIHJldHVybiBuZXcgQ1NTUmVzdWx0KGNzc1RleHQsIGNvbnN0cnVjdGlvblRva2VuKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MtdGFnLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ2xpdC1odG1sL2xpYi9zaGFkeS1yZW5kZXIuanMnO1xuaW1wb3J0IHsgVXBkYXRpbmdFbGVtZW50IH0gZnJvbSAnLi9saWIvdXBkYXRpbmctZWxlbWVudC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi91cGRhdGluZy1lbGVtZW50LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL2RlY29yYXRvcnMuanMnO1xuZXhwb3J0IHsgaHRtbCwgc3ZnLCBUZW1wbGF0ZVJlc3VsdCwgU1ZHVGVtcGxhdGVSZXN1bHQgfSBmcm9tICdsaXQtaHRtbC9saXQtaHRtbC5qcyc7XG5pbXBvcnQgeyBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMgfSBmcm9tICcuL2xpYi9jc3MtdGFnLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL2Nzcy10YWcuanMnO1xuLy8gSU1QT1JUQU5UOiBkbyBub3QgY2hhbmdlIHRoZSBwcm9wZXJ0eSBuYW1lIG9yIHRoZSBhc3NpZ25tZW50IGV4cHJlc3Npb24uXG4vLyBUaGlzIGxpbmUgd2lsbCBiZSB1c2VkIGluIHJlZ2V4ZXMgdG8gc2VhcmNoIGZvciBMaXRFbGVtZW50IHVzYWdlLlxuLy8gVE9ETyhqdXN0aW5mYWduYW5pKTogaW5qZWN0IHZlcnNpb24gbnVtYmVyIGF0IGJ1aWxkIHRpbWVcbih3aW5kb3dbJ2xpdEVsZW1lbnRWZXJzaW9ucyddIHx8ICh3aW5kb3dbJ2xpdEVsZW1lbnRWZXJzaW9ucyddID0gW10pKVxuICAgIC5wdXNoKCcyLjMuMScpO1xuLyoqXG4gKiBTZW50aW5hbCB2YWx1ZSB1c2VkIHRvIGF2b2lkIGNhbGxpbmcgbGl0LWh0bWwncyByZW5kZXIgZnVuY3Rpb24gd2hlblxuICogc3ViY2xhc3NlcyBkbyBub3QgaW1wbGVtZW50IGByZW5kZXJgXG4gKi9cbmNvbnN0IHJlbmRlck5vdEltcGxlbWVudGVkID0ge307XG5leHBvcnQgY2xhc3MgTGl0RWxlbWVudCBleHRlbmRzIFVwZGF0aW5nRWxlbWVudCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBhcnJheSBvZiBzdHlsZXMgdG8gYXBwbHkgdG8gdGhlIGVsZW1lbnQuXG4gICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gaW50ZWdyYXRlIGludG8gYSBzdHlsZSBtYW5hZ2VtZW50IHN5c3RlbS5cbiAgICAgKlxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGdldFN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGVzO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBzdGF0aWMgX2dldFVuaXF1ZVN0eWxlcygpIHtcbiAgICAgICAgLy8gT25seSBnYXRoZXIgc3R5bGVzIG9uY2UgcGVyIGNsYXNzXG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19zdHlsZXMnLCB0aGlzKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBUYWtlIGNhcmUgbm90IHRvIGNhbGwgYHRoaXMuZ2V0U3R5bGVzKClgIG11bHRpcGxlIHRpbWVzIHNpbmNlIHRoaXNcbiAgICAgICAgLy8gZ2VuZXJhdGVzIG5ldyBDU1NSZXN1bHRzIGVhY2ggdGltZS5cbiAgICAgICAgLy8gVE9ETyhzb3J2ZWxsKTogU2luY2Ugd2UgZG8gbm90IGNhY2hlIENTU1Jlc3VsdHMgYnkgaW5wdXQsIGFueVxuICAgICAgICAvLyBzaGFyZWQgc3R5bGVzIHdpbGwgZ2VuZXJhdGUgbmV3IHN0eWxlc2hlZXQgb2JqZWN0cywgd2hpY2ggaXMgd2FzdGVmdWwuXG4gICAgICAgIC8vIFRoaXMgc2hvdWxkIGJlIGFkZHJlc3NlZCB3aGVuIGEgYnJvd3NlciBzaGlwcyBjb25zdHJ1Y3RhYmxlXG4gICAgICAgIC8vIHN0eWxlc2hlZXRzLlxuICAgICAgICBjb25zdCB1c2VyU3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICAgICAgaWYgKHVzZXJTdHlsZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fc3R5bGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh1c2VyU3R5bGVzKSkge1xuICAgICAgICAgICAgLy8gRGUtZHVwbGljYXRlIHN0eWxlcyBwcmVzZXJ2aW5nIHRoZSBfbGFzdF8gaW5zdGFuY2UgaW4gdGhlIHNldC5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gdG8gYXZvaWQgZHVwbGljYXRlZCBzdHlsZXMgdGhhdCBjYW5cbiAgICAgICAgICAgIC8vIG9jY3VyIGVzcGVjaWFsbHkgd2hlbiBjb21wb3NpbmcgdmlhIHN1YmNsYXNzaW5nLlxuICAgICAgICAgICAgLy8gVGhlIGxhc3QgaXRlbSBpcyBrZXB0IHRvIHRyeSB0byBwcmVzZXJ2ZSB0aGUgY2FzY2FkZSBvcmRlciB3aXRoIHRoZVxuICAgICAgICAgICAgLy8gYXNzdW1wdGlvbiB0aGF0IGl0J3MgbW9zdCBpbXBvcnRhbnQgdGhhdCBsYXN0IGFkZGVkIHN0eWxlcyBvdmVycmlkZVxuICAgICAgICAgICAgLy8gcHJldmlvdXMgc3R5bGVzLlxuICAgICAgICAgICAgY29uc3QgYWRkU3R5bGVzID0gKHN0eWxlcywgc2V0KSA9PiBzdHlsZXMucmVkdWNlUmlnaHQoKHNldCwgcykgPT4gXG4gICAgICAgICAgICAvLyBOb3RlOiBPbiBJRSBzZXQuYWRkKCkgZG9lcyBub3QgcmV0dXJuIHRoZSBzZXRcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkocykgPyBhZGRTdHlsZXMocywgc2V0KSA6IChzZXQuYWRkKHMpLCBzZXQpLCBzZXQpO1xuICAgICAgICAgICAgLy8gQXJyYXkuZnJvbSBkb2VzIG5vdCB3b3JrIG9uIFNldCBpbiBJRSwgb3RoZXJ3aXNlIHJldHVyblxuICAgICAgICAgICAgLy8gQXJyYXkuZnJvbShhZGRTdHlsZXModXNlclN0eWxlcywgbmV3IFNldDxDU1NSZXN1bHQ+KCkpKS5yZXZlcnNlKClcbiAgICAgICAgICAgIGNvbnN0IHNldCA9IGFkZFN0eWxlcyh1c2VyU3R5bGVzLCBuZXcgU2V0KCkpO1xuICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gW107XG4gICAgICAgICAgICBzZXQuZm9yRWFjaCgodikgPT4gc3R5bGVzLnVuc2hpZnQodikpO1xuICAgICAgICAgICAgdGhpcy5fc3R5bGVzID0gc3R5bGVzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3R5bGVzID0gW3VzZXJTdHlsZXNdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGVsZW1lbnQgaW5pdGlhbGl6YXRpb24uIEJ5IGRlZmF1bHQgdGhpcyBjYWxscyBgY3JlYXRlUmVuZGVyUm9vdGBcbiAgICAgKiB0byBjcmVhdGUgdGhlIGVsZW1lbnQgYHJlbmRlclJvb3RgIG5vZGUgYW5kIGNhcHR1cmVzIGFueSBwcmUtc2V0IHZhbHVlcyBmb3JcbiAgICAgKiByZWdpc3RlcmVkIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLl9nZXRVbmlxdWVTdHlsZXMoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJSb290ID1cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyUm9vdCgpO1xuICAgICAgICAvLyBOb3RlLCBpZiByZW5kZXJSb290IGlzIG5vdCBhIHNoYWRvd1Jvb3QsIHN0eWxlcyB3b3VsZC9jb3VsZCBhcHBseSB0byB0aGVcbiAgICAgICAgLy8gZWxlbWVudCdzIGdldFJvb3ROb2RlKCkuIFdoaWxlIHRoaXMgY291bGQgYmUgZG9uZSwgd2UncmUgY2hvb3Npbmcgbm90IHRvXG4gICAgICAgIC8vIHN1cHBvcnQgdGhpcyBub3cgc2luY2UgaXQgd291bGQgcmVxdWlyZSBkaWZmZXJlbnQgbG9naWMgYXJvdW5kIGRlLWR1cGluZy5cbiAgICAgICAgaWYgKHdpbmRvdy5TaGFkb3dSb290ICYmIHRoaXMucmVuZGVyUm9vdCBpbnN0YW5jZW9mIHdpbmRvdy5TaGFkb3dSb290KSB7XG4gICAgICAgICAgICB0aGlzLmFkb3B0U3R5bGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbm9kZSBpbnRvIHdoaWNoIHRoZSBlbGVtZW50IHNob3VsZCByZW5kZXIgYW5kIGJ5IGRlZmF1bHRcbiAgICAgKiBjcmVhdGVzIGFuZCByZXR1cm5zIGFuIG9wZW4gc2hhZG93Um9vdC4gSW1wbGVtZW50IHRvIGN1c3RvbWl6ZSB3aGVyZSB0aGVcbiAgICAgKiBlbGVtZW50J3MgRE9NIGlzIHJlbmRlcmVkLiBGb3IgZXhhbXBsZSwgdG8gcmVuZGVyIGludG8gdGhlIGVsZW1lbnQnc1xuICAgICAqIGNoaWxkTm9kZXMsIHJldHVybiBgdGhpc2AuXG4gICAgICogQHJldHVybnMge0VsZW1lbnR8RG9jdW1lbnRGcmFnbWVudH0gUmV0dXJucyBhIG5vZGUgaW50byB3aGljaCB0byByZW5kZXIuXG4gICAgICovXG4gICAgY3JlYXRlUmVuZGVyUm9vdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHN0eWxpbmcgdG8gdGhlIGVsZW1lbnQgc2hhZG93Um9vdCB1c2luZyB0aGUgYHN0YXRpYyBnZXQgc3R5bGVzYFxuICAgICAqIHByb3BlcnR5LiBTdHlsaW5nIHdpbGwgYXBwbHkgdXNpbmcgYHNoYWRvd1Jvb3QuYWRvcHRlZFN0eWxlU2hlZXRzYCB3aGVyZVxuICAgICAqIGF2YWlsYWJsZSBhbmQgd2lsbCBmYWxsYmFjayBvdGhlcndpc2UuIFdoZW4gU2hhZG93IERPTSBpcyBwb2x5ZmlsbGVkLFxuICAgICAqIFNoYWR5Q1NTIHNjb3BlcyBzdHlsZXMgYW5kIGFkZHMgdGhlbSB0byB0aGUgZG9jdW1lbnQuIFdoZW4gU2hhZG93IERPTVxuICAgICAqIGlzIGF2YWlsYWJsZSBidXQgYGFkb3B0ZWRTdHlsZVNoZWV0c2AgaXMgbm90LCBzdHlsZXMgYXJlIGFwcGVuZGVkIHRvIHRoZVxuICAgICAqIGVuZCBvZiB0aGUgYHNoYWRvd1Jvb3RgIHRvIFttaW1pYyBzcGVjXG4gICAgICogYmVoYXZpb3JdKGh0dHBzOi8vd2ljZy5naXRodWIuaW8vY29uc3RydWN0LXN0eWxlc2hlZXRzLyN1c2luZy1jb25zdHJ1Y3RlZC1zdHlsZXNoZWV0cykuXG4gICAgICovXG4gICAgYWRvcHRTdHlsZXMoKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuY29uc3RydWN0b3IuX3N0eWxlcztcbiAgICAgICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGVyZSBhcmUgdGhyZWUgc2VwYXJhdGUgY2FzZXMgaGVyZSBiYXNlZCBvbiBTaGFkb3cgRE9NIHN1cHBvcnQuXG4gICAgICAgIC8vICgxKSBzaGFkb3dSb290IHBvbHlmaWxsZWQ6IHVzZSBTaGFkeUNTU1xuICAgICAgICAvLyAoMikgc2hhZG93Um9vdC5hZG9wdGVkU3R5bGVTaGVldHMgYXZhaWxhYmxlOiB1c2UgaXQuXG4gICAgICAgIC8vICgzKSBzaGFkb3dSb290LmFkb3B0ZWRTdHlsZVNoZWV0cyBwb2x5ZmlsbGVkOiBhcHBlbmQgc3R5bGVzIGFmdGVyXG4gICAgICAgIC8vIHJlbmRlcmluZ1xuICAgICAgICBpZiAod2luZG93LlNoYWR5Q1NTICE9PSB1bmRlZmluZWQgJiYgIXdpbmRvdy5TaGFkeUNTUy5uYXRpdmVTaGFkb3cpIHtcbiAgICAgICAgICAgIHdpbmRvdy5TaGFkeUNTUy5TY29waW5nU2hpbS5wcmVwYXJlQWRvcHRlZENzc1RleHQoc3R5bGVzLm1hcCgocykgPT4gcy5jc3NUZXh0KSwgdGhpcy5sb2NhbE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cykge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJSb290LmFkb3B0ZWRTdHlsZVNoZWV0cyA9XG4gICAgICAgICAgICAgICAgc3R5bGVzLm1hcCgocykgPT4gcy5zdHlsZVNoZWV0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoaXMgbXVzdCBiZSBkb25lIGFmdGVyIHJlbmRlcmluZyBzbyB0aGUgYWN0dWFsIHN0eWxlIGluc2VydGlvbiBpcyBkb25lXG4gICAgICAgICAgICAvLyBpbiBgdXBkYXRlYC5cbiAgICAgICAgICAgIHRoaXMuX25lZWRzU2hpbUFkb3B0ZWRTdHlsZVNoZWV0cyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIC8vIE5vdGUsIGZpcnN0IHVwZGF0ZS9yZW5kZXIgaGFuZGxlcyBzdHlsZUVsZW1lbnQgc28gd2Ugb25seSBjYWxsIHRoaXMgaWZcbiAgICAgICAgLy8gY29ubmVjdGVkIGFmdGVyIGZpcnN0IHVwZGF0ZS5cbiAgICAgICAgaWYgKHRoaXMuaGFzVXBkYXRlZCAmJiB3aW5kb3cuU2hhZHlDU1MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd2luZG93LlNoYWR5Q1NTLnN0eWxlRWxlbWVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBlbGVtZW50LiBUaGlzIG1ldGhvZCByZWZsZWN0cyBwcm9wZXJ0eSB2YWx1ZXMgdG8gYXR0cmlidXRlc1xuICAgICAqIGFuZCBjYWxscyBgcmVuZGVyYCB0byByZW5kZXIgRE9NIHZpYSBsaXQtaHRtbC4gU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZVxuICAgICAqIHRoaXMgbWV0aG9kIHdpbGwgKm5vdCogdHJpZ2dlciBhbm90aGVyIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0gX2NoYW5nZWRQcm9wZXJ0aWVzIE1hcCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgd2l0aCBvbGQgdmFsdWVzXG4gICAgICovXG4gICAgdXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKSB7XG4gICAgICAgIC8vIFNldHRpbmcgcHJvcGVydGllcyBpbiBgcmVuZGVyYCBzaG91bGQgbm90IHRyaWdnZXIgYW4gdXBkYXRlLiBTaW5jZVxuICAgICAgICAvLyB1cGRhdGVzIGFyZSBhbGxvd2VkIGFmdGVyIHN1cGVyLnVwZGF0ZSwgaXQncyBpbXBvcnRhbnQgdG8gY2FsbCBgcmVuZGVyYFxuICAgICAgICAvLyBiZWZvcmUgdGhhdC5cbiAgICAgICAgY29uc3QgdGVtcGxhdGVSZXN1bHQgPSB0aGlzLnJlbmRlcigpO1xuICAgICAgICBzdXBlci51cGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgICAgICAvLyBJZiByZW5kZXIgaXMgbm90IGltcGxlbWVudGVkIGJ5IHRoZSBjb21wb25lbnQsIGRvbid0IGNhbGwgbGl0LWh0bWwgcmVuZGVyXG4gICAgICAgIGlmICh0ZW1wbGF0ZVJlc3VsdCAhPT0gcmVuZGVyTm90SW1wbGVtZW50ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3JcbiAgICAgICAgICAgICAgICAucmVuZGVyKHRlbXBsYXRlUmVzdWx0LCB0aGlzLnJlbmRlclJvb3QsIHsgc2NvcGVOYW1lOiB0aGlzLmxvY2FsTmFtZSwgZXZlbnRDb250ZXh0OiB0aGlzIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdoZW4gbmF0aXZlIFNoYWRvdyBET00gaXMgdXNlZCBidXQgYWRvcHRlZFN0eWxlcyBhcmUgbm90IHN1cHBvcnRlZCxcbiAgICAgICAgLy8gaW5zZXJ0IHN0eWxpbmcgYWZ0ZXIgcmVuZGVyaW5nIHRvIGVuc3VyZSBhZG9wdGVkU3R5bGVzIGhhdmUgaGlnaGVzdFxuICAgICAgICAvLyBwcmlvcml0eS5cbiAgICAgICAgaWYgKHRoaXMuX25lZWRzU2hpbUFkb3B0ZWRTdHlsZVNoZWV0cykge1xuICAgICAgICAgICAgdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLl9zdHlsZXMuZm9yRWFjaCgocykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IHMuY3NzVGV4dDtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclJvb3QuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlZCBvbiBlYWNoIHVwZGF0ZSB0byBwZXJmb3JtIHJlbmRlcmluZyB0YXNrcy4gVGhpcyBtZXRob2QgbWF5IHJldHVyblxuICAgICAqIGFueSB2YWx1ZSByZW5kZXJhYmxlIGJ5IGxpdC1odG1sJ3MgTm9kZVBhcnQgLSB0eXBpY2FsbHkgYSBUZW1wbGF0ZVJlc3VsdC5cbiAgICAgKiBTZXR0aW5nIHByb3BlcnRpZXMgaW5zaWRlIHRoaXMgbWV0aG9kIHdpbGwgKm5vdCogdHJpZ2dlciB0aGUgZWxlbWVudCB0b1xuICAgICAqIHVwZGF0ZS5cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJOb3RJbXBsZW1lbnRlZDtcbiAgICB9XG59XG4vKipcbiAqIEVuc3VyZSB0aGlzIGNsYXNzIGlzIG1hcmtlZCBhcyBgZmluYWxpemVkYCBhcyBhbiBvcHRpbWl6YXRpb24gZW5zdXJpbmdcbiAqIGl0IHdpbGwgbm90IG5lZWRsZXNzbHkgdHJ5IHRvIGBmaW5hbGl6ZWAuXG4gKlxuICogTm90ZSB0aGlzIHByb3BlcnR5IG5hbWUgaXMgYSBzdHJpbmcgdG8gcHJldmVudCBicmVha2luZyBDbG9zdXJlIEpTIENvbXBpbGVyXG4gKiBvcHRpbWl6YXRpb25zLiBTZWUgdXBkYXRpbmctZWxlbWVudC50cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqL1xuTGl0RWxlbWVudFsnZmluYWxpemVkJ10gPSB0cnVlO1xuLyoqXG4gKiBSZW5kZXIgbWV0aG9kIHVzZWQgdG8gcmVuZGVyIHRoZSB2YWx1ZSB0byB0aGUgZWxlbWVudCdzIERPTS5cbiAqIEBwYXJhbSByZXN1bHQgVGhlIHZhbHVlIHRvIHJlbmRlci5cbiAqIEBwYXJhbSBjb250YWluZXIgTm9kZSBpbnRvIHdoaWNoIHRvIHJlbmRlci5cbiAqIEBwYXJhbSBvcHRpb25zIEVsZW1lbnQgbmFtZS5cbiAqIEBub2NvbGxhcHNlXG4gKi9cbkxpdEVsZW1lbnQucmVuZGVyID0gcmVuZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWVsZW1lbnQuanMubWFwIixudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLCJmdW5jdGlvbiB0KHQsZSxzLGkpe3ZhciBuLHI9YXJndW1lbnRzLmxlbmd0aCxvPXI8Mz9lOm51bGw9PT1pP2k9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHMpOmk7aWYoXCJvYmplY3RcIj09dHlwZW9mIFJlZmxlY3QmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUpbz1SZWZsZWN0LmRlY29yYXRlKHQsZSxzLGkpO2Vsc2UgZm9yKHZhciBhPXQubGVuZ3RoLTE7YT49MDthLS0pKG49dFthXSkmJihvPShyPDM/bihvKTpyPjM/bihlLHMsbyk6bihlLHMpKXx8byk7cmV0dXJuIHI+MyYmbyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscyxvKSxvfWNvbnN0IGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmbnVsbCE9d2luZG93LmN1c3RvbUVsZW1lbnRzJiZ2b2lkIDAhPT13aW5kb3cuY3VzdG9tRWxlbWVudHMucG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayxzPSh0LGUscz1udWxsKT0+e2Zvcig7ZSE9PXM7KXtjb25zdCBzPWUubmV4dFNpYmxpbmc7dC5yZW1vdmVDaGlsZChlKSxlPXN9fSxpPWB7e2xpdC0keyhNYXRoLnJhbmRvbSgpK1wiXCIpLnNsaWNlKDIpfX19YCxuPWBcXHgzYyEtLSR7aX0tLVxceDNlYCxyPVJlZ0V4cChgJHtpfXwke259YCk7Y2xhc3Mgb3tjb25zdHJ1Y3Rvcih0LGUpe3RoaXMucGFydHM9W10sdGhpcy5lbGVtZW50PWU7Y29uc3Qgcz1bXSxuPVtdLG89ZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihlLmNvbnRlbnQsMTMzLG51bGwsITEpO2xldCBsPTAsYz0tMSxwPTA7Y29uc3R7c3RyaW5nczp1LHZhbHVlczp7bGVuZ3RoOl99fT10O2Zvcig7cDxfOyl7Y29uc3QgdD1vLm5leHROb2RlKCk7aWYobnVsbCE9PXQpe2lmKGMrKywxPT09dC5ub2RlVHlwZSl7aWYodC5oYXNBdHRyaWJ1dGVzKCkpe2NvbnN0IGU9dC5hdHRyaWJ1dGVzLHtsZW5ndGg6c309ZTtsZXQgaT0wO2ZvcihsZXQgdD0wO3Q8czt0KyspYShlW3RdLm5hbWUsXCIkbGl0JFwiKSYmaSsrO2Zvcig7aS0tID4wOyl7Y29uc3QgZT11W3BdLHM9ZC5leGVjKGUpWzJdLGk9cy50b0xvd2VyQ2FzZSgpK1wiJGxpdCRcIixuPXQuZ2V0QXR0cmlidXRlKGkpO3QucmVtb3ZlQXR0cmlidXRlKGkpO2NvbnN0IG89bi5zcGxpdChyKTt0aGlzLnBhcnRzLnB1c2goe3R5cGU6XCJhdHRyaWJ1dGVcIixpbmRleDpjLG5hbWU6cyxzdHJpbmdzOm99KSxwKz1vLmxlbmd0aC0xfX1cIlRFTVBMQVRFXCI9PT10LnRhZ05hbWUmJihuLnB1c2godCksby5jdXJyZW50Tm9kZT10LmNvbnRlbnQpfWVsc2UgaWYoMz09PXQubm9kZVR5cGUpe2NvbnN0IGU9dC5kYXRhO2lmKGUuaW5kZXhPZihpKT49MCl7Y29uc3QgaT10LnBhcmVudE5vZGUsbj1lLnNwbGl0KHIpLG89bi5sZW5ndGgtMTtmb3IobGV0IGU9MDtlPG87ZSsrKXtsZXQgcyxyPW5bZV07aWYoXCJcIj09PXIpcz1oKCk7ZWxzZXtjb25zdCB0PWQuZXhlYyhyKTtudWxsIT09dCYmYSh0WzJdLFwiJGxpdCRcIikmJihyPXIuc2xpY2UoMCx0LmluZGV4KSt0WzFdK3RbMl0uc2xpY2UoMCwtNSkrdFszXSkscz1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShyKX1pLmluc2VydEJlZm9yZShzLHQpLHRoaXMucGFydHMucHVzaCh7dHlwZTpcIm5vZGVcIixpbmRleDorK2N9KX1cIlwiPT09bltvXT8oaS5pbnNlcnRCZWZvcmUoaCgpLHQpLHMucHVzaCh0KSk6dC5kYXRhPW5bb10scCs9b319ZWxzZSBpZig4PT09dC5ub2RlVHlwZSlpZih0LmRhdGE9PT1pKXtjb25zdCBlPXQucGFyZW50Tm9kZTtudWxsIT09dC5wcmV2aW91c1NpYmxpbmcmJmMhPT1sfHwoYysrLGUuaW5zZXJ0QmVmb3JlKGgoKSx0KSksbD1jLHRoaXMucGFydHMucHVzaCh7dHlwZTpcIm5vZGVcIixpbmRleDpjfSksbnVsbD09PXQubmV4dFNpYmxpbmc/dC5kYXRhPVwiXCI6KHMucHVzaCh0KSxjLS0pLHArK31lbHNle2xldCBlPS0xO2Zvcig7LTEhPT0oZT10LmRhdGEuaW5kZXhPZihpLGUrMSkpOyl0aGlzLnBhcnRzLnB1c2goe3R5cGU6XCJub2RlXCIsaW5kZXg6LTF9KSxwKyt9fWVsc2Ugby5jdXJyZW50Tm9kZT1uLnBvcCgpfWZvcihjb25zdCB0IG9mIHMpdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQpfX1jb25zdCBhPSh0LGUpPT57Y29uc3Qgcz10Lmxlbmd0aC1lLmxlbmd0aDtyZXR1cm4gcz49MCYmdC5zbGljZShzKT09PWV9LGw9dD0+LTEhPT10LmluZGV4LGg9KCk9PmRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIiksZD0vKFsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKShbXlxcMC1cXHgxRlxceDdGLVxceDlGIFwiJz49L10rKShbIFxceDA5XFx4MGFcXHgwY1xceDBkXSo9WyBcXHgwOVxceDBhXFx4MGNcXHgwZF0qKD86W14gXFx4MDlcXHgwYVxceDBjXFx4MGRcIidgPD49XSp8XCJbXlwiXSp8J1teJ10qKSkkLztmdW5jdGlvbiBjKHQsZSl7Y29uc3R7ZWxlbWVudDp7Y29udGVudDpzfSxwYXJ0czppfT10LG49ZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihzLDEzMyxudWxsLCExKTtsZXQgcj11KGkpLG89aVtyXSxhPS0xLGw9MDtjb25zdCBoPVtdO2xldCBkPW51bGw7Zm9yKDtuLm5leHROb2RlKCk7KXthKys7Y29uc3QgdD1uLmN1cnJlbnROb2RlO2Zvcih0LnByZXZpb3VzU2libGluZz09PWQmJihkPW51bGwpLGUuaGFzKHQpJiYoaC5wdXNoKHQpLG51bGw9PT1kJiYoZD10KSksbnVsbCE9PWQmJmwrKzt2b2lkIDAhPT1vJiZvLmluZGV4PT09YTspby5pbmRleD1udWxsIT09ZD8tMTpvLmluZGV4LWwscj11KGksciksbz1pW3JdfWguZm9yRWFjaCh0PT50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCkpfWNvbnN0IHA9dD0+e2xldCBlPTExPT09dC5ub2RlVHlwZT8wOjE7Y29uc3Qgcz1kb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKHQsMTMzLG51bGwsITEpO2Zvcig7cy5uZXh0Tm9kZSgpOyllKys7cmV0dXJuIGV9LHU9KHQsZT0tMSk9Pntmb3IobGV0IHM9ZSsxO3M8dC5sZW5ndGg7cysrKXtjb25zdCBlPXRbc107aWYobChlKSlyZXR1cm4gc31yZXR1cm4tMX07Y29uc3QgXz1uZXcgV2Vha01hcCxtPXQ9PlwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJl8uaGFzKHQpLGc9e30sZj17fTtjbGFzcyB5e2NvbnN0cnVjdG9yKHQsZSxzKXt0aGlzLl9fcGFydHM9W10sdGhpcy50ZW1wbGF0ZT10LHRoaXMucHJvY2Vzc29yPWUsdGhpcy5vcHRpb25zPXN9dXBkYXRlKHQpe2xldCBlPTA7Zm9yKGNvbnN0IHMgb2YgdGhpcy5fX3BhcnRzKXZvaWQgMCE9PXMmJnMuc2V0VmFsdWUodFtlXSksZSsrO2Zvcihjb25zdCB0IG9mIHRoaXMuX19wYXJ0cyl2b2lkIDAhPT10JiZ0LmNvbW1pdCgpfV9jbG9uZSgpe2NvbnN0IHQ9ZT90aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudC5jbG9uZU5vZGUoITApOmRvY3VtZW50LmltcG9ydE5vZGUodGhpcy50ZW1wbGF0ZS5lbGVtZW50LmNvbnRlbnQsITApLHM9W10saT10aGlzLnRlbXBsYXRlLnBhcnRzLG49ZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcih0LDEzMyxudWxsLCExKTtsZXQgcixvPTAsYT0wLGg9bi5uZXh0Tm9kZSgpO2Zvcig7bzxpLmxlbmd0aDspaWYocj1pW29dLGwocikpe2Zvcig7YTxyLmluZGV4OylhKyssXCJURU1QTEFURVwiPT09aC5ub2RlTmFtZSYmKHMucHVzaChoKSxuLmN1cnJlbnROb2RlPWguY29udGVudCksbnVsbD09PShoPW4ubmV4dE5vZGUoKSkmJihuLmN1cnJlbnROb2RlPXMucG9wKCksaD1uLm5leHROb2RlKCkpO2lmKFwibm9kZVwiPT09ci50eXBlKXtjb25zdCB0PXRoaXMucHJvY2Vzc29yLmhhbmRsZVRleHRFeHByZXNzaW9uKHRoaXMub3B0aW9ucyk7dC5pbnNlcnRBZnRlck5vZGUoaC5wcmV2aW91c1NpYmxpbmcpLHRoaXMuX19wYXJ0cy5wdXNoKHQpfWVsc2UgdGhpcy5fX3BhcnRzLnB1c2goLi4udGhpcy5wcm9jZXNzb3IuaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMoaCxyLm5hbWUsci5zdHJpbmdzLHRoaXMub3B0aW9ucykpO28rK31lbHNlIHRoaXMuX19wYXJ0cy5wdXNoKHZvaWQgMCksbysrO3JldHVybiBlJiYoZG9jdW1lbnQuYWRvcHROb2RlKHQpLGN1c3RvbUVsZW1lbnRzLnVwZ3JhZGUodCkpLHR9fWNvbnN0IHY9YCAke2l9IGA7Y2xhc3MgU3tjb25zdHJ1Y3Rvcih0LGUscyxpKXt0aGlzLnN0cmluZ3M9dCx0aGlzLnZhbHVlcz1lLHRoaXMudHlwZT1zLHRoaXMucHJvY2Vzc29yPWl9Z2V0SFRNTCgpe2NvbnN0IHQ9dGhpcy5zdHJpbmdzLmxlbmd0aC0xO2xldCBlPVwiXCIscz0hMTtmb3IobGV0IHI9MDtyPHQ7cisrKXtjb25zdCB0PXRoaXMuc3RyaW5nc1tyXSxvPXQubGFzdEluZGV4T2YoXCJcXHgzYyEtLVwiKTtzPShvPi0xfHxzKSYmLTE9PT10LmluZGV4T2YoXCItLVxceDNlXCIsbysxKTtjb25zdCBhPWQuZXhlYyh0KTtlKz1udWxsPT09YT90KyhzP3Y6bik6dC5zdWJzdHIoMCxhLmluZGV4KSthWzFdK2FbMl0rXCIkbGl0JFwiK2FbM10raX1yZXR1cm4gZSs9dGhpcy5zdHJpbmdzW3RdLGV9Z2V0VGVtcGxhdGVFbGVtZW50KCl7Y29uc3QgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cmV0dXJuIHQuaW5uZXJIVE1MPXRoaXMuZ2V0SFRNTCgpLHR9fWNsYXNzIHcgZXh0ZW5kcyBTe2dldEhUTUwoKXtyZXR1cm5gPHN2Zz4ke3N1cGVyLmdldEhUTUwoKX08L3N2Zz5gfWdldFRlbXBsYXRlRWxlbWVudCgpe2NvbnN0IHQ9c3VwZXIuZ2V0VGVtcGxhdGVFbGVtZW50KCksZT10LmNvbnRlbnQscz1lLmZpcnN0Q2hpbGQ7cmV0dXJuIGUucmVtb3ZlQ2hpbGQocyksKCh0LGUscz1udWxsLGk9bnVsbCk9Pntmb3IoO2UhPT1zOyl7Y29uc3Qgcz1lLm5leHRTaWJsaW5nO3QuaW5zZXJ0QmVmb3JlKGUsaSksZT1zfX0pKGUscy5maXJzdENoaWxkKSx0fX1jb25zdCBiPXQ9Pm51bGw9PT10fHwhKFwib2JqZWN0XCI9PXR5cGVvZiB0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KSx4PXQ9PkFycmF5LmlzQXJyYXkodCl8fCEoIXR8fCF0W1N5bWJvbC5pdGVyYXRvcl0pO2NsYXNzIFB7Y29uc3RydWN0b3IodCxlLHMpe3RoaXMuZGlydHk9ITAsdGhpcy5lbGVtZW50PXQsdGhpcy5uYW1lPWUsdGhpcy5zdHJpbmdzPXMsdGhpcy5wYXJ0cz1bXTtmb3IobGV0IHQ9MDt0PHMubGVuZ3RoLTE7dCsrKXRoaXMucGFydHNbdF09dGhpcy5fY3JlYXRlUGFydCgpfV9jcmVhdGVQYXJ0KCl7cmV0dXJuIG5ldyBOKHRoaXMpfV9nZXRWYWx1ZSgpe2NvbnN0IHQ9dGhpcy5zdHJpbmdzLGU9dC5sZW5ndGgtMTtsZXQgcz1cIlwiO2ZvcihsZXQgaT0wO2k8ZTtpKyspe3MrPXRbaV07Y29uc3QgZT10aGlzLnBhcnRzW2ldO2lmKHZvaWQgMCE9PWUpe2NvbnN0IHQ9ZS52YWx1ZTtpZihiKHQpfHwheCh0KSlzKz1cInN0cmluZ1wiPT10eXBlb2YgdD90OnQrXCJcIjtlbHNlIGZvcihjb25zdCBlIG9mIHQpcys9XCJzdHJpbmdcIj09dHlwZW9mIGU/ZTplK1wiXCJ9fXJldHVybiBzKz10W2VdLHN9Y29tbWl0KCl7dGhpcy5kaXJ0eSYmKHRoaXMuZGlydHk9ITEsdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsdGhpcy5fZ2V0VmFsdWUoKSkpfX1jbGFzcyBOe2NvbnN0cnVjdG9yKHQpe3RoaXMudmFsdWU9dm9pZCAwLHRoaXMuY29tbWl0dGVyPXR9c2V0VmFsdWUodCl7dD09PWd8fGIodCkmJnQ9PT10aGlzLnZhbHVlfHwodGhpcy52YWx1ZT10LG0odCl8fCh0aGlzLmNvbW1pdHRlci5kaXJ0eT0hMCkpfWNvbW1pdCgpe2Zvcig7bSh0aGlzLnZhbHVlKTspe2NvbnN0IHQ9dGhpcy52YWx1ZTt0aGlzLnZhbHVlPWcsdCh0aGlzKX10aGlzLnZhbHVlIT09ZyYmdGhpcy5jb21taXR0ZXIuY29tbWl0KCl9fWNsYXNzIEN7Y29uc3RydWN0b3IodCl7dGhpcy52YWx1ZT12b2lkIDAsdGhpcy5fX3BlbmRpbmdWYWx1ZT12b2lkIDAsdGhpcy5vcHRpb25zPXR9YXBwZW5kSW50byh0KXt0aGlzLnN0YXJ0Tm9kZT10LmFwcGVuZENoaWxkKGgoKSksdGhpcy5lbmROb2RlPXQuYXBwZW5kQ2hpbGQoaCgpKX1pbnNlcnRBZnRlck5vZGUodCl7dGhpcy5zdGFydE5vZGU9dCx0aGlzLmVuZE5vZGU9dC5uZXh0U2libGluZ31hcHBlbmRJbnRvUGFydCh0KXt0Ll9faW5zZXJ0KHRoaXMuc3RhcnROb2RlPWgoKSksdC5fX2luc2VydCh0aGlzLmVuZE5vZGU9aCgpKX1pbnNlcnRBZnRlclBhcnQodCl7dC5fX2luc2VydCh0aGlzLnN0YXJ0Tm9kZT1oKCkpLHRoaXMuZW5kTm9kZT10LmVuZE5vZGUsdC5lbmROb2RlPXRoaXMuc3RhcnROb2RlfXNldFZhbHVlKHQpe3RoaXMuX19wZW5kaW5nVmFsdWU9dH1jb21taXQoKXtpZihudWxsPT09dGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSlyZXR1cm47Zm9yKDttKHRoaXMuX19wZW5kaW5nVmFsdWUpOyl7Y29uc3QgdD10aGlzLl9fcGVuZGluZ1ZhbHVlO3RoaXMuX19wZW5kaW5nVmFsdWU9Zyx0KHRoaXMpfWNvbnN0IHQ9dGhpcy5fX3BlbmRpbmdWYWx1ZTt0IT09ZyYmKGIodCk/dCE9PXRoaXMudmFsdWUmJnRoaXMuX19jb21taXRUZXh0KHQpOnQgaW5zdGFuY2VvZiBTP3RoaXMuX19jb21taXRUZW1wbGF0ZVJlc3VsdCh0KTp0IGluc3RhbmNlb2YgTm9kZT90aGlzLl9fY29tbWl0Tm9kZSh0KTp4KHQpP3RoaXMuX19jb21taXRJdGVyYWJsZSh0KTp0PT09Zj8odGhpcy52YWx1ZT1mLHRoaXMuY2xlYXIoKSk6dGhpcy5fX2NvbW1pdFRleHQodCkpfV9faW5zZXJ0KHQpe3RoaXMuZW5kTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LHRoaXMuZW5kTm9kZSl9X19jb21taXROb2RlKHQpe3RoaXMudmFsdWUhPT10JiYodGhpcy5jbGVhcigpLHRoaXMuX19pbnNlcnQodCksdGhpcy52YWx1ZT10KX1fX2NvbW1pdFRleHQodCl7Y29uc3QgZT10aGlzLnN0YXJ0Tm9kZS5uZXh0U2libGluZyxzPVwic3RyaW5nXCI9PXR5cGVvZih0PW51bGw9PXQ/XCJcIjp0KT90OnQrXCJcIjtlPT09dGhpcy5lbmROb2RlLnByZXZpb3VzU2libGluZyYmMz09PWUubm9kZVR5cGU/ZS5kYXRhPXM6dGhpcy5fX2NvbW1pdE5vZGUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocykpLHRoaXMudmFsdWU9dH1fX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHQpe2NvbnN0IGU9dGhpcy5vcHRpb25zLnRlbXBsYXRlRmFjdG9yeSh0KTtpZih0aGlzLnZhbHVlIGluc3RhbmNlb2YgeSYmdGhpcy52YWx1ZS50ZW1wbGF0ZT09PWUpdGhpcy52YWx1ZS51cGRhdGUodC52YWx1ZXMpO2Vsc2V7Y29uc3Qgcz1uZXcgeShlLHQucHJvY2Vzc29yLHRoaXMub3B0aW9ucyksaT1zLl9jbG9uZSgpO3MudXBkYXRlKHQudmFsdWVzKSx0aGlzLl9fY29tbWl0Tm9kZShpKSx0aGlzLnZhbHVlPXN9fV9fY29tbWl0SXRlcmFibGUodCl7QXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKXx8KHRoaXMudmFsdWU9W10sdGhpcy5jbGVhcigpKTtjb25zdCBlPXRoaXMudmFsdWU7bGV0IHMsaT0wO2Zvcihjb25zdCBuIG9mIHQpcz1lW2ldLHZvaWQgMD09PXMmJihzPW5ldyBDKHRoaXMub3B0aW9ucyksZS5wdXNoKHMpLDA9PT1pP3MuYXBwZW5kSW50b1BhcnQodGhpcyk6cy5pbnNlcnRBZnRlclBhcnQoZVtpLTFdKSkscy5zZXRWYWx1ZShuKSxzLmNvbW1pdCgpLGkrKztpPGUubGVuZ3RoJiYoZS5sZW5ndGg9aSx0aGlzLmNsZWFyKHMmJnMuZW5kTm9kZSkpfWNsZWFyKHQ9dGhpcy5zdGFydE5vZGUpe3ModGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSx0Lm5leHRTaWJsaW5nLHRoaXMuZW5kTm9kZSl9fWNsYXNzIEV7Y29uc3RydWN0b3IodCxlLHMpe2lmKHRoaXMudmFsdWU9dm9pZCAwLHRoaXMuX19wZW5kaW5nVmFsdWU9dm9pZCAwLDIhPT1zLmxlbmd0aHx8XCJcIiE9PXNbMF18fFwiXCIhPT1zWzFdKXRocm93IEVycm9yKFwiQm9vbGVhbiBhdHRyaWJ1dGVzIGNhbiBvbmx5IGNvbnRhaW4gYSBzaW5nbGUgZXhwcmVzc2lvblwiKTt0aGlzLmVsZW1lbnQ9dCx0aGlzLm5hbWU9ZSx0aGlzLnN0cmluZ3M9c31zZXRWYWx1ZSh0KXt0aGlzLl9fcGVuZGluZ1ZhbHVlPXR9Y29tbWl0KCl7Zm9yKDttKHRoaXMuX19wZW5kaW5nVmFsdWUpOyl7Y29uc3QgdD10aGlzLl9fcGVuZGluZ1ZhbHVlO3RoaXMuX19wZW5kaW5nVmFsdWU9Zyx0KHRoaXMpfWlmKHRoaXMuX19wZW5kaW5nVmFsdWU9PT1nKXJldHVybjtjb25zdCB0PSEhdGhpcy5fX3BlbmRpbmdWYWx1ZTt0aGlzLnZhbHVlIT09dCYmKHQ/dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsXCJcIik6dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpLHRoaXMudmFsdWU9dCksdGhpcy5fX3BlbmRpbmdWYWx1ZT1nfX1jbGFzcyBUIGV4dGVuZHMgUHtjb25zdHJ1Y3Rvcih0LGUscyl7c3VwZXIodCxlLHMpLHRoaXMuc2luZ2xlPTI9PT1zLmxlbmd0aCYmXCJcIj09PXNbMF0mJlwiXCI9PT1zWzFdfV9jcmVhdGVQYXJ0KCl7cmV0dXJuIG5ldyBBKHRoaXMpfV9nZXRWYWx1ZSgpe3JldHVybiB0aGlzLnNpbmdsZT90aGlzLnBhcnRzWzBdLnZhbHVlOnN1cGVyLl9nZXRWYWx1ZSgpfWNvbW1pdCgpe3RoaXMuZGlydHkmJih0aGlzLmRpcnR5PSExLHRoaXMuZWxlbWVudFt0aGlzLm5hbWVdPXRoaXMuX2dldFZhbHVlKCkpfX1jbGFzcyBBIGV4dGVuZHMgTnt9bGV0IFY9ITE7KCgpPT57dHJ5e2NvbnN0IHQ9e2dldCBjYXB0dXJlKCl7cmV0dXJuIFY9ITAsITF9fTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIix0LHQpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLHQsdCl9Y2F0Y2godCl7fX0pKCk7Y2xhc3Mga3tjb25zdHJ1Y3Rvcih0LGUscyl7dGhpcy52YWx1ZT12b2lkIDAsdGhpcy5fX3BlbmRpbmdWYWx1ZT12b2lkIDAsdGhpcy5lbGVtZW50PXQsdGhpcy5ldmVudE5hbWU9ZSx0aGlzLmV2ZW50Q29udGV4dD1zLHRoaXMuX19ib3VuZEhhbmRsZUV2ZW50PXQ9PnRoaXMuaGFuZGxlRXZlbnQodCl9c2V0VmFsdWUodCl7dGhpcy5fX3BlbmRpbmdWYWx1ZT10fWNvbW1pdCgpe2Zvcig7bSh0aGlzLl9fcGVuZGluZ1ZhbHVlKTspe2NvbnN0IHQ9dGhpcy5fX3BlbmRpbmdWYWx1ZTt0aGlzLl9fcGVuZGluZ1ZhbHVlPWcsdCh0aGlzKX1pZih0aGlzLl9fcGVuZGluZ1ZhbHVlPT09ZylyZXR1cm47Y29uc3QgdD10aGlzLl9fcGVuZGluZ1ZhbHVlLGU9dGhpcy52YWx1ZSxzPW51bGw9PXR8fG51bGwhPWUmJih0LmNhcHR1cmUhPT1lLmNhcHR1cmV8fHQub25jZSE9PWUub25jZXx8dC5wYXNzaXZlIT09ZS5wYXNzaXZlKSxpPW51bGwhPXQmJihudWxsPT1lfHxzKTtzJiZ0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSx0aGlzLl9fYm91bmRIYW5kbGVFdmVudCx0aGlzLl9fb3B0aW9ucyksaSYmKHRoaXMuX19vcHRpb25zPU8odCksdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5ldmVudE5hbWUsdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsdGhpcy5fX29wdGlvbnMpKSx0aGlzLnZhbHVlPXQsdGhpcy5fX3BlbmRpbmdWYWx1ZT1nfWhhbmRsZUV2ZW50KHQpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMudmFsdWU/dGhpcy52YWx1ZS5jYWxsKHRoaXMuZXZlbnRDb250ZXh0fHx0aGlzLmVsZW1lbnQsdCk6dGhpcy52YWx1ZS5oYW5kbGVFdmVudCh0KX19Y29uc3QgTz10PT50JiYoVj97Y2FwdHVyZTp0LmNhcHR1cmUscGFzc2l2ZTp0LnBhc3NpdmUsb25jZTp0Lm9uY2V9OnQuY2FwdHVyZSk7ZnVuY3Rpb24gVSh0KXtsZXQgZT1NLmdldCh0LnR5cGUpO3ZvaWQgMD09PWUmJihlPXtzdHJpbmdzQXJyYXk6bmV3IFdlYWtNYXAsa2V5U3RyaW5nOm5ldyBNYXB9LE0uc2V0KHQudHlwZSxlKSk7bGV0IHM9ZS5zdHJpbmdzQXJyYXkuZ2V0KHQuc3RyaW5ncyk7aWYodm9pZCAwIT09cylyZXR1cm4gcztjb25zdCBuPXQuc3RyaW5ncy5qb2luKGkpO3JldHVybiBzPWUua2V5U3RyaW5nLmdldChuKSx2b2lkIDA9PT1zJiYocz1uZXcgbyh0LHQuZ2V0VGVtcGxhdGVFbGVtZW50KCkpLGUua2V5U3RyaW5nLnNldChuLHMpKSxlLnN0cmluZ3NBcnJheS5zZXQodC5zdHJpbmdzLHMpLHN9Y29uc3QgTT1uZXcgTWFwLFI9bmV3IFdlYWtNYXA7Y29uc3Qgej1uZXcgY2xhc3N7aGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnModCxlLHMsaSl7Y29uc3Qgbj1lWzBdO2lmKFwiLlwiPT09bil7cmV0dXJuIG5ldyBUKHQsZS5zbGljZSgxKSxzKS5wYXJ0c31pZihcIkBcIj09PW4pcmV0dXJuW25ldyBrKHQsZS5zbGljZSgxKSxpLmV2ZW50Q29udGV4dCldO2lmKFwiP1wiPT09bilyZXR1cm5bbmV3IEUodCxlLnNsaWNlKDEpLHMpXTtyZXR1cm4gbmV3IFAodCxlLHMpLnBhcnRzfWhhbmRsZVRleHRFeHByZXNzaW9uKHQpe3JldHVybiBuZXcgQyh0KX19O1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJih3aW5kb3cubGl0SHRtbFZlcnNpb25zfHwod2luZG93LmxpdEh0bWxWZXJzaW9ucz1bXSkpLnB1c2goXCIxLjIuMVwiKTtjb25zdCBqPSh0LC4uLmUpPT5uZXcgUyh0LGUsXCJodG1sXCIseiksJD0odCwuLi5lKT0+bmV3IHcodCxlLFwic3ZnXCIseiksTD0odCxlKT0+YCR7dH0tLSR7ZX1gO2xldCBxPSEwO3ZvaWQgMD09PXdpbmRvdy5TaGFkeUNTUz9xPSExOnZvaWQgMD09PXdpbmRvdy5TaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVEb20mJihjb25zb2xlLndhcm4oXCJJbmNvbXBhdGlibGUgU2hhZHlDU1MgdmVyc2lvbiBkZXRlY3RlZC4gUGxlYXNlIHVwZGF0ZSB0byBhdCBsZWFzdCBAd2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanNAMi4wLjIgYW5kIEB3ZWJjb21wb25lbnRzL3NoYWR5Y3NzQDEuMy4xLlwiKSxxPSExKTtjb25zdCBIPXQ9PmU9Pntjb25zdCBzPUwoZS50eXBlLHQpO2xldCBuPU0uZ2V0KHMpO3ZvaWQgMD09PW4mJihuPXtzdHJpbmdzQXJyYXk6bmV3IFdlYWtNYXAsa2V5U3RyaW5nOm5ldyBNYXB9LE0uc2V0KHMsbikpO2xldCByPW4uc3RyaW5nc0FycmF5LmdldChlLnN0cmluZ3MpO2lmKHZvaWQgMCE9PXIpcmV0dXJuIHI7Y29uc3QgYT1lLnN0cmluZ3Muam9pbihpKTtpZihyPW4ua2V5U3RyaW5nLmdldChhKSx2b2lkIDA9PT1yKXtjb25zdCBzPWUuZ2V0VGVtcGxhdGVFbGVtZW50KCk7cSYmd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZURvbShzLHQpLHI9bmV3IG8oZSxzKSxuLmtleVN0cmluZy5zZXQoYSxyKX1yZXR1cm4gbi5zdHJpbmdzQXJyYXkuc2V0KGUuc3RyaW5ncyxyKSxyfSxJPVtcImh0bWxcIixcInN2Z1wiXSxGPW5ldyBTZXQsVz0odCxlLHMpPT57Ri5hZGQodCk7Y29uc3QgaT1zP3MuZWxlbWVudDpkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIiksbj1lLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVwiKSx7bGVuZ3RoOnJ9PW47aWYoMD09PXIpcmV0dXJuIHZvaWQgd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZVN0eWxlcyhpLHQpO2NvbnN0IG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO2ZvcihsZXQgdD0wO3Q8cjt0Kyspe2NvbnN0IGU9blt0XTtlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSksby50ZXh0Q29udGVudCs9ZS50ZXh0Q29udGVudH0odD0+e0kuZm9yRWFjaChlPT57Y29uc3Qgcz1NLmdldChMKGUsdCkpO3ZvaWQgMCE9PXMmJnMua2V5U3RyaW5nLmZvckVhY2godD0+e2NvbnN0e2VsZW1lbnQ6e2NvbnRlbnQ6ZX19PXQscz1uZXcgU2V0O0FycmF5LmZyb20oZS5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVcIikpLmZvckVhY2godD0+e3MuYWRkKHQpfSksYyh0LHMpfSl9KX0pKHQpO2NvbnN0IGE9aS5jb250ZW50O3M/ZnVuY3Rpb24odCxlLHM9bnVsbCl7Y29uc3R7ZWxlbWVudDp7Y29udGVudDppfSxwYXJ0czpufT10O2lmKG51bGw9PXMpcmV0dXJuIHZvaWQgaS5hcHBlbmRDaGlsZChlKTtjb25zdCByPWRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoaSwxMzMsbnVsbCwhMSk7bGV0IG89dShuKSxhPTAsbD0tMTtmb3IoO3IubmV4dE5vZGUoKTspe2wrKztmb3Ioci5jdXJyZW50Tm9kZT09PXMmJihhPXAoZSkscy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHMpKTstMSE9PW8mJm5bb10uaW5kZXg9PT1sOyl7aWYoYT4wKXtmb3IoOy0xIT09bzspbltvXS5pbmRleCs9YSxvPXUobixvKTtyZXR1cm59bz11KG4sbyl9fX0ocyxvLGEuZmlyc3RDaGlsZCk6YS5pbnNlcnRCZWZvcmUobyxhLmZpcnN0Q2hpbGQpLHdpbmRvdy5TaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVTdHlsZXMoaSx0KTtjb25zdCBsPWEucXVlcnlTZWxlY3RvcihcInN0eWxlXCIpO2lmKHdpbmRvdy5TaGFkeUNTUy5uYXRpdmVTaGFkb3cmJm51bGwhPT1sKWUuaW5zZXJ0QmVmb3JlKGwuY2xvbmVOb2RlKCEwKSxlLmZpcnN0Q2hpbGQpO2Vsc2UgaWYocyl7YS5pbnNlcnRCZWZvcmUobyxhLmZpcnN0Q2hpbGQpO2NvbnN0IHQ9bmV3IFNldDt0LmFkZChvKSxjKHMsdCl9fTt3aW5kb3cuSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eT0odCxlKT0+dDtjb25zdCBCPXt0b0F0dHJpYnV0ZSh0LGUpe3N3aXRjaChlKXtjYXNlIEJvb2xlYW46cmV0dXJuIHQ/XCJcIjpudWxsO2Nhc2UgT2JqZWN0OmNhc2UgQXJyYXk6cmV0dXJuIG51bGw9PXQ/dDpKU09OLnN0cmluZ2lmeSh0KX1yZXR1cm4gdH0sZnJvbUF0dHJpYnV0ZSh0LGUpe3N3aXRjaChlKXtjYXNlIEJvb2xlYW46cmV0dXJuIG51bGwhPT10O2Nhc2UgTnVtYmVyOnJldHVybiBudWxsPT09dD9udWxsOk51bWJlcih0KTtjYXNlIE9iamVjdDpjYXNlIEFycmF5OnJldHVybiBKU09OLnBhcnNlKHQpfXJldHVybiB0fX0sRD0odCxlKT0+ZSE9PXQmJihlPT1lfHx0PT10KSxKPXthdHRyaWJ1dGU6ITAsdHlwZTpTdHJpbmcsY29udmVydGVyOkIscmVmbGVjdDohMSxoYXNDaGFuZ2VkOkR9O2NsYXNzIFggZXh0ZW5kcyBIVE1MRWxlbWVudHtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5fdXBkYXRlU3RhdGU9MCx0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXM9dm9pZCAwLHRoaXMuX3VwZGF0ZVByb21pc2U9bmV3IFByb21pc2UodD0+dGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlcj10KSx0aGlzLl9jaGFuZ2VkUHJvcGVydGllcz1uZXcgTWFwLHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzPXZvaWQgMCx0aGlzLmluaXRpYWxpemUoKX1zdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpe3RoaXMuZmluYWxpemUoKTtjb25zdCB0PVtdO3JldHVybiB0aGlzLl9jbGFzc1Byb3BlcnRpZXMuZm9yRWFjaCgoZSxzKT0+e2NvbnN0IGk9dGhpcy5fYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHMsZSk7dm9pZCAwIT09aSYmKHRoaXMuX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXAuc2V0KGkscyksdC5wdXNoKGkpKX0pLHR9c3RhdGljIF9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKXtpZighdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KFwiX2NsYXNzUHJvcGVydGllc1wiLHRoaXMpKSl7dGhpcy5fY2xhc3NQcm9wZXJ0aWVzPW5ldyBNYXA7Y29uc3QgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2NsYXNzUHJvcGVydGllczt2b2lkIDAhPT10JiZ0LmZvckVhY2goKHQsZSk9PnRoaXMuX2NsYXNzUHJvcGVydGllcy5zZXQoZSx0KSl9fXN0YXRpYyBjcmVhdGVQcm9wZXJ0eSh0LGU9Sil7aWYodGhpcy5fZW5zdXJlQ2xhc3NQcm9wZXJ0aWVzKCksdGhpcy5fY2xhc3NQcm9wZXJ0aWVzLnNldCh0LGUpLGUubm9BY2Nlc3Nvcnx8dGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkodCkpcmV0dXJuO2NvbnN0IHM9XCJzeW1ib2xcIj09dHlwZW9mIHQ/U3ltYm9sKCk6XCJfX1wiK3QsaT10aGlzLmdldFByb3BlcnR5RGVzY3JpcHRvcih0LHMsZSk7dm9pZCAwIT09aSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLHQsaSl9c3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcih0LGUscyl7cmV0dXJue2dldCgpe3JldHVybiB0aGlzW2VdfSxzZXQocyl7Y29uc3QgaT10aGlzW3RdO3RoaXNbZV09cyx0aGlzLl9yZXF1ZXN0VXBkYXRlKHQsaSl9LGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwfX1zdGF0aWMgZ2V0UHJvcGVydHlPcHRpb25zKHQpe3JldHVybiB0aGlzLl9jbGFzc1Byb3BlcnRpZXMmJnRoaXMuX2NsYXNzUHJvcGVydGllcy5nZXQodCl8fEp9c3RhdGljIGZpbmFsaXplKCl7Y29uc3QgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7aWYodC5oYXNPd25Qcm9wZXJ0eShcImZpbmFsaXplZFwiKXx8dC5maW5hbGl6ZSgpLHRoaXMuZmluYWxpemVkPSEwLHRoaXMuX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpLHRoaXMuX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXA9bmV3IE1hcCx0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoXCJwcm9wZXJ0aWVzXCIsdGhpcykpKXtjb25zdCB0PXRoaXMucHJvcGVydGllcyxlPVsuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KSwuLi5cImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP09iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCk6W11dO2Zvcihjb25zdCBzIG9mIGUpdGhpcy5jcmVhdGVQcm9wZXJ0eShzLHRbc10pfX1zdGF0aWMgX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eSh0LGUpe2NvbnN0IHM9ZS5hdHRyaWJ1dGU7cmV0dXJuITE9PT1zP3ZvaWQgMDpcInN0cmluZ1wiPT10eXBlb2Ygcz9zOlwic3RyaW5nXCI9PXR5cGVvZiB0P3QudG9Mb3dlckNhc2UoKTp2b2lkIDB9c3RhdGljIF92YWx1ZUhhc0NoYW5nZWQodCxlLHM9RCl7cmV0dXJuIHModCxlKX1zdGF0aWMgX3Byb3BlcnR5VmFsdWVGcm9tQXR0cmlidXRlKHQsZSl7Y29uc3Qgcz1lLnR5cGUsaT1lLmNvbnZlcnRlcnx8QixuPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aTppLmZyb21BdHRyaWJ1dGU7cmV0dXJuIG4/bih0LHMpOnR9c3RhdGljIF9wcm9wZXJ0eVZhbHVlVG9BdHRyaWJ1dGUodCxlKXtpZih2b2lkIDA9PT1lLnJlZmxlY3QpcmV0dXJuO2NvbnN0IHM9ZS50eXBlLGk9ZS5jb252ZXJ0ZXI7cmV0dXJuKGkmJmkudG9BdHRyaWJ1dGV8fEIudG9BdHRyaWJ1dGUpKHQscyl9aW5pdGlhbGl6ZSgpe3RoaXMuX3NhdmVJbnN0YW5jZVByb3BlcnRpZXMoKSx0aGlzLl9yZXF1ZXN0VXBkYXRlKCl9X3NhdmVJbnN0YW5jZVByb3BlcnRpZXMoKXt0aGlzLmNvbnN0cnVjdG9yLl9jbGFzc1Byb3BlcnRpZXMuZm9yRWFjaCgodCxlKT0+e2lmKHRoaXMuaGFzT3duUHJvcGVydHkoZSkpe2NvbnN0IHQ9dGhpc1tlXTtkZWxldGUgdGhpc1tlXSx0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXN8fCh0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXM9bmV3IE1hcCksdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzLnNldChlLHQpfX0pfV9hcHBseUluc3RhbmNlUHJvcGVydGllcygpe3RoaXMuX2luc3RhbmNlUHJvcGVydGllcy5mb3JFYWNoKCh0LGUpPT50aGlzW2VdPXQpLHRoaXMuX2luc3RhbmNlUHJvcGVydGllcz12b2lkIDB9Y29ubmVjdGVkQ2FsbGJhY2soKXt0aGlzLmVuYWJsZVVwZGF0aW5nKCl9ZW5hYmxlVXBkYXRpbmcoKXt2b2lkIDAhPT10aGlzLl9lbmFibGVVcGRhdGluZ1Jlc29sdmVyJiYodGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlcigpLHRoaXMuX2VuYWJsZVVwZGF0aW5nUmVzb2x2ZXI9dm9pZCAwKX1kaXNjb25uZWN0ZWRDYWxsYmFjaygpe31hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodCxlLHMpe2UhPT1zJiZ0aGlzLl9hdHRyaWJ1dGVUb1Byb3BlcnR5KHQscyl9X3Byb3BlcnR5VG9BdHRyaWJ1dGUodCxlLHM9Sil7Y29uc3QgaT10aGlzLmNvbnN0cnVjdG9yLG49aS5fYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHQscyk7aWYodm9pZCAwIT09bil7Y29uc3QgdD1pLl9wcm9wZXJ0eVZhbHVlVG9BdHRyaWJ1dGUoZSxzKTtpZih2b2lkIDA9PT10KXJldHVybjt0aGlzLl91cGRhdGVTdGF0ZT04fHRoaXMuX3VwZGF0ZVN0YXRlLG51bGw9PXQ/dGhpcy5yZW1vdmVBdHRyaWJ1dGUobik6dGhpcy5zZXRBdHRyaWJ1dGUobix0KSx0aGlzLl91cGRhdGVTdGF0ZT0tOSZ0aGlzLl91cGRhdGVTdGF0ZX19X2F0dHJpYnV0ZVRvUHJvcGVydHkodCxlKXtpZig4JnRoaXMuX3VwZGF0ZVN0YXRlKXJldHVybjtjb25zdCBzPXRoaXMuY29uc3RydWN0b3IsaT1zLl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwLmdldCh0KTtpZih2b2lkIDAhPT1pKXtjb25zdCB0PXMuZ2V0UHJvcGVydHlPcHRpb25zKGkpO3RoaXMuX3VwZGF0ZVN0YXRlPTE2fHRoaXMuX3VwZGF0ZVN0YXRlLHRoaXNbaV09cy5fcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUoZSx0KSx0aGlzLl91cGRhdGVTdGF0ZT0tMTcmdGhpcy5fdXBkYXRlU3RhdGV9fV9yZXF1ZXN0VXBkYXRlKHQsZSl7bGV0IHM9ITA7aWYodm9pZCAwIT09dCl7Y29uc3QgaT10aGlzLmNvbnN0cnVjdG9yLG49aS5nZXRQcm9wZXJ0eU9wdGlvbnModCk7aS5fdmFsdWVIYXNDaGFuZ2VkKHRoaXNbdF0sZSxuLmhhc0NoYW5nZWQpPyh0aGlzLl9jaGFuZ2VkUHJvcGVydGllcy5oYXModCl8fHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLnNldCh0LGUpLCEwIT09bi5yZWZsZWN0fHwxNiZ0aGlzLl91cGRhdGVTdGF0ZXx8KHZvaWQgMD09PXRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzJiYodGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXM9bmV3IE1hcCksdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuc2V0KHQsbikpKTpzPSExfSF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGUmJnMmJih0aGlzLl91cGRhdGVQcm9taXNlPXRoaXMuX2VucXVldWVVcGRhdGUoKSl9cmVxdWVzdFVwZGF0ZSh0LGUpe3JldHVybiB0aGlzLl9yZXF1ZXN0VXBkYXRlKHQsZSksdGhpcy51cGRhdGVDb21wbGV0ZX1hc3luYyBfZW5xdWV1ZVVwZGF0ZSgpe3RoaXMuX3VwZGF0ZVN0YXRlPTR8dGhpcy5fdXBkYXRlU3RhdGU7dHJ5e2F3YWl0IHRoaXMuX3VwZGF0ZVByb21pc2V9Y2F0Y2godCl7fWNvbnN0IHQ9dGhpcy5wZXJmb3JtVXBkYXRlKCk7cmV0dXJuIG51bGwhPXQmJmF3YWl0IHQsIXRoaXMuX2hhc1JlcXVlc3RlZFVwZGF0ZX1nZXQgX2hhc1JlcXVlc3RlZFVwZGF0ZSgpe3JldHVybiA0JnRoaXMuX3VwZGF0ZVN0YXRlfWdldCBoYXNVcGRhdGVkKCl7cmV0dXJuIDEmdGhpcy5fdXBkYXRlU3RhdGV9cGVyZm9ybVVwZGF0ZSgpe3RoaXMuX2luc3RhbmNlUHJvcGVydGllcyYmdGhpcy5fYXBwbHlJbnN0YW5jZVByb3BlcnRpZXMoKTtsZXQgdD0hMTtjb25zdCBlPXRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzO3RyeXt0PXRoaXMuc2hvdWxkVXBkYXRlKGUpLHQ/dGhpcy51cGRhdGUoZSk6dGhpcy5fbWFya1VwZGF0ZWQoKX1jYXRjaChlKXt0aHJvdyB0PSExLHRoaXMuX21hcmtVcGRhdGVkKCksZX10JiYoMSZ0aGlzLl91cGRhdGVTdGF0ZXx8KHRoaXMuX3VwZGF0ZVN0YXRlPTF8dGhpcy5fdXBkYXRlU3RhdGUsdGhpcy5maXJzdFVwZGF0ZWQoZSkpLHRoaXMudXBkYXRlZChlKSl9X21hcmtVcGRhdGVkKCl7dGhpcy5fY2hhbmdlZFByb3BlcnRpZXM9bmV3IE1hcCx0aGlzLl91cGRhdGVTdGF0ZT0tNSZ0aGlzLl91cGRhdGVTdGF0ZX1nZXQgdXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5fZ2V0VXBkYXRlQ29tcGxldGUoKX1fZ2V0VXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5fdXBkYXRlUHJvbWlzZX1zaG91bGRVcGRhdGUodCl7cmV0dXJuITB9dXBkYXRlKHQpe3ZvaWQgMCE9PXRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzJiZ0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5zaXplPjAmJih0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5mb3JFYWNoKCh0LGUpPT50aGlzLl9wcm9wZXJ0eVRvQXR0cmlidXRlKGUsdGhpc1tlXSx0KSksdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXM9dm9pZCAwKSx0aGlzLl9tYXJrVXBkYXRlZCgpfXVwZGF0ZWQodCl7fWZpcnN0VXBkYXRlZCh0KXt9fVguZmluYWxpemVkPSEwO2NvbnN0IFk9KHQsZSk9PlwibWV0aG9kXCI9PT1lLmtpbmQmJmUuZGVzY3JpcHRvciYmIShcInZhbHVlXCJpbiBlLmRlc2NyaXB0b3IpP09iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxlKSx7ZmluaXNoZXIocyl7cy5jcmVhdGVQcm9wZXJ0eShlLmtleSx0KX19KTp7a2luZDpcImZpZWxkXCIsa2V5OlN5bWJvbCgpLHBsYWNlbWVudDpcIm93blwiLGRlc2NyaXB0b3I6e30saW5pdGlhbGl6ZXIoKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluaXRpYWxpemVyJiYodGhpc1tlLmtleV09ZS5pbml0aWFsaXplci5jYWxsKHRoaXMpKX0sZmluaXNoZXIocyl7cy5jcmVhdGVQcm9wZXJ0eShlLmtleSx0KX19O2Z1bmN0aW9uIEcodCl7cmV0dXJuKGUscyk9PnZvaWQgMCE9PXM/KCh0LGUscyk9PntlLmNvbnN0cnVjdG9yLmNyZWF0ZVByb3BlcnR5KHMsdCl9KSh0LGUscyk6WSh0LGUpfWNvbnN0IEs9XCJhZG9wdGVkU3R5bGVTaGVldHNcImluIERvY3VtZW50LnByb3RvdHlwZSYmXCJyZXBsYWNlXCJpbiBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZSxRPVN5bWJvbCgpO2NsYXNzIFp7Y29uc3RydWN0b3IodCxlKXtpZihlIT09USl0aHJvdyBFcnJvcihcIkNTU1Jlc3VsdCBpcyBub3QgY29uc3RydWN0YWJsZS4gVXNlIGB1bnNhZmVDU1NgIG9yIGBjc3NgIGluc3RlYWQuXCIpO3RoaXMuY3NzVGV4dD10fWdldCBzdHlsZVNoZWV0KCl7cmV0dXJuIHZvaWQgMD09PXRoaXMuX3N0eWxlU2hlZXQmJihLPyh0aGlzLl9zdHlsZVNoZWV0PW5ldyBDU1NTdHlsZVNoZWV0LHRoaXMuX3N0eWxlU2hlZXQucmVwbGFjZVN5bmModGhpcy5jc3NUZXh0KSk6dGhpcy5fc3R5bGVTaGVldD1udWxsKSx0aGlzLl9zdHlsZVNoZWV0fXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMuY3NzVGV4dH19Y29uc3QgdHQ9KHQsLi4uZSk9Pntjb25zdCBzPWUucmVkdWNlKChlLHMsaSk9PmUrKHQ9PntpZih0IGluc3RhbmNlb2YgWilyZXR1cm4gdC5jc3NUZXh0O2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0O3Rocm93IEVycm9yKGBWYWx1ZSBwYXNzZWQgdG8gJ2NzcycgZnVuY3Rpb24gbXVzdCBiZSBhICdjc3MnIGZ1bmN0aW9uIHJlc3VsdDogJHt0fS4gVXNlICd1bnNhZmVDU1MnIHRvIHBhc3Mgbm9uLWxpdGVyYWwgdmFsdWVzLCBidXRcXG4gICAgICAgICAgICB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuYCl9KShzKSt0W2krMV0sdFswXSk7cmV0dXJuIG5ldyBaKHMsUSl9Oyh3aW5kb3cubGl0RWxlbWVudFZlcnNpb25zfHwod2luZG93LmxpdEVsZW1lbnRWZXJzaW9ucz1bXSkpLnB1c2goXCIyLjMuMVwiKTtjb25zdCBldD17fTtjbGFzcyBzdCBleHRlbmRzIFh7c3RhdGljIGdldFN0eWxlcygpe3JldHVybiB0aGlzLnN0eWxlc31zdGF0aWMgX2dldFVuaXF1ZVN0eWxlcygpe2lmKHRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eShcIl9zdHlsZXNcIix0aGlzKSkpcmV0dXJuO2NvbnN0IHQ9dGhpcy5nZXRTdHlsZXMoKTtpZih2b2lkIDA9PT10KXRoaXMuX3N0eWxlcz1bXTtlbHNlIGlmKEFycmF5LmlzQXJyYXkodCkpe2NvbnN0IGU9KHQscyk9PnQucmVkdWNlUmlnaHQoKHQscyk9PkFycmF5LmlzQXJyYXkocyk/ZShzLHQpOih0LmFkZChzKSx0KSxzKSxzPWUodCxuZXcgU2V0KSxpPVtdO3MuZm9yRWFjaCh0PT5pLnVuc2hpZnQodCkpLHRoaXMuX3N0eWxlcz1pfWVsc2UgdGhpcy5fc3R5bGVzPVt0XX1pbml0aWFsaXplKCl7c3VwZXIuaW5pdGlhbGl6ZSgpLHRoaXMuY29uc3RydWN0b3IuX2dldFVuaXF1ZVN0eWxlcygpLHRoaXMucmVuZGVyUm9vdD10aGlzLmNyZWF0ZVJlbmRlclJvb3QoKSx3aW5kb3cuU2hhZG93Um9vdCYmdGhpcy5yZW5kZXJSb290IGluc3RhbmNlb2Ygd2luZG93LlNoYWRvd1Jvb3QmJnRoaXMuYWRvcHRTdHlsZXMoKX1jcmVhdGVSZW5kZXJSb290KCl7cmV0dXJuIHRoaXMuYXR0YWNoU2hhZG93KHttb2RlOlwib3BlblwifSl9YWRvcHRTdHlsZXMoKXtjb25zdCB0PXRoaXMuY29uc3RydWN0b3IuX3N0eWxlczswIT09dC5sZW5ndGgmJih2b2lkIDA9PT13aW5kb3cuU2hhZHlDU1N8fHdpbmRvdy5TaGFkeUNTUy5uYXRpdmVTaGFkb3c/Sz90aGlzLnJlbmRlclJvb3QuYWRvcHRlZFN0eWxlU2hlZXRzPXQubWFwKHQ9PnQuc3R5bGVTaGVldCk6dGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzPSEwOndpbmRvdy5TaGFkeUNTUy5TY29waW5nU2hpbS5wcmVwYXJlQWRvcHRlZENzc1RleHQodC5tYXAodD0+dC5jc3NUZXh0KSx0aGlzLmxvY2FsTmFtZSkpfWNvbm5lY3RlZENhbGxiYWNrKCl7c3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKSx0aGlzLmhhc1VwZGF0ZWQmJnZvaWQgMCE9PXdpbmRvdy5TaGFkeUNTUyYmd2luZG93LlNoYWR5Q1NTLnN0eWxlRWxlbWVudCh0aGlzKX11cGRhdGUodCl7Y29uc3QgZT10aGlzLnJlbmRlcigpO3N1cGVyLnVwZGF0ZSh0KSxlIT09ZXQmJnRoaXMuY29uc3RydWN0b3IucmVuZGVyKGUsdGhpcy5yZW5kZXJSb290LHtzY29wZU5hbWU6dGhpcy5sb2NhbE5hbWUsZXZlbnRDb250ZXh0OnRoaXN9KSx0aGlzLl9uZWVkc1NoaW1BZG9wdGVkU3R5bGVTaGVldHMmJih0aGlzLl9uZWVkc1NoaW1BZG9wdGVkU3R5bGVTaGVldHM9ITEsdGhpcy5jb25zdHJ1Y3Rvci5fc3R5bGVzLmZvckVhY2godD0+e2NvbnN0IGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO2UudGV4dENvbnRlbnQ9dC5jc3NUZXh0LHRoaXMucmVuZGVyUm9vdC5hcHBlbmRDaGlsZChlKX0pKX1yZW5kZXIoKXtyZXR1cm4gZXR9fWZ1bmN0aW9uIGl0KHQsZSxzLGkpe3ZhciBuLHI9YXJndW1lbnRzLmxlbmd0aCxvPXI8Mz9lOm51bGw9PT1pP2k9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHMpOmk7aWYoXCJvYmplY3RcIj09dHlwZW9mIFJlZmxlY3QmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUpbz1SZWZsZWN0LmRlY29yYXRlKHQsZSxzLGkpO2Vsc2UgZm9yKHZhciBhPXQubGVuZ3RoLTE7YT49MDthLS0pKG49dFthXSkmJihvPShyPDM/bihvKTpyPjM/bihlLHMsbyk6bihlLHMpKXx8byk7cmV0dXJuIHI+MyYmbyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscyxvKSxvfXN0LmZpbmFsaXplZD0hMCxzdC5yZW5kZXI9KHQsZSxpKT0+e2lmKCFpfHxcIm9iamVjdFwiIT10eXBlb2YgaXx8IWkuc2NvcGVOYW1lKXRocm93IEVycm9yKFwiVGhlIGBzY29wZU5hbWVgIG9wdGlvbiBpcyByZXF1aXJlZC5cIik7Y29uc3Qgbj1pLnNjb3BlTmFtZSxyPVIuaGFzKGUpLG89cSYmMTE9PT1lLm5vZGVUeXBlJiYhIWUuaG9zdCxhPW8mJiFGLmhhcyhuKSxsPWE/ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOmU7aWYoKCh0LGUsaSk9PntsZXQgbj1SLmdldChlKTt2b2lkIDA9PT1uJiYocyhlLGUuZmlyc3RDaGlsZCksUi5zZXQoZSxuPW5ldyBDKE9iamVjdC5hc3NpZ24oe3RlbXBsYXRlRmFjdG9yeTpVfSxpKSkpLG4uYXBwZW5kSW50byhlKSksbi5zZXRWYWx1ZSh0KSxuLmNvbW1pdCgpfSkodCxsLE9iamVjdC5hc3NpZ24oe3RlbXBsYXRlRmFjdG9yeTpIKG4pfSxpKSksYSl7Y29uc3QgdD1SLmdldChsKTtSLmRlbGV0ZShsKTtjb25zdCBpPXQudmFsdWUgaW5zdGFuY2VvZiB5P3QudmFsdWUudGVtcGxhdGU6dm9pZCAwO1cobixsLGkpLHMoZSxlLmZpcnN0Q2hpbGQpLGUuYXBwZW5kQ2hpbGQobCksUi5zZXQoZSx0KX0hciYmbyYmd2luZG93LlNoYWR5Q1NTLnN0eWxlRWxlbWVudChlLmhvc3QpfTtjb25zdCBudD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZudWxsIT13aW5kb3cuY3VzdG9tRWxlbWVudHMmJnZvaWQgMCE9PXdpbmRvdy5jdXN0b21FbGVtZW50cy5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrLHJ0PSh0LGUscz1udWxsKT0+e2Zvcig7ZSE9PXM7KXtjb25zdCBzPWUubmV4dFNpYmxpbmc7dC5yZW1vdmVDaGlsZChlKSxlPXN9fSxvdD1ge3tsaXQtJHsoTWF0aC5yYW5kb20oKStcIlwiKS5zbGljZSgyKX19fWAsYXQ9YFxceDNjIS0tJHtvdH0tLVxceDNlYCxsdD1SZWdFeHAoYCR7b3R9fCR7YXR9YCk7Y2xhc3MgaHR7Y29uc3RydWN0b3IodCxlKXt0aGlzLnBhcnRzPVtdLHRoaXMuZWxlbWVudD1lO2NvbnN0IHM9W10saT1bXSxuPWRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZS5jb250ZW50LDEzMyxudWxsLCExKTtsZXQgcj0wLG89LTEsYT0wO2NvbnN0e3N0cmluZ3M6bCx2YWx1ZXM6e2xlbmd0aDpofX09dDtmb3IoO2E8aDspe2NvbnN0IHQ9bi5uZXh0Tm9kZSgpO2lmKG51bGwhPT10KXtpZihvKyssMT09PXQubm9kZVR5cGUpe2lmKHQuaGFzQXR0cmlidXRlcygpKXtjb25zdCBlPXQuYXR0cmlidXRlcyx7bGVuZ3RoOnN9PWU7bGV0IGk9MDtmb3IobGV0IHQ9MDt0PHM7dCsrKWR0KGVbdF0ubmFtZSxcIiRsaXQkXCIpJiZpKys7Zm9yKDtpLS0gPjA7KXtjb25zdCBlPWxbYV0scz11dC5leGVjKGUpWzJdLGk9cy50b0xvd2VyQ2FzZSgpK1wiJGxpdCRcIixuPXQuZ2V0QXR0cmlidXRlKGkpO3QucmVtb3ZlQXR0cmlidXRlKGkpO2NvbnN0IHI9bi5zcGxpdChsdCk7dGhpcy5wYXJ0cy5wdXNoKHt0eXBlOlwiYXR0cmlidXRlXCIsaW5kZXg6byxuYW1lOnMsc3RyaW5nczpyfSksYSs9ci5sZW5ndGgtMX19XCJURU1QTEFURVwiPT09dC50YWdOYW1lJiYoaS5wdXNoKHQpLG4uY3VycmVudE5vZGU9dC5jb250ZW50KX1lbHNlIGlmKDM9PT10Lm5vZGVUeXBlKXtjb25zdCBlPXQuZGF0YTtpZihlLmluZGV4T2Yob3QpPj0wKXtjb25zdCBpPXQucGFyZW50Tm9kZSxuPWUuc3BsaXQobHQpLHI9bi5sZW5ndGgtMTtmb3IobGV0IGU9MDtlPHI7ZSsrKXtsZXQgcyxyPW5bZV07aWYoXCJcIj09PXIpcz1wdCgpO2Vsc2V7Y29uc3QgdD11dC5leGVjKHIpO251bGwhPT10JiZkdCh0WzJdLFwiJGxpdCRcIikmJihyPXIuc2xpY2UoMCx0LmluZGV4KSt0WzFdK3RbMl0uc2xpY2UoMCwtNSkrdFszXSkscz1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShyKX1pLmluc2VydEJlZm9yZShzLHQpLHRoaXMucGFydHMucHVzaCh7dHlwZTpcIm5vZGVcIixpbmRleDorK299KX1cIlwiPT09bltyXT8oaS5pbnNlcnRCZWZvcmUocHQoKSx0KSxzLnB1c2godCkpOnQuZGF0YT1uW3JdLGErPXJ9fWVsc2UgaWYoOD09PXQubm9kZVR5cGUpaWYodC5kYXRhPT09b3Qpe2NvbnN0IGU9dC5wYXJlbnROb2RlO251bGwhPT10LnByZXZpb3VzU2libGluZyYmbyE9PXJ8fChvKyssZS5pbnNlcnRCZWZvcmUocHQoKSx0KSkscj1vLHRoaXMucGFydHMucHVzaCh7dHlwZTpcIm5vZGVcIixpbmRleDpvfSksbnVsbD09PXQubmV4dFNpYmxpbmc/dC5kYXRhPVwiXCI6KHMucHVzaCh0KSxvLS0pLGErK31lbHNle2xldCBlPS0xO2Zvcig7LTEhPT0oZT10LmRhdGEuaW5kZXhPZihvdCxlKzEpKTspdGhpcy5wYXJ0cy5wdXNoKHt0eXBlOlwibm9kZVwiLGluZGV4Oi0xfSksYSsrfX1lbHNlIG4uY3VycmVudE5vZGU9aS5wb3AoKX1mb3IoY29uc3QgdCBvZiBzKXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KX19Y29uc3QgZHQ9KHQsZSk9Pntjb25zdCBzPXQubGVuZ3RoLWUubGVuZ3RoO3JldHVybiBzPj0wJiZ0LnNsaWNlKHMpPT09ZX0sY3Q9dD0+LTEhPT10LmluZGV4LHB0PSgpPT5kb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpLHV0PS8oWyBcXHgwOVxceDBhXFx4MGNcXHgwZF0pKFteXFwwLVxceDFGXFx4N0YtXFx4OUYgXCInPj0vXSspKFsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKj1bIFxceDA5XFx4MGFcXHgwY1xceDBkXSooPzpbXiBcXHgwOVxceDBhXFx4MGNcXHgwZFwiJ2A8Pj1dKnxcIlteXCJdKnwnW14nXSopKSQvO2Z1bmN0aW9uIF90KHQsZSl7Y29uc3R7ZWxlbWVudDp7Y29udGVudDpzfSxwYXJ0czppfT10LG49ZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihzLDEzMyxudWxsLCExKTtsZXQgcj1ndChpKSxvPWlbcl0sYT0tMSxsPTA7Y29uc3QgaD1bXTtsZXQgZD1udWxsO2Zvcig7bi5uZXh0Tm9kZSgpOyl7YSsrO2NvbnN0IHQ9bi5jdXJyZW50Tm9kZTtmb3IodC5wcmV2aW91c1NpYmxpbmc9PT1kJiYoZD1udWxsKSxlLmhhcyh0KSYmKGgucHVzaCh0KSxudWxsPT09ZCYmKGQ9dCkpLG51bGwhPT1kJiZsKys7dm9pZCAwIT09byYmby5pbmRleD09PWE7KW8uaW5kZXg9bnVsbCE9PWQ/LTE6by5pbmRleC1sLHI9Z3QoaSxyKSxvPWlbcl19aC5mb3JFYWNoKHQ9PnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KSl9Y29uc3QgbXQ9dD0+e2xldCBlPTExPT09dC5ub2RlVHlwZT8wOjE7Y29uc3Qgcz1kb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKHQsMTMzLG51bGwsITEpO2Zvcig7cy5uZXh0Tm9kZSgpOyllKys7cmV0dXJuIGV9LGd0PSh0LGU9LTEpPT57Zm9yKGxldCBzPWUrMTtzPHQubGVuZ3RoO3MrKyl7Y29uc3QgZT10W3NdO2lmKGN0KGUpKXJldHVybiBzfXJldHVybi0xfSxmdD1uZXcgV2Vha01hcCx5dD10PT5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZmdC5oYXModCksdnQ9e30sU3Q9e307Y2xhc3Mgd3R7Y29uc3RydWN0b3IodCxlLHMpe3RoaXMuX19wYXJ0cz1bXSx0aGlzLnRlbXBsYXRlPXQsdGhpcy5wcm9jZXNzb3I9ZSx0aGlzLm9wdGlvbnM9c311cGRhdGUodCl7bGV0IGU9MDtmb3IoY29uc3QgcyBvZiB0aGlzLl9fcGFydHMpdm9pZCAwIT09cyYmcy5zZXRWYWx1ZSh0W2VdKSxlKys7Zm9yKGNvbnN0IHQgb2YgdGhpcy5fX3BhcnRzKXZvaWQgMCE9PXQmJnQuY29tbWl0KCl9X2Nsb25lKCl7Y29uc3QgdD1udD90aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudC5jbG9uZU5vZGUoITApOmRvY3VtZW50LmltcG9ydE5vZGUodGhpcy50ZW1wbGF0ZS5lbGVtZW50LmNvbnRlbnQsITApLGU9W10scz10aGlzLnRlbXBsYXRlLnBhcnRzLGk9ZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcih0LDEzMyxudWxsLCExKTtsZXQgbixyPTAsbz0wLGE9aS5uZXh0Tm9kZSgpO2Zvcig7cjxzLmxlbmd0aDspaWYobj1zW3JdLGN0KG4pKXtmb3IoO288bi5pbmRleDspbysrLFwiVEVNUExBVEVcIj09PWEubm9kZU5hbWUmJihlLnB1c2goYSksaS5jdXJyZW50Tm9kZT1hLmNvbnRlbnQpLG51bGw9PT0oYT1pLm5leHROb2RlKCkpJiYoaS5jdXJyZW50Tm9kZT1lLnBvcCgpLGE9aS5uZXh0Tm9kZSgpKTtpZihcIm5vZGVcIj09PW4udHlwZSl7Y29uc3QgdD10aGlzLnByb2Nlc3Nvci5oYW5kbGVUZXh0RXhwcmVzc2lvbih0aGlzLm9wdGlvbnMpO3QuaW5zZXJ0QWZ0ZXJOb2RlKGEucHJldmlvdXNTaWJsaW5nKSx0aGlzLl9fcGFydHMucHVzaCh0KX1lbHNlIHRoaXMuX19wYXJ0cy5wdXNoKC4uLnRoaXMucHJvY2Vzc29yLmhhbmRsZUF0dHJpYnV0ZUV4cHJlc3Npb25zKGEsbi5uYW1lLG4uc3RyaW5ncyx0aGlzLm9wdGlvbnMpKTtyKyt9ZWxzZSB0aGlzLl9fcGFydHMucHVzaCh2b2lkIDApLHIrKztyZXR1cm4gbnQmJihkb2N1bWVudC5hZG9wdE5vZGUodCksY3VzdG9tRWxlbWVudHMudXBncmFkZSh0KSksdH19Y29uc3QgYnQ9YCAke290fSBgO2NsYXNzIHh0e2NvbnN0cnVjdG9yKHQsZSxzLGkpe3RoaXMuc3RyaW5ncz10LHRoaXMudmFsdWVzPWUsdGhpcy50eXBlPXMsdGhpcy5wcm9jZXNzb3I9aX1nZXRIVE1MKCl7Y29uc3QgdD10aGlzLnN0cmluZ3MubGVuZ3RoLTE7bGV0IGU9XCJcIixzPSExO2ZvcihsZXQgaT0wO2k8dDtpKyspe2NvbnN0IHQ9dGhpcy5zdHJpbmdzW2ldLG49dC5sYXN0SW5kZXhPZihcIlxceDNjIS0tXCIpO3M9KG4+LTF8fHMpJiYtMT09PXQuaW5kZXhPZihcIi0tXFx4M2VcIixuKzEpO2NvbnN0IHI9dXQuZXhlYyh0KTtlKz1udWxsPT09cj90KyhzP2J0OmF0KTp0LnN1YnN0cigwLHIuaW5kZXgpK3JbMV0rclsyXStcIiRsaXQkXCIrclszXStvdH1yZXR1cm4gZSs9dGhpcy5zdHJpbmdzW3RdLGV9Z2V0VGVtcGxhdGVFbGVtZW50KCl7Y29uc3QgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cmV0dXJuIHQuaW5uZXJIVE1MPXRoaXMuZ2V0SFRNTCgpLHR9fWNvbnN0IFB0PXQ9Pm51bGw9PT10fHwhKFwib2JqZWN0XCI9PXR5cGVvZiB0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KSxOdD10PT5BcnJheS5pc0FycmF5KHQpfHwhKCF0fHwhdFtTeW1ib2wuaXRlcmF0b3JdKTtjbGFzcyBDdHtjb25zdHJ1Y3Rvcih0LGUscyl7dGhpcy5kaXJ0eT0hMCx0aGlzLmVsZW1lbnQ9dCx0aGlzLm5hbWU9ZSx0aGlzLnN0cmluZ3M9cyx0aGlzLnBhcnRzPVtdO2ZvcihsZXQgdD0wO3Q8cy5sZW5ndGgtMTt0KyspdGhpcy5wYXJ0c1t0XT10aGlzLl9jcmVhdGVQYXJ0KCl9X2NyZWF0ZVBhcnQoKXtyZXR1cm4gbmV3IEV0KHRoaXMpfV9nZXRWYWx1ZSgpe2NvbnN0IHQ9dGhpcy5zdHJpbmdzLGU9dC5sZW5ndGgtMTtsZXQgcz1cIlwiO2ZvcihsZXQgaT0wO2k8ZTtpKyspe3MrPXRbaV07Y29uc3QgZT10aGlzLnBhcnRzW2ldO2lmKHZvaWQgMCE9PWUpe2NvbnN0IHQ9ZS52YWx1ZTtpZihQdCh0KXx8IU50KHQpKXMrPVwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dCtcIlwiO2Vsc2UgZm9yKGNvbnN0IGUgb2YgdClzKz1cInN0cmluZ1wiPT10eXBlb2YgZT9lOmUrXCJcIn19cmV0dXJuIHMrPXRbZV0sc31jb21taXQoKXt0aGlzLmRpcnR5JiYodGhpcy5kaXJ0eT0hMSx0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSx0aGlzLl9nZXRWYWx1ZSgpKSl9fWNsYXNzIEV0e2NvbnN0cnVjdG9yKHQpe3RoaXMudmFsdWU9dm9pZCAwLHRoaXMuY29tbWl0dGVyPXR9c2V0VmFsdWUodCl7dD09PXZ0fHxQdCh0KSYmdD09PXRoaXMudmFsdWV8fCh0aGlzLnZhbHVlPXQseXQodCl8fCh0aGlzLmNvbW1pdHRlci5kaXJ0eT0hMCkpfWNvbW1pdCgpe2Zvcig7eXQodGhpcy52YWx1ZSk7KXtjb25zdCB0PXRoaXMudmFsdWU7dGhpcy52YWx1ZT12dCx0KHRoaXMpfXRoaXMudmFsdWUhPT12dCYmdGhpcy5jb21taXR0ZXIuY29tbWl0KCl9fWNsYXNzIFR0e2NvbnN0cnVjdG9yKHQpe3RoaXMudmFsdWU9dm9pZCAwLHRoaXMuX19wZW5kaW5nVmFsdWU9dm9pZCAwLHRoaXMub3B0aW9ucz10fWFwcGVuZEludG8odCl7dGhpcy5zdGFydE5vZGU9dC5hcHBlbmRDaGlsZChwdCgpKSx0aGlzLmVuZE5vZGU9dC5hcHBlbmRDaGlsZChwdCgpKX1pbnNlcnRBZnRlck5vZGUodCl7dGhpcy5zdGFydE5vZGU9dCx0aGlzLmVuZE5vZGU9dC5uZXh0U2libGluZ31hcHBlbmRJbnRvUGFydCh0KXt0Ll9faW5zZXJ0KHRoaXMuc3RhcnROb2RlPXB0KCkpLHQuX19pbnNlcnQodGhpcy5lbmROb2RlPXB0KCkpfWluc2VydEFmdGVyUGFydCh0KXt0Ll9faW5zZXJ0KHRoaXMuc3RhcnROb2RlPXB0KCkpLHRoaXMuZW5kTm9kZT10LmVuZE5vZGUsdC5lbmROb2RlPXRoaXMuc3RhcnROb2RlfXNldFZhbHVlKHQpe3RoaXMuX19wZW5kaW5nVmFsdWU9dH1jb21taXQoKXtpZihudWxsPT09dGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSlyZXR1cm47Zm9yKDt5dCh0aGlzLl9fcGVuZGluZ1ZhbHVlKTspe2NvbnN0IHQ9dGhpcy5fX3BlbmRpbmdWYWx1ZTt0aGlzLl9fcGVuZGluZ1ZhbHVlPXZ0LHQodGhpcyl9Y29uc3QgdD10aGlzLl9fcGVuZGluZ1ZhbHVlO3QhPT12dCYmKFB0KHQpP3QhPT10aGlzLnZhbHVlJiZ0aGlzLl9fY29tbWl0VGV4dCh0KTp0IGluc3RhbmNlb2YgeHQ/dGhpcy5fX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHQpOnQgaW5zdGFuY2VvZiBOb2RlP3RoaXMuX19jb21taXROb2RlKHQpOk50KHQpP3RoaXMuX19jb21taXRJdGVyYWJsZSh0KTp0PT09U3Q/KHRoaXMudmFsdWU9U3QsdGhpcy5jbGVhcigpKTp0aGlzLl9fY29tbWl0VGV4dCh0KSl9X19pbnNlcnQodCl7dGhpcy5lbmROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsdGhpcy5lbmROb2RlKX1fX2NvbW1pdE5vZGUodCl7dGhpcy52YWx1ZSE9PXQmJih0aGlzLmNsZWFyKCksdGhpcy5fX2luc2VydCh0KSx0aGlzLnZhbHVlPXQpfV9fY29tbWl0VGV4dCh0KXtjb25zdCBlPXRoaXMuc3RhcnROb2RlLm5leHRTaWJsaW5nLHM9XCJzdHJpbmdcIj09dHlwZW9mKHQ9bnVsbD09dD9cIlwiOnQpP3Q6dCtcIlwiO2U9PT10aGlzLmVuZE5vZGUucHJldmlvdXNTaWJsaW5nJiYzPT09ZS5ub2RlVHlwZT9lLmRhdGE9czp0aGlzLl9fY29tbWl0Tm9kZShkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzKSksdGhpcy52YWx1ZT10fV9fY29tbWl0VGVtcGxhdGVSZXN1bHQodCl7Y29uc3QgZT10aGlzLm9wdGlvbnMudGVtcGxhdGVGYWN0b3J5KHQpO2lmKHRoaXMudmFsdWUgaW5zdGFuY2VvZiB3dCYmdGhpcy52YWx1ZS50ZW1wbGF0ZT09PWUpdGhpcy52YWx1ZS51cGRhdGUodC52YWx1ZXMpO2Vsc2V7Y29uc3Qgcz1uZXcgd3QoZSx0LnByb2Nlc3Nvcix0aGlzLm9wdGlvbnMpLGk9cy5fY2xvbmUoKTtzLnVwZGF0ZSh0LnZhbHVlcyksdGhpcy5fX2NvbW1pdE5vZGUoaSksdGhpcy52YWx1ZT1zfX1fX2NvbW1pdEl0ZXJhYmxlKHQpe0FycmF5LmlzQXJyYXkodGhpcy52YWx1ZSl8fCh0aGlzLnZhbHVlPVtdLHRoaXMuY2xlYXIoKSk7Y29uc3QgZT10aGlzLnZhbHVlO2xldCBzLGk9MDtmb3IoY29uc3QgbiBvZiB0KXM9ZVtpXSx2b2lkIDA9PT1zJiYocz1uZXcgVHQodGhpcy5vcHRpb25zKSxlLnB1c2gocyksMD09PWk/cy5hcHBlbmRJbnRvUGFydCh0aGlzKTpzLmluc2VydEFmdGVyUGFydChlW2ktMV0pKSxzLnNldFZhbHVlKG4pLHMuY29tbWl0KCksaSsrO2k8ZS5sZW5ndGgmJihlLmxlbmd0aD1pLHRoaXMuY2xlYXIocyYmcy5lbmROb2RlKSl9Y2xlYXIodD10aGlzLnN0YXJ0Tm9kZSl7cnQodGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSx0Lm5leHRTaWJsaW5nLHRoaXMuZW5kTm9kZSl9fWNsYXNzIEF0e2NvbnN0cnVjdG9yKHQsZSxzKXtpZih0aGlzLnZhbHVlPXZvaWQgMCx0aGlzLl9fcGVuZGluZ1ZhbHVlPXZvaWQgMCwyIT09cy5sZW5ndGh8fFwiXCIhPT1zWzBdfHxcIlwiIT09c1sxXSl0aHJvdyBFcnJvcihcIkJvb2xlYW4gYXR0cmlidXRlcyBjYW4gb25seSBjb250YWluIGEgc2luZ2xlIGV4cHJlc3Npb25cIik7dGhpcy5lbGVtZW50PXQsdGhpcy5uYW1lPWUsdGhpcy5zdHJpbmdzPXN9c2V0VmFsdWUodCl7dGhpcy5fX3BlbmRpbmdWYWx1ZT10fWNvbW1pdCgpe2Zvcig7eXQodGhpcy5fX3BlbmRpbmdWYWx1ZSk7KXtjb25zdCB0PXRoaXMuX19wZW5kaW5nVmFsdWU7dGhpcy5fX3BlbmRpbmdWYWx1ZT12dCx0KHRoaXMpfWlmKHRoaXMuX19wZW5kaW5nVmFsdWU9PT12dClyZXR1cm47Y29uc3QgdD0hIXRoaXMuX19wZW5kaW5nVmFsdWU7dGhpcy52YWx1ZSE9PXQmJih0P3RoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLFwiXCIpOnRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKSx0aGlzLnZhbHVlPXQpLHRoaXMuX19wZW5kaW5nVmFsdWU9dnR9fWNsYXNzIFZ0IGV4dGVuZHMgQ3R7Y29uc3RydWN0b3IodCxlLHMpe3N1cGVyKHQsZSxzKSx0aGlzLnNpbmdsZT0yPT09cy5sZW5ndGgmJlwiXCI9PT1zWzBdJiZcIlwiPT09c1sxXX1fY3JlYXRlUGFydCgpe3JldHVybiBuZXcga3QodGhpcyl9X2dldFZhbHVlKCl7cmV0dXJuIHRoaXMuc2luZ2xlP3RoaXMucGFydHNbMF0udmFsdWU6c3VwZXIuX2dldFZhbHVlKCl9Y29tbWl0KCl7dGhpcy5kaXJ0eSYmKHRoaXMuZGlydHk9ITEsdGhpcy5lbGVtZW50W3RoaXMubmFtZV09dGhpcy5fZ2V0VmFsdWUoKSl9fWNsYXNzIGt0IGV4dGVuZHMgRXR7fWxldCBPdD0hMTsoKCk9Pnt0cnl7Y29uc3QgdD17Z2V0IGNhcHR1cmUoKXtyZXR1cm4gT3Q9ITAsITF9fTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIix0LHQpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLHQsdCl9Y2F0Y2godCl7fX0pKCk7Y2xhc3MgVXR7Y29uc3RydWN0b3IodCxlLHMpe3RoaXMudmFsdWU9dm9pZCAwLHRoaXMuX19wZW5kaW5nVmFsdWU9dm9pZCAwLHRoaXMuZWxlbWVudD10LHRoaXMuZXZlbnROYW1lPWUsdGhpcy5ldmVudENvbnRleHQ9cyx0aGlzLl9fYm91bmRIYW5kbGVFdmVudD10PT50aGlzLmhhbmRsZUV2ZW50KHQpfXNldFZhbHVlKHQpe3RoaXMuX19wZW5kaW5nVmFsdWU9dH1jb21taXQoKXtmb3IoO3l0KHRoaXMuX19wZW5kaW5nVmFsdWUpOyl7Y29uc3QgdD10aGlzLl9fcGVuZGluZ1ZhbHVlO3RoaXMuX19wZW5kaW5nVmFsdWU9dnQsdCh0aGlzKX1pZih0aGlzLl9fcGVuZGluZ1ZhbHVlPT09dnQpcmV0dXJuO2NvbnN0IHQ9dGhpcy5fX3BlbmRpbmdWYWx1ZSxlPXRoaXMudmFsdWUscz1udWxsPT10fHxudWxsIT1lJiYodC5jYXB0dXJlIT09ZS5jYXB0dXJlfHx0Lm9uY2UhPT1lLm9uY2V8fHQucGFzc2l2ZSE9PWUucGFzc2l2ZSksaT1udWxsIT10JiYobnVsbD09ZXx8cyk7cyYmdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5ldmVudE5hbWUsdGhpcy5fX2JvdW5kSGFuZGxlRXZlbnQsdGhpcy5fX29wdGlvbnMpLGkmJih0aGlzLl9fb3B0aW9ucz1NdCh0KSx0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSx0aGlzLl9fYm91bmRIYW5kbGVFdmVudCx0aGlzLl9fb3B0aW9ucykpLHRoaXMudmFsdWU9dCx0aGlzLl9fcGVuZGluZ1ZhbHVlPXZ0fWhhbmRsZUV2ZW50KHQpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMudmFsdWU/dGhpcy52YWx1ZS5jYWxsKHRoaXMuZXZlbnRDb250ZXh0fHx0aGlzLmVsZW1lbnQsdCk6dGhpcy52YWx1ZS5oYW5kbGVFdmVudCh0KX19Y29uc3QgTXQ9dD0+dCYmKE90P3tjYXB0dXJlOnQuY2FwdHVyZSxwYXNzaXZlOnQucGFzc2l2ZSxvbmNlOnQub25jZX06dC5jYXB0dXJlKTtmdW5jdGlvbiBSdCh0KXtsZXQgZT16dC5nZXQodC50eXBlKTt2b2lkIDA9PT1lJiYoZT17c3RyaW5nc0FycmF5Om5ldyBXZWFrTWFwLGtleVN0cmluZzpuZXcgTWFwfSx6dC5zZXQodC50eXBlLGUpKTtsZXQgcz1lLnN0cmluZ3NBcnJheS5nZXQodC5zdHJpbmdzKTtpZih2b2lkIDAhPT1zKXJldHVybiBzO2NvbnN0IGk9dC5zdHJpbmdzLmpvaW4ob3QpO3JldHVybiBzPWUua2V5U3RyaW5nLmdldChpKSx2b2lkIDA9PT1zJiYocz1uZXcgaHQodCx0LmdldFRlbXBsYXRlRWxlbWVudCgpKSxlLmtleVN0cmluZy5zZXQoaSxzKSksZS5zdHJpbmdzQXJyYXkuc2V0KHQuc3RyaW5ncyxzKSxzfWNvbnN0IHp0PW5ldyBNYXAsanQ9bmV3IFdlYWtNYXAsJHQ9bmV3IGNsYXNze2hhbmRsZUF0dHJpYnV0ZUV4cHJlc3Npb25zKHQsZSxzLGkpe2NvbnN0IG49ZVswXTtyZXR1cm5cIi5cIj09PW4/bmV3IFZ0KHQsZS5zbGljZSgxKSxzKS5wYXJ0czpcIkBcIj09PW4/W25ldyBVdCh0LGUuc2xpY2UoMSksaS5ldmVudENvbnRleHQpXTpcIj9cIj09PW4/W25ldyBBdCh0LGUuc2xpY2UoMSkscyldOm5ldyBDdCh0LGUscykucGFydHN9aGFuZGxlVGV4dEV4cHJlc3Npb24odCl7cmV0dXJuIG5ldyBUdCh0KX19O1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJih3aW5kb3cubGl0SHRtbFZlcnNpb25zfHwod2luZG93LmxpdEh0bWxWZXJzaW9ucz1bXSkpLnB1c2goXCIxLjIuMVwiKTtjb25zdCBMdD0odCwuLi5lKT0+bmV3IHh0KHQsZSxcImh0bWxcIiwkdCkscXQ9KHQsZSk9PmAke3R9LS0ke2V9YDtsZXQgSHQ9ITA7dm9pZCAwPT09d2luZG93LlNoYWR5Q1NTP0h0PSExOnZvaWQgMD09PXdpbmRvdy5TaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVEb20mJihjb25zb2xlLndhcm4oXCJJbmNvbXBhdGlibGUgU2hhZHlDU1MgdmVyc2lvbiBkZXRlY3RlZC4gUGxlYXNlIHVwZGF0ZSB0byBhdCBsZWFzdCBAd2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanNAMi4wLjIgYW5kIEB3ZWJjb21wb25lbnRzL3NoYWR5Y3NzQDEuMy4xLlwiKSxIdD0hMSk7Y29uc3QgSXQ9dD0+ZT0+e2NvbnN0IHM9cXQoZS50eXBlLHQpO2xldCBpPXp0LmdldChzKTt2b2lkIDA9PT1pJiYoaT17c3RyaW5nc0FycmF5Om5ldyBXZWFrTWFwLGtleVN0cmluZzpuZXcgTWFwfSx6dC5zZXQocyxpKSk7bGV0IG49aS5zdHJpbmdzQXJyYXkuZ2V0KGUuc3RyaW5ncyk7aWYodm9pZCAwIT09bilyZXR1cm4gbjtjb25zdCByPWUuc3RyaW5ncy5qb2luKG90KTtpZihuPWkua2V5U3RyaW5nLmdldChyKSx2b2lkIDA9PT1uKXtjb25zdCBzPWUuZ2V0VGVtcGxhdGVFbGVtZW50KCk7SHQmJndpbmRvdy5TaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVEb20ocyx0KSxuPW5ldyBodChlLHMpLGkua2V5U3RyaW5nLnNldChyLG4pfXJldHVybiBpLnN0cmluZ3NBcnJheS5zZXQoZS5zdHJpbmdzLG4pLG59LEZ0PVtcImh0bWxcIixcInN2Z1wiXSxXdD1uZXcgU2V0O3dpbmRvdy5KU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5PSh0LGUpPT50O2NvbnN0IEJ0PXt0b0F0dHJpYnV0ZSh0LGUpe3N3aXRjaChlKXtjYXNlIEJvb2xlYW46cmV0dXJuIHQ/XCJcIjpudWxsO2Nhc2UgT2JqZWN0OmNhc2UgQXJyYXk6cmV0dXJuIG51bGw9PXQ/dDpKU09OLnN0cmluZ2lmeSh0KX1yZXR1cm4gdH0sZnJvbUF0dHJpYnV0ZSh0LGUpe3N3aXRjaChlKXtjYXNlIEJvb2xlYW46cmV0dXJuIG51bGwhPT10O2Nhc2UgTnVtYmVyOnJldHVybiBudWxsPT09dD9udWxsOk51bWJlcih0KTtjYXNlIE9iamVjdDpjYXNlIEFycmF5OnJldHVybiBKU09OLnBhcnNlKHQpfXJldHVybiB0fX0sRHQ9KHQsZSk9PmUhPT10JiYoZT09ZXx8dD09dCksSnQ9e2F0dHJpYnV0ZTohMCx0eXBlOlN0cmluZyxjb252ZXJ0ZXI6QnQscmVmbGVjdDohMSxoYXNDaGFuZ2VkOkR0fTtjbGFzcyBYdCBleHRlbmRzIEhUTUxFbGVtZW50e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl91cGRhdGVTdGF0ZT0wLHRoaXMuX2luc3RhbmNlUHJvcGVydGllcz12b2lkIDAsdGhpcy5fdXBkYXRlUHJvbWlzZT1uZXcgUHJvbWlzZSh0PT50aGlzLl9lbmFibGVVcGRhdGluZ1Jlc29sdmVyPXQpLHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzPW5ldyBNYXAsdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXM9dm9pZCAwLHRoaXMuaW5pdGlhbGl6ZSgpfXN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCl7dGhpcy5maW5hbGl6ZSgpO2NvbnN0IHQ9W107cmV0dXJuIHRoaXMuX2NsYXNzUHJvcGVydGllcy5mb3JFYWNoKChlLHMpPT57Y29uc3QgaT10aGlzLl9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkocyxlKTt2b2lkIDAhPT1pJiYodGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcC5zZXQoaSxzKSx0LnB1c2goaSkpfSksdH1zdGF0aWMgX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpe2lmKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoXCJfY2xhc3NQcm9wZXJ0aWVzXCIsdGhpcykpKXt0aGlzLl9jbGFzc1Byb3BlcnRpZXM9bmV3IE1hcDtjb25zdCB0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fY2xhc3NQcm9wZXJ0aWVzO3ZvaWQgMCE9PXQmJnQuZm9yRWFjaCgodCxlKT0+dGhpcy5fY2xhc3NQcm9wZXJ0aWVzLnNldChlLHQpKX19c3RhdGljIGNyZWF0ZVByb3BlcnR5KHQsZT1KdCl7aWYodGhpcy5fZW5zdXJlQ2xhc3NQcm9wZXJ0aWVzKCksdGhpcy5fY2xhc3NQcm9wZXJ0aWVzLnNldCh0LGUpLGUubm9BY2Nlc3Nvcnx8dGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkodCkpcmV0dXJuO2NvbnN0IHM9XCJzeW1ib2xcIj09dHlwZW9mIHQ/U3ltYm9sKCk6XCJfX1wiK3QsaT10aGlzLmdldFByb3BlcnR5RGVzY3JpcHRvcih0LHMsZSk7dm9pZCAwIT09aSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLHQsaSl9c3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcih0LGUscyl7cmV0dXJue2dldCgpe3JldHVybiB0aGlzW2VdfSxzZXQocyl7Y29uc3QgaT10aGlzW3RdO3RoaXNbZV09cyx0aGlzLl9yZXF1ZXN0VXBkYXRlKHQsaSl9LGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwfX1zdGF0aWMgZ2V0UHJvcGVydHlPcHRpb25zKHQpe3JldHVybiB0aGlzLl9jbGFzc1Byb3BlcnRpZXMmJnRoaXMuX2NsYXNzUHJvcGVydGllcy5nZXQodCl8fEp0fXN0YXRpYyBmaW5hbGl6ZSgpe2NvbnN0IHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO2lmKHQuaGFzT3duUHJvcGVydHkoXCJmaW5hbGl6ZWRcIil8fHQuZmluYWxpemUoKSx0aGlzLmZpbmFsaXplZD0hMCx0aGlzLl9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKSx0aGlzLl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwPW5ldyBNYXAsdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KFwicHJvcGVydGllc1wiLHRoaXMpKSl7Y29uc3QgdD10aGlzLnByb3BlcnRpZXMsZT1bLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCksLi4uXCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpOltdXTtmb3IoY29uc3QgcyBvZiBlKXRoaXMuY3JlYXRlUHJvcGVydHkocyx0W3NdKX19c3RhdGljIF9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkodCxlKXtjb25zdCBzPWUuYXR0cmlidXRlO3JldHVybiExPT09cz92b2lkIDA6XCJzdHJpbmdcIj09dHlwZW9mIHM/czpcInN0cmluZ1wiPT10eXBlb2YgdD90LnRvTG93ZXJDYXNlKCk6dm9pZCAwfXN0YXRpYyBfdmFsdWVIYXNDaGFuZ2VkKHQsZSxzPUR0KXtyZXR1cm4gcyh0LGUpfXN0YXRpYyBfcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUodCxlKXtjb25zdCBzPWUudHlwZSxpPWUuY29udmVydGVyfHxCdCxuPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aTppLmZyb21BdHRyaWJ1dGU7cmV0dXJuIG4/bih0LHMpOnR9c3RhdGljIF9wcm9wZXJ0eVZhbHVlVG9BdHRyaWJ1dGUodCxlKXtpZih2b2lkIDA9PT1lLnJlZmxlY3QpcmV0dXJuO2NvbnN0IHM9ZS50eXBlLGk9ZS5jb252ZXJ0ZXI7cmV0dXJuKGkmJmkudG9BdHRyaWJ1dGV8fEJ0LnRvQXR0cmlidXRlKSh0LHMpfWluaXRpYWxpemUoKXt0aGlzLl9zYXZlSW5zdGFuY2VQcm9wZXJ0aWVzKCksdGhpcy5fcmVxdWVzdFVwZGF0ZSgpfV9zYXZlSW5zdGFuY2VQcm9wZXJ0aWVzKCl7dGhpcy5jb25zdHJ1Y3Rvci5fY2xhc3NQcm9wZXJ0aWVzLmZvckVhY2goKHQsZSk9PntpZih0aGlzLmhhc093blByb3BlcnR5KGUpKXtjb25zdCB0PXRoaXNbZV07ZGVsZXRlIHRoaXNbZV0sdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzfHwodGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzPW5ldyBNYXApLHRoaXMuX2luc3RhbmNlUHJvcGVydGllcy5zZXQoZSx0KX19KX1fYXBwbHlJbnN0YW5jZVByb3BlcnRpZXMoKXt0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMuZm9yRWFjaCgodCxlKT0+dGhpc1tlXT10KSx0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXM9dm9pZCAwfWNvbm5lY3RlZENhbGxiYWNrKCl7dGhpcy5lbmFibGVVcGRhdGluZygpfWVuYWJsZVVwZGF0aW5nKCl7dm9pZCAwIT09dGhpcy5fZW5hYmxlVXBkYXRpbmdSZXNvbHZlciYmKHRoaXMuX2VuYWJsZVVwZGF0aW5nUmVzb2x2ZXIoKSx0aGlzLl9lbmFibGVVcGRhdGluZ1Jlc29sdmVyPXZvaWQgMCl9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt9YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHQsZSxzKXtlIT09cyYmdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eSh0LHMpfV9wcm9wZXJ0eVRvQXR0cmlidXRlKHQsZSxzPUp0KXtjb25zdCBpPXRoaXMuY29uc3RydWN0b3Isbj1pLl9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkodCxzKTtpZih2b2lkIDAhPT1uKXtjb25zdCB0PWkuX3Byb3BlcnR5VmFsdWVUb0F0dHJpYnV0ZShlLHMpO2lmKHZvaWQgMD09PXQpcmV0dXJuO3RoaXMuX3VwZGF0ZVN0YXRlPTh8dGhpcy5fdXBkYXRlU3RhdGUsbnVsbD09dD90aGlzLnJlbW92ZUF0dHJpYnV0ZShuKTp0aGlzLnNldEF0dHJpYnV0ZShuLHQpLHRoaXMuX3VwZGF0ZVN0YXRlPS05JnRoaXMuX3VwZGF0ZVN0YXRlfX1fYXR0cmlidXRlVG9Qcm9wZXJ0eSh0LGUpe2lmKDgmdGhpcy5fdXBkYXRlU3RhdGUpcmV0dXJuO2NvbnN0IHM9dGhpcy5jb25zdHJ1Y3RvcixpPXMuX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXAuZ2V0KHQpO2lmKHZvaWQgMCE9PWkpe2NvbnN0IHQ9cy5nZXRQcm9wZXJ0eU9wdGlvbnMoaSk7dGhpcy5fdXBkYXRlU3RhdGU9MTZ8dGhpcy5fdXBkYXRlU3RhdGUsdGhpc1tpXT1zLl9wcm9wZXJ0eVZhbHVlRnJvbUF0dHJpYnV0ZShlLHQpLHRoaXMuX3VwZGF0ZVN0YXRlPS0xNyZ0aGlzLl91cGRhdGVTdGF0ZX19X3JlcXVlc3RVcGRhdGUodCxlKXtsZXQgcz0hMDtpZih2b2lkIDAhPT10KXtjb25zdCBpPXRoaXMuY29uc3RydWN0b3Isbj1pLmdldFByb3BlcnR5T3B0aW9ucyh0KTtpLl92YWx1ZUhhc0NoYW5nZWQodGhpc1t0XSxlLG4uaGFzQ2hhbmdlZCk/KHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLmhhcyh0KXx8dGhpcy5fY2hhbmdlZFByb3BlcnRpZXMuc2V0KHQsZSksITAhPT1uLnJlZmxlY3R8fDE2JnRoaXMuX3VwZGF0ZVN0YXRlfHwodm9pZCAwPT09dGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMmJih0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcz1uZXcgTWFwKSx0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcy5zZXQodCxuKSkpOnM9ITF9IXRoaXMuX2hhc1JlcXVlc3RlZFVwZGF0ZSYmcyYmKHRoaXMuX3VwZGF0ZVByb21pc2U9dGhpcy5fZW5xdWV1ZVVwZGF0ZSgpKX1yZXF1ZXN0VXBkYXRlKHQsZSl7cmV0dXJuIHRoaXMuX3JlcXVlc3RVcGRhdGUodCxlKSx0aGlzLnVwZGF0ZUNvbXBsZXRlfWFzeW5jIF9lbnF1ZXVlVXBkYXRlKCl7dGhpcy5fdXBkYXRlU3RhdGU9NHx0aGlzLl91cGRhdGVTdGF0ZTt0cnl7YXdhaXQgdGhpcy5fdXBkYXRlUHJvbWlzZX1jYXRjaCh0KXt9Y29uc3QgdD10aGlzLnBlcmZvcm1VcGRhdGUoKTtyZXR1cm4gbnVsbCE9dCYmYXdhaXQgdCwhdGhpcy5faGFzUmVxdWVzdGVkVXBkYXRlfWdldCBfaGFzUmVxdWVzdGVkVXBkYXRlKCl7cmV0dXJuIDQmdGhpcy5fdXBkYXRlU3RhdGV9Z2V0IGhhc1VwZGF0ZWQoKXtyZXR1cm4gMSZ0aGlzLl91cGRhdGVTdGF0ZX1wZXJmb3JtVXBkYXRlKCl7dGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzJiZ0aGlzLl9hcHBseUluc3RhbmNlUHJvcGVydGllcygpO2xldCB0PSExO2NvbnN0IGU9dGhpcy5fY2hhbmdlZFByb3BlcnRpZXM7dHJ5e3Q9dGhpcy5zaG91bGRVcGRhdGUoZSksdD90aGlzLnVwZGF0ZShlKTp0aGlzLl9tYXJrVXBkYXRlZCgpfWNhdGNoKGUpe3Rocm93IHQ9ITEsdGhpcy5fbWFya1VwZGF0ZWQoKSxlfXQmJigxJnRoaXMuX3VwZGF0ZVN0YXRlfHwodGhpcy5fdXBkYXRlU3RhdGU9MXx0aGlzLl91cGRhdGVTdGF0ZSx0aGlzLmZpcnN0VXBkYXRlZChlKSksdGhpcy51cGRhdGVkKGUpKX1fbWFya1VwZGF0ZWQoKXt0aGlzLl9jaGFuZ2VkUHJvcGVydGllcz1uZXcgTWFwLHRoaXMuX3VwZGF0ZVN0YXRlPS01JnRoaXMuX3VwZGF0ZVN0YXRlfWdldCB1cGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLl9nZXRVcGRhdGVDb21wbGV0ZSgpfV9nZXRVcGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLl91cGRhdGVQcm9taXNlfXNob3VsZFVwZGF0ZSh0KXtyZXR1cm4hMH11cGRhdGUodCl7dm9pZCAwIT09dGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMmJnRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzLnNpemU+MCYmKHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzLmZvckVhY2goKHQsZSk9PnRoaXMuX3Byb3BlcnR5VG9BdHRyaWJ1dGUoZSx0aGlzW2VdLHQpKSx0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcz12b2lkIDApLHRoaXMuX21hcmtVcGRhdGVkKCl9dXBkYXRlZCh0KXt9Zmlyc3RVcGRhdGVkKHQpe319WHQuZmluYWxpemVkPSEwO2NvbnN0IFl0PSh0LGUpPT5cIm1ldGhvZFwiPT09ZS5raW5kJiZlLmRlc2NyaXB0b3ImJiEoXCJ2YWx1ZVwiaW4gZS5kZXNjcmlwdG9yKT9PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sZSkse2ZpbmlzaGVyKHMpe3MuY3JlYXRlUHJvcGVydHkoZS5rZXksdCl9fSk6e2tpbmQ6XCJmaWVsZFwiLGtleTpTeW1ib2woKSxwbGFjZW1lbnQ6XCJvd25cIixkZXNjcmlwdG9yOnt9LGluaXRpYWxpemVyKCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZS5pbml0aWFsaXplciYmKHRoaXNbZS5rZXldPWUuaW5pdGlhbGl6ZXIuY2FsbCh0aGlzKSl9LGZpbmlzaGVyKHMpe3MuY3JlYXRlUHJvcGVydHkoZS5rZXksdCl9fTtmdW5jdGlvbiBHdCh0KXtyZXR1cm4oZSxzKT0+dm9pZCAwIT09cz8oKHQsZSxzKT0+e2UuY29uc3RydWN0b3IuY3JlYXRlUHJvcGVydHkocyx0KX0pKHQsZSxzKTpZdCh0LGUpfWNvbnN0IEt0PVwiYWRvcHRlZFN0eWxlU2hlZXRzXCJpbiBEb2N1bWVudC5wcm90b3R5cGUmJlwicmVwbGFjZVwiaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGU7KHdpbmRvdy5saXRFbGVtZW50VmVyc2lvbnN8fCh3aW5kb3cubGl0RWxlbWVudFZlcnNpb25zPVtdKSkucHVzaChcIjIuMy4xXCIpO2NvbnN0IFF0PXt9O2NsYXNzIFp0IGV4dGVuZHMgWHR7c3RhdGljIGdldFN0eWxlcygpe3JldHVybiB0aGlzLnN0eWxlc31zdGF0aWMgX2dldFVuaXF1ZVN0eWxlcygpe2lmKHRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eShcIl9zdHlsZXNcIix0aGlzKSkpcmV0dXJuO2NvbnN0IHQ9dGhpcy5nZXRTdHlsZXMoKTtpZih2b2lkIDA9PT10KXRoaXMuX3N0eWxlcz1bXTtlbHNlIGlmKEFycmF5LmlzQXJyYXkodCkpe2NvbnN0IGU9KHQscyk9PnQucmVkdWNlUmlnaHQoKHQscyk9PkFycmF5LmlzQXJyYXkocyk/ZShzLHQpOih0LmFkZChzKSx0KSxzKSxzPWUodCxuZXcgU2V0KSxpPVtdO3MuZm9yRWFjaCh0PT5pLnVuc2hpZnQodCkpLHRoaXMuX3N0eWxlcz1pfWVsc2UgdGhpcy5fc3R5bGVzPVt0XX1pbml0aWFsaXplKCl7c3VwZXIuaW5pdGlhbGl6ZSgpLHRoaXMuY29uc3RydWN0b3IuX2dldFVuaXF1ZVN0eWxlcygpLHRoaXMucmVuZGVyUm9vdD10aGlzLmNyZWF0ZVJlbmRlclJvb3QoKSx3aW5kb3cuU2hhZG93Um9vdCYmdGhpcy5yZW5kZXJSb290IGluc3RhbmNlb2Ygd2luZG93LlNoYWRvd1Jvb3QmJnRoaXMuYWRvcHRTdHlsZXMoKX1jcmVhdGVSZW5kZXJSb290KCl7cmV0dXJuIHRoaXMuYXR0YWNoU2hhZG93KHttb2RlOlwib3BlblwifSl9YWRvcHRTdHlsZXMoKXtjb25zdCB0PXRoaXMuY29uc3RydWN0b3IuX3N0eWxlczswIT09dC5sZW5ndGgmJih2b2lkIDA9PT13aW5kb3cuU2hhZHlDU1N8fHdpbmRvdy5TaGFkeUNTUy5uYXRpdmVTaGFkb3c/S3Q/dGhpcy5yZW5kZXJSb290LmFkb3B0ZWRTdHlsZVNoZWV0cz10Lm1hcCh0PT50LnN0eWxlU2hlZXQpOnRoaXMuX25lZWRzU2hpbUFkb3B0ZWRTdHlsZVNoZWV0cz0hMDp3aW5kb3cuU2hhZHlDU1MuU2NvcGluZ1NoaW0ucHJlcGFyZUFkb3B0ZWRDc3NUZXh0KHQubWFwKHQ9PnQuY3NzVGV4dCksdGhpcy5sb2NhbE5hbWUpKX1jb25uZWN0ZWRDYWxsYmFjaygpe3N1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCksdGhpcy5oYXNVcGRhdGVkJiZ2b2lkIDAhPT13aW5kb3cuU2hhZHlDU1MmJndpbmRvdy5TaGFkeUNTUy5zdHlsZUVsZW1lbnQodGhpcyl9dXBkYXRlKHQpe2NvbnN0IGU9dGhpcy5yZW5kZXIoKTtzdXBlci51cGRhdGUodCksZSE9PVF0JiZ0aGlzLmNvbnN0cnVjdG9yLnJlbmRlcihlLHRoaXMucmVuZGVyUm9vdCx7c2NvcGVOYW1lOnRoaXMubG9jYWxOYW1lLGV2ZW50Q29udGV4dDp0aGlzfSksdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzJiYodGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzPSExLHRoaXMuY29uc3RydWN0b3IuX3N0eWxlcy5mb3JFYWNoKHQ9Pntjb25zdCBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtlLnRleHRDb250ZW50PXQuY3NzVGV4dCx0aGlzLnJlbmRlclJvb3QuYXBwZW5kQ2hpbGQoZSl9KSl9cmVuZGVyKCl7cmV0dXJuIFF0fX1adC5maW5hbGl6ZWQ9ITAsWnQucmVuZGVyPSh0LGUscyk9PntpZighc3x8XCJvYmplY3RcIiE9dHlwZW9mIHN8fCFzLnNjb3BlTmFtZSl0aHJvdyBFcnJvcihcIlRoZSBgc2NvcGVOYW1lYCBvcHRpb24gaXMgcmVxdWlyZWQuXCIpO2NvbnN0IGk9cy5zY29wZU5hbWUsbj1qdC5oYXMoZSkscj1IdCYmMTE9PT1lLm5vZGVUeXBlJiYhIWUuaG9zdCxvPXImJiFXdC5oYXMoaSksYT1vP2RvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTplO2lmKCgodCxlLHMpPT57bGV0IGk9anQuZ2V0KGUpO3ZvaWQgMD09PWkmJihydChlLGUuZmlyc3RDaGlsZCksanQuc2V0KGUsaT1uZXcgVHQoT2JqZWN0LmFzc2lnbih7dGVtcGxhdGVGYWN0b3J5OlJ0fSxzKSkpLGkuYXBwZW5kSW50byhlKSksaS5zZXRWYWx1ZSh0KSxpLmNvbW1pdCgpfSkodCxhLE9iamVjdC5hc3NpZ24oe3RlbXBsYXRlRmFjdG9yeTpJdChpKX0scykpLG8pe2NvbnN0IHQ9anQuZ2V0KGEpO2p0LmRlbGV0ZShhKTsoKHQsZSxzKT0+e1d0LmFkZCh0KTtjb25zdCBpPXM/cy5lbGVtZW50OmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKSxuPWUucXVlcnlTZWxlY3RvckFsbChcInN0eWxlXCIpLHtsZW5ndGg6cn09bjtpZigwPT09cilyZXR1cm4gdm9pZCB3aW5kb3cuU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlU3R5bGVzKGksdCk7Y29uc3Qgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7Zm9yKGxldCB0PTA7dDxyO3QrKyl7Y29uc3QgZT1uW3RdO2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSxvLnRleHRDb250ZW50Kz1lLnRleHRDb250ZW50fSh0PT57RnQuZm9yRWFjaChlPT57Y29uc3Qgcz16dC5nZXQocXQoZSx0KSk7dm9pZCAwIT09cyYmcy5rZXlTdHJpbmcuZm9yRWFjaCh0PT57Y29uc3R7ZWxlbWVudDp7Y29udGVudDplfX09dCxzPW5ldyBTZXQ7QXJyYXkuZnJvbShlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVwiKSkuZm9yRWFjaCh0PT57cy5hZGQodCl9KSxfdCh0LHMpfSl9KX0pKHQpO2NvbnN0IGE9aS5jb250ZW50O3M/ZnVuY3Rpb24odCxlLHM9bnVsbCl7Y29uc3R7ZWxlbWVudDp7Y29udGVudDppfSxwYXJ0czpufT10O2lmKG51bGw9PXMpcmV0dXJuIHZvaWQgaS5hcHBlbmRDaGlsZChlKTtjb25zdCByPWRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoaSwxMzMsbnVsbCwhMSk7bGV0IG89Z3QobiksYT0wLGw9LTE7Zm9yKDtyLm5leHROb2RlKCk7KWZvcihsKyssci5jdXJyZW50Tm9kZT09PXMmJihhPW10KGUpLHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSxzKSk7LTEhPT1vJiZuW29dLmluZGV4PT09bDspe2lmKGE+MCl7Zm9yKDstMSE9PW87KW5bb10uaW5kZXgrPWEsbz1ndChuLG8pO3JldHVybn1vPWd0KG4sbyl9fShzLG8sYS5maXJzdENoaWxkKTphLmluc2VydEJlZm9yZShvLGEuZmlyc3RDaGlsZCksd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZVN0eWxlcyhpLHQpO2NvbnN0IGw9YS5xdWVyeVNlbGVjdG9yKFwic3R5bGVcIik7aWYod2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdyYmbnVsbCE9PWwpZS5pbnNlcnRCZWZvcmUobC5jbG9uZU5vZGUoITApLGUuZmlyc3RDaGlsZCk7ZWxzZSBpZihzKXthLmluc2VydEJlZm9yZShvLGEuZmlyc3RDaGlsZCk7Y29uc3QgdD1uZXcgU2V0O3QuYWRkKG8pLF90KHMsdCl9fSkoaSxhLHQudmFsdWUgaW5zdGFuY2VvZiB3dD90LnZhbHVlLnRlbXBsYXRlOnZvaWQgMCkscnQoZSxlLmZpcnN0Q2hpbGQpLGUuYXBwZW5kQ2hpbGQoYSksanQuc2V0KGUsdCl9IW4mJnImJndpbmRvdy5TaGFkeUNTUy5zdHlsZUVsZW1lbnQoZS5ob3N0KX07Y29uc3QgdGU9KHQsZSxzPXt9KT0+e3QuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoZSx7ZGV0YWlsOnN9KSl9LGVlPSh0LGUpPT57aWYodC50eXBlLnN0YXJ0c1dpdGgoXCJ0b3VjaFwiKSl7aWYodm9pZCAwPT09ZSlyZXR1cm47Y29uc3Qgcz1zZSh0LGUpO3JldHVybnt4OnMueCx5OnMueX19cmV0dXJue3g6dC5jbGllbnRYLHk6dC5jbGllbnRZfX0sc2U9KHQsZSk9Pntjb25zdCBzPXQudGFyZ2V0VG91Y2hlcyYmQXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbCh0LnRhcmdldFRvdWNoZXMsdD0+ZT09PXQuaWRlbnRpZmllcil8fHQuY2hhbmdlZFRvdWNoZXMmJkFycmF5LnByb3RvdHlwZS5maW5kLmNhbGwodC5jaGFuZ2VkVG91Y2hlcyx0PT5lPT09dC5pZGVudGlmaWVyKTtyZXR1cm57eDpzLmNsaWVudFgseTpzLmNsaWVudFl9fTtsZXQgaWU9XCJcIjtjb25zdCBuZT0odCxlKT0+KGllfHwoaWU9W1wibWF0Y2hlc1wiLFwid2Via2l0TWF0Y2hlc1NlbGVjdG9yXCIsXCJtb3pNYXRjaGVzU2VsZWN0b3JcIixcIm1zTWF0Y2hlc1NlbGVjdG9yXCIsXCJvTWF0Y2hlc1NlbGVjdG9yXCJdLmZpbmQoZT0+cmUodFtlXSkpKSwhKCFpZXx8IXJlKHRbaWVdKSkmJnRbaWVdKGUpKSxyZT10PT5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0fHxcIltvYmplY3QgRnVuY3Rpb25dXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCk7bGV0IG9lPWNsYXNzIGV4dGVuZHMgWnR7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMuZGlzYWJsZWQ9ITEsdGhpcy5fZHJhZ2dpbmc9ITF9Zmlyc3RVcGRhdGVkKCl7dGhpcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsdGhpcy5fZHJhZ1N0YXJ0LmJpbmQodGhpcykse2NhcHR1cmU6ITAscGFzc2l2ZTohMX0pLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIix0aGlzLl9kcmFnU3RhcnQuYmluZCh0aGlzKSx7Y2FwdHVyZTohMCxwYXNzaXZlOiExfSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHRoaXMuX2RyYWcuYmluZCh0aGlzKSx7Y2FwdHVyZTohMCxwYXNzaXZlOiExfSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLHRoaXMuX2RyYWcuYmluZCh0aGlzKSx7Y2FwdHVyZTohMCxwYXNzaXZlOiExfSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLl9kcmFnRW5kLmJpbmQodGhpcykse2NhcHR1cmU6ITAscGFzc2l2ZTohMX0pLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGNhbmNlbFwiLHRoaXMuX2RyYWdFbmQuYmluZCh0aGlzKSx7Y2FwdHVyZTohMCxwYXNzaXZlOiExfSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsdGhpcy5fZHJhZ0VuZC5iaW5kKHRoaXMpLHtjYXB0dXJlOiEwLHBhc3NpdmU6ITF9KX1yZW5kZXIoKXtyZXR1cm4gTHRgPHNsb3Q+PC9zbG90PmB9X2RyYWdTdGFydCh0KXtpZih0LnR5cGUuc3RhcnRzV2l0aChcIm1vdXNlXCIpJiYwIT09dC5idXR0b258fHRoaXMuZGlzYWJsZWQpcmV0dXJuO2lmKHRoaXMuaGFuZGxlJiYhKCh0LGUscyk9PntsZXQgaT10O2Rve2lmKGNvbnNvbGUubG9nKFwiU2VsZWN0b3I6IFwiLGUsXCJOb2RlOiBcIixpKSxuZShpLGUpKXJldHVybiEwO2lmKGk9PT1zKXJldHVybiExO2k9aS5wYXJlbnROb2RlfXdoaWxlKGkpO3JldHVybiExfSkodC50YXJnZXQsdGhpcy5oYW5kbGUsdGhpcy5vZmZzZXRQYXJlbnQpKXJldHVybjt2YXIgZTt0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxcInRvdWNoc3RhcnRcIj09PXQudHlwZSYmKHRoaXMuX3RvdWNoSWRlbnRpZmllcj0oZT10KS50YXJnZXRUb3VjaGVzJiZlLnRhcmdldFRvdWNoZXNbMF0/ZS50YXJnZXRUb3VjaGVzWzBdLmlkZW50aWZpZXI6ZS5jaGFuZ2VkVG91Y2hlcyYmZS5jaGFuZ2VkVG91Y2hlc1swXT9lLmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXI6MCk7Y29uc3Qgcz1lZSh0LHRoaXMuX3RvdWNoSWRlbnRpZmllcik7cyYmKHRoaXMuc3RhcnRYPXMueCx0aGlzLnN0YXJ0WT1zLnksdGhpcy5fZHJhZ2dpbmc9ITAsdGUodGhpcyxcImRyYWdTdGFydFwiLHtzdGFydFg6dGhpcy5zdGFydFgsc3RhcnRZOnRoaXMuc3RhcnRZfSkpfV9kcmFnKHQpe2lmKCF0aGlzLl9kcmFnZ2luZ3x8dGhpcy5kaXNhYmxlZClyZXR1cm47dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCk7Y29uc3QgZT1lZSh0LHRoaXMuX3RvdWNoSWRlbnRpZmllcik7aWYoIWUpcmV0dXJuO2xldCBzPWUueC10aGlzLnN0YXJ0WCxpPWUueS10aGlzLnN0YXJ0WTt0aGlzLmdyaWQmJihzPU1hdGgucm91bmQocy90aGlzLmdyaWRbMF0pKnRoaXMuZ3JpZFswXSxpPU1hdGgucm91bmQoaS90aGlzLmdyaWRbMV0pKnRoaXMuZ3JpZFsxXSksKHN8fGkpJiZ0ZSh0aGlzLFwiZHJhZ2dpbmdcIix7ZGVsdGFYOnMsZGVsdGFZOml9KX1fZHJhZ0VuZCh0KXt0aGlzLl9kcmFnZ2luZyYmIXRoaXMuZGlzYWJsZWQmJih0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSx0aGlzLl90b3VjaElkZW50aWZpZXI9dm9pZCAwLHRoaXMuX2RyYWdnaW5nPSExLHRlKHRoaXMsXCJkcmFnRW5kXCIpKX19O2l0KFtHdCh7dHlwZTpBcnJheX0pXSxvZS5wcm90b3R5cGUsXCJncmlkXCIsdm9pZCAwKSxpdChbR3Qoe3R5cGU6Qm9vbGVhbixyZWZsZWN0OiEwfSldLG9lLnByb3RvdHlwZSxcImRpc2FibGVkXCIsdm9pZCAwKSxpdChbR3QoKV0sb2UucHJvdG90eXBlLFwiaGFuZGxlXCIsdm9pZCAwKSxvZT1pdChbKFwibGl0LWRyYWdnYWJsZVwiLHQ9PlwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/KCh0LGUpPT4od2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImxpdC1kcmFnZ2FibGVcIixlKSxlKSkoMCx0KTooKHQsZSk9Pntjb25zdHtraW5kOnMsZWxlbWVudHM6aX09ZTtyZXR1cm57a2luZDpzLGVsZW1lbnRzOmksZmluaXNoZXIodCl7d2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImxpdC1kcmFnZ2FibGVcIix0KX19fSkoMCx0KSldLG9lKTtjb25zdCBhZT0odCxlLHM9e30pPT57dC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChlLHtkZXRhaWw6c30pKX07bGV0IGxlPWNsYXNzIGV4dGVuZHMgc3R7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMuZGlzYWJsZWQ9ITF9cmVuZGVyKCl7cmV0dXJuIGpgXG4gICAgICA8c2xvdD48L3Nsb3Q+XG5cbiAgICAgICR7dGhpcy5kaXNhYmxlZD9cIlwiOmpgXG4gICAgICAgICAgICA8bGl0LWRyYWdnYWJsZVxuICAgICAgICAgICAgICBAZHJhZ2dpbmc9JHt0aGlzLl9yZXNpemV9XG4gICAgICAgICAgICAgIEBkcmFnU3RhcnQ9JHt0aGlzLl9yZXNpemVTdGFydH1cbiAgICAgICAgICAgICAgQGRyYWdFbmQ9JHt0aGlzLl9yZXNpemVFbmR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICR7dGhpcy5oYW5kbGU/amAke3RoaXMuaGFuZGxlfWA6JGBcbiAgICAgICAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvbi10YWJsZXItYXJyb3dzLWRpYWdvbmFsLTJcIlxuICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPHBhdGggc3Ryb2tlPVwibm9uZVwiIGQ9XCJNMCAwaDI0djI0SDB6XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8cG9seWxpbmUgcG9pbnRzPVwiMTYgMjAgMjAgMjAgMjAgMTZcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgIDxsaW5lIHgxPVwiMTRcIiB5MT1cIjE0XCIgeDI9XCIyMFwiIHkyPVwiMjBcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgIDxwb2x5bGluZSBwb2ludHM9XCI4IDQgNCA0IDQgOFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPGxpbmUgeDE9XCI0XCIgeTE9XCI0XCIgeDI9XCIxMFwiIHkyPVwiMTBcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICA8L2xpdC1kcmFnZ2FibGU+XG4gICAgICAgICAgYH1cbiAgICBgfV9yZXNpemVTdGFydCh0KXt0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSx0aGlzLnN0YXJ0V2lkdGg9dGhpcy5jbGllbnRXaWR0aCx0aGlzLnN0YXJ0SGVpZ2h0PXRoaXMuY2xpZW50SGVpZ2h0LGFlKHRoaXMsXCJyZXNpemVTdGFydFwiKX1fcmVzaXplKHQpe2lmKHQucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLHZvaWQgMD09PXRoaXMuc3RhcnRXaWR0aHx8dm9pZCAwPT09dGhpcy5zdGFydEhlaWdodClyZXR1cm47Y29uc3R7ZGVsdGFYOmUsZGVsdGFZOnN9PXQuZGV0YWlsO2lmKDA9PT1zJiYwPT09ZSlyZXR1cm47Y29uc3QgaT10aGlzLnN0YXJ0V2lkdGgrZSxuPXRoaXMuc3RhcnRIZWlnaHQrczthZSh0aGlzLFwicmVzaXplXCIse3dpZHRoOmksaGVpZ2h0Om4sZGVsdGFYOmUsZGVsdGFZOnN9KX1fcmVzaXplRW5kKHQpe3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLHRoaXMuc3RhcnRXaWR0aD12b2lkIDAsdGhpcy5zdGFydEhlaWdodD12b2lkIDAsYWUodGhpcyxcInJlc2l6ZUVuZFwiKX1zdGF0aWMgZ2V0IHN0eWxlcygpe3JldHVybiB0dGBcbiAgICAgIDpob3N0IHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIH1cblxuICAgICAgbGl0LWRyYWdnYWJsZSB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgbGVmdDogdmFyKC0tcmVzaXplLWhhbmRsZS1wb3NpdGlvbi1sZWZ0LCB1bnNldCk7XG4gICAgICAgIHRvcDogdmFyKC0tcmVzaXplLWhhbmRsZS1wb3N0aW9uLXRvcCwgdW5zZXQpO1xuICAgICAgICBib3R0b206IHZhcigtLXJlc2l6ZS1oYW5kbGUtcG9zaXRpb24tYm90dG9tLCAwKTtcbiAgICAgICAgcmlnaHQ6IHZhcigtLXJlc2l6ZS1oYW5kbGUtcG9zdGlvbi1yaWdodCwgMCk7XG4gICAgICAgIHdpZHRoOiB2YXIoLS1yZXNpemUtaGFuZGxlLXdpZHRoLCAxOHB4KTtcbiAgICAgICAgaGVpZ2h0OiB2YXIoLS1yZXNpemUtaGFuZGxlLWhlaWdodCwgMThweCk7XG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgICAgfVxuXG4gICAgICAuaWNvbi10YWJsZXItYXJyb3dzLWRpYWdvbmFsLTIge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBzdHJva2Utd2lkdGg6IDEuNTtcbiAgICAgICAgc3Ryb2tlOiAjNjA3ZDhiO1xuICAgICAgICBmaWxsOiBub25lO1xuICAgICAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gICAgICAgIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XG4gICAgICAgIGN1cnNvcjogc2UtcmVzaXplO1xuICAgICAgfVxuICAgIGB9fTt2YXIgaGU7dChbRyh7YXR0cmlidXRlOiExfSldLGxlLnByb3RvdHlwZSxcImhhbmRsZVwiLHZvaWQgMCksdChbRyh7dHlwZTpCb29sZWFufSldLGxlLnByb3RvdHlwZSxcImRpc2FibGVkXCIsdm9pZCAwKSxsZT10KFsoaGU9XCJsaXQtcmVzaXphYmxlXCIsdD0+XCJmdW5jdGlvblwiPT10eXBlb2YgdD8oKHQsZSk9Pih3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKHQsZSksZSkpKGhlLHQpOigodCxlKT0+e2NvbnN0e2tpbmQ6cyxlbGVtZW50czppfT1lO3JldHVybntraW5kOnMsZWxlbWVudHM6aSxmaW5pc2hlcihlKXt3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKHQsZSl9fX0pKGhlLHQpKV0sbGUpO2V4cG9ydHtsZSBhcyBMaXRSZXNpemFibGV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liR2wwTFhKbGMybDZZV0pzWlM1cWN5SXNJbk52ZFhKalpYTWlPbHNpTGk0dmJtOWtaVjl0YjJSMWJHVnpMM1J6YkdsaUwzUnpiR2xpTG1Wek5pNXFjeUlzSWk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlzYVhRdGFIUnRiQzlzYVdJdlpHOXRMbXB6SWl3aUxpNHZibTlrWlY5dGIyUjFiR1Z6TDJ4cGRDMW9kRzFzTDJ4cFlpOTBaVzF3YkdGMFpTNXFjeUlzSWk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlzYVhRdGFIUnRiQzlzYVdJdmJXOWthV1o1TFhSbGJYQnNZWFJsTG1weklpd2lMaTR2Ym05a1pWOXRiMlIxYkdWekwyeHBkQzFvZEcxc0wyeHBZaTlrYVhKbFkzUnBkbVV1YW5NaUxDSXVMaTl1YjJSbFgyMXZaSFZzWlhNdmJHbDBMV2gwYld3dmJHbGlMM0JoY25RdWFuTWlMQ0l1TGk5dWIyUmxYMjF2WkhWc1pYTXZiR2wwTFdoMGJXd3ZiR2xpTDNSbGJYQnNZWFJsTFdsdWMzUmhibU5sTG1weklpd2lMaTR2Ym05a1pWOXRiMlIxYkdWekwyeHBkQzFvZEcxc0wyeHBZaTkwWlcxd2JHRjBaUzF5WlhOMWJIUXVhbk1pTENJdUxpOXViMlJsWDIxdlpIVnNaWE12YkdsMExXaDBiV3d2YkdsaUwzQmhjblJ6TG1weklpd2lMaTR2Ym05a1pWOXRiMlIxYkdWekwyeHBkQzFvZEcxc0wyeHBZaTkwWlcxd2JHRjBaUzFtWVdOMGIzSjVMbXB6SWl3aUxpNHZibTlrWlY5dGIyUjFiR1Z6TDJ4cGRDMW9kRzFzTDJ4cFlpOXlaVzVrWlhJdWFuTWlMQ0l1TGk5dWIyUmxYMjF2WkhWc1pYTXZiR2wwTFdoMGJXd3ZiR2xpTDJSbFptRjFiSFF0ZEdWdGNHeGhkR1V0Y0hKdlkyVnpjMjl5TG1weklpd2lMaTR2Ym05a1pWOXRiMlIxYkdWekwyeHBkQzFvZEcxc0wyeHBkQzFvZEcxc0xtcHpJaXdpTGk0dmJtOWtaVjl0YjJSMWJHVnpMMnhwZEMxb2RHMXNMMnhwWWk5emFHRmtlUzF5Wlc1a1pYSXVhbk1pTENJdUxpOXViMlJsWDIxdlpIVnNaWE12YkdsMExXVnNaVzFsYm5RdmJHbGlMM1Z3WkdGMGFXNW5MV1ZzWlcxbGJuUXVhbk1pTENJdUxpOXViMlJsWDIxdlpIVnNaWE12YkdsMExXVnNaVzFsYm5RdmJHbGlMMlJsWTI5eVlYUnZjbk11YW5NaUxDSXVMaTl1YjJSbFgyMXZaSFZzWlhNdmJHbDBMV1ZzWlcxbGJuUXZiR2xpTDJOemN5MTBZV2N1YW5NaUxDSXVMaTl1YjJSbFgyMXZaSFZzWlhNdmJHbDBMV1ZzWlcxbGJuUXZiR2wwTFdWc1pXMWxiblF1YW5NaUxDSXVMaTl1YjJSbFgyMXZaSFZzWlhNdmJHbDBMV1J5WVdkbllXSnNaUzlrYVhOMEwyeHBkQzFrY21GbloyRmliR1V1YW5NaUxDSXVMaTl6Y21NdmRYUnBiQzltYVhKbExXVjJaVzUwTG5Seklpd2lMaTR2YzNKakwyeHBkQzF5WlhOcGVtRmliR1V1ZEhNaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9oSUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYSEpjYmtOdmNIbHlhV2RvZENBb1l5a2dUV2xqY205emIyWjBJRU52Y25CdmNtRjBhVzl1TGx4eVhHNWNjbHh1VUdWeWJXbHpjMmx2YmlCMGJ5QjFjMlVzSUdOdmNIa3NJRzF2WkdsbWVTd2dZVzVrTDI5eUlHUnBjM1J5YVdKMWRHVWdkR2hwY3lCemIyWjBkMkZ5WlNCbWIzSWdZVzU1WEhKY2JuQjFjbkJ2YzJVZ2QybDBhQ0J2Y2lCM2FYUm9iM1YwSUdabFpTQnBjeUJvWlhKbFlua2daM0poYm5SbFpDNWNjbHh1WEhKY2JsUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJZ1FVNUVJRlJJUlNCQlZWUklUMUlnUkVsVFEweEJTVTFUSUVGTVRDQlhRVkpTUVU1VVNVVlRJRmRKVkVoY2NseHVVa1ZIUVZKRUlGUlBJRlJJU1ZNZ1UwOUdWRmRCVWtVZ1NVNURURlZFU1U1SElFRk1UQ0JKVFZCTVNVVkVJRmRCVWxKQlRsUkpSVk1nVDBZZ1RVVlNRMGhCVGxSQlFrbE1TVlJaWEhKY2JrRk9SQ0JHU1ZST1JWTlRMaUJKVGlCT1R5QkZWa1ZPVkNCVFNFRk1UQ0JVU0VVZ1FWVlVTRTlTSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUZOUVJVTkpRVXdzSUVSSlVrVkRWQ3hjY2x4dVNVNUVTVkpGUTFRc0lFOVNJRU5QVGxORlVWVkZUbFJKUVV3Z1JFRk5RVWRGVXlCUFVpQkJUbGtnUkVGTlFVZEZVeUJYU0VGVVUwOUZWa1ZTSUZKRlUxVk1WRWxPUnlCR1VrOU5YSEpjYmt4UFUxTWdUMFlnVlZORkxDQkVRVlJCSUU5U0lGQlNUMFpKVkZNc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCT1JVZE1TVWRGVGtORklFOVNYSEpjYms5VVNFVlNJRlJQVWxSSlQxVlRJRUZEVkVsUFRpd2dRVkpKVTBsT1J5QlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVlUwVWdUMUpjY2x4dVVFVlNSazlTVFVGT1EwVWdUMFlnVkVoSlV5QlRUMFpVVjBGU1JTNWNjbHh1S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb2dLaTljY2x4dUx5b2daMnh2WW1Gc0lGSmxabXhsWTNRc0lGQnliMjFwYzJVZ0tpOWNjbHh1WEhKY2JuWmhjaUJsZUhSbGJtUlRkR0YwYVdOeklEMGdablZ1WTNScGIyNG9aQ3dnWWlrZ2UxeHlYRzRnSUNBZ1pYaDBaVzVrVTNSaGRHbGpjeUE5SUU5aWFtVmpkQzV6WlhSUWNtOTBiM1I1Y0dWUFppQjhmRnh5WEc0Z0lDQWdJQ0FnSUNoN0lGOWZjSEp2ZEc5Zlh6b2dXMTBnZlNCcGJuTjBZVzVqWlc5bUlFRnljbUY1SUNZbUlHWjFibU4wYVc5dUlDaGtMQ0JpS1NCN0lHUXVYMTl3Y205MGIxOWZJRDBnWWpzZ2ZTa2dmSHhjY2x4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlBb1pDd2dZaWtnZXlCbWIzSWdLSFpoY2lCd0lHbHVJR0lwSUdsbUlDaGlMbWhoYzA5M2JsQnliM0JsY25SNUtIQXBLU0JrVzNCZElEMGdZbHR3WFRzZ2ZUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCbGVIUmxibVJUZEdGMGFXTnpLR1FzSUdJcE8xeHlYRzU5TzF4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWlhoMFpXNWtjeWhrTENCaUtTQjdYSEpjYmlBZ0lDQmxlSFJsYm1SVGRHRjBhV056S0dRc0lHSXBPMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdYMThvS1NCN0lIUm9hWE11WTI5dWMzUnlkV04wYjNJZ1BTQmtPeUI5WEhKY2JpQWdJQ0JrTG5CeWIzUnZkSGx3WlNBOUlHSWdQVDA5SUc1MWJHd2dQeUJQWW1wbFkzUXVZM0psWVhSbEtHSXBJRG9nS0Y5ZkxuQnliM1J2ZEhsd1pTQTlJR0l1Y0hKdmRHOTBlWEJsTENCdVpYY2dYMThvS1NrN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQjJZWElnWDE5aGMzTnBaMjRnUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lGOWZZWE56YVdkdUlEMGdUMkpxWldOMExtRnpjMmxuYmlCOGZDQm1kVzVqZEdsdmJpQmZYMkZ6YzJsbmJpaDBLU0I3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2N5d2dhU0E5SURFc0lHNGdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwSUR3Z2Jqc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhNZ1BTQmhjbWQxYldWdWRITmJhVjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSEFnYVc0Z2N5a2dhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoekxDQndLU2tnZEZ0d1hTQTlJSE5iY0YwN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJRjlmWVhOemFXZHVMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYM0psYzNRb2N5d2daU2tnZTF4eVhHNGdJQ0FnZG1GeUlIUWdQU0I3ZlR0Y2NseHVJQ0FnSUdadmNpQW9kbUZ5SUhBZ2FXNGdjeWtnYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHpMQ0J3S1NBbUppQmxMbWx1WkdWNFQyWW9jQ2tnUENBd0tWeHlYRzRnSUNBZ0lDQWdJSFJiY0YwZ1BTQnpXM0JkTzF4eVhHNGdJQ0FnYVdZZ0tITWdJVDBnYm5Wc2JDQW1KaUIwZVhCbGIyWWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjeUE5UFQwZ1hDSm1kVzVqZEdsdmJsd2lLVnh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0J3SUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5aHpLVHNnYVNBOElIQXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVXVhVzVrWlhoUFppaHdXMmxkS1NBOElEQWdKaVlnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzV3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlM1allXeHNLSE1zSUhCYmFWMHBLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEZ0d1cybGRYU0E5SUhOYmNGdHBYVjA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUhRN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMlJsWTI5eVlYUmxLR1JsWTI5eVlYUnZjbk1zSUhSaGNtZGxkQ3dnYTJWNUxDQmtaWE5qS1NCN1hISmNiaUFnSUNCMllYSWdZeUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dzSUhJZ1BTQmpJRHdnTXlBL0lIUmhjbWRsZENBNklHUmxjMk1nUFQwOUlHNTFiR3dnUHlCa1pYTmpJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaDBZWEpuWlhRc0lHdGxlU2tnT2lCa1pYTmpMQ0JrTzF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCU1pXWnNaV04wSUQwOVBTQmNJbTlpYW1WamRGd2lJQ1ltSUhSNWNHVnZaaUJTWldac1pXTjBMbVJsWTI5eVlYUmxJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBJSElnUFNCU1pXWnNaV04wTG1SbFkyOXlZWFJsS0dSbFkyOXlZWFJ2Y25Nc0lIUmhjbWRsZEN3Z2EyVjVMQ0JrWlhOaktUdGNjbHh1SUNBZ0lHVnNjMlVnWm05eUlDaDJZWElnYVNBOUlHUmxZMjl5WVhSdmNuTXViR1Z1WjNSb0lDMGdNVHNnYVNBK1BTQXdPeUJwTFMwcElHbG1JQ2hrSUQwZ1pHVmpiM0poZEc5eWMxdHBYU2tnY2lBOUlDaGpJRHdnTXlBL0lHUW9jaWtnT2lCaklENGdNeUEvSUdRb2RHRnlaMlYwTENCclpYa3NJSElwSURvZ1pDaDBZWEpuWlhRc0lHdGxlU2twSUh4OElISTdYSEpjYmlBZ0lDQnlaWFIxY200Z1l5QStJRE1nSmlZZ2NpQW1KaUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHRnlaMlYwTENCclpYa3NJSElwTENCeU8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTl3WVhKaGJTaHdZWEpoYlVsdVpHVjRMQ0JrWldOdmNtRjBiM0lwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvZEdGeVoyVjBMQ0JyWlhrcElIc2daR1ZqYjNKaGRHOXlLSFJoY21kbGRDd2dhMlY1TENCd1lYSmhiVWx1WkdWNEtUc2dmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5dFpYUmhaR0YwWVNodFpYUmhaR0YwWVV0bGVTd2diV1YwWVdSaGRHRldZV3gxWlNrZ2UxeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQlNaV1pzWldOMElEMDlQU0JjSW05aWFtVmpkRndpSUNZbUlIUjVjR1Z2WmlCU1pXWnNaV04wTG0xbGRHRmtZWFJoSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lwSUhKbGRIVnliaUJTWldac1pXTjBMbTFsZEdGa1lYUmhLRzFsZEdGa1lYUmhTMlY1TENCdFpYUmhaR0YwWVZaaGJIVmxLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZllYZGhhWFJsY2loMGFHbHpRWEpuTENCZllYSm5kVzFsYm5SekxDQlFMQ0JuWlc1bGNtRjBiM0lwSUh0Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdGa2IzQjBLSFpoYkhWbEtTQjdJSEpsZEhWeWJpQjJZV3gxWlNCcGJuTjBZVzVqWlc5bUlGQWdQeUIyWVd4MVpTQTZJRzVsZHlCUUtHWjFibU4wYVc5dUlDaHlaWE52YkhabEtTQjdJSEpsYzI5c2RtVW9kbUZzZFdVcE95QjlLVHNnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlBb1VDQjhmQ0FvVUNBOUlGQnliMjFwYzJVcEtTaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWm5Wc1ptbHNiR1ZrS0haaGJIVmxLU0I3SUhSeWVTQjdJSE4wWlhBb1oyVnVaWEpoZEc5eUxtNWxlSFFvZG1Gc2RXVXBLVHNnZlNCallYUmphQ0FvWlNrZ2V5QnlaV3BsWTNRb1pTazdJSDBnZlZ4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlISmxhbVZqZEdWa0tIWmhiSFZsS1NCN0lIUnllU0I3SUhOMFpYQW9aMlZ1WlhKaGRHOXlXMXdpZEdoeWIzZGNJbDBvZG1Gc2RXVXBLVHNnZlNCallYUmphQ0FvWlNrZ2V5QnlaV3BsWTNRb1pTazdJSDBnZlZ4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlITjBaWEFvY21WemRXeDBLU0I3SUhKbGMzVnNkQzVrYjI1bElEOGdjbVZ6YjJ4MlpTaHlaWE4xYkhRdWRtRnNkV1VwSURvZ1lXUnZjSFFvY21WemRXeDBMblpoYkhWbEtTNTBhR1Z1S0daMWJHWnBiR3hsWkN3Z2NtVnFaV04wWldRcE95QjlYSEpjYmlBZ0lDQWdJQ0FnYzNSbGNDZ29aMlZ1WlhKaGRHOXlJRDBnWjJWdVpYSmhkRzl5TG1Gd2NHeDVLSFJvYVhOQmNtY3NJRjloY21kMWJXVnVkSE1nZkh3Z1cxMHBLUzV1WlhoMEtDa3BPMXh5WEc0Z0lDQWdmU2s3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyZGxibVZ5WVhSdmNpaDBhR2x6UVhKbkxDQmliMlI1S1NCN1hISmNiaUFnSUNCMllYSWdYeUE5SUhzZ2JHRmlaV3c2SURBc0lITmxiblE2SUdaMWJtTjBhVzl1S0NrZ2V5QnBaaUFvZEZzd1hTQW1JREVwSUhSb2NtOTNJSFJiTVYwN0lISmxkSFZ5YmlCMFd6RmRPeUI5TENCMGNubHpPaUJiWFN3Z2IzQnpPaUJiWFNCOUxDQm1MQ0I1TENCMExDQm5PMXh5WEc0Z0lDQWdjbVYwZFhKdUlHY2dQU0I3SUc1bGVIUTZJSFpsY21Jb01Da3NJRndpZEdoeWIzZGNJam9nZG1WeVlpZ3hLU3dnWENKeVpYUjFjbTVjSWpvZ2RtVnlZaWd5S1NCOUxDQjBlWEJsYjJZZ1UzbHRZbTlzSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnSmlZZ0tHZGJVM2x0WW05c0xtbDBaWEpoZEc5eVhTQTlJR1oxYm1OMGFXOXVLQ2tnZXlCeVpYUjFjbTRnZEdocGN6c2dmU2tzSUdjN1hISmNiaUFnSUNCbWRXNWpkR2x2YmlCMlpYSmlLRzRwSUhzZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNoMktTQjdJSEpsZEhWeWJpQnpkR1Z3S0Z0dUxDQjJYU2s3SUgwN0lIMWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlITjBaWEFvYjNBcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1ppa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtkbGJtVnlZWFJ2Y2lCcGN5QmhiSEpsWVdSNUlHVjRaV04xZEdsdVp5NWNJaWs3WEhKY2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0Y4cElIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobUlEMGdNU3dnZVNBbUppQW9kQ0E5SUc5d1d6QmRJQ1lnTWlBL0lIbGJYQ0p5WlhSMWNtNWNJbDBnT2lCdmNGc3dYU0EvSUhsYlhDSjBhSEp2ZDF3aVhTQjhmQ0FvS0hRZ1BTQjVXMXdpY21WMGRYSnVYQ0pkS1NBbUppQjBMbU5oYkd3b2VTa3NJREFwSURvZ2VTNXVaWGgwS1NBbUppQWhLSFFnUFNCMExtTmhiR3dvZVN3Z2IzQmJNVjBwS1M1a2IyNWxLU0J5WlhSMWNtNGdkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hrZ1BTQXdMQ0IwS1NCdmNDQTlJRnR2Y0Zzd1hTQW1JRElzSUhRdWRtRnNkV1ZkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLRzl3V3pCZEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEQTZJR05oYzJVZ01Ub2dkQ0E5SUc5d095QmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTkRvZ1h5NXNZV0psYkNzck95QnlaWFIxY200Z2V5QjJZV3gxWlRvZ2IzQmJNVjBzSUdSdmJtVTZJR1poYkhObElIMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEVTZJRjh1YkdGaVpXd3JLenNnZVNBOUlHOXdXekZkT3lCdmNDQTlJRnN3WFRzZ1kyOXVkR2x1ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURjNklHOXdJRDBnWHk1dmNITXVjRzl3S0NrN0lGOHVkSEo1Y3k1d2IzQW9LVHNnWTI5dWRHbHVkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtIUWdQU0JmTG5SeWVYTXNJSFFnUFNCMExteGxibWQwYUNBK0lEQWdKaVlnZEZ0MExteGxibWQwYUNBdElERmRLU0FtSmlBb2IzQmJNRjBnUFQwOUlEWWdmSHdnYjNCYk1GMGdQVDA5SURJcEtTQjdJRjhnUFNBd095QmpiMjUwYVc1MVpUc2dmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0Zzd1hTQTlQVDBnTXlBbUppQW9JWFFnZkh3Z0tHOXdXekZkSUQ0Z2RGc3dYU0FtSmlCdmNGc3hYU0E4SUhSYk0xMHBLU2tnZXlCZkxteGhZbVZzSUQwZ2IzQmJNVjA3SUdKeVpXRnJPeUI5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5d1d6QmRJRDA5UFNBMklDWW1JRjh1YkdGaVpXd2dQQ0IwV3pGZEtTQjdJRjh1YkdGaVpXd2dQU0IwV3pGZE95QjBJRDBnYjNBN0lHSnlaV0ZyT3lCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUWdKaVlnWHk1c1lXSmxiQ0E4SUhSYk1sMHBJSHNnWHk1c1lXSmxiQ0E5SUhSYk1sMDdJRjh1YjNCekxuQjFjMmdvYjNBcE95QmljbVZoYXpzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBXekpkS1NCZkxtOXdjeTV3YjNBb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZkxuUnllWE11Y0c5d0tDazdJR052Ym5ScGJuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdJRDBnWW05a2VTNWpZV3hzS0hSb2FYTkJjbWNzSUY4cE8xeHlYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUhzZ2IzQWdQU0JiTml3Z1pWMDdJSGtnUFNBd095QjlJR1pwYm1Gc2JIa2dleUJtSUQwZ2RDQTlJREE3SUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvYjNCYk1GMGdKaUExS1NCMGFISnZkeUJ2Y0ZzeFhUc2djbVYwZFhKdUlIc2dkbUZzZFdVNklHOXdXekJkSUQ4Z2IzQmJNVjBnT2lCMmIybGtJREFzSUdSdmJtVTZJSFJ5ZFdVZ2ZUdGNjbHh1SUNBZ0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWTNKbFlYUmxRbWx1WkdsdVp5aHZMQ0J0TENCckxDQnJNaWtnZTF4eVhHNGdJQ0FnYVdZZ0tHc3lJRDA5UFNCMWJtUmxabWx1WldRcElHc3lJRDBnYXp0Y2NseHVJQ0FnSUc5YmF6SmRJRDBnYlZ0clhUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWlhod2IzSjBVM1JoY2lodExDQmxlSEJ2Y25SektTQjdYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQndJR2x1SUcwcElHbG1JQ2h3SUNFOVBTQmNJbVJsWm1GMWJIUmNJaUFtSmlBaFpYaHdiM0owY3k1b1lYTlBkMjVRY205d1pYSjBlU2h3S1NrZ1pYaHdiM0owYzF0d1hTQTlJRzFiY0YwN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYM1poYkhWbGN5aHZLU0I3WEhKY2JpQWdJQ0IyWVhJZ2N5QTlJSFI1Y0dWdlppQlRlVzFpYjJ3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUppQlRlVzFpYjJ3dWFYUmxjbUYwYjNJc0lHMGdQU0J6SUNZbUlHOWJjMTBzSUdrZ1BTQXdPMXh5WEc0Z0lDQWdhV1lnS0cwcElISmxkSFZ5YmlCdExtTmhiR3dvYnlrN1hISmNiaUFnSUNCcFppQW9ieUFtSmlCMGVYQmxiMllnYnk1c1pXNW5kR2dnUFQwOUlGd2liblZ0WW1WeVhDSXBJSEpsZEhWeWJpQjdYSEpjYmlBZ0lDQWdJQ0FnYm1WNGREb2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2J5QW1KaUJwSUQ0OUlHOHViR1Z1WjNSb0tTQnZJRDBnZG05cFpDQXdPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2V5QjJZV3gxWlRvZ2J5QW1KaUJ2VzJrcksxMHNJR1J2Ym1VNklDRnZJSDA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZUdGNjbHh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9jeUEvSUZ3aVQySnFaV04wSUdseklHNXZkQ0JwZEdWeVlXSnNaUzVjSWlBNklGd2lVM2x0WW05c0xtbDBaWEpoZEc5eUlHbHpJRzV2ZENCa1pXWnBibVZrTGx3aUtUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmY21WaFpDaHZMQ0J1S1NCN1hISmNiaUFnSUNCMllYSWdiU0E5SUhSNWNHVnZaaUJUZVcxaWIyd2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJ2VzFONWJXSnZiQzVwZEdWeVlYUnZjbDA3WEhKY2JpQWdJQ0JwWmlBb0lXMHBJSEpsZEhWeWJpQnZPMXh5WEc0Z0lDQWdkbUZ5SUdrZ1BTQnRMbU5oYkd3b2J5a3NJSElzSUdGeUlEMGdXMTBzSUdVN1hISmNiaUFnSUNCMGNua2dlMXh5WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2dvYmlBOVBUMGdkbTlwWkNBd0lIeDhJRzR0TFNBK0lEQXBJQ1ltSUNFb2NpQTlJR2t1Ym1WNGRDZ3BLUzVrYjI1bEtTQmhjaTV3ZFhOb0tISXVkbUZzZFdVcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ1kyRjBZMmdnS0dWeWNtOXlLU0I3SUdVZ1BTQjdJR1Z5Y205eU9pQmxjbkp2Y2lCOU95QjlYSEpjYmlBZ0lDQm1hVzVoYkd4NUlIdGNjbHh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUFtSmlBaGNpNWtiMjVsSUNZbUlDaHRJRDBnYVZ0Y0luSmxkSFZ5Ymx3aVhTa3BJRzB1WTJGc2JDaHBLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdabWx1WVd4c2VTQjdJR2xtSUNobEtTQjBhSEp2ZHlCbExtVnljbTl5T3lCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnWVhJN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYM053Y21WaFpDZ3BJSHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJR0Z5SUQwZ1cxMHNJR2tnUFNBd095QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktWeHlYRzRnSUNBZ0lDQWdJR0Z5SUQwZ1lYSXVZMjl1WTJGMEtGOWZjbVZoWkNoaGNtZDFiV1Z1ZEhOYmFWMHBLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQmhjanRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmMzQnlaV0ZrUVhKeVlYbHpLQ2tnZTF4eVhHNGdJQ0FnWm05eUlDaDJZWElnY3lBOUlEQXNJR2tnUFNBd0xDQnBiQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrZ1BDQnBiRHNnYVNzcktTQnpJQ3M5SUdGeVozVnRaVzUwYzF0cFhTNXNaVzVuZEdnN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCeUlEMGdRWEp5WVhrb2N5a3NJR3NnUFNBd0xDQnBJRDBnTURzZ2FTQThJR2xzT3lCcEt5c3BYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnWVNBOUlHRnlaM1Z0Wlc1MGMxdHBYU3dnYWlBOUlEQXNJR3BzSUQwZ1lTNXNaVzVuZEdnN0lHb2dQQ0JxYkRzZ2Fpc3JMQ0JyS3lzcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKYmExMGdQU0JoVzJwZE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUhJN1hISmNibjA3WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTloZDJGcGRDaDJLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3lCcGJuTjBZVzVqWlc5bUlGOWZZWGRoYVhRZ1B5QW9kR2hwY3k1MklEMGdkaXdnZEdocGN5a2dPaUJ1WlhjZ1gxOWhkMkZwZENoMktUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWVhONWJtTkhaVzVsY21GMGIzSW9kR2hwYzBGeVp5d2dYMkZ5WjNWdFpXNTBjeXdnWjJWdVpYSmhkRzl5S1NCN1hISmNiaUFnSUNCcFppQW9JVk41YldKdmJDNWhjM2x1WTBsMFpYSmhkRzl5S1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0lnYVhNZ2JtOTBJR1JsWm1sdVpXUXVYQ0lwTzF4eVhHNGdJQ0FnZG1GeUlHY2dQU0JuWlc1bGNtRjBiM0l1WVhCd2JIa29kR2hwYzBGeVp5d2dYMkZ5WjNWdFpXNTBjeUI4ZkNCYlhTa3NJR2tzSUhFZ1BTQmJYVHRjY2x4dUlDQWdJSEpsZEhWeWJpQnBJRDBnZTMwc0lIWmxjbUlvWENKdVpYaDBYQ0lwTENCMlpYSmlLRndpZEdoeWIzZGNJaWtzSUhabGNtSW9YQ0p5WlhSMWNtNWNJaWtzSUdsYlUzbHRZbTlzTG1GemVXNWpTWFJsY21GMGIzSmRJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2RHaHBjenNnZlN3Z2FUdGNjbHh1SUNBZ0lHWjFibU4wYVc5dUlIWmxjbUlvYmlrZ2V5QnBaaUFvWjF0dVhTa2dhVnR1WFNBOUlHWjFibU4wYVc5dUlDaDJLU0I3SUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmlBb1lTd2dZaWtnZXlCeExuQjFjMmdvVzI0c0lIWXNJR0VzSUdKZEtTQStJREVnZkh3Z2NtVnpkVzFsS0c0c0lIWXBPeUI5S1RzZ2ZUc2dmVnh5WEc0Z0lDQWdablZ1WTNScGIyNGdjbVZ6ZFcxbEtHNHNJSFlwSUhzZ2RISjVJSHNnYzNSbGNDaG5XMjVkS0hZcEtUc2dmU0JqWVhSamFDQW9aU2tnZXlCelpYUjBiR1VvY1Zzd1hWc3pYU3dnWlNrN0lIMGdmVnh5WEc0Z0lDQWdablZ1WTNScGIyNGdjM1JsY0NoeUtTQjdJSEl1ZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUJmWDJGM1lXbDBJRDhnVUhKdmJXbHpaUzV5WlhOdmJIWmxLSEl1ZG1Gc2RXVXVkaWt1ZEdobGJpaG1kV3htYVd4c0xDQnlaV3BsWTNRcElEb2djMlYwZEd4bEtIRmJNRjFiTWwwc0lISXBPeUI5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJtZFd4bWFXeHNLSFpoYkhWbEtTQjdJSEpsYzNWdFpTaGNJbTVsZUhSY0lpd2dkbUZzZFdVcE95QjlYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQnlaV3BsWTNRb2RtRnNkV1VwSUhzZ2NtVnpkVzFsS0Z3aWRHaHliM2RjSWl3Z2RtRnNkV1VwT3lCOVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCelpYUjBiR1VvWml3Z2Rpa2dleUJwWmlBb1ppaDJLU3dnY1M1emFHbG1kQ2dwTENCeExteGxibWQwYUNrZ2NtVnpkVzFsS0hGYk1GMWJNRjBzSUhGYk1GMWJNVjBwT3lCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMkZ6ZVc1alJHVnNaV2RoZEc5eUtHOHBJSHRjY2x4dUlDQWdJSFpoY2lCcExDQndPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHa2dQU0I3ZlN3Z2RtVnlZaWhjSW01bGVIUmNJaWtzSUhabGNtSW9YQ0owYUhKdmQxd2lMQ0JtZFc1amRHbHZiaUFvWlNrZ2V5QjBhSEp2ZHlCbE95QjlLU3dnZG1WeVlpaGNJbkpsZEhWeWJsd2lLU3dnYVZ0VGVXMWliMnd1YVhSbGNtRjBiM0pkSUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZTd2dhVHRjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSFpsY21Jb2Jpd2daaWtnZXlCcFcyNWRJRDBnYjF0dVhTQS9JR1oxYm1OMGFXOXVJQ2gyS1NCN0lISmxkSFZ5YmlBb2NDQTlJQ0Z3S1NBL0lIc2dkbUZzZFdVNklGOWZZWGRoYVhRb2IxdHVYU2gyS1Nrc0lHUnZibVU2SUc0Z1BUMDlJRndpY21WMGRYSnVYQ0lnZlNBNklHWWdQeUJtS0hZcElEb2dkanNnZlNBNklHWTdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZllYTjVibU5XWVd4MVpYTW9ieWtnZTF4eVhHNGdJQ0FnYVdZZ0tDRlRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjaWtnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lsTjViV0p2YkM1aGMzbHVZMGwwWlhKaGRHOXlJR2x6SUc1dmRDQmtaV1pwYm1Wa0xsd2lLVHRjY2x4dUlDQWdJSFpoY2lCdElEMGdiMXRUZVcxaWIyd3VZWE41Ym1OSmRHVnlZWFJ2Y2wwc0lHazdYSEpjYmlBZ0lDQnlaWFIxY200Z2JTQS9JRzB1WTJGc2JDaHZLU0E2SUNodklEMGdkSGx3Wlc5bUlGOWZkbUZzZFdWeklEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QmZYM1poYkhWbGN5aHZLU0E2SUc5YlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNncExDQnBJRDBnZTMwc0lIWmxjbUlvWENKdVpYaDBYQ0lwTENCMlpYSmlLRndpZEdoeWIzZGNJaWtzSUhabGNtSW9YQ0p5WlhSMWNtNWNJaWtzSUdsYlUzbHRZbTlzTG1GemVXNWpTWFJsY21GMGIzSmRJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2RHaHBjenNnZlN3Z2FTazdYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQjJaWEppS0c0cElIc2dhVnR1WFNBOUlHOWJibDBnSmlZZ1puVnVZM1JwYjI0Z0tIWXBJSHNnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1SUNoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUhzZ2RpQTlJRzliYmwwb2Rpa3NJSE5sZEhSc1pTaHlaWE52YkhabExDQnlaV3BsWTNRc0lIWXVaRzl1WlN3Z2RpNTJZV3gxWlNrN0lIMHBPeUI5T3lCOVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCelpYUjBiR1VvY21WemIyeDJaU3dnY21WcVpXTjBMQ0JrTENCMktTQjdJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTaDJLUzUwYUdWdUtHWjFibU4wYVc5dUtIWXBJSHNnY21WemIyeDJaU2g3SUhaaGJIVmxPaUIyTENCa2IyNWxPaUJrSUgwcE95QjlMQ0J5WldwbFkzUXBPeUI5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyMWhhMlZVWlcxd2JHRjBaVTlpYW1WamRDaGpiMjlyWldRc0lISmhkeWtnZTF4eVhHNGdJQ0FnYVdZZ0tFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2tnZXlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29ZMjl2YTJWa0xDQmNJbkpoZDF3aUxDQjdJSFpoYkhWbE9pQnlZWGNnZlNrN0lIMGdaV3h6WlNCN0lHTnZiMnRsWkM1eVlYY2dQU0J5WVhjN0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCamIyOXJaV1E3WEhKY2JuMDdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXBiWEJ2Y25SVGRHRnlLRzF2WkNrZ2UxeHlYRzRnSUNBZ2FXWWdLRzF2WkNBbUppQnRiMlF1WDE5bGMwMXZaSFZzWlNrZ2NtVjBkWEp1SUcxdlpEdGNjbHh1SUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0I3ZlR0Y2NseHVJQ0FnSUdsbUlDaHRiMlFnSVQwZ2JuVnNiQ2tnWm05eUlDaDJZWElnYXlCcGJpQnRiMlFwSUdsbUlDaFBZbXBsWTNRdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHRiMlFzSUdzcEtTQnlaWE4xYkhSYmExMGdQU0J0YjJSYmExMDdYSEpjYmlBZ0lDQnlaWE4xYkhRdVpHVm1ZWFZzZENBOUlHMXZaRHRjY2x4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMmx0Y0c5eWRFUmxabUYxYkhRb2JXOWtLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdLRzF2WkNBbUppQnRiMlF1WDE5bGMwMXZaSFZzWlNrZ1B5QnRiMlFnT2lCN0lHUmxabUYxYkhRNklHMXZaQ0I5TzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOWpiR0Z6YzFCeWFYWmhkR1ZHYVdWc1pFZGxkQ2h5WldObGFYWmxjaXdnY0hKcGRtRjBaVTFoY0NrZ2UxeHlYRzRnSUNBZ2FXWWdLQ0Z3Y21sMllYUmxUV0Z3TG1oaGN5aHlaV05sYVhabGNpa3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lZWFIwWlcxd2RHVmtJSFJ2SUdkbGRDQndjbWwyWVhSbElHWnBaV3hrSUc5dUlHNXZiaTFwYm5OMFlXNWpaVndpS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhKbGRIVnliaUJ3Y21sMllYUmxUV0Z3TG1kbGRDaHlaV05sYVhabGNpazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJOc1lYTnpVSEpwZG1GMFpVWnBaV3hrVTJWMEtISmxZMlZwZG1WeUxDQndjbWwyWVhSbFRXRndMQ0IyWVd4MVpTa2dlMXh5WEc0Z0lDQWdhV1lnS0NGd2NtbDJZWFJsVFdGd0xtaGhjeWh5WldObGFYWmxjaWtwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpWVhSMFpXMXdkR1ZrSUhSdklITmxkQ0J3Y21sMllYUmxJR1pwWld4a0lHOXVJRzV2YmkxcGJuTjBZVzVqWlZ3aUtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIQnlhWFpoZEdWTllYQXVjMlYwS0hKbFkyVnBkbVZ5TENCMllXeDFaU2s3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkbUZzZFdVN1hISmNibjFjY2x4dUlpd2lMeW9xWEc0Z0tpQkFiR2xqWlc1elpWeHVJQ29nUTI5d2VYSnBaMmgwSUNoaktTQXlNREUzSUZSb1pTQlFiMng1YldWeUlGQnliMnBsWTNRZ1FYVjBhRzl5Y3k0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxSUZSb2FYTWdZMjlrWlNCdFlYa2diMjVzZVNCaVpTQjFjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUWdjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JoZEZ4dUlDb2dhSFIwY0RvdkwzQnZiSGx0WlhJdVoybDBhSFZpTG1sdkwweEpRMFZPVTBVdWRIaDBYRzRnS2lCVWFHVWdZMjl0Y0d4bGRHVWdjMlYwSUc5bUlHRjFkR2h2Y25NZ2JXRjVJR0psSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlFWVlVTRTlTVXk1MGVIUmNiaUFxSUZSb1pTQmpiMjF3YkdWMFpTQnpaWFFnYjJZZ1kyOXVkSEpwWW5WMGIzSnpJRzFoZVNCaVpTQm1iM1Z1WkNCaGRGeHVJQ29nYUhSMGNEb3ZMM0J2YkhsdFpYSXVaMmwwYUhWaUxtbHZMME5QVGxSU1NVSlZWRTlTVXk1MGVIUmNiaUFxSUVOdlpHVWdaR2x6ZEhKcFluVjBaV1FnWW5rZ1IyOXZaMnhsSUdGeklIQmhjblFnYjJZZ2RHaGxJSEJ2YkhsdFpYSWdjSEp2YW1WamRDQnBjeUJoYkhOdlhHNGdLaUJ6ZFdKcVpXTjBJSFJ2SUdGdUlHRmtaR2wwYVc5dVlXd2dTVkFnY21sbmFIUnpJR2R5WVc1MElHWnZkVzVrSUdGMFhHNGdLaUJvZEhSd09pOHZjRzlzZVcxbGNpNW5hWFJvZFdJdWFXOHZVRUZVUlU1VVV5NTBlSFJjYmlBcUwxeHVMeW9xWEc0Z0tpQlVjblZsSUdsbUlIUm9aU0JqZFhOMGIyMGdaV3hsYldWdWRITWdjRzlzZVdacGJHd2dhWE1nYVc0Z2RYTmxMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnYVhORFJWQnZiSGxtYVd4c0lEMGdkSGx3Wlc5bUlIZHBibVJ2ZHlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlaY2JpQWdJQ0IzYVc1a2IzY3VZM1Z6ZEc5dFJXeGxiV1Z1ZEhNZ0lUMGdiblZzYkNBbUpseHVJQ0FnSUhkcGJtUnZkeTVqZFhOMGIyMUZiR1Z0Wlc1MGN5NXdiMng1Wm1sc2JGZHlZWEJHYkhWemFFTmhiR3hpWVdOcklDRTlQVnh1SUNBZ0lDQWdJQ0IxYm1SbFptbHVaV1E3WEc0dktpcGNiaUFxSUZKbGNHRnlaVzUwY3lCdWIyUmxjeXdnYzNSaGNuUnBibWNnWm5KdmJTQmdjM1JoY25SZ0lDaHBibU5zZFhOcGRtVXBJSFJ2SUdCbGJtUmdJQ2hsZUdOc2RYTnBkbVVwTEZ4dUlDb2dhVzUwYnlCaGJtOTBhR1Z5SUdOdmJuUmhhVzVsY2lBb1kyOTFiR1FnWW1VZ2RHaGxJSE5oYldVZ1kyOXVkR0ZwYm1WeUtTd2dZbVZtYjNKbElHQmlaV1p2Y21WZ0xpQkpabHh1SUNvZ1lHSmxabTl5WldBZ2FYTWdiblZzYkN3Z2FYUWdZWEJ3Wlc1a2N5QjBhR1VnYm05a1pYTWdkRzhnZEdobElHTnZiblJoYVc1bGNpNWNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJSEpsY0dGeVpXNTBUbTlrWlhNZ1BTQW9ZMjl1ZEdGcGJtVnlMQ0J6ZEdGeWRDd2daVzVrSUQwZ2JuVnNiQ3dnWW1WbWIzSmxJRDBnYm5Wc2JDa2dQVDRnZTF4dUlDQWdJSGRvYVd4bElDaHpkR0Z5ZENBaFBUMGdaVzVrS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUc0Z1BTQnpkR0Z5ZEM1dVpYaDBVMmxpYkdsdVp6dGNiaUFnSUNBZ0lDQWdZMjl1ZEdGcGJtVnlMbWx1YzJWeWRFSmxabTl5WlNoemRHRnlkQ3dnWW1WbWIzSmxLVHRjYmlBZ0lDQWdJQ0FnYzNSaGNuUWdQU0J1TzF4dUlDQWdJSDFjYm4wN1hHNHZLaXBjYmlBcUlGSmxiVzkyWlhNZ2JtOWtaWE1zSUhOMFlYSjBhVzVuSUdaeWIyMGdZSE4wWVhKMFlDQW9hVzVqYkhWemFYWmxLU0IwYnlCZ1pXNWtZQ0FvWlhoamJIVnphWFpsS1N3Z1puSnZiVnh1SUNvZ1lHTnZiblJoYVc1bGNtQXVYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0J5WlcxdmRtVk9iMlJsY3lBOUlDaGpiMjUwWVdsdVpYSXNJSE4wWVhKMExDQmxibVFnUFNCdWRXeHNLU0E5UGlCN1hHNGdJQ0FnZDJocGJHVWdLSE4wWVhKMElDRTlQU0JsYm1RcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JpQTlJSE4wWVhKMExtNWxlSFJUYVdKc2FXNW5PMXh1SUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEl1Y21WdGIzWmxRMmhwYkdRb2MzUmhjblFwTzF4dUlDQWdJQ0FnSUNCemRHRnlkQ0E5SUc0N1hHNGdJQ0FnZlZ4dWZUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdSdmJTNXFjeTV0WVhBaUxDSXZLaXBjYmlBcUlFQnNhV05sYm5ObFhHNGdLaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGNnVkdobElGQnZiSGx0WlhJZ1VISnZhbVZqZENCQmRYUm9iM0p6TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ29nVkdocGN5QmpiMlJsSUcxaGVTQnZibXg1SUdKbElIVnpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDQnpkSGxzWlNCc2FXTmxibk5sSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlRFbERSVTVUUlM1MGVIUmNiaUFxSUZSb1pTQmpiMjF3YkdWMFpTQnpaWFFnYjJZZ1lYVjBhRzl5Y3lCdFlYa2dZbVVnWm05MWJtUWdZWFJjYmlBcUlHaDBkSEE2THk5d2IyeDViV1Z5TG1kcGRHaDFZaTVwYnk5QlZWUklUMUpUTG5SNGRGeHVJQ29nVkdobElHTnZiWEJzWlhSbElITmxkQ0J2WmlCamIyNTBjbWxpZFhSdmNuTWdiV0Y1SUdKbElHWnZkVzVrSUdGMFhHNGdLaUJvZEhSd09pOHZjRzlzZVcxbGNpNW5hWFJvZFdJdWFXOHZRMDlPVkZKSlFsVlVUMUpUTG5SNGRGeHVJQ29nUTI5a1pTQmthWE4wY21saWRYUmxaQ0JpZVNCSGIyOW5iR1VnWVhNZ2NHRnlkQ0J2WmlCMGFHVWdjRzlzZVcxbGNpQndjbTlxWldOMElHbHpJR0ZzYzI5Y2JpQXFJSE4xWW1wbFkzUWdkRzhnWVc0Z1lXUmthWFJwYjI1aGJDQkpVQ0J5YVdkb2RITWdaM0poYm5RZ1ptOTFibVFnWVhSY2JpQXFJR2gwZEhBNkx5OXdiMng1YldWeUxtZHBkR2gxWWk1cGJ5OVFRVlJGVGxSVExuUjRkRnh1SUNvdlhHNHZLaXBjYmlBcUlFRnVJR1Y0Y0hKbGMzTnBiMjRnYldGeWEyVnlJSGRwZEdnZ1pXMWlaV1JrWldRZ2RXNXBjWFZsSUd0bGVTQjBieUJoZG05cFpDQmpiMnhzYVhOcGIyNGdkMmwwYUZ4dUlDb2djRzl6YzJsaWJHVWdkR1Y0ZENCcGJpQjBaVzF3YkdGMFpYTXVYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0J0WVhKclpYSWdQU0JnZTN0c2FYUXRKSHRUZEhKcGJtY29UV0YwYUM1eVlXNWtiMjBvS1NrdWMyeHBZMlVvTWlsOWZYMWdPMXh1THlvcVhHNGdLaUJCYmlCbGVIQnlaWE56YVc5dUlHMWhjbXRsY2lCMWMyVmtJSFJsZUhRdGNHOXphWFJwYjI1ekxDQnRkV3gwYVMxaWFXNWthVzVuSUdGMGRISnBZblYwWlhNc0lHRnVaRnh1SUNvZ1lYUjBjbWxpZFhSbGN5QjNhWFJvSUcxaGNtdDFjQzFzYVd0bElIUmxlSFFnZG1Gc2RXVnpMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnYm05a1pVMWhjbXRsY2lBOUlHQThJUzB0Skh0dFlYSnJaWEo5TFMwK1lEdGNibVY0Y0c5eWRDQmpiMjV6ZENCdFlYSnJaWEpTWldkbGVDQTlJRzVsZHlCU1pXZEZlSEFvWUNSN2JXRnlhMlZ5Zlh3a2UyNXZaR1ZOWVhKclpYSjlZQ2s3WEc0dktpcGNiaUFxSUZOMVptWnBlQ0JoY0hCbGJtUmxaQ0IwYnlCaGJHd2dZbTkxYm1RZ1lYUjBjbWxpZFhSbElHNWhiV1Z6TGx4dUlDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ1ltOTFibVJCZEhSeWFXSjFkR1ZUZFdabWFYZ2dQU0FuSkd4cGRDUW5PMXh1THlvcVhHNGdLaUJCYmlCMWNHUmhkR0ZpYkdVZ1ZHVnRjR3hoZEdVZ2RHaGhkQ0IwY21GamEzTWdkR2hsSUd4dlkyRjBhVzl1SUc5bUlHUjVibUZ0YVdNZ2NHRnlkSE11WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVVpXMXdiR0YwWlNCN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2NtVnpkV3gwTENCbGJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGeWRITWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBJRDBnWld4bGJXVnVkRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibTlrWlhOVWIxSmxiVzkyWlNBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpkR0ZqYXlBOUlGdGRPMXh1SUNBZ0lDQWdJQ0F2THlCRlpHZGxJRzVsWldSeklHRnNiQ0EwSUhCaGNtRnRaWFJsY25NZ2NISmxjMlZ1ZERzZ1NVVXhNU0J1WldWa2N5QXpjbVFnY0dGeVlXMWxkR1Z5SUhSdklHSmxJRzUxYkd4Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZDJGc2EyVnlJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxWSEpsWlZkaGJHdGxjaWhsYkdWdFpXNTBMbU52Ym5SbGJuUXNJREV6TXlBdktpQk9iMlJsUm1sc2RHVnlMbE5JVDFkZmUwVk1SVTFGVGxSOFEwOU5UVVZPVkh4VVJWaFVmU0FxTHl3Z2JuVnNiQ3dnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0F2THlCTFpXVndjeUIwY21GamF5QnZaaUIwYUdVZ2JHRnpkQ0JwYm1SbGVDQmhjM052WTJsaGRHVmtJSGRwZEdnZ1lTQndZWEowTGlCWFpTQjBjbmtnZEc4Z1pHVnNaWFJsWEc0Z0lDQWdJQ0FnSUM4dklIVnVibVZqWlhOellYSjVJRzV2WkdWekxDQmlkWFFnZDJVZ2JtVjJaWElnZDJGdWRDQjBieUJoYzNOdlkybGhkR1VnZEhkdklHUnBabVpsY21WdWRDQndZWEowYzF4dUlDQWdJQ0FnSUNBdkx5QjBieUIwYUdVZ2MyRnRaU0JwYm1SbGVDNGdWR2hsZVNCdGRYTjBJR2hoZG1VZ1lTQmpiMjV6ZEdGdWRDQnViMlJsSUdKbGRIZGxaVzR1WEc0Z0lDQWdJQ0FnSUd4bGRDQnNZWE4wVUdGeWRFbHVaR1Y0SUQwZ01EdGNiaUFnSUNBZ0lDQWdiR1YwSUdsdVpHVjRJRDBnTFRFN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J3WVhKMFNXNWtaWGdnUFNBd08xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lITjBjbWx1WjNNc0lIWmhiSFZsY3pvZ2V5QnNaVzVuZEdnZ2ZTQjlJRDBnY21WemRXeDBPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9jR0Z5ZEVsdVpHVjRJRHdnYkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdWIyUmxJRDBnZDJGc2EyVnlMbTVsZUhST2IyUmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYm05a1pTQTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkbEozWmxJR1Y0YUdGMWMzUmxaQ0IwYUdVZ1kyOXVkR1Z1ZENCcGJuTnBaR1VnWVNCdVpYTjBaV1FnZEdWdGNHeGhkR1VnWld4bGJXVnVkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQ1pXTmhkWE5sSUhkbElITjBhV3hzSUdoaGRtVWdjR0Z5ZEhNZ0tIUm9aU0J2ZFhSbGNpQm1iM0l0Ykc5dmNDa3NJSGRsSUd0dWIzYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnTFNCVWFHVnlaU0JwY3lCaElIUmxiWEJzWVhSbElHbHVJSFJvWlNCemRHRmphMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUMwZ1ZHaGxJSGRoYkd0bGNpQjNhV3hzSUdacGJtUWdZU0J1WlhoMFRtOWtaU0J2ZFhSemFXUmxJSFJvWlNCMFpXMXdiR0YwWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkaGJHdGxjaTVqZFhKeVpXNTBUbTlrWlNBOUlITjBZV05yTG5CdmNDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZ3JLenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1YjJSbExtNXZaR1ZVZVhCbElEMDlQU0F4SUM4cUlFNXZaR1V1UlV4RlRVVk9WRjlPVDBSRklDb3ZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHNXZaR1V1YUdGelFYUjBjbWxpZFhSbGN5Z3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdGMGRISnBZblYwWlhNZ1BTQnViMlJsTG1GMGRISnBZblYwWlhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIc2diR1Z1WjNSb0lIMGdQU0JoZEhSeWFXSjFkR1Z6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJRWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1Ylc5NmFXeHNZUzV2Y21jdlpXNHRWVk12Wkc5amN5OVhaV0l2UVZCSkwwNWhiV1ZrVG05a1pVMWhjQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZWFIwY21saWRYUmxjeUJoY21VZ2JtOTBJR2QxWVhKaGJuUmxaV1FnZEc4Z1ltVWdjbVYwZFhKdVpXUWdhVzRnWkc5amRXMWxiblFnYjNKa1pYSXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFbHVJSEJoY25ScFkzVnNZWElzSUVWa1oyVXZTVVVnWTJGdUlISmxkSFZ5YmlCMGFHVnRJRzkxZENCdlppQnZjbVJsY2l3Z2MyOGdkMlVnWTJGdWJtOTBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHRnpjM1Z0WlNCaElHTnZjbkpsYzNCdmJtUmxibU5sSUdKbGRIZGxaVzRnY0dGeWRDQnBibVJsZUNCaGJtUWdZWFIwY21saWRYUmxJR2x1WkdWNExseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1kyOTFiblFnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUd4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlc1a2MxZHBkR2dvWVhSMGNtbGlkWFJsYzF0cFhTNXVZVzFsTENCaWIzVnVaRUYwZEhKcFluVjBaVk4xWm1acGVDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIzVnVkQ3NyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2hqYjNWdWRDMHRJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSMlYwSUhSb1pTQjBaVzF3YkdGMFpTQnNhWFJsY21Gc0lITmxZM1JwYjI0Z2JHVmhaR2x1WnlCMWNDQjBieUIwYUdVZ1ptbHljM1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdWNGNISmxjM05wYjI0Z2FXNGdkR2hwY3lCaGRIUnlhV0oxZEdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSE4wY21sdVowWnZjbEJoY25RZ1BTQnpkSEpwYm1kelczQmhjblJKYm1SbGVGMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJHYVc1a0lIUm9aU0JoZEhSeWFXSjFkR1VnYm1GdFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm1GdFpTQTlJR3hoYzNSQmRIUnlhV0oxZEdWT1lXMWxVbVZuWlhndVpYaGxZeWh6ZEhKcGJtZEdiM0pRWVhKMEtWc3lYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVacGJtUWdkR2hsSUdOdmNuSmxjM0J2Ym1ScGJtY2dZWFIwY21saWRYUmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJCYkd3Z1ltOTFibVFnWVhSMGNtbGlkWFJsY3lCb1lYWmxJR2hoWkNCaElITjFabVpwZUNCaFpHUmxaQ0JwYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHVnRjR3hoZEdWU1pYTjFiSFFqWjJWMFNGUk5UQ0IwYnlCdmNIUWdiM1YwSUc5bUlITndaV05wWVd3Z1lYUjBjbWxpZFhSbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5Qm9ZVzVrYkdsdVp5NGdWRzhnYkc5dmF5QjFjQ0IwYUdVZ1lYUjBjbWxpZFhSbElIWmhiSFZsSUhkbElHRnNjMjhnYm1WbFpDQjBieUJoWkdSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIUm9aU0J6ZFdabWFYZ3VYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaGRIUnlhV0oxZEdWTWIyOXJkWEJPWVcxbElEMGdibUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BJQ3NnWW05MWJtUkJkSFJ5YVdKMWRHVlRkV1ptYVhnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JoZEhSeWFXSjFkR1ZXWVd4MVpTQTlJRzV2WkdVdVoyVjBRWFIwY21saWRYUmxLR0YwZEhKcFluVjBaVXh2YjJ0MWNFNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNXlaVzF2ZG1WQmRIUnlhV0oxZEdVb1lYUjBjbWxpZFhSbFRHOXZhM1Z3VG1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRHRjBhV056SUQwZ1lYUjBjbWxpZFhSbFZtRnNkV1V1YzNCc2FYUW9iV0Z5YTJWeVVtVm5aWGdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdZWEowY3k1d2RYTm9LSHNnZEhsd1pUb2dKMkYwZEhKcFluVjBaU2NzSUdsdVpHVjRMQ0J1WVcxbExDQnpkSEpwYm1kek9pQnpkR0YwYVdOeklIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z5ZEVsdVpHVjRJQ3M5SUhOMFlYUnBZM011YkdWdVozUm9JQzBnTVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JtOWtaUzUwWVdkT1lXMWxJRDA5UFNBblZFVk5VRXhCVkVVbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlXTnJMbkIxYzJnb2JtOWtaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGhiR3RsY2k1amRYSnlaVzUwVG05a1pTQTlJRzV2WkdVdVkyOXVkR1Z1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaHViMlJsTG01dlpHVlVlWEJsSUQwOVBTQXpJQzhxSUU1dlpHVXVWRVZZVkY5T1QwUkZJQ292S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkdGMFlTQTlJRzV2WkdVdVpHRjBZVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHRjBZUzVwYm1SbGVFOW1LRzFoY210bGNpa2dQajBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndZWEpsYm5RZ1BTQnViMlJsTG5CaGNtVnVkRTV2WkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElITjBjbWx1WjNNZ1BTQmtZWFJoTG5Od2JHbDBLRzFoY210bGNsSmxaMlY0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JHRnpkRWx1WkdWNElEMGdjM1J5YVc1bmN5NXNaVzVuZEdnZ0xTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkhaVzVsY21GMFpTQmhJRzVsZHlCMFpYaDBJRzV2WkdVZ1ptOXlJR1ZoWTJnZ2JHbDBaWEpoYkNCelpXTjBhVzl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvWlhObElHNXZaR1Z6SUdGeVpTQmhiSE52SUhWelpXUWdZWE1nZEdobElHMWhjbXRsY25NZ1ptOXlJRzV2WkdVZ2NHRnlkSE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQnNZWE4wU1c1a1pYZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2x1YzJWeWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J6SUQwZ2MzUnlhVzVuYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6SUQwOVBTQW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVjMlZ5ZENBOUlHTnlaV0YwWlUxaGNtdGxjaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiV0YwWTJnZ1BTQnNZWE4wUVhSMGNtbGlkWFJsVG1GdFpWSmxaMlY0TG1WNFpXTW9jeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFoZEdOb0lDRTlQU0J1ZFd4c0lDWW1JR1Z1WkhOWGFYUm9LRzFoZEdOb1d6SmRMQ0JpYjNWdVpFRjBkSEpwWW5WMFpWTjFabVpwZUNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N5QTlJSE11YzJ4cFkyVW9NQ3dnYldGMFkyZ3VhVzVrWlhncElDc2diV0YwWTJoYk1WMGdLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGMFkyaGJNbDB1YzJ4cFkyVW9NQ3dnTFdKdmRXNWtRWFIwY21saWRYUmxVM1ZtWm1sNExteGxibWQwYUNrZ0t5QnRZWFJqYUZzelhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXpaWEowSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsVkdWNGRFNXZaR1VvY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYSmxiblF1YVc1elpYSjBRbVZtYjNKbEtHbHVjMlZ5ZEN3Z2JtOWtaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmhjblJ6TG5CMWMyZ29leUIwZVhCbE9pQW5ibTlrWlNjc0lHbHVaR1Y0T2lBcksybHVaR1Y0SUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pYSmxKM01nYm04Z2RHVjRkQ3dnZDJVZ2JYVnpkQ0JwYm5ObGNuUWdZU0JqYjIxdFpXNTBJSFJ2SUcxaGNtc2diM1Z5SUhCc1lXTmxMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkZiSE5sTENCM1pTQmpZVzRnZEhKMWMzUWdhWFFnZDJsc2JDQnpkR2xqYXlCaGNtOTFibVFnWVdaMFpYSWdZMnh2Ym1sdVp5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITjBjbWx1WjNOYmJHRnpkRWx1WkdWNFhTQTlQVDBnSnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhjbVZ1ZEM1cGJuTmxjblJDWldadmNtVW9ZM0psWVhSbFRXRnlhMlZ5S0Nrc0lHNXZaR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pYTlViMUpsYlc5MlpTNXdkWE5vS0c1dlpHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaUzVrWVhSaElEMGdjM1J5YVc1bmMxdHNZWE4wU1c1a1pYaGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkbElHaGhkbVVnWVNCd1lYSjBJR1p2Y2lCbFlXTm9JRzFoZEdOb0lHWnZkVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhjblJKYm1SbGVDQXJQU0JzWVhOMFNXNWtaWGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2JtOWtaUzV1YjJSbFZIbHdaU0E5UFQwZ09DQXZLaUJPYjJSbExrTlBUVTFGVGxSZlRrOUVSU0FxTHlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1YjJSbExtUmhkR0VnUFQwOUlHMWhjbXRsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndZWEpsYm5RZ1BTQnViMlJsTG5CaGNtVnVkRTV2WkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVGa1pDQmhJRzVsZHlCdFlYSnJaWElnYm05a1pTQjBieUJpWlNCMGFHVWdjM1JoY25ST2IyUmxJRzltSUhSb1pTQlFZWEowSUdsbUlHRnVlU0J2Wmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUIwYUdVZ1ptOXNiRzkzYVc1bklHRnlaU0IwY25WbE9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0tpQlhaU0JrYjI0bmRDQm9ZWFpsSUdFZ2NISmxkbWx2ZFhOVGFXSnNhVzVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FxSUZSb1pTQndjbVYyYVc5MWMxTnBZbXhwYm1jZ2FYTWdZV3h5WldGa2VTQjBhR1VnYzNSaGNuUWdiMllnWVNCd2NtVjJhVzkxY3lCd1lYSjBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHViMlJsTG5CeVpYWnBiM1Z6VTJsaWJHbHVaeUE5UFQwZ2JuVnNiQ0I4ZkNCcGJtUmxlQ0E5UFQwZ2JHRnpkRkJoY25SSmJtUmxlQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZ3JLenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoY21WdWRDNXBibk5sY25SQ1pXWnZjbVVvWTNKbFlYUmxUV0Z5YTJWeUtDa3NJRzV2WkdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhjM1JRWVhKMFNXNWtaWGdnUFNCcGJtUmxlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WVhKMGN5NXdkWE5vS0hzZ2RIbHdaVG9nSjI1dlpHVW5MQ0JwYm1SbGVDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV1lnZDJVZ1pHOXVKM1FnYUdGMlpTQmhJRzVsZUhSVGFXSnNhVzVuTENCclpXVndJSFJvYVhNZ2JtOWtaU0J6YnlCM1pTQm9ZWFpsSUdGdUlHVnVaQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSV3h6WlN3Z2QyVWdZMkZ1SUhKbGJXOTJaU0JwZENCMGJ5QnpZWFpsSUdaMWRIVnlaU0JqYjNOMGN5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHNXZaR1V1Ym1WNGRGTnBZbXhwYm1jZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1V1WkdGMFlTQTlJQ2NuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTlrWlhOVWIxSmxiVzkyWlM1d2RYTm9LRzV2WkdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGd0TFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYSjBTVzVrWlhnckt6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdMVEU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNnb2FTQTlJRzV2WkdVdVpHRjBZUzVwYm1SbGVFOW1LRzFoY210bGNpd2dhU0FySURFcEtTQWhQVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU52YlcxbGJuUWdibTlrWlNCb1lYTWdZU0JpYVc1a2FXNW5JRzFoY210bGNpQnBibk5wWkdVc0lHMWhhMlVnWVc0Z2FXNWhZM1JwZG1VZ2NHRnlkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVkdobElHSnBibVJwYm1jZ2QyOXVKM1FnZDI5eWF5d2dZblYwSUhOMVluTmxjWFZsYm5RZ1ltbHVaR2x1WjNNZ2QybHNiRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVkU5RVR5QW9hblZ6ZEdsdVptRm5ibUZ1YVNrNklHTnZibk5wWkdWeUlIZG9aWFJvWlhJZ2FYUW5jeUJsZG1WdUlIZHZjblJvSUdsMElIUnZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ0WVd0bElHSnBibVJwYm1keklHbHVJR052YlcxbGJuUnpJSGR2Y210Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR0Z5ZEhNdWNIVnphQ2g3SUhSNWNHVTZJQ2R1YjJSbEp5d2dhVzVrWlhnNklDMHhJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGeWRFbHVaR1Y0S3lzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1VtVnRiM1psSUhSbGVIUWdZbWx1WkdsdVp5QnViMlJsY3lCaFpuUmxjaUIwYUdVZ2QyRnNheUIwYnlCdWIzUWdaR2x6ZEhWeVlpQjBhR1VnVkhKbFpWZGhiR3RsY2x4dUlDQWdJQ0FnSUNCbWIzSWdLR052Ym5OMElHNGdiMllnYm05a1pYTlViMUpsYlc5MlpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JpNXdZWEpsYm5ST2IyUmxMbkpsYlc5MlpVTm9hV3hrS0c0cE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVnh1WTI5dWMzUWdaVzVrYzFkcGRHZ2dQU0FvYzNSeUxDQnpkV1ptYVhncElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCcGJtUmxlQ0E5SUhOMGNpNXNaVzVuZEdnZ0xTQnpkV1ptYVhndWJHVnVaM1JvTzF4dUlDQWdJSEpsZEhWeWJpQnBibVJsZUNBK1BTQXdJQ1ltSUhOMGNpNXpiR2xqWlNocGJtUmxlQ2tnUFQwOUlITjFabVpwZUR0Y2JuMDdYRzVsZUhCdmNuUWdZMjl1YzNRZ2FYTlVaVzF3YkdGMFpWQmhjblJCWTNScGRtVWdQU0FvY0dGeWRDa2dQVDRnY0dGeWRDNXBibVJsZUNBaFBUMGdMVEU3WEc0dkx5QkJiR3h2ZDNNZ1lHUnZZM1Z0Wlc1MExtTnlaV0YwWlVOdmJXMWxiblFvSnljcFlDQjBieUJpWlNCeVpXNWhiV1ZrSUdadmNpQmhYRzR2THlCemJXRnNiQ0J0WVc1MVlXd2djMmw2WlMxellYWnBibWR6TGx4dVpYaHdiM0owSUdOdmJuTjBJR055WldGMFpVMWhjbXRsY2lBOUlDZ3BJRDArSUdSdlkzVnRaVzUwTG1OeVpXRjBaVU52YlcxbGJuUW9KeWNwTzF4dUx5b3FYRzRnS2lCVWFHbHpJSEpsWjJWNElHVjRkSEpoWTNSeklIUm9aU0JoZEhSeWFXSjFkR1VnYm1GdFpTQndjbVZqWldScGJtY2dZVzRnWVhSMGNtbGlkWFJsTFhCdmMybDBhVzl1WEc0Z0tpQmxlSEJ5WlhOemFXOXVMaUJKZENCa2IyVnpJSFJvYVhNZ1lua2diV0YwWTJocGJtY2dkR2hsSUhONWJuUmhlQ0JoYkd4dmQyVmtJR1p2Y2lCaGRIUnlhV0oxZEdWelhHNGdLaUJoWjJGcGJuTjBJSFJvWlNCemRISnBibWNnYkdsMFpYSmhiQ0JrYVhKbFkzUnNlU0J3Y21WalpXUnBibWNnZEdobElHVjRjSEpsYzNOcGIyNHNJR0Z6YzNWdGFXNW5JSFJvWVhSY2JpQXFJSFJvWlNCbGVIQnlaWE56YVc5dUlHbHpJR2x1SUdGdUlHRjBkSEpwWW5WMFpTMTJZV3gxWlNCd2IzTnBkR2x2Ymk1Y2JpQXFYRzRnS2lCVFpXVWdZWFIwY21saWRYUmxjeUJwYmlCMGFHVWdTRlJOVENCemNHVmpPbHh1SUNvZ2FIUjBjSE02THk5M2QzY3Vkek11YjNKbkwxUlNMMmgwYld3MUwzTjViblJoZUM1b2RHMXNJMlZzWlcxbGJuUnpMV0YwZEhKcFluVjBaWE5jYmlBcVhHNGdLaUJjSWlCY1hIZ3dPVnhjZURCaFhGeDRNR05jWEhnd1pGd2lJR0Z5WlNCSVZFMU1JSE53WVdObElHTm9ZWEpoWTNSbGNuTTZYRzRnS2lCb2RIUndjem92TDNkM2R5NTNNeTV2Y21jdlZGSXZhSFJ0YkRVdmFXNW1jbUZ6ZEhKMVkzUjFjbVV1YUhSdGJDTnpjR0ZqWlMxamFHRnlZV04wWlhKelhHNGdLbHh1SUNvZ1hDSmNYREF0WEZ4NE1VWmNYSGczUmkxY1hIZzVSbHdpSUdGeVpTQlZibWxqYjJSbElHTnZiblJ5YjJ3Z1kyaGhjbUZqZEdWeWN5d2dkMmhwWTJnZ2FXNWpiSFZrWlhNZ1pYWmxjbmxjYmlBcUlITndZV05sSUdOb1lYSmhZM1JsY2lCbGVHTmxjSFFnWENJZ1hDSXVYRzRnS2x4dUlDb2dVMjhnWVc0Z1lYUjBjbWxpZFhSbElHbHpPbHh1SUNvZ0lDb2dWR2hsSUc1aGJXVTZJR0Z1ZVNCamFHRnlZV04wWlhJZ1pYaGpaWEIwSUdFZ1kyOXVkSEp2YkNCamFHRnlZV04wWlhJc0lITndZV05sSUdOb1lYSmhZM1JsY2l3Z0tDY3BMRnh1SUNvZ0lDQWdLRndpS1N3Z1hDSStYQ0lzSUZ3aVBWd2lMQ0J2Y2lCY0lpOWNJbHh1SUNvZ0lDb2dSbTlzYkc5M1pXUWdZbmtnZW1WeWJ5QnZjaUJ0YjNKbElITndZV05sSUdOb1lYSmhZM1JsY25OY2JpQXFJQ0FxSUVadmJHeHZkMlZrSUdKNUlGd2lQVndpWEc0Z0tpQWdLaUJHYjJ4c2IzZGxaQ0JpZVNCNlpYSnZJRzl5SUcxdmNtVWdjM0JoWTJVZ1kyaGhjbUZqZEdWeWMxeHVJQ29nSUNvZ1JtOXNiRzkzWldRZ1luazZYRzRnS2lBZ0lDQXFJRUZ1ZVNCamFHRnlZV04wWlhJZ1pYaGpaWEIwSUhOd1lXTmxMQ0FvSnlrc0lDaGNJaWtzSUZ3aVBGd2lMQ0JjSWo1Y0lpd2dYQ0k5WENJc0lDaGdLU3dnYjNKY2JpQXFJQ0FnSUNvZ0tGd2lLU0IwYUdWdUlHRnVlU0J1YjI0dEtGd2lLU3dnYjNKY2JpQXFJQ0FnSUNvZ0tDY3BJSFJvWlc0Z1lXNTVJRzV2Ymkwb0p5bGNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR3hoYzNSQmRIUnlhV0oxZEdWT1lXMWxVbVZuWlhnZ1BTQmNiaTh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0J1YnkxamIyNTBjbTlzTFhKbFoyVjRYRzR2S0ZzZ1hGeDRNRGxjWEhnd1lWeGNlREJqWEZ4NE1HUmRLU2hiWGx4Y01DMWNYSGd4Umx4Y2VEZEdMVnhjZURsR0lGd2lKejQ5TDEwcktTaGJJRnhjZURBNVhGeDRNR0ZjWEhnd1kxeGNlREJrWFNvOVd5QmNYSGd3T1Z4Y2VEQmhYRng0TUdOY1hIZ3daRjBxS0Q4NlcxNGdYRng0TURsY1hIZ3dZVnhjZURCalhGeDRNR1JjSWlkZ1BENDlYU3A4WENKYlhsd2lYU3A4SjF0ZUoxMHFLU2trTHp0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QWFJsYlhCc1lYUmxMbXB6TG0xaGNDSXNJaThxS2x4dUlDb2dRR3hwWTJWdWMyVmNiaUFxSUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TnlCVWFHVWdVRzlzZVcxbGNpQlFjbTlxWldOMElFRjFkR2h2Y25NdUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2lCVWFHbHpJR052WkdVZ2JXRjVJRzl1YkhrZ1ltVWdkWE5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVJSE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnWVhSY2JpQXFJR2gwZEhBNkx5OXdiMng1YldWeUxtZHBkR2gxWWk1cGJ5OU1TVU5GVGxORkxuUjRkRnh1SUNvZ1ZHaGxJR052YlhCc1pYUmxJSE5sZENCdlppQmhkWFJvYjNKeklHMWhlU0JpWlNCbWIzVnVaQ0JoZEZ4dUlDb2dhSFIwY0RvdkwzQnZiSGx0WlhJdVoybDBhSFZpTG1sdkwwRlZWRWhQVWxNdWRIaDBYRzRnS2lCVWFHVWdZMjl0Y0d4bGRHVWdjMlYwSUc5bUlHTnZiblJ5YVdKMWRHOXljeUJ0WVhrZ1ltVWdabTkxYm1RZ1lYUmNiaUFxSUdoMGRIQTZMeTl3YjJ4NWJXVnlMbWRwZEdoMVlpNXBieTlEVDA1VVVrbENWVlJQVWxNdWRIaDBYRzRnS2lCRGIyUmxJR1JwYzNSeWFXSjFkR1ZrSUdKNUlFZHZiMmRzWlNCaGN5QndZWEowSUc5bUlIUm9aU0J3YjJ4NWJXVnlJSEJ5YjJwbFkzUWdhWE1nWVd4emIxeHVJQ29nYzNWaWFtVmpkQ0IwYnlCaGJpQmhaR1JwZEdsdmJtRnNJRWxRSUhKcFoyaDBjeUJuY21GdWRDQm1iM1Z1WkNCaGRGeHVJQ29nYUhSMGNEb3ZMM0J2YkhsdFpYSXVaMmwwYUhWaUxtbHZMMUJCVkVWT1ZGTXVkSGgwWEc0Z0tpOWNiaThxS2x4dUlDb2dRRzF2WkhWc1pTQnphR0ZrZVMxeVpXNWtaWEpjYmlBcUwxeHVhVzF3YjNKMElIc2dhWE5VWlcxd2JHRjBaVkJoY25SQlkzUnBkbVVnZlNCbWNtOXRJQ2N1TDNSbGJYQnNZWFJsTG1wekp6dGNibU52Ym5OMElIZGhiR3RsY2s1dlpHVkdhV3gwWlhJZ1BTQXhNek1nTHlvZ1RtOWtaVVpwYkhSbGNpNVRTRTlYWDN0RlRFVk5SVTVVZkVOUFRVMUZUbFI4VkVWWVZIMGdLaTg3WEc0dktpcGNiaUFxSUZKbGJXOTJaWE1nZEdobElHeHBjM1FnYjJZZ2JtOWtaWE1nWm5KdmJTQmhJRlJsYlhCc1lYUmxJSE5oWm1Wc2VTNGdTVzRnWVdSa2FYUnBiMjRnZEc4Z2NtVnRiM1pwYm1kY2JpQXFJRzV2WkdWeklHWnliMjBnZEdobElGUmxiWEJzWVhSbExDQjBhR1VnVkdWdGNHeGhkR1VnY0dGeWRDQnBibVJwWTJWeklHRnlaU0IxY0dSaGRHVmtJSFJ2SUcxaGRHTm9YRzRnS2lCMGFHVWdiWFYwWVhSbFpDQlVaVzF3YkdGMFpTQkVUMDB1WEc0Z0tseHVJQ29nUVhNZ2RHaGxJSFJsYlhCc1lYUmxJR2x6SUhkaGJHdGxaQ0IwYUdVZ2NtVnRiM1poYkNCemRHRjBaU0JwY3lCMGNtRmphMlZrSUdGdVpGeHVJQ29nY0dGeWRDQnBibVJwWTJWeklHRnlaU0JoWkdwMWMzUmxaQ0JoY3lCdVpXVmtaV1F1WEc0Z0tseHVJQ29nWkdsMlhHNGdLaUFnSUdScGRpTXhJQ2h5WlcxdmRtVXBJRHd0TFNCemRHRnlkQ0J5WlcxdmRtbHVaeUFvY21WdGIzWnBibWNnYm05a1pTQnBjeUJrYVhZak1TbGNiaUFxSUNBZ0lDQmthWFpjYmlBcUlDQWdJQ0FnSUdScGRpTXlJQ2h5WlcxdmRtVXBJQ0E4TFMwZ1kyOXVkR2x1ZFdVZ2NtVnRiM1pwYm1jZ0tISmxiVzkyYVc1bklHNXZaR1VnYVhNZ2MzUnBiR3dnWkdsMkl6RXBYRzRnS2lBZ0lDQWdJQ0FnSUdScGRseHVJQ29nWkdsMklEd3RMU0J6ZEc5d0lISmxiVzkyYVc1bklITnBibU5sSUhCeVpYWnBiM1Z6SUhOcFlteHBibWNnYVhNZ2RHaGxJSEpsYlc5MmFXNW5JRzV2WkdVZ0tHUnBkaU14TEZ4dUlDb2djbVZ0YjNabFpDQTBJRzV2WkdWektWeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY21WdGIzWmxUbTlrWlhOR2NtOXRWR1Z0Y0d4aGRHVW9kR1Z0Y0d4aGRHVXNJRzV2WkdWelZHOVNaVzF2ZG1VcElIdGNiaUFnSUNCamIyNXpkQ0I3SUdWc1pXMWxiblE2SUhzZ1kyOXVkR1Z1ZENCOUxDQndZWEowY3lCOUlEMGdkR1Z0Y0d4aGRHVTdYRzRnSUNBZ1kyOXVjM1FnZDJGc2EyVnlJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxWSEpsWlZkaGJHdGxjaWhqYjI1MFpXNTBMQ0IzWVd4clpYSk9iMlJsUm1sc2RHVnlMQ0J1ZFd4c0xDQm1ZV3h6WlNrN1hHNGdJQ0FnYkdWMElIQmhjblJKYm1SbGVDQTlJRzVsZUhSQlkzUnBkbVZKYm1SbGVFbHVWR1Z0Y0d4aGRHVlFZWEowY3lod1lYSjBjeWs3WEc0Z0lDQWdiR1YwSUhCaGNuUWdQU0J3WVhKMGMxdHdZWEowU1c1a1pYaGRPMXh1SUNBZ0lHeGxkQ0J1YjJSbFNXNWtaWGdnUFNBdE1UdGNiaUFnSUNCc1pYUWdjbVZ0YjNabFEyOTFiblFnUFNBd08xeHVJQ0FnSUdOdmJuTjBJRzV2WkdWelZHOVNaVzF2ZG1WSmJsUmxiWEJzWVhSbElEMGdXMTA3WEc0Z0lDQWdiR1YwSUdOMWNuSmxiblJTWlcxdmRtbHVaMDV2WkdVZ1BTQnVkV3hzTzF4dUlDQWdJSGRvYVd4bElDaDNZV3hyWlhJdWJtVjRkRTV2WkdVb0tTa2dlMXh1SUNBZ0lDQWdJQ0J1YjJSbFNXNWtaWGdyS3p0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm05a1pTQTlJSGRoYkd0bGNpNWpkWEp5Wlc1MFRtOWtaVHRjYmlBZ0lDQWdJQ0FnTHk4Z1JXNWtJSEpsYlc5MllXd2dhV1lnYzNSbGNIQmxaQ0J3WVhOMElIUm9aU0J5WlcxdmRtbHVaeUJ1YjJSbFhHNGdJQ0FnSUNBZ0lHbG1JQ2h1YjJSbExuQnlaWFpwYjNWelUybGliR2x1WnlBOVBUMGdZM1Z5Y21WdWRGSmxiVzkyYVc1blRtOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRGSmxiVzkyYVc1blRtOWtaU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1FTQnViMlJsSUhSdklISmxiVzkyWlNCM1lYTWdabTkxYm1RZ2FXNGdkR2hsSUhSbGJYQnNZWFJsWEc0Z0lDQWdJQ0FnSUdsbUlDaHViMlJsYzFSdlVtVnRiM1psTG1oaGN5aHViMlJsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pYTlViMUpsYlc5MlpVbHVWR1Z0Y0d4aGRHVXVjSFZ6YUNodWIyUmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJ5WVdOcklHNXZaR1VnZDJVbmNtVWdjbVZ0YjNacGJtZGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpkWEp5Wlc1MFVtVnRiM1pwYm1kT2IyUmxJRDA5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRkpsYlc5MmFXNW5UbTlrWlNBOUlHNXZaR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1YyaGxiaUJ5WlcxdmRtbHVaeXdnYVc1amNtVnRaVzUwSUdOdmRXNTBJR0o1SUhkb2FXTm9JSFJ2SUdGa2FuVnpkQ0J6ZFdKelpYRjFaVzUwSUhCaGNuUWdhVzVrYVdObGMxeHVJQ0FnSUNBZ0lDQnBaaUFvWTNWeWNtVnVkRkpsYlc5MmFXNW5UbTlrWlNBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WdGIzWmxRMjkxYm5Rckt6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9jR0Z5ZENBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUhCaGNuUXVhVzVrWlhnZ1BUMDlJRzV2WkdWSmJtUmxlQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2NHRnlkQ0JwY3lCcGJpQmhJSEpsYlc5MlpXUWdibTlrWlNCa1pXRmpkR2wyWVhSbElHbDBJR0o1SUhObGRIUnBibWNnYVc1a1pYZ2dkRzhnTFRFZ2IzSmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHRmthblZ6ZENCMGFHVWdhVzVrWlhnZ1lYTWdibVZsWkdWa0xseHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGeWRDNXBibVJsZUNBOUlHTjFjbkpsYm5SU1pXMXZkbWx1WjA1dlpHVWdJVDA5SUc1MWJHd2dQeUF0TVNBNklIQmhjblF1YVc1a1pYZ2dMU0J5WlcxdmRtVkRiM1Z1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdkdklIUnZJSFJvWlNCdVpYaDBJR0ZqZEdsMlpTQndZWEowTGx4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Z5ZEVsdVpHVjRJRDBnYm1WNGRFRmpkR2wyWlVsdVpHVjRTVzVVWlcxd2JHRjBaVkJoY25SektIQmhjblJ6TENCd1lYSjBTVzVrWlhncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGeWRDQTlJSEJoY25SelczQmhjblJKYm1SbGVGMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2JtOWtaWE5VYjFKbGJXOTJaVWx1VkdWdGNHeGhkR1V1Wm05eVJXRmphQ2dvYmlrZ1BUNGdiaTV3WVhKbGJuUk9iMlJsTG5KbGJXOTJaVU5vYVd4a0tHNHBLVHRjYm4xY2JtTnZibk4wSUdOdmRXNTBUbTlrWlhNZ1BTQW9ibTlrWlNrZ1BUNGdlMXh1SUNBZ0lHeGxkQ0JqYjNWdWRDQTlJQ2h1YjJSbExtNXZaR1ZVZVhCbElEMDlQU0F4TVNBdktpQk9iMlJsTGtSUFExVk5SVTVVWDBaU1FVZE5SVTVVWDA1UFJFVWdLaThwSUQ4Z01DQTZJREU3WEc0Z0lDQWdZMjl1YzNRZ2QyRnNhMlZ5SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsVkhKbFpWZGhiR3RsY2lodWIyUmxMQ0IzWVd4clpYSk9iMlJsUm1sc2RHVnlMQ0J1ZFd4c0xDQm1ZV3h6WlNrN1hHNGdJQ0FnZDJocGJHVWdLSGRoYkd0bGNpNXVaWGgwVG05a1pTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUdOdmRXNTBLeXM3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCamIzVnVkRHRjYm4wN1hHNWpiMjV6ZENCdVpYaDBRV04wYVhabFNXNWtaWGhKYmxSbGJYQnNZWFJsVUdGeWRITWdQU0FvY0dGeWRITXNJSE4wWVhKMFNXNWtaWGdnUFNBdE1Ta2dQVDRnZTF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNCemRHRnlkRWx1WkdWNElDc2dNVHNnYVNBOElIQmhjblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIQmhjblFnUFNCd1lYSjBjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6VkdWdGNHeGhkR1ZRWVhKMFFXTjBhWFpsS0hCaGNuUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnTFRFN1hHNTlPMXh1THlvcVhHNGdLaUJKYm5ObGNuUnpJSFJvWlNCbmFYWmxiaUJ1YjJSbElHbHVkRzhnZEdobElGUmxiWEJzWVhSbExDQnZjSFJwYjI1aGJHeDVJR0psWm05eVpTQjBhR1VnWjJsMlpXNWNiaUFxSUhKbFprNXZaR1V1SUVsdUlHRmtaR2wwYVc5dUlIUnZJR2x1YzJWeWRHbHVaeUIwYUdVZ2JtOWtaU0JwYm5SdklIUm9aU0JVWlcxd2JHRjBaU3dnZEdobElGUmxiWEJzWVhSbFhHNGdLaUJ3WVhKMElHbHVaR2xqWlhNZ1lYSmxJSFZ3WkdGMFpXUWdkRzhnYldGMFkyZ2dkR2hsSUcxMWRHRjBaV1FnVkdWdGNHeGhkR1VnUkU5TkxseHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVc1elpYSjBUbTlrWlVsdWRHOVVaVzF3YkdGMFpTaDBaVzF3YkdGMFpTd2dibTlrWlN3Z2NtVm1UbTlrWlNBOUlHNTFiR3dwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR1ZzWlcxbGJuUTZJSHNnWTI5dWRHVnVkQ0I5TENCd1lYSjBjeUI5SUQwZ2RHVnRjR3hoZEdVN1hHNGdJQ0FnTHk4Z1NXWWdkR2hsY21VbmN5QnVieUJ5WldaT2IyUmxMQ0IwYUdWdUlIQjFkQ0J1YjJSbElHRjBJR1Z1WkNCdlppQjBaVzF3YkdGMFpTNWNiaUFnSUNBdkx5Qk9ieUJ3WVhKMElHbHVaR2xqWlhNZ2JtVmxaQ0IwYnlCaVpTQnphR2xtZEdWa0lHbHVJSFJvYVhNZ1kyRnpaUzVjYmlBZ0lDQnBaaUFvY21WbVRtOWtaU0E5UFQwZ2JuVnNiQ0I4ZkNCeVpXWk9iMlJsSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWRHVnVkQzVoY0hCbGJtUkRhR2xzWkNodWIyUmxLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0IzWVd4clpYSWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVlVjbVZsVjJGc2EyVnlLR052Ym5SbGJuUXNJSGRoYkd0bGNrNXZaR1ZHYVd4MFpYSXNJRzUxYkd3c0lHWmhiSE5sS1R0Y2JpQWdJQ0JzWlhRZ2NHRnlkRWx1WkdWNElEMGdibVY0ZEVGamRHbDJaVWx1WkdWNFNXNVVaVzF3YkdGMFpWQmhjblJ6S0hCaGNuUnpLVHRjYmlBZ0lDQnNaWFFnYVc1elpYSjBRMjkxYm5RZ1BTQXdPMXh1SUNBZ0lHeGxkQ0IzWVd4clpYSkpibVJsZUNBOUlDMHhPMXh1SUNBZ0lIZG9hV3hsSUNoM1lXeHJaWEl1Ym1WNGRFNXZaR1VvS1NrZ2UxeHVJQ0FnSUNBZ0lDQjNZV3hyWlhKSmJtUmxlQ3NyTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IzWVd4clpYSk9iMlJsSUQwZ2QyRnNhMlZ5TG1OMWNuSmxiblJPYjJSbE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZDJGc2EyVnlUbTlrWlNBOVBUMGdjbVZtVG05a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXpaWEowUTI5MWJuUWdQU0JqYjNWdWRFNXZaR1Z6S0c1dlpHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVm1UbTlrWlM1d1lYSmxiblJPYjJSbExtbHVjMlZ5ZEVKbFptOXlaU2h1YjJSbExDQnlaV1pPYjJSbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9jR0Z5ZEVsdVpHVjRJQ0U5UFNBdE1TQW1KaUJ3WVhKMGMxdHdZWEowU1c1a1pYaGRMbWx1WkdWNElEMDlQU0IzWVd4clpYSkpibVJsZUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdkMlVuZG1VZ2FXNXpaWEowWldRZ2RHaGxJRzV2WkdVc0lITnBiWEJzZVNCaFpHcDFjM1FnWVd4c0lITjFZbk5sY1hWbGJuUWdjR0Z5ZEhOY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGJuTmxjblJEYjNWdWRDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FHbHNaU0FvY0dGeWRFbHVaR1Y0SUNFOVBTQXRNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWEowYzF0d1lYSjBTVzVrWlhoZExtbHVaR1Y0SUNzOUlHbHVjMlZ5ZEVOdmRXNTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYSjBTVzVrWlhnZ1BTQnVaWGgwUVdOMGFYWmxTVzVrWlhoSmJsUmxiWEJzWVhSbFVHRnlkSE1vY0dGeWRITXNJSEJoY25SSmJtUmxlQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGNuUkpibVJsZUNBOUlHNWxlSFJCWTNScGRtVkpibVJsZUVsdVZHVnRjR3hoZEdWUVlYSjBjeWh3WVhKMGN5d2djR0Z5ZEVsdVpHVjRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QVzF2WkdsbWVTMTBaVzF3YkdGMFpTNXFjeTV0WVhBaUxDSXZLaXBjYmlBcUlFQnNhV05sYm5ObFhHNGdLaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGNnVkdobElGQnZiSGx0WlhJZ1VISnZhbVZqZENCQmRYUm9iM0p6TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ29nVkdocGN5QmpiMlJsSUcxaGVTQnZibXg1SUdKbElIVnpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDQnpkSGxzWlNCc2FXTmxibk5sSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlRFbERSVTVUUlM1MGVIUmNiaUFxSUZSb1pTQmpiMjF3YkdWMFpTQnpaWFFnYjJZZ1lYVjBhRzl5Y3lCdFlYa2dZbVVnWm05MWJtUWdZWFJjYmlBcUlHaDBkSEE2THk5d2IyeDViV1Z5TG1kcGRHaDFZaTVwYnk5QlZWUklUMUpUTG5SNGRGeHVJQ29nVkdobElHTnZiWEJzWlhSbElITmxkQ0J2WmlCamIyNTBjbWxpZFhSdmNuTWdiV0Y1SUdKbElHWnZkVzVrSUdGMFhHNGdLaUJvZEhSd09pOHZjRzlzZVcxbGNpNW5hWFJvZFdJdWFXOHZRMDlPVkZKSlFsVlVUMUpUTG5SNGRGeHVJQ29nUTI5a1pTQmthWE4wY21saWRYUmxaQ0JpZVNCSGIyOW5iR1VnWVhNZ2NHRnlkQ0J2WmlCMGFHVWdjRzlzZVcxbGNpQndjbTlxWldOMElHbHpJR0ZzYzI5Y2JpQXFJSE4xWW1wbFkzUWdkRzhnWVc0Z1lXUmthWFJwYjI1aGJDQkpVQ0J5YVdkb2RITWdaM0poYm5RZ1ptOTFibVFnWVhSY2JpQXFJR2gwZEhBNkx5OXdiMng1YldWeUxtZHBkR2gxWWk1cGJ5OVFRVlJGVGxSVExuUjRkRnh1SUNvdlhHNWpiMjV6ZENCa2FYSmxZM1JwZG1WeklEMGdibVYzSUZkbFlXdE5ZWEFvS1R0Y2JpOHFLbHh1SUNvZ1FuSmhibVJ6SUdFZ1puVnVZM1JwYjI0Z1lYTWdZU0JrYVhKbFkzUnBkbVVnWm1GamRHOXllU0JtZFc1amRHbHZiaUJ6YnlCMGFHRjBJR3hwZEMxb2RHMXNJSGRwYkd3Z1kyRnNiRnh1SUNvZ2RHaGxJR1oxYm1OMGFXOXVJR1IxY21sdVp5QjBaVzF3YkdGMFpTQnlaVzVrWlhKcGJtY3NJSEpoZEdobGNpQjBhR0Z1SUhCaGMzTnBibWNnWVhNZ1lTQjJZV3gxWlM1Y2JpQXFYRzRnS2lCQklGOWthWEpsWTNScGRtVmZJR2x6SUdFZ1puVnVZM1JwYjI0Z2RHaGhkQ0IwWVd0bGN5QmhJRkJoY25RZ1lYTWdZVzRnWVhKbmRXMWxiblF1SUVsMElHaGhjeUIwYUdWY2JpQXFJSE5wWjI1aGRIVnlaVG9nWUNod1lYSjBPaUJRWVhKMEtTQTlQaUIyYjJsa1lDNWNiaUFxWEc0Z0tpQkJJR1JwY21WamRHbDJaU0JmWm1GamRHOXllVjhnYVhNZ1lTQm1kVzVqZEdsdmJpQjBhR0YwSUhSaGEyVnpJR0Z5WjNWdFpXNTBjeUJtYjNJZ1pHRjBZU0JoYm1SY2JpQXFJR052Ym1acFozVnlZWFJwYjI0Z1lXNWtJSEpsZEhWeWJuTWdZU0JrYVhKbFkzUnBkbVV1SUZWelpYSnpJRzltSUdScGNtVmpkR2wyWlNCMWMzVmhiR3g1SUhKbFptVnlJSFJ2WEc0Z0tpQjBhR1VnWkdseVpXTjBhWFpsSUdaaFkzUnZjbmtnWVhNZ2RHaGxJR1JwY21WamRHbDJaUzRnUm05eUlHVjRZVzF3YkdVc0lGd2lWR2hsSUhKbGNHVmhkQ0JrYVhKbFkzUnBkbVZjSWk1Y2JpQXFYRzRnS2lCVmMzVmhiR3g1SUdFZ2RHVnRjR3hoZEdVZ1lYVjBhRzl5SUhkcGJHd2dhVzUyYjJ0bElHRWdaR2x5WldOMGFYWmxJR1poWTNSdmNua2dhVzRnZEdobGFYSWdkR1Z0Y0d4aGRHVmNiaUFxSUhkcGRHZ2djbVZzWlhaaGJuUWdZWEpuZFcxbGJuUnpMQ0IzYUdsamFDQjNhV3hzSUhSb1pXNGdjbVYwZFhKdUlHRWdaR2x5WldOMGFYWmxJR1oxYm1OMGFXOXVMbHh1SUNwY2JpQXFJRWhsY21VbmN5QmhiaUJsZUdGdGNHeGxJRzltSUhWemFXNW5JSFJvWlNCZ2NtVndaV0YwS0NsZ0lHUnBjbVZqZEdsMlpTQm1ZV04wYjNKNUlIUm9ZWFFnZEdGclpYTWdZVzVjYmlBcUlHRnljbUY1SUdGdVpDQmhJR1oxYm1OMGFXOXVJSFJ2SUhKbGJtUmxjaUJoYmlCcGRHVnRPbHh1SUNwY2JpQXFJR0JnWUdwelhHNGdLaUJvZEcxc1lEeDFiRDQ4Skh0eVpYQmxZWFFvYVhSbGJYTXNJQ2hwZEdWdEtTQTlQaUJvZEcxc1lEeHNhVDRrZTJsMFpXMTlQQzlzYVQ1Z0tYMDhMM1ZzUG1CY2JpQXFJR0JnWUZ4dUlDcGNiaUFxSUZkb1pXNGdZSEpsY0dWaGRHQWdhWE1nYVc1MmIydGxaQ3dnYVhRZ2NtVjBkWEp1Y3lCaElHUnBjbVZqZEdsMlpTQm1kVzVqZEdsdmJpQjBhR0YwSUdOc2IzTmxjeUJ2ZG1WeVhHNGdLaUJnYVhSbGJYTmdJR0Z1WkNCMGFHVWdkR1Z0Y0d4aGRHVWdablZ1WTNScGIyNHVJRmRvWlc0Z2RHaGxJRzkxZEdWeUlIUmxiWEJzWVhSbElHbHpJSEpsYm1SbGNtVmtMQ0IwYUdWY2JpQXFJSEpsZEhWeWJpQmthWEpsWTNScGRtVWdablZ1WTNScGIyNGdhWE1nWTJGc2JHVmtJSGRwZEdnZ2RHaGxJRkJoY25RZ1ptOXlJSFJvWlNCbGVIQnlaWE56YVc5dUxseHVJQ29nWUhKbGNHVmhkR0FnZEdobGJpQndaWEptYjNKdGN5QnBkQ2R6SUdOMWMzUnZiU0JzYjJkcFl5QjBieUJ5Wlc1a1pYSWdiWFZzZEdsd2JHVWdhWFJsYlhNdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUdZZ1ZHaGxJR1JwY21WamRHbDJaU0JtWVdOMGIzSjVJR1oxYm1OMGFXOXVMaUJOZFhOMElHSmxJR0VnWm5WdVkzUnBiMjRnZEdoaGRDQnlaWFIxY201eklHRmNiaUFxSUdaMWJtTjBhVzl1SUc5bUlIUm9aU0J6YVdkdVlYUjFjbVVnWUNod1lYSjBPaUJRWVhKMEtTQTlQaUIyYjJsa1lDNGdWR2hsSUhKbGRIVnlibVZrSUdaMWJtTjBhVzl1SUhkcGJHeGNiaUFxSUdKbElHTmhiR3hsWkNCM2FYUm9JSFJvWlNCd1lYSjBJRzlpYW1WamRDNWNiaUFxWEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ3BjYmlBcUlHbHRjRzl5ZENCN1pHbHlaV04wYVhabExDQm9kRzFzZlNCbWNtOXRJQ2RzYVhRdGFIUnRiQ2M3WEc0Z0tseHVJQ29nWTI5dWMzUWdhVzF0ZFhSaFlteGxJRDBnWkdseVpXTjBhWFpsS0NoMktTQTlQaUFvY0dGeWRDa2dQVDRnZTF4dUlDb2dJQ0JwWmlBb2NHRnlkQzUyWVd4MVpTQWhQVDBnZGlrZ2UxeHVJQ29nSUNBZ0lIQmhjblF1YzJWMFZtRnNkV1VvZGlsY2JpQXFJQ0FnZlZ4dUlDb2dmU2s3WEc0Z0tpOWNibVY0Y0c5eWRDQmpiMjV6ZENCa2FYSmxZM1JwZG1VZ1BTQW9aaWtnUFQ0Z0tDZ3VMaTVoY21kektTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1pDQTlJR1lvTGk0dVlYSm5jeWs3WEc0Z0lDQWdaR2x5WldOMGFYWmxjeTV6WlhRb1pDd2dkSEoxWlNrN1hHNGdJQ0FnY21WMGRYSnVJR1E3WEc1OUtUdGNibVY0Y0c5eWRDQmpiMjV6ZENCcGMwUnBjbVZqZEdsMlpTQTlJQ2h2S1NBOVBpQjdYRzRnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUJ2SUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUdScGNtVmpkR2wyWlhNdWFHRnpLRzhwTzF4dWZUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdScGNtVmpkR2wyWlM1cWN5NXRZWEFpTENJdktpcGNiaUFxSUVCc2FXTmxibk5sWEc0Z0tpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UZ2dWR2hsSUZCdmJIbHRaWElnVUhKdmFtVmpkQ0JCZFhSb2IzSnpMaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDb2dWR2hwY3lCamIyUmxJRzFoZVNCdmJteDVJR0psSUhWelpXUWdkVzVrWlhJZ2RHaGxJRUpUUkNCemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHRjBYRzRnS2lCb2RIUndPaTh2Y0c5c2VXMWxjaTVuYVhSb2RXSXVhVzh2VEVsRFJVNVRSUzUwZUhSY2JpQXFJRlJvWlNCamIyMXdiR1YwWlNCelpYUWdiMllnWVhWMGFHOXljeUJ0WVhrZ1ltVWdabTkxYm1RZ1lYUmNiaUFxSUdoMGRIQTZMeTl3YjJ4NWJXVnlMbWRwZEdoMVlpNXBieTlCVlZSSVQxSlRMblI0ZEZ4dUlDb2dWR2hsSUdOdmJYQnNaWFJsSUhObGRDQnZaaUJqYjI1MGNtbGlkWFJ2Y25NZ2JXRjVJR0psSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlEwOU9WRkpKUWxWVVQxSlRMblI0ZEZ4dUlDb2dRMjlrWlNCa2FYTjBjbWxpZFhSbFpDQmllU0JIYjI5bmJHVWdZWE1nY0dGeWRDQnZaaUIwYUdVZ2NHOXNlVzFsY2lCd2NtOXFaV04wSUdseklHRnNjMjljYmlBcUlITjFZbXBsWTNRZ2RHOGdZVzRnWVdSa2FYUnBiMjVoYkNCSlVDQnlhV2RvZEhNZ1ozSmhiblFnWm05MWJtUWdZWFJjYmlBcUlHaDBkSEE2THk5d2IyeDViV1Z5TG1kcGRHaDFZaTVwYnk5UVFWUkZUbFJUTG5SNGRGeHVJQ292WEc0dktpcGNiaUFxSUVFZ2MyVnVkR2x1Wld3Z2RtRnNkV1VnZEdoaGRDQnphV2R1WVd4eklIUm9ZWFFnWVNCMllXeDFaU0IzWVhNZ2FHRnVaR3hsWkNCaWVTQmhJR1JwY21WamRHbDJaU0JoYm1SY2JpQXFJSE5vYjNWc1pDQnViM1FnWW1VZ2QzSnBkSFJsYmlCMGJ5QjBhR1VnUkU5TkxseHVJQ292WEc1bGVIQnZjblFnWTI5dWMzUWdibTlEYUdGdVoyVWdQU0I3ZlR0Y2JpOHFLbHh1SUNvZ1FTQnpaVzUwYVc1bGJDQjJZV3gxWlNCMGFHRjBJSE5wWjI1aGJITWdZU0JPYjJSbFVHRnlkQ0IwYnlCbWRXeHNlU0JqYkdWaGNpQnBkSE1nWTI5dWRHVnVkQzVjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUc1dmRHaHBibWNnUFNCN2ZUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFhCaGNuUXVhbk11YldGd0lpd2lMeW9xWEc0Z0tpQkFiR2xqWlc1elpWeHVJQ29nUTI5d2VYSnBaMmgwSUNoaktTQXlNREUzSUZSb1pTQlFiMng1YldWeUlGQnliMnBsWTNRZ1FYVjBhRzl5Y3k0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxSUZSb2FYTWdZMjlrWlNCdFlYa2diMjVzZVNCaVpTQjFjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUWdjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JoZEZ4dUlDb2dhSFIwY0RvdkwzQnZiSGx0WlhJdVoybDBhSFZpTG1sdkwweEpRMFZPVTBVdWRIaDBYRzRnS2lCVWFHVWdZMjl0Y0d4bGRHVWdjMlYwSUc5bUlHRjFkR2h2Y25NZ2JXRjVJR0psSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlFWVlVTRTlTVXk1MGVIUmNiaUFxSUZSb1pTQmpiMjF3YkdWMFpTQnpaWFFnYjJZZ1kyOXVkSEpwWW5WMGIzSnpJRzFoZVNCaVpTQm1iM1Z1WkNCaGRGeHVJQ29nYUhSMGNEb3ZMM0J2YkhsdFpYSXVaMmwwYUhWaUxtbHZMME5QVGxSU1NVSlZWRTlTVXk1MGVIUmNiaUFxSUVOdlpHVWdaR2x6ZEhKcFluVjBaV1FnWW5rZ1IyOXZaMnhsSUdGeklIQmhjblFnYjJZZ2RHaGxJSEJ2YkhsdFpYSWdjSEp2YW1WamRDQnBjeUJoYkhOdlhHNGdLaUJ6ZFdKcVpXTjBJSFJ2SUdGdUlHRmtaR2wwYVc5dVlXd2dTVkFnY21sbmFIUnpJR2R5WVc1MElHWnZkVzVrSUdGMFhHNGdLaUJvZEhSd09pOHZjRzlzZVcxbGNpNW5hWFJvZFdJdWFXOHZVRUZVUlU1VVV5NTBlSFJjYmlBcUwxeHVMeW9xWEc0Z0tpQkFiVzlrZFd4bElHeHBkQzFvZEcxc1hHNGdLaTljYm1sdGNHOXlkQ0I3SUdselEwVlFiMng1Wm1sc2JDQjlJR1p5YjIwZ0p5NHZaRzl0TG1wekp6dGNibWx0Y0c5eWRDQjdJR2x6VkdWdGNHeGhkR1ZRWVhKMFFXTjBhWFpsSUgwZ1puSnZiU0FuTGk5MFpXMXdiR0YwWlM1cWN5YzdYRzR2S2lwY2JpQXFJRUZ1SUdsdWMzUmhibU5sSUc5bUlHRWdZRlJsYlhCc1lYUmxZQ0IwYUdGMElHTmhiaUJpWlNCaGRIUmhZMmhsWkNCMGJ5QjBhR1VnUkU5TklHRnVaQ0IxY0dSaGRHVmtYRzRnS2lCM2FYUm9JRzVsZHlCMllXeDFaWE11WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVVpXMXdiR0YwWlVsdWMzUmhibU5sSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loMFpXMXdiR0YwWlN3Z2NISnZZMlZ6YzI5eUxDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgxOXdZWEowY3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUmxiWEJzWVhSbElEMGdkR1Z0Y0d4aGRHVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISnZZMlZ6YzI5eUlEMGdjSEp2WTJWemMyOXlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1ek8xeHVJQ0FnSUgxY2JpQWdJQ0IxY0dSaGRHVW9kbUZzZFdWektTQjdYRzRnSUNBZ0lDQWdJR3hsZENCcElEMGdNRHRjYmlBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCd1lYSjBJRzltSUhSb2FYTXVYMTl3WVhKMGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJoY25RZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGNuUXVjMlYwVm1Gc2RXVW9kbUZzZFdWelcybGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdrckt6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUhCaGNuUWdiMllnZEdocGN5NWZYM0JoY25SektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR0Z5ZENBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGeWRDNWpiMjF0YVhRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JmWTJ4dmJtVW9LU0I3WEc0Z0lDQWdJQ0FnSUM4dklGUm9aWEpsSUdGeVpTQmhJRzUxYldKbGNpQnZaaUJ6ZEdWd2N5QnBiaUIwYUdVZ2JHbG1aV041WTJ4bElHOW1JR0VnZEdWdGNHeGhkR1VnYVc1emRHRnVZMlVuYzF4dUlDQWdJQ0FnSUNBdkx5QkVUMDBnWm5KaFoyMWxiblE2WEc0Z0lDQWdJQ0FnSUM4dklDQXhMaUJEYkc5dVpTQXRJR055WldGMFpTQjBhR1VnYVc1emRHRnVZMlVnWm5KaFoyMWxiblJjYmlBZ0lDQWdJQ0FnTHk4Z0lESXVJRUZrYjNCMElDMGdZV1J2Y0hRZ2FXNTBieUIwYUdVZ2JXRnBiaUJrYjJOMWJXVnVkRnh1SUNBZ0lDQWdJQ0F2THlBZ015NGdVSEp2WTJWemN5QXRJR1pwYm1RZ2NHRnlkQ0J0WVhKclpYSnpJR0Z1WkNCamNtVmhkR1VnY0dGeWRITmNiaUFnSUNBZ0lDQWdMeThnSURRdUlGVndaM0poWkdVZ0xTQjFjR2R5WVdSbElHTjFjM1J2YlNCbGJHVnRaVzUwYzF4dUlDQWdJQ0FnSUNBdkx5QWdOUzRnVlhCa1lYUmxJQzBnYzJWMElHNXZaR1VzSUdGMGRISnBZblYwWlN3Z2NISnZjR1Z5ZEhrc0lHVjBZeTRzSUhaaGJIVmxjMXh1SUNBZ0lDQWdJQ0F2THlBZ05pNGdRMjl1Ym1WamRDQXRJR052Ym01bFkzUWdkRzhnZEdobElHUnZZM1Z0Wlc1MExpQlBjSFJwYjI1aGJDQmhibVFnYjNWMGMybGtaU0J2WmlCMGFHbHpYRzRnSUNBZ0lDQWdJQzh2SUNBZ0lDQnRaWFJvYjJRdVhHNGdJQ0FnSUNBZ0lDOHZYRzRnSUNBZ0lDQWdJQzh2SUZkbElHaGhkbVVnWVNCbVpYY2dZMjl1YzNSeVlXbHVkSE1nYjI0Z2RHaGxJRzl5WkdWeWFXNW5JRzltSUhSb1pYTmxJSE4wWlhCek9seHVJQ0FnSUNBZ0lDQXZMeUFnS2lCWFpTQnVaV1ZrSUhSdklIVndaM0poWkdVZ1ltVm1iM0psSUhWd1pHRjBhVzVuTENCemJ5QjBhR0YwSUhCeWIzQmxjblI1SUhaaGJIVmxjeUIzYVd4c0lIQmhjM05jYmlBZ0lDQWdJQ0FnTHk4Z0lDQWdkR2h5YjNWbmFDQmhibmtnY0hKdmNHVnlkSGtnYzJWMGRHVnljeTVjYmlBZ0lDQWdJQ0FnTHk4Z0lDb2dWMlVnZDI5MWJHUWdiR2xyWlNCMGJ5QndjbTlqWlhOeklHSmxabTl5WlNCMWNHZHlZV1JwYm1jZ2MyOGdkR2hoZENCM1pTZHlaU0J6ZFhKbElIUm9ZWFFnZEdobFhHNGdJQ0FnSUNBZ0lDOHZJQ0FnSUdOc2IyNWxaQ0JtY21GbmJXVnVkQ0JwY3lCcGJtVnlkQ0JoYm1RZ2JtOTBJR1JwYzNSMWNtSmxaQ0JpZVNCelpXeG1MVzF2WkdsbWVXbHVaeUJFVDAwdVhHNGdJQ0FnSUNBZ0lDOHZJQ0FxSUZkbElIZGhiblFnWTNWemRHOXRJR1ZzWlcxbGJuUnpJSFJ2SUhWd1ozSmhaR1VnWlhabGJpQnBiaUJrYVhOamIyNXVaV04wWldRZ1puSmhaMjFsYm5SekxseHVJQ0FnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdJQ0F2THlCSGFYWmxiaUIwYUdWelpTQmpiMjV6ZEhKaGFXNTBjeXdnZDJsMGFDQm1kV3hzSUdOMWMzUnZiU0JsYkdWdFpXNTBjeUJ6ZFhCd2IzSjBJSGRsSUhkdmRXeGtYRzRnSUNBZ0lDQWdJQzh2SUhCeVpXWmxjaUIwYUdVZ2IzSmtaWEk2SUVOc2IyNWxMQ0JRY205alpYTnpMQ0JCWkc5d2RDd2dWWEJuY21Ga1pTd2dWWEJrWVhSbExDQkRiMjV1WldOMFhHNGdJQ0FnSUNBZ0lDOHZYRzRnSUNBZ0lDQWdJQzh2SUVKMWRDQlRZV1poY21rZ1pHOWxjeUJ1YjNRZ2FXMXdiR1Z0Wlc1MElFTjFjM1J2YlVWc1pXMWxiblJTWldkcGMzUnllU04xY0dkeVlXUmxMQ0J6YnlCM1pWeHVJQ0FnSUNBZ0lDQXZMeUJqWVc0Z2JtOTBJR2x0Y0d4bGJXVnVkQ0IwYUdGMElHOXlaR1Z5SUdGdVpDQnpkR2xzYkNCb1lYWmxJSFZ3WjNKaFpHVXRZbVZtYjNKbExYVndaR0YwWlNCaGJtUmNiaUFnSUNBZ0lDQWdMeThnZFhCbmNtRmtaU0JrYVhOamIyNXVaV04wWldRZ1puSmhaMjFsYm5SekxpQlRieUIzWlNCcGJuTjBaV0ZrSUhOaFkzSnBabWxqWlNCMGFHVmNiaUFnSUNBZ0lDQWdMeThnY0hKdlkyVnpjeTFpWldadmNtVXRkWEJuY21Ga1pTQmpiMjV6ZEhKaGFXNTBMQ0J6YVc1alpTQnBiaUJEZFhOMGIyMGdSV3hsYldWdWRITWdkakVnWld4bGJXVnVkSE5jYmlBZ0lDQWdJQ0FnTHk4Z2JYVnpkQ0J1YjNRZ2JXOWthV1o1SUhSb1pXbHlJR3hwWjJoMElFUlBUU0JwYmlCMGFHVWdZMjl1YzNSeWRXTjBiM0l1SUZkbElITjBhV3hzSUdoaGRtVWdhWE56ZFdWelhHNGdJQ0FnSUNBZ0lDOHZJSGRvWlc0Z1kyOHRaWGhwYzNScGJtY2dkMmwwYUNCRFJYWXdJR1ZzWlcxbGJuUnpJR3hwYTJVZ1VHOXNlVzFsY2lBeExDQmhibVFnZDJsMGFDQndiMng1Wm1sc2JITmNiaUFnSUNBZ0lDQWdMeThnZEdoaGRDQmtiMjRuZENCemRISnBZM1JzZVNCaFpHaGxjbVVnZEc4Z2RHaGxJRzV2TFcxdlpHbG1hV05oZEdsdmJpQnlkV3hsSUdKbFkyRjFjMlVnYzJoaFpHOTNYRzRnSUNBZ0lDQWdJQzh2SUVSUFRTd2dkMmhwWTJnZ2JXRjVJR0psSUdOeVpXRjBaV1FnYVc0Z2RHaGxJR052Ym5OMGNuVmpkRzl5TENCcGN5QmxiWFZzWVhSbFpDQmllU0JpWldsdVp5QndiR0ZqWldSY2JpQWdJQ0FnSUNBZ0x5OGdhVzRnZEdobElHeHBaMmgwSUVSUFRTNWNiaUFnSUNBZ0lDQWdMeTljYmlBZ0lDQWdJQ0FnTHk4Z1ZHaGxJSEpsYzNWc2RHbHVaeUJ2Y21SbGNpQnBjeUJ2YmlCdVlYUnBkbVVnYVhNNklFTnNiMjVsTENCQlpHOXdkQ3dnVlhCbmNtRmtaU3dnVUhKdlkyVnpjeXhjYmlBZ0lDQWdJQ0FnTHk4Z1ZYQmtZWFJsTENCRGIyNXVaV04wTGlCa2IyTjFiV1Z1ZEM1cGJYQnZjblJPYjJSbEtDa2djR1Z5Wm05eWJYTWdRMnh2Ym1Vc0lFRmtiM0IwTENCaGJtUWdWWEJuY21Ga1pWeHVJQ0FnSUNBZ0lDQXZMeUJwYmlCdmJtVWdjM1JsY0M1Y2JpQWdJQ0FnSUNBZ0x5OWNiaUFnSUNBZ0lDQWdMeThnVkdobElFTjFjM1J2YlNCRmJHVnRaVzUwY3lCMk1TQndiMng1Wm1sc2JDQnpkWEJ3YjNKMGN5QjFjR2R5WVdSbEtDa3NJSE52SUhSb1pTQnZjbVJsY2lCM2FHVnVYRzRnSUNBZ0lDQWdJQzh2SUhCdmJIbG1hV3hzWldRZ2FYTWdkR2hsSUcxdmNtVWdhV1JsWVd3NklFTnNiMjVsTENCUWNtOWpaWE56TENCQlpHOXdkQ3dnVlhCbmNtRmtaU3dnVlhCa1lYUmxMRnh1SUNBZ0lDQWdJQ0F2THlCRGIyNXVaV04wTGx4dUlDQWdJQ0FnSUNCamIyNXpkQ0JtY21GbmJXVnVkQ0E5SUdselEwVlFiMng1Wm1sc2JDQS9YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJsYlhCc1lYUmxMbVZzWlcxbGJuUXVZMjl1ZEdWdWRDNWpiRzl1WlU1dlpHVW9kSEoxWlNrZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5amRXMWxiblF1YVcxd2IzSjBUbTlrWlNoMGFHbHpMblJsYlhCc1lYUmxMbVZzWlcxbGJuUXVZMjl1ZEdWdWRDd2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhOMFlXTnJJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCaGNuUnpJRDBnZEdocGN5NTBaVzF3YkdGMFpTNXdZWEowY3p0Y2JpQWdJQ0FnSUNBZ0x5OGdSV1JuWlNCdVpXVmtjeUJoYkd3Z05DQndZWEpoYldWMFpYSnpJSEJ5WlhObGJuUTdJRWxGTVRFZ2JtVmxaSE1nTTNKa0lIQmhjbUZ0WlhSbGNpQjBieUJpWlNCdWRXeHNYRzRnSUNBZ0lDQWdJR052Ym5OMElIZGhiR3RsY2lBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlZSeVpXVlhZV3hyWlhJb1puSmhaMjFsYm5Rc0lERXpNeUF2S2lCT2IyUmxSbWxzZEdWeUxsTklUMWRmZTBWTVJVMUZUbFI4UTA5TlRVVk9WSHhVUlZoVWZTQXFMeXdnYm5Wc2JDd2dabUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQnNaWFFnY0dGeWRFbHVaR1Y0SUQwZ01EdGNiaUFnSUNBZ0lDQWdiR1YwSUc1dlpHVkpibVJsZUNBOUlEQTdYRzRnSUNBZ0lDQWdJR3hsZENCd1lYSjBPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JtOWtaU0E5SUhkaGJHdGxjaTV1WlhoMFRtOWtaU2dwTzF4dUlDQWdJQ0FnSUNBdkx5Qk1iMjl3SUhSb2NtOTFaMmdnWVd4c0lIUm9aU0J1YjJSbGN5QmhibVFnY0dGeWRITWdiMllnWVNCMFpXMXdiR0YwWlZ4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvY0dGeWRFbHVaR1Y0SUR3Z2NHRnlkSE11YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWEowSUQwZ2NHRnlkSE5iY0dGeWRFbHVaR1Y0WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGFYTlVaVzF3YkdGMFpWQmhjblJCWTNScGRtVW9jR0Z5ZENrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmNHRnlkSE11Y0hWemFDaDFibVJsWm1sdVpXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoY25SSmJtUmxlQ3NyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVSEp2WjNKbGMzTWdkR2hsSUhSeVpXVWdkMkZzYTJWeUlIVnVkR2xzSUhkbElHWnBibVFnYjNWeUlHNWxlSFFnY0dGeWRDZHpJRzV2WkdVdVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCT2IzUmxJSFJvWVhRZ2JYVnNkR2x3YkdVZ2NHRnlkSE1nYldGNUlITm9ZWEpsSUhSb1pTQnpZVzFsSUc1dlpHVWdLR0YwZEhKcFluVjBaU0J3WVhKMGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2IyNGdZU0J6YVc1bmJHVWdaV3hsYldWdWRDa3NJSE52SUhSb2FYTWdiRzl2Y0NCdFlYa2dibTkwSUhKMWJpQmhkQ0JoYkd3dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IzYUdsc1pTQW9ibTlrWlVsdVpHVjRJRHdnY0dGeWRDNXBibVJsZUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1ZKYm1SbGVDc3JPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodWIyUmxMbTV2WkdWT1lXMWxJRDA5UFNBblZFVk5VRXhCVkVVbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlXTnJMbkIxYzJnb2JtOWtaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGhiR3RsY2k1amRYSnlaVzUwVG05a1pTQTlJRzV2WkdVdVkyOXVkR1Z1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ2h1YjJSbElEMGdkMkZzYTJWeUxtNWxlSFJPYjJSbEtDa3BJRDA5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmRsSjNabElHVjRhR0YxYzNSbFpDQjBhR1VnWTI5dWRHVnVkQ0JwYm5OcFpHVWdZU0J1WlhOMFpXUWdkR1Z0Y0d4aGRHVWdaV3hsYldWdWRDNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1FtVmpZWFZ6WlNCM1pTQnpkR2xzYkNCb1lYWmxJSEJoY25SeklDaDBhR1VnYjNWMFpYSWdabTl5TFd4dmIzQXBMQ0IzWlNCcmJtOTNPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QXRJRlJvWlhKbElHbHpJR0VnZEdWdGNHeGhkR1VnYVc0Z2RHaGxJSE4wWVdOclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUMwZ1ZHaGxJSGRoYkd0bGNpQjNhV3hzSUdacGJtUWdZU0J1WlhoMFRtOWtaU0J2ZFhSemFXUmxJSFJvWlNCMFpXMXdiR0YwWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNZV3hyWlhJdVkzVnljbVZ1ZEU1dlpHVWdQU0J6ZEdGamF5NXdiM0FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTlrWlNBOUlIZGhiR3RsY2k1dVpYaDBUbTlrWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkbEozWmxJR0Z5Y21sMlpXUWdZWFFnYjNWeUlIQmhjblFuY3lCdWIyUmxMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJoY25RdWRIbHdaU0E5UFQwZ0oyNXZaR1VuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGeWRDQTlJSFJvYVhNdWNISnZZMlZ6YzI5eUxtaGhibVJzWlZSbGVIUkZlSEJ5WlhOemFXOXVLSFJvYVhNdWIzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRnlkQzVwYm5ObGNuUkJablJsY2s1dlpHVW9ibTlrWlM1d2NtVjJhVzkxYzFOcFlteHBibWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMTl3WVhKMGN5NXdkWE5vS0hCaGNuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlgzQmhjblJ6TG5CMWMyZ29MaTR1ZEdocGN5NXdjbTlqWlhOemIzSXVhR0Z1Wkd4bFFYUjBjbWxpZFhSbFJYaHdjbVZ6YzJsdmJuTW9ibTlrWlN3Z2NHRnlkQzV1WVcxbExDQndZWEowTG5OMGNtbHVaM01zSUhSb2FYTXViM0IwYVc5dWN5a3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGeWRFbHVaR1Y0S3lzN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dselEwVlFiMng1Wm1sc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVlXUnZjSFJPYjJSbEtHWnlZV2R0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWMzUnZiVVZzWlcxbGJuUnpMblZ3WjNKaFpHVW9abkpoWjIxbGJuUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtY21GbmJXVnVkRHRjYmlBZ0lDQjlYRzU5WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMTBaVzF3YkdGMFpTMXBibk4wWVc1alpTNXFjeTV0WVhBaUxDSXZLaXBjYmlBcUlFQnNhV05sYm5ObFhHNGdLaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGNnVkdobElGQnZiSGx0WlhJZ1VISnZhbVZqZENCQmRYUm9iM0p6TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ29nVkdocGN5QmpiMlJsSUcxaGVTQnZibXg1SUdKbElIVnpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDQnpkSGxzWlNCc2FXTmxibk5sSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlRFbERSVTVUUlM1MGVIUmNiaUFxSUZSb1pTQmpiMjF3YkdWMFpTQnpaWFFnYjJZZ1lYVjBhRzl5Y3lCdFlYa2dZbVVnWm05MWJtUWdZWFJjYmlBcUlHaDBkSEE2THk5d2IyeDViV1Z5TG1kcGRHaDFZaTVwYnk5QlZWUklUMUpUTG5SNGRGeHVJQ29nVkdobElHTnZiWEJzWlhSbElITmxkQ0J2WmlCamIyNTBjbWxpZFhSdmNuTWdiV0Y1SUdKbElHWnZkVzVrSUdGMFhHNGdLaUJvZEhSd09pOHZjRzlzZVcxbGNpNW5hWFJvZFdJdWFXOHZRMDlPVkZKSlFsVlVUMUpUTG5SNGRGeHVJQ29nUTI5a1pTQmthWE4wY21saWRYUmxaQ0JpZVNCSGIyOW5iR1VnWVhNZ2NHRnlkQ0J2WmlCMGFHVWdjRzlzZVcxbGNpQndjbTlxWldOMElHbHpJR0ZzYzI5Y2JpQXFJSE4xWW1wbFkzUWdkRzhnWVc0Z1lXUmthWFJwYjI1aGJDQkpVQ0J5YVdkb2RITWdaM0poYm5RZ1ptOTFibVFnWVhSY2JpQXFJR2gwZEhBNkx5OXdiMng1YldWeUxtZHBkR2gxWWk1cGJ5OVFRVlJGVGxSVExuUjRkRnh1SUNvdlhHNHZLaXBjYmlBcUlFQnRiMlIxYkdVZ2JHbDBMV2gwYld4Y2JpQXFMMXh1YVcxd2IzSjBJSHNnY21Wd1lYSmxiblJPYjJSbGN5QjlJR1p5YjIwZ0p5NHZaRzl0TG1wekp6dGNibWx0Y0c5eWRDQjdJR0p2ZFc1a1FYUjBjbWxpZFhSbFUzVm1abWw0TENCc1lYTjBRWFIwY21saWRYUmxUbUZ0WlZKbFoyVjRMQ0J0WVhKclpYSXNJRzV2WkdWTllYSnJaWElnZlNCbWNtOXRJQ2N1TDNSbGJYQnNZWFJsTG1wekp6dGNibU52Ym5OMElHTnZiVzFsYm5STllYSnJaWElnUFNCZ0lDUjdiV0Z5YTJWeWZTQmdPMXh1THlvcVhHNGdLaUJVYUdVZ2NtVjBkWEp1SUhSNWNHVWdiMllnWUdoMGJXeGdMQ0IzYUdsamFDQm9iMnhrY3lCaElGUmxiWEJzWVhSbElHRnVaQ0IwYUdVZ2RtRnNkV1Z6SUdaeWIyMWNiaUFxSUdsdWRHVnljRzlzWVhSbFpDQmxlSEJ5WlhOemFXOXVjeTVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZSbGJYQnNZWFJsVW1WemRXeDBJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh6ZEhKcGJtZHpMQ0IyWVd4MVpYTXNJSFI1Y0dVc0lIQnliMk5sYzNOdmNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbWx1WjNNZ1BTQnpkSEpwYm1kek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5aaGJIVmxjeUE5SUhaaGJIVmxjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBlWEJsSUQwZ2RIbHdaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTlqWlhOemIzSWdQU0J3Y205alpYTnpiM0k3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdZU0J6ZEhKcGJtY2diMllnU0ZSTlRDQjFjMlZrSUhSdklHTnlaV0YwWlNCaElHQThkR1Z0Y0d4aGRHVStZQ0JsYkdWdFpXNTBMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRWhVVFV3b0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHd2dQU0IwYUdsekxuTjBjbWx1WjNNdWJHVnVaM1JvSUMwZ01UdGNiaUFnSUNBZ0lDQWdiR1YwSUdoMGJXd2dQU0FuSnp0Y2JpQWdJQ0FnSUNBZ2JHVjBJR2x6UTI5dGJXVnVkRUpwYm1ScGJtY2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhNZ1BTQjBhR2x6TG5OMGNtbHVaM05iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCR2IzSWdaV0ZqYUNCaWFXNWthVzVuSUhkbElIZGhiblFnZEc4Z1pHVjBaWEp0YVc1bElIUm9aU0JyYVc1a0lHOW1JRzFoY210bGNpQjBieUJwYm5ObGNuUmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHbHVkRzhnZEdobElIUmxiWEJzWVhSbElITnZkWEpqWlNCaVpXWnZjbVVnYVhRbmN5QndZWEp6WldRZ1lua2dkR2hsSUdKeWIzZHpaWEluY3lCSVZFMU1YRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QndZWEp6WlhJdUlGUm9aU0J0WVhKclpYSWdkSGx3WlNCcGN5QmlZWE5sWkNCdmJpQjNhR1YwYUdWeUlIUm9aU0JsZUhCeVpYTnphVzl1SUdseklHbHVJR0Z1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJoZEhSeWFXSjFkR1VzSUhSbGVIUXNJRzl5SUdOdmJXMWxiblFnY0c5emFYUnBiMjR1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNvZ1JtOXlJRzV2WkdVdGNHOXphWFJwYjI0Z1ltbHVaR2x1WjNNZ2QyVWdhVzV6WlhKMElHRWdZMjl0YldWdWRDQjNhWFJvSUhSb1pTQnRZWEpyWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQnpaVzUwYVc1bGJDQmhjeUJwZEhNZ2RHVjRkQ0JqYjI1MFpXNTBMQ0JzYVd0bElEd2hMUzE3ZTJ4cGRDMW5kV2xrZlgwdExUNHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ29nUm05eUlHRjBkSEpwWW5WMFpTQmlhVzVrYVc1bmN5QjNaU0JwYm5ObGNuUWdhblZ6ZENCMGFHVWdiV0Z5YTJWeUlITmxiblJwYm1Wc0lHWnZjaUIwYUdWY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQm1hWEp6ZENCaWFXNWthVzVuTENCemJ5QjBhR0YwSUhkbElITjFjSEJ2Y25RZ2RXNXhkVzkwWldRZ1lYUjBjbWxpZFhSbElHSnBibVJwYm1kekxseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lDQWdJRk4xWW5ObGNYVmxiblFnWW1sdVpHbHVaM01nWTJGdUlIVnpaU0JoSUdOdmJXMWxiblFnYldGeWEyVnlJR0psWTJGMWMyVWdiWFZzZEdrdFltbHVaR2x1WjF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lHRjBkSEpwWW5WMFpYTWdiWFZ6ZENCaVpTQnhkVzkwWldRdVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDb2dSbTl5SUdOdmJXMWxiblFnWW1sdVpHbHVaM01nZDJVZ2FXNXpaWEowSUdwMWMzUWdkR2hsSUcxaGNtdGxjaUJ6Wlc1MGFXNWxiQ0J6YnlCM1pTQmtiMjRuZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lHTnNiM05sSUhSb1pTQmpiMjF0Wlc1MExseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZSb1pTQm1iMnhzYjNkcGJtY2dZMjlrWlNCelkyRnVjeUIwYUdVZ2RHVnRjR3hoZEdVZ2MyOTFjbU5sTENCaWRYUWdhWE1nS201dmRDb2dZVzRnU0ZSTlRGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2NHRnljMlZ5TGlCWFpTQmtiMjRuZENCdVpXVmtJSFJ2SUhSeVlXTnJJSFJvWlNCMGNtVmxJSE4wY25WamRIVnlaU0J2WmlCMGFHVWdTRlJOVEN3Z2IyNXNlVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkMmhsZEdobGNpQmhJR0pwYm1ScGJtY2dhWE1nYVc1emFXUmxJR0VnWTI5dGJXVnVkQ3dnWVc1a0lHbG1JRzV2ZEN3Z2FXWWdhWFFnWVhCd1pXRnljeUIwYnlCaVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RHaGxJR1pwY25OMElHSnBibVJwYm1jZ2FXNGdZVzRnWVhSMGNtbGlkWFJsTGx4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1kyOXRiV1Z1ZEU5d1pXNGdQU0J6TG14aGMzUkpibVJsZUU5bUtDYzhJUzB0SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCWFpTZHlaU0JwYmlCamIyMXRaVzUwSUhCdmMybDBhVzl1SUdsbUlIZGxJR2hoZG1VZ1lTQmpiMjF0Wlc1MElHOXdaVzRnZDJsMGFDQnVieUJtYjJ4c2IzZHBibWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR052YlcxbGJuUWdZMnh2YzJVdUlFSmxZMkYxYzJVZ1BDMHRJR05oYmlCaGNIQmxZWElnYVc0Z1lXNGdZWFIwY21saWRYUmxJSFpoYkhWbElIUm9aWEpsSUdOaGJseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ltVWdabUZzYzJVZ2NHOXphWFJwZG1WekxseHVJQ0FnSUNBZ0lDQWdJQ0FnYVhORGIyMXRaVzUwUW1sdVpHbHVaeUE5SUNoamIyMXRaVzUwVDNCbGJpQStJQzB4SUh4OElHbHpRMjl0YldWdWRFSnBibVJwYm1jcElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjeTVwYm1SbGVFOW1LQ2N0TFQ0bkxDQmpiMjF0Wlc1MFQzQmxiaUFySURFcElEMDlQU0F0TVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVOb1pXTnJJSFJ2SUhObFpTQnBaaUIzWlNCb1lYWmxJR0Z1SUdGMGRISnBZblYwWlMxc2FXdGxJSE5sY1hWbGJtTmxJSEJ5WldObFpHbHVaeUIwYUdWY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdWNGNISmxjM05wYjI0dUlGUm9hWE1nWTJGdUlHMWhkR05vSUZ3aWJtRnRaVDEyWVd4MVpWd2lJR3hwYTJVZ2MzUnlkV04wZFhKbGN5QnBiaUIwWlhoMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyOXRiV1Z1ZEhNc0lHRnVaQ0JoZEhSeWFXSjFkR1VnZG1Gc2RXVnpMQ0J6YnlCMGFHVnlaU0JqWVc0Z1ltVWdabUZzYzJVdGNHOXphWFJwZG1WekxseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZWFIwY21saWRYUmxUV0YwWTJnZ1BTQnNZWE4wUVhSMGNtbGlkWFJsVG1GdFpWSmxaMlY0TG1WNFpXTW9jeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVhSMGNtbGlkWFJsVFdGMFkyZ2dQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCWFpTZHlaU0J2Ym14NUlHbHVJSFJvYVhNZ1luSmhibU5vSUdsbUlIZGxJR1J2YmlkMElHaGhkbVVnWVNCaGRIUnlhV0oxZEdVdGJHbHJaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhCeVpXTmxaR2x1WnlCelpYRjFaVzVqWlM0Z1JtOXlJR052YlcxbGJuUnpMQ0IwYUdseklHZDFZWEprY3lCaFoyRnBibk4wSUhWdWRYTjFZV3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCaGRIUnlhV0oxZEdVZ2RtRnNkV1Z6SUd4cGEyVWdQR1JwZGlCbWIyODlYQ0k4SVMwdEpIc25ZbUZ5SjMxY0lqNHVJRU5oYzJWeklHeHBhMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBOElTMHRJR1p2Ynowa2V5ZGlZWEluZlMwdFBpQmhjbVVnYUdGdVpHeGxaQ0JqYjNKeVpXTjBiSGtnYVc0Z2RHaGxJR0YwZEhKcFluVjBaU0JpY21GdVkyaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJpWld4dmR5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9kRzFzSUNzOUlITWdLeUFvYVhORGIyMXRaVzUwUW1sdVpHbHVaeUEvSUdOdmJXMWxiblJOWVhKclpYSWdPaUJ1YjJSbFRXRnlhMlZ5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFWnZjaUJoZEhSeWFXSjFkR1Z6SUhkbElIVnpaU0JxZFhOMElHRWdiV0Z5YTJWeUlITmxiblJwYm1Wc0xDQmhibVFnWVd4emJ5QmhjSEJsYm1RZ1lWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ1JzYVhRa0lITjFabVpwZUNCMGJ5QjBhR1VnYm1GdFpTQjBieUJ2Y0hRdGIzVjBJRzltSUdGMGRISnBZblYwWlMxemNHVmphV1pwWXlCd1lYSnphVzVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RHaGhkQ0JKUlNCaGJtUWdSV1JuWlNCa2J5Qm1iM0lnYzNSNWJHVWdZVzVrSUdObGNuUmhhVzRnVTFaSElHRjBkSEpwWW5WMFpYTXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhSFJ0YkNBclBTQnpMbk4xWW5OMGNpZ3dMQ0JoZEhSeWFXSjFkR1ZOWVhSamFDNXBibVJsZUNrZ0t5QmhkSFJ5YVdKMWRHVk5ZWFJqYUZzeFhTQXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGMGRISnBZblYwWlUxaGRHTm9XekpkSUNzZ1ltOTFibVJCZEhSeWFXSjFkR1ZUZFdabWFYZ2dLeUJoZEhSeWFXSjFkR1ZOWVhSamFGc3pYU0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbXRsY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCb2RHMXNJQ3M5SUhSb2FYTXVjM1J5YVc1bmMxdHNYVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2gwYld3N1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZEZSbGJYQnNZWFJsUld4bGJXVnVkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEdWdGNHeGhkR1VnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2QwWlcxd2JHRjBaU2NwTzF4dUlDQWdJQ0FnSUNCMFpXMXdiR0YwWlM1cGJtNWxja2hVVFV3Z1BTQjBhR2x6TG1kbGRFaFVUVXdvS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSbGJYQnNZWFJsTzF4dUlDQWdJSDFjYm4xY2JpOHFLbHh1SUNvZ1FTQlVaVzF3YkdGMFpWSmxjM1ZzZENCbWIzSWdVMVpISUdaeVlXZHRaVzUwY3k1Y2JpQXFYRzRnS2lCVWFHbHpJR05zWVhOeklIZHlZWEJ6SUVoVVRVd2dhVzRnWVc0Z1lEeHpkbWMrWUNCMFlXY2dhVzRnYjNKa1pYSWdkRzhnY0dGeWMyVWdhWFJ6SUdOdmJuUmxiblJ6SUdsdUlIUm9aVnh1SUNvZ1UxWkhJRzVoYldWemNHRmpaU3dnZEdobGJpQnRiMlJwWm1sbGN5QjBhR1VnZEdWdGNHeGhkR1VnZEc4Z2NtVnRiM1psSUhSb1pTQmdQSE4yWno1Z0lIUmhaeUJ6YnlCMGFHRjBYRzRnS2lCamJHOXVaWE1nYjI1c2VTQmpiMjUwWVdsdVpYSWdkR2hsSUc5eWFXZHBibUZzSUdaeVlXZHRaVzUwTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1UxWkhWR1Z0Y0d4aGRHVlNaWE4xYkhRZ1pYaDBaVzVrY3lCVVpXMXdiR0YwWlZKbGMzVnNkQ0I3WEc0Z0lDQWdaMlYwU0ZSTlRDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0E4YzNablBpUjdjM1Z3WlhJdVoyVjBTRlJOVENncGZUd3ZjM1puUG1BN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZEZSbGJYQnNZWFJsUld4bGJXVnVkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEdWdGNHeGhkR1VnUFNCemRYQmxjaTVuWlhSVVpXMXdiR0YwWlVWc1pXMWxiblFvS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dWRHVnVkQ0E5SUhSbGJYQnNZWFJsTG1OdmJuUmxiblE3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE4yWjBWc1pXMWxiblFnUFNCamIyNTBaVzUwTG1acGNuTjBRMmhwYkdRN1hHNGdJQ0FnSUNBZ0lHTnZiblJsYm5RdWNtVnRiM1psUTJocGJHUW9jM1puUld4bGJXVnVkQ2s3WEc0Z0lDQWdJQ0FnSUhKbGNHRnlaVzUwVG05a1pYTW9ZMjl1ZEdWdWRDd2djM1puUld4bGJXVnVkQzVtYVhKemRFTm9hV3hrS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSbGJYQnNZWFJsTzF4dUlDQWdJSDFjYm4xY2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QWFJsYlhCc1lYUmxMWEpsYzNWc2RDNXFjeTV0WVhBaUxDSXZLaXBjYmlBcUlFQnNhV05sYm5ObFhHNGdLaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGNnVkdobElGQnZiSGx0WlhJZ1VISnZhbVZqZENCQmRYUm9iM0p6TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ29nVkdocGN5QmpiMlJsSUcxaGVTQnZibXg1SUdKbElIVnpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDQnpkSGxzWlNCc2FXTmxibk5sSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlRFbERSVTVUUlM1MGVIUmNiaUFxSUZSb1pTQmpiMjF3YkdWMFpTQnpaWFFnYjJZZ1lYVjBhRzl5Y3lCdFlYa2dZbVVnWm05MWJtUWdZWFJjYmlBcUlHaDBkSEE2THk5d2IyeDViV1Z5TG1kcGRHaDFZaTVwYnk5QlZWUklUMUpUTG5SNGRGeHVJQ29nVkdobElHTnZiWEJzWlhSbElITmxkQ0J2WmlCamIyNTBjbWxpZFhSdmNuTWdiV0Y1SUdKbElHWnZkVzVrSUdGMFhHNGdLaUJvZEhSd09pOHZjRzlzZVcxbGNpNW5hWFJvZFdJdWFXOHZRMDlPVkZKSlFsVlVUMUpUTG5SNGRGeHVJQ29nUTI5a1pTQmthWE4wY21saWRYUmxaQ0JpZVNCSGIyOW5iR1VnWVhNZ2NHRnlkQ0J2WmlCMGFHVWdjRzlzZVcxbGNpQndjbTlxWldOMElHbHpJR0ZzYzI5Y2JpQXFJSE4xWW1wbFkzUWdkRzhnWVc0Z1lXUmthWFJwYjI1aGJDQkpVQ0J5YVdkb2RITWdaM0poYm5RZ1ptOTFibVFnWVhSY2JpQXFJR2gwZEhBNkx5OXdiMng1YldWeUxtZHBkR2gxWWk1cGJ5OVFRVlJGVGxSVExuUjRkRnh1SUNvdlhHNHZLaXBjYmlBcUlFQnRiMlIxYkdVZ2JHbDBMV2gwYld4Y2JpQXFMMXh1YVcxd2IzSjBJSHNnYVhORWFYSmxZM1JwZG1VZ2ZTQm1jbTl0SUNjdUwyUnBjbVZqZEdsMlpTNXFjeWM3WEc1cGJYQnZjblFnZXlCeVpXMXZkbVZPYjJSbGN5QjlJR1p5YjIwZ0p5NHZaRzl0TG1wekp6dGNibWx0Y0c5eWRDQjdJRzV2UTJoaGJtZGxMQ0J1YjNSb2FXNW5JSDBnWm5KdmJTQW5MaTl3WVhKMExtcHpKenRjYm1sdGNHOXlkQ0I3SUZSbGJYQnNZWFJsU1c1emRHRnVZMlVnZlNCbWNtOXRJQ2N1TDNSbGJYQnNZWFJsTFdsdWMzUmhibU5sTG1wekp6dGNibWx0Y0c5eWRDQjdJRlJsYlhCc1lYUmxVbVZ6ZFd4MElIMGdabkp2YlNBbkxpOTBaVzF3YkdGMFpTMXlaWE4xYkhRdWFuTW5PMXh1YVcxd2IzSjBJSHNnWTNKbFlYUmxUV0Z5YTJWeUlIMGdabkp2YlNBbkxpOTBaVzF3YkdGMFpTNXFjeWM3WEc1bGVIQnZjblFnWTI5dWMzUWdhWE5RY21sdGFYUnBkbVVnUFNBb2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNCeVpYUjFjbTRnS0haaGJIVmxJRDA5UFNCdWRXeHNJSHg4WEc0Z0lDQWdJQ0FnSUNFb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmIySnFaV04wSnlCOGZDQjBlWEJsYjJZZ2RtRnNkV1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BLVHRjYm4wN1hHNWxlSEJ2Y25RZ1kyOXVjM1FnYVhOSmRHVnlZV0pzWlNBOUlDaDJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lISmxkSFZ5YmlCQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkhWbEtTQjhmRnh1SUNBZ0lDQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxXVjRjR3hwWTJsMExXRnVlVnh1SUNBZ0lDQWdJQ0FoSVNoMllXeDFaU0FtSmlCMllXeDFaVnRUZVcxaWIyd3VhWFJsY21GMGIzSmRLVHRjYm4wN1hHNHZLaXBjYmlBcUlGZHlhWFJsY3lCaGRIUnlhV0oxZEdVZ2RtRnNkV1Z6SUhSdklIUm9aU0JFVDAwZ1ptOXlJR0VnWjNKdmRYQWdiMllnUVhSMGNtbGlkWFJsVUdGeWRITWdZbTkxYm1RZ2RHOGdZVnh1SUNvZ2MybHVaMnhsSUdGMGRISnBZblYwWlM0Z1ZHaGxJSFpoYkhWbElHbHpJRzl1YkhrZ2MyVjBJRzl1WTJVZ1pYWmxiaUJwWmlCMGFHVnlaU0JoY21VZ2JYVnNkR2x3YkdVZ2NHRnlkSE5jYmlBcUlHWnZjaUJoYmlCaGRIUnlhV0oxZEdVdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkJkSFJ5YVdKMWRHVkRiMjF0YVhSMFpYSWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR1ZzWlcxbGJuUXNJRzVoYldVc0lITjBjbWx1WjNNcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a2FYSjBlU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZENBOUlHVnNaVzFsYm5RN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ym1GdFpTQTlJRzVoYldVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeWFXNW5jeUE5SUhOMGNtbHVaM003WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0Z5ZEhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCemRISnBibWR6TG14bGJtZDBhQ0F0SURFN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1lYSjBjMXRwWFNBOUlIUm9hWE11WDJOeVpXRjBaVkJoY25Rb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRjbVZoZEdWeklHRWdjMmx1WjJ4bElIQmhjblF1SUU5MlpYSnlhV1JsSUhSb2FYTWdkRzhnWTNKbFlYUmxJR0VnWkdsbVptVnliblFnZEhsd1pTQnZaaUJ3WVhKMExseHVJQ0FnSUNBcUwxeHVJQ0FnSUY5amNtVmhkR1ZRWVhKMEtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVGMGRISnBZblYwWlZCaGNuUW9kR2hwY3lrN1hHNGdJQ0FnZlZ4dUlDQWdJRjluWlhSV1lXeDFaU2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSeWFXNW5jeUE5SUhSb2FYTXVjM1J5YVc1bmN6dGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JDQTlJSE4wY21sdVozTXViR1Z1WjNSb0lDMGdNVHRjYmlBZ0lDQWdJQ0FnYkdWMElIUmxlSFFnUFNBbkp6dGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFFnS3owZ2MzUnlhVzVuYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEJoY25RZ1BTQjBhR2x6TG5CaGNuUnpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCaGNuUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhZZ1BTQndZWEowTG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGMxQnlhVzFwZEdsMlpTaDJLU0I4ZkNBaGFYTkpkR1Z5WVdKc1pTaDJLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaWGgwSUNzOUlIUjVjR1Z2WmlCMklEMDlQU0FuYzNSeWFXNW5KeUEvSUhZZ09pQlRkSEpwYm1jb2RpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUhRZ2IyWWdkaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGRDQXJQU0IwZVhCbGIyWWdkQ0E5UFQwZ0ozTjBjbWx1WnljZ1B5QjBJRG9nVTNSeWFXNW5LSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJsZUhRZ0t6MGdjM1J5YVc1bmMxdHNYVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJsZUhRN1hHNGdJQ0FnZlZ4dUlDQWdJR052YlcxcGRDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WkdseWRIa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdseWRIa2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaV3hsYldWdWRDNXpaWFJCZEhSeWFXSjFkR1VvZEdocGN5NXVZVzFsTENCMGFHbHpMbDluWlhSV1lXeDFaU2dwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNiaThxS2x4dUlDb2dRU0JRWVhKMElIUm9ZWFFnWTI5dWRISnZiSE1nWVd4c0lHOXlJSEJoY25RZ2IyWWdZVzRnWVhSMGNtbGlkWFJsSUhaaGJIVmxMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nUVhSMGNtbGlkWFJsVUdGeWRDQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9ZMjl0YldsMGRHVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbUZzZFdVZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXRiV2wwZEdWeUlEMGdZMjl0YldsMGRHVnlPMXh1SUNBZ0lIMWNiaUFnSUNCelpYUldZV3gxWlNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ0lUMDlJRzV2UTJoaGJtZGxJQ1ltSUNnaGFYTlFjbWx0YVhScGRtVW9kbUZzZFdVcElIeDhJSFpoYkhWbElDRTlQU0IwYUdsekxuWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJZV3gxWlNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2RHaGxJSFpoYkhWbElHbHpJR0VnYm05MElHRWdaR2x5WldOMGFYWmxMQ0JrYVhKMGVTQjBhR1VnWTI5dGJXbDBkR1Z5SUhOdklIUm9ZWFFnYVhRbmJHeGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHTmhiR3dnYzJWMFFYUjBjbWxpZFhSbExpQkpaaUIwYUdVZ2RtRnNkV1VnYVhNZ1lTQmthWEpsWTNScGRtVXNJR2wwSjJ4c0lHUnBjblI1SUhSb1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyOXRiV2wwZEdWeUlHbG1JR2wwSUdOaGJHeHpJSE5sZEZaaGJIVmxLQ2t1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdselJHbHlaV04wYVhabEtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dGJXbDBkR1Z5TG1ScGNuUjVJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JqYjIxdGFYUW9LU0I3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2hwYzBScGNtVmpkR2wyWlNoMGFHbHpMblpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkdseVpXTjBhWFpsSUQwZ2RHaHBjeTUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbUZzZFdVZ1BTQnViME5vWVc1blpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdScGNtVmpkR2wyWlNoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1MllXeDFaU0E5UFQwZ2JtOURhR0Z1WjJVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbU52YlcxcGRIUmxjaTVqYjIxdGFYUW9LVHRjYmlBZ0lDQjlYRzU5WEc0dktpcGNiaUFxSUVFZ1VHRnlkQ0IwYUdGMElHTnZiblJ5YjJ4eklHRWdiRzlqWVhScGIyNGdkMmwwYUdsdUlHRWdUbTlrWlNCMGNtVmxMaUJNYVd0bElHRWdVbUZ1WjJVc0lFNXZaR1ZRWVhKMFhHNGdLaUJvWVhNZ2MzUmhjblFnWVc1a0lHVnVaQ0JzYjJOaGRHbHZibk1nWVc1a0lHTmhiaUJ6WlhRZ1lXNWtJSFZ3WkdGMFpTQjBhR1VnVG05a1pYTWdZbVYwZDJWbGJpQjBhRzl6WlZ4dUlDb2diRzlqWVhScGIyNXpMbHh1SUNwY2JpQXFJRTV2WkdWUVlYSjBjeUJ6ZFhCd2IzSjBJSE5sZG1WeVlXd2dkbUZzZFdVZ2RIbHdaWE02SUhCeWFXMXBkR2wyWlhNc0lFNXZaR1Z6TENCVVpXMXdiR0YwWlZKbGMzVnNkSE1zWEc0Z0tpQmhjeUIzWld4c0lHRnpJR0Z5Y21GNWN5QmhibVFnYVhSbGNtRmliR1Z6SUc5bUlIUm9iM05sSUhSNWNHVnpMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVG05a1pWQmhjblFnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYM0JsYm1ScGJtZFdZV3gxWlNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3p0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVhCd1pXNWtjeUIwYUdseklIQmhjblFnYVc1MGJ5QmhJR052Ym5SaGFXNWxjaTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRlJvYVhNZ2NHRnlkQ0J0ZFhOMElHSmxJR1Z0Y0hSNUxDQmhjeUJwZEhNZ1kyOXVkR1Z1ZEhNZ1lYSmxJRzV2ZENCaGRYUnZiV0YwYVdOaGJHeDVJRzF2ZG1Wa0xseHVJQ0FnSUNBcUwxeHVJQ0FnSUdGd2NHVnVaRWx1ZEc4b1kyOXVkR0ZwYm1WeUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUmhjblJPYjJSbElEMGdZMjl1ZEdGcGJtVnlMbUZ3Y0dWdVpFTm9hV3hrS0dOeVpXRjBaVTFoY210bGNpZ3BLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxibVJPYjJSbElEMGdZMjl1ZEdGcGJtVnlMbUZ3Y0dWdVpFTm9hV3hrS0dOeVpXRjBaVTFoY210bGNpZ3BLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzV6WlhKMGN5QjBhR2x6SUhCaGNuUWdZV1owWlhJZ2RHaGxJR0J5WldaZ0lHNXZaR1VnS0dKbGRIZGxaVzRnWUhKbFptQWdZVzVrSUdCeVpXWmdKM01nYm1WNGRGeHVJQ0FnSUNBcUlITnBZbXhwYm1jcExpQkNiM1JvSUdCeVpXWmdJR0Z1WkNCcGRITWdibVY0ZENCemFXSnNhVzVuSUcxMWMzUWdZbVVnYzNSaGRHbGpMQ0IxYm1Ob1lXNW5hVzVuSUc1dlpHVnpYRzRnSUNBZ0lDb2djM1ZqYUNCaGN5QjBhRzl6WlNCMGFHRjBJR0Z3Y0dWaGNpQnBiaUJoSUd4cGRHVnlZV3dnYzJWamRHbHZiaUJ2WmlCaElIUmxiWEJzWVhSbExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1ZHaHBjeUJ3WVhKMElHMTFjM1FnWW1VZ1pXMXdkSGtzSUdGeklHbDBjeUJqYjI1MFpXNTBjeUJoY21VZ2JtOTBJR0YxZEc5dFlYUnBZMkZzYkhrZ2JXOTJaV1F1WEc0Z0lDQWdJQ292WEc0Z0lDQWdhVzV6WlhKMFFXWjBaWEpPYjJSbEtISmxaaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhKMFRtOWtaU0E5SUhKbFpqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJtUk9iMlJsSUQwZ2NtVm1MbTVsZUhSVGFXSnNhVzVuTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCY0hCbGJtUnpJSFJvYVhNZ2NHRnlkQ0JwYm5SdklHRWdjR0Z5Wlc1MElIQmhjblF1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJVYUdseklIQmhjblFnYlhWemRDQmlaU0JsYlhCMGVTd2dZWE1nYVhSeklHTnZiblJsYm5SeklHRnlaU0J1YjNRZ1lYVjBiMjFoZEdsallXeHNlU0J0YjNabFpDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCaGNIQmxibVJKYm5SdlVHRnlkQ2h3WVhKMEtTQjdYRzRnSUNBZ0lDQWdJSEJoY25RdVgxOXBibk5sY25Rb2RHaHBjeTV6ZEdGeWRFNXZaR1VnUFNCamNtVmhkR1ZOWVhKclpYSW9LU2s3WEc0Z0lDQWdJQ0FnSUhCaGNuUXVYMTlwYm5ObGNuUW9kR2hwY3k1bGJtUk9iMlJsSUQwZ1kzSmxZWFJsVFdGeWEyVnlLQ2twTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJKYm5ObGNuUnpJSFJvYVhNZ2NHRnlkQ0JoWm5SbGNpQjBhR1VnWUhKbFptQWdjR0Z5ZEM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUZSb2FYTWdjR0Z5ZENCdGRYTjBJR0psSUdWdGNIUjVMQ0JoY3lCcGRITWdZMjl1ZEdWdWRITWdZWEpsSUc1dmRDQmhkWFJ2YldGMGFXTmhiR3g1SUcxdmRtVmtMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHbHVjMlZ5ZEVGbWRHVnlVR0Z5ZENoeVpXWXBJSHRjYmlBZ0lDQWdJQ0FnY21WbUxsOWZhVzV6WlhKMEtIUm9hWE11YzNSaGNuUk9iMlJsSUQwZ1kzSmxZWFJsVFdGeWEyVnlLQ2twTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ1WkU1dlpHVWdQU0J5WldZdVpXNWtUbTlrWlR0Y2JpQWdJQ0FnSUNBZ2NtVm1MbVZ1WkU1dlpHVWdQU0IwYUdsekxuTjBZWEowVG05a1pUdGNiaUFnSUNCOVhHNGdJQ0FnYzJWMFZtRnNkV1VvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYM0JsYm1ScGJtZFdZV3gxWlNBOUlIWmhiSFZsTzF4dUlDQWdJSDFjYmlBZ0lDQmpiMjF0YVhRb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk4wWVhKMFRtOWtaUzV3WVhKbGJuUk9iMlJsSUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLR2x6UkdseVpXTjBhWFpsS0hSb2FYTXVYMTl3Wlc1a2FXNW5WbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrYVhKbFkzUnBkbVVnUFNCMGFHbHpMbDlmY0dWdVpHbHVaMVpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZYM0JsYm1ScGJtZFdZV3gxWlNBOUlHNXZRMmhoYm1kbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdseVpXTjBhWFpsS0hSb2FYTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFpoYkhWbElEMGdkR2hwY3k1ZlgzQmxibVJwYm1kV1lXeDFaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsSUQwOVBTQnViME5vWVc1blpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzFCeWFXMXBkR2wyWlNoMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMllXeDFaU0FoUFQwZ2RHaHBjeTUyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgxOWpiMjF0YVhSVVpYaDBLSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDJZV3gxWlNCcGJuTjBZVzVqWlc5bUlGUmxiWEJzWVhSbFVtVnpkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWZZMjl0YldsMFZHVnRjR3hoZEdWU1pYTjFiSFFvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0haaGJIVmxJR2x1YzNSaGJtTmxiMllnVG05a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWDJOdmJXMXBkRTV2WkdVb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tHbHpTWFJsY21GaWJHVW9kbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlmWTI5dGJXbDBTWFJsY21GaWJHVW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSFpoYkhWbElEMDlQU0J1YjNSb2FXNW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5aaGJIVmxJRDBnYm05MGFHbHVaenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTJ4bFlYSW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVpoYkd4aVlXTnJMQ0IzYVd4c0lISmxibVJsY2lCMGFHVWdjM1J5YVc1bklISmxjSEpsYzJWdWRHRjBhVzl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5ZlkyOXRiV2wwVkdWNGRDaDJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnWDE5cGJuTmxjblFvYm05a1pTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnVaRTV2WkdVdWNHRnlaVzUwVG05a1pTNXBibk5sY25SQ1pXWnZjbVVvYm05a1pTd2dkR2hwY3k1bGJtUk9iMlJsS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdYMTlqYjIxdGFYUk9iMlJsS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5aaGJIVmxJRDA5UFNCMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyeGxZWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDJsdWMyVnlkQ2gyWVd4MVpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtRnNkV1VnUFNCMllXeDFaVHRjYmlBZ0lDQjlYRzRnSUNBZ1gxOWpiMjF0YVhSVVpYaDBLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHNXZaR1VnUFNCMGFHbHpMbk4wWVhKMFRtOWtaUzV1WlhoMFUybGliR2x1Wnp0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMllXeDFaU0E5UFNCdWRXeHNJRDhnSnljZ09pQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0x5OGdTV1lnWUhaaGJIVmxZQ0JwYzI0bmRDQmhiSEpsWVdSNUlHRWdjM1J5YVc1bkxDQjNaU0JsZUhCc2FXTnBkR3g1SUdOdmJuWmxjblFnYVhRZ2FHVnlaU0JwYmlCallYTmxYRzRnSUNBZ0lDQWdJQzh2SUdsMElHTmhiaWQwSUdKbElHbHRjR3hwWTJsMGJIa2dZMjl1ZG1WeWRHVmtJQzBnYVM1bExpQnBkQ2R6SUdFZ2MzbHRZbTlzTGx4dUlDQWdJQ0FnSUNCamIyNXpkQ0IyWVd4MVpVRnpVM1J5YVc1bklEMGdkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5jM1J5YVc1bkp5QS9JSFpoYkhWbElEb2dVM1J5YVc1bktIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzV2WkdVZ1BUMDlJSFJvYVhNdVpXNWtUbTlrWlM1d2NtVjJhVzkxYzFOcFlteHBibWNnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJRzV2WkdVdWJtOWtaVlI1Y0dVZ1BUMDlJRE1nTHlvZ1RtOWtaUzVVUlZoVVgwNVBSRVVnS2k4cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFbG1JSGRsSUc5dWJIa2dhR0YyWlNCaElITnBibWRzWlNCMFpYaDBJRzV2WkdVZ1ltVjBkMlZsYmlCMGFHVWdiV0Z5YTJWeWN5d2dkMlVnWTJGdUlHcDFjM1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5sZENCcGRITWdkbUZzZFdVc0lISmhkR2hsY2lCMGFHRnVJSEpsY0d4aFkybHVaeUJwZEM1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZSUFJFOG9hblZ6ZEdsdVptRm5ibUZ1YVNrNklFTmhiaUIzWlNCcWRYTjBJR05vWldOcklHbG1JSFJvYVhNdWRtRnNkV1VnYVhNZ2NISnBiV2wwYVhabFAxeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNWtZWFJoSUQwZ2RtRnNkV1ZCYzFOMGNtbHVaenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDE5amIyMXRhWFJPYjJSbEtHUnZZM1Z0Wlc1MExtTnlaV0YwWlZSbGVIUk9iMlJsS0haaGJIVmxRWE5UZEhKcGJtY3BLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMblpoYkhWbElEMGdkbUZzZFdVN1hHNGdJQ0FnZlZ4dUlDQWdJRjlmWTI5dGJXbDBWR1Z0Y0d4aGRHVlNaWE4xYkhRb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEdWdGNHeGhkR1VnUFNCMGFHbHpMbTl3ZEdsdmJuTXVkR1Z0Y0d4aGRHVkdZV04wYjNKNUtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRtRnNkV1VnYVc1emRHRnVZMlZ2WmlCVVpXMXdiR0YwWlVsdWMzUmhibU5sSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuWmhiSFZsTG5SbGJYQnNZWFJsSUQwOVBTQjBaVzF3YkdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4MVpTNTFjR1JoZEdVb2RtRnNkV1V1ZG1Gc2RXVnpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRTFoYTJVZ2MzVnlaU0IzWlNCd2NtOXdZV2RoZEdVZ2RHaGxJSFJsYlhCc1lYUmxJSEJ5YjJObGMzTnZjaUJtY205dElIUm9aU0JVWlcxd2JHRjBaVkpsYzNWc2RGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyOGdkR2hoZENCM1pTQjFjMlVnYVhSeklITjViblJoZUNCbGVIUmxibk5wYjI0c0lHVjBZeTRnVkdobElIUmxiWEJzWVhSbElHWmhZM1J2Y25rZ1kyOXRaWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1p5YjIwZ2RHaGxJSEpsYm1SbGNpQm1kVzVqZEdsdmJpQnZjSFJwYjI1eklITnZJSFJvWVhRZ2FYUWdZMkZ1SUdOdmJuUnliMndnZEdWdGNHeGhkR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR05oWTJocGJtY2dZVzVrSUhCeVpYQnliMk5sYzNOcGJtY3VYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JwYm5OMFlXNWpaU0E5SUc1bGR5QlVaVzF3YkdGMFpVbHVjM1JoYm1ObEtIUmxiWEJzWVhSbExDQjJZV3gxWlM1d2NtOWpaWE56YjNJc0lIUm9hWE11YjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbWNtRm5iV1Z1ZENBOUlHbHVjM1JoYm1ObExsOWpiRzl1WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1emRHRnVZMlV1ZFhCa1lYUmxLSFpoYkhWbExuWmhiSFZsY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWZZMjl0YldsMFRtOWtaU2htY21GbmJXVnVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5aaGJIVmxJRDBnYVc1emRHRnVZMlU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdYMTlqYjIxdGFYUkpkR1Z5WVdKc1pTaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJHYjNJZ1lXNGdTWFJsY21GaWJHVXNJSGRsSUdOeVpXRjBaU0JoSUc1bGR5Qkpibk4wWVc1alpWQmhjblFnY0dWeUlHbDBaVzBzSUhSb1pXNGdjMlYwSUdsMGMxeHVJQ0FnSUNBZ0lDQXZMeUIyWVd4MVpTQjBieUIwYUdVZ2FYUmxiUzRnVkdocGN5QnBjeUJoSUd4cGRIUnNaU0JpYVhRZ2IyWWdiM1psY21obFlXUWdabTl5SUdWMlpYSjVJR2wwWlcwZ2FXNWNiaUFnSUNBZ0lDQWdMeThnWVc0Z1NYUmxjbUZpYkdVc0lHSjFkQ0JwZENCc1pYUnpJSFZ6SUhKbFkzVnljMlVnWldGemFXeDVJR0Z1WkNCbFptWnBZMmxsYm5Sc2VTQjFjR1JoZEdVZ1FYSnlZWGx6WEc0Z0lDQWdJQ0FnSUM4dklHOW1JRlJsYlhCc1lYUmxVbVZ6ZFd4MGN5QjBhR0YwSUhkcGJHd2dZbVVnWTI5dGJXOXViSGtnY21WMGRYSnVaV1FnWm5KdmJTQmxlSEJ5WlhOemFXOXVjeUJzYVd0bE9seHVJQ0FnSUNBZ0lDQXZMeUJoY25KaGVTNXRZWEFvS0drcElEMCtJR2gwYld4Z0pIdHBmV0FwTENCaWVTQnlaWFZ6YVc1bklHVjRhWE4wYVc1bklGUmxiWEJzWVhSbFNXNXpkR0Z1WTJWekxseHVJQ0FnSUNBZ0lDQXZMeUJKWmlCZmRtRnNkV1VnYVhNZ1lXNGdZWEp5WVhrc0lIUm9aVzRnZEdobElIQnlaWFpwYjNWeklISmxibVJsY2lCM1lYTWdiMllnWVc1Y2JpQWdJQ0FnSUNBZ0x5OGdhWFJsY21GaWJHVWdZVzVrSUY5MllXeDFaU0IzYVd4c0lHTnZiblJoYVc0Z2RHaGxJRTV2WkdWUVlYSjBjeUJtY205dElIUm9aU0J3Y21WMmFXOTFjMXh1SUNBZ0lDQWdJQ0F2THlCeVpXNWtaWEl1SUVsbUlGOTJZV3gxWlNCcGN5QnViM1FnWVc0Z1lYSnlZWGtzSUdOc1pXRnlJSFJvYVhNZ2NHRnlkQ0JoYm1RZ2JXRnJaU0JoSUc1bGQxeHVJQ0FnSUNBZ0lDQXZMeUJoY25KaGVTQm1iM0lnVG05a1pWQmhjblJ6TGx4dUlDQWdJQ0FnSUNCcFppQW9JVUZ5Y21GNUxtbHpRWEp5WVhrb2RHaHBjeTUyWVd4MVpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2RXVWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyeGxZWElvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJNWlhSeklIVnpJR3RsWlhBZ2RISmhZMnNnYjJZZ2FHOTNJRzFoYm5rZ2FYUmxiWE1nZDJVZ2MzUmhiWEJsWkNCemJ5QjNaU0JqWVc0Z1kyeGxZWElnYkdWbWRHOTJaWEpjYmlBZ0lDQWdJQ0FnTHk4Z2FYUmxiWE1nWm5KdmJTQmhJSEJ5WlhacGIzVnpJSEpsYm1SbGNseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCcGRHVnRVR0Z5ZEhNZ1BTQjBhR2x6TG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2NHRnlkRWx1WkdWNElEMGdNRHRjYmlBZ0lDQWdJQ0FnYkdWMElHbDBaVzFRWVhKME8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJR2wwWlcwZ2IyWWdkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGUnllU0IwYnlCeVpYVnpaU0JoYmlCbGVHbHpkR2x1WnlCd1lYSjBYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRVR0Z5ZENBOUlHbDBaVzFRWVhKMGMxdHdZWEowU1c1a1pYaGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV1lnYm04Z1pYaHBjM1JwYm1jZ2NHRnlkQ3dnWTNKbFlYUmxJR0VnYm1WM0lHOXVaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2wwWlcxUVlYSjBJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0VUdGeWRDQTlJRzVsZHlCT2IyUmxVR0Z5ZENoMGFHbHpMbTl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcxUVlYSjBjeTV3ZFhOb0tHbDBaVzFRWVhKMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dGeWRFbHVaR1Y0SUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzFRWVhKMExtRndjR1Z1WkVsdWRHOVFZWEowS0hSb2FYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJWQmhjblF1YVc1elpYSjBRV1owWlhKUVlYSjBLR2wwWlcxUVlYSjBjMXR3WVhKMFNXNWtaWGdnTFNBeFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJWQmhjblF1YzJWMFZtRnNkV1VvYVhSbGJTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRVR0Z5ZEM1amIyMXRhWFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoY25SSmJtUmxlQ3NyTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h3WVhKMFNXNWtaWGdnUENCcGRHVnRVR0Z5ZEhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWNuVnVZMkYwWlNCMGFHVWdjR0Z5ZEhNZ1lYSnlZWGtnYzI4Z1gzWmhiSFZsSUhKbFpteGxZM1J6SUhSb1pTQmpkWEp5Wlc1MElITjBZWFJsWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0VUdGeWRITXViR1Z1WjNSb0lEMGdjR0Z5ZEVsdVpHVjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYkdWaGNpaHBkR1Z0VUdGeWRDQW1KaUJwZEdWdFVHRnlkQzVsYm1ST2IyUmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQmpiR1ZoY2loemRHRnlkRTV2WkdVZ1BTQjBhR2x6TG5OMFlYSjBUbTlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaVzF2ZG1WT2IyUmxjeWgwYUdsekxuTjBZWEowVG05a1pTNXdZWEpsYm5ST2IyUmxMQ0J6ZEdGeWRFNXZaR1V1Ym1WNGRGTnBZbXhwYm1jc0lIUm9hWE11Wlc1a1RtOWtaU2s3WEc0Z0lDQWdmVnh1ZlZ4dUx5b3FYRzRnS2lCSmJYQnNaVzFsYm5SeklHRWdZbTl2YkdWaGJpQmhkSFJ5YVdKMWRHVXNJSEp2ZFdkb2JIa2dZWE1nWkdWbWFXNWxaQ0JwYmlCMGFHVWdTRlJOVEZ4dUlDb2djM0JsWTJsbWFXTmhkR2x2Ymk1Y2JpQXFYRzRnS2lCSlppQjBhR1VnZG1Gc2RXVWdhWE1nZEhKMWRHaDVMQ0IwYUdWdUlIUm9aU0JoZEhSeWFXSjFkR1VnYVhNZ2NISmxjMlZ1ZENCM2FYUm9JR0VnZG1Gc2RXVWdiMlpjYmlBcUlDY25MaUJKWmlCMGFHVWdkbUZzZFdVZ2FYTWdabUZzYzJWNUxDQjBhR1VnWVhSMGNtbGlkWFJsSUdseklISmxiVzkyWldRdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkNiMjlzWldGdVFYUjBjbWxpZFhSbFVHRnlkQ0I3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWld4bGJXVnVkQ3dnYm1GdFpTd2djM1J5YVc1bmN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuWmhiSFZsSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmNHVnVaR2x1WjFaaGJIVmxJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNCcFppQW9jM1J5YVc1bmN5NXNaVzVuZEdnZ0lUMDlJRElnZkh3Z2MzUnlhVzVuYzFzd1hTQWhQVDBnSnljZ2ZId2djM1J5YVc1bmMxc3hYU0FoUFQwZ0p5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblFtOXZiR1ZoYmlCaGRIUnlhV0oxZEdWeklHTmhiaUJ2Ym14NUlHTnZiblJoYVc0Z1lTQnphVzVuYkdVZ1pYaHdjbVZ6YzJsdmJpY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaV3hsYldWdWRDQTlJR1ZzWlcxbGJuUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtRnRaU0E5SUc1aGJXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlhVzVuY3lBOUlITjBjbWx1WjNNN1hHNGdJQ0FnZlZ4dUlDQWdJSE5sZEZaaGJIVmxLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgxOXdaVzVrYVc1blZtRnNkV1VnUFNCMllXeDFaVHRjYmlBZ0lDQjlYRzRnSUNBZ1kyOXRiV2wwS0NrZ2UxeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb2FYTkVhWEpsWTNScGRtVW9kR2hwY3k1ZlgzQmxibVJwYm1kV1lXeDFaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHUnBjbVZqZEdsMlpTQTlJSFJvYVhNdVgxOXdaVzVrYVc1blZtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmNHVnVaR2x1WjFaaGJIVmxJRDBnYm05RGFHRnVaMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWEpsWTNScGRtVW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMTl3Wlc1a2FXNW5WbUZzZFdVZ1BUMDlJRzV2UTJoaGJtZGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNkV1VnUFNBaElYUm9hWE11WDE5d1pXNWthVzVuVm1Gc2RXVTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMblpoYkhWbElDRTlQU0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwTG5ObGRFRjBkSEpwWW5WMFpTaDBhR2x6TG01aGJXVXNJQ2NuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaV3hsYldWdWRDNXlaVzF2ZG1WQmRIUnlhV0oxZEdVb2RHaHBjeTV1WVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtRnNkV1VnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDlmY0dWdVpHbHVaMVpoYkhWbElEMGdibTlEYUdGdVoyVTdYRzRnSUNBZ2ZWeHVmVnh1THlvcVhHNGdLaUJUWlhSeklHRjBkSEpwWW5WMFpTQjJZV3gxWlhNZ1ptOXlJRkJ5YjNCbGNuUjVVR0Z5ZEhNc0lITnZJSFJvWVhRZ2RHaGxJSFpoYkhWbElHbHpJRzl1YkhrZ2MyVjBJRzl1WTJWY2JpQXFJR1YyWlc0Z2FXWWdkR2hsY21VZ1lYSmxJRzExYkhScGNHeGxJSEJoY25SeklHWnZjaUJoSUhCeWIzQmxjblI1TGx4dUlDcGNiaUFxSUVsbUlHRnVJR1Y0Y0hKbGMzTnBiMjRnWTI5dWRISnZiSE1nZEdobElIZG9iMnhsSUhCeWIzQmxjblI1SUhaaGJIVmxMQ0IwYUdWdUlIUm9aU0IyWVd4MVpTQnBjeUJ6YVcxd2JIbGNiaUFxSUdGemMybG5ibVZrSUhSdklIUm9aU0J3Y205d1pYSjBlU0IxYm1SbGNpQmpiMjUwY205c0xpQkpaaUIwYUdWeVpTQmhjbVVnYzNSeWFXNW5JR3hwZEdWeVlXeHpJRzl5WEc0Z0tpQnRkV3gwYVhCc1pTQmxlSEJ5WlhOemFXOXVjeXdnZEdobGJpQjBhR1VnYzNSeWFXNW5jeUJoY21VZ1pYaHdjbVZ6YzJsdmJuTWdZWEpsSUdsdWRHVnljRzlzWVhSbFpDQnBiblJ2WEc0Z0tpQmhJSE4wY21sdVp5Qm1hWEp6ZEM1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGQnliM0JsY25SNVEyOXRiV2wwZEdWeUlHVjRkR1Z1WkhNZ1FYUjBjbWxpZFhSbFEyOXRiV2wwZEdWeUlIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxiR1Z0Wlc1MExDQnVZVzFsTENCemRISnBibWR6S1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0dWc1pXMWxiblFzSUc1aGJXVXNJSE4wY21sdVozTXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTnBibWRzWlNBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FvYzNSeWFXNW5jeTVzWlc1bmRHZ2dQVDA5SURJZ0ppWWdjM1J5YVc1bmMxc3dYU0E5UFQwZ0p5Y2dKaVlnYzNSeWFXNW5jMXN4WFNBOVBUMGdKeWNwTzF4dUlDQWdJSDFjYmlBZ0lDQmZZM0psWVhSbFVHRnlkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl3WlhKMGVWQmhjblFvZEdocGN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUY5blpYUldZV3gxWlNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjMmx1WjJ4bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXdZWEowYzFzd1hTNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WDJkbGRGWmhiSFZsS0NrN1hHNGdJQ0FnZlZ4dUlDQWdJR052YlcxcGRDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WkdseWRIa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdseWRIa2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtOHRaWGh3YkdsamFYUXRZVzU1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblJiZEdocGN5NXVZVzFsWFNBOUlIUm9hWE11WDJkbGRGWmhiSFZsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlYRzVsZUhCdmNuUWdZMnhoYzNNZ1VISnZjR1Z5ZEhsUVlYSjBJR1Y0ZEdWdVpITWdRWFIwY21saWRYUmxVR0Z5ZENCN1hHNTlYRzR2THlCRVpYUmxZM1FnWlhabGJuUWdiR2x6ZEdWdVpYSWdiM0IwYVc5dWN5QnpkWEJ3YjNKMExpQkpaaUIwYUdVZ1lHTmhjSFIxY21WZ0lIQnliM0JsY25SNUlHbHpJSEpsWVdSY2JpOHZJR1p5YjIwZ2RHaGxJRzl3ZEdsdmJuTWdiMkpxWldOMExDQjBhR1Z1SUc5d2RHbHZibk1nWVhKbElITjFjSEJ2Y25SbFpDNGdTV1lnYm05MExDQjBhR1Z1SUhSb1pTQjBhR2x5WkZ4dUx5OGdZWEpuZFcxbGJuUWdkRzhnWVdSa0wzSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSWdhWE1nYVc1MFpYSndjbVYwWldRZ1lYTWdkR2hsSUdKdmIyeGxZVzRnWTJGd2RIVnlaVnh1THk4Z2RtRnNkV1VnYzI4Z2QyVWdjMmh2ZFd4a0lHOXViSGtnY0dGemN5QjBhR1VnWUdOaGNIUjFjbVZnSUhCeWIzQmxjblI1TGx4dWJHVjBJR1YyWlc1MFQzQjBhVzl1YzFOMWNIQnZjblJsWkNBOUlHWmhiSE5sTzF4dUx5OGdWM0poY0NCcGJuUnZJR0Z1SUVsSlJrVWdZbVZqWVhWelpTQk5VeUJGWkdkbElEdzlJSFkwTVNCa2IyVnpJRzV2ZENCemRYQndiM0owSUdoaGRtbHVaeUIwY25rdlkyRjBZMmhjYmk4dklHSnNiMk5yY3lCeWFXZG9kQ0JwYm5SdklIUm9aU0JpYjJSNUlHOW1JR0VnYlc5a2RXeGxYRzRvS0NrZ1BUNGdlMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzl3ZEdsdmJuTWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5aWFFnWTJGd2RIVnlaU2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkRTl3ZEdsdmJuTlRkWEJ3YjNKMFpXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dWJ5MWxlSEJzYVdOcGRDMWhibmxjYmlBZ0lDQWdJQ0FnZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM1JsYzNRbkxDQnZjSFJwYjI1ekxDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxbGVIQnNhV05wZEMxaGJubGNiaUFnSUNBZ0lDQWdkMmx1Wkc5M0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KM1JsYzNRbkxDQnZjSFJwYjI1ekxDQnZjSFJwYjI1ektUdGNiaUFnSUNCOVhHNGdJQ0FnWTJGMFkyZ2dLRjlsS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJR1YyWlc1MElHOXdkR2x2Ym5NZ2JtOTBJSE4xY0hCdmNuUmxaRnh1SUNBZ0lIMWNibjBwS0NrN1hHNWxlSEJ2Y25RZ1kyeGhjM01nUlhabGJuUlFZWEowSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lobGJHVnRaVzUwTENCbGRtVnVkRTVoYldVc0lHVjJaVzUwUTI5dWRHVjRkQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblpoYkhWbElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWZjR1Z1WkdsdVoxWmhiSFZsSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblFnUFNCbGJHVnRaVzUwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVYyWlc1MFRtRnRaU0E5SUdWMlpXNTBUbUZ0WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsZG1WdWRFTnZiblJsZUhRZ1BTQmxkbVZ1ZEVOdmJuUmxlSFE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMTlpYjNWdVpFaGhibVJzWlVWMlpXNTBJRDBnS0dVcElEMCtJSFJvYVhNdWFHRnVaR3hsUlhabGJuUW9aU2s3WEc0Z0lDQWdmVnh1SUNBZ0lITmxkRlpoYkhWbEtIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDE5d1pXNWthVzVuVm1Gc2RXVWdQU0IyWVd4MVpUdGNiaUFnSUNCOVhHNGdJQ0FnWTI5dGJXbDBLQ2tnZTF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvYVhORWFYSmxZM1JwZG1Vb2RHaHBjeTVmWDNCbGJtUnBibWRXWVd4MVpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdScGNtVmpkR2wyWlNBOUlIUm9hWE11WDE5d1pXNWthVzVuVm1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlmY0dWdVpHbHVaMVpoYkhWbElEMGdibTlEYUdGdVoyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYSmxZM1JwZG1Vb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgxOXdaVzVrYVc1blZtRnNkV1VnUFQwOUlHNXZRMmhoYm1kbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm1WM1RHbHpkR1Z1WlhJZ1BTQjBhR2x6TGw5ZmNHVnVaR2x1WjFaaGJIVmxPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnZiR1JNYVhOMFpXNWxjaUE5SUhSb2FYTXVkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhOb2IzVnNaRkpsYlc5MlpVeHBjM1JsYm1WeUlEMGdibVYzVEdsemRHVnVaWElnUFQwZ2JuVnNiQ0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMnhrVEdsemRHVnVaWElnSVQwZ2JuVnNiQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNodVpYZE1hWE4wWlc1bGNpNWpZWEIwZFhKbElDRTlQU0J2YkdSTWFYTjBaVzVsY2k1allYQjBkWEpsSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZDB4cGMzUmxibVZ5TG05dVkyVWdJVDA5SUc5c1pFeHBjM1JsYm1WeUxtOXVZMlVnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzVEdsemRHVnVaWEl1Y0dGemMybDJaU0FoUFQwZ2IyeGtUR2x6ZEdWdVpYSXVjR0Z6YzJsMlpTazdYRzRnSUNBZ0lDQWdJR052Ym5OMElITm9iM1ZzWkVGa1pFeHBjM1JsYm1WeUlEMGdibVYzVEdsemRHVnVaWElnSVQwZ2JuVnNiQ0FtSmlBb2IyeGtUR2x6ZEdWdVpYSWdQVDBnYm5Wc2JDQjhmQ0J6YUc5MWJHUlNaVzF2ZG1WTWFYTjBaVzVsY2lrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6YUc5MWJHUlNaVzF2ZG1WTWFYTjBaVzVsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9kR2hwY3k1bGRtVnVkRTVoYldVc0lIUm9hWE11WDE5aWIzVnVaRWhoYm1Sc1pVVjJaVzUwTENCMGFHbHpMbDlmYjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSE5vYjNWc1pFRmtaRXhwYzNSbGJtVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmIzQjBhVzl1Y3lBOUlHZGxkRTl3ZEdsdmJuTW9ibVYzVEdsemRHVnVaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvZEdocGN5NWxkbVZ1ZEU1aGJXVXNJSFJvYVhNdVgxOWliM1Z1WkVoaGJtUnNaVVYyWlc1MExDQjBhR2x6TGw5ZmIzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1MllXeDFaU0E5SUc1bGQweHBjM1JsYm1WeU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmNHVnVaR2x1WjFaaGJIVmxJRDBnYm05RGFHRnVaMlU3WEc0Z0lDQWdmVnh1SUNBZ0lHaGhibVJzWlVWMlpXNTBLR1YyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NTJZV3gxWlNBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MllXeDFaUzVqWVd4c0tIUm9hWE11WlhabGJuUkRiMjUwWlhoMElIeDhJSFJvYVhNdVpXeGxiV1Z1ZEN3Z1pYWmxiblFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MllXeDFaUzVvWVc1a2JHVkZkbVZ1ZENobGRtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OVhHNHZMeUJYWlNCamIzQjVJRzl3ZEdsdmJuTWdZbVZqWVhWelpTQnZaaUIwYUdVZ2FXNWpiMjV6YVhOMFpXNTBJR0psYUdGMmFXOXlJRzltSUdKeWIzZHpaWEp6SUhkb1pXNGdjbVZoWkdsdVoxeHVMeThnZEdobElIUm9hWEprSUdGeVozVnRaVzUwSUc5bUlHRmtaQzl5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5TGlCSlJURXhJR1J2WlhOdUozUWdjM1Z3Y0c5eWRDQnZjSFJwYjI1elhHNHZMeUJoZENCaGJHd3VJRU5vY205dFpTQTBNU0J2Ym14NUlISmxZV1J6SUdCallYQjBkWEpsWUNCcFppQjBhR1VnWVhKbmRXMWxiblFnYVhNZ1lXNGdiMkpxWldOMExseHVZMjl1YzNRZ1oyVjBUM0IwYVc5dWN5QTlJQ2h2S1NBOVBpQnZJQ1ltWEc0Z0lDQWdLR1YyWlc1MFQzQjBhVzl1YzFOMWNIQnZjblJsWkNBL1hHNGdJQ0FnSUNBZ0lIc2dZMkZ3ZEhWeVpUb2dieTVqWVhCMGRYSmxMQ0J3WVhOemFYWmxPaUJ2TG5CaGMzTnBkbVVzSUc5dVkyVTZJRzh1YjI1alpTQjlJRHBjYmlBZ0lDQWdJQ0FnYnk1allYQjBkWEpsS1R0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QWEJoY25SekxtcHpMbTFoY0NJc0lpOHFLbHh1SUNvZ1FHeHBZMlZ1YzJWY2JpQXFJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhOeUJVYUdVZ1VHOXNlVzFsY2lCUWNtOXFaV04wSUVGMWRHaHZjbk11SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLaUJVYUdseklHTnZaR1VnYldGNUlHOXViSGtnWW1VZ2RYTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUlITjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdZWFJjYmlBcUlHaDBkSEE2THk5d2IyeDViV1Z5TG1kcGRHaDFZaTVwYnk5TVNVTkZUbE5GTG5SNGRGeHVJQ29nVkdobElHTnZiWEJzWlhSbElITmxkQ0J2WmlCaGRYUm9iM0p6SUcxaGVTQmlaU0JtYjNWdVpDQmhkRnh1SUNvZ2FIUjBjRG92TDNCdmJIbHRaWEl1WjJsMGFIVmlMbWx2TDBGVlZFaFBVbE11ZEhoMFhHNGdLaUJVYUdVZ1kyOXRjR3hsZEdVZ2MyVjBJRzltSUdOdmJuUnlhV0oxZEc5eWN5QnRZWGtnWW1VZ1ptOTFibVFnWVhSY2JpQXFJR2gwZEhBNkx5OXdiMng1YldWeUxtZHBkR2gxWWk1cGJ5OURUMDVVVWtsQ1ZWUlBVbE11ZEhoMFhHNGdLaUJEYjJSbElHUnBjM1J5YVdKMWRHVmtJR0o1SUVkdmIyZHNaU0JoY3lCd1lYSjBJRzltSUhSb1pTQndiMng1YldWeUlIQnliMnBsWTNRZ2FYTWdZV3h6YjF4dUlDb2djM1ZpYW1WamRDQjBieUJoYmlCaFpHUnBkR2x2Ym1Gc0lFbFFJSEpwWjJoMGN5Qm5jbUZ1ZENCbWIzVnVaQ0JoZEZ4dUlDb2dhSFIwY0RvdkwzQnZiSGx0WlhJdVoybDBhSFZpTG1sdkwxQkJWRVZPVkZNdWRIaDBYRzRnS2k5Y2JtbHRjRzl5ZENCN0lHMWhjbXRsY2l3Z1ZHVnRjR3hoZEdVZ2ZTQm1jbTl0SUNjdUwzUmxiWEJzWVhSbExtcHpKenRjYmk4cUtseHVJQ29nVkdobElHUmxabUYxYkhRZ1ZHVnRjR3hoZEdWR1lXTjBiM0o1SUhkb2FXTm9JR05oWTJobGN5QlVaVzF3YkdGMFpYTWdhMlY1WldRZ2IyNWNiaUFxSUhKbGMzVnNkQzUwZVhCbElHRnVaQ0J5WlhOMWJIUXVjM1J5YVc1bmN5NWNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhSbGJYQnNZWFJsUm1GamRHOXllU2h5WlhOMWJIUXBJSHRjYmlBZ0lDQnNaWFFnZEdWdGNHeGhkR1ZEWVdOb1pTQTlJSFJsYlhCc1lYUmxRMkZqYUdWekxtZGxkQ2h5WlhOMWJIUXVkSGx3WlNrN1hHNGdJQ0FnYVdZZ0tIUmxiWEJzWVhSbFEyRmphR1VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0IwWlcxd2JHRjBaVU5oWTJobElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlhVzVuYzBGeWNtRjVPaUJ1WlhjZ1YyVmhhMDFoY0NncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNVUzUnlhVzVuT2lCdVpYY2dUV0Z3S0NsY2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdkR1Z0Y0d4aGRHVkRZV05vWlhNdWMyVjBLSEpsYzNWc2RDNTBlWEJsTENCMFpXMXdiR0YwWlVOaFkyaGxLVHRjYmlBZ0lDQjlYRzRnSUNBZ2JHVjBJSFJsYlhCc1lYUmxJRDBnZEdWdGNHeGhkR1ZEWVdOb1pTNXpkSEpwYm1kelFYSnlZWGt1WjJWMEtISmxjM1ZzZEM1emRISnBibWR6S1R0Y2JpQWdJQ0JwWmlBb2RHVnRjR3hoZEdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdWdGNHeGhkR1U3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJRWxtSUhSb1pTQlVaVzF3YkdGMFpWTjBjbWx1WjNOQmNuSmhlU0JwY3lCdVpYY3NJR2RsYm1WeVlYUmxJR0VnYTJWNUlHWnliMjBnZEdobElITjBjbWx1WjNOY2JpQWdJQ0F2THlCVWFHbHpJR3RsZVNCcGN5QnphR0Z5WldRZ1ltVjBkMlZsYmlCaGJHd2dkR1Z0Y0d4aGRHVnpJSGRwZEdnZ2FXUmxiblJwWTJGc0lHTnZiblJsYm5SY2JpQWdJQ0JqYjI1emRDQnJaWGtnUFNCeVpYTjFiSFF1YzNSeWFXNW5jeTVxYjJsdUtHMWhjbXRsY2lrN1hHNGdJQ0FnTHk4Z1EyaGxZMnNnYVdZZ2QyVWdZV3h5WldGa2VTQm9ZWFpsSUdFZ1ZHVnRjR3hoZEdVZ1ptOXlJSFJvYVhNZ2EyVjVYRzRnSUNBZ2RHVnRjR3hoZEdVZ1BTQjBaVzF3YkdGMFpVTmhZMmhsTG10bGVWTjBjbWx1Wnk1blpYUW9hMlY1S1R0Y2JpQWdJQ0JwWmlBb2RHVnRjR3hoZEdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkpaaUIzWlNCb1lYWmxJRzV2ZENCelpXVnVJSFJvYVhNZ2EyVjVJR0psWm05eVpTd2dZM0psWVhSbElHRWdibVYzSUZSbGJYQnNZWFJsWEc0Z0lDQWdJQ0FnSUhSbGJYQnNZWFJsSUQwZ2JtVjNJRlJsYlhCc1lYUmxLSEpsYzNWc2RDd2djbVZ6ZFd4MExtZGxkRlJsYlhCc1lYUmxSV3hsYldWdWRDZ3BLVHRjYmlBZ0lDQWdJQ0FnTHk4Z1EyRmphR1VnZEdobElGUmxiWEJzWVhSbElHWnZjaUIwYUdseklHdGxlVnh1SUNBZ0lDQWdJQ0IwWlcxd2JHRjBaVU5oWTJobExtdGxlVk4wY21sdVp5NXpaWFFvYTJWNUxDQjBaVzF3YkdGMFpTazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklFTmhZMmhsSUdGc2JDQm1kWFIxY21VZ2NYVmxjbWxsY3lCbWIzSWdkR2hwY3lCVVpXMXdiR0YwWlZOMGNtbHVaM05CY25KaGVWeHVJQ0FnSUhSbGJYQnNZWFJsUTJGamFHVXVjM1J5YVc1bmMwRnljbUY1TG5ObGRDaHlaWE4xYkhRdWMzUnlhVzVuY3l3Z2RHVnRjR3hoZEdVcE8xeHVJQ0FnSUhKbGRIVnliaUIwWlcxd2JHRjBaVHRjYm4xY2JtVjRjRzl5ZENCamIyNXpkQ0IwWlcxd2JHRjBaVU5oWTJobGN5QTlJRzVsZHlCTllYQW9LVHRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBYUmxiWEJzWVhSbExXWmhZM1J2Y25rdWFuTXViV0Z3SWl3aUx5b3FYRzRnS2lCQWJHbGpaVzV6WlZ4dUlDb2dRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTNJRlJvWlNCUWIyeDViV1Z5SUZCeWIycGxZM1FnUVhWMGFHOXljeTRnUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFJRlJvYVhNZ1kyOWtaU0J0WVhrZ2IyNXNlU0JpWlNCMWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRZ2MzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQmhkRnh1SUNvZ2FIUjBjRG92TDNCdmJIbHRaWEl1WjJsMGFIVmlMbWx2TDB4SlEwVk9VMFV1ZEhoMFhHNGdLaUJVYUdVZ1kyOXRjR3hsZEdVZ2MyVjBJRzltSUdGMWRHaHZjbk1nYldGNUlHSmxJR1p2ZFc1a0lHRjBYRzRnS2lCb2RIUndPaTh2Y0c5c2VXMWxjaTVuYVhSb2RXSXVhVzh2UVZWVVNFOVNVeTUwZUhSY2JpQXFJRlJvWlNCamIyMXdiR1YwWlNCelpYUWdiMllnWTI5dWRISnBZblYwYjNKeklHMWhlU0JpWlNCbWIzVnVaQ0JoZEZ4dUlDb2dhSFIwY0RvdkwzQnZiSGx0WlhJdVoybDBhSFZpTG1sdkwwTlBUbFJTU1VKVlZFOVNVeTUwZUhSY2JpQXFJRU52WkdVZ1pHbHpkSEpwWW5WMFpXUWdZbmtnUjI5dloyeGxJR0Z6SUhCaGNuUWdiMllnZEdobElIQnZiSGx0WlhJZ2NISnZhbVZqZENCcGN5QmhiSE52WEc0Z0tpQnpkV0pxWldOMElIUnZJR0Z1SUdGa1pHbDBhVzl1WVd3Z1NWQWdjbWxuYUhSeklHZHlZVzUwSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlVFRlVSVTVVVXk1MGVIUmNiaUFxTDF4dUx5b3FYRzRnS2lCQWJXOWtkV3hsSUd4cGRDMW9kRzFzWEc0Z0tpOWNibWx0Y0c5eWRDQjdJSEpsYlc5MlpVNXZaR1Z6SUgwZ1puSnZiU0FuTGk5a2IyMHVhbk1uTzF4dWFXMXdiM0owSUhzZ1RtOWtaVkJoY25RZ2ZTQm1jbTl0SUNjdUwzQmhjblJ6TG1wekp6dGNibWx0Y0c5eWRDQjdJSFJsYlhCc1lYUmxSbUZqZEc5eWVTQjlJR1p5YjIwZ0p5NHZkR1Z0Y0d4aGRHVXRabUZqZEc5eWVTNXFjeWM3WEc1bGVIQnZjblFnWTI5dWMzUWdjR0Z5ZEhNZ1BTQnVaWGNnVjJWaGEwMWhjQ2dwTzF4dUx5b3FYRzRnS2lCU1pXNWtaWEp6SUdFZ2RHVnRjR3hoZEdVZ2NtVnpkV3gwSUc5eUlHOTBhR1Z5SUhaaGJIVmxJSFJ2SUdFZ1kyOXVkR0ZwYm1WeUxseHVJQ3BjYmlBcUlGUnZJSFZ3WkdGMFpTQmhJR052Ym5SaGFXNWxjaUIzYVhSb0lHNWxkeUIyWVd4MVpYTXNJSEpsWlhaaGJIVmhkR1VnZEdobElIUmxiWEJzWVhSbElHeHBkR1Z5WVd3Z1lXNWtYRzRnS2lCallXeHNJR0J5Wlc1a1pYSmdJSGRwZEdnZ2RHaGxJRzVsZHlCeVpYTjFiSFF1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSEpsYzNWc2RDQkJibmtnZG1Gc2RXVWdjbVZ1WkdWeVlXSnNaU0JpZVNCT2IyUmxVR0Z5ZENBdElIUjVjR2xqWVd4c2VTQmhJRlJsYlhCc1lYUmxVbVZ6ZFd4MFhHNGdLaUFnSUNBZ1kzSmxZWFJsWkNCaWVTQmxkbUZzZFdGMGFXNW5JR0VnZEdWdGNHeGhkR1VnZEdGbklHeHBhMlVnWUdoMGJXeGdJRzl5SUdCemRtZGdMbHh1SUNvZ1FIQmhjbUZ0SUdOdmJuUmhhVzVsY2lCQklFUlBUU0J3WVhKbGJuUWdkRzhnY21WdVpHVnlJSFJ2TGlCVWFHVWdaVzUwYVhKbElHTnZiblJsYm5SeklHRnlaU0JsYVhSb1pYSmNiaUFxSUNBZ0lDQnlaWEJzWVdObFpDd2diM0lnWldabWFXTnBaVzUwYkhrZ2RYQmtZWFJsWkNCcFppQjBhR1VnYzJGdFpTQnlaWE4xYkhRZ2RIbHdaU0IzWVhNZ2NISmxkbWx2ZFhOY2JpQXFJQ0FnSUNCeVpXNWtaWEpsWkNCMGFHVnlaUzVjYmlBcUlFQndZWEpoYlNCdmNIUnBiMjV6SUZKbGJtUmxjazl3ZEdsdmJuTWdabTl5SUhSb1pTQmxiblJwY21VZ2NtVnVaR1Z5SUhSeVpXVWdjbVZ1WkdWeVpXUWdkRzhnZEdocGMxeHVJQ29nSUNBZ0lHTnZiblJoYVc1bGNpNGdVbVZ1WkdWeUlHOXdkR2x2Ym5NZ2JYVnpkQ0FxYm05MEtpQmphR0Z1WjJVZ1ltVjBkMlZsYmlCeVpXNWtaWEp6SUhSdklIUm9aU0J6WVcxbFhHNGdLaUFnSUNBZ1kyOXVkR0ZwYm1WeUxDQmhjeUIwYUc5elpTQmphR0Z1WjJWeklIZHBiR3dnYm05MElHVm1abVZqZENCd2NtVjJhVzkxYzJ4NUlISmxibVJsY21Wa0lFUlBUUzVjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUhKbGJtUmxjaUE5SUNoeVpYTjFiSFFzSUdOdmJuUmhhVzVsY2l3Z2IzQjBhVzl1Y3lrZ1BUNGdlMXh1SUNBZ0lHeGxkQ0J3WVhKMElEMGdjR0Z5ZEhNdVoyVjBLR052Ym5SaGFXNWxjaWs3WEc0Z0lDQWdhV1lnS0hCaGNuUWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaVzF2ZG1WT2IyUmxjeWhqYjI1MFlXbHVaWElzSUdOdmJuUmhhVzVsY2k1bWFYSnpkRU5vYVd4a0tUdGNiaUFnSUNBZ0lDQWdjR0Z5ZEhNdWMyVjBLR052Ym5SaGFXNWxjaXdnY0dGeWRDQTlJRzVsZHlCT2IyUmxVR0Z5ZENoUFltcGxZM1F1WVhOemFXZHVLSHNnZEdWdGNHeGhkR1ZHWVdOMGIzSjVJSDBzSUc5d2RHbHZibk1wS1NrN1hHNGdJQ0FnSUNBZ0lIQmhjblF1WVhCd1pXNWtTVzUwYnloamIyNTBZV2x1WlhJcE8xeHVJQ0FnSUgxY2JpQWdJQ0J3WVhKMExuTmxkRlpoYkhWbEtISmxjM1ZzZENrN1hHNGdJQ0FnY0dGeWRDNWpiMjF0YVhRb0tUdGNibjA3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMXlaVzVrWlhJdWFuTXViV0Z3SWl3aUx5b3FYRzRnS2lCQWJHbGpaVzV6WlZ4dUlDb2dRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTNJRlJvWlNCUWIyeDViV1Z5SUZCeWIycGxZM1FnUVhWMGFHOXljeTRnUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFJRlJvYVhNZ1kyOWtaU0J0WVhrZ2IyNXNlU0JpWlNCMWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRZ2MzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQmhkRnh1SUNvZ2FIUjBjRG92TDNCdmJIbHRaWEl1WjJsMGFIVmlMbWx2TDB4SlEwVk9VMFV1ZEhoMFhHNGdLaUJVYUdVZ1kyOXRjR3hsZEdVZ2MyVjBJRzltSUdGMWRHaHZjbk1nYldGNUlHSmxJR1p2ZFc1a0lHRjBYRzRnS2lCb2RIUndPaTh2Y0c5c2VXMWxjaTVuYVhSb2RXSXVhVzh2UVZWVVNFOVNVeTUwZUhSY2JpQXFJRlJvWlNCamIyMXdiR1YwWlNCelpYUWdiMllnWTI5dWRISnBZblYwYjNKeklHMWhlU0JpWlNCbWIzVnVaQ0JoZEZ4dUlDb2dhSFIwY0RvdkwzQnZiSGx0WlhJdVoybDBhSFZpTG1sdkwwTlBUbFJTU1VKVlZFOVNVeTUwZUhSY2JpQXFJRU52WkdVZ1pHbHpkSEpwWW5WMFpXUWdZbmtnUjI5dloyeGxJR0Z6SUhCaGNuUWdiMllnZEdobElIQnZiSGx0WlhJZ2NISnZhbVZqZENCcGN5QmhiSE52WEc0Z0tpQnpkV0pxWldOMElIUnZJR0Z1SUdGa1pHbDBhVzl1WVd3Z1NWQWdjbWxuYUhSeklHZHlZVzUwSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlVFRlVSVTVVVXk1MGVIUmNiaUFxTDF4dWFXMXdiM0owSUhzZ1FYUjBjbWxpZFhSbFEyOXRiV2wwZEdWeUxDQkNiMjlzWldGdVFYUjBjbWxpZFhSbFVHRnlkQ3dnUlhabGJuUlFZWEowTENCT2IyUmxVR0Z5ZEN3Z1VISnZjR1Z5ZEhsRGIyMXRhWFIwWlhJZ2ZTQm1jbTl0SUNjdUwzQmhjblJ6TG1wekp6dGNiaThxS2x4dUlDb2dRM0psWVhSbGN5QlFZWEowY3lCM2FHVnVJR0VnZEdWdGNHeGhkR1VnYVhNZ2FXNXpkR0Z1ZEdsaGRHVmtMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nUkdWbVlYVnNkRlJsYlhCc1lYUmxVSEp2WTJWemMyOXlJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEY21WaGRHVWdjR0Z5ZEhNZ1ptOXlJR0Z1SUdGMGRISnBZblYwWlMxd2IzTnBkR2x2YmlCaWFXNWthVzVuTENCbmFYWmxiaUIwYUdVZ1pYWmxiblFzSUdGMGRISnBZblYwWlZ4dUlDQWdJQ0FxSUc1aGJXVXNJR0Z1WkNCemRISnBibWNnYkdsMFpYSmhiSE11WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdaV3hsYldWdWRDQlVhR1VnWld4bGJXVnVkQ0JqYjI1MFlXbHVhVzVuSUhSb1pTQmlhVzVrYVc1blhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUc1aGJXVWdJRlJvWlNCaGRIUnlhV0oxZEdVZ2JtRnRaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnpkSEpwYm1keklGUm9aU0J6ZEhKcGJtY2diR2wwWlhKaGJITXVJRlJvWlhKbElHRnlaU0JoYkhkaGVYTWdZWFFnYkdWaGMzUWdkSGR2SUhOMGNtbHVaM01zWEc0Z0lDQWdJQ29nSUNCbGRtVnVkQ0JtYjNJZ1puVnNiSGt0WTI5dWRISnZiR3hsWkNCaWFXNWthVzVuY3lCM2FYUm9JR0VnYzJsdVoyeGxJR1Y0Y0hKbGMzTnBiMjR1WEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFFYUjBjbWxpZFhSbFJYaHdjbVZ6YzJsdmJuTW9aV3hsYldWdWRDd2dibUZ0WlN3Z2MzUnlhVzVuY3l3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd2NtVm1hWGdnUFNCdVlXMWxXekJkTzF4dUlDQWdJQ0FnSUNCcFppQW9jSEpsWm1sNElEMDlQU0FuTGljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR052YlcxcGRIUmxjaUE5SUc1bGR5QlFjbTl3WlhKMGVVTnZiVzFwZEhSbGNpaGxiR1Z0Wlc1MExDQnVZVzFsTG5Oc2FXTmxLREVwTENCemRISnBibWR6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjF0YVhSMFpYSXVjR0Z5ZEhNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hCeVpXWnBlQ0E5UFQwZ0owQW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1cyNWxkeUJGZG1WdWRGQmhjblFvWld4bGJXVnVkQ3dnYm1GdFpTNXpiR2xqWlNneEtTd2diM0IwYVc5dWN5NWxkbVZ1ZEVOdmJuUmxlSFFwWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvY0hKbFptbDRJRDA5UFNBblB5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCYmJtVjNJRUp2YjJ4bFlXNUJkSFJ5YVdKMWRHVlFZWEowS0dWc1pXMWxiblFzSUc1aGJXVXVjMnhwWTJVb01Ta3NJSE4wY21sdVozTXBYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0JqYjIxdGFYUjBaWElnUFNCdVpYY2dRWFIwY21saWRYUmxRMjl0YldsMGRHVnlLR1ZzWlcxbGJuUXNJRzVoYldVc0lITjBjbWx1WjNNcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXRiV2wwZEdWeUxuQmhjblJ6TzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEY21WaGRHVWdjR0Z5ZEhNZ1ptOXlJR0VnZEdWNGRDMXdiM05wZEdsdmJpQmlhVzVrYVc1bkxseHVJQ0FnSUNBcUlFQndZWEpoYlNCMFpXMXdiR0YwWlVaaFkzUnZjbmxjYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWVVpYaDBSWGh3Y21WemMybHZiaWh2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RtOWtaVkJoY25Rb2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZlZ4dWZWeHVaWGh3YjNKMElHTnZibk4wSUdSbFptRjFiSFJVWlcxd2JHRjBaVkJ5YjJObGMzTnZjaUE5SUc1bGR5QkVaV1poZFd4MFZHVnRjR3hoZEdWUWNtOWpaWE56YjNJb0tUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdSbFptRjFiSFF0ZEdWdGNHeGhkR1V0Y0hKdlkyVnpjMjl5TG1wekxtMWhjQ0lzSWk4cUtseHVJQ29nUUd4cFkyVnVjMlZjYmlBcUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE55QlVhR1VnVUc5c2VXMWxjaUJRY205cVpXTjBJRUYxZEdodmNuTXVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tpQlVhR2x6SUdOdlpHVWdiV0Y1SUc5dWJIa2dZbVVnZFhObFpDQjFibVJsY2lCMGFHVWdRbE5FSUhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ1lYUmNiaUFxSUdoMGRIQTZMeTl3YjJ4NWJXVnlMbWRwZEdoMVlpNXBieTlNU1VORlRsTkZMblI0ZEZ4dUlDb2dWR2hsSUdOdmJYQnNaWFJsSUhObGRDQnZaaUJoZFhSb2IzSnpJRzFoZVNCaVpTQm1iM1Z1WkNCaGRGeHVJQ29nYUhSMGNEb3ZMM0J2YkhsdFpYSXVaMmwwYUhWaUxtbHZMMEZWVkVoUFVsTXVkSGgwWEc0Z0tpQlVhR1VnWTI5dGNHeGxkR1VnYzJWMElHOW1JR052Ym5SeWFXSjFkRzl5Y3lCdFlYa2dZbVVnWm05MWJtUWdZWFJjYmlBcUlHaDBkSEE2THk5d2IyeDViV1Z5TG1kcGRHaDFZaTVwYnk5RFQwNVVVa2xDVlZSUFVsTXVkSGgwWEc0Z0tpQkRiMlJsSUdScGMzUnlhV0oxZEdWa0lHSjVJRWR2YjJkc1pTQmhjeUJ3WVhKMElHOW1JSFJvWlNCd2IyeDViV1Z5SUhCeWIycGxZM1FnYVhNZ1lXeHpiMXh1SUNvZ2MzVmlhbVZqZENCMGJ5QmhiaUJoWkdScGRHbHZibUZzSUVsUUlISnBaMmgwY3lCbmNtRnVkQ0JtYjNWdVpDQmhkRnh1SUNvZ2FIUjBjRG92TDNCdmJIbHRaWEl1WjJsMGFIVmlMbWx2TDFCQlZFVk9WRk11ZEhoMFhHNGdLaTljYmk4cUtseHVJQ3BjYmlBcUlFMWhhVzRnYkdsMExXaDBiV3dnYlc5a2RXeGxMbHh1SUNwY2JpQXFJRTFoYVc0Z1pYaHdiM0owY3pwY2JpQXFYRzRnS2lBdElDQmJXMmgwYld4ZFhWeHVJQ29nTFNBZ1cxdHpkbWRkWFZ4dUlDb2dMU0FnVzF0eVpXNWtaWEpkWFZ4dUlDcGNiaUFxSUVCdGIyUjFiR1VnYkdsMExXaDBiV3hjYmlBcUlFQndjbVZtWlhKeVpXUmNiaUFxTDF4dUx5b3FYRzRnS2lCRWJ5QnViM1FnY21WdGIzWmxJSFJvYVhNZ1kyOXRiV1Z1ZERzZ2FYUWdhMlZsY0hNZ2RIbHdaV1J2WXlCbWNtOXRJRzFwYzNCc1lXTnBibWNnZEdobElHMXZaSFZzWlZ4dUlDb2daRzlqY3k1Y2JpQXFMMXh1YVcxd2IzSjBJSHNnWkdWbVlYVnNkRlJsYlhCc1lYUmxVSEp2WTJWemMyOXlJSDBnWm5KdmJTQW5MaTlzYVdJdlpHVm1ZWFZzZEMxMFpXMXdiR0YwWlMxd2NtOWpaWE56YjNJdWFuTW5PMXh1YVcxd2IzSjBJSHNnVTFaSFZHVnRjR3hoZEdWU1pYTjFiSFFzSUZSbGJYQnNZWFJsVW1WemRXeDBJSDBnWm5KdmJTQW5MaTlzYVdJdmRHVnRjR3hoZEdVdGNtVnpkV3gwTG1wekp6dGNibVY0Y0c5eWRDQjdJRVJsWm1GMWJIUlVaVzF3YkdGMFpWQnliMk5sYzNOdmNpd2daR1ZtWVhWc2RGUmxiWEJzWVhSbFVISnZZMlZ6YzI5eUlIMGdabkp2YlNBbkxpOXNhV0l2WkdWbVlYVnNkQzEwWlcxd2JHRjBaUzF3Y205alpYTnpiM0l1YW5Nbk8xeHVaWGh3YjNKMElIc2daR2x5WldOMGFYWmxMQ0JwYzBScGNtVmpkR2wyWlNCOUlHWnliMjBnSnk0dmJHbGlMMlJwY21WamRHbDJaUzVxY3ljN1hHNHZMeUJVVDBSUEtHcDFjM1JwYm1aaFoyNWhibWtwT2lCeVpXMXZkbVVnYkdsdVpTQjNhR1Z1SUhkbElHZGxkQ0JPYjJSbFVHRnlkQ0J0YjNacGJtY2diV1YwYUc5a2MxeHVaWGh3YjNKMElIc2djbVZ0YjNabFRtOWtaWE1zSUhKbGNHRnlaVzUwVG05a1pYTWdmU0JtY205dElDY3VMMnhwWWk5a2IyMHVhbk1uTzF4dVpYaHdiM0owSUhzZ2JtOURhR0Z1WjJVc0lHNXZkR2hwYm1jZ2ZTQm1jbTl0SUNjdUwyeHBZaTl3WVhKMExtcHpKenRjYm1WNGNHOXlkQ0I3SUVGMGRISnBZblYwWlVOdmJXMXBkSFJsY2l3Z1FYUjBjbWxpZFhSbFVHRnlkQ3dnUW05dmJHVmhia0YwZEhKcFluVjBaVkJoY25Rc0lFVjJaVzUwVUdGeWRDd2dhWE5KZEdWeVlXSnNaU3dnYVhOUWNtbHRhWFJwZG1Vc0lFNXZaR1ZRWVhKMExDQlFjbTl3WlhKMGVVTnZiVzFwZEhSbGNpd2dVSEp2Y0dWeWRIbFFZWEowSUgwZ1puSnZiU0FuTGk5c2FXSXZjR0Z5ZEhNdWFuTW5PMXh1Wlhod2IzSjBJSHNnY0dGeWRITXNJSEpsYm1SbGNpQjlJR1p5YjIwZ0p5NHZiR2xpTDNKbGJtUmxjaTVxY3ljN1hHNWxlSEJ2Y25RZ2V5QjBaVzF3YkdGMFpVTmhZMmhsY3l3Z2RHVnRjR3hoZEdWR1lXTjBiM0o1SUgwZ1puSnZiU0FuTGk5c2FXSXZkR1Z0Y0d4aGRHVXRabUZqZEc5eWVTNXFjeWM3WEc1bGVIQnZjblFnZXlCVVpXMXdiR0YwWlVsdWMzUmhibU5sSUgwZ1puSnZiU0FuTGk5c2FXSXZkR1Z0Y0d4aGRHVXRhVzV6ZEdGdVkyVXVhbk1uTzF4dVpYaHdiM0owSUhzZ1UxWkhWR1Z0Y0d4aGRHVlNaWE4xYkhRc0lGUmxiWEJzWVhSbFVtVnpkV3gwSUgwZ1puSnZiU0FuTGk5c2FXSXZkR1Z0Y0d4aGRHVXRjbVZ6ZFd4MExtcHpKenRjYm1WNGNHOXlkQ0I3SUdOeVpXRjBaVTFoY210bGNpd2dhWE5VWlcxd2JHRjBaVkJoY25SQlkzUnBkbVVzSUZSbGJYQnNZWFJsSUgwZ1puSnZiU0FuTGk5c2FXSXZkR1Z0Y0d4aGRHVXVhbk1uTzF4dUx5OGdTVTFRVDFKVVFVNVVPaUJrYnlCdWIzUWdZMmhoYm1kbElIUm9aU0J3Y205d1pYSjBlU0J1WVcxbElHOXlJSFJvWlNCaGMzTnBaMjV0Wlc1MElHVjRjSEpsYzNOcGIyNHVYRzR2THlCVWFHbHpJR3hwYm1VZ2QybHNiQ0JpWlNCMWMyVmtJR2x1SUhKbFoyVjRaWE1nZEc4Z2MyVmhjbU5vSUdadmNpQnNhWFF0YUhSdGJDQjFjMkZuWlM1Y2JpOHZJRlJQUkU4b2FuVnpkR2x1Wm1GbmJtRnVhU2s2SUdsdWFtVmpkQ0IyWlhKemFXOXVJRzUxYldKbGNpQmhkQ0JpZFdsc1pDQjBhVzFsWEc1cFppQW9kSGx3Wlc5bUlIZHBibVJ2ZHlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FvZDJsdVpHOTNXeWRzYVhSSWRHMXNWbVZ5YzJsdmJuTW5YU0I4ZkNBb2QybHVaRzkzV3lkc2FYUklkRzFzVm1WeWMybHZibk1uWFNBOUlGdGRLU2t1Y0hWemFDZ25NUzR5TGpFbktUdGNibjFjYmk4cUtseHVJQ29nU1c1MFpYSndjbVYwY3lCaElIUmxiWEJzWVhSbElHeHBkR1Z5WVd3Z1lYTWdZVzRnU0ZSTlRDQjBaVzF3YkdGMFpTQjBhR0YwSUdOaGJpQmxabVpwWTJsbGJuUnNlVnh1SUNvZ2NtVnVaR1Z5SUhSdklHRnVaQ0IxY0dSaGRHVWdZU0JqYjI1MFlXbHVaWEl1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiMjV6ZENCb2RHMXNJRDBnS0hOMGNtbHVaM01zSUM0dUxuWmhiSFZsY3lrZ1BUNGdibVYzSUZSbGJYQnNZWFJsVW1WemRXeDBLSE4wY21sdVozTXNJSFpoYkhWbGN5d2dKMmgwYld3bkxDQmtaV1poZFd4MFZHVnRjR3hoZEdWUWNtOWpaWE56YjNJcE8xeHVMeW9xWEc0Z0tpQkpiblJsY25CeVpYUnpJR0VnZEdWdGNHeGhkR1VnYkdsMFpYSmhiQ0JoY3lCaGJpQlRWa2NnZEdWdGNHeGhkR1VnZEdoaGRDQmpZVzRnWldabWFXTnBaVzUwYkhsY2JpQXFJSEpsYm1SbGNpQjBieUJoYm1RZ2RYQmtZWFJsSUdFZ1kyOXVkR0ZwYm1WeUxseHVJQ292WEc1bGVIQnZjblFnWTI5dWMzUWdjM1puSUQwZ0tITjBjbWx1WjNNc0lDNHVMblpoYkhWbGN5a2dQVDRnYm1WM0lGTldSMVJsYlhCc1lYUmxVbVZ6ZFd4MEtITjBjbWx1WjNNc0lIWmhiSFZsY3l3Z0ozTjJaeWNzSUdSbFptRjFiSFJVWlcxd2JHRjBaVkJ5YjJObGMzTnZjaWs3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMXNhWFF0YUhSdGJDNXFjeTV0WVhBaUxDSXZLaXBjYmlBcUlFQnNhV05sYm5ObFhHNGdLaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGNnVkdobElGQnZiSGx0WlhJZ1VISnZhbVZqZENCQmRYUm9iM0p6TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ29nVkdocGN5QmpiMlJsSUcxaGVTQnZibXg1SUdKbElIVnpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDQnpkSGxzWlNCc2FXTmxibk5sSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlRFbERSVTVUUlM1MGVIUmNiaUFxSUZSb1pTQmpiMjF3YkdWMFpTQnpaWFFnYjJZZ1lYVjBhRzl5Y3lCdFlYa2dZbVVnWm05MWJtUWdZWFJjYmlBcUlHaDBkSEE2THk5d2IyeDViV1Z5TG1kcGRHaDFZaTVwYnk5QlZWUklUMUpUTG5SNGRGeHVJQ29nVkdobElHTnZiWEJzWlhSbElITmxkQ0J2WmlCamIyNTBjbWxpZFhSdmNuTWdiV0Y1SUdKbElHWnZkVzVrSUdGMFhHNGdLaUJvZEhSd09pOHZjRzlzZVcxbGNpNW5hWFJvZFdJdWFXOHZRMDlPVkZKSlFsVlVUMUpUTG5SNGRGeHVJQ29nUTI5a1pTQmthWE4wY21saWRYUmxaQ0JpZVNCSGIyOW5iR1VnWVhNZ2NHRnlkQ0J2WmlCMGFHVWdjRzlzZVcxbGNpQndjbTlxWldOMElHbHpJR0ZzYzI5Y2JpQXFJSE4xWW1wbFkzUWdkRzhnWVc0Z1lXUmthWFJwYjI1aGJDQkpVQ0J5YVdkb2RITWdaM0poYm5RZ1ptOTFibVFnWVhSY2JpQXFJR2gwZEhBNkx5OXdiMng1YldWeUxtZHBkR2gxWWk1cGJ5OVFRVlJGVGxSVExuUjRkRnh1SUNvdlhHNHZLaXBjYmlBcUlFMXZaSFZzWlNCMGJ5QmhaR1FnYzJoaFpIa2dSRTlOTDNOb1lXUjVJRU5UVXlCd2IyeDVabWxzYkNCemRYQndiM0owSUhSdklHeHBkQzFvZEcxc0lIUmxiWEJzWVhSbFhHNGdLaUJ5Wlc1a1pYSnBibWN1SUZObFpTQjBhR1VnVzF0eVpXNWtaWEpkWFNCdFpYUm9iMlFnWm05eUlHUmxkR0ZwYkhNdVhHNGdLbHh1SUNvZ1FHMXZaSFZzWlNCemFHRmtlUzF5Wlc1a1pYSmNiaUFxSUVCd2NtVm1aWEp5WldSY2JpQXFMMXh1THlvcVhHNGdLaUJFYnlCdWIzUWdjbVZ0YjNabElIUm9hWE1nWTI5dGJXVnVkRHNnYVhRZ2EyVmxjSE1nZEhsd1pXUnZZeUJtY205dElHMXBjM0JzWVdOcGJtY2dkR2hsSUcxdlpIVnNaVnh1SUNvZ1pHOWpjeTVjYmlBcUwxeHVhVzF3YjNKMElIc2djbVZ0YjNabFRtOWtaWE1nZlNCbWNtOXRJQ2N1TDJSdmJTNXFjeWM3WEc1cGJYQnZjblFnZXlCcGJuTmxjblJPYjJSbFNXNTBiMVJsYlhCc1lYUmxMQ0J5WlcxdmRtVk9iMlJsYzBaeWIyMVVaVzF3YkdGMFpTQjlJR1p5YjIwZ0p5NHZiVzlrYVdaNUxYUmxiWEJzWVhSbExtcHpKenRjYm1sdGNHOXlkQ0I3SUhCaGNuUnpMQ0J5Wlc1a1pYSWdZWE1nYkdsMFVtVnVaR1Z5SUgwZ1puSnZiU0FuTGk5eVpXNWtaWEl1YW5Nbk8xeHVhVzF3YjNKMElIc2dkR1Z0Y0d4aGRHVkRZV05vWlhNZ2ZTQm1jbTl0SUNjdUwzUmxiWEJzWVhSbExXWmhZM1J2Y25rdWFuTW5PMXh1YVcxd2IzSjBJSHNnVkdWdGNHeGhkR1ZKYm5OMFlXNWpaU0I5SUdaeWIyMGdKeTR2ZEdWdGNHeGhkR1V0YVc1emRHRnVZMlV1YW5Nbk8xeHVhVzF3YjNKMElIc2diV0Z5YTJWeUxDQlVaVzF3YkdGMFpTQjlJR1p5YjIwZ0p5NHZkR1Z0Y0d4aGRHVXVhbk1uTzF4dVpYaHdiM0owSUhzZ2FIUnRiQ3dnYzNabkxDQlVaVzF3YkdGMFpWSmxjM1ZzZENCOUlHWnliMjBnSnk0dUwyeHBkQzFvZEcxc0xtcHpKenRjYmk4dklFZGxkQ0JoSUd0bGVTQjBieUJzYjI5cmRYQWdhVzRnWUhSbGJYQnNZWFJsUTJGamFHVnpZQzVjYm1OdmJuTjBJR2RsZEZSbGJYQnNZWFJsUTJGamFHVkxaWGtnUFNBb2RIbHdaU3dnYzJOdmNHVk9ZVzFsS1NBOVBpQmdKSHQwZVhCbGZTMHRKSHR6WTI5d1pVNWhiV1Y5WUR0Y2JteGxkQ0JqYjIxd1lYUnBZbXhsVTJoaFpIbERVMU5XWlhKemFXOXVJRDBnZEhKMVpUdGNibWxtSUNoMGVYQmxiMllnZDJsdVpHOTNMbE5vWVdSNVExTlRJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lHTnZiWEJoZEdsaWJHVlRhR0ZrZVVOVFUxWmxjbk5wYjI0Z1BTQm1ZV3h6WlR0Y2JuMWNibVZzYzJVZ2FXWWdLSFI1Y0dWdlppQjNhVzVrYjNjdVUyaGhaSGxEVTFNdWNISmxjR0Z5WlZSbGJYQnNZWFJsUkc5dElEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGdTVzVqYjIxd1lYUnBZbXhsSUZOb1lXUjVRMU5USUhabGNuTnBiMjRnWkdWMFpXTjBaV1F1SUdBZ0sxeHVJQ0FnSUNBZ0lDQmdVR3hsWVhObElIVndaR0YwWlNCMGJ5QmhkQ0JzWldGemRDQkFkMlZpWTI5dGNHOXVaVzUwY3k5M1pXSmpiMjF3YjI1bGJuUnphbk5BTWk0d0xqSWdZVzVrSUdBZ0sxeHVJQ0FnSUNBZ0lDQmdRSGRsWW1OdmJYQnZibVZ1ZEhNdmMyaGhaSGxqYzNOQU1TNHpMakV1WUNrN1hHNGdJQ0FnWTI5dGNHRjBhV0pzWlZOb1lXUjVRMU5UVm1WeWMybHZiaUE5SUdaaGJITmxPMXh1ZlZ4dUx5b3FYRzRnS2lCVVpXMXdiR0YwWlNCbVlXTjBiM0o1SUhkb2FXTm9JSE5qYjNCbGN5QjBaVzF3YkdGMFpTQkVUMDBnZFhOcGJtY2dVMmhoWkhsRFUxTXVYRzRnS2lCQWNHRnlZVzBnYzJOdmNHVk9ZVzFsSUh0emRISnBibWQ5WEc0Z0tpOWNibU52Ym5OMElITm9ZV1I1VkdWdGNHeGhkR1ZHWVdOMGIzSjVJRDBnS0hOamIzQmxUbUZ0WlNrZ1BUNGdLSEpsYzNWc2RDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHTmhZMmhsUzJWNUlEMGdaMlYwVkdWdGNHeGhkR1ZEWVdOb1pVdGxlU2h5WlhOMWJIUXVkSGx3WlN3Z2MyTnZjR1ZPWVcxbEtUdGNiaUFnSUNCc1pYUWdkR1Z0Y0d4aGRHVkRZV05vWlNBOUlIUmxiWEJzWVhSbFEyRmphR1Z6TG1kbGRDaGpZV05vWlV0bGVTazdYRzRnSUNBZ2FXWWdLSFJsYlhCc1lYUmxRMkZqYUdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCMFpXMXdiR0YwWlVOaFkyaGxJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1J5YVc1bmMwRnljbUY1T2lCdVpYY2dWMlZoYTAxaGNDZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVVM1J5YVc1bk9pQnVaWGNnVFdGd0tDbGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZEdWdGNHeGhkR1ZEWVdOb1pYTXVjMlYwS0dOaFkyaGxTMlY1TENCMFpXMXdiR0YwWlVOaFkyaGxLVHRjYmlBZ0lDQjlYRzRnSUNBZ2JHVjBJSFJsYlhCc1lYUmxJRDBnZEdWdGNHeGhkR1ZEWVdOb1pTNXpkSEpwYm1kelFYSnlZWGt1WjJWMEtISmxjM1ZzZEM1emRISnBibWR6S1R0Y2JpQWdJQ0JwWmlBb2RHVnRjR3hoZEdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdWdGNHeGhkR1U3WEc0Z0lDQWdmVnh1SUNBZ0lHTnZibk4wSUd0bGVTQTlJSEpsYzNWc2RDNXpkSEpwYm1kekxtcHZhVzRvYldGeWEyVnlLVHRjYmlBZ0lDQjBaVzF3YkdGMFpTQTlJSFJsYlhCc1lYUmxRMkZqYUdVdWEyVjVVM1J5YVc1bkxtZGxkQ2hyWlhrcE8xeHVJQ0FnSUdsbUlDaDBaVzF3YkdGMFpTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWc1pXMWxiblFnUFNCeVpYTjFiSFF1WjJWMFZHVnRjR3hoZEdWRmJHVnRaVzUwS0NrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjIxd1lYUnBZbXhsVTJoaFpIbERVMU5XWlhKemFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhVzVrYjNjdVUyaGhaSGxEVTFNdWNISmxjR0Z5WlZSbGJYQnNZWFJsUkc5dEtHVnNaVzFsYm5Rc0lITmpiM0JsVG1GdFpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdWdGNHeGhkR1VnUFNCdVpYY2dWR1Z0Y0d4aGRHVW9jbVZ6ZFd4MExDQmxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdkR1Z0Y0d4aGRHVkRZV05vWlM1clpYbFRkSEpwYm1jdWMyVjBLR3RsZVN3Z2RHVnRjR3hoZEdVcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwWlcxd2JHRjBaVU5oWTJobExuTjBjbWx1WjNOQmNuSmhlUzV6WlhRb2NtVnpkV3gwTG5OMGNtbHVaM01zSUhSbGJYQnNZWFJsS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR1Z0Y0d4aGRHVTdYRzU5TzF4dVkyOXVjM1FnVkVWTlVFeEJWRVZmVkZsUVJWTWdQU0JiSjJoMGJXd25MQ0FuYzNabkoxMDdYRzR2S2lwY2JpQXFJRkpsYlc5MlpYTWdZV3hzSUhOMGVXeGxJR1ZzWlcxbGJuUnpJR1p5YjIwZ1ZHVnRjR3hoZEdWeklHWnZjaUIwYUdVZ1oybDJaVzRnYzJOdmNHVk9ZVzFsTGx4dUlDb3ZYRzVqYjI1emRDQnlaVzF2ZG1WVGRIbHNaWE5HY205dFRHbDBWR1Z0Y0d4aGRHVnpJRDBnS0hOamIzQmxUbUZ0WlNrZ1BUNGdlMXh1SUNBZ0lGUkZUVkJNUVZSRlgxUlpVRVZUTG1admNrVmhZMmdvS0hSNWNHVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEdWdGNHeGhkR1Z6SUQwZ2RHVnRjR3hoZEdWRFlXTm9aWE11WjJWMEtHZGxkRlJsYlhCc1lYUmxRMkZqYUdWTFpYa29kSGx3WlN3Z2MyTnZjR1ZPWVcxbEtTazdYRzRnSUNBZ0lDQWdJR2xtSUNoMFpXMXdiR0YwWlhNZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR1Z0Y0d4aGRHVnpMbXRsZVZOMGNtbHVaeTVtYjNKRllXTm9LQ2gwWlcxd2JHRjBaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhzZ1pXeGxiV1Z1ZERvZ2V5QmpiMjUwWlc1MElIMGdmU0E5SUhSbGJYQnNZWFJsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFbEZJREV4SUdSdlpYTnVKM1FnYzNWd2NHOXlkQ0IwYUdVZ2FYUmxjbUZpYkdVZ2NHRnlZVzBnVTJWMElHTnZibk4wY25WamRHOXlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MzUjViR1Z6SUQwZ2JtVjNJRk5sZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFRnljbUY1TG1aeWIyMG9ZMjl1ZEdWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDZHpkSGxzWlNjcEtTNW1iM0pGWVdOb0tDaHpLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bGN5NWhaR1FvY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ0YjNabFRtOWtaWE5HY205dFZHVnRjR3hoZEdVb2RHVnRjR3hoZEdVc0lITjBlV3hsY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVmVHRjYm1OdmJuTjBJSE5vWVdSNVVtVnVaR1Z5VTJWMElEMGdibVYzSUZObGRDZ3BPMXh1THlvcVhHNGdLaUJHYjNJZ2RHaGxJR2RwZG1WdUlITmpiM0JsSUc1aGJXVXNJR1Z1YzNWeVpYTWdkR2hoZENCVGFHRmtlVU5UVXlCemRIbHNaU0J6WTI5d2FXNW5JR2x6SUhCbGNtWnZjbTFsWkM1Y2JpQXFJRlJvYVhNZ2FYTWdaRzl1WlNCcWRYTjBJRzl1WTJVZ2NHVnlJSE5qYjNCbElHNWhiV1VnYzI4Z2RHaGxJR1p5WVdkdFpXNTBJR0Z1WkNCMFpXMXdiR0YwWlNCallXNXViM1JjYmlBcUlHSmxJRzF2WkdsbWFXVmtMbHh1SUNvZ0tERXBJR1Y0ZEhKaFkzUnpJSE4wZVd4bGN5Qm1jbTl0SUhSb1pTQnlaVzVrWlhKbFpDQm1jbUZuYldWdWRDQmhibVFnYUdGdVpITWdkR2hsYlNCMGJ5QlRhR0ZrZVVOVFUxeHVJQ29nZEc4Z1ltVWdjMk52Y0dWa0lHRnVaQ0JoY0hCbGJtUmxaQ0IwYnlCMGFHVWdaRzlqZFcxbGJuUmNiaUFxSUNneUtTQnlaVzF2ZG1WeklITjBlV3hsSUdWc1pXMWxiblJ6SUdaeWIyMGdZV3hzSUd4cGRDMW9kRzFzSUZSbGJYQnNZWFJsY3lCbWIzSWdkR2hwY3lCelkyOXdaU0J1WVcxbExseHVJQ3BjYmlBcUlFNXZkR1VzSUR4emRIbHNaVDRnWld4bGJXVnVkSE1nWTJGdUlHOXViSGtnWW1VZ2NHeGhZMlZrSUdsdWRHOGdkR1Z0Y0d4aGRHVnpJR1p2Y2lCMGFHVmNiaUFxSUdsdWFYUnBZV3dnY21WdVpHVnlhVzVuSUc5bUlIUm9aU0J6WTI5d1pTNGdTV1lnUEhOMGVXeGxQaUJsYkdWdFpXNTBjeUJoY21VZ2FXNWpiSFZrWldRZ2FXNGdkR1Z0Y0d4aGRHVnpYRzRnS2lCa2VXNWhiV2xqWVd4c2VTQnlaVzVrWlhKbFpDQjBieUIwYUdVZ2MyTnZjR1VnS0dGbWRHVnlJSFJvWlNCbWFYSnpkQ0J6WTI5d1pTQnlaVzVrWlhJcExDQjBhR1Y1SUhkcGJHeGNiaUFxSUc1dmRDQmlaU0J6WTI5d1pXUWdZVzVrSUhSb1pTQThjM1I1YkdVK0lIZHBiR3dnWW1VZ2JHVm1kQ0JwYmlCMGFHVWdkR1Z0Y0d4aGRHVWdZVzVrSUhKbGJtUmxjbVZrWEc0Z0tpQnZkWFJ3ZFhRdVhHNGdLaTljYm1OdmJuTjBJSEJ5WlhCaGNtVlVaVzF3YkdGMFpWTjBlV3hsY3lBOUlDaHpZMjl3WlU1aGJXVXNJSEpsYm1SbGNtVmtSRTlOTENCMFpXMXdiR0YwWlNrZ1BUNGdlMXh1SUNBZ0lITm9ZV1I1VW1WdVpHVnlVMlYwTG1Ga1pDaHpZMjl3WlU1aGJXVXBPMXh1SUNBZ0lDOHZJRWxtSUdCeVpXNWtaWEpsWkVSUFRXQWdhWE1nYzNSaGJYQmxaQ0JtY205dElHRWdWR1Z0Y0d4aGRHVXNJSFJvWlc0Z2QyVWdibVZsWkNCMGJ5QmxaR2wwSUhSb1lYUmNiaUFnSUNBdkx5QlVaVzF3YkdGMFpTZHpJSFZ1WkdWeWJIbHBibWNnZEdWdGNHeGhkR1VnWld4bGJXVnVkQzRnVDNSb1pYSjNhWE5sTENCM1pTQmpjbVZoZEdVZ2IyNWxJR2hsY21WY2JpQWdJQ0F2THlCMGJ5Qm5hWFpsSUhSdklGTm9ZV1I1UTFOVExDQjNhR2xqYUNCemRHbHNiQ0J5WlhGMWFYSmxjeUJ2Ym1VZ2QyaHBiR1VnYzJOdmNHbHVaeTVjYmlBZ0lDQmpiMjV6ZENCMFpXMXdiR0YwWlVWc1pXMWxiblFnUFNBaElYUmxiWEJzWVhSbElEOGdkR1Z0Y0d4aGRHVXVaV3hsYldWdWRDQTZJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0ozUmxiWEJzWVhSbEp5azdYRzRnSUNBZ0x5OGdUVzkyWlNCemRIbHNaWE1nYjNWMElHOW1JSEpsYm1SbGNtVmtJRVJQVFNCaGJtUWdjM1J2Y21VdVhHNGdJQ0FnWTI5dWMzUWdjM1I1YkdWeklEMGdjbVZ1WkdWeVpXUkVUMDB1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duYzNSNWJHVW5LVHRjYmlBZ0lDQmpiMjV6ZENCN0lHeGxibWQwYUNCOUlEMGdjM1I1YkdWek8xeHVJQ0FnSUM4dklFbG1JSFJvWlhKbElHRnlaU0J1YnlCemRIbHNaWE1zSUhOcmFYQWdkVzV1WldObGMzTmhjbmtnZDI5eWExeHVJQ0FnSUdsbUlDaHNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSVzV6ZFhKbElIQnlaWEJoY21WVVpXMXdiR0YwWlZOMGVXeGxjeUJwY3lCallXeHNaV1FnZEc4Z2MzVndjRzl5ZENCaFpHUnBibWRjYmlBZ0lDQWdJQ0FnTHk4Z2MzUjViR1Z6SUhacFlTQmdjSEpsY0dGeVpVRmtiM0IwWldSRGMzTlVaWGgwWUNCemFXNWpaU0IwYUdGMElISmxjWFZwY21WeklIUm9ZWFJjYmlBZ0lDQWdJQ0FnTHk4Z1lIQnlaWEJoY21WVVpXMXdiR0YwWlZOMGVXeGxjMkFnYVhNZ1kyRnNiR1ZrTGx4dUlDQWdJQ0FnSUNBdkwxeHVJQ0FnSUNBZ0lDQXZMeUJUYUdGa2VVTlRVeUIzYVd4c0lHOXViSGtnZFhCa1lYUmxJSE4wZVd4bGN5QmpiMjUwWVdsdWFXNW5JRUJoY0hCc2VTQnBiaUIwYUdVZ2RHVnRjR3hoZEdWY2JpQWdJQ0FnSUNBZ0x5OGdaMmwyWlc0Z2RHOGdZSEJ5WlhCaGNtVlVaVzF3YkdGMFpWTjBlV3hsYzJBdUlFbG1JRzV2SUd4cGRDQlVaVzF3YkdGMFpTQjNZWE1nWjJsMlpXNHNYRzRnSUNBZ0lDQWdJQzh2SUZOb1lXUjVRMU5USUhkcGJHd2dibTkwSUdKbElHRmliR1VnZEc4Z2RYQmtZWFJsSUhWelpYTWdiMllnUUdGd2NHeDVJR2x1SUdGdWVTQnlaV3hsZG1GdWRGeHVJQ0FnSUNBZ0lDQXZMeUIwWlcxd2JHRjBaUzRnU0c5M1pYWmxjaXdnZEdocGN5QnBjeUJ1YjNRZ1lTQndjbTlpYkdWdElHSmxZMkYxYzJVZ2QyVWdiMjVzZVNCamNtVmhkR1VnZEdobFhHNGdJQ0FnSUNBZ0lDOHZJSFJsYlhCc1lYUmxJR1p2Y2lCMGFHVWdjSFZ5Y0c5elpTQnZaaUJ6ZFhCd2IzSjBhVzVuSUdCd2NtVndZWEpsUVdSdmNIUmxaRU56YzFSbGVIUmdMRnh1SUNBZ0lDQWdJQ0F2THlCM2FHbGphQ0JrYjJWemJpZDBJSE4xY0hCdmNuUWdRR0Z3Y0d4NUlHRjBJR0ZzYkM1Y2JpQWdJQ0FnSUNBZ2QybHVaRzkzTGxOb1lXUjVRMU5UTG5CeVpYQmhjbVZVWlcxd2JHRjBaVk4wZVd4bGN5aDBaVzF3YkdGMFpVVnNaVzFsYm5Rc0lITmpiM0JsVG1GdFpTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNGdJQ0FnWTI5dWMzUWdZMjl1WkdWdWMyVmtVM1I1YkdVZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkemRIbHNaU2NwTzF4dUlDQWdJQzh2SUVOdmJHeGxZM1FnYzNSNWJHVnpJR2x1ZEc4Z1lTQnphVzVuYkdVZ2MzUjViR1V1SUZSb2FYTWdhR1ZzY0hNZ2RYTWdiV0ZyWlNCemRYSmxJRk5vWVdSNVExTlRYRzRnSUNBZ0x5OGdiV0Z1YVhCMWJHRjBhVzl1Y3lCM2FXeHNJRzV2ZENCd2NtVjJaVzUwSUhWeklHWnliMjBnWW1WcGJtY2dZV0pzWlNCMGJ5Qm1hWGdnZFhBZ2RHVnRjR3hoZEdWY2JpQWdJQ0F2THlCd1lYSjBJR2x1WkdsalpYTXVYRzRnSUNBZ0x5OGdUazlVUlRvZ1kyOXNiR1ZqZEdsdVp5QnpkSGxzWlhNZ2FYTWdhVzVsWm1acFkybGxiblFnWm05eUlHSnliM2R6WlhKeklHSjFkQ0JUYUdGa2VVTlRVMXh1SUNBZ0lDOHZJR04xY25KbGJuUnNlU0JrYjJWeklIUm9hWE1nWVc1NWQyRjVMaUJYYUdWdUlHbDBJR1J2WlhNZ2JtOTBMQ0IwYUdseklITm9iM1ZzWkNCaVpTQmphR0Z1WjJWa0xseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2JHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjM1I1YkdVZ1BTQnpkSGxzWlhOYmFWMDdYRzRnSUNBZ0lDQWdJSE4wZVd4bExuQmhjbVZ1ZEU1dlpHVXVjbVZ0YjNabFEyaHBiR1FvYzNSNWJHVXBPMXh1SUNBZ0lDQWdJQ0JqYjI1a1pXNXpaV1JUZEhsc1pTNTBaWGgwUTI5dWRHVnVkQ0FyUFNCemRIbHNaUzUwWlhoMFEyOXVkR1Z1ZER0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnVW1WdGIzWmxJSE4wZVd4bGN5Qm1jbTl0SUc1bGMzUmxaQ0IwWlcxd2JHRjBaWE1nYVc0Z2RHaHBjeUJ6WTI5d1pTNWNiaUFnSUNCeVpXMXZkbVZUZEhsc1pYTkdjbTl0VEdsMFZHVnRjR3hoZEdWektITmpiM0JsVG1GdFpTazdYRzRnSUNBZ0x5OGdRVzVrSUhSb1pXNGdjSFYwSUhSb1pTQmpiMjVrWlc1elpXUWdjM1I1YkdVZ2FXNTBieUIwYUdVZ1hDSnliMjkwWENJZ2RHVnRjR3hoZEdVZ2NHRnpjMlZrSUdsdUlHRnpYRzRnSUNBZ0x5OGdZSFJsYlhCc1lYUmxZQzVjYmlBZ0lDQmpiMjV6ZENCamIyNTBaVzUwSUQwZ2RHVnRjR3hoZEdWRmJHVnRaVzUwTG1OdmJuUmxiblE3WEc0Z0lDQWdhV1lnS0NFaGRHVnRjR3hoZEdVcElIdGNiaUFnSUNBZ0lDQWdhVzV6WlhKMFRtOWtaVWx1ZEc5VVpXMXdiR0YwWlNoMFpXMXdiR0YwWlN3Z1kyOXVaR1Z1YzJWa1UzUjViR1VzSUdOdmJuUmxiblF1Wm1seWMzUkRhR2xzWkNrN1hHNGdJQ0FnZlZ4dUlDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmpiMjUwWlc1MExtbHVjMlZ5ZEVKbFptOXlaU2hqYjI1a1pXNXpaV1JUZEhsc1pTd2dZMjl1ZEdWdWRDNW1hWEp6ZEVOb2FXeGtLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdUbTkwWlN3Z2FYUW5jeUJwYlhCdmNuUmhiblFnZEdoaGRDQlRhR0ZrZVVOVFV5Qm5aWFJ6SUhSb1pTQjBaVzF3YkdGMFpTQjBhR0YwSUdCc2FYUXRhSFJ0YkdCY2JpQWdJQ0F2THlCM2FXeHNJR0ZqZEhWaGJHeDVJSEpsYm1SbGNpQnpieUIwYUdGMElHbDBJR05oYmlCMWNHUmhkR1VnZEdobElITjBlV3hsSUdsdWMybGtaU0IzYUdWdVhHNGdJQ0FnTHk4Z2JtVmxaR1ZrSUNobExtY3VJRUJoY0hCc2VTQnVZWFJwZG1VZ1UyaGhaRzkzSUVSUFRTQmpZWE5sS1M1Y2JpQWdJQ0IzYVc1a2IzY3VVMmhoWkhsRFUxTXVjSEpsY0dGeVpWUmxiWEJzWVhSbFUzUjViR1Z6S0hSbGJYQnNZWFJsUld4bGJXVnVkQ3dnYzJOdmNHVk9ZVzFsS1R0Y2JpQWdJQ0JqYjI1emRDQnpkSGxzWlNBOUlHTnZiblJsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduYzNSNWJHVW5LVHRjYmlBZ0lDQnBaaUFvZDJsdVpHOTNMbE5vWVdSNVExTlRMbTVoZEdsMlpWTm9ZV1J2ZHlBbUppQnpkSGxzWlNBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJYYUdWdUlHbHVJRzVoZEdsMlpTQlRhR0ZrYjNjZ1JFOU5MQ0JsYm5OMWNtVWdkR2hsSUhOMGVXeGxJR055WldGMFpXUWdZbmtnVTJoaFpIbERVMU1nYVhOY2JpQWdJQ0FnSUNBZ0x5OGdhVzVqYkhWa1pXUWdhVzRnYVc1cGRHbGhiR3g1SUhKbGJtUmxjbVZrSUc5MWRIQjFkQ0FvWUhKbGJtUmxjbVZrUkU5TllDa3VYRzRnSUNBZ0lDQWdJSEpsYm1SbGNtVmtSRTlOTG1sdWMyVnlkRUpsWm05eVpTaHpkSGxzWlM1amJHOXVaVTV2WkdVb2RISjFaU2tzSUhKbGJtUmxjbVZrUkU5TkxtWnBjbk4wUTJocGJHUXBPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJR2xtSUNnaElYUmxiWEJzWVhSbEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUZkb1pXNGdibThnYzNSNWJHVWdhWE1nYkdWbWRDQnBiaUIwYUdVZ2RHVnRjR3hoZEdVc0lIQmhjblJ6SUhkcGJHd2dZbVVnWW5KdmEyVnVJR0Z6SUdGY2JpQWdJQ0FnSUNBZ0x5OGdjbVZ6ZFd4MExpQlVieUJtYVhnZ2RHaHBjeXdnZDJVZ2NIVjBJR0poWTJzZ2RHaGxJSE4wZVd4bElHNXZaR1VnVTJoaFpIbERVMU1nY21WdGIzWmxaRnh1SUNBZ0lDQWdJQ0F2THlCaGJtUWdkR2hsYmlCMFpXeHNJR3hwZENCMGJ5QnlaVzF2ZG1VZ2RHaGhkQ0J1YjJSbElHWnliMjBnZEdobElIUmxiWEJzWVhSbExseHVJQ0FnSUNBZ0lDQXZMeUJVYUdWeVpTQmpZVzRnWW1VZ2JtOGdjM1I1YkdVZ2FXNGdkR2hsSUhSbGJYQnNZWFJsSUdsdUlESWdZMkZ6WlhNZ0tERXBJSGRvWlc0Z1UyaGhaSGtnUkU5TlhHNGdJQ0FnSUNBZ0lDOHZJR2x6SUdsdUlIVnpaU3dnVTJoaFpIbERVMU1nY21WdGIzWmxjeUJoYkd3Z2MzUjViR1Z6TENBb01pa2dkMmhsYmlCdVlYUnBkbVVnVTJoaFpHOTNJRVJQVFZ4dUlDQWdJQ0FnSUNBdkx5QnBjeUJwYmlCMWMyVWdVMmhoWkhsRFUxTWdjbVZ0YjNabGN5QjBhR1VnYzNSNWJHVWdhV1lnYVhRZ1kyOXVkR0ZwYm5NZ2JtOGdZMjl1ZEdWdWRDNWNiaUFnSUNBZ0lDQWdMeThnVGs5VVJTd2dVMmhoWkhsRFUxTWdZM0psWVhSbGN5QnBkSE1nYjNkdUlITjBlV3hsSUhOdklIZGxJR05oYmlCellXWmxiSGtnWVdSa0wzSmxiVzkyWlZ4dUlDQWdJQ0FnSUNBdkx5QmdZMjl1WkdWdWMyVmtVM1I1YkdWZ0lHaGxjbVV1WEc0Z0lDQWdJQ0FnSUdOdmJuUmxiblF1YVc1elpYSjBRbVZtYjNKbEtHTnZibVJsYm5ObFpGTjBlV3hsTENCamIyNTBaVzUwTG1acGNuTjBRMmhwYkdRcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpXMXZkbVZ6SUQwZ2JtVjNJRk5sZENncE8xeHVJQ0FnSUNBZ0lDQnlaVzF2ZG1WekxtRmtaQ2hqYjI1a1pXNXpaV1JUZEhsc1pTazdYRzRnSUNBZ0lDQWdJSEpsYlc5MlpVNXZaR1Z6Um5KdmJWUmxiWEJzWVhSbEtIUmxiWEJzWVhSbExDQnlaVzF2ZG1WektUdGNiaUFnSUNCOVhHNTlPMXh1THlvcVhHNGdLaUJGZUhSbGJuTnBiMjRnZEc4Z2RHaGxJSE4wWVc1a1lYSmtJR0J5Wlc1a1pYSmdJRzFsZEdodlpDQjNhR2xqYUNCemRYQndiM0owY3lCeVpXNWtaWEpwYm1kY2JpQXFJSFJ2SUZOb1lXUnZkMUp2YjNSeklIZG9aVzRnZEdobElGTm9ZV1I1UkU5TklDaG9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkMlZpWTI5dGNHOXVaVzUwY3k5emFHRmtlV1J2YlNsY2JpQXFJR0Z1WkNCVGFHRmtlVU5UVXlBb2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzZGxZbU52YlhCdmJtVnVkSE12YzJoaFpIbGpjM01wSUhCdmJIbG1hV3hzY3lCaGNtVWdkWE5sWkZ4dUlDb2diM0lnZDJobGJpQjBhR1VnZDJWaVkyOXRjRzl1Wlc1MGMycHpYRzRnS2lBb2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzZGxZbU52YlhCdmJtVnVkSE12ZDJWaVkyOXRjRzl1Wlc1MGMycHpLU0J3YjJ4NVptbHNiQ0JwY3lCMWMyVmtMbHh1SUNwY2JpQXFJRUZrWkhNZ1lTQmdjMk52Y0dWT1lXMWxZQ0J2Y0hScGIyNGdkMmhwWTJnZ2FYTWdkWE5sWkNCMGJ5QnpZMjl3WlNCbGJHVnRaVzUwSUVSUFRTQmhibVFnYzNSNWJHVnphR1ZsZEhOY2JpQXFJSGRvWlc0Z2JtRjBhWFpsSUZOb1lXUnZkMFJQVFNCcGN5QjFibUYyWVdsc1lXSnNaUzRnVkdobElHQnpZMjl3WlU1aGJXVmdJSGRwYkd3Z1ltVWdZV1JrWldRZ2RHOWNiaUFxSUhSb1pTQmpiR0Z6Y3lCaGRIUnlhV0oxZEdVZ2IyWWdZV3hzSUhKbGJtUmxjbVZrSUVSUFRTNGdTVzRnWVdSa2FYUnBiMjRzSUdGdWVTQnpkSGxzWlNCbGJHVnRaVzUwY3lCM2FXeHNYRzRnS2lCaVpTQmhkWFJ2YldGMGFXTmhiR3g1SUhKbExYZHlhWFIwWlc0Z2QybDBhQ0IwYUdseklHQnpZMjl3WlU1aGJXVmdJSE5sYkdWamRHOXlJR0Z1WkNCdGIzWmxaQ0J2ZFhSY2JpQXFJRzltSUhSb1pTQnlaVzVrWlhKbFpDQkVUMDBnWVc1a0lHbHVkRzhnZEdobElHUnZZM1Z0Wlc1MElHQThhR1ZoWkQ1Z0xseHVJQ3BjYmlBcUlFbDBJR2x6SUdOdmJXMXZiaUIwYnlCMWMyVWdkR2hwY3lCeVpXNWtaWElnYldWMGFHOWtJR2x1SUdOdmJtcDFibU4wYVc5dUlIZHBkR2dnWVNCamRYTjBiMjBnWld4bGJXVnVkRnh1SUNvZ2QyaHBZMmdnY21WdVpHVnljeUJoSUhOb1lXUnZkMUp2YjNRdUlGZG9aVzRnZEdocGN5QnBjeUJrYjI1bExDQjBlWEJwWTJGc2JIa2dkR2hsSUdWc1pXMWxiblFuYzF4dUlDb2dZR3h2WTJGc1RtRnRaV0FnYzJodmRXeGtJR0psSUhWelpXUWdZWE1nZEdobElHQnpZMjl3WlU1aGJXVmdMbHh1SUNwY2JpQXFJRWx1SUdGa1pHbDBhVzl1SUhSdklFUlBUU0J6WTI5d2FXNW5MQ0JUYUdGa2VVTlRVeUJoYkhOdklITjFjSEJ2Y25SeklHRWdZbUZ6YVdNZ2MyaHBiU0JtYjNJZ1kzTnpYRzRnS2lCamRYTjBiMjBnY0hKdmNHVnlkR2xsY3lBb2JtVmxaR1ZrSUc5dWJIa2diMjRnYjJ4a1pYSWdZbkp2ZDNObGNuTWdiR2xyWlNCSlJURXhLU0JoYm1RZ1lTQnphR2x0SUdadmNseHVJQ29nWVNCa1pYQnlaV05oZEdWa0lHWmxZWFIxY21VZ1kyRnNiR1ZrSUdCQVlYQndiSGxnSUhSb1lYUWdjM1Z3Y0c5eWRITWdZWEJ3YkhscGJtY2dZU0J6WlhRZ2IyWWdZM056WEc0Z0tpQmpkWE4wYjIwZ2NISnZjR1Z5ZEdsbGN5QjBieUJoSUdkcGRtVnVJR3h2WTJGMGFXOXVMbHh1SUNwY2JpQXFJRlZ6WVdkbElHTnZibk5wWkdWeVlYUnBiMjV6T2x4dUlDcGNiaUFxSUNvZ1VHRnlkQ0IyWVd4MVpYTWdhVzRnWUR4emRIbHNaVDVnSUdWc1pXMWxiblJ6SUdGeVpTQnZibXg1SUdGd2NHeHBaV1FnZEdobElHWnBjbk4wSUhScGJXVWdZU0JuYVhabGJseHVJQ29nWUhOamIzQmxUbUZ0WldBZ2NtVnVaR1Z5Y3k0Z1UzVmljMlZ4ZFdWdWRDQmphR0Z1WjJWeklIUnZJSEJoY25SeklHbHVJSE4wZVd4bElHVnNaVzFsYm5SeklIZHBiR3dnYUdGMlpWeHVJQ29nYm04Z1pXWm1aV04wTGlCQ1pXTmhkWE5sSUc5bUlIUm9hWE1zSUhCaGNuUnpJR2x1SUhOMGVXeGxJR1ZzWlcxbGJuUnpJSE5vYjNWc1pDQnZibXg1SUdKbElIVnpaV1FnWm05eVhHNGdLaUIyWVd4MVpYTWdkR2hoZENCM2FXeHNJRzVsZG1WeUlHTm9ZVzVuWlN3Z1ptOXlJR1Y0WVcxd2JHVWdjR0Z5ZEhNZ2RHaGhkQ0J6WlhRZ2MyTnZjR1V0ZDJsa1pTQjBhR1Z0WlZ4dUlDb2dkbUZzZFdWeklHOXlJSEJoY25SeklIZG9hV05vSUhKbGJtUmxjaUJ6YUdGeVpXUWdjM1I1YkdVZ1pXeGxiV1Z1ZEhNdVhHNGdLbHh1SUNvZ0tpQk9iM1JsTENCa2RXVWdkRzhnWVNCc2FXMXBkR0YwYVc5dUlHOW1JSFJvWlNCVGFHRmtlVVJQVFNCd2IyeDVabWxzYkN3Z2NtVnVaR1Z5YVc1bklHbHVJR0ZjYmlBcUlHTjFjM1J2YlNCbGJHVnRaVzUwSjNNZ1lHTnZibk4wY25WamRHOXlZQ0JwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtMaUJKYm5OMFpXRmtJSEpsYm1SbGNtbHVaeUJ6YUc5MWJHUmNiaUFxSUdWcGRHaGxjaUJrYjI1bElHRnplVzVqYUhKdmJtOTFjMng1TENCbWIzSWdaWGhoYlhCc1pTQmhkQ0J0YVdOeWIzUmhjMnNnZEdsdGFXNW5JQ2htYjNJZ1pYaGhiWEJzWlZ4dUlDb2dZRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTZ3BZQ2tzSUc5eUlHSmxJR1JsWm1WeWNtVmtJSFZ1ZEdsc0lIUm9aU0JtYVhKemRDQjBhVzFsSUhSb1pTQmxiR1Z0Wlc1MEozTmNiaUFxSUdCamIyNXVaV04wWldSRFlXeHNZbUZqYTJBZ2NuVnVjeTVjYmlBcVhHNGdLaUJWYzJGblpTQmpiMjV6YVdSbGNtRjBhVzl1Y3lCM2FHVnVJSFZ6YVc1bklITm9hVzF0WldRZ1kzVnpkRzl0SUhCeWIzQmxjblJwWlhNZ2IzSWdZRUJoY0hCc2VXQTZYRzRnS2x4dUlDb2dLaUJYYUdWdVpYWmxjaUJoYm5rZ1pIbHVZVzFwWXlCamFHRnVaMlZ6SUdGeVpTQnRZV1JsSUhkb2FXTm9JR0ZtWm1WamRGeHVJQ29nWTNOeklHTjFjM1J2YlNCd2NtOXdaWEowYVdWekxDQmdVMmhoWkhsRFUxTXVjM1I1YkdWRmJHVnRaVzUwS0dWc1pXMWxiblFwWUNCdGRYTjBJR0psSUdOaGJHeGxaRnh1SUNvZ2RHOGdkWEJrWVhSbElIUm9aU0JsYkdWdFpXNTBMaUJVYUdWeVpTQmhjbVVnZEhkdklHTmhjMlZ6SUhkb1pXNGdkR2hwY3lCcGN5QnVaV1ZrWldRNlhHNGdLaUFvTVNrZ2RHaGxJR1ZzWlcxbGJuUWdhWE1nWTI5dWJtVmpkR1ZrSUhSdklHRWdibVYzSUhCaGNtVnVkQ3dnS0RJcElHRWdZMnhoYzNNZ2FYTWdZV1JrWldRZ2RHOGdkR2hsWEc0Z0tpQmxiR1Z0Wlc1MElIUm9ZWFFnWTJGMWMyVnpJR2wwSUhSdklHMWhkR05vSUdScFptWmxjbVZ1ZENCamRYTjBiMjBnY0hKdmNHVnlkR2xsY3k1Y2JpQXFJRlJ2SUdGa1pISmxjM01nZEdobElHWnBjbk4wSUdOaGMyVWdkMmhsYmlCeVpXNWtaWEpwYm1jZ1lTQmpkWE4wYjIwZ1pXeGxiV1Z1ZEN3Z1lITjBlV3hsUld4bGJXVnVkR0JjYmlBcUlITm9iM1ZzWkNCaVpTQmpZV3hzWldRZ2FXNGdkR2hsSUdWc1pXMWxiblFuY3lCZ1kyOXVibVZqZEdWa1EyRnNiR0poWTJ0Z0xseHVJQ3BjYmlBcUlDb2dVMmhwYlcxbFpDQmpkWE4wYjIwZ2NISnZjR1Z5ZEdsbGN5QnRZWGtnYjI1c2VTQmlaU0JrWldacGJtVmtJR1ZwZEdobGNpQm1iM0lnWVc0Z1pXNTBhWEpsWEc0Z0tpQnphR0ZrYjNkU2IyOTBJQ2htYjNJZ1pYaGhiWEJzWlN3Z2FXNGdZU0JnT21odmMzUmdJSEoxYkdVcElHOXlJSFpwWVNCaElISjFiR1VnZEdoaGRDQmthWEpsWTNSc2VWeHVJQ29nYldGMFkyaGxjeUJoYmlCbGJHVnRaVzUwSUhkcGRHZ2dZU0J6YUdGa2IzZFNiMjkwTGlCSmJpQnZkR2hsY2lCM2IzSmtjeXdnYVc1emRHVmhaQ0J2WmlCbWJHOTNhVzVuSUdaeWIyMWNiaUFxSUhCaGNtVnVkQ0IwYnlCamFHbHNaQ0JoY3lCa2J5QnVZWFJwZG1VZ1kzTnpJR04xYzNSdmJTQndjbTl3WlhKMGFXVnpMQ0J6YUdsdGJXVmtJR04xYzNSdmJTQndjbTl3WlhKMGFXVnpYRzRnS2lCbWJHOTNJRzl1YkhrZ1puSnZiU0J6YUdGa2IzZFNiMjkwY3lCMGJ5QnVaWE4wWldRZ2MyaGhaRzkzVW05dmRITXVYRzRnS2x4dUlDb2dLaUJYYUdWdUlIVnphVzVuSUdCQVlYQndiSGxnSUcxcGVHbHVaeUJqYzNNZ2MyaHZjblJvWVc1a0lIQnliM0JsY25SNUlHNWhiV1Z6SUhkcGRHaGNiaUFxSUc1dmJpMXphRzl5ZEdoaGJtUWdibUZ0WlhNZ0tHWnZjaUJsZUdGdGNHeGxJR0JpYjNKa1pYSmdJR0Z1WkNCZ1ltOXlaR1Z5TFhkcFpIUm9ZQ2tnYVhNZ2JtOTBYRzRnS2lCemRYQndiM0owWldRdVhHNGdLaTljYm1WNGNHOXlkQ0JqYjI1emRDQnlaVzVrWlhJZ1BTQW9jbVZ6ZFd4MExDQmpiMjUwWVdsdVpYSXNJRzl3ZEdsdmJuTXBJRDArSUh0Y2JpQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NZ2ZId2dkSGx3Wlc5bUlHOXdkR2x2Ym5NZ0lUMDlJQ2R2WW1wbFkzUW5JSHg4SUNGdmNIUnBiMjV6TG5OamIzQmxUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxUm9aU0JnYzJOdmNHVk9ZVzFsWUNCdmNIUnBiMjRnYVhNZ2NtVnhkV2x5WldRdUp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdOdmJuTjBJSE5qYjNCbFRtRnRaU0E5SUc5d2RHbHZibk11YzJOdmNHVk9ZVzFsTzF4dUlDQWdJR052Ym5OMElHaGhjMUpsYm1SbGNtVmtJRDBnY0dGeWRITXVhR0Z6S0dOdmJuUmhhVzVsY2lrN1hHNGdJQ0FnWTI5dWMzUWdibVZsWkhOVFkyOXdhVzVuSUQwZ1kyOXRjR0YwYVdKc1pWTm9ZV1I1UTFOVFZtVnljMmx2YmlBbUpseHVJQ0FnSUNBZ0lDQmpiMjUwWVdsdVpYSXVibTlrWlZSNWNHVWdQVDA5SURFeElDOHFJRTV2WkdVdVJFOURWVTFGVGxSZlJsSkJSMDFGVGxSZlRrOUVSU0FxTHlBbUpseHVJQ0FnSUNBZ0lDQWhJV052Ym5SaGFXNWxjaTVvYjNOME8xeHVJQ0FnSUM4dklFaGhibVJzWlNCbWFYSnpkQ0J5Wlc1a1pYSWdkRzhnWVNCelkyOXdaU0J6Y0dWamFXRnNiSGt1TGk1Y2JpQWdJQ0JqYjI1emRDQm1hWEp6ZEZOamIzQmxVbVZ1WkdWeUlEMGdibVZsWkhOVFkyOXdhVzVuSUNZbUlDRnphR0ZrZVZKbGJtUmxjbE5sZEM1b1lYTW9jMk52Y0dWT1lXMWxLVHRjYmlBZ0lDQXZMeUJQYmlCbWFYSnpkQ0J6WTI5d1pTQnlaVzVrWlhJc0lISmxibVJsY2lCcGJuUnZJR0VnWm5KaFoyMWxiblE3SUhSb2FYTWdZMkZ1Ym05MElHSmxJR0VnYzJsdVoyeGxYRzRnSUNBZ0x5OGdabkpoWjIxbGJuUWdkR2hoZENCcGN5QnlaWFZ6WldRZ2MybHVZMlVnYm1WemRHVmtJSEpsYm1SbGNuTWdZMkZ1SUc5alkzVnlJSE41Ym1Ob2NtOXViM1Z6YkhrdVhHNGdJQ0FnWTI5dWMzUWdjbVZ1WkdWeVEyOXVkR0ZwYm1WeUlEMGdabWx5YzNSVFkyOXdaVkpsYm1SbGNpQS9JR1J2WTNWdFpXNTBMbU55WldGMFpVUnZZM1Z0Wlc1MFJuSmhaMjFsYm5Rb0tTQTZJR052Ym5SaGFXNWxjanRjYmlBZ0lDQnNhWFJTWlc1a1pYSW9jbVZ6ZFd4MExDQnlaVzVrWlhKRGIyNTBZV2x1WlhJc0lFOWlhbVZqZEM1aGMzTnBaMjRvZXlCMFpXMXdiR0YwWlVaaFkzUnZjbms2SUhOb1lXUjVWR1Z0Y0d4aGRHVkdZV04wYjNKNUtITmpiM0JsVG1GdFpTa2dmU3dnYjNCMGFXOXVjeWtwTzF4dUlDQWdJQzh2SUZkb1pXNGdjR1Z5Wm05eWJXbHVaeUJtYVhKemRDQnpZMjl3WlNCeVpXNWtaWElzWEc0Z0lDQWdMeThnS0RFcElGZGxKM1psSUhKbGJtUmxjbVZrSUdsdWRHOGdZU0JtY21GbmJXVnVkQ0J6YnlCMGFHRjBJSFJvWlhKbEozTWdZU0JqYUdGdVkyVWdkRzljYmlBZ0lDQXZMeUJnY0hKbGNHRnlaVlJsYlhCc1lYUmxVM1I1YkdWellDQmlaV1p2Y21VZ2MzVmlMV1ZzWlcxbGJuUnpJR2hwZENCMGFHVWdSRTlOWEc0Z0lDQWdMeThnS0hkb2FXTm9JRzFwWjJoMElHTmhkWE5sSUhSb1pXMGdkRzhnY21WdVpHVnlJR0poYzJWa0lHOXVJR0VnWTI5dGJXOXVJSEJoZEhSbGNtNGdiMlpjYmlBZ0lDQXZMeUJ5Wlc1a1pYSnBibWNnYVc0Z1lTQmpkWE4wYjIwZ1pXeGxiV1Z1ZENkeklHQmpiMjV1WldOMFpXUkRZV3hzWW1GamEyQXBPMXh1SUNBZ0lDOHZJQ2d5S1NCVFkyOXdaU0IwYUdVZ2RHVnRjR3hoZEdVZ2QybDBhQ0JUYUdGa2VVTlRVeUJ2Ym1VZ2RHbHRaU0J2Ym14NUlHWnZjaUIwYUdseklITmpiM0JsTGx4dUlDQWdJQzh2SUNnektTQlNaVzVrWlhJZ2RHaGxJR1p5WVdkdFpXNTBJR2x1ZEc4Z2RHaGxJR052Ym5SaGFXNWxjaUJoYm1RZ2JXRnJaU0J6ZFhKbElIUm9aVnh1SUNBZ0lDOHZJR052Ym5SaGFXNWxjaUJyYm05M2N5QnBkSE1nWUhCaGNuUmdJR2x6SUhSb1pTQnZibVVnZDJVZ2FuVnpkQ0J5Wlc1a1pYSmxaQzRnVkdocGN5Qmxibk4xY21WelhHNGdJQ0FnTHk4Z1JFOU5JSGRwYkd3Z1ltVWdjbVV0ZFhObFpDQnZiaUJ6ZFdKelpYRjFaVzUwSUhKbGJtUmxjbk11WEc0Z0lDQWdhV1lnS0dacGNuTjBVMk52Y0dWU1pXNWtaWElwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGeWRDQTlJSEJoY25SekxtZGxkQ2h5Wlc1a1pYSkRiMjUwWVdsdVpYSXBPMXh1SUNBZ0lDQWdJQ0J3WVhKMGN5NWtaV3hsZEdVb2NtVnVaR1Z5UTI5dWRHRnBibVZ5S1R0Y2JpQWdJQ0FnSUNBZ0x5OGdVMmhoWkhsRFUxTWdiV2xuYUhRZ2FHRjJaU0J6ZEhsc1pTQnphR1ZsZEhNZ0tHVXVaeTRnWm5KdmJTQmdjSEpsY0dGeVpVRmtiM0IwWldSRGMzTlVaWGgwWUNsY2JpQWdJQ0FnSUNBZ0x5OGdkR2hoZENCemFHOTFiR1FnWVhCd2JIa2dkRzhnWUhKbGJtUmxja052Ym5SaGFXNWxjbUFnWlhabGJpQnBaaUIwYUdVZ2NtVnVaR1Z5WldRZ2RtRnNkV1VnYVhOY2JpQWdJQ0FnSUNBZ0x5OGdibTkwSUdFZ1ZHVnRjR3hoZEdWSmJuTjBZVzVqWlM0Z1NHOTNaWFpsY2l3Z2FYUWdkMmxzYkNCdmJteDVJR2x1YzJWeWRDQnpZMjl3WldRZ2MzUjViR1Z6WEc0Z0lDQWdJQ0FnSUM4dklHbHVkRzhnZEdobElHUnZZM1Z0Wlc1MElHbG1JR0J3Y21Wd1lYSmxWR1Z0Y0d4aGRHVlRkSGxzWlhOZ0lHaGhjeUJoYkhKbFlXUjVJR0psWlc0Z1kyRnNiR1ZrWEc0Z0lDQWdJQ0FnSUM4dklHWnZjaUIwYUdVZ1oybDJaVzRnYzJOdmNHVWdibUZ0WlM1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEdWdGNHeGhkR1VnUFNCd1lYSjBMblpoYkhWbElHbHVjM1JoYm1ObGIyWWdWR1Z0Y0d4aGRHVkpibk4wWVc1alpTQS9YRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYSjBMblpoYkhWbExuUmxiWEJzWVhSbElEcGNiaUFnSUNBZ0lDQWdJQ0FnSUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ2NISmxjR0Z5WlZSbGJYQnNZWFJsVTNSNWJHVnpLSE5qYjNCbFRtRnRaU3dnY21WdVpHVnlRMjl1ZEdGcGJtVnlMQ0IwWlcxd2JHRjBaU2s3WEc0Z0lDQWdJQ0FnSUhKbGJXOTJaVTV2WkdWektHTnZiblJoYVc1bGNpd2dZMjl1ZEdGcGJtVnlMbVpwY25OMFEyaHBiR1FwTzF4dUlDQWdJQ0FnSUNCamIyNTBZV2x1WlhJdVlYQndaVzVrUTJocGJHUW9jbVZ1WkdWeVEyOXVkR0ZwYm1WeUtUdGNiaUFnSUNBZ0lDQWdjR0Z5ZEhNdWMyVjBLR052Ym5SaGFXNWxjaXdnY0dGeWRDazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklFRm1kR1Z5SUdWc1pXMWxiblJ6SUdoaGRtVWdhR2wwSUhSb1pTQkVUMDBzSUhWd1pHRjBaU0J6ZEhsc2FXNW5JR2xtSUhSb2FYTWdhWE1nZEdobFhHNGdJQ0FnTHk4Z2FXNXBkR2xoYkNCeVpXNWtaWElnZEc4Z2RHaHBjeUJqYjI1MFlXbHVaWEl1WEc0Z0lDQWdMeThnVkdocGN5QnBjeUJ1WldWa1pXUWdkMmhsYm1WMlpYSWdaSGx1WVcxcFl5QmphR0Z1WjJWeklHRnlaU0J0WVdSbElITnZJR2wwSUhkdmRXeGtJR0psWEc0Z0lDQWdMeThnYzJGbVpYTjBJSFJ2SUdSdklHVjJaWEo1SUhKbGJtUmxjanNnYUc5M1pYWmxjaXdnZEdocGN5QjNiM1ZzWkNCeVpXZHlaWE56SUhCbGNtWnZjbTFoYm1ObFhHNGdJQ0FnTHk4Z2MyOGdkMlVnYkdWaGRtVWdhWFFnZFhBZ2RHOGdkR2hsSUhWelpYSWdkRzhnWTJGc2JDQmdVMmhoWkhsRFUxTXVjM1I1YkdWRmJHVnRaVzUwWUZ4dUlDQWdJQzh2SUdadmNpQmtlVzVoYldsaklHTm9ZVzVuWlhNdVhHNGdJQ0FnYVdZZ0tDRm9ZWE5TWlc1a1pYSmxaQ0FtSmlCdVpXVmtjMU5qYjNCcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnZDJsdVpHOTNMbE5vWVdSNVExTlRMbk4wZVd4bFJXeGxiV1Z1ZENoamIyNTBZV2x1WlhJdWFHOXpkQ2s3WEc0Z0lDQWdmVnh1ZlR0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QWE5vWVdSNUxYSmxibVJsY2k1cWN5NXRZWEFpTENJdktpcGNiaUFxSUVCc2FXTmxibk5sWEc0Z0tpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UY2dWR2hsSUZCdmJIbHRaWElnVUhKdmFtVmpkQ0JCZFhSb2IzSnpMaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDb2dWR2hwY3lCamIyUmxJRzFoZVNCdmJteDVJR0psSUhWelpXUWdkVzVrWlhJZ2RHaGxJRUpUUkNCemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHRjBYRzRnS2lCb2RIUndPaTh2Y0c5c2VXMWxjaTVuYVhSb2RXSXVhVzh2VEVsRFJVNVRSUzUwZUhSY2JpQXFJRlJvWlNCamIyMXdiR1YwWlNCelpYUWdiMllnWVhWMGFHOXljeUJ0WVhrZ1ltVWdabTkxYm1RZ1lYUmNiaUFxSUdoMGRIQTZMeTl3YjJ4NWJXVnlMbWRwZEdoMVlpNXBieTlCVlZSSVQxSlRMblI0ZEZ4dUlDb2dWR2hsSUdOdmJYQnNaWFJsSUhObGRDQnZaaUJqYjI1MGNtbGlkWFJ2Y25NZ2JXRjVJR0psSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlEwOU9WRkpKUWxWVVQxSlRMblI0ZEZ4dUlDb2dRMjlrWlNCa2FYTjBjbWxpZFhSbFpDQmllU0JIYjI5bmJHVWdZWE1nY0dGeWRDQnZaaUIwYUdVZ2NHOXNlVzFsY2lCd2NtOXFaV04wSUdseklHRnNjMjljYmlBcUlITjFZbXBsWTNRZ2RHOGdZVzRnWVdSa2FYUnBiMjVoYkNCSlVDQnlhV2RvZEhNZ1ozSmhiblFnWm05MWJtUWdZWFJjYmlBcUlHaDBkSEE2THk5d2IyeDViV1Z5TG1kcGRHaDFZaTVwYnk5UVFWUkZUbFJUTG5SNGRGeHVJQ292WEc1MllYSWdYMkU3WEc0dktpcGNiaUFxSUZkb1pXNGdkWE5wYm1jZ1EyeHZjM1Z5WlNCRGIyMXdhV3hsY2l3Z1NsTkRiMjF3YVd4bGNsOXlaVzVoYldWUWNtOXdaWEowZVNod2NtOXdaWEowZVN3Z2IySnFaV04wS1NCcGMxeHVJQ29nY21Wd2JHRmpaV1FnWVhRZ1kyOXRjR2xzWlNCMGFXMWxJR0o1SUhSb1pTQnRkVzVuWldRZ2JtRnRaU0JtYjNJZ2IySnFaV04wVzNCeWIzQmxjblI1WFM0Z1YyVWdZMkZ1Ym05MFhHNGdLaUJoYkdsaGN5QjBhR2x6SUdaMWJtTjBhVzl1TENCemJ5QjNaU0JvWVhabElIUnZJSFZ6WlNCaElITnRZV3hzSUhOb2FXMGdkR2hoZENCb1lYTWdkR2hsSUhOaGJXVmNiaUFxSUdKbGFHRjJhVzl5SUhkb1pXNGdibTkwSUdOdmJYQnBiR2x1Wnk1Y2JpQXFMMXh1ZDJsdVpHOTNMa3BUUTI5dGNHbHNaWEpmY21WdVlXMWxVSEp2Y0dWeWRIa2dQVnh1SUNBZ0lDaHdjbTl3TENCZmIySnFLU0E5UGlCd2NtOXdPMXh1Wlhod2IzSjBJR052Ym5OMElHUmxabUYxYkhSRGIyNTJaWEowWlhJZ1BTQjdYRzRnSUNBZ2RHOUJkSFJ5YVdKMWRHVW9kbUZzZFdVc0lIUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVKdmIyeGxZVzQ2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbElEOGdKeWNnT2lCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JQWW1wbFkzUTZYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRUZ5Y21GNU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2xtSUhSb1pTQjJZV3gxWlNCcGN5QmdiblZzYkdBZ2IzSWdZSFZ1WkdWbWFXNWxaR0FnY0dGemN5QjBhR2x6SUhSb2NtOTFaMmhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCMGJ5QmhiR3h2ZHlCeVpXMXZkbWx1Wnk5dWJ5QmphR0Z1WjJVZ1ltVm9ZWFpwYjNJdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhaaGJIVmxJRDA5SUc1MWJHd2dQeUIyWVd4MVpTQTZJRXBUVDA0dWMzUnlhVzVuYVdaNUtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1U3WEc0Z0lDQWdmU3hjYmlBZ0lDQm1jbTl0UVhSMGNtbGlkWFJsS0haaGJIVmxMQ0IwZVhCbEtTQjdYRzRnSUNBZ0lDQWdJSE4zYVhSamFDQW9kSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQkNiMjlzWldGdU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaU0FoUFQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnVG5WdFltVnlPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjJZV3gxWlNBOVBUMGdiblZzYkNBL0lHNTFiR3dnT2lCT2RXMWlaWElvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JQWW1wbFkzUTZYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRUZ5Y21GNU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCS1UwOU9MbkJoY25ObEtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1U3WEc0Z0lDQWdmVnh1ZlR0Y2JpOHFLbHh1SUNvZ1EyaGhibWRsSUdaMWJtTjBhVzl1SUhSb1lYUWdjbVYwZFhKdWN5QjBjblZsSUdsbUlHQjJZV3gxWldBZ2FYTWdaR2xtWm1WeVpXNTBJR1p5YjIwZ1lHOXNaRlpoYkhWbFlDNWNiaUFxSUZSb2FYTWdiV1YwYUc5a0lHbHpJSFZ6WldRZ1lYTWdkR2hsSUdSbFptRjFiSFFnWm05eUlHRWdjSEp2Y0dWeWRIa25jeUJnYUdGelEyaGhibWRsWkdBZ1puVnVZM1JwYjI0dVhHNGdLaTljYm1WNGNHOXlkQ0JqYjI1emRDQnViM1JGY1hWaGJDQTlJQ2gyWVd4MVpTd2diMnhrS1NBOVBpQjdYRzRnSUNBZ0x5OGdWR2hwY3lCbGJuTjFjbVZ6SUNodmJHUTlQVTVoVGl3Z2RtRnNkV1U5UFU1aFRpa2dZV3gzWVhseklISmxkSFZ5Ym5NZ1ptRnNjMlZjYmlBZ0lDQnlaWFIxY200Z2IyeGtJQ0U5UFNCMllXeDFaU0FtSmlBb2IyeGtJRDA5UFNCdmJHUWdmSHdnZG1Gc2RXVWdQVDA5SUhaaGJIVmxLVHRjYm4wN1hHNWpiMjV6ZENCa1pXWmhkV3gwVUhKdmNHVnlkSGxFWldOc1lYSmhkR2x2YmlBOUlIdGNiaUFnSUNCaGRIUnlhV0oxZEdVNklIUnlkV1VzWEc0Z0lDQWdkSGx3WlRvZ1UzUnlhVzVuTEZ4dUlDQWdJR052Ym5abGNuUmxjam9nWkdWbVlYVnNkRU52Ym5abGNuUmxjaXhjYmlBZ0lDQnlaV1pzWldOME9pQm1ZV3h6WlN4Y2JpQWdJQ0JvWVhORGFHRnVaMlZrT2lCdWIzUkZjWFZoYkZ4dWZUdGNibU52Ym5OMElGTlVRVlJGWDBoQlUxOVZVRVJCVkVWRUlEMGdNVHRjYm1OdmJuTjBJRk5VUVZSRlgxVlFSRUZVUlY5U1JWRlZSVk5VUlVRZ1BTQXhJRHc4SURJN1hHNWpiMjV6ZENCVFZFRlVSVjlKVTE5U1JVWk1SVU5VU1U1SFgxUlBYMEZVVkZKSlFsVlVSU0E5SURFZ1BEd2dNenRjYm1OdmJuTjBJRk5VUVZSRlgwbFRYMUpGUmt4RlExUkpUa2RmVkU5ZlVGSlBVRVZTVkZrZ1BTQXhJRHc4SURRN1hHNHZLaXBjYmlBcUlGUm9aU0JEYkc5emRYSmxJRXBUSUVOdmJYQnBiR1Z5SUdSdlpYTnVKM1FnWTNWeWNtVnVkR3g1SUdoaGRtVWdaMjl2WkNCemRYQndiM0owSUdadmNpQnpkR0YwYVdOY2JpQXFJSEJ5YjNCbGNuUjVJSE5sYldGdWRHbGpjeUIzYUdWeVpTQmNJblJvYVhOY0lpQnBjeUJrZVc1aGJXbGpJQ2hsTG1jdVhHNGdLaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2WjI5dloyeGxMMk5zYjNOMWNtVXRZMjl0Y0dsc1pYSXZhWE56ZFdWekx6TXhOemNnWVc1a0lHOTBhR1Z5Y3lrZ2MyOGdkMlVnZFhObFhHNGdLaUIwYUdseklHaGhZMnNnZEc4Z1lubHdZWE56SUdGdWVTQnlaWGR5YVhScGJtY2dZbmtnZEdobElHTnZiWEJwYkdWeUxseHVJQ292WEc1amIyNXpkQ0JtYVc1aGJHbDZaV1FnUFNBblptbHVZV3hwZW1Wa0p6dGNiaThxS2x4dUlDb2dRbUZ6WlNCbGJHVnRaVzUwSUdOc1lYTnpJSGRvYVdOb0lHMWhibUZuWlhNZ1pXeGxiV1Z1ZENCd2NtOXdaWEowYVdWeklHRnVaQ0JoZEhSeWFXSjFkR1Z6TGlCWGFHVnVYRzRnS2lCd2NtOXdaWEowYVdWeklHTm9ZVzVuWlN3Z2RHaGxJR0IxY0dSaGRHVmdJRzFsZEdodlpDQnBjeUJoYzNsdVkyaHliMjV2ZFhOc2VTQmpZV3hzWldRdUlGUm9hWE1nYldWMGFHOWtYRzRnS2lCemFHOTFiR1FnWW1VZ2MzVndjR3hwWldRZ1lua2djM1ZpWTJ4aGMzTmxjbk1nZEc4Z2NtVnVaR1Z5SUhWd1pHRjBaWE1nWVhNZ1pHVnphWEpsWkM1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGVndaR0YwYVc1blJXeGxiV1Z1ZENCbGVIUmxibVJ6SUVoVVRVeEZiR1Z0Wlc1MElIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkWEJrWVhSbFUzUmhkR1VnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJuTjBZVzVqWlZCeWIzQmxjblJwWlhNZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQzh2SUVsdWFYUnBZV3hwZW1VZ2RHOGdZVzRnZFc1eVpYTnZiSFpsWkNCUWNtOXRhWE5sSUhOdklIZGxJR05oYmlCdFlXdGxJSE4xY21VZ2RHaGxJR1ZzWlcxbGJuUWdhR0Z6WEc0Z0lDQWdJQ0FnSUM4dklHTnZibTVsWTNSbFpDQmlaV1p2Y21VZ1ptbHljM1FnZFhCa1lYUmxMbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWUWNtOXRhWE5sSUQwZ2JtVjNJRkJ5YjIxcGMyVW9LSEpsY3lrZ1BUNGdkR2hwY3k1ZlpXNWhZbXhsVlhCa1lYUnBibWRTWlhOdmJIWmxjaUE5SUhKbGN5azdYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQk5ZWEFnZDJsMGFDQnJaWGx6SUdadmNpQmhibmtnY0hKdmNHVnlkR2xsY3lCMGFHRjBJR2hoZG1VZ1kyaGhibWRsWkNCemFXNWpaU0IwYUdVZ2JHRnpkRnh1SUNBZ0lDQWdJQ0FnS2lCMWNHUmhkR1VnWTNsamJHVWdkMmwwYUNCd2NtVjJhVzkxY3lCMllXeDFaWE11WEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amFHRnVaMlZrVUhKdmNHVnlkR2xsY3lBOUlHNWxkeUJOWVhBb0tUdGNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlFMWhjQ0IzYVhSb0lHdGxlWE1nYjJZZ2NISnZjR1Z5ZEdsbGN5QjBhR0YwSUhOb2IzVnNaQ0JpWlNCeVpXWnNaV04wWldRZ2QyaGxiaUIxY0dSaGRHVmtMbHh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WbWJHVmpkR2x1WjFCeWIzQmxjblJwWlhNZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXNXBkR2xoYkdsNlpTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklHRWdiR2x6ZENCdlppQmhkSFJ5YVdKMWRHVnpJR052Y25KbGMzQnZibVJwYm1jZ2RHOGdkR2hsSUhKbFoybHpkR1Z5WldRZ2NISnZjR1Z5ZEdsbGN5NWNiaUFnSUNBZ0tpQkFibTlqYjJ4c1lYQnpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjBZWFJwWXlCblpYUWdiMkp6WlhKMlpXUkJkSFJ5YVdKMWRHVnpLQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QnViM1JsT2lCd2FXZG5lU0JpWVdOcmFXNW5JRzl1SUhSb2FYTWdkRzhnWlc1emRYSmxJSGRsSjNKbElHWnBibUZzYVhwbFpDNWNiaUFnSUNBZ0lDQWdkR2hwY3k1bWFXNWhiR2w2WlNncE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCaGRIUnlhV0oxZEdWeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUM4dklGVnpaU0JtYjNKRllXTm9JSE52SUhSb2FYTWdkMjl5YTNNZ1pYWmxiaUJwWmlCbWIzSXZiMllnYkc5dmNITWdZWEpsSUdOdmJYQnBiR1ZrSUhSdklHWnZjaUJzYjI5d2MxeHVJQ0FnSUNBZ0lDQXZMeUJsZUhCbFkzUnBibWNnWVhKeVlYbHpYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTnNZWE56VUhKdmNHVnlkR2xsY3k1bWIzSkZZV05vS0NoMkxDQndLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmhkSFJ5SUQwZ2RHaHBjeTVmWVhSMGNtbGlkWFJsVG1GdFpVWnZjbEJ5YjNCbGNuUjVLSEFzSUhZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRjBkSElnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyRjBkSEpwWW5WMFpWUnZVSEp2Y0dWeWRIbE5ZWEF1YzJWMEtHRjBkSElzSUhBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjBkSEpwWW5WMFpYTXVjSFZ6YUNoaGRIUnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoZEhSeWFXSjFkR1Z6TzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGYm5OMWNtVnpJSFJvWlNCd2NtbDJZWFJsSUdCZlkyeGhjM05RY205d1pYSjBhV1Z6WUNCd2NtOXdaWEowZVNCdFpYUmhaR0YwWVNCcGN5QmpjbVZoZEdWa0xseHVJQ0FnSUNBcUlFbHVJR0ZrWkdsMGFXOXVJSFJ2SUdCbWFXNWhiR2w2WldBZ2RHaHBjeUJwY3lCaGJITnZJR05oYkd4bFpDQnBiaUJnWTNKbFlYUmxVSEp2Y0dWeWRIbGdJSFJ2WEc0Z0lDQWdJQ29nWlc1emRYSmxJSFJvWlNCZ1FIQnliM0JsY25SNVlDQmtaV052Y21GMGIzSWdZMkZ1SUdGa1pDQndjbTl3WlhKMGVTQnRaWFJoWkdGMFlTNWNiaUFnSUNBZ0tpOWNiaUFnSUNBdktpb2dRRzV2WTI5c2JHRndjMlVnS2k5Y2JpQWdJQ0J6ZEdGMGFXTWdYMlZ1YzNWeVpVTnNZWE56VUhKdmNHVnlkR2xsY3lncElIdGNiaUFnSUNBZ0lDQWdMeThnWlc1emRYSmxJSEJ5YVhaaGRHVWdjM1J2Y21GblpTQm1iM0lnY0hKdmNHVnlkSGtnWkdWamJHRnlZWFJwYjI1ekxseHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1NsTkRiMjF3YVd4bGNsOXlaVzVoYldWUWNtOXdaWEowZVNnblgyTnNZWE56VUhKdmNHVnlkR2xsY3ljc0lIUm9hWE1wS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZMnhoYzNOUWNtOXdaWEowYVdWeklEMGdibVYzSUUxaGNDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdUazlVUlRvZ1YyOXlhMkZ5YjNWdVpDQkpSVEV4SUc1dmRDQnpkWEJ3YjNKMGFXNW5JRTFoY0NCamIyNXpkSEoxWTNSdmNpQmhjbWQxYldWdWRDNWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSE4xY0dWeVVISnZjR1Z5ZEdsbGN5QTlJRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmloMGFHbHpLUzVmWTJ4aGMzTlFjbTl3WlhKMGFXVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE4xY0dWeVVISnZjR1Z5ZEdsbGN5QWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzVndaWEpRY205d1pYSjBhV1Z6TG1admNrVmhZMmdvS0hZc0lHc3BJRDArSUhSb2FYTXVYMk5zWVhOelVISnZjR1Z5ZEdsbGN5NXpaWFFvYXl3Z2Rpa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTnlaV0YwWlhNZ1lTQndjbTl3WlhKMGVTQmhZMk5sYzNOdmNpQnZiaUIwYUdVZ1pXeGxiV1Z1ZENCd2NtOTBiM1I1Y0dVZ2FXWWdiMjVsSUdSdlpYTWdibTkwSUdWNGFYTjBYRzRnSUNBZ0lDb2dZVzVrSUhOMGIzSmxjeUJoSUZCeWIzQmxjblI1UkdWamJHRnlZWFJwYjI0Z1ptOXlJSFJvWlNCd2NtOXdaWEowZVNCM2FYUm9JSFJvWlNCbmFYWmxiaUJ2Y0hScGIyNXpMbHh1SUNBZ0lDQXFJRlJvWlNCd2NtOXdaWEowZVNCelpYUjBaWElnWTJGc2JITWdkR2hsSUhCeWIzQmxjblI1SjNNZ1lHaGhjME5vWVc1blpXUmdJSEJ5YjNCbGNuUjVJRzl3ZEdsdmJseHVJQ0FnSUNBcUlHOXlJSFZ6WlhNZ1lTQnpkSEpwWTNRZ2FXUmxiblJwZEhrZ1kyaGxZMnNnZEc4Z1pHVjBaWEp0YVc1bElIZG9aWFJvWlhJZ2IzSWdibTkwSUhSdklISmxjWFZsYzNSY2JpQWdJQ0FnS2lCaGJpQjFjR1JoZEdVdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCVWFHbHpJRzFsZEdodlpDQnRZWGtnWW1VZ2IzWmxjbkpwWkdSbGJpQjBieUJqZFhOMGIyMXBlbVVnY0hKdmNHVnlkR2xsY3pzZ2FHOTNaWFpsY2l4Y2JpQWdJQ0FnS2lCM2FHVnVJR1J2YVc1bklITnZMQ0JwZENkeklHbHRjRzl5ZEdGdWRDQjBieUJqWVd4c0lHQnpkWEJsY2k1amNtVmhkR1ZRY205d1pYSjBlV0FnZEc4Z1pXNXpkWEpsWEc0Z0lDQWdJQ29nZEdobElIQnliM0JsY25SNUlHbHpJSE5sZEhWd0lHTnZjbkpsWTNSc2VTNGdWR2hwY3lCdFpYUm9iMlFnWTJGc2JITmNiaUFnSUNBZ0tpQmdaMlYwVUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5WUNCcGJuUmxjbTVoYkd4NUlIUnZJR2RsZENCaElHUmxjMk55YVhCMGIzSWdkRzhnYVc1emRHRnNiQzVjYmlBZ0lDQWdLaUJVYnlCamRYTjBiMjFwZW1VZ2QyaGhkQ0J3Y205d1pYSjBhV1Z6SUdSdklIZG9aVzRnZEdobGVTQmhjbVVnWjJWMElHOXlJSE5sZEN3Z2IzWmxjbkpwWkdWY2JpQWdJQ0FnS2lCZ1oyVjBVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlZQzRnVkc4Z1kzVnpkRzl0YVhwbElIUm9aU0J2Y0hScGIyNXpJR1p2Y2lCaElIQnliM0JsY25SNUxGeHVJQ0FnSUNBcUlHbHRjR3hsYldWdWRDQmdZM0psWVhSbFVISnZjR1Z5ZEhsZ0lHeHBhMlVnZEdocGN6cGNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlITjBZWFJwWXlCamNtVmhkR1ZRY205d1pYSjBlU2h1WVcxbExDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDb2dJQ0J2Y0hScGIyNXpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaHZjSFJwYjI1ekxDQjdiWGxQY0hScGIyNDZJSFJ5ZFdWOUtUdGNiaUFnSUNBZ0tpQWdJSE4xY0dWeUxtTnlaV0YwWlZCeWIzQmxjblI1S0c1aGJXVXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQXFJSDFjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ1YjJOdmJHeGhjSE5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM1JoZEdsaklHTnlaV0YwWlZCeWIzQmxjblI1S0c1aGJXVXNJRzl3ZEdsdmJuTWdQU0JrWldaaGRXeDBVSEp2Y0dWeWRIbEVaV05zWVhKaGRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBdkx5Qk9iM1JsTENCemFXNWpaU0IwYUdseklHTmhiaUJpWlNCallXeHNaV1FnWW5rZ2RHaGxJR0JBY0hKdmNHVnlkSGxnSUdSbFkyOXlZWFJ2Y2lCM2FHbGphRnh1SUNBZ0lDQWdJQ0F2THlCcGN5QmpZV3hzWldRZ1ltVm1iM0psSUdCbWFXNWhiR2w2WldBc0lIZGxJR1Z1YzNWeVpTQnpkRzl5WVdkbElHVjRhWE4wY3lCbWIzSWdjSEp2Y0dWeWRIbGNiaUFnSUNBZ0lDQWdMeThnYldWMFlXUmhkR0V1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlZ1YzNWeVpVTnNZWE56VUhKdmNHVnlkR2xsY3lncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amJHRnpjMUJ5YjNCbGNuUnBaWE11YzJWMEtHNWhiV1VzSUc5d2RHbHZibk1wTzF4dUlDQWdJQ0FnSUNBdkx5QkVieUJ1YjNRZ1oyVnVaWEpoZEdVZ1lXNGdZV05qWlhOemIzSWdhV1lnZEdobElIQnliM1J2ZEhsd1pTQmhiSEpsWVdSNUlHaGhjeUJ2Ym1Vc0lITnBibU5sWEc0Z0lDQWdJQ0FnSUM4dklHbDBJSGR2ZFd4a0lHSmxJR3h2YzNRZ2IzUm9aWEozYVhObElHRnVaQ0IwYUdGMElIZHZkV3hrSUc1bGRtVnlJR0psSUhSb1pTQjFjMlZ5SjNNZ2FXNTBaVzUwYVc5dU8xeHVJQ0FnSUNBZ0lDQXZMeUJKYm5OMFpXRmtMQ0IzWlNCbGVIQmxZM1FnZFhObGNuTWdkRzhnWTJGc2JDQmdjbVZ4ZFdWemRGVndaR0YwWldBZ2RHaGxiWE5sYkhabGN5Qm1jbTl0WEc0Z0lDQWdJQ0FnSUM4dklIVnpaWEl0WkdWbWFXNWxaQ0JoWTJObGMzTnZjbk11SUU1dmRHVWdkR2hoZENCcFppQjBhR1VnYzNWd1pYSWdhR0Z6SUdGdUlHRmpZMlZ6YzI5eUlIZGxJSGRwYkd4Y2JpQWdJQ0FnSUNBZ0x5OGdjM1JwYkd3Z2IzWmxjbmR5YVhSbElHbDBYRzRnSUNBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG01dlFXTmpaWE56YjNJZ2ZId2dkR2hwY3k1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGtvYm1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCclpYa2dQU0IwZVhCbGIyWWdibUZ0WlNBOVBUMGdKM041YldKdmJDY2dQeUJUZVcxaWIyd29LU0E2SUdCZlh5UjdibUZ0WlgxZ08xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCa1pYTmpjbWx3ZEc5eUlEMGdkR2hwY3k1blpYUlFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9ibUZ0WlN3Z2EyVjVMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHUmxjMk55YVhCMGIzSWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIUm9hWE11Y0hKdmRHOTBlWEJsTENCdVlXMWxMQ0JrWlhOamNtbHdkRzl5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUdFZ2NISnZjR1Z5ZEhrZ1pHVnpZM0pwY0hSdmNpQjBieUJpWlNCa1pXWnBibVZrSUc5dUlIUm9aU0JuYVhabGJpQnVZVzFsWkNCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnS2lCSlppQnVieUJrWlhOamNtbHdkRzl5SUdseklISmxkSFZ5Ym1Wa0xDQjBhR1VnY0hKdmNHVnlkSGtnZDJsc2JDQnViM1FnWW1WamIyMWxJR0Z1SUdGalkyVnpjMjl5TGx4dUlDQWdJQ0FxSUVadmNpQmxlR0Z0Y0d4bExGeHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ0lDQmpiR0Z6Y3lCTmVVVnNaVzFsYm5RZ1pYaDBaVzVrY3lCTWFYUkZiR1Z0Wlc1MElIdGNiaUFnSUNBZ0tpQWdJQ0FnYzNSaGRHbGpJR2RsZEZCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lodVlXMWxMQ0JyWlhrc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0tpQWdJQ0FnSUNCamIyNXpkQ0JrWldaaGRXeDBSR1Z6WTNKcGNIUnZjaUE5WEc0Z0lDQWdJQ29nSUNBZ0lDQWdJQ0FnSUhOMWNHVnlMbWRsZEZCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lodVlXMWxMQ0JyWlhrc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBcUlDQWdJQ0FnSUdOdmJuTjBJSE5sZEhSbGNpQTlJR1JsWm1GMWJIUkVaWE5qY21sd2RHOXlMbk5sZER0Y2JpQWdJQ0FnS2lBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQXFJQ0FnSUNBZ0lDQWdaMlYwT2lCa1pXWmhkV3gwUkdWelkzSnBjSFJ2Y2k1blpYUXNYRzRnSUNBZ0lDb2dJQ0FnSUNBZ0lDQnpaWFFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdLaUFnSUNBZ0lDQWdJQ0FnYzJWMGRHVnlMbU5oYkd3b2RHaHBjeXdnZG1Gc2RXVXBPMXh1SUNBZ0lDQXFJQ0FnSUNBZ0lDQWdJQ0F2THlCamRYTjBiMjBnWVdOMGFXOXVMbHh1SUNBZ0lDQXFJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdLaUFnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdLaUFnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVmNiaUFnSUNBZ0tpQWdJQ0FnSUNCOVhHNGdJQ0FnSUNvZ0lDQWdJSDFjYmlBZ0lDQWdLaUFnSUgxY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCdWIyTnZiR3hoY0hObFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNSaGRHbGpJR2RsZEZCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lodVlXMWxMQ0JyWlhrc0lGOXZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QjBjMnhwYm5RNlpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VNmJtOHRZVzU1SUc1dklITjViV0p2YkNCcGJpQnBibVJsZUZ4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpXMnRsZVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiMnhrVm1Gc2RXVWdQU0IwYUdselcyNWhiV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTmJhMlY1WFNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0psY1hWbGMzUlZjR1JoZEdVb2JtRnRaU3dnYjJ4a1ZtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklIUnlkV1ZjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ2NISnZjR1Z5ZEhrZ2IzQjBhVzl1Y3lCaGMzTnZZMmxoZEdWa0lIZHBkR2dnZEdobElHZHBkbVZ1SUhCeWIzQmxjblI1TGx4dUlDQWdJQ0FxSUZSb1pYTmxJRzl3ZEdsdmJuTWdZWEpsSUdSbFptbHVaV1FnZDJsMGFDQmhJRkJ5YjNCbGNuUjVSR1ZqYkdGeVlYUnBiMjRnZG1saElIUm9aU0JnY0hKdmNHVnlkR2xsYzJCY2JpQWdJQ0FnS2lCdlltcGxZM1FnYjNJZ2RHaGxJR0JBY0hKdmNHVnlkSGxnSUdSbFkyOXlZWFJ2Y2lCaGJtUWdZWEpsSUhKbFoybHpkR1Z5WldRZ2FXNWNiaUFnSUNBZ0tpQmdZM0psWVhSbFVISnZjR1Z5ZEhrb0xpNHVLV0F1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJPYjNSbExDQjBhR2x6SUcxbGRHaHZaQ0J6YUc5MWJHUWdZbVVnWTI5dWMybGtaWEpsWkNCY0ltWnBibUZzWENJZ1lXNWtJRzV2ZENCdmRtVnljbWxrWkdWdUxpQlViMXh1SUNBZ0lDQXFJR04xYzNSdmJXbDZaU0IwYUdVZ2IzQjBhVzl1Y3lCbWIzSWdZU0JuYVhabGJpQndjbTl3WlhKMGVTd2diM1psY25KcFpHVWdZR055WldGMFpWQnliM0JsY25SNVlDNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQnViMk52Ykd4aGNITmxYRzRnSUNBZ0lDb2dRR1pwYm1Gc1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNSaGRHbGpJR2RsZEZCeWIzQmxjblI1VDNCMGFXOXVjeWh1WVcxbEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5amJHRnpjMUJ5YjNCbGNuUnBaWE1nSmlZZ2RHaHBjeTVmWTJ4aGMzTlFjbTl3WlhKMGFXVnpMbWRsZENodVlXMWxLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2RGQnliM0JsY25SNVJHVmpiR0Z5WVhScGIyNDdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTnlaV0YwWlhNZ2NISnZjR1Z5ZEhrZ1lXTmpaWE56YjNKeklHWnZjaUJ5WldkcGMzUmxjbVZrSUhCeWIzQmxjblJwWlhNZ1lXNWtJR1Z1YzNWeVpYTmNiaUFnSUNBZ0tpQmhibmtnYzNWd1pYSmpiR0Z6YzJWeklHRnlaU0JoYkhOdklHWnBibUZzYVhwbFpDNWNiaUFnSUNBZ0tpQkFibTlqYjJ4c1lYQnpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjBZWFJwWXlCbWFXNWhiR2w2WlNncElIdGNiaUFnSUNBZ0lDQWdMeThnWm1sdVlXeHBlbVVnWVc1NUlITjFjR1Z5WTJ4aGMzTmxjMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpkWEJsY2tOMGIzSWdQU0JQWW1wbFkzUXVaMlYwVUhKdmRHOTBlWEJsVDJZb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hjM1Z3WlhKRGRHOXlMbWhoYzA5M2JsQnliM0JsY25SNUtHWnBibUZzYVhwbFpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFjR1Z5UTNSdmNpNW1hVzVoYkdsNlpTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTmJabWx1WVd4cGVtVmtYU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVnVjM1Z5WlVOc1lYTnpVSEp2Y0dWeWRHbGxjeWdwTzF4dUlDQWdJQ0FnSUNBdkx5QnBibWwwYVdGc2FYcGxJRTFoY0NCd2IzQjFiR0YwWldRZ2FXNGdiMkp6WlhKMlpXUkJkSFJ5YVdKMWRHVnpYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRjBkSEpwWW5WMFpWUnZVSEp2Y0dWeWRIbE5ZWEFnUFNCdVpYY2dUV0Z3S0NrN1hHNGdJQ0FnSUNBZ0lDOHZJRzFoYTJVZ1lXNTVJSEJ5YjNCbGNuUnBaWE5jYmlBZ0lDQWdJQ0FnTHk4Z1RtOTBaU3dnYjI1c2VTQndjbTlqWlhOeklGd2liM2R1WENJZ2NISnZjR1Z5ZEdsbGN5QnphVzVqWlNCMGFHbHpJR1ZzWlcxbGJuUWdkMmxzYkNCcGJtaGxjbWwwWEc0Z0lDQWdJQ0FnSUM4dklHRnVlU0J3Y205d1pYSjBhV1Z6SUdSbFptbHVaV1FnYjI0Z2RHaGxJSE4xY0dWeVEyeGhjM01zSUdGdVpDQm1hVzVoYkdsNllYUnBiMjRnWlc1emRYSmxjMXh1SUNBZ0lDQWdJQ0F2THlCMGFHVWdaVzUwYVhKbElIQnliM1J2ZEhsd1pTQmphR0ZwYmlCcGN5Qm1hVzVoYkdsNlpXUXVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWhoYzA5M2JsQnliM0JsY25SNUtFcFRRMjl0Y0dsc1pYSmZjbVZ1WVcxbFVISnZjR1Z5ZEhrb0ozQnliM0JsY25ScFpYTW5MQ0IwYUdsektTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCeWIzQnpJRDBnZEdocGN5NXdjbTl3WlhKMGFXVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjM1Z3Y0c5eWRDQnplVzFpYjJ4eklHbHVJSEJ5YjNCbGNuUnBaWE1nS0VsRk1URWdaRzlsY3lCdWIzUWdjM1Z3Y0c5eWRDQjBhR2x6S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NISnZjRXRsZVhNZ1BTQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMaTR1VDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vY0hKdmNITXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzR1TGloMGVYQmxiMllnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3lBOVBUMGdKMloxYm1OMGFXOXVKeWtnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpLSEJ5YjNCektTQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ0ZFhHNGdJQ0FnSUNBZ0lDQWdJQ0JkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVkdocGN5Qm1iM0l2YjJZZ2FYTWdiMnNnWW1WallYVnpaU0J3Y205d1MyVjVjeUJwY3lCaGJpQmhjbkpoZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoamIyNXpkQ0J3SUc5bUlIQnliM0JMWlhsektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYm05MFpTd2dkWE5sSUc5bUlHQmhibmxnSUdseklHUjFaU0IwYnlCVWVYQmxVM0pwY0hRZ2JHRmpheUJ2WmlCemRYQndiM0owSUdadmNpQnplVzFpYjJ3Z2FXNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJwYm1SbGVDQjBlWEJsYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIUnpiR2x1ZERwa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlRwdWJ5MWhibmtnYm04Z2MzbHRZbTlzSUdsdUlHbHVaR1Y0WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWUWNtOXdaWEowZVNod0xDQndjbTl3YzF0d1hTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdjSEp2Y0dWeWRIa2dibUZ0WlNCbWIzSWdkR2hsSUdkcGRtVnVJR0YwZEhKcFluVjBaU0JnYm1GdFpXQXVYRzRnSUNBZ0lDb2dRRzV2WTI5c2JHRndjMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0YwYVdNZ1gyRjBkSEpwWW5WMFpVNWhiV1ZHYjNKUWNtOXdaWEowZVNodVlXMWxMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR0YwZEhKcFluVjBaU0E5SUc5d2RHbHZibk11WVhSMGNtbGlkWFJsTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWVhSMGNtbGlkWFJsSUQwOVBTQm1ZV3h6WlNBL1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxYm1SbFptbHVaV1FnT2x4dUlDQWdJQ0FnSUNBZ0lDQWdLSFI1Y0dWdlppQmhkSFJ5YVdKMWRHVWdQVDA5SUNkemRISnBibWNuSUQ5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRIUnlhV0oxZEdVZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaDBlWEJsYjJZZ2JtRnRaU0E5UFQwZ0ozTjBjbWx1WnljZ1B5QnVZVzFsTG5SdlRHOTNaWEpEWVhObEtDa2dPaUIxYm1SbFptbHVaV1FwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUIwY25WbElHbG1JR0VnY0hKdmNHVnlkSGtnYzJodmRXeGtJSEpsY1hWbGMzUWdZVzRnZFhCa1lYUmxMbHh1SUNBZ0lDQXFJRU5oYkd4bFpDQjNhR1Z1SUdFZ2NISnZjR1Z5ZEhrZ2RtRnNkV1VnYVhNZ2MyVjBJR0Z1WkNCMWMyVnpJSFJvWlNCZ2FHRnpRMmhoYm1kbFpHQmNiaUFnSUNBZ0tpQnZjSFJwYjI0Z1ptOXlJSFJvWlNCd2NtOXdaWEowZVNCcFppQndjbVZ6Wlc1MElHOXlJR0VnYzNSeWFXTjBJR2xrWlc1MGFYUjVJR05vWldOckxseHVJQ0FnSUNBcUlFQnViMk52Ykd4aGNITmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzUmhkR2xqSUY5MllXeDFaVWhoYzBOb1lXNW5aV1FvZG1Gc2RXVXNJRzlzWkN3Z2FHRnpRMmhoYm1kbFpDQTlJRzV2ZEVWeGRXRnNLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJvWVhORGFHRnVaMlZrS0haaGJIVmxMQ0J2YkdRcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUhSb1pTQndjbTl3WlhKMGVTQjJZV3gxWlNCbWIzSWdkR2hsSUdkcGRtVnVJR0YwZEhKcFluVjBaU0IyWVd4MVpTNWNiaUFnSUNBZ0tpQkRZV3hzWldRZ2RtbGhJSFJvWlNCZ1lYUjBjbWxpZFhSbFEyaGhibWRsWkVOaGJHeGlZV05yWUNCaGJtUWdkWE5sY3lCMGFHVWdjSEp2Y0dWeWRIa25jMXh1SUNBZ0lDQXFJR0JqYjI1MlpYSjBaWEpnSUc5eUlHQmpiMjUyWlhKMFpYSXVabkp2YlVGMGRISnBZblYwWldBZ2NISnZjR1Z5ZEhrZ2IzQjBhVzl1TGx4dUlDQWdJQ0FxSUVCdWIyTnZiR3hoY0hObFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNSaGRHbGpJRjl3Y205d1pYSjBlVlpoYkhWbFJuSnZiVUYwZEhKcFluVjBaU2gyWVd4MVpTd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjBlWEJsSUQwZ2IzQjBhVzl1Y3k1MGVYQmxPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMjUyWlhKMFpYSWdQU0J2Y0hScGIyNXpMbU52Ym5abGNuUmxjaUI4ZkNCa1pXWmhkV3gwUTI5dWRtVnlkR1Z5TzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JtY205dFFYUjBjbWxpZFhSbElEMGdLSFI1Y0dWdlppQmpiMjUyWlhKMFpYSWdQVDA5SUNkbWRXNWpkR2x2YmljZ1B5QmpiMjUyWlhKMFpYSWdPaUJqYjI1MlpYSjBaWEl1Wm5KdmJVRjBkSEpwWW5WMFpTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1jbTl0UVhSMGNtbGlkWFJsSUQ4Z1puSnZiVUYwZEhKcFluVjBaU2gyWVd4MVpTd2dkSGx3WlNrZ09pQjJZV3gxWlR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ1lYUjBjbWxpZFhSbElIWmhiSFZsSUdadmNpQjBhR1VnWjJsMlpXNGdjSEp2Y0dWeWRIa2dkbUZzZFdVdUlFbG1JSFJvYVhOY2JpQWdJQ0FnS2lCeVpYUjFjbTV6SUhWdVpHVm1hVzVsWkN3Z2RHaGxJSEJ5YjNCbGNuUjVJSGRwYkd3Z0ttNXZkQ29nWW1VZ2NtVm1iR1ZqZEdWa0lIUnZJR0Z1SUdGMGRISnBZblYwWlM1Y2JpQWdJQ0FnS2lCSlppQjBhR2x6SUhKbGRIVnlibk1nYm5Wc2JDd2dkR2hsSUdGMGRISnBZblYwWlNCM2FXeHNJR0psSUhKbGJXOTJaV1FzSUc5MGFHVnlkMmx6WlNCMGFHVmNiaUFnSUNBZ0tpQmhkSFJ5YVdKMWRHVWdkMmxzYkNCaVpTQnpaWFFnZEc4Z2RHaGxJSFpoYkhWbExseHVJQ0FnSUNBcUlGUm9hWE1nZFhObGN5QjBhR1VnY0hKdmNHVnlkSGtuY3lCZ2NtVm1iR1ZqZEdBZ1lXNWtJR0IwZVhCbExuUnZRWFIwY21saWRYUmxZQ0J3Y205d1pYSjBlU0J2Y0hScGIyNXpMbHh1SUNBZ0lDQXFJRUJ1YjJOdmJHeGhjSE5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM1JoZEdsaklGOXdjbTl3WlhKMGVWWmhiSFZsVkc5QmRIUnlhV0oxZEdVb2RtRnNkV1VzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVjbVZtYkdWamRDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkSGx3WlNBOUlHOXdkR2x2Ym5NdWRIbHdaVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMjl1ZG1WeWRHVnlJRDBnYjNCMGFXOXVjeTVqYjI1MlpYSjBaWEk3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJ2UVhSMGNtbGlkWFJsSUQwZ1kyOXVkbVZ5ZEdWeUlDWW1JR052Ym5abGNuUmxjaTUwYjBGMGRISnBZblYwWlNCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRU52Ym5abGNuUmxjaTUwYjBGMGRISnBZblYwWlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSdlFYUjBjbWxpZFhSbEtIWmhiSFZsTENCMGVYQmxLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVR1Z5Wm05eWJYTWdaV3hsYldWdWRDQnBibWwwYVdGc2FYcGhkR2x2Ymk0Z1Fua2daR1ZtWVhWc2RDQmpZWEIwZFhKbGN5QmhibmtnY0hKbExYTmxkQ0IyWVd4MVpYTWdabTl5WEc0Z0lDQWdJQ29nY21WbmFYTjBaWEpsWkNCd2NtOXdaWEowYVdWekxseHVJQ0FnSUNBcUwxeHVJQ0FnSUdsdWFYUnBZV3hwZW1Vb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTmhkbVZKYm5OMFlXNWpaVkJ5YjNCbGNuUnBaWE1vS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdaVzV6ZFhKbGN5Qm1hWEp6ZENCMWNHUmhkR1VnZDJsc2JDQmlaU0JqWVhWbmFIUWdZbmtnWVc0Z1pXRnliSGtnWVdOalpYTnpJRzltWEc0Z0lDQWdJQ0FnSUM4dklHQjFjR1JoZEdWRGIyMXdiR1YwWldCY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WeGRXVnpkRlZ3WkdGMFpTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkdhWGhsY3lCaGJua2djSEp2Y0dWeWRHbGxjeUJ6WlhRZ2IyNGdkR2hsSUdsdWMzUmhibU5sSUdKbFptOXlaU0IxY0dkeVlXUmxJSFJwYldVdVhHNGdJQ0FnSUNvZ1QzUm9aWEozYVhObElIUm9aWE5sSUhkdmRXeGtJSE5vWVdSdmR5QjBhR1VnWVdOalpYTnpiM0lnWVc1a0lHSnlaV0ZySUhSb1pYTmxJSEJ5YjNCbGNuUnBaWE11WEc0Z0lDQWdJQ29nVkdobElIQnliM0JsY25ScFpYTWdZWEpsSUhOMGIzSmxaQ0JwYmlCaElFMWhjQ0IzYUdsamFDQnBjeUJ3YkdGNVpXUWdZbUZqYXlCaFpuUmxjaUIwYUdWY2JpQWdJQ0FnS2lCamIyNXpkSEoxWTNSdmNpQnlkVzV6TGlCT2IzUmxMQ0J2YmlCMlpYSjVJRzlzWkNCMlpYSnphVzl1Y3lCdlppQlRZV1poY21rZ0tEdzlPU2tnYjNJZ1EyaHliMjFsWEc0Z0lDQWdJQ29nS0R3OU5ERXBMQ0J3Y205d1pYSjBhV1Z6SUdOeVpXRjBaV1FnWm05eUlHNWhkR2wyWlNCd2JHRjBabTl5YlNCd2NtOXdaWEowYVdWeklHeHBhMlVnS0dCcFpHQWdiM0pjYmlBZ0lDQWdLaUJnYm1GdFpXQXBJRzFoZVNCdWIzUWdhR0YyWlNCa1pXWmhkV3gwSUhaaGJIVmxjeUJ6WlhRZ2FXNGdkR2hsSUdWc1pXMWxiblFnWTI5dWMzUnlkV04wYjNJdUlFOXVYRzRnSUNBZ0lDb2dkR2hsYzJVZ1luSnZkM05sY25NZ2JtRjBhWFpsSUhCeWIzQmxjblJwWlhNZ1lYQndaV0Z5SUc5dUlHbHVjM1JoYm1ObGN5QmhibVFnZEdobGNtVm1iM0psSUhSb1pXbHlYRzRnSUNBZ0lDb2daR1ZtWVhWc2RDQjJZV3gxWlNCM2FXeHNJRzkyWlhKM2NtbDBaU0JoYm5rZ1pXeGxiV1Z1ZENCa1pXWmhkV3gwSUNobExtY3VJR2xtSUhSb1pTQmxiR1Z0Wlc1MElITmxkSE5jYmlBZ0lDQWdLaUIwYUdsekxtbGtJRDBnSjJsa0p5QnBiaUIwYUdVZ1kyOXVjM1J5ZFdOMGIzSXNJSFJvWlNBbmFXUW5JSGRwYkd3Z1ltVmpiMjFsSUNjbklITnBibU5sSUhSb2FYTWdhWE5jYmlBZ0lDQWdLaUIwYUdVZ2JtRjBhWFpsSUhCc1lYUm1iM0p0SUdSbFptRjFiSFFwTGx4dUlDQWdJQ0FxTDF4dUlDQWdJRjl6WVhabFNXNXpkR0Z1WTJWUWNtOXdaWEowYVdWektDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCVmMyVWdabTl5UldGamFDQnpieUIwYUdseklIZHZjbXR6SUdWMlpXNGdhV1lnWm05eUwyOW1JR3h2YjNCeklHRnlaU0JqYjIxd2FXeGxaQ0IwYnlCbWIzSWdiRzl2Y0hOY2JpQWdJQ0FnSUNBZ0x5OGdaWGh3WldOMGFXNW5JR0Z5Y21GNWMxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuTjBjblZqZEc5eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F1WDJOc1lYTnpVSEp2Y0dWeWRHbGxjeTVtYjNKRllXTm9LQ2hmZGl3Z2NDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2NDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlNBOUlIUm9hWE5iY0YwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb2FYTmJjRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5cGJuTjBZVzVqWlZCeWIzQmxjblJwWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhVzV6ZEdGdVkyVlFjbTl3WlhKMGFXVnpJRDBnYm1WM0lFMWhjQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlwYm5OMFlXNWpaVkJ5YjNCbGNuUnBaWE11YzJWMEtIQXNJSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRndjR3hwWlhNZ2NISmxkbWx2ZFhOc2VTQnpZWFpsWkNCcGJuTjBZVzVqWlNCd2NtOXdaWEowYVdWekxseHVJQ0FnSUNBcUwxeHVJQ0FnSUY5aGNIQnNlVWx1YzNSaGJtTmxVSEp2Y0dWeWRHbGxjeWdwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdWWE5sSUdadmNrVmhZMmdnYzI4Z2RHaHBjeUIzYjNKcmN5QmxkbVZ1SUdsbUlHWnZjaTl2WmlCc2IyOXdjeUJoY21VZ1kyOXRjR2xzWldRZ2RHOGdabTl5SUd4dmIzQnpYRzRnSUNBZ0lDQWdJQzh2SUdWNGNHVmpkR2x1WnlCaGNuSmhlWE5jYmlBZ0lDQWdJQ0FnTHk4Z2RITnNhVzUwT21ScGMyRmliR1V0Ym1WNGRDMXNhVzVsT201dkxXRnVlVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBibk4wWVc1alpWQnliM0JsY25ScFpYTXVabTl5UldGamFDZ29kaXdnY0NrZ1BUNGdkR2hwYzF0d1hTQTlJSFlwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlwYm5OMFlXNWpaVkJ5YjNCbGNuUnBaWE1nUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dUlDQWdJR052Ym01bFkzUmxaRU5oYkd4aVlXTnJLQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkZibk4xY21VZ1ptbHljM1FnWTI5dWJtVmpkR2x2YmlCamIyMXdiR1YwWlhNZ1lXNGdkWEJrWVhSbExpQlZjR1JoZEdWeklHTmhibTV2ZENCamIyMXdiR1YwWlZ4dUlDQWdJQ0FnSUNBdkx5QmlaV1p2Y21VZ1kyOXVibVZqZEdsdmJpNWNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJtRmliR1ZWY0dSaGRHbHVaeWdwTzF4dUlDQWdJSDFjYmlBZ0lDQmxibUZpYkdWVmNHUmhkR2x1WnlncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMlZ1WVdKc1pWVndaR0YwYVc1blVtVnpiMngyWlhJZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpXNWhZbXhsVlhCa1lYUnBibWRTWlhOdmJIWmxjaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpXNWhZbXhsVlhCa1lYUnBibWRTWlhOdmJIWmxjaUE5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQmJHeHZkM01nWm05eUlHQnpkWEJsY2k1a2FYTmpiMjV1WldOMFpXUkRZV3hzWW1GamF5Z3BZQ0JwYmlCbGVIUmxibk5wYjI1eklIZG9hV3hsWEc0Z0lDQWdJQ29nY21WelpYSjJhVzVuSUhSb1pTQndiM056YVdKcGJHbDBlU0J2WmlCdFlXdHBibWNnYm05dUxXSnlaV0ZyYVc1bklHWmxZWFIxY21VZ1lXUmthWFJwYjI1elhHNGdJQ0FnSUNvZ2QyaGxiaUJrYVhOamIyNXVaV04wYVc1bklHRjBJSE52YldVZ2NHOXBiblFnYVc0Z2RHaGxJR1oxZEhWeVpTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCa2FYTmpiMjV1WldOMFpXUkRZV3hzWW1GamF5Z3BJSHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVM2x1WTJoeWIyNXBlbVZ6SUhCeWIzQmxjblI1SUhaaGJIVmxjeUIzYUdWdUlHRjBkSEpwWW5WMFpYTWdZMmhoYm1kbExseHVJQ0FnSUNBcUwxeHVJQ0FnSUdGMGRISnBZblYwWlVOb1lXNW5aV1JEWVd4c1ltRmpheWh1WVcxbExDQnZiR1FzSUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHZiR1FnSVQwOUlIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWhkSFJ5YVdKMWRHVlViMUJ5YjNCbGNuUjVLRzVoYldVc0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JmY0hKdmNHVnlkSGxVYjBGMGRISnBZblYwWlNodVlXMWxMQ0IyWVd4MVpTd2diM0IwYVc5dWN5QTlJR1JsWm1GMWJIUlFjbTl3WlhKMGVVUmxZMnhoY21GMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR04wYjNJZ1BTQjBhR2x6TG1OdmJuTjBjblZqZEc5eU8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCaGRIUnlJRDBnWTNSdmNpNWZZWFIwY21saWRYUmxUbUZ0WlVadmNsQnliM0JsY25SNUtHNWhiV1VzSUc5d2RHbHZibk1wTzF4dUlDQWdJQ0FnSUNCcFppQW9ZWFIwY2lBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaGRIUnlWbUZzZFdVZ1BTQmpkRzl5TGw5d2NtOXdaWEowZVZaaGJIVmxWRzlCZEhSeWFXSjFkR1VvZG1Gc2RXVXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZVzRnZFc1a1pXWnBibVZrSUhaaGJIVmxJR1J2WlhNZ2JtOTBJR05vWVc1blpTQjBhR1VnWVhSMGNtbGlkWFJsTGx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGMGRISldZV3gxWlNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZISmhZMnNnYVdZZ2RHaGxJSEJ5YjNCbGNuUjVJR2x6SUdKbGFXNW5JSEpsWm14bFkzUmxaQ0IwYnlCaGRtOXBaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMlYwZEdsdVp5QjBhR1VnY0hKdmNHVnlkSGtnWVdkaGFXNGdkbWxoSUdCaGRIUnlhV0oxZEdWRGFHRnVaMlZrUTJGc2JHSmhZMnRnTGlCT2IzUmxPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdNUzRnZEdocGN5QjBZV3RsY3lCaFpIWmhiblJoWjJVZ2IyWWdkR2hsSUdaaFkzUWdkR2hoZENCMGFHVWdZMkZzYkdKaFkyc2dhWE1nYzNsdVkyaHliMjV2ZFhNdVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBeUxpQjNhV3hzSUdKbGFHRjJaU0JwYm1OdmNuSmxZM1JzZVNCcFppQnRkV3gwYVhCc1pTQmhkSFJ5YVdKMWRHVnpJR0Z5WlNCcGJpQjBhR1VnY21WaFkzUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE4wWVdOcklHRjBJSFJwYldVZ2IyWWdZMkZzYkdsdVp5NGdTRzkzWlhabGNpd2djMmx1WTJVZ2QyVWdjSEp2WTJWemN5QmhkSFJ5YVdKMWRHVnpYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBiaUJnZFhCa1lYUmxZQ0IwYUdseklITm9iM1ZzWkNCdWIzUWdZbVVnY0c5emMybGliR1VnS0c5eUlHRnVJR1Y0ZEhKbGJXVWdZMjl5Ym1WeUlHTmhjMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJvWVhRZ2QyVW5aQ0JzYVd0bElIUnZJR1JwYzJOdmRtVnlLUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzFoY21zZ2MzUmhkR1VnY21WbWJHVmpkR2x1WjF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsVTNSaGRHVWdQU0IwYUdsekxsOTFjR1JoZEdWVGRHRjBaU0I4SUZOVVFWUkZYMGxUWDFKRlJreEZRMVJKVGtkZlZFOWZRVlJVVWtsQ1ZWUkZPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR0YwZEhKV1lXeDFaU0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaVzF2ZG1WQmRIUnlhV0oxZEdVb1lYUjBjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2hoZEhSeUxDQmhkSFJ5Vm1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JXRnlheUJ6ZEdGMFpTQnViM1FnY21WbWJHVmpkR2x1WjF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsVTNSaGRHVWdQU0IwYUdsekxsOTFjR1JoZEdWVGRHRjBaU0FtSUg1VFZFRlVSVjlKVTE5U1JVWk1SVU5VU1U1SFgxUlBYMEZVVkZKSlFsVlVSVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQmZZWFIwY21saWRYUmxWRzlRY205d1pYSjBlU2h1WVcxbExDQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJWYzJVZ2RISmhZMnRwYm1jZ2FXNW1ieUIwYnlCaGRtOXBaQ0JrWlhObGNtbGhiR2w2YVc1bklHRjBkSEpwWW5WMFpTQjJZV3gxWlNCcFppQnBkQ0IzWVhOY2JpQWdJQ0FnSUNBZ0x5OGdhblZ6ZENCelpYUWdabkp2YlNCaElIQnliM0JsY25SNUlITmxkSFJsY2k1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzVndaR0YwWlZOMFlYUmxJQ1lnVTFSQlZFVmZTVk5mVWtWR1RFVkRWRWxPUjE5VVQxOUJWRlJTU1VKVlZFVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamRHOXlJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjanRjYmlBZ0lDQWdJQ0FnTHk4Z1RtOTBaU3dnYUdsdWRDQjBhR2x6SUdGeklHRnVJR0JCZEhSeWFXSjFkR1ZOWVhCZ0lITnZJR05zYjNOMWNtVWdZMnhsWVhKc2VTQjFibVJsY25OMFlXNWtjMXh1SUNBZ0lDQWdJQ0F2THlCMGFHVWdkSGx3WlRzZ2FYUWdhR0Z6SUdsemMzVmxjeUIzYVhSb0lIUnlZV05yYVc1bklIUjVjR1Z6SUhSb2NtOTFaMmdnYzNSaGRHbGpjMXh1SUNBZ0lDQWdJQ0F2THlCMGMyeHBiblE2WkdsellXSnNaUzF1WlhoMExXeHBibVU2Ym04dGRXNXVaV05sYzNOaGNua3RkSGx3WlMxaGMzTmxjblJwYjI1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKdmNFNWhiV1VnUFNCamRHOXlMbDloZEhSeWFXSjFkR1ZVYjFCeWIzQmxjblI1VFdGd0xtZGxkQ2h1WVcxbEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hCeWIzQk9ZVzFsSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5d2RHbHZibk1nUFNCamRHOXlMbWRsZEZCeWIzQmxjblI1VDNCMGFXOXVjeWh3Y205d1RtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ0WVhKcklITjBZWFJsSUhKbFpteGxZM1JwYm1kY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzVndaR0YwWlZOMFlYUmxJRDBnZEdocGN5NWZkWEJrWVhSbFUzUmhkR1VnZkNCVFZFRlVSVjlKVTE5U1JVWk1SVU5VU1U1SFgxUlBYMUJTVDFCRlVsUlpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjMXR3Y205d1RtRnRaVjBnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIUnpiR2x1ZERwa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlRwdWJ5MWhibmxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZEc5eUxsOXdjbTl3WlhKMGVWWmhiSFZsUm5KdmJVRjBkSEpwWW5WMFpTaDJZV3gxWlN3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCdFlYSnJJSE4wWVhSbElHNXZkQ0J5Wldac1pXTjBhVzVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MWNHUmhkR1ZUZEdGMFpTQTlJSFJvYVhNdVgzVndaR0YwWlZOMFlYUmxJQ1lnZmxOVVFWUkZYMGxUWDFKRlJreEZRMVJKVGtkZlZFOWZVRkpQVUVWU1ZGazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hwY3lCd2NtbDJZWFJsSUhabGNuTnBiMjRnYjJZZ1lISmxjWFZsYzNSVmNHUmhkR1ZnSUdSdlpYTWdibTkwSUdGalkyVnpjeUJ2Y2lCeVpYUjFjbTRnZEdobFhHNGdJQ0FnSUNvZ1lIVndaR0YwWlVOdmJYQnNaWFJsWUNCd2NtOXRhWE5sTGlCVWFHbHpJSEJ5YjIxcGMyVWdZMkZ1SUdKbElHOTJaWEp5YVdSa1pXNGdZVzVrSUdseklIUm9aWEpsWm05eVpWeHVJQ0FnSUNBcUlHNXZkQ0JtY21WbElIUnZJR0ZqWTJWemN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCZmNtVnhkV1Z6ZEZWd1pHRjBaU2h1WVcxbExDQnZiR1JXWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2MyaHZkV3hrVW1WeGRXVnpkRlZ3WkdGMFpTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDOHZJRWxtSUhkbElHaGhkbVVnWVNCd2NtOXdaWEowZVNCclpYa3NJSEJsY21admNtMGdjSEp2Y0dWeWRIa2dkWEJrWVhSbElITjBaWEJ6TGx4dUlDQWdJQ0FnSUNCcFppQW9ibUZ0WlNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamRHOXlJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5d2RHbHZibk1nUFNCamRHOXlMbWRsZEZCeWIzQmxjblI1VDNCMGFXOXVjeWh1WVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpkRzl5TGw5MllXeDFaVWhoYzBOb1lXNW5aV1FvZEdocGMxdHVZVzFsWFN3Z2IyeGtWbUZzZFdVc0lHOXdkR2x2Ym5NdWFHRnpRMmhoYm1kbFpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDJOb1lXNW5aV1JRY205d1pYSjBhV1Z6TG1oaGN5aHVZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWphR0Z1WjJWa1VISnZjR1Z5ZEdsbGN5NXpaWFFvYm1GdFpTd2diMnhrVm1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQlpHUWdkRzhnY21WbWJHVmpkR2x1WnlCd2NtOXdaWEowYVdWeklITmxkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCT2IzUmxMQ0JwZENkeklHbHRjRzl5ZEdGdWRDQjBhR0YwSUdWMlpYSjVJR05vWVc1blpTQm9ZWE1nWVNCamFHRnVZMlVnZEc4Z1lXUmtJSFJvWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIQnliM0JsY25SNUlIUnZJR0JmY21WbWJHVmpkR2x1WjFCeWIzQmxjblJwWlhOZ0xpQlVhR2x6SUdWdWMzVnlaWE1nYzJWMGRHbHVaMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGMGRISnBZblYwWlNBcklIQnliM0JsY25SNUlISmxabXhsWTNSeklHTnZjbkpsWTNSc2VTNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTV5Wldac1pXTjBJRDA5UFNCMGNuVmxJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDRW9kR2hwY3k1ZmRYQmtZWFJsVTNSaGRHVWdKaUJUVkVGVVJWOUpVMTlTUlVaTVJVTlVTVTVIWDFSUFgxQlNUMUJGVWxSWktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmNtVm1iR1ZqZEdsdVoxQnliM0JsY25ScFpYTWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY21WbWJHVmpkR2x1WjFCeWIzQmxjblJwWlhNZ1BTQnVaWGNnVFdGd0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNtVm1iR1ZqZEdsdVoxQnliM0JsY25ScFpYTXVjMlYwS0c1aGJXVXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVGaWIzSjBJSFJvWlNCeVpYRjFaWE4wSUdsbUlIUm9aU0J3Y205d1pYSjBlU0J6YUc5MWJHUWdibTkwSUdKbElHTnZibk5wWkdWeVpXUWdZMmhoYm1kbFpDNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphRzkxYkdSU1pYRjFaWE4wVlhCa1lYUmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDlvWVhOU1pYRjFaWE4wWldSVmNHUmhkR1VnSmlZZ2MyaHZkV3hrVW1WeGRXVnpkRlZ3WkdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxVSEp2YldselpTQTlJSFJvYVhNdVgyVnVjWFZsZFdWVmNHUmhkR1VvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYRjFaWE4wY3lCaGJpQjFjR1JoZEdVZ2QyaHBZMmdnYVhNZ2NISnZZMlZ6YzJWa0lHRnplVzVqYUhKdmJtOTFjMng1TGlCVWFHbHpJSE5vYjNWc1pGeHVJQ0FnSUNBcUlHSmxJR05oYkd4bFpDQjNhR1Z1SUdGdUlHVnNaVzFsYm5RZ2MyaHZkV3hrSUhWd1pHRjBaU0JpWVhObFpDQnZiaUJ6YjIxbElITjBZWFJsSUc1dmRDQjBjbWxuWjJWeVpXUmNiaUFnSUNBZ0tpQmllU0J6WlhSMGFXNW5JR0VnY0hKdmNHVnlkSGt1SUVsdUlIUm9hWE1nWTJGelpTd2djR0Z6Y3lCdWJ5QmhjbWQxYldWdWRITXVJRWwwSUhOb2IzVnNaQ0JoYkhOdklHSmxYRzRnSUNBZ0lDb2dZMkZzYkdWa0lIZG9aVzRnYldGdWRXRnNiSGtnYVcxd2JHVnRaVzUwYVc1bklHRWdjSEp2Y0dWeWRIa2djMlYwZEdWeUxpQkpiaUIwYUdseklHTmhjMlVzSUhCaGMzTWdkR2hsWEc0Z0lDQWdJQ29nY0hKdmNHVnlkSGtnWUc1aGJXVmdJR0Z1WkNCZ2IyeGtWbUZzZFdWZ0lIUnZJR1Z1YzNWeVpTQjBhR0YwSUdGdWVTQmpiMjVtYVdkMWNtVmtJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDb2diM0IwYVc5dWN5QmhjbVVnYUc5dWIzSmxaQzRnVW1WMGRYSnVjeUIwYUdVZ1lIVndaR0YwWlVOdmJYQnNaWFJsWUNCUWNtOXRhWE5sSUhkb2FXTm9JR2x6SUhKbGMyOXNkbVZrWEc0Z0lDQWdJQ29nZDJobGJpQjBhR1VnZFhCa1lYUmxJR052YlhCc1pYUmxjeTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnVZVzFsSUh0UWNtOXdaWEowZVV0bGVYMGdLRzl3ZEdsdmJtRnNLU0J1WVcxbElHOW1JSEpsY1hWbGMzUnBibWNnY0hKdmNHVnlkSGxjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiMnhrVm1Gc2RXVWdlMkZ1ZVgwZ0tHOXdkR2x2Ym1Gc0tTQnZiR1FnZG1Gc2RXVWdiMllnY21WeGRXVnpkR2x1WnlCd2NtOXdaWEowZVZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0UWNtOXRhWE5sZlNCQklGQnliMjFwYzJVZ2RHaGhkQ0JwY3lCeVpYTnZiSFpsWkNCM2FHVnVJSFJvWlNCMWNHUmhkR1VnWTI5dGNHeGxkR1Z6TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsY1hWbGMzUlZjR1JoZEdVb2JtRnRaU3dnYjJ4a1ZtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WeGRXVnpkRlZ3WkdGMFpTaHVZVzFsTENCdmJHUldZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblZ3WkdGMFpVTnZiWEJzWlhSbE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFZ3SUhSb1pTQmxiR1Z0Wlc1MElIUnZJR0Z6ZVc1amFISnZibTkxYzJ4NUlIVndaR0YwWlM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JoYzNsdVl5QmZaVzV4ZFdWMVpWVndaR0YwWlNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsVTNSaGRHVWdQU0IwYUdsekxsOTFjR1JoZEdWVGRHRjBaU0I4SUZOVVFWUkZYMVZRUkVGVVJWOVNSVkZWUlZOVVJVUTdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCRmJuTjFjbVVnWVc1NUlIQnlaWFpwYjNWeklIVndaR0YwWlNCb1lYTWdjbVZ6YjJ4MlpXUWdZbVZtYjNKbElIVndaR0YwYVc1bkxseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUJnWVhkaGFYUmdJR0ZzYzI4Z1pXNXpkWEpsY3lCMGFHRjBJSEJ5YjNCbGNuUjVJR05vWVc1blpYTWdZWEpsSUdKaGRHTm9aV1F1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhkMkZwZENCMGFHbHpMbDkxY0dSaGRHVlFjbTl0YVhObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWjI1dmNtVWdZVzU1SUhCeVpYWnBiM1Z6SUdWeWNtOXljeTRnVjJVZ2IyNXNlU0JqWVhKbElIUm9ZWFFnZEdobElIQnlaWFpwYjNWeklHTjVZMnhsSUdselhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCa2IyNWxMaUJCYm5rZ1pYSnliM0lnYzJodmRXeGtJR2hoZG1VZ1ltVmxiaUJvWVc1a2JHVmtJR2x1SUhSb1pTQndjbVYyYVc5MWN5QjFjR1JoZEdVdVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpkV3gwSUQwZ2RHaHBjeTV3WlhKbWIzSnRWWEJrWVhSbEtDazdYRzRnSUNBZ0lDQWdJQzh2SUVsbUlHQndaWEptYjNKdFZYQmtZWFJsWUNCeVpYUjFjbTV6SUdFZ1VISnZiV2x6WlN3Z2QyVWdZWGRoYVhRZ2FYUXVJRlJvYVhNZ2FYTWdaRzl1WlNCMGIxeHVJQ0FnSUNBZ0lDQXZMeUJsYm1GaWJHVWdZMjl2Y21ScGJtRjBhVzVuSUhWd1pHRjBaWE1nZDJsMGFDQmhJSE5qYUdWa2RXeGxjaTRnVG05MFpTd2dkR2hsSUhKbGMzVnNkQ0JwYzF4dUlDQWdJQ0FnSUNBdkx5QmphR1ZqYTJWa0lIUnZJR0YyYjJsa0lHUmxiR0Y1YVc1bklHRnVJR0ZrWkdsMGFXOXVZV3dnYldsamNtOTBZWE5ySUhWdWJHVnpjeUIzWlNCdVpXVmtJSFJ2TGx4dUlDQWdJQ0FnSUNCcFppQW9jbVZ6ZFd4MElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGM1lXbDBJSEpsYzNWc2REdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdJWFJvYVhNdVgyaGhjMUpsY1hWbGMzUmxaRlZ3WkdGMFpUdGNiaUFnSUNCOVhHNGdJQ0FnWjJWMElGOW9ZWE5TWlhGMVpYTjBaV1JWY0dSaGRHVW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvZEdocGN5NWZkWEJrWVhSbFUzUmhkR1VnSmlCVFZFRlVSVjlWVUVSQlZFVmZVa1ZSVlVWVFZFVkVLVHRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBJR2hoYzFWd1pHRjBaV1FvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2RHaHBjeTVmZFhCa1lYUmxVM1JoZEdVZ0ppQlRWRUZVUlY5SVFWTmZWVkJFUVZSRlJDazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQmxjbVp2Y20xeklHRnVJR1ZzWlcxbGJuUWdkWEJrWVhSbExpQk9iM1JsTENCcFppQmhiaUJsZUdObGNIUnBiMjRnYVhNZ2RHaHliM2R1SUdSMWNtbHVaeUIwYUdWY2JpQWdJQ0FnS2lCMWNHUmhkR1VzSUdCbWFYSnpkRlZ3WkdGMFpXUmdJR0Z1WkNCZ2RYQmtZWFJsWkdBZ2QybHNiQ0J1YjNRZ1ltVWdZMkZzYkdWa0xseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1dXOTFJR05oYmlCdmRtVnljbWxrWlNCMGFHbHpJRzFsZEdodlpDQjBieUJqYUdGdVoyVWdkR2hsSUhScGJXbHVaeUJ2WmlCMWNHUmhkR1Z6TGlCSlppQjBhR2x6WEc0Z0lDQWdJQ29nYldWMGFHOWtJR2x6SUc5MlpYSnlhV1JrWlc0c0lHQnpkWEJsY2k1d1pYSm1iM0p0VlhCa1lYUmxLQ2xnSUcxMWMzUWdZbVVnWTJGc2JHVmtMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dSbTl5SUdsdWMzUmhibU5sTENCMGJ5QnpZMmhsWkhWc1pTQjFjR1JoZEdWeklIUnZJRzlqWTNWeUlHcDFjM1FnWW1WbWIzSmxJSFJvWlNCdVpYaDBJR1p5WVcxbE9seHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1lHQmdYRzRnSUNBZ0lDb2djSEp2ZEdWamRHVmtJR0Z6ZVc1aklIQmxjbVp2Y20xVmNHUmhkR1VvS1RvZ1VISnZiV2x6WlR4MWJtdHViM2R1UGlCN1hHNGdJQ0FnSUNvZ0lDQmhkMkZwZENCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTa2dQVDRnY21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEtDZ3BJRDArSUhKbGMyOXNkbVVvS1NrcE8xeHVJQ0FnSUNBcUlDQWdjM1Z3WlhJdWNHVnlabTl5YlZWd1pHRjBaU2dwTzF4dUlDQWdJQ0FxSUgxY2JpQWdJQ0FnS2lCZ1lHQmNiaUFnSUNBZ0tpOWNiaUFnSUNCd1pYSm1iM0p0VlhCa1lYUmxLQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5Qk5hWGhwYmlCcGJuTjBZVzVqWlNCd2NtOXdaWEowYVdWeklHOXVZMlVzSUdsbUlIUm9aWGtnWlhocGMzUXVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlwYm5OMFlXNWpaVkJ5YjNCbGNuUnBaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyRndjR3g1U1c1emRHRnVZMlZRY205d1pYSjBhV1Z6S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdiR1YwSUhOb2IzVnNaRlZ3WkdGMFpTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamFHRnVaMlZrVUhKdmNHVnlkR2xsY3lBOUlIUm9hWE11WDJOb1lXNW5aV1JRY205d1pYSjBhV1Z6TzF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyaHZkV3hrVlhCa1lYUmxJRDBnZEdocGN5NXphRzkxYkdSVmNHUmhkR1VvWTJoaGJtZGxaRkJ5YjNCbGNuUnBaWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOb2IzVnNaRlZ3WkdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsS0dOb1lXNW5aV1JRY205d1pYSjBhV1Z6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjFoY210VmNHUmhkR1ZrS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGQnlaWFpsYm5RZ1lHWnBjbk4wVlhCa1lYUmxaR0FnWVc1a0lHQjFjR1JoZEdWa1lDQm1jbTl0SUhKMWJtNXBibWNnZDJobGJpQjBhR1Z5WlNkeklHRnVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QjFjR1JoZEdVZ1pYaGpaWEIwYVc5dUxseHVJQ0FnSUNBZ0lDQWdJQ0FnYzJodmRXeGtWWEJrWVhSbElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCRmJuTjFjbVVnWld4bGJXVnVkQ0JqWVc0Z1lXTmpaWEIwSUdGa1pHbDBhVzl1WVd3Z2RYQmtZWFJsY3lCaFpuUmxjaUJoYmlCbGVHTmxjSFJwYjI0dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXRZWEpyVlhCa1lYUmxaQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1pUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2MyaHZkV3hrVlhCa1lYUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVNoMGFHbHpMbDkxY0dSaGRHVlRkR0YwWlNBbUlGTlVRVlJGWDBoQlUxOVZVRVJCVkVWRUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzVndaR0YwWlZOMFlYUmxJRDBnZEdocGN5NWZkWEJrWVhSbFUzUmhkR1VnZkNCVFZFRlVSVjlJUVZOZlZWQkVRVlJGUkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVpwY25OMFZYQmtZWFJsWkNoamFHRnVaMlZrVUhKdmNHVnlkR2xsY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaV1FvWTJoaGJtZGxaRkJ5YjNCbGNuUnBaWE1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJRjl0WVhKclZYQmtZWFJsWkNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyaGhibWRsWkZCeWIzQmxjblJwWlhNZ1BTQnVaWGNnVFdGd0tDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzVndaR0YwWlZOMFlYUmxJRDBnZEdocGN5NWZkWEJrWVhSbFUzUmhkR1VnSmlCK1UxUkJWRVZmVlZCRVFWUkZYMUpGVVZWRlUxUkZSRHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVYwZFhKdWN5QmhJRkJ5YjIxcGMyVWdkR2hoZENCeVpYTnZiSFpsY3lCM2FHVnVJSFJvWlNCbGJHVnRaVzUwSUdoaGN5QmpiMjF3YkdWMFpXUWdkWEJrWVhScGJtY3VYRzRnSUNBZ0lDb2dWR2hsSUZCeWIyMXBjMlVnZG1Gc2RXVWdhWE1nWVNCaWIyOXNaV0Z1SUhSb1lYUWdhWE1nWUhSeWRXVmdJR2xtSUhSb1pTQmxiR1Z0Wlc1MElHTnZiWEJzWlhSbFpDQjBhR1ZjYmlBZ0lDQWdLaUIxY0dSaGRHVWdkMmwwYUc5MWRDQjBjbWxuWjJWeWFXNW5JR0Z1YjNSb1pYSWdkWEJrWVhSbExpQlVhR1VnVUhKdmJXbHpaU0J5WlhOMWJIUWdhWE1nWUdaaGJITmxZQ0JwWmx4dUlDQWdJQ0FxSUdFZ2NISnZjR1Z5ZEhrZ2QyRnpJSE5sZENCcGJuTnBaR1VnWUhWd1pHRjBaV1FvS1dBdUlFbG1JSFJvWlNCUWNtOXRhWE5sSUdseklISmxhbVZqZEdWa0xDQmhibHh1SUNBZ0lDQXFJR1Y0WTJWd2RHbHZiaUIzWVhNZ2RHaHliM2R1SUdSMWNtbHVaeUIwYUdVZ2RYQmtZWFJsTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nVkc4Z1lYZGhhWFFnWVdSa2FYUnBiMjVoYkNCaGMzbHVZMmh5YjI1dmRYTWdkMjl5YXl3Z2IzWmxjbkpwWkdVZ2RHaGxJR0JmWjJWMFZYQmtZWFJsUTI5dGNHeGxkR1ZnWEc0Z0lDQWdJQ29nYldWMGFHOWtMaUJHYjNJZ1pYaGhiWEJzWlN3Z2FYUWdhWE1nYzI5dFpYUnBiV1Z6SUhWelpXWjFiQ0IwYnlCaGQyRnBkQ0JoSUhKbGJtUmxjbVZrSUdWc1pXMWxiblJjYmlBZ0lDQWdLaUJpWldadmNtVWdablZzWm1sc2JHbHVaeUIwYUdseklGQnliMjFwYzJVdUlGUnZJR1J2SUhSb2FYTXNJR1pwY25OMElHRjNZV2wwWEc0Z0lDQWdJQ29nWUhOMWNHVnlMbDluWlhSVmNHUmhkR1ZEYjIxd2JHVjBaU2dwWUN3Z2RHaGxiaUJoYm5rZ2MzVmljMlZ4ZFdWdWRDQnpkR0YwWlM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0UWNtOXRhWE5sZlNCVWFHVWdVSEp2YldselpTQnlaWFIxY201eklHRWdZbTl2YkdWaGJpQjBhR0YwSUdsdVpHbGpZWFJsY3lCcFppQjBhR1ZjYmlBZ0lDQWdLaUIxY0dSaGRHVWdjbVZ6YjJ4MlpXUWdkMmwwYUc5MWRDQjBjbWxuWjJWeWFXNW5JR0Z1YjNSb1pYSWdkWEJrWVhSbExseHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRDQjFjR1JoZEdWRGIyMXdiR1YwWlNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJkbGRGVndaR0YwWlVOdmJYQnNaWFJsS0NrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUU5MlpYSnlhV1JsSUhCdmFXNTBJR1p2Y2lCMGFHVWdZSFZ3WkdGMFpVTnZiWEJzWlhSbFlDQndjbTl0YVhObExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1NYUWdhWE1nYm05MElITmhabVVnZEc4Z2IzWmxjbkpwWkdVZ2RHaGxJR0IxY0dSaGRHVkRiMjF3YkdWMFpXQWdaMlYwZEdWeUlHUnBjbVZqZEd4NUlHUjFaU0IwYnlCaFhHNGdJQ0FnSUNvZ2JHbHRhWFJoZEdsdmJpQnBiaUJVZVhCbFUyTnlhWEIwSUhkb2FXTm9JRzFsWVc1eklHbDBJR2x6SUc1dmRDQndiM056YVdKc1pTQjBieUJqWVd4c0lHRmNiaUFnSUNBZ0tpQnpkWEJsY21Oc1lYTnpJR2RsZEhSbGNpQW9aUzVuTGlCZ2MzVndaWEl1ZFhCa1lYUmxRMjl0Y0d4bGRHVXVkR2hsYmlndUxpNHBZQ2tnZDJobGJpQjBhR1VnZEdGeVoyVjBYRzRnSUNBZ0lDb2diR0Z1WjNWaFoyVWdhWE1nUlZNMUlDaG9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZiV2xqY205emIyWjBMMVI1Y0dWVFkzSnBjSFF2YVhOemRXVnpMek16T0NrdVhHNGdJQ0FnSUNvZ1ZHaHBjeUJ0WlhSb2IyUWdjMmh2ZFd4a0lHSmxJRzkyWlhKeWFXUmtaVzRnYVc1emRHVmhaQzRnUm05eUlHVjRZVzF3YkdVNlhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lBZ0lHTnNZWE56SUUxNVJXeGxiV1Z1ZENCbGVIUmxibVJ6SUV4cGRFVnNaVzFsYm5RZ2UxeHVJQ0FnSUNBcUlDQWdJQ0JoYzNsdVl5QmZaMlYwVlhCa1lYUmxRMjl0Y0d4bGRHVW9LU0I3WEc0Z0lDQWdJQ29nSUNBZ0lDQWdZWGRoYVhRZ2MzVndaWEl1WDJkbGRGVndaR0YwWlVOdmJYQnNaWFJsS0NrN1hHNGdJQ0FnSUNvZ0lDQWdJQ0FnWVhkaGFYUWdkR2hwY3k1ZmJYbERhR2xzWkM1MWNHUmhkR1ZEYjIxd2JHVjBaVHRjYmlBZ0lDQWdLaUFnSUNBZ2ZWeHVJQ0FnSUNBcUlDQWdmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOW5aWFJWY0dSaGRHVkRiMjF3YkdWMFpTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzVndaR0YwWlZCeWIyMXBjMlU3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU52Ym5SeWIyeHpJSGRvWlhSb1pYSWdiM0lnYm05MElHQjFjR1JoZEdWZ0lITm9iM1ZzWkNCaVpTQmpZV3hzWldRZ2QyaGxiaUIwYUdVZ1pXeGxiV1Z1ZENCeVpYRjFaWE4wYzF4dUlDQWdJQ0FxSUdGdUlIVndaR0YwWlM0Z1Fua2daR1ZtWVhWc2RDd2dkR2hwY3lCdFpYUm9iMlFnWVd4M1lYbHpJSEpsZEhWeWJuTWdZSFJ5ZFdWZ0xDQmlkWFFnZEdocGN5QmpZVzRnWW1WY2JpQWdJQ0FnS2lCamRYTjBiMjFwZW1Wa0lIUnZJR052Ym5SeWIyd2dkMmhsYmlCMGJ5QjFjR1JoZEdVdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWDJOb1lXNW5aV1JRY205d1pYSjBhV1Z6SUUxaGNDQnZaaUJqYUdGdVoyVmtJSEJ5YjNCbGNuUnBaWE1nZDJsMGFDQnZiR1FnZG1Gc2RXVnpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyaHZkV3hrVlhCa1lYUmxLRjlqYUdGdVoyVmtVSEp2Y0dWeWRHbGxjeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZYQmtZWFJsY3lCMGFHVWdaV3hsYldWdWRDNGdWR2hwY3lCdFpYUm9iMlFnY21WbWJHVmpkSE1nY0hKdmNHVnlkSGtnZG1Gc2RXVnpJSFJ2SUdGMGRISnBZblYwWlhNdVhHNGdJQ0FnSUNvZ1NYUWdZMkZ1SUdKbElHOTJaWEp5YVdSa1pXNGdkRzhnY21WdVpHVnlJR0Z1WkNCclpXVndJSFZ3WkdGMFpXUWdaV3hsYldWdWRDQkVUMDB1WEc0Z0lDQWdJQ29nVTJWMGRHbHVaeUJ3Y205d1pYSjBhV1Z6SUdsdWMybGtaU0IwYUdseklHMWxkR2h2WkNCM2FXeHNJQ3B1YjNRcUlIUnlhV2RuWlhKY2JpQWdJQ0FnS2lCaGJtOTBhR1Z5SUhWd1pHRjBaUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmZZMmhoYm1kbFpGQnliM0JsY25ScFpYTWdUV0Z3SUc5bUlHTm9ZVzVuWldRZ2NISnZjR1Z5ZEdsbGN5QjNhWFJvSUc5c1pDQjJZV3gxWlhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxY0dSaGRHVW9YMk5vWVc1blpXUlFjbTl3WlhKMGFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5eVpXWnNaV04wYVc1blVISnZjR1Z5ZEdsbGN5QWhQVDBnZFc1a1pXWnBibVZrSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXlaV1pzWldOMGFXNW5VSEp2Y0dWeWRHbGxjeTV6YVhwbElENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVlhObElHWnZja1ZoWTJnZ2MyOGdkR2hwY3lCM2IzSnJjeUJsZG1WdUlHbG1JR1p2Y2k5dlppQnNiMjl3Y3lCaGNtVWdZMjl0Y0dsc1pXUWdkRzhnWm05eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCc2IyOXdjeUJsZUhCbFkzUnBibWNnWVhKeVlYbHpYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl5Wldac1pXTjBhVzVuVUhKdmNHVnlkR2xsY3k1bWIzSkZZV05vS0NoMkxDQnJLU0E5UGlCMGFHbHpMbDl3Y205d1pYSjBlVlJ2UVhSMGNtbGlkWFJsS0dzc0lIUm9hWE5iYTEwc0lIWXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNKbFpteGxZM1JwYm1kUWNtOXdaWEowYVdWeklEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjFoY210VmNHUmhkR1ZrS0NrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVsdWRtOXJaV1FnZDJobGJtVjJaWElnZEdobElHVnNaVzFsYm5RZ2FYTWdkWEJrWVhSbFpDNGdTVzF3YkdWdFpXNTBJSFJ2SUhCbGNtWnZjbTFjYmlBZ0lDQWdLaUJ3YjNOMExYVndaR0YwYVc1bklIUmhjMnR6SUhacFlTQkVUMDBnUVZCSmN5d2dabTl5SUdWNFlXMXdiR1VzSUdadlkzVnphVzVuSUdGdUlHVnNaVzFsYm5RdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCVFpYUjBhVzVuSUhCeWIzQmxjblJwWlhNZ2FXNXphV1JsSUhSb2FYTWdiV1YwYUc5a0lIZHBiR3dnZEhKcFoyZGxjaUIwYUdVZ1pXeGxiV1Z1ZENCMGJ5QjFjR1JoZEdWY2JpQWdJQ0FnS2lCaFoyRnBiaUJoWm5SbGNpQjBhR2x6SUhWd1pHRjBaU0JqZVdOc1pTQmpiMjF3YkdWMFpYTXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1gyTm9ZVzVuWldSUWNtOXdaWEowYVdWeklFMWhjQ0J2WmlCamFHRnVaMlZrSUhCeWIzQmxjblJwWlhNZ2QybDBhQ0J2YkdRZ2RtRnNkV1Z6WEc0Z0lDQWdJQ292WEc0Z0lDQWdkWEJrWVhSbFpDaGZZMmhoYm1kbFpGQnliM0JsY25ScFpYTXBJSHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzUyYjJ0bFpDQjNhR1Z1SUhSb1pTQmxiR1Z0Wlc1MElHbHpJR1pwY25OMElIVndaR0YwWldRdUlFbHRjR3hsYldWdWRDQjBieUJ3WlhKbWIzSnRJRzl1WlNCMGFXMWxYRzRnSUNBZ0lDb2dkMjl5YXlCdmJpQjBhR1VnWld4bGJXVnVkQ0JoWm5SbGNpQjFjR1JoZEdVdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCVFpYUjBhVzVuSUhCeWIzQmxjblJwWlhNZ2FXNXphV1JsSUhSb2FYTWdiV1YwYUc5a0lIZHBiR3dnZEhKcFoyZGxjaUIwYUdVZ1pXeGxiV1Z1ZENCMGJ5QjFjR1JoZEdWY2JpQWdJQ0FnS2lCaFoyRnBiaUJoWm5SbGNpQjBhR2x6SUhWd1pHRjBaU0JqZVdOc1pTQmpiMjF3YkdWMFpYTXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1gyTm9ZVzVuWldSUWNtOXdaWEowYVdWeklFMWhjQ0J2WmlCamFHRnVaMlZrSUhCeWIzQmxjblJwWlhNZ2QybDBhQ0J2YkdRZ2RtRnNkV1Z6WEc0Z0lDQWdJQ292WEc0Z0lDQWdabWx5YzNSVmNHUmhkR1ZrS0Y5amFHRnVaMlZrVUhKdmNHVnlkR2xsY3lrZ2UxeHVJQ0FnSUgxY2JuMWNibDloSUQwZ1ptbHVZV3hwZW1Wa08xeHVMeW9xWEc0Z0tpQk5ZWEpyY3lCamJHRnpjeUJoY3lCb1lYWnBibWNnWm1sdWFYTm9aV1FnWTNKbFlYUnBibWNnY0hKdmNHVnlkR2xsY3k1Y2JpQXFMMXh1VlhCa1lYUnBibWRGYkdWdFpXNTBXMTloWFNBOUlIUnlkV1U3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMTFjR1JoZEdsdVp5MWxiR1Z0Wlc1MExtcHpMbTFoY0NJc0lpOHFLbHh1SUNvZ1FHeHBZMlZ1YzJWY2JpQXFJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhOeUJVYUdVZ1VHOXNlVzFsY2lCUWNtOXFaV04wSUVGMWRHaHZjbk11SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLaUJVYUdseklHTnZaR1VnYldGNUlHOXViSGtnWW1VZ2RYTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUlITjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdZWFJjYmlBcUlHaDBkSEE2THk5d2IyeDViV1Z5TG1kcGRHaDFZaTVwYnk5TVNVTkZUbE5GTG5SNGRGeHVJQ29nVkdobElHTnZiWEJzWlhSbElITmxkQ0J2WmlCaGRYUm9iM0p6SUcxaGVTQmlaU0JtYjNWdVpDQmhkRnh1SUNvZ2FIUjBjRG92TDNCdmJIbHRaWEl1WjJsMGFIVmlMbWx2TDBGVlZFaFBVbE11ZEhoMFhHNGdLaUJVYUdVZ1kyOXRjR3hsZEdVZ2MyVjBJRzltSUdOdmJuUnlhV0oxZEc5eWN5QnRZWGtnWW1VZ1ptOTFibVFnWVhSY2JpQXFJR2gwZEhBNkx5OXdiMng1YldWeUxtZHBkR2gxWWk1cGJ5OURUMDVVVWtsQ1ZWUlBVbE11ZEhoMFhHNGdLaUJEYjJSbElHUnBjM1J5YVdKMWRHVmtJR0o1SUVkdmIyZHNaU0JoY3lCd1lYSjBJRzltSUhSb1pTQndiMng1YldWeUlIQnliMnBsWTNRZ2FYTWdZV3h6YjF4dUlDb2djM1ZpYW1WamRDQjBieUJoYmlCaFpHUnBkR2x2Ym1Gc0lFbFFJSEpwWjJoMGN5Qm5jbUZ1ZENCbWIzVnVaQ0JoZEZ4dUlDb2dhSFIwY0RvdkwzQnZiSGx0WlhJdVoybDBhSFZpTG1sdkwxQkJWRVZPVkZNdWRIaDBYRzRnS2k5Y2JtTnZibk4wSUd4bFoyRmplVU4xYzNSdmJVVnNaVzFsYm5RZ1BTQW9kR0ZuVG1GdFpTd2dZMnhoZW5vcElEMCtJSHRjYmlBZ0lDQjNhVzVrYjNjdVkzVnpkRzl0Uld4bGJXVnVkSE11WkdWbWFXNWxLSFJoWjA1aGJXVXNJR05zWVhwNktUdGNiaUFnSUNBdkx5QkRZWE4wSUdGeklHRnVlU0JpWldOaGRYTmxJRlJUSUdSdlpYTnVKM1FnY21WamIyZHVhWHBsSUhSb1pTQnlaWFIxY200Z2RIbHdaU0JoY3lCaVpXbHVaeUJoWEc0Z0lDQWdMeThnYzNWaWRIbHdaU0J2WmlCMGFHVWdaR1ZqYjNKaGRHVmtJR05zWVhOeklIZG9aVzRnWTJ4aGVub2dhWE1nZEhsd1pXUWdZWE5jYmlBZ0lDQXZMeUJnUTI5dWMzUnlkV04wYjNJOFNGUk5URVZzWlcxbGJuUStZQ0JtYjNJZ2MyOXRaU0J5WldGemIyNHVYRzRnSUNBZ0x5OGdZRU52Ym5OMGNuVmpkRzl5UEVoVVRVeEZiR1Z0Wlc1MFBtQWdhWE1nYUdWc2NHWjFiQ0IwYnlCdFlXdGxJSE4xY21VZ2RHaGxJR1JsWTI5eVlYUnZjaUJwYzF4dUlDQWdJQzh2SUdGd2NHeHBaV1FnZEc4Z1pXeGxiV1Z1ZEhNZ2FHOTNaWFpsY2k1Y2JpQWdJQ0F2THlCMGMyeHBiblE2WkdsellXSnNaUzF1WlhoMExXeHBibVU2Ym04dFlXNTVYRzRnSUNBZ2NtVjBkWEp1SUdOc1lYcDZPMXh1ZlR0Y2JtTnZibk4wSUhOMFlXNWtZWEprUTNWemRHOXRSV3hsYldWdWRDQTlJQ2gwWVdkT1lXMWxMQ0JrWlhOamNtbHdkRzl5S1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZXlCcmFXNWtMQ0JsYkdWdFpXNTBjeUI5SUQwZ1pHVnpZM0pwY0hSdmNqdGNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCcmFXNWtMRnh1SUNBZ0lDQWdJQ0JsYkdWdFpXNTBjeXhjYmlBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUJqWVd4c1ltRmpheUJwY3lCallXeHNaV1FnYjI1alpTQjBhR1VnWTJ4aGMzTWdhWE1nYjNSb1pYSjNhWE5sSUdaMWJHeDVJR1JsWm1sdVpXUmNiaUFnSUNBZ0lDQWdabWx1YVhOb1pYSW9ZMnhoZW5vcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTVqZFhOMGIyMUZiR1Z0Wlc1MGN5NWtaV1pwYm1Vb2RHRm5UbUZ0WlN3Z1kyeGhlbm9wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JuMDdYRzR2S2lwY2JpQXFJRU5zWVhOeklHUmxZMjl5WVhSdmNpQm1ZV04wYjNKNUlIUm9ZWFFnWkdWbWFXNWxjeUIwYUdVZ1pHVmpiM0poZEdWa0lHTnNZWE56SUdGeklHRWdZM1Z6ZEc5dElHVnNaVzFsYm5RdVhHNGdLbHh1SUNvZ1lHQmdYRzRnS2lCQVkzVnpkRzl0Uld4bGJXVnVkQ2duYlhrdFpXeGxiV1Z1ZENjcFhHNGdLaUJqYkdGemN5Qk5lVVZzWlcxbGJuUWdlMXh1SUNvZ0lDQnlaVzVrWlhJb0tTQjdYRzRnS2lBZ0lDQWdjbVYwZFhKdUlHaDBiV3hnWUR0Y2JpQXFJQ0FnZlZ4dUlDb2dmVnh1SUNvZ1lHQmdYRzRnS2x4dUlDb2dRSEJoY21GdElIUmhaMDVoYldVZ1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUdOMWMzUnZiU0JsYkdWdFpXNTBJSFJ2SUdSbFptbHVaUzVjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUdOMWMzUnZiVVZzWlcxbGJuUWdQU0FvZEdGblRtRnRaU2tnUFQ0Z0tHTnNZWE56VDNKRVpYTmpjbWx3ZEc5eUtTQTlQaUFvZEhsd1pXOW1JR05zWVhOelQzSkVaWE5qY21sd2RHOXlJRDA5UFNBblpuVnVZM1JwYjI0bktTQS9YRzRnSUNBZ2JHVm5ZV041UTNWemRHOXRSV3hsYldWdWRDaDBZV2RPWVcxbExDQmpiR0Z6YzA5eVJHVnpZM0pwY0hSdmNpa2dPbHh1SUNBZ0lITjBZVzVrWVhKa1EzVnpkRzl0Uld4bGJXVnVkQ2gwWVdkT1lXMWxMQ0JqYkdGemMwOXlSR1Z6WTNKcGNIUnZjaWs3WEc1amIyNXpkQ0J6ZEdGdVpHRnlaRkJ5YjNCbGNuUjVJRDBnS0c5d2RHbHZibk1zSUdWc1pXMWxiblFwSUQwK0lIdGNiaUFnSUNBdkx5QlhhR1Z1SUdSbFkyOXlZWFJwYm1jZ1lXNGdZV05qWlhOemIzSXNJSEJoYzNNZ2FYUWdkR2h5YjNWbmFDQmhibVFnWVdSa0lIQnliM0JsY25SNUlHMWxkR0ZrWVhSaExseHVJQ0FnSUM4dklFNXZkR1VzSUhSb1pTQmdhR0Z6VDNkdVVISnZjR1Z5ZEhsZ0lHTm9aV05ySUdsdUlHQmpjbVZoZEdWUWNtOXdaWEowZVdBZ1pXNXpkWEpsY3lCM1pTQmtiMjRuZEZ4dUlDQWdJQzh2SUhOMGIyMXdJRzkyWlhJZ2RHaGxJSFZ6WlhJbmN5QmhZMk5sYzNOdmNpNWNiaUFnSUNCcFppQW9aV3hsYldWdWRDNXJhVzVrSUQwOVBTQW5iV1YwYUc5a0p5QW1KaUJsYkdWdFpXNTBMbVJsYzJOeWFYQjBiM0lnSmlaY2JpQWdJQ0FnSUNBZ0lTZ25kbUZzZFdVbklHbHVJR1ZzWlcxbGJuUXVaR1Z6WTNKcGNIUnZjaWtwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzVoYzNOcFoyNG9UMkpxWldOMExtRnpjMmxuYmloN2ZTd2daV3hsYldWdWRDa3NJSHNnWm1sdWFYTm9aWElvWTJ4aGVub3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGNmVpNWpjbVZoZEdWUWNtOXdaWEowZVNobGJHVnRaVzUwTG10bGVTd2diM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlIMHBPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1kzSmxZWFJsVUhKdmNHVnlkSGtvS1NCMFlXdGxjeUJqWVhKbElHOW1JR1JsWm1sdWFXNW5JSFJvWlNCd2NtOXdaWEowZVN3Z1luVjBJSGRsSUhOMGFXeHNYRzRnSUNBZ0lDQWdJQzh2SUcxMWMzUWdjbVYwZFhKdUlITnZiV1VnYTJsdVpDQnZaaUJrWlhOamNtbHdkRzl5TENCemJ5QnlaWFIxY200Z1lTQmtaWE5qY21sd2RHOXlJR1p2Y2lCaGJseHVJQ0FnSUNBZ0lDQXZMeUIxYm5WelpXUWdjSEp2ZEc5MGVYQmxJR1pwWld4a0xpQlVhR1VnWm1sdWFYTm9aWElnWTJGc2JITWdZM0psWVhSbFVISnZjR1Z5ZEhrb0tTNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd0cGJtUTZJQ2RtYVdWc1pDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYazZJRk41YldKdmJDZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NHeGhZMlZ0Wlc1ME9pQW5iM2R1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYzJOeWFYQjBiM0k2SUh0OUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1YyaGxiaUJBWW1GaVpXd3ZjR3gxWjJsdUxYQnliM0J2YzJGc0xXUmxZMjl5WVhSdmNuTWdhVzF3YkdWdFpXNTBjeUJwYm1sMGFXRnNhWHBsY25Nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCa2J5QjBhR2x6SUdsdWMzUmxZV1FnYjJZZ2RHaGxJR2x1YVhScFlXeHBlbVZ5SUdKbGJHOTNMaUJUWldVNlhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlltRmlaV3d2WW1GaVpXd3ZhWE56ZFdWekx6a3lOakFnWlhoMGNtRnpPaUJiWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQnJhVzVrT2lBbmFXNXBkR2xoYkdsNlpYSW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdJQ0FnSUhCc1lXTmxiV1Z1ZERvZ0oyOTNiaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ2FXNXBkR2xoYkdsNlpYSTZJR1JsYzJOeWFYQjBiM0l1YVc1cGRHbGhiR2w2WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtbDBhV0ZzYVhwbGNpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdWc1pXMWxiblF1YVc1cGRHbGhiR2w2WlhJZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwYzF0bGJHVnRaVzUwTG10bGVWMGdQU0JsYkdWdFpXNTBMbWx1YVhScFlXeHBlbVZ5TG1OaGJHd29kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYm1semFHVnlLR05zWVhwNktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoZW5vdVkzSmxZWFJsVUhKdmNHVnlkSGtvWld4bGJXVnVkQzVyWlhrc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JuMDdYRzVqYjI1emRDQnNaV2RoWTNsUWNtOXdaWEowZVNBOUlDaHZjSFJwYjI1ekxDQndjbTkwYnl3Z2JtRnRaU2tnUFQ0Z2UxeHVJQ0FnSUhCeWIzUnZMbU52Ym5OMGNuVmpkRzl5WEc0Z0lDQWdJQ0FnSUM1amNtVmhkR1ZRY205d1pYSjBlU2h1WVcxbExDQnZjSFJwYjI1ektUdGNibjA3WEc0dktpcGNiaUFxSUVFZ2NISnZjR1Z5ZEhrZ1pHVmpiM0poZEc5eUlIZG9hV05vSUdOeVpXRjBaWE1nWVNCTWFYUkZiR1Z0Wlc1MElIQnliM0JsY25SNUlIZG9hV05vSUhKbFpteGxZM1J6SUdGY2JpQXFJR052Y25KbGMzQnZibVJwYm1jZ1lYUjBjbWxpZFhSbElIWmhiSFZsTGlCQklHQlFjbTl3WlhKMGVVUmxZMnhoY21GMGFXOXVZQ0J0WVhrZ2IzQjBhVzl1WVd4c2VTQmlaVnh1SUNvZ2MzVndjR3hwWldRZ2RHOGdZMjl1Wm1sbmRYSmxJSEJ5YjNCbGNuUjVJR1psWVhSMWNtVnpMbHh1SUNwY2JpQXFJRlJvYVhNZ1pHVmpiM0poZEc5eUlITm9iM1ZzWkNCdmJteDVJR0psSUhWelpXUWdabTl5SUhCMVlteHBZeUJtYVdWc1pITXVJRkJ5YVhaaGRHVWdiM0lnY0hKdmRHVmpkR1ZrWEc0Z0tpQm1hV1ZzWkhNZ2MyaHZkV3hrSUhWelpTQjBhR1VnYVc1MFpYSnVZV3hRY205d1pYSjBlU0JrWldOdmNtRjBiM0l1WEc0Z0tseHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUFnSUNBZ1kyeGhjM01nVFhsRmJHVnRaVzUwSUh0Y2JpQXFJQ0FnSUNBZ0lFQndjbTl3WlhKMGVTaDdJSFI1Y0dVNklFSnZiMnhsWVc0Z2ZTbGNiaUFxSUNBZ0lDQWdJR05zYVdOclpXUWdQU0JtWVd4elpUdGNiaUFxSUNBZ0lDQjlYRzRnS2x4dUlDb2dRRVY0Y0c5eWRFUmxZMjl5WVhSbFpFbDBaVzF6WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQndjbTl3WlhKMGVTaHZjSFJwYjI1ektTQjdYRzRnSUNBZ0x5OGdkSE5zYVc1ME9tUnBjMkZpYkdVdGJtVjRkQzFzYVc1bE9tNXZMV0Z1ZVNCa1pXTnZjbUYwYjNKY2JpQWdJQ0J5WlhSMWNtNGdLSEJ5YjNSdlQzSkVaWE5qY21sd2RHOXlMQ0J1WVcxbEtTQTlQaUFvYm1GdFpTQWhQVDBnZFc1a1pXWnBibVZrS1NBL1hHNGdJQ0FnSUNBZ0lHeGxaMkZqZVZCeWIzQmxjblI1S0c5d2RHbHZibk1zSUhCeWIzUnZUM0pFWlhOamNtbHdkRzl5TENCdVlXMWxLU0E2WEc0Z0lDQWdJQ0FnSUhOMFlXNWtZWEprVUhKdmNHVnlkSGtvYjNCMGFXOXVjeXdnY0hKdmRHOVBja1JsYzJOeWFYQjBiM0lwTzF4dWZWeHVMeW9xWEc0Z0tpQkVaV05zWVhKbGN5QmhJSEJ5YVhaaGRHVWdiM0lnY0hKdmRHVmpkR1ZrSUhCeWIzQmxjblI1SUhSb1lYUWdjM1JwYkd3Z2RISnBaMmRsY25NZ2RYQmtZWFJsY3lCMGJ5QjBhR1ZjYmlBcUlHVnNaVzFsYm5RZ2QyaGxiaUJwZENCamFHRnVaMlZ6TGx4dUlDcGNiaUFxSUZCeWIzQmxjblJwWlhNZ1pHVmpiR0Z5WldRZ2RHaHBjeUIzWVhrZ2JYVnpkQ0J1YjNRZ1ltVWdkWE5sWkNCbWNtOXRJRWhVVFV3Z2IzSWdTRlJOVENCMFpXMXdiR0YwYVc1blhHNGdLaUJ6ZVhOMFpXMXpMQ0IwYUdWNUozSmxJSE52YkdWc2VTQm1iM0lnY0hKdmNHVnlkR2xsY3lCcGJuUmxjbTVoYkNCMGJ5QjBhR1VnWld4bGJXVnVkQzRnVkdobGMyVmNiaUFxSUhCeWIzQmxjblJwWlhNZ2JXRjVJR0psSUhKbGJtRnRaV1FnWW5rZ2IzQjBhVzFwZW1GMGFXOXVJSFJ2YjJ4eklHeHBhMlVnWTJ4dmMzVnlaU0JqYjIxd2FXeGxjaTVjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHbHVkR1Z5Ym1Gc1VISnZjR1Z5ZEhrb2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ3Y205d1pYSjBlU2g3SUdGMGRISnBZblYwWlRvZ1ptRnNjMlVzSUdoaGMwTm9ZVzVuWldRNklHOXdkR2x2Ym5NZ1BUMDlJRzUxYkd3Z2ZId2diM0IwYVc5dWN5QTlQVDBnZG05cFpDQXdJRDhnZG05cFpDQXdJRG9nYjNCMGFXOXVjeTVvWVhORGFHRnVaMlZrSUgwcE8xeHVmVnh1THlvcVhHNGdLaUJCSUhCeWIzQmxjblI1SUdSbFkyOXlZWFJ2Y2lCMGFHRjBJR052Ym5abGNuUnpJR0VnWTJ4aGMzTWdjSEp2Y0dWeWRIa2dhVzUwYnlCaElHZGxkSFJsY2lCMGFHRjBYRzRnS2lCbGVHVmpkWFJsY3lCaElIRjFaWEo1VTJWc1pXTjBiM0lnYjI0Z2RHaGxJR1ZzWlcxbGJuUW5jeUJ5Wlc1a1pYSlNiMjkwTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0J6Wld4bFkzUnZjaUJCSUVSUFRWTjBjbWx1WnlCamIyNTBZV2x1YVc1bklHOXVaU0J2Y2lCdGIzSmxJSE5sYkdWamRHOXljeUIwYnlCdFlYUmphQzVjYmlBcVhHNGdLaUJUWldVNklHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtMXZlbWxzYkdFdWIzSm5MMlZ1TFZWVEwyUnZZM012VjJWaUwwRlFTUzlFYjJOMWJXVnVkQzl4ZFdWeWVWTmxiR1ZqZEc5eVhHNGdLbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lBZ0lDQWdZMnhoYzNNZ1RYbEZiR1Z0Wlc1MElIdGNiaUFxSUNBZ0lDQWdJRUJ4ZFdWeWVTZ25JMlpwY25OMEp5bGNiaUFxSUNBZ0lDQWdJR1pwY25OME8xeHVJQ3BjYmlBcUlDQWdJQ0FnSUhKbGJtUmxjaWdwSUh0Y2JpQXFJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHaDBiV3hnWEc0Z0tpQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCcFpEMWNJbVpwY25OMFhDSStQQzlrYVhZK1hHNGdLaUFnSUNBZ0lDQWdJQ0FnUEdScGRpQnBaRDFjSW5ObFkyOXVaRndpUGp3dlpHbDJQbHh1SUNvZ0lDQWdJQ0FnSUNCZ08xeHVJQ29nSUNBZ0lDQWdmVnh1SUNvZ0lDQWdJSDFjYmlBcVhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ4ZFdWeWVTaHpaV3hsWTNSdmNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb2NISnZkRzlQY2tSbGMyTnlhWEIwYjNJc0lGeHVJQ0FnSUM4dklIUnpiR2x1ZERwa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlRwdWJ5MWhibmtnWkdWamIzSmhkRzl5WEc0Z0lDQWdibUZ0WlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmtaWE5qY21sd2RHOXlJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsYm1SbGNsSnZiM1F1Y1hWbGNubFRaV3hsWTNSdmNpaHpaV3hsWTNSdmNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2h1WVcxbElDRTlQU0IxYm1SbFptbHVaV1FwSUQ5Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsWjJGamVWRjFaWEo1S0dSbGMyTnlhWEIwYjNJc0lIQnliM1J2VDNKRVpYTmpjbWx3ZEc5eUxDQnVZVzFsS1NBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGdVpHRnlaRkYxWlhKNUtHUmxjMk55YVhCMGIzSXNJSEJ5YjNSdlQzSkVaWE5qY21sd2RHOXlLVHRjYmlBZ0lDQjlPMXh1ZlZ4dUx5OGdUbTkwWlN3Z2FXNGdkR2hsSUdaMWRIVnlaU3dnZDJVZ2JXRjVJR1Y0ZEdWdVpDQjBhR2x6SUdSbFkyOXlZWFJ2Y2lCMGJ5QnpkWEJ3YjNKMElIUm9aU0IxYzJVZ1kyRnpaVnh1THk4Z2QyaGxjbVVnZEdobElIRjFaWEpwWldRZ1pXeGxiV1Z1ZENCdFlYa2dibVZsWkNCMGJ5QmtieUIzYjNKcklIUnZJR0psWTI5dFpTQnlaV0ZrZVNCMGJ5QnBiblJsY21GamRGeHVMeThnZDJsMGFDQW9aUzVuTGlCc2IyRmtJSE52YldVZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnWTI5a1pTa3VJRWxtSUhOdkxDQjNaU0J0YVdkb2RDQmxiR1ZqZENCMGIxeHVMeThnWVdSa0lHRWdjMlZqYjI1a0lHRnlaM1Z0Wlc1MElHUmxabWx1YVc1bklHRWdablZ1WTNScGIyNGdkR2hoZENCallXNGdZbVVnY25WdUlIUnZJRzFoYTJVZ2RHaGxYRzR2THlCeGRXVnlhV1ZrSUdWc1pXMWxiblFnYkc5aFpHVmtMM1Z3WkdGMFpXUXZjbVZoWkhrdVhHNHZLaXBjYmlBcUlFRWdjSEp2Y0dWeWRIa2daR1ZqYjNKaGRHOXlJSFJvWVhRZ1kyOXVkbVZ5ZEhNZ1lTQmpiR0Z6Y3lCd2NtOXdaWEowZVNCcGJuUnZJR0VnWjJWMGRHVnlJSFJvWVhSY2JpQXFJSEpsZEhWeWJuTWdZU0J3Y205dGFYTmxJSFJvWVhRZ2NtVnpiMngyWlhNZ2RHOGdkR2hsSUhKbGMzVnNkQ0J2WmlCaElIRjFaWEo1VTJWc1pXTjBiM0lnYjI0Z2RHaGxYRzRnS2lCbGJHVnRaVzUwSjNNZ2NtVnVaR1Z5VW05dmRDQmtiMjVsSUdGbWRHVnlJSFJvWlNCbGJHVnRaVzUwSjNNZ1lIVndaR0YwWlVOdmJYQnNaWFJsWUNCd2NtOXRhWE5sWEc0Z0tpQnlaWE52YkhabGN5NGdWMmhsYmlCMGFHVWdjWFZsY21sbFpDQndjbTl3WlhKMGVTQnRZWGtnWTJoaGJtZGxJSGRwZEdnZ1pXeGxiV1Z1ZENCemRHRjBaU3dnZEdocGMxeHVJQ29nWkdWamIzSmhkRzl5SUdOaGJpQmlaU0IxYzJWa0lHbHVjM1JsWVdRZ2IyWWdjbVZ4ZFdseWFXNW5JSFZ6WlhKeklIUnZJR0YzWVdsMElIUm9aVnh1SUNvZ1lIVndaR0YwWlVOdmJYQnNaWFJsWUNCaVpXWnZjbVVnWVdOalpYTnphVzVuSUhSb1pTQndjbTl3WlhKMGVTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2MyVnNaV04wYjNJZ1FTQkVUMDFUZEhKcGJtY2dZMjl1ZEdGcGJtbHVaeUJ2Ym1VZ2IzSWdiVzl5WlNCelpXeGxZM1J2Y25NZ2RHOGdiV0YwWTJndVhHNGdLbHh1SUNvZ1UyVmxPaUJvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTV0YjNwcGJHeGhMbTl5Wnk5bGJpMVZVeTlrYjJOekwxZGxZaTlCVUVrdlJHOWpkVzFsYm5RdmNYVmxjbmxUWld4bFkzUnZjbHh1SUNwY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dJQ0FnSUdOc1lYTnpJRTE1Uld4bGJXVnVkQ0I3WEc0Z0tpQWdJQ0FnSUNCQWNYVmxjbmxCYzNsdVl5Z25JMlpwY25OMEp5bGNiaUFxSUNBZ0lDQWdJR1pwY25OME8xeHVJQ3BjYmlBcUlDQWdJQ0FnSUhKbGJtUmxjaWdwSUh0Y2JpQXFJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHaDBiV3hnWEc0Z0tpQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCcFpEMWNJbVpwY25OMFhDSStQQzlrYVhZK1hHNGdLaUFnSUNBZ0lDQWdJQ0FnUEdScGRpQnBaRDFjSW5ObFkyOXVaRndpUGp3dlpHbDJQbHh1SUNvZ0lDQWdJQ0FnSUNCZ08xeHVJQ29nSUNBZ0lDQWdmVnh1SUNvZ0lDQWdJSDFjYmlBcVhHNGdLaUFnSUNBZ0x5OGdaWGgwWlhKdVlXd2dkWE5oWjJWY2JpQXFJQ0FnSUNCaGMzbHVZeUJrYjFOdmJXVjBhR2x1WjFkcGRHaEdhWEp6ZENncElIdGNiaUFxSUNBZ0lDQWdLR0YzWVdsMElHRk5lVVZzWlcxbGJuUXVabWx5YzNRcExtUnZVMjl0WlhSb2FXNW5LQ2s3WEc0Z0tpQWdJQ0FnZlZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjWFZsY25sQmMzbHVZeWh6Wld4bFkzUnZjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQW9jSEp2ZEc5UGNrUmxjMk55YVhCMGIzSXNJRnh1SUNBZ0lDOHZJSFJ6YkdsdWREcGthWE5oWW14bExXNWxlSFF0YkdsdVpUcHVieTFoYm5rZ1pHVmpiM0poZEc5eVhHNGdJQ0FnYm1GdFpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JrWlhOamNtbHdkRzl5SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhONWJtTWdaMlYwS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjNZV2wwSUhSb2FYTXVkWEJrWVhSbFEyOXRjR3hsZEdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZ1WkdWeVVtOXZkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtITmxiR1ZqZEc5eUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRzVoYldVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1ZuWVdONVVYVmxjbmtvWkdWelkzSnBjSFJ2Y2l3Z2NISnZkRzlQY2tSbGMyTnlhWEIwYjNJc0lHNWhiV1VwSURwY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWVc1a1lYSmtVWFZsY25rb1pHVnpZM0pwY0hSdmNpd2djSEp2ZEc5UGNrUmxjMk55YVhCMGIzSXBPMXh1SUNBZ0lIMDdYRzU5WEc0dktpcGNiaUFxSUVFZ2NISnZjR1Z5ZEhrZ1pHVmpiM0poZEc5eUlIUm9ZWFFnWTI5dWRtVnlkSE1nWVNCamJHRnpjeUJ3Y205d1pYSjBlU0JwYm5SdklHRWdaMlYwZEdWeVhHNGdLaUIwYUdGMElHVjRaV04xZEdWeklHRWdjWFZsY25sVFpXeGxZM1J2Y2tGc2JDQnZiaUIwYUdVZ1pXeGxiV1Z1ZENkeklISmxibVJsY2xKdmIzUXVYRzRnS2x4dUlDb2dRSEJoY21GdElITmxiR1ZqZEc5eUlFRWdSRTlOVTNSeWFXNW5JR052Ym5SaGFXNXBibWNnYjI1bElHOXlJRzF2Y21VZ2MyVnNaV04wYjNKeklIUnZJRzFoZEdOb0xseHVJQ3BjYmlBcUlGTmxaVHBjYmlBcUlHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtMXZlbWxzYkdFdWIzSm5MMlZ1TFZWVEwyUnZZM012VjJWaUwwRlFTUzlFYjJOMWJXVnVkQzl4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNYRzRnS2x4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQWdJQ0FnWTJ4aGMzTWdUWGxGYkdWdFpXNTBJSHRjYmlBcUlDQWdJQ0FnSUVCeGRXVnllVUZzYkNnblpHbDJKeWxjYmlBcUlDQWdJQ0FnSUdScGRuTTdYRzRnS2x4dUlDb2dJQ0FnSUNBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ29nSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhSFJ0YkdCY2JpQXFJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHbGtQVndpWm1seWMzUmNJajQ4TDJScGRqNWNiaUFxSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJR2xrUFZ3aWMyVmpiMjVrWENJK1BDOWthWFkrWEc0Z0tpQWdJQ0FnSUNBZ0lHQTdYRzRnS2lBZ0lDQWdJQ0I5WEc0Z0tpQWdJQ0FnZlZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjWFZsY25sQmJHd29jMlZzWldOMGIzSXBJSHRjYmlBZ0lDQnlaWFIxY200Z0tIQnliM1J2VDNKRVpYTmpjbWx3ZEc5eUxDQmNiaUFnSUNBdkx5QjBjMnhwYm5RNlpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VNmJtOHRZVzU1SUdSbFkyOXlZWFJ2Y2x4dUlDQWdJRzVoYldVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaR1Z6WTNKcGNIUnZjaUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZENncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5Wlc1a1pYSlNiMjkwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvYzJWc1pXTjBiM0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2JtRnRaU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQS9YRzRnSUNBZ0lDQWdJQ0FnSUNCc1pXZGhZM2xSZFdWeWVTaGtaWE5qY21sd2RHOXlMQ0J3Y205MGIwOXlSR1Z6WTNKcGNIUnZjaXdnYm1GdFpTa2dPbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUmhibVJoY21SUmRXVnllU2hrWlhOamNtbHdkRzl5TENCd2NtOTBiMDl5UkdWelkzSnBjSFJ2Y2lrN1hHNGdJQ0FnZlR0Y2JuMWNibU52Ym5OMElHeGxaMkZqZVZGMVpYSjVJRDBnS0dSbGMyTnlhWEIwYjNJc0lIQnliM1J2TENCdVlXMWxLU0E5UGlCN1hHNGdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIQnliM1J2TENCdVlXMWxMQ0JrWlhOamNtbHdkRzl5S1R0Y2JuMDdYRzVqYjI1emRDQnpkR0Z1WkdGeVpGRjFaWEo1SUQwZ0tHUmxjMk55YVhCMGIzSXNJR1ZzWlcxbGJuUXBJRDArSUNoN1hHNGdJQ0FnYTJsdVpEb2dKMjFsZEdodlpDY3NYRzRnSUNBZ2NHeGhZMlZ0Wlc1ME9pQW5jSEp2ZEc5MGVYQmxKeXhjYmlBZ0lDQnJaWGs2SUdWc1pXMWxiblF1YTJWNUxGeHVJQ0FnSUdSbGMyTnlhWEIwYjNJc1hHNTlLVHRjYm1OdmJuTjBJSE4wWVc1a1lYSmtSWFpsYm5SUGNIUnBiMjV6SUQwZ0tHOXdkR2x2Ym5Nc0lHVnNaVzFsYm5RcElEMCtJSHRjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wTG1GemMybG5iaWhQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0JsYkdWdFpXNTBLU3dnZXlCbWFXNXBjMmhsY2loamJHRjZlaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdUMkpxWldOMExtRnpjMmxuYmloamJHRjZlaTV3Y205MGIzUjVjR1ZiWld4bGJXVnVkQzVyWlhsZExDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdmU0I5S1R0Y2JuMDdYRzVqYjI1emRDQnNaV2RoWTNsRmRtVnVkRTl3ZEdsdmJuTWdQU0JjYmk4dklIUnpiR2x1ZERwa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlRwdWJ5MWhibmtnYkdWbllXTjVJR1JsWTI5eVlYUnZjbHh1S0c5d2RHbHZibk1zSUhCeWIzUnZMQ0J1WVcxbEtTQTlQaUI3WEc0Z0lDQWdUMkpxWldOMExtRnpjMmxuYmlod2NtOTBiMXR1WVcxbFhTd2diM0IwYVc5dWN5azdYRzU5TzF4dUx5b3FYRzRnS2lCQlpHUnpJR1YyWlc1MElHeHBjM1JsYm1WeUlHOXdkR2x2Ym5NZ2RHOGdZU0J0WlhSb2IyUWdkWE5sWkNCaGN5QmhiaUJsZG1WdWRDQnNhWE4wWlc1bGNpQnBiaUJoWEc0Z0tpQnNhWFF0YUhSdGJDQjBaVzF3YkdGMFpTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2IzQjBhVzl1Y3lCQmJpQnZZbXBsWTNRZ2RHaGhkQ0J6Y0dWamFXWnBaWE1nWlhabGJuUWdiR2x6ZEdWdVpYSWdiM0IwYVc5dWN5QmhjeUJoWTJObGNIUmxaQ0JpZVZ4dUlDb2dZRVYyWlc1MFZHRnlaMlYwSTJGa1pFVjJaVzUwVEdsemRHVnVaWEpnSUdGdVpDQmdSWFpsYm5SVVlYSm5aWFFqY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY21BdVhHNGdLbHh1SUNvZ1EzVnljbVZ1ZENCaWNtOTNjMlZ5Y3lCemRYQndiM0owSUhSb1pTQmdZMkZ3ZEhWeVpXQXNJR0J3WVhOemFYWmxZQ3dnWVc1a0lHQnZibU5sWUNCdmNIUnBiMjV6TGlCVFpXVTZYRzRnS2lCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1dGIzcHBiR3hoTG05eVp5OWxiaTFWVXk5a2IyTnpMMWRsWWk5QlVFa3ZSWFpsYm5SVVlYSm5aWFF2WVdSa1JYWmxiblJNYVhOMFpXNWxjaU5RWVhKaGJXVjBaWEp6WEc0Z0tseHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUFnSUNBZ1kyeGhjM01nVFhsRmJHVnRaVzUwSUh0Y2JpQXFJQ0FnSUNBZ0lHTnNhV05yWldRZ1BTQm1ZV3h6WlR0Y2JpQXFYRzRnS2lBZ0lDQWdJQ0J5Wlc1a1pYSW9LU0I3WEc0Z0tpQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCb2RHMXNZRnh1SUNvZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnUUdOc2FXTnJQU1I3ZEdocGN5NWZiMjVEYkdsamEzMWdQbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdQR0oxZEhSdmJqNDhMMkoxZEhSdmJqNWNiaUFxSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBcUlDQWdJQ0FnSUNBZ1lEdGNiaUFxSUNBZ0lDQWdJSDFjYmlBcVhHNGdLaUFnSUNBZ0lDQkFaWFpsYm5SUGNIUnBiMjV6S0h0allYQjBkWEpsT2lCMGNuVmxmU2xjYmlBcUlDQWdJQ0FnSUY5dmJrTnNhV05yS0dVcElIdGNiaUFxSUNBZ0lDQWdJQ0FnZEdocGN5NWpiR2xqYTJWa0lEMGdkSEoxWlR0Y2JpQXFJQ0FnSUNBZ0lIMWNiaUFxSUNBZ0lDQjlYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCbGRtVnVkRTl3ZEdsdmJuTW9iM0IwYVc5dWN5a2dlMXh1SUNBZ0lDOHZJRkpsZEhWeWJpQjJZV3gxWlNCMGVYQmxaQ0JoY3lCaGJua2dkRzhnY0hKbGRtVnVkQ0JVZVhCbFUyTnlhWEIwSUdaeWIyMGdZMjl0Y0d4aGFXNXBibWNnZEdoaGRGeHVJQ0FnSUM4dklITjBZVzVrWVhKa0lHUmxZMjl5WVhSdmNpQm1kVzVqZEdsdmJpQnphV2R1WVhSMWNtVWdaRzlsY3lCdWIzUWdiV0YwWTJnZ1ZIbHdaVk5qY21sd2RDQmtaV052Y21GMGIzSmNiaUFnSUNBdkx5QnphV2R1WVhSMWNtVmNiaUFnSUNBdkx5QlVUMFJQS0d0elkyaGhZV1lwT2lCMWJtTnNaV0Z5SUhkb2VTQnBkQ0IzWVhNZ2IyNXNlU0JtWVdsc2FXNW5JRzl1SUhSb2FYTWdaR1ZqYjNKaGRHOXlJR0Z1WkNCdWIzUmNiaUFnSUNBdkx5QjBhR1VnYjNSb1pYSnpYRzRnSUNBZ2NtVjBkWEp1SUNnb2NISnZkRzlQY2tSbGMyTnlhWEIwYjNJc0lHNWhiV1VwSUQwK0lDaHVZVzFsSUNFOVBTQjFibVJsWm1sdVpXUXBJRDljYmlBZ0lDQWdJQ0FnYkdWbllXTjVSWFpsYm5SUGNIUnBiMjV6S0c5d2RHbHZibk1zSUhCeWIzUnZUM0pFWlhOamNtbHdkRzl5TENCdVlXMWxLU0E2WEc0Z0lDQWdJQ0FnSUhOMFlXNWtZWEprUlhabGJuUlBjSFJwYjI1ektHOXdkR2x2Ym5Nc0lIQnliM1J2VDNKRVpYTmpjbWx3ZEc5eUtTazdYRzU5WEc0dktpcGNiaUFxSUVFZ2NISnZjR1Z5ZEhrZ1pHVmpiM0poZEc5eUlIUm9ZWFFnWTI5dWRtVnlkSE1nWVNCamJHRnpjeUJ3Y205d1pYSjBlU0JwYm5SdklHRWdaMlYwZEdWeUlIUm9ZWFJjYmlBcUlISmxkSFZ5Ym5NZ2RHaGxJR0JoYzNOcFoyNWxaRTV2WkdWellDQnZaaUIwYUdVZ1oybDJaVzRnYm1GdFpXUWdZSE5zYjNSZ0xpQk9iM1JsTENCMGFHVWdkSGx3WlNCdlpseHVJQ29nZEdocGN5QndjbTl3WlhKMGVTQnphRzkxYkdRZ1ltVWdZVzV1YjNSaGRHVmtJR0Z6SUdCT2IyUmxUR2x6ZEU5bVBFaFVUVXhGYkdWdFpXNTBQbUF1WEc0Z0tseHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY1hWbGNubEJjM05wWjI1bFpFNXZaR1Z6S0hOc2IzUk9ZVzFsSUQwZ0p5Y3NJR1pzWVhSMFpXNGdQU0JtWVd4elpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb2NISnZkRzlQY2tSbGMyTnlhWEIwYjNJc0lGeHVJQ0FnSUM4dklIUnpiR2x1ZERwa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlRwdWJ5MWhibmtnWkdWamIzSmhkRzl5WEc0Z0lDQWdibUZ0WlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmtaWE5qY21sd2RHOXlJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhObGJHVmpkRzl5SUQwZ1lITnNiM1FrZTNOc2IzUk9ZVzFsSUQ4Z1lGdHVZVzFsUFNSN2MyeHZkRTVoYldWOVhXQWdPaUFuSjMxZ08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOc2IzUWdQU0IwYUdsekxuSmxibVJsY2xKdmIzUXVjWFZsY25sVFpXeGxZM1J2Y2loelpXeGxZM1J2Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOc2IzUWdKaVlnYzJ4dmRDNWhjM05wWjI1bFpFNXZaR1Z6S0hzZ1pteGhkSFJsYmlCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRzVoYldVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1ZuWVdONVVYVmxjbmtvWkdWelkzSnBjSFJ2Y2l3Z2NISnZkRzlQY2tSbGMyTnlhWEIwYjNJc0lHNWhiV1VwSURwY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWVc1a1lYSmtVWFZsY25rb1pHVnpZM0pwY0hSdmNpd2djSEp2ZEc5UGNrUmxjMk55YVhCMGIzSXBPMXh1SUNBZ0lIMDdYRzU5WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtaV052Y21GMGIzSnpMbXB6TG0xaGNDSXNJaThxS2x4dVFHeHBZMlZ1YzJWY2JrTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE9TQlVhR1VnVUc5c2VXMWxjaUJRY205cVpXTjBJRUYxZEdodmNuTXVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc1VWFHbHpJR052WkdVZ2JXRjVJRzl1YkhrZ1ltVWdkWE5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVJSE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnWVhSY2JtaDBkSEE2THk5d2IyeDViV1Z5TG1kcGRHaDFZaTVwYnk5TVNVTkZUbE5GTG5SNGRDQlVhR1VnWTI5dGNHeGxkR1VnYzJWMElHOW1JR0YxZEdodmNuTWdiV0Y1SUdKbElHWnZkVzVrSUdGMFhHNW9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlFWVlVTRTlTVXk1MGVIUWdWR2hsSUdOdmJYQnNaWFJsSUhObGRDQnZaaUJqYjI1MGNtbGlkWFJ2Y25NZ2JXRjVJR0psWEc1bWIzVnVaQ0JoZENCb2RIUndPaTh2Y0c5c2VXMWxjaTVuYVhSb2RXSXVhVzh2UTA5T1ZGSkpRbFZVVDFKVExuUjRkQ0JEYjJSbElHUnBjM1J5YVdKMWRHVmtJR0o1SUVkdmIyZHNaU0JoYzF4dWNHRnlkQ0J2WmlCMGFHVWdjRzlzZVcxbGNpQndjbTlxWldOMElHbHpJR0ZzYzI4Z2MzVmlhbVZqZENCMGJ5QmhiaUJoWkdScGRHbHZibUZzSUVsUUlISnBaMmgwY3lCbmNtRnVkRnh1Wm05MWJtUWdZWFFnYUhSMGNEb3ZMM0J2YkhsdFpYSXVaMmwwYUhWaUxtbHZMMUJCVkVWT1ZGTXVkSGgwWEc0cUwxeHVaWGh3YjNKMElHTnZibk4wSUhOMWNIQnZjblJ6UVdSdmNIUnBibWRUZEhsc1pWTm9aV1YwY3lBOUlDZ25ZV1J2Y0hSbFpGTjBlV3hsVTJobFpYUnpKeUJwYmlCRWIyTjFiV1Z1ZEM1d2NtOTBiM1I1Y0dVcElDWW1YRzRnSUNBZ0tDZHlaWEJzWVdObEp5QnBiaUJEVTFOVGRIbHNaVk5vWldWMExuQnliM1J2ZEhsd1pTazdYRzVqYjI1emRDQmpiMjV6ZEhKMVkzUnBiMjVVYjJ0bGJpQTlJRk41YldKdmJDZ3BPMXh1Wlhod2IzSjBJR05zWVhOeklFTlRVMUpsYzNWc2RDQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9ZM056VkdWNGRDd2djMkZtWlZSdmEyVnVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpZV1psVkc5clpXNGdJVDA5SUdOdmJuTjBjblZqZEdsdmJsUnZhMlZ1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KME5UVTFKbGMzVnNkQ0JwY3lCdWIzUWdZMjl1YzNSeWRXTjBZV0pzWlM0Z1ZYTmxJR0IxYm5OaFptVkRVMU5nSUc5eUlHQmpjM05nSUdsdWMzUmxZV1F1SnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1amMzTlVaWGgwSUQwZ1kzTnpWR1Y0ZER0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnVG05MFpTd2dkR2hwY3lCcGN5QmhJR2RsZEhSbGNpQnpieUIwYUdGMElHbDBKM01nYkdGNmVTNGdTVzRnY0hKaFkzUnBZMlVzSUhSb2FYTWdiV1ZoYm5OY2JpQWdJQ0F2THlCemRIbHNaWE5vWldWMGN5QmhjbVVnYm05MElHTnlaV0YwWldRZ2RXNTBhV3dnZEdobElHWnBjbk4wSUdWc1pXMWxiblFnYVc1emRHRnVZMlVnYVhNZ2JXRmtaUzVjYmlBZ0lDQm5aWFFnYzNSNWJHVlRhR1ZsZENncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM04wZVd4bFUyaGxaWFFnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdUbTkwWlN3Z2FXWWdZR0ZrYjNCMFpXUlRkSGxzWlZOb1pXVjBjMkFnYVhNZ2MzVndjRzl5ZEdWa0lIUm9aVzRnZDJVZ1lYTnpkVzFsSUVOVFUxTjBlV3hsVTJobFpYUmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHbHpJR052Ym5OMGNuVmpkR0ZpYkdVdVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MzVndjRzl5ZEhOQlpHOXdkR2x1WjFOMGVXeGxVMmhsWlhSektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMzUjViR1ZUYUdWbGRDQTlJRzVsZHlCRFUxTlRkSGxzWlZOb1pXVjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjM1I1YkdWVGFHVmxkQzV5WlhCc1lXTmxVM2x1WXloMGFHbHpMbU56YzFSbGVIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMzUjViR1ZUYUdWbGRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM04wZVd4bFUyaGxaWFE3WEc0Z0lDQWdmVnh1SUNBZ0lIUnZVM1J5YVc1bktDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amMzTlVaWGgwTzF4dUlDQWdJSDFjYm4xY2JpOHFLbHh1SUNvZ1YzSmhjQ0JoSUhaaGJIVmxJR1p2Y2lCcGJuUmxjbkJ2YkdGMGFXOXVJR2x1SUdFZ1kzTnpJSFJoWjJkbFpDQjBaVzF3YkdGMFpTQnNhWFJsY21Gc0xseHVJQ3BjYmlBcUlGUm9hWE1nYVhNZ2RXNXpZV1psSUdKbFkyRjFjMlVnZFc1MGNuVnpkR1ZrSUVOVFV5QjBaWGgwSUdOaGJpQmlaU0IxYzJWa0lIUnZJSEJvYjI1bElHaHZiV1ZjYmlBcUlHOXlJR1Y0Wm1sc2RISmhkR1VnWkdGMFlTQjBieUJoYmlCaGRIUmhZMnRsY2lCamIyNTBjbTlzYkdWa0lITnBkR1V1SUZSaGEyVWdZMkZ5WlNCMGJ5QnZibXg1SUhWelpWeHVJQ29nZEdocGN5QjNhWFJvSUhSeWRYTjBaV1FnYVc1d2RYUXVYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0IxYm5OaFptVkRVMU1nUFNBb2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lFTlRVMUpsYzNWc2RDaFRkSEpwYm1jb2RtRnNkV1VwTENCamIyNXpkSEoxWTNScGIyNVViMnRsYmlrN1hHNTlPMXh1WTI5dWMzUWdkR1Y0ZEVaeWIyMURVMU5TWlhOMWJIUWdQU0FvZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0JwWmlBb2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCRFUxTlNaWE4xYkhRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTG1OemMxUmxlSFE3WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCV1lXeDFaU0J3WVhOelpXUWdkRzhnSjJOemN5Y2dablZ1WTNScGIyNGdiWFZ6ZENCaVpTQmhJQ2RqYzNNbklHWjFibU4wYVc5dUlISmxjM1ZzZERvZ0pIdDJZV3gxWlgwdUlGVnpaU0FuZFc1ellXWmxRMU5USnlCMGJ5QndZWE56SUc1dmJpMXNhWFJsY21Gc0lIWmhiSFZsY3l3Z1luVjBYRzRnSUNBZ0lDQWdJQ0FnSUNCMFlXdGxJR05oY21VZ2RHOGdaVzV6ZFhKbElIQmhaMlVnYzJWamRYSnBkSGt1WUNrN1hHNGdJQ0FnZlZ4dWZUdGNiaThxS2x4dUlDb2dWR1Z0Y0d4aGRHVWdkR0ZuSUhkb2FXTm9JSGRvYVdOb0lHTmhiaUJpWlNCMWMyVmtJSGRwZEdnZ1RHbDBSV3hsYldWdWRDZHpJR0J6ZEhsc1pXQWdjSEp2Y0dWeWRIa2dkRzljYmlBcUlITmxkQ0JsYkdWdFpXNTBJSE4wZVd4bGN5NGdSbTl5SUhObFkzVnlhWFI1SUhKbFlYTnZibk1zSUc5dWJIa2diR2wwWlhKaGJDQnpkSEpwYm1jZ2RtRnNkV1Z6SUcxaGVTQmlaVnh1SUNvZ2RYTmxaQzRnVkc4Z2FXNWpiM0p3YjNKaGRHVWdibTl1TFd4cGRHVnlZV3dnZG1Gc2RXVnpJR0IxYm5OaFptVkRVMU5nSUcxaGVTQmlaU0IxYzJWa0lHbHVjMmxrWlNCaFhHNGdLaUIwWlcxd2JHRjBaU0J6ZEhKcGJtY2djR0Z5ZEM1Y2JpQXFMMXh1Wlhod2IzSjBJR052Ym5OMElHTnpjeUE5SUNoemRISnBibWR6TENBdUxpNTJZV3gxWlhNcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCamMzTlVaWGgwSUQwZ2RtRnNkV1Z6TG5KbFpIVmpaU2dvWVdOakxDQjJMQ0JwWkhncElEMCtJR0ZqWXlBcklIUmxlSFJHY205dFExTlRVbVZ6ZFd4MEtIWXBJQ3NnYzNSeWFXNW5jMXRwWkhnZ0t5QXhYU3dnYzNSeWFXNW5jMXN3WFNrN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCRFUxTlNaWE4xYkhRb1kzTnpWR1Y0ZEN3Z1kyOXVjM1J5ZFdOMGFXOXVWRzlyWlc0cE8xeHVmVHRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXTnpjeTEwWVdjdWFuTXViV0Z3SWl3aUx5b3FYRzRnS2lCQWJHbGpaVzV6WlZ4dUlDb2dRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTNJRlJvWlNCUWIyeDViV1Z5SUZCeWIycGxZM1FnUVhWMGFHOXljeTRnUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFJRlJvYVhNZ1kyOWtaU0J0WVhrZ2IyNXNlU0JpWlNCMWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRZ2MzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQmhkRnh1SUNvZ2FIUjBjRG92TDNCdmJIbHRaWEl1WjJsMGFIVmlMbWx2TDB4SlEwVk9VMFV1ZEhoMFhHNGdLaUJVYUdVZ1kyOXRjR3hsZEdVZ2MyVjBJRzltSUdGMWRHaHZjbk1nYldGNUlHSmxJR1p2ZFc1a0lHRjBYRzRnS2lCb2RIUndPaTh2Y0c5c2VXMWxjaTVuYVhSb2RXSXVhVzh2UVZWVVNFOVNVeTUwZUhSY2JpQXFJRlJvWlNCamIyMXdiR1YwWlNCelpYUWdiMllnWTI5dWRISnBZblYwYjNKeklHMWhlU0JpWlNCbWIzVnVaQ0JoZEZ4dUlDb2dhSFIwY0RvdkwzQnZiSGx0WlhJdVoybDBhSFZpTG1sdkwwTlBUbFJTU1VKVlZFOVNVeTUwZUhSY2JpQXFJRU52WkdVZ1pHbHpkSEpwWW5WMFpXUWdZbmtnUjI5dloyeGxJR0Z6SUhCaGNuUWdiMllnZEdobElIQnZiSGx0WlhJZ2NISnZhbVZqZENCcGN5QmhiSE52WEc0Z0tpQnpkV0pxWldOMElIUnZJR0Z1SUdGa1pHbDBhVzl1WVd3Z1NWQWdjbWxuYUhSeklHZHlZVzUwSUdadmRXNWtJR0YwWEc0Z0tpQm9kSFJ3T2k4dmNHOXNlVzFsY2k1bmFYUm9kV0l1YVc4dlVFRlVSVTVVVXk1MGVIUmNiaUFxTDF4dWFXMXdiM0owSUhzZ2NtVnVaR1Z5SUgwZ1puSnZiU0FuYkdsMExXaDBiV3d2YkdsaUwzTm9ZV1I1TFhKbGJtUmxjaTVxY3ljN1hHNXBiWEJ2Y25RZ2V5QlZjR1JoZEdsdVowVnNaVzFsYm5RZ2ZTQm1jbTl0SUNjdUwyeHBZaTkxY0dSaGRHbHVaeTFsYkdWdFpXNTBMbXB6Snp0Y2JtVjRjRzl5ZENBcUlHWnliMjBnSnk0dmJHbGlMM1Z3WkdGMGFXNW5MV1ZzWlcxbGJuUXVhbk1uTzF4dVpYaHdiM0owSUNvZ1puSnZiU0FuTGk5c2FXSXZaR1ZqYjNKaGRHOXljeTVxY3ljN1hHNWxlSEJ2Y25RZ2V5Qm9kRzFzTENCemRtY3NJRlJsYlhCc1lYUmxVbVZ6ZFd4MExDQlRWa2RVWlcxd2JHRjBaVkpsYzNWc2RDQjlJR1p5YjIwZ0oyeHBkQzFvZEcxc0wyeHBkQzFvZEcxc0xtcHpKenRjYm1sdGNHOXlkQ0I3SUhOMWNIQnZjblJ6UVdSdmNIUnBibWRUZEhsc1pWTm9aV1YwY3lCOUlHWnliMjBnSnk0dmJHbGlMMk56Y3kxMFlXY3Vhbk1uTzF4dVpYaHdiM0owSUNvZ1puSnZiU0FuTGk5c2FXSXZZM056TFhSaFp5NXFjeWM3WEc0dkx5QkpUVkJQVWxSQlRsUTZJR1J2SUc1dmRDQmphR0Z1WjJVZ2RHaGxJSEJ5YjNCbGNuUjVJRzVoYldVZ2IzSWdkR2hsSUdGemMybG5ibTFsYm5RZ1pYaHdjbVZ6YzJsdmJpNWNiaTh2SUZSb2FYTWdiR2x1WlNCM2FXeHNJR0psSUhWelpXUWdhVzRnY21WblpYaGxjeUIwYnlCelpXRnlZMmdnWm05eUlFeHBkRVZzWlcxbGJuUWdkWE5oWjJVdVhHNHZMeUJVVDBSUEtHcDFjM1JwYm1aaFoyNWhibWtwT2lCcGJtcGxZM1FnZG1WeWMybHZiaUJ1ZFcxaVpYSWdZWFFnWW5WcGJHUWdkR2x0WlZ4dUtIZHBibVJ2ZDFzbmJHbDBSV3hsYldWdWRGWmxjbk5wYjI1ekoxMGdmSHdnS0hkcGJtUnZkMXNuYkdsMFJXeGxiV1Z1ZEZabGNuTnBiMjV6SjEwZ1BTQmJYU2twWEc0Z0lDQWdMbkIxYzJnb0p6SXVNeTR4SnlrN1hHNHZLaXBjYmlBcUlGTmxiblJwYm1Gc0lIWmhiSFZsSUhWelpXUWdkRzhnWVhadmFXUWdZMkZzYkdsdVp5QnNhWFF0YUhSdGJDZHpJSEpsYm1SbGNpQm1kVzVqZEdsdmJpQjNhR1Z1WEc0Z0tpQnpkV0pqYkdGemMyVnpJR1J2SUc1dmRDQnBiWEJzWlcxbGJuUWdZSEpsYm1SbGNtQmNiaUFxTDF4dVkyOXVjM1FnY21WdVpHVnlUbTkwU1cxd2JHVnRaVzUwWldRZ1BTQjdmVHRjYm1WNGNHOXlkQ0JqYkdGemN5Qk1hWFJGYkdWdFpXNTBJR1Y0ZEdWdVpITWdWWEJrWVhScGJtZEZiR1Z0Wlc1MElIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWFIxY200Z2RHaGxJR0Z5Y21GNUlHOW1JSE4wZVd4bGN5QjBieUJoY0hCc2VTQjBieUIwYUdVZ1pXeGxiV1Z1ZEM1Y2JpQWdJQ0FnS2lCUGRtVnljbWxrWlNCMGFHbHpJRzFsZEdodlpDQjBieUJwYm5SbFozSmhkR1VnYVc1MGJ5QmhJSE4wZVd4bElHMWhibUZuWlcxbGJuUWdjM2x6ZEdWdExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHNXZZMjlzYkdGd2MyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCemRHRjBhV01nWjJWMFUzUjViR1Z6S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6ZEhsc1pYTTdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtpQkFibTlqYjJ4c1lYQnpaU0FxTDF4dUlDQWdJSE4wWVhScFl5QmZaMlYwVlc1cGNYVmxVM1I1YkdWektDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCUGJteDVJR2RoZEdobGNpQnpkSGxzWlhNZ2IyNWpaU0J3WlhJZ1kyeGhjM05jYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YUdGelQzZHVVSEp2Y0dWeWRIa29TbE5EYjIxd2FXeGxjbDl5Wlc1aGJXVlFjbTl3WlhKMGVTZ25YM04wZVd4bGN5Y3NJSFJvYVhNcEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJRlJoYTJVZ1kyRnlaU0J1YjNRZ2RHOGdZMkZzYkNCZ2RHaHBjeTVuWlhSVGRIbHNaWE1vS1dBZ2JYVnNkR2x3YkdVZ2RHbHRaWE1nYzJsdVkyVWdkR2hwYzF4dUlDQWdJQ0FnSUNBdkx5Qm5aVzVsY21GMFpYTWdibVYzSUVOVFUxSmxjM1ZzZEhNZ1pXRmphQ0IwYVcxbExseHVJQ0FnSUNBZ0lDQXZMeUJVVDBSUEtITnZjblpsYkd3cE9pQlRhVzVqWlNCM1pTQmtieUJ1YjNRZ1kyRmphR1VnUTFOVFVtVnpkV3gwY3lCaWVTQnBibkIxZEN3Z1lXNTVYRzRnSUNBZ0lDQWdJQzh2SUhOb1lYSmxaQ0J6ZEhsc1pYTWdkMmxzYkNCblpXNWxjbUYwWlNCdVpYY2djM1I1YkdWemFHVmxkQ0J2WW1wbFkzUnpMQ0IzYUdsamFDQnBjeUIzWVhOMFpXWjFiQzVjYmlBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUJ6YUc5MWJHUWdZbVVnWVdSa2NtVnpjMlZrSUhkb1pXNGdZU0JpY205M2MyVnlJSE5vYVhCeklHTnZibk4wY25WamRHRmliR1ZjYmlBZ0lDQWdJQ0FnTHk4Z2MzUjViR1Z6YUdWbGRITXVYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnpaWEpUZEhsc1pYTWdQU0IwYUdsekxtZGxkRk4wZVd4bGN5Z3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RYTmxjbE4wZVd4bGN5QTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpkSGxzWlhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLSFZ6WlhKVGRIbHNaWE1wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCRVpTMWtkWEJzYVdOaGRHVWdjM1I1YkdWeklIQnlaWE5sY25acGJtY2dkR2hsSUY5c1lYTjBYeUJwYm5OMFlXNWpaU0JwYmlCMGFHVWdjMlYwTGx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVkdocGN5QnBjeUJoSUhCbGNtWnZjbTFoYm1ObElHOXdkR2x0YVhwaGRHbHZiaUIwYnlCaGRtOXBaQ0JrZFhCc2FXTmhkR1ZrSUhOMGVXeGxjeUIwYUdGMElHTmhibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdiMk5qZFhJZ1pYTndaV05wWVd4c2VTQjNhR1Z1SUdOdmJYQnZjMmx1WnlCMmFXRWdjM1ZpWTJ4aGMzTnBibWN1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJVYUdVZ2JHRnpkQ0JwZEdWdElHbHpJR3RsY0hRZ2RHOGdkSEo1SUhSdklIQnlaWE5sY25abElIUm9aU0JqWVhOallXUmxJRzl5WkdWeUlIZHBkR2dnZEdobFhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCaGMzTjFiWEIwYVc5dUlIUm9ZWFFnYVhRbmN5QnRiM04wSUdsdGNHOXlkR0Z1ZENCMGFHRjBJR3hoYzNRZ1lXUmtaV1FnYzNSNWJHVnpJRzkyWlhKeWFXUmxYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QndjbVYyYVc5MWN5QnpkSGxzWlhNdVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmhaR1JUZEhsc1pYTWdQU0FvYzNSNWJHVnpMQ0J6WlhRcElEMCtJSE4wZVd4bGN5NXlaV1IxWTJWU2FXZG9kQ2dvYzJWMExDQnpLU0E5UGlCY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUU1dmRHVTZJRTl1SUVsRklITmxkQzVoWkdRb0tTQmtiMlZ6SUc1dmRDQnlaWFIxY200Z2RHaGxJSE5sZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdRWEp5WVhrdWFYTkJjbkpoZVNoektTQS9JR0ZrWkZOMGVXeGxjeWh6TENCelpYUXBJRG9nS0hObGRDNWhaR1FvY3lrc0lITmxkQ2tzSUhObGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJjbkpoZVM1bWNtOXRJR1J2WlhNZ2JtOTBJSGR2Y21zZ2IyNGdVMlYwSUdsdUlFbEZMQ0J2ZEdobGNuZHBjMlVnY21WMGRYSnVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJjbkpoZVM1bWNtOXRLR0ZrWkZOMGVXeGxjeWgxYzJWeVUzUjViR1Z6TENCdVpYY2dVMlYwUEVOVFUxSmxjM1ZzZEQ0b0tTa3BMbkpsZG1WeWMyVW9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzJWMElEMGdZV1JrVTNSNWJHVnpLSFZ6WlhKVGRIbHNaWE1zSUc1bGR5QlRaWFFvS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnpkSGxzWlhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkQzVtYjNKRllXTm9LQ2gyS1NBOVBpQnpkSGxzWlhNdWRXNXphR2xtZENoMktTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6ZEhsc1pYTWdQU0J6ZEhsc1pYTTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6ZEhsc1pYTWdQU0JiZFhObGNsTjBlV3hsYzEwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VHVnlabTl5YlhNZ1pXeGxiV1Z1ZENCcGJtbDBhV0ZzYVhwaGRHbHZiaTRnUW5rZ1pHVm1ZWFZzZENCMGFHbHpJR05oYkd4eklHQmpjbVZoZEdWU1pXNWtaWEpTYjI5MFlGeHVJQ0FnSUNBcUlIUnZJR055WldGMFpTQjBhR1VnWld4bGJXVnVkQ0JnY21WdVpHVnlVbTl2ZEdBZ2JtOWtaU0JoYm1RZ1kyRndkSFZ5WlhNZ1lXNTVJSEJ5WlMxelpYUWdkbUZzZFdWeklHWnZjbHh1SUNBZ0lDQXFJSEpsWjJsemRHVnlaV1FnY0hKdmNHVnlkR2xsY3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JwYm1sMGFXRnNhWHBsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2k1cGJtbDBhV0ZzYVhwbEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVYMmRsZEZWdWFYRjFaVk4wZVd4bGN5Z3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxibVJsY2xKdmIzUWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVlNaVzVrWlhKU2IyOTBLQ2s3WEc0Z0lDQWdJQ0FnSUM4dklFNXZkR1VzSUdsbUlISmxibVJsY2xKdmIzUWdhWE1nYm05MElHRWdjMmhoWkc5M1VtOXZkQ3dnYzNSNWJHVnpJSGR2ZFd4a0wyTnZkV3hrSUdGd2NHeDVJSFJ2SUhSb1pWeHVJQ0FnSUNBZ0lDQXZMeUJsYkdWdFpXNTBKM01nWjJWMFVtOXZkRTV2WkdVb0tTNGdWMmhwYkdVZ2RHaHBjeUJqYjNWc1pDQmlaU0JrYjI1bExDQjNaU2R5WlNCamFHOXZjMmx1WnlCdWIzUWdkRzljYmlBZ0lDQWdJQ0FnTHk4Z2MzVndjRzl5ZENCMGFHbHpJRzV2ZHlCemFXNWpaU0JwZENCM2IzVnNaQ0J5WlhGMWFYSmxJR1JwWm1abGNtVnVkQ0JzYjJkcFl5QmhjbTkxYm1RZ1pHVXRaSFZ3YVc1bkxseHVJQ0FnSUNBZ0lDQnBaaUFvZDJsdVpHOTNMbE5vWVdSdmQxSnZiM1FnSmlZZ2RHaHBjeTV5Wlc1a1pYSlNiMjkwSUdsdWMzUmhibU5sYjJZZ2QybHVaRzkzTGxOb1lXUnZkMUp2YjNRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZV1J2Y0hSVGRIbHNaWE1vS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUhSb1pTQnViMlJsSUdsdWRHOGdkMmhwWTJnZ2RHaGxJR1ZzWlcxbGJuUWdjMmh2ZFd4a0lISmxibVJsY2lCaGJtUWdZbmtnWkdWbVlYVnNkRnh1SUNBZ0lDQXFJR055WldGMFpYTWdZVzVrSUhKbGRIVnlibk1nWVc0Z2IzQmxiaUJ6YUdGa2IzZFNiMjkwTGlCSmJYQnNaVzFsYm5RZ2RHOGdZM1Z6ZEc5dGFYcGxJSGRvWlhKbElIUm9aVnh1SUNBZ0lDQXFJR1ZzWlcxbGJuUW5jeUJFVDAwZ2FYTWdjbVZ1WkdWeVpXUXVJRVp2Y2lCbGVHRnRjR3hsTENCMGJ5QnlaVzVrWlhJZ2FXNTBieUIwYUdVZ1pXeGxiV1Z1ZENkelhHNGdJQ0FnSUNvZ1kyaHBiR1JPYjJSbGN5d2djbVYwZFhKdUlHQjBhR2x6WUM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN1JXeGxiV1Z1ZEh4RWIyTjFiV1Z1ZEVaeVlXZHRaVzUwZlNCU1pYUjFjbTV6SUdFZ2JtOWtaU0JwYm5SdklIZG9hV05vSUhSdklISmxibVJsY2k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqY21WaGRHVlNaVzVrWlhKU2IyOTBLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhkSFJoWTJoVGFHRmtiM2NvZXlCdGIyUmxPaUFuYjNCbGJpY2dmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZ3Y0d4cFpYTWdjM1I1YkdsdVp5QjBieUIwYUdVZ1pXeGxiV1Z1ZENCemFHRmtiM2RTYjI5MElIVnphVzVuSUhSb1pTQmdjM1JoZEdsaklHZGxkQ0J6ZEhsc1pYTmdYRzRnSUNBZ0lDb2djSEp2Y0dWeWRIa3VJRk4wZVd4cGJtY2dkMmxzYkNCaGNIQnNlU0IxYzJsdVp5QmdjMmhoWkc5M1VtOXZkQzVoWkc5d2RHVmtVM1I1YkdWVGFHVmxkSE5nSUhkb1pYSmxYRzRnSUNBZ0lDb2dZWFpoYVd4aFlteGxJR0Z1WkNCM2FXeHNJR1poYkd4aVlXTnJJRzkwYUdWeWQybHpaUzRnVjJobGJpQlRhR0ZrYjNjZ1JFOU5JR2x6SUhCdmJIbG1hV3hzWldRc1hHNGdJQ0FnSUNvZ1UyaGhaSGxEVTFNZ2MyTnZjR1Z6SUhOMGVXeGxjeUJoYm1RZ1lXUmtjeUIwYUdWdElIUnZJSFJvWlNCa2IyTjFiV1Z1ZEM0Z1YyaGxiaUJUYUdGa2IzY2dSRTlOWEc0Z0lDQWdJQ29nYVhNZ1lYWmhhV3hoWW14bElHSjFkQ0JnWVdSdmNIUmxaRk4wZVd4bFUyaGxaWFJ6WUNCcGN5QnViM1FzSUhOMGVXeGxjeUJoY21VZ1lYQndaVzVrWldRZ2RHOGdkR2hsWEc0Z0lDQWdJQ29nWlc1a0lHOW1JSFJvWlNCZ2MyaGhaRzkzVW05dmRHQWdkRzhnVzIxcGJXbGpJSE53WldOY2JpQWdJQ0FnS2lCaVpXaGhkbWx2Y2wwb2FIUjBjSE02THk5M2FXTm5MbWRwZEdoMVlpNXBieTlqYjI1emRISjFZM1F0YzNSNWJHVnphR1ZsZEhNdkkzVnphVzVuTFdOdmJuTjBjblZqZEdWa0xYTjBlV3hsYzJobFpYUnpLUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQmhaRzl3ZEZOMGVXeGxjeWdwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSNWJHVnpJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVmYzNSNWJHVnpPMXh1SUNBZ0lDQWdJQ0JwWmlBb2MzUjViR1Z6TG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJRlJvWlhKbElHRnlaU0IwYUhKbFpTQnpaWEJoY21GMFpTQmpZWE5sY3lCb1pYSmxJR0poYzJWa0lHOXVJRk5vWVdSdmR5QkVUMDBnYzNWd2NHOXlkQzVjYmlBZ0lDQWdJQ0FnTHk4Z0tERXBJSE5vWVdSdmQxSnZiM1FnY0c5c2VXWnBiR3hsWkRvZ2RYTmxJRk5vWVdSNVExTlRYRzRnSUNBZ0lDQWdJQzh2SUNneUtTQnphR0ZrYjNkU2IyOTBMbUZrYjNCMFpXUlRkSGxzWlZOb1pXVjBjeUJoZG1GcGJHRmliR1U2SUhWelpTQnBkQzVjYmlBZ0lDQWdJQ0FnTHk4Z0tETXBJSE5vWVdSdmQxSnZiM1F1WVdSdmNIUmxaRk4wZVd4bFUyaGxaWFJ6SUhCdmJIbG1hV3hzWldRNklHRndjR1Z1WkNCemRIbHNaWE1nWVdaMFpYSmNiaUFnSUNBZ0lDQWdMeThnY21WdVpHVnlhVzVuWEc0Z0lDQWdJQ0FnSUdsbUlDaDNhVzVrYjNjdVUyaGhaSGxEVTFNZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlBaGQybHVaRzkzTGxOb1lXUjVRMU5UTG01aGRHbDJaVk5vWVdSdmR5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTGxOb1lXUjVRMU5UTGxOamIzQnBibWRUYUdsdExuQnlaWEJoY21WQlpHOXdkR1ZrUTNOelZHVjRkQ2h6ZEhsc1pYTXViV0Z3S0NoektTQTlQaUJ6TG1OemMxUmxlSFFwTENCMGFHbHpMbXh2WTJGc1RtRnRaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2MzVndjRzl5ZEhOQlpHOXdkR2x1WjFOMGVXeGxVMmhsWlhSektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYm1SbGNsSnZiM1F1WVdSdmNIUmxaRk4wZVd4bFUyaGxaWFJ6SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaWE11YldGd0tDaHpLU0E5UGlCekxuTjBlV3hsVTJobFpYUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCdGRYTjBJR0psSUdSdmJtVWdZV1owWlhJZ2NtVnVaR1Z5YVc1bklITnZJSFJvWlNCaFkzUjFZV3dnYzNSNWJHVWdhVzV6WlhKMGFXOXVJR2x6SUdSdmJtVmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHbHVJR0IxY0dSaGRHVmdMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYm1WbFpITlRhR2x0UVdSdmNIUmxaRk4wZVd4bFUyaGxaWFJ6SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQmpiMjV1WldOMFpXUkRZV3hzWW1GamF5Z3BJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSXVZMjl1Ym1WamRHVmtRMkZzYkdKaFkyc29LVHRjYmlBZ0lDQWdJQ0FnTHk4Z1RtOTBaU3dnWm1seWMzUWdkWEJrWVhSbEwzSmxibVJsY2lCb1lXNWtiR1Z6SUhOMGVXeGxSV3hsYldWdWRDQnpieUIzWlNCdmJteDVJR05oYkd3Z2RHaHBjeUJwWmx4dUlDQWdJQ0FnSUNBdkx5QmpiMjV1WldOMFpXUWdZV1owWlhJZ1ptbHljM1FnZFhCa1lYUmxMbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvWVhOVmNHUmhkR1ZrSUNZbUlIZHBibVJ2ZHk1VGFHRmtlVU5UVXlBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhVzVrYjNjdVUyaGhaSGxEVTFNdWMzUjViR1ZGYkdWdFpXNTBLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGVndaR0YwWlhNZ2RHaGxJR1ZzWlcxbGJuUXVJRlJvYVhNZ2JXVjBhRzlrSUhKbFpteGxZM1J6SUhCeWIzQmxjblI1SUhaaGJIVmxjeUIwYnlCaGRIUnlhV0oxZEdWelhHNGdJQ0FnSUNvZ1lXNWtJR05oYkd4eklHQnlaVzVrWlhKZ0lIUnZJSEpsYm1SbGNpQkVUMDBnZG1saElHeHBkQzFvZEcxc0xpQlRaWFIwYVc1bklIQnliM0JsY25ScFpYTWdhVzV6YVdSbFhHNGdJQ0FnSUNvZ2RHaHBjeUJ0WlhSb2IyUWdkMmxzYkNBcWJtOTBLaUIwY21sbloyVnlJR0Z1YjNSb1pYSWdkWEJrWVhSbExseHVJQ0FnSUNBcUlFQndZWEpoYlNCZlkyaGhibWRsWkZCeWIzQmxjblJwWlhNZ1RXRndJRzltSUdOb1lXNW5aV1FnY0hKdmNHVnlkR2xsY3lCM2FYUm9JRzlzWkNCMllXeDFaWE5jYmlBZ0lDQWdLaTljYmlBZ0lDQjFjR1JoZEdVb1kyaGhibWRsWkZCeWIzQmxjblJwWlhNcElIdGNiaUFnSUNBZ0lDQWdMeThnVTJWMGRHbHVaeUJ3Y205d1pYSjBhV1Z6SUdsdUlHQnlaVzVrWlhKZ0lITm9iM1ZzWkNCdWIzUWdkSEpwWjJkbGNpQmhiaUIxY0dSaGRHVXVJRk5wYm1ObFhHNGdJQ0FnSUNBZ0lDOHZJSFZ3WkdGMFpYTWdZWEpsSUdGc2JHOTNaV1FnWVdaMFpYSWdjM1Z3WlhJdWRYQmtZWFJsTENCcGRDZHpJR2x0Y0c5eWRHRnVkQ0IwYnlCallXeHNJR0J5Wlc1a1pYSmdYRzRnSUNBZ0lDQWdJQzh2SUdKbFptOXlaU0IwYUdGMExseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMFpXMXdiR0YwWlZKbGMzVnNkQ0E5SUhSb2FYTXVjbVZ1WkdWeUtDazdYRzRnSUNBZ0lDQWdJSE4xY0dWeUxuVndaR0YwWlNoamFHRnVaMlZrVUhKdmNHVnlkR2xsY3lrN1hHNGdJQ0FnSUNBZ0lDOHZJRWxtSUhKbGJtUmxjaUJwY3lCdWIzUWdhVzF3YkdWdFpXNTBaV1FnWW5rZ2RHaGxJR052YlhCdmJtVnVkQ3dnWkc5dUozUWdZMkZzYkNCc2FYUXRhSFJ0YkNCeVpXNWtaWEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUmxiWEJzWVhSbFVtVnpkV3gwSUNFOVBTQnlaVzVrWlhKT2IzUkpiWEJzWlcxbGJuUmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNXpkSEoxWTNSdmNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXlaVzVrWlhJb2RHVnRjR3hoZEdWU1pYTjFiSFFzSUhSb2FYTXVjbVZ1WkdWeVVtOXZkQ3dnZXlCelkyOXdaVTVoYldVNklIUm9hWE11Ykc5allXeE9ZVzFsTENCbGRtVnVkRU52Ym5SbGVIUTZJSFJvYVhNZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1YyaGxiaUJ1WVhScGRtVWdVMmhoWkc5M0lFUlBUU0JwY3lCMWMyVmtJR0oxZENCaFpHOXdkR1ZrVTNSNWJHVnpJR0Z5WlNCdWIzUWdjM1Z3Y0c5eWRHVmtMRnh1SUNBZ0lDQWdJQ0F2THlCcGJuTmxjblFnYzNSNWJHbHVaeUJoWm5SbGNpQnlaVzVrWlhKcGJtY2dkRzhnWlc1emRYSmxJR0ZrYjNCMFpXUlRkSGxzWlhNZ2FHRjJaU0JvYVdkb1pYTjBYRzRnSUNBZ0lDQWdJQzh2SUhCeWFXOXlhWFI1TGx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmJtVmxaSE5UYUdsdFFXUnZjSFJsWkZOMGVXeGxVMmhsWlhSektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl1WldWa2MxTm9hVzFCWkc5d2RHVmtVM1I1YkdWVGFHVmxkSE1nUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dWMzUnlkV04wYjNJdVgzTjBlV3hsY3k1bWIzSkZZV05vS0NoektTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjM1I1YkdVZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkemRIbHNaU2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGVXeGxMblJsZUhSRGIyNTBaVzUwSUQwZ2N5NWpjM05VWlhoME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WdVpHVnlVbTl2ZEM1aGNIQmxibVJEYUdsc1pDaHpkSGxzWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJuWnZhMlZrSUc5dUlHVmhZMmdnZFhCa1lYUmxJSFJ2SUhCbGNtWnZjbTBnY21WdVpHVnlhVzVuSUhSaGMydHpMaUJVYUdseklHMWxkR2h2WkNCdFlYa2djbVYwZFhKdVhHNGdJQ0FnSUNvZ1lXNTVJSFpoYkhWbElISmxibVJsY21GaWJHVWdZbmtnYkdsMExXaDBiV3duY3lCT2IyUmxVR0Z5ZENBdElIUjVjR2xqWVd4c2VTQmhJRlJsYlhCc1lYUmxVbVZ6ZFd4MExseHVJQ0FnSUNBcUlGTmxkSFJwYm1jZ2NISnZjR1Z5ZEdsbGN5QnBibk5wWkdVZ2RHaHBjeUJ0WlhSb2IyUWdkMmxzYkNBcWJtOTBLaUIwY21sbloyVnlJSFJvWlNCbGJHVnRaVzUwSUhSdlhHNGdJQ0FnSUNvZ2RYQmtZWFJsTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYm1SbGNrNXZkRWx0Y0d4bGJXVnVkR1ZrTzF4dUlDQWdJSDFjYm4xY2JpOHFLbHh1SUNvZ1JXNXpkWEpsSUhSb2FYTWdZMnhoYzNNZ2FYTWdiV0Z5YTJWa0lHRnpJR0JtYVc1aGJHbDZaV1JnSUdGeklHRnVJRzl3ZEdsdGFYcGhkR2x2YmlCbGJuTjFjbWx1WjF4dUlDb2dhWFFnZDJsc2JDQnViM1FnYm1WbFpHeGxjM05zZVNCMGNua2dkRzhnWUdacGJtRnNhWHBsWUM1Y2JpQXFYRzRnS2lCT2IzUmxJSFJvYVhNZ2NISnZjR1Z5ZEhrZ2JtRnRaU0JwY3lCaElITjBjbWx1WnlCMGJ5QndjbVYyWlc1MElHSnlaV0ZyYVc1bklFTnNiM04xY21VZ1NsTWdRMjl0Y0dsc1pYSmNiaUFxSUc5d2RHbHRhWHBoZEdsdmJuTXVJRk5sWlNCMWNHUmhkR2x1WnkxbGJHVnRaVzUwTG5SeklHWnZjaUJ0YjNKbElHbHVabTl5YldGMGFXOXVMbHh1SUNvdlhHNU1hWFJGYkdWdFpXNTBXeWRtYVc1aGJHbDZaV1FuWFNBOUlIUnlkV1U3WEc0dktpcGNiaUFxSUZKbGJtUmxjaUJ0WlhSb2IyUWdkWE5sWkNCMGJ5QnlaVzVrWlhJZ2RHaGxJSFpoYkhWbElIUnZJSFJvWlNCbGJHVnRaVzUwSjNNZ1JFOU5MbHh1SUNvZ1FIQmhjbUZ0SUhKbGMzVnNkQ0JVYUdVZ2RtRnNkV1VnZEc4Z2NtVnVaR1Z5TGx4dUlDb2dRSEJoY21GdElHTnZiblJoYVc1bGNpQk9iMlJsSUdsdWRHOGdkMmhwWTJnZ2RHOGdjbVZ1WkdWeUxseHVJQ29nUUhCaGNtRnRJRzl3ZEdsdmJuTWdSV3hsYldWdWRDQnVZVzFsTGx4dUlDb2dRRzV2WTI5c2JHRndjMlZjYmlBcUwxeHVUR2wwUld4bGJXVnVkQzV5Wlc1a1pYSWdQU0J5Wlc1a1pYSTdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxc2FYUXRaV3hsYldWdWRDNXFjeTV0WVhBaUxDSm1kVzVqZEdsdmJpQjBLSFFzWlN4ekxHa3BlM1poY2lCdUxISTlZWEpuZFcxbGJuUnpMbXhsYm1kMGFDeHZQWEk4TXo5bE9tNTFiR3c5UFQxcFAyazlUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lobExITXBPbWs3YVdZb1hDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlGSmxabXhsWTNRbUpsd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JRkpsWm14bFkzUXVaR1ZqYjNKaGRHVXBiejFTWldac1pXTjBMbVJsWTI5eVlYUmxLSFFzWlN4ekxHa3BPMlZzYzJVZ1ptOXlLSFpoY2lCaFBYUXViR1Z1WjNSb0xURTdZVDQ5TUR0aExTMHBLRzQ5ZEZ0aFhTa21KaWh2UFNoeVBETS9iaWh2S1RweVBqTS9iaWhsTEhNc2J5azZiaWhsTEhNcEtYeDhieWs3Y21WMGRYSnVJSEkrTXlZbWJ5WW1UMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dVc2N5eHZLU3h2ZldOdmJuTjBJR1U5WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlIZHBibVJ2ZHlZbWJuVnNiQ0U5ZDJsdVpHOTNMbU4xYzNSdmJVVnNaVzFsYm5SekppWjJiMmxrSURBaFBUMTNhVzVrYjNjdVkzVnpkRzl0Uld4bGJXVnVkSE11Y0c5c2VXWnBiR3hYY21Gd1JteDFjMmhEWVd4c1ltRmpheXh6UFNoMExHVXNjejF1ZFd4c0tUMCtlMlp2Y2lnN1pTRTlQWE03S1h0amIyNXpkQ0J6UFdVdWJtVjRkRk5wWW14cGJtYzdkQzV5WlcxdmRtVkRhR2xzWkNobEtTeGxQWE45ZlN4cFBXQjdlMnhwZEMwa2V5aE5ZWFJvTG5KaGJtUnZiU2dwSzF3aVhDSXBMbk5zYVdObEtESXBmWDE5WUN4dVBXQmNYSGd6WXlFdExTUjdhWDB0TFZ4Y2VETmxZQ3h5UFZKbFowVjRjQ2hnSkh0cGZYd2tlMjU5WUNrN1kyeGhjM01nYjN0amIyNXpkSEoxWTNSdmNpaDBMR1VwZTNSb2FYTXVjR0Z5ZEhNOVcxMHNkR2hwY3k1bGJHVnRaVzUwUFdVN1kyOXVjM1FnY3oxYlhTeHVQVnRkTEc4OVpHOWpkVzFsYm5RdVkzSmxZWFJsVkhKbFpWZGhiR3RsY2lobExtTnZiblJsYm5Rc01UTXpMRzUxYkd3c0lURXBPMnhsZENCa1BUQXNZejB0TVN4d1BUQTdZMjl1YzNSN2MzUnlhVzVuY3pwMUxIWmhiSFZsY3pwN2JHVnVaM1JvT2w5OWZUMTBPMlp2Y2lnN2NEeGZPeWw3WTI5dWMzUWdkRDF2TG01bGVIUk9iMlJsS0NrN2FXWW9iblZzYkNFOVBYUXBlMmxtS0dNckt5d3hQVDA5ZEM1dWIyUmxWSGx3WlNsN2FXWW9kQzVvWVhOQmRIUnlhV0oxZEdWektDa3BlMk52Ym5OMElHVTlkQzVoZEhSeWFXSjFkR1Z6TEh0c1pXNW5kR2c2YzMwOVpUdHNaWFFnYVQwd08yWnZjaWhzWlhRZ2REMHdPM1E4Y3p0MEt5c3BZU2hsVzNSZExtNWhiV1VzWENJa2JHbDBKRndpS1NZbWFTc3JPMlp2Y2lnN2FTMHRJRDR3T3lsN1kyOXVjM1FnWlQxMVczQmRMSE05YkM1bGVHVmpLR1VwV3pKZExHazljeTUwYjB4dmQyVnlRMkZ6WlNncEsxd2lKR3hwZENSY0lpeHVQWFF1WjJWMFFYUjBjbWxpZFhSbEtHa3BPM1F1Y21WdGIzWmxRWFIwY21saWRYUmxLR2twTzJOdmJuTjBJRzg5Ymk1emNHeHBkQ2h5S1R0MGFHbHpMbkJoY25SekxuQjFjMmdvZTNSNWNHVTZYQ0poZEhSeWFXSjFkR1ZjSWl4cGJtUmxlRHBqTEc1aGJXVTZjeXh6ZEhKcGJtZHpPbTk5S1N4d0t6MXZMbXhsYm1kMGFDMHhmWDFjSWxSRlRWQk1RVlJGWENJOVBUMTBMblJoWjA1aGJXVW1KaWh1TG5CMWMyZ29kQ2tzYnk1amRYSnlaVzUwVG05a1pUMTBMbU52Ym5SbGJuUXBmV1ZzYzJVZ2FXWW9NejA5UFhRdWJtOWtaVlI1Y0dVcGUyTnZibk4wSUdVOWRDNWtZWFJoTzJsbUtHVXVhVzVrWlhoUFppaHBLVDQ5TUNsN1kyOXVjM1FnYVQxMExuQmhjbVZ1ZEU1dlpHVXNiajFsTG5Od2JHbDBLSElwTEc4OWJpNXNaVzVuZEdndE1UdG1iM0lvYkdWMElHVTlNRHRsUEc4N1pTc3JLWHRzWlhRZ2N5eHlQVzViWlYwN2FXWW9YQ0pjSWowOVBYSXBjejFvS0NrN1pXeHpaWHRqYjI1emRDQjBQV3d1WlhobFl5aHlLVHR1ZFd4c0lUMDlkQ1ltWVNoMFd6SmRMRndpSkd4cGRDUmNJaWttSmloeVBYSXVjMnhwWTJVb01DeDBMbWx1WkdWNEtTdDBXekZkSzNSYk1sMHVjMnhwWTJVb01Dd3ROU2tyZEZzelhTa3NjejFrYjJOMWJXVnVkQzVqY21WaGRHVlVaWGgwVG05a1pTaHlLWDFwTG1sdWMyVnlkRUpsWm05eVpTaHpMSFFwTEhSb2FYTXVjR0Z5ZEhNdWNIVnphQ2g3ZEhsd1pUcGNJbTV2WkdWY0lpeHBibVJsZURvcksyTjlLWDFjSWx3aVBUMDlibHR2WFQ4b2FTNXBibk5sY25SQ1pXWnZjbVVvYUNncExIUXBMSE11Y0hWemFDaDBLU2s2ZEM1a1lYUmhQVzViYjEwc2NDczliMzE5Wld4elpTQnBaaWc0UFQwOWRDNXViMlJsVkhsd1pTbHBaaWgwTG1SaGRHRTlQVDFwS1h0amIyNXpkQ0JsUFhRdWNHRnlaVzUwVG05a1pUdHVkV3hzSVQwOWRDNXdjbVYyYVc5MWMxTnBZbXhwYm1jbUptTWhQVDFrZkh3b1l5c3JMR1V1YVc1elpYSjBRbVZtYjNKbEtHZ29LU3gwS1Nrc1pEMWpMSFJvYVhNdWNHRnlkSE11Y0hWemFDaDdkSGx3WlRwY0ltNXZaR1ZjSWl4cGJtUmxlRHBqZlNrc2JuVnNiRDA5UFhRdWJtVjRkRk5wWW14cGJtYy9kQzVrWVhSaFBWd2lYQ0k2S0hNdWNIVnphQ2gwS1N4akxTMHBMSEFySzMxbGJITmxlMnhsZENCbFBTMHhPMlp2Y2lnN0xURWhQVDBvWlQxMExtUmhkR0V1YVc1a1pYaFBaaWhwTEdVck1Ta3BPeWwwYUdsekxuQmhjblJ6TG5CMWMyZ29lM1I1Y0dVNlhDSnViMlJsWENJc2FXNWtaWGc2TFRGOUtTeHdLeXQ5ZldWc2MyVWdieTVqZFhKeVpXNTBUbTlrWlQxdUxuQnZjQ2dwZldadmNpaGpiMjV6ZENCMElHOW1JSE1wZEM1d1lYSmxiblJPYjJSbExuSmxiVzkyWlVOb2FXeGtLSFFwZlgxamIyNXpkQ0JoUFNoMExHVXBQVDU3WTI5dWMzUWdjejEwTG14bGJtZDBhQzFsTG14bGJtZDBhRHR5WlhSMWNtNGdjejQ5TUNZbWRDNXpiR2xqWlNoektUMDlQV1Y5TEdROWREMCtMVEVoUFQxMExtbHVaR1Y0TEdnOUtDazlQbVJ2WTNWdFpXNTBMbU55WldGMFpVTnZiVzFsYm5Rb1hDSmNJaWtzYkQwdktGc2dYRng0TURsY1hIZ3dZVnhjZURCalhGeDRNR1JkS1NoYlhseGNNQzFjWEhneFJseGNlRGRHTFZ4Y2VEbEdJRndpSno0OUwxMHJLU2hiSUZ4Y2VEQTVYRng0TUdGY1hIZ3dZMXhjZURCa1hTbzlXeUJjWEhnd09WeGNlREJoWEZ4NE1HTmNYSGd3WkYwcUtEODZXMTRnWEZ4NE1EbGNYSGd3WVZ4Y2VEQmpYRng0TUdSY0lpZGdQRDQ5WFNwOFhDSmJYbHdpWFNwOEoxdGVKMTBxS1Nra0x6dG1kVzVqZEdsdmJpQmpLSFFzWlNsN1kyOXVjM1I3Wld4bGJXVnVkRHA3WTI5dWRHVnVkRHB6ZlN4d1lYSjBjenBwZlQxMExHNDlaRzlqZFcxbGJuUXVZM0psWVhSbFZISmxaVmRoYkd0bGNpaHpMREV6TXl4dWRXeHNMQ0V4S1R0c1pYUWdjajExS0drcExHODlhVnR5WFN4aFBTMHhMR1E5TUR0amIyNXpkQ0JvUFZ0ZE8yeGxkQ0JzUFc1MWJHdzdabTl5S0R0dUxtNWxlSFJPYjJSbEtDazdLWHRoS3lzN1kyOXVjM1FnZEQxdUxtTjFjbkpsYm5ST2IyUmxPMlp2Y2loMExuQnlaWFpwYjNWelUybGliR2x1WnowOVBXd21KaWhzUFc1MWJHd3BMR1V1YUdGektIUXBKaVlvYUM1d2RYTm9LSFFwTEc1MWJHdzlQVDFzSmlZb2JEMTBLU2tzYm5Wc2JDRTlQV3dtSm1Rckt6dDJiMmxrSURBaFBUMXZKaVp2TG1sdVpHVjRQVDA5WVRzcGJ5NXBibVJsZUQxdWRXeHNJVDA5YkQ4dE1UcHZMbWx1WkdWNExXUXNjajExS0drc2Npa3NiejFwVzNKZGZXZ3VabTl5UldGamFDaDBQVDUwTG5CaGNtVnVkRTV2WkdVdWNtVnRiM1psUTJocGJHUW9kQ2twZldOdmJuTjBJSEE5ZEQwK2UyeGxkQ0JsUFRFeFBUMDlkQzV1YjJSbFZIbHdaVDh3T2pFN1kyOXVjM1FnY3oxa2IyTjFiV1Z1ZEM1amNtVmhkR1ZVY21WbFYyRnNhMlZ5S0hRc01UTXpMRzUxYkd3c0lURXBPMlp2Y2lnN2N5NXVaWGgwVG05a1pTZ3BPeWxsS3lzN2NtVjBkWEp1SUdWOUxIVTlLSFFzWlQwdE1TazlQbnRtYjNJb2JHVjBJSE05WlNzeE8zTThkQzVzWlc1bmRHZzdjeXNyS1h0amIyNXpkQ0JsUFhSYmMxMDdhV1lvWkNobEtTbHlaWFIxY200Z2MzMXlaWFIxY200dE1YMDdZMjl1YzNRZ1h6MXVaWGNnVjJWaGEwMWhjQ3h0UFhROVBsd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JSFFtSmw4dWFHRnpLSFFwTEdjOWUzMHNaajE3ZlR0amJHRnpjeUI1ZTJOdmJuTjBjblZqZEc5eUtIUXNaU3h6S1h0MGFHbHpMbDlmY0dGeWRITTlXMTBzZEdocGN5NTBaVzF3YkdGMFpUMTBMSFJvYVhNdWNISnZZMlZ6YzI5eVBXVXNkR2hwY3k1dmNIUnBiMjV6UFhOOWRYQmtZWFJsS0hRcGUyeGxkQ0JsUFRBN1ptOXlLR052Ym5OMElITWdiMllnZEdocGN5NWZYM0JoY25SektYWnZhV1FnTUNFOVBYTW1Kbk11YzJWMFZtRnNkV1VvZEZ0bFhTa3NaU3NyTzJadmNpaGpiMjV6ZENCMElHOW1JSFJvYVhNdVgxOXdZWEowY3lsMmIybGtJREFoUFQxMEppWjBMbU52YlcxcGRDZ3BmVjlqYkc5dVpTZ3BlMk52Ym5OMElIUTlaVDkwYUdsekxuUmxiWEJzWVhSbExtVnNaVzFsYm5RdVkyOXVkR1Z1ZEM1amJHOXVaVTV2WkdVb0lUQXBPbVJ2WTNWdFpXNTBMbWx0Y0c5eWRFNXZaR1VvZEdocGN5NTBaVzF3YkdGMFpTNWxiR1Z0Wlc1MExtTnZiblJsYm5Rc0lUQXBMSE05VzEwc2FUMTBhR2x6TG5SbGJYQnNZWFJsTG5CaGNuUnpMRzQ5Wkc5amRXMWxiblF1WTNKbFlYUmxWSEpsWlZkaGJHdGxjaWgwTERFek15eHVkV3hzTENFeEtUdHNaWFFnY2l4dlBUQXNZVDB3TEdnOWJpNXVaWGgwVG05a1pTZ3BPMlp2Y2lnN2J6eHBMbXhsYm1kMGFEc3BhV1lvY2oxcFcyOWRMR1FvY2lrcGUyWnZjaWc3WVR4eUxtbHVaR1Y0T3lsaEt5c3NYQ0pVUlUxUVRFRlVSVndpUFQwOWFDNXViMlJsVG1GdFpTWW1LSE11Y0hWemFDaG9LU3h1TG1OMWNuSmxiblJPYjJSbFBXZ3VZMjl1ZEdWdWRDa3NiblZzYkQwOVBTaG9QVzR1Ym1WNGRFNXZaR1VvS1NrbUppaHVMbU4xY25KbGJuUk9iMlJsUFhNdWNHOXdLQ2tzYUQxdUxtNWxlSFJPYjJSbEtDa3BPMmxtS0Z3aWJtOWtaVndpUFQwOWNpNTBlWEJsS1h0amIyNXpkQ0IwUFhSb2FYTXVjSEp2WTJWemMyOXlMbWhoYm1Sc1pWUmxlSFJGZUhCeVpYTnphVzl1S0hSb2FYTXViM0IwYVc5dWN5azdkQzVwYm5ObGNuUkJablJsY2s1dlpHVW9hQzV3Y21WMmFXOTFjMU5wWW14cGJtY3BMSFJvYVhNdVgxOXdZWEowY3k1d2RYTm9LSFFwZldWc2MyVWdkR2hwY3k1ZlgzQmhjblJ6TG5CMWMyZ29MaTR1ZEdocGN5NXdjbTlqWlhOemIzSXVhR0Z1Wkd4bFFYUjBjbWxpZFhSbFJYaHdjbVZ6YzJsdmJuTW9hQ3h5TG01aGJXVXNjaTV6ZEhKcGJtZHpMSFJvYVhNdWIzQjBhVzl1Y3lrcE8yOHJLMzFsYkhObElIUm9hWE11WDE5d1lYSjBjeTV3ZFhOb0tIWnZhV1FnTUNrc2J5c3JPM0psZEhWeWJpQmxKaVlvWkc5amRXMWxiblF1WVdSdmNIUk9iMlJsS0hRcExHTjFjM1J2YlVWc1pXMWxiblJ6TG5Wd1ozSmhaR1VvZENrcExIUjlmV052Ym5OMElIWTlZQ0FrZTJsOUlHQTdZMnhoYzNNZ1UzdGpiMjV6ZEhKMVkzUnZjaWgwTEdVc2N5eHBLWHQwYUdsekxuTjBjbWx1WjNNOWRDeDBhR2x6TG5aaGJIVmxjejFsTEhSb2FYTXVkSGx3WlQxekxIUm9hWE11Y0hKdlkyVnpjMjl5UFdsOVoyVjBTRlJOVENncGUyTnZibk4wSUhROWRHaHBjeTV6ZEhKcGJtZHpMbXhsYm1kMGFDMHhPMnhsZENCbFBWd2lYQ0lzY3owaE1UdG1iM0lvYkdWMElISTlNRHR5UEhRN2Npc3JLWHRqYjI1emRDQjBQWFJvYVhNdWMzUnlhVzVuYzF0eVhTeHZQWFF1YkdGemRFbHVaR1Y0VDJZb1hDSmNYSGd6WXlFdExWd2lLVHR6UFNodlBpMHhmSHh6S1NZbUxURTlQVDEwTG1sdVpHVjRUMllvWENJdExWeGNlRE5sWENJc2J5c3hLVHRqYjI1emRDQmhQV3d1WlhobFl5aDBLVHRsS3oxdWRXeHNQVDA5WVQ5MEt5aHpQM1k2YmlrNmRDNXpkV0p6ZEhJb01DeGhMbWx1WkdWNEtTdGhXekZkSzJGYk1sMHJYQ0lrYkdsMEpGd2lLMkZiTTEwcmFYMXlaWFIxY200Z1pTczlkR2hwY3k1emRISnBibWR6VzNSZExHVjlaMlYwVkdWdGNHeGhkR1ZGYkdWdFpXNTBLQ2w3WTI5dWMzUWdkRDFrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2lkR1Z0Y0d4aGRHVmNJaWs3Y21WMGRYSnVJSFF1YVc1dVpYSklWRTFNUFhSb2FYTXVaMlYwU0ZSTlRDZ3BMSFI5ZldOdmJuTjBJSGM5ZEQwK2JuVnNiRDA5UFhSOGZDRW9YQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JSFI4ZkZ3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlIUXBMR0k5ZEQwK1FYSnlZWGt1YVhOQmNuSmhlU2gwS1h4OElTZ2hkSHg4SVhSYlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNrN1kyeGhjM01nVUh0amIyNXpkSEoxWTNSdmNpaDBMR1VzY3lsN2RHaHBjeTVrYVhKMGVUMGhNQ3gwYUdsekxtVnNaVzFsYm5ROWRDeDBhR2x6TG01aGJXVTlaU3gwYUdsekxuTjBjbWx1WjNNOWN5eDBhR2x6TG5CaGNuUnpQVnRkTzJadmNpaHNaWFFnZEQwd08zUThjeTVzWlc1bmRHZ3RNVHQwS3lzcGRHaHBjeTV3WVhKMGMxdDBYVDEwYUdsekxsOWpjbVZoZEdWUVlYSjBLQ2w5WDJOeVpXRjBaVkJoY25Rb0tYdHlaWFIxY200Z2JtVjNJSGdvZEdocGN5bDlYMmRsZEZaaGJIVmxLQ2w3WTI5dWMzUWdkRDEwYUdsekxuTjBjbWx1WjNNc1pUMTBMbXhsYm1kMGFDMHhPMnhsZENCelBWd2lYQ0k3Wm05eUtHeGxkQ0JwUFRBN2FUeGxPMmtyS3lsN2N5czlkRnRwWFR0amIyNXpkQ0JsUFhSb2FYTXVjR0Z5ZEhOYmFWMDdhV1lvZG05cFpDQXdJVDA5WlNsN1kyOXVjM1FnZEQxbExuWmhiSFZsTzJsbUtIY29kQ2w4ZkNGaUtIUXBLWE1yUFZ3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCMFAzUTZkQ3RjSWx3aU8yVnNjMlVnWm05eUtHTnZibk4wSUdVZ2IyWWdkQ2x6S3oxY0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ1pUOWxPbVVyWENKY0luMTljbVYwZFhKdUlITXJQWFJiWlYwc2MzMWpiMjF0YVhRb0tYdDBhR2x6TG1ScGNuUjVKaVlvZEdocGN5NWthWEowZVQwaE1TeDBhR2x6TG1Wc1pXMWxiblF1YzJWMFFYUjBjbWxpZFhSbEtIUm9hWE11Ym1GdFpTeDBhR2x6TGw5blpYUldZV3gxWlNncEtTbDlmV05zWVhOeklIaDdZMjl1YzNSeWRXTjBiM0lvZENsN2RHaHBjeTUyWVd4MVpUMTJiMmxrSURBc2RHaHBjeTVqYjIxdGFYUjBaWEk5ZEgxelpYUldZV3gxWlNoMEtYdDBQVDA5WjN4OGR5aDBLU1ltZEQwOVBYUm9hWE11ZG1Gc2RXVjhmQ2gwYUdsekxuWmhiSFZsUFhRc2JTaDBLWHg4S0hSb2FYTXVZMjl0YldsMGRHVnlMbVJwY25SNVBTRXdLU2w5WTI5dGJXbDBLQ2w3Wm05eUtEdHRLSFJvYVhNdWRtRnNkV1VwT3lsN1kyOXVjM1FnZEQxMGFHbHpMblpoYkhWbE8zUm9hWE11ZG1Gc2RXVTlaeXgwS0hSb2FYTXBmWFJvYVhNdWRtRnNkV1VoUFQxbkppWjBhR2x6TG1OdmJXMXBkSFJsY2k1amIyMXRhWFFvS1gxOVkyeGhjM01nVG50amIyNXpkSEoxWTNSdmNpaDBLWHQwYUdsekxuWmhiSFZsUFhadmFXUWdNQ3gwYUdsekxsOWZjR1Z1WkdsdVoxWmhiSFZsUFhadmFXUWdNQ3gwYUdsekxtOXdkR2x2Ym5NOWRIMWhjSEJsYm1SSmJuUnZLSFFwZTNSb2FYTXVjM1JoY25ST2IyUmxQWFF1WVhCd1pXNWtRMmhwYkdRb2FDZ3BLU3gwYUdsekxtVnVaRTV2WkdVOWRDNWhjSEJsYm1SRGFHbHNaQ2hvS0NrcGZXbHVjMlZ5ZEVGbWRHVnlUbTlrWlNoMEtYdDBhR2x6TG5OMFlYSjBUbTlrWlQxMExIUm9hWE11Wlc1a1RtOWtaVDEwTG01bGVIUlRhV0pzYVc1bmZXRndjR1Z1WkVsdWRHOVFZWEowS0hRcGUzUXVYMTlwYm5ObGNuUW9kR2hwY3k1emRHRnlkRTV2WkdVOWFDZ3BLU3gwTGw5ZmFXNXpaWEowS0hSb2FYTXVaVzVrVG05a1pUMW9LQ2twZldsdWMyVnlkRUZtZEdWeVVHRnlkQ2gwS1h0MExsOWZhVzV6WlhKMEtIUm9hWE11YzNSaGNuUk9iMlJsUFdnb0tTa3NkR2hwY3k1bGJtUk9iMlJsUFhRdVpXNWtUbTlrWlN4MExtVnVaRTV2WkdVOWRHaHBjeTV6ZEdGeWRFNXZaR1Y5YzJWMFZtRnNkV1VvZENsN2RHaHBjeTVmWDNCbGJtUnBibWRXWVd4MVpUMTBmV052YlcxcGRDZ3BlMmxtS0c1MWJHdzlQVDEwYUdsekxuTjBZWEowVG05a1pTNXdZWEpsYm5ST2IyUmxLWEpsZEhWeWJqdG1iM0lvTzIwb2RHaHBjeTVmWDNCbGJtUnBibWRXWVd4MVpTazdLWHRqYjI1emRDQjBQWFJvYVhNdVgxOXdaVzVrYVc1blZtRnNkV1U3ZEdocGN5NWZYM0JsYm1ScGJtZFdZV3gxWlQxbkxIUW9kR2hwY3lsOVkyOXVjM1FnZEQxMGFHbHpMbDlmY0dWdVpHbHVaMVpoYkhWbE8zUWhQVDFuSmlZb2R5aDBLVDkwSVQwOWRHaHBjeTUyWVd4MVpTWW1kR2hwY3k1ZlgyTnZiVzFwZEZSbGVIUW9kQ2s2ZENCcGJuTjBZVzVqWlc5bUlGTS9kR2hwY3k1ZlgyTnZiVzFwZEZSbGJYQnNZWFJsVW1WemRXeDBLSFFwT25RZ2FXNXpkR0Z1WTJWdlppQk9iMlJsUDNSb2FYTXVYMTlqYjIxdGFYUk9iMlJsS0hRcE9tSW9kQ2svZEdocGN5NWZYMk52YlcxcGRFbDBaWEpoWW14bEtIUXBPblE5UFQxbVB5aDBhR2x6TG5aaGJIVmxQV1lzZEdocGN5NWpiR1ZoY2lncEtUcDBhR2x6TGw5ZlkyOXRiV2wwVkdWNGRDaDBLU2w5WDE5cGJuTmxjblFvZENsN2RHaHBjeTVsYm1ST2IyUmxMbkJoY21WdWRFNXZaR1V1YVc1elpYSjBRbVZtYjNKbEtIUXNkR2hwY3k1bGJtUk9iMlJsS1gxZlgyTnZiVzFwZEU1dlpHVW9kQ2w3ZEdocGN5NTJZV3gxWlNFOVBYUW1KaWgwYUdsekxtTnNaV0Z5S0Nrc2RHaHBjeTVmWDJsdWMyVnlkQ2gwS1N4MGFHbHpMblpoYkhWbFBYUXBmVjlmWTI5dGJXbDBWR1Y0ZENoMEtYdGpiMjV6ZENCbFBYUm9hWE11YzNSaGNuUk9iMlJsTG01bGVIUlRhV0pzYVc1bkxITTlYQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1LSFE5Ym5Wc2JEMDlkRDljSWx3aU9uUXBQM1E2ZEN0Y0lsd2lPMlU5UFQxMGFHbHpMbVZ1WkU1dlpHVXVjSEpsZG1sdmRYTlRhV0pzYVc1bkppWXpQVDA5WlM1dWIyUmxWSGx3WlQ5bExtUmhkR0U5Y3pwMGFHbHpMbDlmWTI5dGJXbDBUbTlrWlNoa2IyTjFiV1Z1ZEM1amNtVmhkR1ZVWlhoMFRtOWtaU2h6S1Nrc2RHaHBjeTUyWVd4MVpUMTBmVjlmWTI5dGJXbDBWR1Z0Y0d4aGRHVlNaWE4xYkhRb2RDbDdZMjl1YzNRZ1pUMTBhR2x6TG05d2RHbHZibk11ZEdWdGNHeGhkR1ZHWVdOMGIzSjVLSFFwTzJsbUtIUm9hWE11ZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUI1SmlaMGFHbHpMblpoYkhWbExuUmxiWEJzWVhSbFBUMDlaU2wwYUdsekxuWmhiSFZsTG5Wd1pHRjBaU2gwTG5aaGJIVmxjeWs3Wld4elpYdGpiMjV6ZENCelBXNWxkeUI1S0dVc2RDNXdjbTlqWlhOemIzSXNkR2hwY3k1dmNIUnBiMjV6S1N4cFBYTXVYMk5zYjI1bEtDazdjeTUxY0dSaGRHVW9kQzUyWVd4MVpYTXBMSFJvYVhNdVgxOWpiMjF0YVhST2IyUmxLR2twTEhSb2FYTXVkbUZzZFdVOWMzMTlYMTlqYjIxdGFYUkpkR1Z5WVdKc1pTaDBLWHRCY25KaGVTNXBjMEZ5Y21GNUtIUm9hWE11ZG1Gc2RXVXBmSHdvZEdocGN5NTJZV3gxWlQxYlhTeDBhR2x6TG1Oc1pXRnlLQ2twTzJOdmJuTjBJR1U5ZEdocGN5NTJZV3gxWlR0c1pYUWdjeXhwUFRBN1ptOXlLR052Ym5OMElHNGdiMllnZENselBXVmJhVjBzZG05cFpDQXdQVDA5Y3lZbUtITTlibVYzSUU0b2RHaHBjeTV2Y0hScGIyNXpLU3hsTG5CMWMyZ29jeWtzTUQwOVBXay9jeTVoY0hCbGJtUkpiblJ2VUdGeWRDaDBhR2x6S1RwekxtbHVjMlZ5ZEVGbWRHVnlVR0Z5ZENobFcya3RNVjBwS1N4ekxuTmxkRlpoYkhWbEtHNHBMSE11WTI5dGJXbDBLQ2tzYVNzck8yazhaUzVzWlc1bmRHZ21KaWhsTG14bGJtZDBhRDFwTEhSb2FYTXVZMnhsWVhJb2N5WW1jeTVsYm1ST2IyUmxLU2w5WTJ4bFlYSW9kRDEwYUdsekxuTjBZWEowVG05a1pTbDdjeWgwYUdsekxuTjBZWEowVG05a1pTNXdZWEpsYm5ST2IyUmxMSFF1Ym1WNGRGTnBZbXhwYm1jc2RHaHBjeTVsYm1ST2IyUmxLWDE5WTJ4aGMzTWdRM3RqYjI1emRISjFZM1J2Y2loMExHVXNjeWw3YVdZb2RHaHBjeTUyWVd4MVpUMTJiMmxrSURBc2RHaHBjeTVmWDNCbGJtUnBibWRXWVd4MVpUMTJiMmxrSURBc01pRTlQWE11YkdWdVozUm9mSHhjSWx3aUlUMDljMXN3WFh4OFhDSmNJaUU5UFhOYk1WMHBkR2h5YjNjZ1JYSnliM0lvWENKQ2IyOXNaV0Z1SUdGMGRISnBZblYwWlhNZ1kyRnVJRzl1YkhrZ1kyOXVkR0ZwYmlCaElITnBibWRzWlNCbGVIQnlaWE56YVc5dVhDSXBPM1JvYVhNdVpXeGxiV1Z1ZEQxMExIUm9hWE11Ym1GdFpUMWxMSFJvYVhNdWMzUnlhVzVuY3oxemZYTmxkRlpoYkhWbEtIUXBlM1JvYVhNdVgxOXdaVzVrYVc1blZtRnNkV1U5ZEgxamIyMXRhWFFvS1h0bWIzSW9PMjBvZEdocGN5NWZYM0JsYm1ScGJtZFdZV3gxWlNrN0tYdGpiMjV6ZENCMFBYUm9hWE11WDE5d1pXNWthVzVuVm1Gc2RXVTdkR2hwY3k1ZlgzQmxibVJwYm1kV1lXeDFaVDFuTEhRb2RHaHBjeWw5YVdZb2RHaHBjeTVmWDNCbGJtUnBibWRXWVd4MVpUMDlQV2NwY21WMGRYSnVPMk52Ym5OMElIUTlJU0YwYUdsekxsOWZjR1Z1WkdsdVoxWmhiSFZsTzNSb2FYTXVkbUZzZFdVaFBUMTBKaVlvZEQ5MGFHbHpMbVZzWlcxbGJuUXVjMlYwUVhSMGNtbGlkWFJsS0hSb2FYTXVibUZ0WlN4Y0lsd2lLVHAwYUdsekxtVnNaVzFsYm5RdWNtVnRiM1psUVhSMGNtbGlkWFJsS0hSb2FYTXVibUZ0WlNrc2RHaHBjeTUyWVd4MVpUMTBLU3gwYUdsekxsOWZjR1Z1WkdsdVoxWmhiSFZsUFdkOWZXTnNZWE56SUVVZ1pYaDBaVzVrY3lCUWUyTnZibk4wY25WamRHOXlLSFFzWlN4ektYdHpkWEJsY2loMExHVXNjeWtzZEdocGN5NXphVzVuYkdVOU1qMDlQWE11YkdWdVozUm9KaVpjSWx3aVBUMDljMXN3WFNZbVhDSmNJajA5UFhOYk1WMTlYMk55WldGMFpWQmhjblFvS1h0eVpYUjFjbTRnYm1WM0lGUW9kR2hwY3lsOVgyZGxkRlpoYkhWbEtDbDdjbVYwZFhKdUlIUm9hWE11YzJsdVoyeGxQM1JvYVhNdWNHRnlkSE5iTUYwdWRtRnNkV1U2YzNWd1pYSXVYMmRsZEZaaGJIVmxLQ2w5WTI5dGJXbDBLQ2w3ZEdocGN5NWthWEowZVNZbUtIUm9hWE11WkdseWRIazlJVEVzZEdocGN5NWxiR1Z0Wlc1MFczUm9hWE11Ym1GdFpWMDlkR2hwY3k1ZloyVjBWbUZzZFdVb0tTbDlmV05zWVhOeklGUWdaWGgwWlc1a2N5QjRlMzFzWlhRZ1FUMGhNVHNvS0NrOVBudDBjbmw3WTI5dWMzUWdkRDE3WjJWMElHTmhjSFIxY21Vb0tYdHlaWFIxY200Z1FUMGhNQ3doTVgxOU8zZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWRHVnpkRndpTEhRc2RDa3NkMmx1Wkc5M0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0owWlhOMFhDSXNkQ3gwS1gxallYUmphQ2gwS1h0OWZTa29LVHRqYkdGemN5QldlMk52Ym5OMGNuVmpkRzl5S0hRc1pTeHpLWHQwYUdsekxuWmhiSFZsUFhadmFXUWdNQ3gwYUdsekxsOWZjR1Z1WkdsdVoxWmhiSFZsUFhadmFXUWdNQ3gwYUdsekxtVnNaVzFsYm5ROWRDeDBhR2x6TG1WMlpXNTBUbUZ0WlQxbExIUm9hWE11WlhabGJuUkRiMjUwWlhoMFBYTXNkR2hwY3k1ZlgySnZkVzVrU0dGdVpHeGxSWFpsYm5ROWREMCtkR2hwY3k1b1lXNWtiR1ZGZG1WdWRDaDBLWDF6WlhSV1lXeDFaU2gwS1h0MGFHbHpMbDlmY0dWdVpHbHVaMVpoYkhWbFBYUjlZMjl0YldsMEtDbDdabTl5S0R0dEtIUm9hWE11WDE5d1pXNWthVzVuVm1Gc2RXVXBPeWw3WTI5dWMzUWdkRDEwYUdsekxsOWZjR1Z1WkdsdVoxWmhiSFZsTzNSb2FYTXVYMTl3Wlc1a2FXNW5WbUZzZFdVOVp5eDBLSFJvYVhNcGZXbG1LSFJvYVhNdVgxOXdaVzVrYVc1blZtRnNkV1U5UFQxbktYSmxkSFZ5Ymp0amIyNXpkQ0IwUFhSb2FYTXVYMTl3Wlc1a2FXNW5WbUZzZFdVc1pUMTBhR2x6TG5aaGJIVmxMSE05Ym5Wc2JEMDlkSHg4Ym5Wc2JDRTlaU1ltS0hRdVkyRndkSFZ5WlNFOVBXVXVZMkZ3ZEhWeVpYeDhkQzV2Ym1ObElUMDlaUzV2Ym1ObGZIeDBMbkJoYzNOcGRtVWhQVDFsTG5CaGMzTnBkbVVwTEdrOWJuVnNiQ0U5ZENZbUtHNTFiR3c5UFdWOGZITXBPM01tSm5Sb2FYTXVaV3hsYldWdWRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLSFJvYVhNdVpYWmxiblJPWVcxbExIUm9hWE11WDE5aWIzVnVaRWhoYm1Sc1pVVjJaVzUwTEhSb2FYTXVYMTl2Y0hScGIyNXpLU3hwSmlZb2RHaHBjeTVmWDI5d2RHbHZibk05VHloMEtTeDBhR2x6TG1Wc1pXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWgwYUdsekxtVjJaVzUwVG1GdFpTeDBhR2x6TGw5ZlltOTFibVJJWVc1a2JHVkZkbVZ1ZEN4MGFHbHpMbDlmYjNCMGFXOXVjeWtwTEhSb2FYTXVkbUZzZFdVOWRDeDBhR2x6TGw5ZmNHVnVaR2x1WjFaaGJIVmxQV2Q5YUdGdVpHeGxSWFpsYm5Rb2RDbDdYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnZEdocGN5NTJZV3gxWlQ5MGFHbHpMblpoYkhWbExtTmhiR3dvZEdocGN5NWxkbVZ1ZEVOdmJuUmxlSFI4ZkhSb2FYTXVaV3hsYldWdWRDeDBLVHAwYUdsekxuWmhiSFZsTG1oaGJtUnNaVVYyWlc1MEtIUXBmWDFqYjI1emRDQlBQWFE5UG5RbUppaEJQM3RqWVhCMGRYSmxPblF1WTJGd2RIVnlaU3h3WVhOemFYWmxPblF1Y0dGemMybDJaU3h2Ym1ObE9uUXViMjVqWlgwNmRDNWpZWEIwZFhKbEtUdG1kVzVqZEdsdmJpQnJLSFFwZTJ4bGRDQmxQVlV1WjJWMEtIUXVkSGx3WlNrN2RtOXBaQ0F3UFQwOVpTWW1LR1U5ZTNOMGNtbHVaM05CY25KaGVUcHVaWGNnVjJWaGEwMWhjQ3hyWlhsVGRISnBibWM2Ym1WM0lFMWhjSDBzVlM1elpYUW9kQzUwZVhCbExHVXBLVHRzWlhRZ2N6MWxMbk4wY21sdVozTkJjbkpoZVM1blpYUW9kQzV6ZEhKcGJtZHpLVHRwWmloMmIybGtJREFoUFQxektYSmxkSFZ5YmlCek8yTnZibk4wSUc0OWRDNXpkSEpwYm1kekxtcHZhVzRvYVNrN2NtVjBkWEp1SUhNOVpTNXJaWGxUZEhKcGJtY3VaMlYwS0c0cExIWnZhV1FnTUQwOVBYTW1KaWh6UFc1bGR5QnZLSFFzZEM1blpYUlVaVzF3YkdGMFpVVnNaVzFsYm5Rb0tTa3NaUzVyWlhsVGRISnBibWN1YzJWMEtHNHNjeWtwTEdVdWMzUnlhVzVuYzBGeWNtRjVMbk5sZENoMExuTjBjbWx1WjNNc2N5a3NjMzFqYjI1emRDQlZQVzVsZHlCTllYQXNUVDF1WlhjZ1YyVmhhMDFoY0R0amIyNXpkQ0JTUFc1bGR5QmpiR0Z6YzN0b1lXNWtiR1ZCZEhSeWFXSjFkR1ZGZUhCeVpYTnphVzl1Y3loMExHVXNjeXhwS1h0amIyNXpkQ0J1UFdWYk1GMDdhV1lvWENJdVhDSTlQVDF1S1h0eVpYUjFjbTRnYm1WM0lFVW9kQ3hsTG5Oc2FXTmxLREVwTEhNcExuQmhjblJ6ZldsbUtGd2lRRndpUFQwOWJpbHlaWFIxY201YmJtVjNJRllvZEN4bExuTnNhV05sS0RFcExHa3VaWFpsYm5SRGIyNTBaWGgwS1YwN2FXWW9YQ0kvWENJOVBUMXVLWEpsZEhWeWJsdHVaWGNnUXloMExHVXVjMnhwWTJVb01Ta3NjeWxkTzNKbGRIVnliaUJ1WlhjZ1VDaDBMR1VzY3lrdWNHRnlkSE45YUdGdVpHeGxWR1Y0ZEVWNGNISmxjM05wYjI0b2RDbDdjbVYwZFhKdUlHNWxkeUJPS0hRcGZYMDdYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUhkcGJtUnZkeVltS0hkcGJtUnZkeTVzYVhSSWRHMXNWbVZ5YzJsdmJuTjhmQ2gzYVc1a2IzY3ViR2wwU0hSdGJGWmxjbk5wYjI1elBWdGRLU2t1Y0hWemFDaGNJakV1TWk0eFhDSXBPMk52Ym5OMElHbzlLSFFzTGk0dVpTazlQbTVsZHlCVEtIUXNaU3hjSW1oMGJXeGNJaXhTS1N4TVBTaDBMR1VwUFQ1Z0pIdDBmUzB0Skh0bGZXQTdiR1YwSUhFOUlUQTdkbTlwWkNBd1BUMDlkMmx1Wkc5M0xsTm9ZV1I1UTFOVFAzRTlJVEU2ZG05cFpDQXdQVDA5ZDJsdVpHOTNMbE5vWVdSNVExTlRMbkJ5WlhCaGNtVlVaVzF3YkdGMFpVUnZiU1ltS0dOdmJuTnZiR1V1ZDJGeWJpaGNJa2x1WTI5dGNHRjBhV0pzWlNCVGFHRmtlVU5UVXlCMlpYSnphVzl1SUdSbGRHVmpkR1ZrTGlCUWJHVmhjMlVnZFhCa1lYUmxJSFJ2SUdGMElHeGxZWE4wSUVCM1pXSmpiMjF3YjI1bGJuUnpMM2RsWW1OdmJYQnZibVZ1ZEhOcWMwQXlMakF1TWlCaGJtUWdRSGRsWW1OdmJYQnZibVZ1ZEhNdmMyaGhaSGxqYzNOQU1TNHpMakV1WENJcExIRTlJVEVwTzJOdmJuTjBJSG85ZEQwK1pUMCtlMk52Ym5OMElITTlUQ2hsTG5SNWNHVXNkQ2s3YkdWMElHNDlWUzVuWlhRb2N5azdkbTlwWkNBd1BUMDliaVltS0c0OWUzTjBjbWx1WjNOQmNuSmhlVHB1WlhjZ1YyVmhhMDFoY0N4clpYbFRkSEpwYm1jNmJtVjNJRTFoY0gwc1ZTNXpaWFFvY3l4dUtTazdiR1YwSUhJOWJpNXpkSEpwYm1kelFYSnlZWGt1WjJWMEtHVXVjM1J5YVc1bmN5azdhV1lvZG05cFpDQXdJVDA5Y2lseVpYUjFjbTRnY2p0amIyNXpkQ0JoUFdVdWMzUnlhVzVuY3k1cWIybHVLR2twTzJsbUtISTliaTVyWlhsVGRISnBibWN1WjJWMEtHRXBMSFp2YVdRZ01EMDlQWElwZTJOdmJuTjBJSE05WlM1blpYUlVaVzF3YkdGMFpVVnNaVzFsYm5Rb0tUdHhKaVozYVc1a2IzY3VVMmhoWkhsRFUxTXVjSEpsY0dGeVpWUmxiWEJzWVhSbFJHOXRLSE1zZENrc2NqMXVaWGNnYnlobExITXBMRzR1YTJWNVUzUnlhVzVuTG5ObGRDaGhMSElwZlhKbGRIVnliaUJ1TG5OMGNtbHVaM05CY25KaGVTNXpaWFFvWlM1emRISnBibWR6TEhJcExISjlMRWs5VzF3aWFIUnRiRndpTEZ3aWMzWm5YQ0pkTENROWJtVjNJRk5sZEN4R1BTaDBMR1VzY3lrOVBuc2tMbUZrWkNoMEtUdGpiMjV6ZENCcFBYTS9jeTVsYkdWdFpXNTBPbVJ2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb1hDSjBaVzF3YkdGMFpWd2lLU3h1UFdVdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNoY0luTjBlV3hsWENJcExIdHNaVzVuZEdnNmNuMDlianRwWmlnd1BUMDljaWx5WlhSMWNtNGdkbTlwWkNCM2FXNWtiM2N1VTJoaFpIbERVMU11Y0hKbGNHRnlaVlJsYlhCc1lYUmxVM1I1YkdWektHa3NkQ2s3WTI5dWMzUWdiejFrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2ljM1I1YkdWY0lpazdabTl5S0d4bGRDQjBQVEE3ZER4eU8zUXJLeWw3WTI5dWMzUWdaVDF1VzNSZE8yVXVjR0Z5Wlc1MFRtOWtaUzV5WlcxdmRtVkRhR2xzWkNobEtTeHZMblJsZUhSRGIyNTBaVzUwS3oxbExuUmxlSFJEYjI1MFpXNTBmU2gwUFQ1N1NTNW1iM0pGWVdOb0tHVTlQbnRqYjI1emRDQnpQVlV1WjJWMEtFd29aU3gwS1NrN2RtOXBaQ0F3SVQwOWN5WW1jeTVyWlhsVGRISnBibWN1Wm05eVJXRmphQ2gwUFQ1N1kyOXVjM1I3Wld4bGJXVnVkRHA3WTI5dWRHVnVkRHBsZlgwOWRDeHpQVzVsZHlCVFpYUTdRWEp5WVhrdVpuSnZiU2hsTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvWENKemRIbHNaVndpS1NrdVptOXlSV0ZqYUNoMFBUNTdjeTVoWkdRb2RDbDlLU3hqS0hRc2N5bDlLWDBwZlNrb2RDazdZMjl1YzNRZ1lUMXBMbU52Ym5SbGJuUTdjejltZFc1amRHbHZiaWgwTEdVc2N6MXVkV3hzS1h0amIyNXpkSHRsYkdWdFpXNTBPbnRqYjI1MFpXNTBPbWw5TEhCaGNuUnpPbTU5UFhRN2FXWW9iblZzYkQwOWN5bHlaWFIxY200Z2RtOXBaQ0JwTG1Gd2NHVnVaRU5vYVd4a0tHVXBPMk52Ym5OMElISTlaRzlqZFcxbGJuUXVZM0psWVhSbFZISmxaVmRoYkd0bGNpaHBMREV6TXl4dWRXeHNMQ0V4S1R0c1pYUWdiejExS0c0cExHRTlNQ3hrUFMweE8yWnZjaWc3Y2k1dVpYaDBUbTlrWlNncE95bDdaQ3NyTzJadmNpaHlMbU4xY25KbGJuUk9iMlJsUFQwOWN5WW1LR0U5Y0NobEtTeHpMbkJoY21WdWRFNXZaR1V1YVc1elpYSjBRbVZtYjNKbEtHVXNjeWtwT3kweElUMDlieVltYmx0dlhTNXBibVJsZUQwOVBXUTdLWHRwWmloaFBqQXBlMlp2Y2lnN0xURWhQVDF2T3lsdVcyOWRMbWx1WkdWNEt6MWhMRzg5ZFNodUxHOHBPM0psZEhWeWJuMXZQWFVvYml4dktYMTlmU2h6TEc4c1lTNW1hWEp6ZEVOb2FXeGtLVHBoTG1sdWMyVnlkRUpsWm05eVpTaHZMR0V1Wm1seWMzUkRhR2xzWkNrc2QybHVaRzkzTGxOb1lXUjVRMU5UTG5CeVpYQmhjbVZVWlcxd2JHRjBaVk4wZVd4bGN5aHBMSFFwTzJOdmJuTjBJR1E5WVM1eGRXVnllVk5sYkdWamRHOXlLRndpYzNSNWJHVmNJaWs3YVdZb2QybHVaRzkzTGxOb1lXUjVRMU5UTG01aGRHbDJaVk5vWVdSdmR5WW1iblZzYkNFOVBXUXBaUzVwYm5ObGNuUkNaV1p2Y21Vb1pDNWpiRzl1WlU1dlpHVW9JVEFwTEdVdVptbHljM1JEYUdsc1pDazdaV3h6WlNCcFppaHpLWHRoTG1sdWMyVnlkRUpsWm05eVpTaHZMR0V1Wm1seWMzUkRhR2xzWkNrN1kyOXVjM1FnZEQxdVpYY2dVMlYwTzNRdVlXUmtLRzhwTEdNb2N5eDBLWDE5TzNkcGJtUnZkeTVLVTBOdmJYQnBiR1Z5WDNKbGJtRnRaVkJ5YjNCbGNuUjVQU2gwTEdVcFBUNTBPMk52Ym5OMElFSTllM1J2UVhSMGNtbGlkWFJsS0hRc1pTbDdjM2RwZEdOb0tHVXBlMk5oYzJVZ1FtOXZiR1ZoYmpweVpYUjFjbTRnZEQ5Y0lsd2lPbTUxYkd3N1kyRnpaU0JQWW1wbFkzUTZZMkZ6WlNCQmNuSmhlVHB5WlhSMWNtNGdiblZzYkQwOWREOTBPa3BUVDA0dWMzUnlhVzVuYVdaNUtIUXBmWEpsZEhWeWJpQjBmU3htY205dFFYUjBjbWxpZFhSbEtIUXNaU2w3YzNkcGRHTm9LR1VwZTJOaGMyVWdRbTl2YkdWaGJqcHlaWFIxY200Z2JuVnNiQ0U5UFhRN1kyRnpaU0JPZFcxaVpYSTZjbVYwZFhKdUlHNTFiR3c5UFQxMFAyNTFiR3c2VG5WdFltVnlLSFFwTzJOaGMyVWdUMkpxWldOME9tTmhjMlVnUVhKeVlYazZjbVYwZFhKdUlFcFRUMDR1Y0dGeWMyVW9kQ2w5Y21WMGRYSnVJSFI5ZlN4WFBTaDBMR1VwUFQ1bElUMDlkQ1ltS0dVOVBXVjhmSFE5UFhRcExFZzllMkYwZEhKcFluVjBaVG9oTUN4MGVYQmxPbE4wY21sdVp5eGpiMjUyWlhKMFpYSTZRaXh5Wldac1pXTjBPaUV4TEdoaGMwTm9ZVzVuWldRNlYzMDdZMnhoYzNNZ1JDQmxlSFJsYm1SeklFaFVUVXhGYkdWdFpXNTBlMk52Ym5OMGNuVmpkRzl5S0NsN2MzVndaWElvS1N4MGFHbHpMbDkxY0dSaGRHVlRkR0YwWlQwd0xIUm9hWE11WDJsdWMzUmhibU5sVUhKdmNHVnlkR2xsY3oxMmIybGtJREFzZEdocGN5NWZkWEJrWVhSbFVISnZiV2x6WlQxdVpYY2dVSEp2YldselpTaDBQVDUwYUdsekxsOWxibUZpYkdWVmNHUmhkR2x1WjFKbGMyOXNkbVZ5UFhRcExIUm9hWE11WDJOb1lXNW5aV1JRY205d1pYSjBhV1Z6UFc1bGR5Qk5ZWEFzZEdocGN5NWZjbVZtYkdWamRHbHVaMUJ5YjNCbGNuUnBaWE05ZG05cFpDQXdMSFJvYVhNdWFXNXBkR2xoYkdsNlpTZ3BmWE4wWVhScFl5Qm5aWFFnYjJKelpYSjJaV1JCZEhSeWFXSjFkR1Z6S0NsN2RHaHBjeTVtYVc1aGJHbDZaU2dwTzJOdmJuTjBJSFE5VzEwN2NtVjBkWEp1SUhSb2FYTXVYMk5zWVhOelVISnZjR1Z5ZEdsbGN5NW1iM0pGWVdOb0tDaGxMSE1wUFQ1N1kyOXVjM1FnYVQxMGFHbHpMbDloZEhSeWFXSjFkR1ZPWVcxbFJtOXlVSEp2Y0dWeWRIa29jeXhsS1R0MmIybGtJREFoUFQxcEppWW9kR2hwY3k1ZllYUjBjbWxpZFhSbFZHOVFjbTl3WlhKMGVVMWhjQzV6WlhRb2FTeHpLU3gwTG5CMWMyZ29hU2twZlNrc2RIMXpkR0YwYVdNZ1gyVnVjM1Z5WlVOc1lYTnpVSEp2Y0dWeWRHbGxjeWdwZTJsbUtDRjBhR2x6TG1oaGMwOTNibEJ5YjNCbGNuUjVLRXBUUTI5dGNHbHNaWEpmY21WdVlXMWxVSEp2Y0dWeWRIa29YQ0pmWTJ4aGMzTlFjbTl3WlhKMGFXVnpYQ0lzZEdocGN5a3BLWHQwYUdsekxsOWpiR0Z6YzFCeWIzQmxjblJwWlhNOWJtVjNJRTFoY0R0amIyNXpkQ0IwUFU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaDBhR2x6S1M1ZlkyeGhjM05RY205d1pYSjBhV1Z6TzNadmFXUWdNQ0U5UFhRbUpuUXVabTl5UldGamFDZ29kQ3hsS1QwK2RHaHBjeTVmWTJ4aGMzTlFjbTl3WlhKMGFXVnpMbk5sZENobExIUXBLWDE5YzNSaGRHbGpJR055WldGMFpWQnliM0JsY25SNUtIUXNaVDFJS1h0cFppaDBhR2x6TGw5bGJuTjFjbVZEYkdGemMxQnliM0JsY25ScFpYTW9LU3gwYUdsekxsOWpiR0Z6YzFCeWIzQmxjblJwWlhNdWMyVjBLSFFzWlNrc1pTNXViMEZqWTJWemMyOXlmSHgwYUdsekxuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVNoMEtTbHlaWFIxY200N1kyOXVjM1FnY3oxY0luTjViV0p2YkZ3aVBUMTBlWEJsYjJZZ2REOVRlVzFpYjJ3b0tUcGNJbDlmWENJcmRDeHBQWFJvYVhNdVoyVjBVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLSFFzY3l4bEtUdDJiMmxrSURBaFBUMXBKaVpQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHaHBjeTV3Y205MGIzUjVjR1VzZEN4cEtYMXpkR0YwYVdNZ1oyVjBVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLSFFzWlN4ektYdHlaWFIxY201N1oyVjBLQ2w3Y21WMGRYSnVJSFJvYVhOYlpWMTlMSE5sZENoektYdGpiMjV6ZENCcFBYUm9hWE5iZEYwN2RHaHBjMXRsWFQxekxIUm9hWE11WDNKbGNYVmxjM1JWY0dSaGRHVW9kQ3hwS1gwc1kyOXVabWxuZFhKaFlteGxPaUV3TEdWdWRXMWxjbUZpYkdVNklUQjlmWE4wWVhScFl5Qm5aWFJRY205d1pYSjBlVTl3ZEdsdmJuTW9kQ2w3Y21WMGRYSnVJSFJvYVhNdVgyTnNZWE56VUhKdmNHVnlkR2xsY3lZbWRHaHBjeTVmWTJ4aGMzTlFjbTl3WlhKMGFXVnpMbWRsZENoMEtYeDhTSDF6ZEdGMGFXTWdabWx1WVd4cGVtVW9LWHRqYjI1emRDQjBQVTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmloMGFHbHpLVHRwWmloMExtaGhjMDkzYmxCeWIzQmxjblI1S0Z3aVptbHVZV3hwZW1Wa1hDSXBmSHgwTG1acGJtRnNhWHBsS0Nrc2RHaHBjeTVtYVc1aGJHbDZaV1E5SVRBc2RHaHBjeTVmWlc1emRYSmxRMnhoYzNOUWNtOXdaWEowYVdWektDa3NkR2hwY3k1ZllYUjBjbWxpZFhSbFZHOVFjbTl3WlhKMGVVMWhjRDF1WlhjZ1RXRndMSFJvYVhNdWFHRnpUM2R1VUhKdmNHVnlkSGtvU2xORGIyMXdhV3hsY2w5eVpXNWhiV1ZRY205d1pYSjBlU2hjSW5CeWIzQmxjblJwWlhOY0lpeDBhR2x6S1NrcGUyTnZibk4wSUhROWRHaHBjeTV3Y205d1pYSjBhV1Z6TEdVOVd5NHVMazlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpLSFFwTEM0dUxsd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE0vVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3loMEtUcGJYVjA3Wm05eUtHTnZibk4wSUhNZ2IyWWdaU2wwYUdsekxtTnlaV0YwWlZCeWIzQmxjblI1S0hNc2RGdHpYU2w5ZlhOMFlYUnBZeUJmWVhSMGNtbGlkWFJsVG1GdFpVWnZjbEJ5YjNCbGNuUjVLSFFzWlNsN1kyOXVjM1FnY3oxbExtRjBkSEpwWW5WMFpUdHlaWFIxY200aE1UMDlQWE0vZG05cFpDQXdPbHdpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJ6UDNNNlhDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlIUS9kQzUwYjB4dmQyVnlRMkZ6WlNncE9uWnZhV1FnTUgxemRHRjBhV01nWDNaaGJIVmxTR0Z6UTJoaGJtZGxaQ2gwTEdVc2N6MVhLWHR5WlhSMWNtNGdjeWgwTEdVcGZYTjBZWFJwWXlCZmNISnZjR1Z5ZEhsV1lXeDFaVVp5YjIxQmRIUnlhV0oxZEdVb2RDeGxLWHRqYjI1emRDQnpQV1V1ZEhsd1pTeHBQV1V1WTI5dWRtVnlkR1Z5Zkh4Q0xHNDlYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnYVQ5cE9ta3Vabkp2YlVGMGRISnBZblYwWlR0eVpYUjFjbTRnYmo5dUtIUXNjeWs2ZEgxemRHRjBhV01nWDNCeWIzQmxjblI1Vm1Gc2RXVlViMEYwZEhKcFluVjBaU2gwTEdVcGUybG1LSFp2YVdRZ01EMDlQV1V1Y21WbWJHVmpkQ2x5WlhSMWNtNDdZMjl1YzNRZ2N6MWxMblI1Y0dVc2FUMWxMbU52Ym5abGNuUmxjanR5WlhSMWNtNG9hU1ltYVM1MGIwRjBkSEpwWW5WMFpYeDhRaTUwYjBGMGRISnBZblYwWlNrb2RDeHpLWDFwYm1sMGFXRnNhWHBsS0NsN2RHaHBjeTVmYzJGMlpVbHVjM1JoYm1ObFVISnZjR1Z5ZEdsbGN5Z3BMSFJvYVhNdVgzSmxjWFZsYzNSVmNHUmhkR1VvS1gxZmMyRjJaVWx1YzNSaGJtTmxVSEp2Y0dWeWRHbGxjeWdwZTNSb2FYTXVZMjl1YzNSeWRXTjBiM0l1WDJOc1lYTnpVSEp2Y0dWeWRHbGxjeTVtYjNKRllXTm9LQ2gwTEdVcFBUNTdhV1lvZEdocGN5NW9ZWE5QZDI1UWNtOXdaWEowZVNobEtTbDdZMjl1YzNRZ2REMTBhR2x6VzJWZE8yUmxiR1YwWlNCMGFHbHpXMlZkTEhSb2FYTXVYMmx1YzNSaGJtTmxVSEp2Y0dWeWRHbGxjM3g4S0hSb2FYTXVYMmx1YzNSaGJtTmxVSEp2Y0dWeWRHbGxjejF1WlhjZ1RXRndLU3gwYUdsekxsOXBibk4wWVc1alpWQnliM0JsY25ScFpYTXVjMlYwS0dVc2RDbDlmU2w5WDJGd2NHeDVTVzV6ZEdGdVkyVlFjbTl3WlhKMGFXVnpLQ2w3ZEdocGN5NWZhVzV6ZEdGdVkyVlFjbTl3WlhKMGFXVnpMbVp2Y2tWaFkyZ29LSFFzWlNrOVBuUm9hWE5iWlYwOWRDa3NkR2hwY3k1ZmFXNXpkR0Z1WTJWUWNtOXdaWEowYVdWelBYWnZhV1FnTUgxamIyNXVaV04wWldSRFlXeHNZbUZqYXlncGUzUm9hWE11Wlc1aFlteGxWWEJrWVhScGJtY29LWDFsYm1GaWJHVlZjR1JoZEdsdVp5Z3BlM1p2YVdRZ01DRTlQWFJvYVhNdVgyVnVZV0pzWlZWd1pHRjBhVzVuVW1WemIyeDJaWEltSmloMGFHbHpMbDlsYm1GaWJHVlZjR1JoZEdsdVoxSmxjMjlzZG1WeUtDa3NkR2hwY3k1ZlpXNWhZbXhsVlhCa1lYUnBibWRTWlhOdmJIWmxjajEyYjJsa0lEQXBmV1JwYzJOdmJtNWxZM1JsWkVOaGJHeGlZV05yS0NsN2ZXRjBkSEpwWW5WMFpVTm9ZVzVuWldSRFlXeHNZbUZqYXloMExHVXNjeWw3WlNFOVBYTW1KblJvYVhNdVgyRjBkSEpwWW5WMFpWUnZVSEp2Y0dWeWRIa29kQ3h6S1gxZmNISnZjR1Z5ZEhsVWIwRjBkSEpwWW5WMFpTaDBMR1VzY3oxSUtYdGpiMjV6ZENCcFBYUm9hWE11WTI5dWMzUnlkV04wYjNJc2JqMXBMbDloZEhSeWFXSjFkR1ZPWVcxbFJtOXlVSEp2Y0dWeWRIa29kQ3h6S1R0cFppaDJiMmxrSURBaFBUMXVLWHRqYjI1emRDQjBQV2t1WDNCeWIzQmxjblI1Vm1Gc2RXVlViMEYwZEhKcFluVjBaU2hsTEhNcE8ybG1LSFp2YVdRZ01EMDlQWFFwY21WMGRYSnVPM1JvYVhNdVgzVndaR0YwWlZOMFlYUmxQVGg4ZEdocGN5NWZkWEJrWVhSbFUzUmhkR1VzYm5Wc2JEMDlkRDkwYUdsekxuSmxiVzkyWlVGMGRISnBZblYwWlNodUtUcDBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTaHVMSFFwTEhSb2FYTXVYM1Z3WkdGMFpWTjBZWFJsUFMwNUpuUm9hWE11WDNWd1pHRjBaVk4wWVhSbGZYMWZZWFIwY21saWRYUmxWRzlRY205d1pYSjBlU2gwTEdVcGUybG1LRGdtZEdocGN5NWZkWEJrWVhSbFUzUmhkR1VwY21WMGRYSnVPMk52Ym5OMElITTlkR2hwY3k1amIyNXpkSEoxWTNSdmNpeHBQWE11WDJGMGRISnBZblYwWlZSdlVISnZjR1Z5ZEhsTllYQXVaMlYwS0hRcE8ybG1LSFp2YVdRZ01DRTlQV2twZTJOdmJuTjBJSFE5Y3k1blpYUlFjbTl3WlhKMGVVOXdkR2x2Ym5Nb2FTazdkR2hwY3k1ZmRYQmtZWFJsVTNSaGRHVTlNVFo4ZEdocGN5NWZkWEJrWVhSbFUzUmhkR1VzZEdocGMxdHBYVDF6TGw5d2NtOXdaWEowZVZaaGJIVmxSbkp2YlVGMGRISnBZblYwWlNobExIUXBMSFJvYVhNdVgzVndaR0YwWlZOMFlYUmxQUzB4TnlaMGFHbHpMbDkxY0dSaGRHVlRkR0YwWlgxOVgzSmxjWFZsYzNSVmNHUmhkR1VvZEN4bEtYdHNaWFFnY3owaE1EdHBaaWgyYjJsa0lEQWhQVDEwS1h0amIyNXpkQ0JwUFhSb2FYTXVZMjl1YzNSeWRXTjBiM0lzYmoxcExtZGxkRkJ5YjNCbGNuUjVUM0IwYVc5dWN5aDBLVHRwTGw5MllXeDFaVWhoYzBOb1lXNW5aV1FvZEdocGMxdDBYU3hsTEc0dWFHRnpRMmhoYm1kbFpDay9LSFJvYVhNdVgyTm9ZVzVuWldSUWNtOXdaWEowYVdWekxtaGhjeWgwS1h4OGRHaHBjeTVmWTJoaGJtZGxaRkJ5YjNCbGNuUnBaWE11YzJWMEtIUXNaU2tzSVRBaFBUMXVMbkpsWm14bFkzUjhmREUySm5Sb2FYTXVYM1Z3WkdGMFpWTjBZWFJsZkh3b2RtOXBaQ0F3UFQwOWRHaHBjeTVmY21WbWJHVmpkR2x1WjFCeWIzQmxjblJwWlhNbUppaDBhR2x6TGw5eVpXWnNaV04wYVc1blVISnZjR1Z5ZEdsbGN6MXVaWGNnVFdGd0tTeDBhR2x6TGw5eVpXWnNaV04wYVc1blVISnZjR1Z5ZEdsbGN5NXpaWFFvZEN4dUtTa3BPbk05SVRGOUlYUm9hWE11WDJoaGMxSmxjWFZsYzNSbFpGVndaR0YwWlNZbWN5WW1LSFJvYVhNdVgzVndaR0YwWlZCeWIyMXBjMlU5ZEdocGN5NWZaVzV4ZFdWMVpWVndaR0YwWlNncEtYMXlaWEYxWlhOMFZYQmtZWFJsS0hRc1pTbDdjbVYwZFhKdUlIUm9hWE11WDNKbGNYVmxjM1JWY0dSaGRHVW9kQ3hsS1N4MGFHbHpMblZ3WkdGMFpVTnZiWEJzWlhSbGZXRnplVzVqSUY5bGJuRjFaWFZsVlhCa1lYUmxLQ2w3ZEdocGN5NWZkWEJrWVhSbFUzUmhkR1U5Tkh4MGFHbHpMbDkxY0dSaGRHVlRkR0YwWlR0MGNubDdZWGRoYVhRZ2RHaHBjeTVmZFhCa1lYUmxVSEp2YldselpYMWpZWFJqYUNoMEtYdDlZMjl1YzNRZ2REMTBhR2x6TG5CbGNtWnZjbTFWY0dSaGRHVW9LVHR5WlhSMWNtNGdiblZzYkNFOWRDWW1ZWGRoYVhRZ2RDd2hkR2hwY3k1ZmFHRnpVbVZ4ZFdWemRHVmtWWEJrWVhSbGZXZGxkQ0JmYUdGelVtVnhkV1Z6ZEdWa1ZYQmtZWFJsS0NsN2NtVjBkWEp1SURRbWRHaHBjeTVmZFhCa1lYUmxVM1JoZEdWOVoyVjBJR2hoYzFWd1pHRjBaV1FvS1h0eVpYUjFjbTRnTVNaMGFHbHpMbDkxY0dSaGRHVlRkR0YwWlgxd1pYSm1iM0p0VlhCa1lYUmxLQ2w3ZEdocGN5NWZhVzV6ZEdGdVkyVlFjbTl3WlhKMGFXVnpKaVowYUdsekxsOWhjSEJzZVVsdWMzUmhibU5sVUhKdmNHVnlkR2xsY3lncE8yeGxkQ0IwUFNFeE8yTnZibk4wSUdVOWRHaHBjeTVmWTJoaGJtZGxaRkJ5YjNCbGNuUnBaWE03ZEhKNWUzUTlkR2hwY3k1emFHOTFiR1JWY0dSaGRHVW9aU2tzZEQ5MGFHbHpMblZ3WkdGMFpTaGxLVHAwYUdsekxsOXRZWEpyVlhCa1lYUmxaQ2dwZldOaGRHTm9LR1VwZTNSb2NtOTNJSFE5SVRFc2RHaHBjeTVmYldGeWExVndaR0YwWldRb0tTeGxmWFFtSmlneEpuUm9hWE11WDNWd1pHRjBaVk4wWVhSbGZId29kR2hwY3k1ZmRYQmtZWFJsVTNSaGRHVTlNWHgwYUdsekxsOTFjR1JoZEdWVGRHRjBaU3gwYUdsekxtWnBjbk4wVlhCa1lYUmxaQ2hsS1Nrc2RHaHBjeTUxY0dSaGRHVmtLR1VwS1gxZmJXRnlhMVZ3WkdGMFpXUW9LWHQwYUdsekxsOWphR0Z1WjJWa1VISnZjR1Z5ZEdsbGN6MXVaWGNnVFdGd0xIUm9hWE11WDNWd1pHRjBaVk4wWVhSbFBTMDFKblJvYVhNdVgzVndaR0YwWlZOMFlYUmxmV2RsZENCMWNHUmhkR1ZEYjIxd2JHVjBaU2dwZTNKbGRIVnliaUIwYUdsekxsOW5aWFJWY0dSaGRHVkRiMjF3YkdWMFpTZ3BmVjluWlhSVmNHUmhkR1ZEYjIxd2JHVjBaU2dwZTNKbGRIVnliaUIwYUdsekxsOTFjR1JoZEdWUWNtOXRhWE5sZlhOb2IzVnNaRlZ3WkdGMFpTaDBLWHR5WlhSMWNtNGhNSDExY0dSaGRHVW9kQ2w3ZG05cFpDQXdJVDA5ZEdocGN5NWZjbVZtYkdWamRHbHVaMUJ5YjNCbGNuUnBaWE1tSm5Sb2FYTXVYM0psWm14bFkzUnBibWRRY205d1pYSjBhV1Z6TG5OcGVtVStNQ1ltS0hSb2FYTXVYM0psWm14bFkzUnBibWRRY205d1pYSjBhV1Z6TG1admNrVmhZMmdvS0hRc1pTazlQblJvYVhNdVgzQnliM0JsY25SNVZHOUJkSFJ5YVdKMWRHVW9aU3gwYUdselcyVmRMSFFwS1N4MGFHbHpMbDl5Wldac1pXTjBhVzVuVUhKdmNHVnlkR2xsY3oxMmIybGtJREFwTEhSb2FYTXVYMjFoY210VmNHUmhkR1ZrS0NsOWRYQmtZWFJsWkNoMEtYdDlabWx5YzNSVmNHUmhkR1ZrS0hRcGUzMTlSQzVtYVc1aGJHbDZaV1E5SVRBN1kyOXVjM1FnV0Qwb2RDeGxLVDArWENKdFpYUm9iMlJjSWowOVBXVXVhMmx1WkNZbVpTNWtaWE5qY21sd2RHOXlKaVloS0Z3aWRtRnNkV1ZjSW1sdUlHVXVaR1Z6WTNKcGNIUnZjaWsvVDJKcVpXTjBMbUZ6YzJsbmJpaFBZbXBsWTNRdVlYTnphV2R1S0h0OUxHVXBMSHRtYVc1cGMyaGxjaWh6S1h0ekxtTnlaV0YwWlZCeWIzQmxjblI1S0dVdWEyVjVMSFFwZlgwcE9udHJhVzVrT2x3aVptbGxiR1JjSWl4clpYazZVM2x0WW05c0tDa3NjR3hoWTJWdFpXNTBPbHdpYjNkdVhDSXNaR1Z6WTNKcGNIUnZjanA3ZlN4cGJtbDBhV0ZzYVhwbGNpZ3BlMXdpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdVdWFXNXBkR2xoYkdsNlpYSW1KaWgwYUdselcyVXVhMlY1WFQxbExtbHVhWFJwWVd4cGVtVnlMbU5oYkd3b2RHaHBjeWtwZlN4bWFXNXBjMmhsY2loektYdHpMbU55WldGMFpWQnliM0JsY25SNUtHVXVhMlY1TEhRcGZYMDdablZ1WTNScGIyNGdXU2gwS1h0eVpYUjFjbTRvWlN4ektUMCtkbTlwWkNBd0lUMDljejhvS0hRc1pTeHpLVDArZTJVdVkyOXVjM1J5ZFdOMGIzSXVZM0psWVhSbFVISnZjR1Z5ZEhrb2N5eDBLWDBwS0hRc1pTeHpLVHBZS0hRc1pTbDlZMjl1YzNRZ1NqMWNJbUZrYjNCMFpXUlRkSGxzWlZOb1pXVjBjMXdpYVc0Z1JHOWpkVzFsYm5RdWNISnZkRzkwZVhCbEppWmNJbkpsY0d4aFkyVmNJbWx1SUVOVFUxTjBlV3hsVTJobFpYUXVjSEp2ZEc5MGVYQmxPeWgzYVc1a2IzY3ViR2wwUld4bGJXVnVkRlpsY25OcGIyNXpmSHdvZDJsdVpHOTNMbXhwZEVWc1pXMWxiblJXWlhKemFXOXVjejFiWFNrcExuQjFjMmdvWENJeUxqTXVNVndpS1R0amIyNXpkQ0JIUFh0OU8yTnNZWE56SUVzZ1pYaDBaVzVrY3lCRWUzTjBZWFJwWXlCblpYUlRkSGxzWlhNb0tYdHlaWFIxY200Z2RHaHBjeTV6ZEhsc1pYTjljM1JoZEdsaklGOW5aWFJWYm1seGRXVlRkSGxzWlhNb0tYdHBaaWgwYUdsekxtaGhjMDkzYmxCeWIzQmxjblI1S0VwVFEyOXRjR2xzWlhKZmNtVnVZVzFsVUhKdmNHVnlkSGtvWENKZmMzUjViR1Z6WENJc2RHaHBjeWtwS1hKbGRIVnlianRqYjI1emRDQjBQWFJvYVhNdVoyVjBVM1I1YkdWektDazdhV1lvZG05cFpDQXdQVDA5ZENsMGFHbHpMbDl6ZEhsc1pYTTlXMTA3Wld4elpTQnBaaWhCY25KaGVTNXBjMEZ5Y21GNUtIUXBLWHRqYjI1emRDQmxQU2gwTEhNcFBUNTBMbkpsWkhWalpWSnBaMmgwS0NoMExITXBQVDVCY25KaGVTNXBjMEZ5Y21GNUtITXBQMlVvY3l4MEtUb29kQzVoWkdRb2N5a3NkQ2tzY3lrc2N6MWxLSFFzYm1WM0lGTmxkQ2tzYVQxYlhUdHpMbVp2Y2tWaFkyZ29kRDArYVM1MWJuTm9hV1owS0hRcEtTeDBhR2x6TGw5emRIbHNaWE05YVgxbGJITmxJSFJvYVhNdVgzTjBlV3hsY3oxYmRGMTlhVzVwZEdsaGJHbDZaU2dwZTNOMWNHVnlMbWx1YVhScFlXeHBlbVVvS1N4MGFHbHpMbU52Ym5OMGNuVmpkRzl5TGw5blpYUlZibWx4ZFdWVGRIbHNaWE1vS1N4MGFHbHpMbkpsYm1SbGNsSnZiM1E5ZEdocGN5NWpjbVZoZEdWU1pXNWtaWEpTYjI5MEtDa3NkMmx1Wkc5M0xsTm9ZV1J2ZDFKdmIzUW1KblJvYVhNdWNtVnVaR1Z5VW05dmRDQnBibk4wWVc1alpXOW1JSGRwYm1SdmR5NVRhR0ZrYjNkU2IyOTBKaVowYUdsekxtRmtiM0IwVTNSNWJHVnpLQ2w5WTNKbFlYUmxVbVZ1WkdWeVVtOXZkQ2dwZTNKbGRIVnliaUIwYUdsekxtRjBkR0ZqYUZOb1lXUnZkeWg3Ylc5a1pUcGNJbTl3Wlc1Y0luMHBmV0ZrYjNCMFUzUjViR1Z6S0NsN1kyOXVjM1FnZEQxMGFHbHpMbU52Ym5OMGNuVmpkRzl5TGw5emRIbHNaWE03TUNFOVBYUXViR1Z1WjNSb0ppWW9kbTlwWkNBd1BUMDlkMmx1Wkc5M0xsTm9ZV1I1UTFOVGZIeDNhVzVrYjNjdVUyaGhaSGxEVTFNdWJtRjBhWFpsVTJoaFpHOTNQMG8vZEdocGN5NXlaVzVrWlhKU2IyOTBMbUZrYjNCMFpXUlRkSGxzWlZOb1pXVjBjejEwTG0xaGNDaDBQVDUwTG5OMGVXeGxVMmhsWlhRcE9uUm9hWE11WDI1bFpXUnpVMmhwYlVGa2IzQjBaV1JUZEhsc1pWTm9aV1YwY3owaE1EcDNhVzVrYjNjdVUyaGhaSGxEVTFNdVUyTnZjR2x1WjFOb2FXMHVjSEpsY0dGeVpVRmtiM0IwWldSRGMzTlVaWGgwS0hRdWJXRndLSFE5UG5RdVkzTnpWR1Y0ZENrc2RHaHBjeTVzYjJOaGJFNWhiV1VwS1gxamIyNXVaV04wWldSRFlXeHNZbUZqYXlncGUzTjFjR1Z5TG1OdmJtNWxZM1JsWkVOaGJHeGlZV05yS0Nrc2RHaHBjeTVvWVhOVmNHUmhkR1ZrSmlaMmIybGtJREFoUFQxM2FXNWtiM2N1VTJoaFpIbERVMU1tSm5kcGJtUnZkeTVUYUdGa2VVTlRVeTV6ZEhsc1pVVnNaVzFsYm5Rb2RHaHBjeWw5ZFhCa1lYUmxLSFFwZTJOdmJuTjBJR1U5ZEdocGN5NXlaVzVrWlhJb0tUdHpkWEJsY2k1MWNHUmhkR1VvZENrc1pTRTlQVWNtSm5Sb2FYTXVZMjl1YzNSeWRXTjBiM0l1Y21WdVpHVnlLR1VzZEdocGN5NXlaVzVrWlhKU2IyOTBMSHR6WTI5d1pVNWhiV1U2ZEdocGN5NXNiMk5oYkU1aGJXVXNaWFpsYm5SRGIyNTBaWGgwT25Sb2FYTjlLU3gwYUdsekxsOXVaV1ZrYzFOb2FXMUJaRzl3ZEdWa1UzUjViR1ZUYUdWbGRITW1KaWgwYUdsekxsOXVaV1ZrYzFOb2FXMUJaRzl3ZEdWa1UzUjViR1ZUYUdWbGRITTlJVEVzZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVmYzNSNWJHVnpMbVp2Y2tWaFkyZ29kRDArZTJOdmJuTjBJR1U5Wkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaGNJbk4wZVd4bFhDSXBPMlV1ZEdWNGRFTnZiblJsYm5ROWRDNWpjM05VWlhoMExIUm9hWE11Y21WdVpHVnlVbTl2ZEM1aGNIQmxibVJEYUdsc1pDaGxLWDBwS1gxeVpXNWtaWElvS1h0eVpYUjFjbTRnUjMxOVN5NW1hVzVoYkdsNlpXUTlJVEFzU3k1eVpXNWtaWEk5S0hRc1pTeHBLVDArZTJsbUtDRnBmSHhjSW05aWFtVmpkRndpSVQxMGVYQmxiMllnYVh4OElXa3VjMk52Y0dWT1lXMWxLWFJvY205M0lFVnljbTl5S0Z3aVZHaGxJR0J6WTI5d1pVNWhiV1ZnSUc5d2RHbHZiaUJwY3lCeVpYRjFhWEpsWkM1Y0lpazdZMjl1YzNRZ2JqMXBMbk5qYjNCbFRtRnRaU3h5UFUwdWFHRnpLR1VwTEc4OWNTWW1NVEU5UFQxbExtNXZaR1ZVZVhCbEppWWhJV1V1YUc5emRDeGhQVzhtSmlFa0xtaGhjeWh1S1N4a1BXRS9aRzlqZFcxbGJuUXVZM0psWVhSbFJHOWpkVzFsYm5SR2NtRm5iV1Z1ZENncE9tVTdhV1lvS0NoMExHVXNhU2s5UG50c1pYUWdiajFOTG1kbGRDaGxLVHQyYjJsa0lEQTlQVDF1SmlZb2N5aGxMR1V1Wm1seWMzUkRhR2xzWkNrc1RTNXpaWFFvWlN4dVBXNWxkeUJPS0U5aWFtVmpkQzVoYzNOcFoyNG9lM1JsYlhCc1lYUmxSbUZqZEc5eWVUcHJmU3hwS1NrcExHNHVZWEJ3Wlc1a1NXNTBieWhsS1Nrc2JpNXpaWFJXWVd4MVpTaDBLU3h1TG1OdmJXMXBkQ2dwZlNrb2RDeGtMRTlpYW1WamRDNWhjM05wWjI0b2UzUmxiWEJzWVhSbFJtRmpkRzl5ZVRwNktHNHBmU3hwS1Nrc1lTbDdZMjl1YzNRZ2REMU5MbWRsZENoa0tUdE5MbVJsYkdWMFpTaGtLVHRqYjI1emRDQnBQWFF1ZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUI1UDNRdWRtRnNkV1V1ZEdWdGNHeGhkR1U2ZG05cFpDQXdPMFlvYml4a0xHa3BMSE1vWlN4bExtWnBjbk4wUTJocGJHUXBMR1V1WVhCd1pXNWtRMmhwYkdRb1pDa3NUUzV6WlhRb1pTeDBLWDBoY2lZbWJ5WW1kMmx1Wkc5M0xsTm9ZV1I1UTFOVExuTjBlV3hsUld4bGJXVnVkQ2hsTG1odmMzUXBmVHRqYjI1emRDQlJQU2gwTEdVc2N6MTdmU2s5UG50MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLR1VzZTJSbGRHRnBiRHB6ZlNrcGZTeGFQU2gwTEdVcFBUNTdhV1lvZEM1MGVYQmxMbk4wWVhKMGMxZHBkR2dvWENKMGIzVmphRndpS1NsN2FXWW9kbTlwWkNBd1BUMDlaU2x5WlhSMWNtNDdZMjl1YzNRZ2N6MTBkQ2gwTEdVcE8zSmxkSFZ5Ym50NE9uTXVlQ3g1T25NdWVYMTljbVYwZFhKdWUzZzZkQzVqYkdsbGJuUllMSGs2ZEM1amJHbGxiblJaZlgwc2RIUTlLSFFzWlNrOVBudGpiMjV6ZENCelBYUXVkR0Z5WjJWMFZHOTFZMmhsY3lZbVFYSnlZWGt1Y0hKdmRHOTBlWEJsTG1acGJtUXVZMkZzYkNoMExuUmhjbWRsZEZSdmRXTm9aWE1zZEQwK1pUMDlQWFF1YVdSbGJuUnBabWxsY2lsOGZIUXVZMmhoYm1kbFpGUnZkV05vWlhNbUprRnljbUY1TG5CeWIzUnZkSGx3WlM1bWFXNWtMbU5oYkd3b2RDNWphR0Z1WjJWa1ZHOTFZMmhsY3l4MFBUNWxQVDA5ZEM1cFpHVnVkR2xtYVdWeUtUdHlaWFIxY201N2VEcHpMbU5zYVdWdWRGZ3NlVHB6TG1Oc2FXVnVkRmw5ZlR0c1pYUWdaWFE5WENKY0lqdGpiMjV6ZENCemREMG9kQ3hsS1QwK0tHVjBmSHdvWlhROVcxd2liV0YwWTJobGMxd2lMRndpZDJWaWEybDBUV0YwWTJobGMxTmxiR1ZqZEc5eVhDSXNYQ0p0YjNwTllYUmphR1Z6VTJWc1pXTjBiM0pjSWl4Y0ltMXpUV0YwWTJobGMxTmxiR1ZqZEc5eVhDSXNYQ0p2VFdGMFkyaGxjMU5sYkdWamRHOXlYQ0pkTG1acGJtUW9aVDArYVhRb2RGdGxYU2twS1N3aEtDRmxkSHg4SVdsMEtIUmJaWFJkS1NrbUpuUmJaWFJkS0dVcEtTeHBkRDEwUFQ1Y0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQjBmSHhjSWx0dlltcGxZM1FnUm5WdVkzUnBiMjVkWENJOVBUMVBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvZENrN2JHVjBJRzUwUFdOc1lYTnpJR1Y0ZEdWdVpITWdTM3RqYjI1emRISjFZM1J2Y2lncGUzTjFjR1Z5S0M0dUxtRnlaM1Z0Wlc1MGN5a3NkR2hwY3k1a2FYTmhZbXhsWkQwaE1TeDBhR2x6TGw5a2NtRm5aMmx1WnowaE1YMW1hWEp6ZEZWd1pHRjBaV1FvS1h0MGFHbHpMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0p0YjNWelpXUnZkMjVjSWl4MGFHbHpMbDlrY21GblUzUmhjblF1WW1sdVpDaDBhR2x6S1N4N1kyRndkSFZ5WlRvaE1DeHdZWE56YVhabE9pRXhmU2tzZEdocGN5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2lkRzkxWTJoemRHRnlkRndpTEhSb2FYTXVYMlJ5WVdkVGRHRnlkQzVpYVc1a0tIUm9hWE1wTEh0allYQjBkWEpsT2lFd0xIQmhjM05wZG1VNklURjlLU3hrYjJOMWJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpYlc5MWMyVnRiM1psWENJc2RHaHBjeTVmWkhKaFp5NWlhVzVrS0hSb2FYTXBMSHRqWVhCMGRYSmxPaUV3TEhCaGMzTnBkbVU2SVRGOUtTeGtiMk4xYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2lkRzkxWTJodGIzWmxYQ0lzZEdocGN5NWZaSEpoWnk1aWFXNWtLSFJvYVhNcExIdGpZWEIwZFhKbE9pRXdMSEJoYzNOcGRtVTZJVEY5S1N4a2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWJXOTFjMlYxY0Z3aUxIUm9hWE11WDJSeVlXZEZibVF1WW1sdVpDaDBhR2x6S1N4N1kyRndkSFZ5WlRvaE1DeHdZWE56YVhabE9pRXhmU2tzWkc5amRXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjSW5SdmRXTm9ZMkZ1WTJWc1hDSXNkR2hwY3k1ZlpISmhaMFZ1WkM1aWFXNWtLSFJvYVhNcExIdGpZWEIwZFhKbE9pRXdMSEJoYzNOcGRtVTZJVEY5S1N4a2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWRHOTFZMmhsYm1SY0lpeDBhR2x6TGw5a2NtRm5SVzVrTG1KcGJtUW9kR2hwY3lrc2UyTmhjSFIxY21VNklUQXNjR0Z6YzJsMlpUb2hNWDBwZlhKbGJtUmxjaWdwZTNKbGRIVnliaUJxWUR4emJHOTBQand2YzJ4dmRENWdmVjlrY21GblUzUmhjblFvZENsN2FXWW9kQzUwZVhCbExuTjBZWEowYzFkcGRHZ29YQ0p0YjNWelpWd2lLU1ltTUNFOVBYUXVZblYwZEc5dWZIeDBhR2x6TG1ScGMyRmliR1ZrS1hKbGRIVnlianRwWmloMGFHbHpMbWhoYm1Sc1pTWW1JU2dvZEN4bExITXBQVDU3YkdWMElHazlkRHRrYjN0cFppaGpiMjV6YjJ4bExteHZaeWhjSWxObGJHVmpkRzl5T2lCY0lpeGxMRndpVG05a1pUb2dYQ0lzYVNrc2MzUW9hU3hsS1NseVpYUjFjbTRoTUR0cFppaHBQVDA5Y3lseVpYUjFjbTRoTVR0cFBXa3VjR0Z5Wlc1MFRtOWtaWDEzYUdsc1pTaHBLVHR5WlhSMWNtNGhNWDBwS0hRdWRHRnlaMlYwTEhSb2FYTXVhR0Z1Wkd4bExIUm9hWE11YjJabWMyVjBVR0Z5Wlc1MEtTbHlaWFIxY200N2RtRnlJR1U3ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTEhRdWMzUnZjRkJ5YjNCaFoyRjBhVzl1S0Nrc1hDSjBiM1ZqYUhOMFlYSjBYQ0k5UFQxMExuUjVjR1VtSmloMGFHbHpMbDkwYjNWamFFbGtaVzUwYVdacFpYSTlLR1U5ZENrdWRHRnlaMlYwVkc5MVkyaGxjeVltWlM1MFlYSm5aWFJVYjNWamFHVnpXekJkUDJVdWRHRnlaMlYwVkc5MVkyaGxjMXN3WFM1cFpHVnVkR2xtYVdWeU9tVXVZMmhoYm1kbFpGUnZkV05vWlhNbUptVXVZMmhoYm1kbFpGUnZkV05vWlhOYk1GMC9aUzVqYUdGdVoyVmtWRzkxWTJobGMxc3dYUzVwWkdWdWRHbG1hV1Z5T2pBcE8yTnZibk4wSUhNOVdpaDBMSFJvYVhNdVgzUnZkV05vU1dSbGJuUnBabWxsY2lrN2N5WW1LSFJvYVhNdWMzUmhjblJZUFhNdWVDeDBhR2x6TG5OMFlYSjBXVDF6TG5rc2RHaHBjeTVmWkhKaFoyZHBibWM5SVRBc1VTaDBhR2x6TEZ3aVpISmhaMU4wWVhKMFhDSXNlM04wWVhKMFdEcDBhR2x6TG5OMFlYSjBXQ3h6ZEdGeWRGazZkR2hwY3k1emRHRnlkRmw5S1NsOVgyUnlZV2NvZENsN2FXWW9JWFJvYVhNdVgyUnlZV2RuYVc1bmZIeDBhR2x6TG1ScGMyRmliR1ZrS1hKbGRIVnlianQwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2tzZEM1emRHOXdVSEp2Y0dGbllYUnBiMjRvS1R0amIyNXpkQ0JsUFZvb2RDeDBhR2x6TGw5MGIzVmphRWxrWlc1MGFXWnBaWElwTzJsbUtDRmxLWEpsZEhWeWJqdHNaWFFnY3oxbExuZ3RkR2hwY3k1emRHRnlkRmdzYVQxbExua3RkR2hwY3k1emRHRnlkRms3ZEdocGN5NW5jbWxrSmlZb2N6MU5ZWFJvTG5KdmRXNWtLSE12ZEdocGN5NW5jbWxrV3pCZEtTcDBhR2x6TG1keWFXUmJNRjBzYVQxTllYUm9Mbkp2ZFc1a0tHa3ZkR2hwY3k1bmNtbGtXekZkS1NwMGFHbHpMbWR5YVdSYk1WMHBMQ2h6Zkh4cEtTWW1VU2gwYUdsekxGd2laSEpoWjJkcGJtZGNJaXg3WkdWc2RHRllPbk1zWkdWc2RHRlpPbWw5S1gxZlpISmhaMFZ1WkNoMEtYdDBhR2x6TGw5a2NtRm5aMmx1WnlZbUlYUm9hWE11WkdsellXSnNaV1FtSmloMExuQnlaWFpsYm5SRVpXWmhkV3gwS0Nrc2RDNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tTeDBhR2x6TGw5MGIzVmphRWxrWlc1MGFXWnBaWEk5ZG05cFpDQXdMSFJvYVhNdVgyUnlZV2RuYVc1blBTRXhMRkVvZEdocGN5eGNJbVJ5WVdkRmJtUmNJaWtwZlgwN2RtRnlJSEowTzNRb1cxa29lM1I1Y0dVNlFYSnlZWGw5S1Ywc2JuUXVjSEp2ZEc5MGVYQmxMRndpWjNKcFpGd2lMSFp2YVdRZ01Da3NkQ2hiV1NoN2RIbHdaVHBDYjI5c1pXRnVMSEpsWm14bFkzUTZJVEI5S1Ywc2JuUXVjSEp2ZEc5MGVYQmxMRndpWkdsellXSnNaV1JjSWl4MmIybGtJREFwTEhRb1cxa29LVjBzYm5RdWNISnZkRzkwZVhCbExGd2lhR0Z1Wkd4bFhDSXNkbTlwWkNBd0tTeHVkRDEwS0Zzb2NuUTlYQ0pzYVhRdFpISmhaMmRoWW14bFhDSXNkRDArWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2REOG9LSFFzWlNrOVBpaDNhVzVrYjNjdVkzVnpkRzl0Uld4bGJXVnVkSE11WkdWbWFXNWxLSFFzWlNrc1pTa3BLSEowTEhRcE9pZ29kQ3hsS1QwK2UyTnZibk4wZTJ0cGJtUTZjeXhsYkdWdFpXNTBjenBwZlQxbE8zSmxkSFZ5Ym50cmFXNWtPbk1zWld4bGJXVnVkSE02YVN4bWFXNXBjMmhsY2lobEtYdDNhVzVrYjNjdVkzVnpkRzl0Uld4bGJXVnVkSE11WkdWbWFXNWxLSFFzWlNsOWZYMHBLSEowTEhRcEtWMHNiblFwTzJWNGNHOXlkSHR1ZENCaGN5Qk1hWFJFY21GbloyRmliR1Y5TzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJOb1lYSnpaWFE5ZFhSbUxUZzdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybGlSMnd3VEZkU2VWbFhaRzVaVjBweldsTTFjV041U1hOSmJrNTJaRmhLYWxwWVRXbFBiSE5wVEdrMGRtSnRPV3RhVmpsMFlqSlNNV0pIVm5wTU0xSjZZa2RzYVV3elVucGlSMnhwVEcxV2VrNXBOWEZqZVVselNXazBkVXd5TlhaYVIxWm1ZbGM1YTJSWGVHeGplVGx6WVZoUmRHRklVblJpUXpsellWZEpkbHBIT1hSTWJYQjZTV2wzYVV4cE5IWmliVGxyV2xZNWRHSXlVakZpUjFaNlRESjRjR1JETVc5a1J6RnpUREo0Y0ZscE9UQmFWekYzWWtkR01GcFROWEZqZVVselNXazBkVXd5TlhaYVIxWm1ZbGM1YTJSWGVHeGplVGx6WVZoUmRHRklVblJpUXpsellWZEpkbUpYT1d0aFYxbzFURmhTYkdKWVFuTlpXRkpzVEcxd2VrbHBkMmxNYVRSMlltMDVhMXBXT1hSaU1sSXhZa2RXZWt3eWVIQmtRekZ2WkVjeGMwd3llSEJaYVRscllWaEtiRmt6VW5Ca2JWVjFZVzVOYVV4RFNYVk1hVGwxWWpKU2JGZ3lNWFphU0ZaeldsaE5kbUpIYkRCTVYyZ3dZbGQzZG1KSGJHbE1NMEpvWTI1UmRXRnVUV2xNUTBsMVRHazVkV0l5VW14WU1qRjJXa2hXYzFwWVRYWmlSMnd3VEZkb01HSlhkM1ppUjJ4cFRETlNiR0pZUW5OWldGSnNURmRzZFdNelVtaGliVTVzVEcxd2VrbHBkMmxNYVRSMlltMDVhMXBXT1hSaU1sSXhZa2RXZWt3eWVIQmtRekZ2WkVjeGMwd3llSEJaYVRrd1dsY3hkMkpIUmpCYVV6RjVXbGhPTVdKSVVYVmhiazFwVEVOSmRVeHBPWFZpTWxKc1dESXhkbHBJVm5OYVdFMTJZa2RzTUV4WGFEQmlWM2QyWWtkc2FVd3pRbWhqYmxKNlRHMXdla2xwZDJsTWFUUjJZbTA1YTFwV09YUmlNbEl4WWtkV2Vrd3llSEJrUXpGdlpFY3hjMHd5ZUhCWmFUa3dXbGN4ZDJKSFJqQmFVekZ0V1ZkT01HSXpTalZNYlhCNlNXbDNhVXhwTkhaaWJUbHJXbFk1ZEdJeVVqRmlSMVo2VERKNGNHUkRNVzlrUnpGelRESjRjRmxwT1hsYVZ6VnJXbGhKZFdGdVRXbE1RMGwxVEdrNWRXSXlVbXhZTWpGMldraFdjMXBZVFhaaVIyd3dURmRvTUdKWGQzWmlSMnhwVERKU2JGcHRSakZpU0ZGMFpFZFdkR05IZUdoa1IxVjBZMGhLZGxreVZucGpNamw1VEcxd2VrbHBkMmxNYVRSMlltMDVhMXBXT1hSaU1sSXhZa2RXZWt3eWVIQmtRekZ2WkVjeGMwd3llSEJrUXpGdlpFY3hjMHh0Y0hwSmFYZHBUR2swZG1KdE9XdGFWamwwWWpKU01XSkhWbnBNTW5od1pFTXhiMlJITVhOTU1uaHdXV2s1ZW1GSFJtdGxVekY1V2xjMWExcFlTWFZoYmsxcFRFTkpkVXhwT1hWaU1sSnNXREl4ZGxwSVZuTmFXRTEyWWtkc01FeFhWbk5hVnpGc1ltNVJkbUpIYkdsTU0xWjNXa2RHTUdGWE5XNU1WMVp6V2xjeGJHSnVVWFZoYmsxcFRFTkpkVXhwT1hWaU1sSnNXREl4ZGxwSVZuTmFXRTEyWWtkc01FeFhWbk5hVnpGc1ltNVJkbUpIYkdsTU1sSnNXVEk1ZVZsWVVuWmpiazExWVc1TmFVeERTWFZNYVRsMVlqSlNiRmd5TVhaYVNGWnpXbGhOZG1KSGJEQk1WMVp6V2xjeGJHSnVVWFppUjJ4cFRESk9lbU41TVRCWlYyTjFZVzVOYVV4RFNYVk1hVGwxWWpKU2JGZ3lNWFphU0ZaeldsaE5kbUpIYkRCTVYxWnpXbGN4YkdKdVVYWmlSMnd3VEZkV2MxcFhNV3hpYmxGMVlXNU5hVXhEU1hWTWFUbDZZMjFOZG1SWVVuQmlRemx0WVZoS2JFeFhWakphVnpVd1RHNVNla2xwZDJsTWFUUjJZek5LYWt3elZqQmhWM2QyV2pKV01FeFhNWFprV0U1c1RGaFNkbVJYVG05TVYzaDJXVEpHTUdGWE9YVk1ibEo2U1dsM2FVeHBOSFpqTTBwcVRETldNR0ZYZDNaaVYwWXdXVEpuZEdNeVZuTmFWMDR3WWpOSmRXUklUV2xNUTBsMVRHazVlbU50VFhaaVIyd3dURmRTZVZsWFpHNVpWMHB6V2xNMU1HTjVTWE5KYVRSMVRETk9lVmw1T1RGa1IyeHpUREprYkdSRE1UQmlNMVpxWVVNeGNGcEhWblZrUjJ4dFlWZFdlVXh1VW5wSmJEQnpTVzVPZG1SWVNtcGFXRTVFWWpJMU1GcFhOVEJKYW5CaVNXazRjVWxUUVhGTGFXOXhTMmx2Y1V0cGIzRkxhVzl4UzJsdmNVdHBiM0ZMYVc5eFMybHZjVXRwYjNGTGFXOXhTMmx2Y1V0cGIzRkxhVzl4UzJsdmNVdHBiM0ZMYVc5eFMybHZjVXRwYjNGTGFXOXhTMmx2Y1V0cGIzRkxhVzl4UzJsdmNVdHBiM0ZMYVc5eFMyeDRlVmhITlVSaU0wSTFZMjFzYm1GSVVXZExSMDF3U1VVeGNGa3pTblpqTWpsdFpFTkNSR0l6U25kaU0wcG9aRWRzZG1KcE5XTmpiSGgxV0VoS1kySnNRbXhqYlRGd1l6Tk9jR0l5Tkdka1J6aG5aRmhPYkV4RFFtcGlNMEkxVEVOQ2RHSXlVbkJhYm10elNVZEdkVnBET1haamFVSnJZVmhPTUdOdGJHbGtXRkpzU1VoU2IyRllUV2RqTWpsdFpFaGthR050VldkYWJUbDVTVWRHZFdWV2VIbFlSelYzWkZoS2QySXpUbXhKU0dSd1pFZG5aMkl6U1dka01td3dZVWM1TVdSRFFtMWFWMVZuWVZoTloyRkhWbmxhVjBvMVNVZGtlVmxYTlRCYVYxRjFXRWhLWTJKc2VIbFlSelZWVTBWVloxVXdPVWRXUm1SQ1ZXdFZaMU5XVFdkVlJrcFFWbXRzUlZKVlVXZFlRMHBDVlhsQ1NsVXhkMmxKUlVaUFVrTkNWVk5GVldkUlZsWlZVMFU1VTBsRlVrcFZNRTVOVVZWc1RsVjVRa0pVUlhkblZqQkdVMVZyUms5V1JXeEdWWGxDV0ZOV1VrbFlTRXBqWW14S1JsSXdSbE5TUTBKVlZIbENWVk5GYkZSSlJrNVFVbXhTV0ZGV1NrWkpSV3hQVVRCNFZsSkZiRTlTZVVKQ1ZFVjNaMU5WTVZGVVJXeEdVa05DV0ZGV1NsTlJWVFZWVTFWV1ZFbEZPVWRKUlRGR1ZXdE9TVkZWTlZWUlZVcEtWRVZzVlZkV2VIbFlSelZDVkd0UloxSnJiRlZVYTFaVVZYazBaMU5WTkdkVWF6aG5VbFphUmxSc1VXZFZNR2hDVkVWM1oxWkZhRVpKUlVaV1ZrVm9VRlZwUWtOU1UwSk5VMVZHUTFSRlZXZFNhemxUU1VWR1QxZFRRbFJWUlZaRVUxVkdUVXhEUWtWVFZrcEdVVEZSYzFoSVNtTmlhMnhQVWtWc1UxSlZUbFZNUTBKUVZXbENSRlF3TlZSU1ZrWldVbFUxVlZOVlJrMUpSVkpDVkZWR1NGSldUV2RVTVVsblVWVTFXa2xGVWtKVVZVWklVbFpOWjFZd2FFSldSazVRVWxaYVJsVnBRbE5TVms1V1ZFWlNTbFJyWTJkU2JFcFFWRlo0ZVZoSE5VMVVNVTVVU1VVNVIwbEdWbFJTVTNkblVrVkdWVkZUUWxCVmFVSlJWV3M1UjFOV1VsUk1RMEpZVTBWV1ZWTkZWbE5KUld4UFNVVkdUMGxGUmtSV1JXeFFWR2xDVUZKcFFrUlVNRFZWVld0R1JGWkRkMmRVYTFaSVZFVnNTRkpWTlVSU1UwSlFWV3g0ZVZoSE5WQldSV2hHVldsQ1ZWUXhTbFZUVlRsV1ZYbENRbEV4VWtwVU1EUnpTVVZHVTFOV1RrcFVhMk5uVkRGV1ZVbEZPVWRKUlRsVFNVVnNUMGxGVGxCVWF6VkdVVEZTU2xRd05HZFdNR3hWVTBOQ1ZWTkZWV2RXVms1R1NVVTVVMWhJU21OaWJFSkdWV3RhVUZWck1VSlVhMDVHU1VVNVIwbEdVa2xUVmsxblZUQTVSMVpHWkVKVmExVjFXRWhLWTJKcGIzRkxhVzl4UzJsdmNVdHBiM0ZMYVc5eFMybHZjVXRwYjNGTGFXOXhTMmx2Y1V0cGIzRkxhVzl4UzJsdmNVdHBiM0ZMYVc5eFMybHZjVXRwYjNGTGFXOXhTMmx2Y1V0cGIzRkxhVzl4UzJsdmNVdHBiM0ZMYVc5eFMybHZjVXRwYjNGTGFXOXhTVU52ZGxoSVNtTmlhVGh4U1Vka2MySXlTbWhpUTBKVFdsZGFjMXBYVGpCTVEwSlJZMjA1ZEdGWVRteEpRMjkyV0VoS1kySnNlSGxZUnpVeVdWaEpaMXBZYURCYVZ6VnJWVE5TYUdSSGJHcGplVUU1U1VkYU1XSnRUakJoVnpsMVMwZFJjMGxIU1hCSlNIUmpZMng0ZFVsRFFXZEpSMVkwWkVkV2RWcEdUakJaV0ZKd1dUTk5aMUJUUWxCWmJYQnNXVE5SZFdNeVZqQlZTRXAyWkVjNU1HVllRbXhVTWxsblpraDRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXOWxlVUptV0ROQ2VXSXpVblpZTVRnMlNVWjBaRWxJTUdkaFZ6VjZaRWRHZFZreVZuWmFhVUpDWTI1S2FHVlRRVzFLYVVKdFpGYzFhbVJIYkhaaWFVRnZXa04zWjFscGEyZGxlVUpyVEd3NVptTklTblprUnpsbVdIbEJPVWxIU1RkSlNEQndTVWg0T0ZoSVNtTmlhVUZuU1VOQlowbERRV2RhYmxaMVdUTlNjR0l5TkdkTFIxRnpTVWRKY0VsSWMyZGFiVGw1U1VOb01sbFlTV2RqUTBKd1ltbENhVXRUUW5CYWFVRnZXV2sxYjFsWVRsQmtNalZSWTIwNWQxcFlTakJsVTJoM1MxTnJaMXBHZEhkWVUwRTVTVWRLWW1OR01EZEpTREEzV0VoS1kySnBRV2RKUTBKNVdsaFNNV050TkdkYVdHZ3dXbGMxYTFVelVtaGtSMnhxWTNsb2EweERRbWxMVkhSalkyeDRkV1pVZEdOamJIaDFXRWhLWTJKdFZqUmpSemw1WkVOQ2JXUlhOV3BrUjJ4MlltbENabGd5VmpSa1IxWjFXa2hOYjFwRGQyZFphV3RuWlRGNGVWaEhOR2RKUTBGbldsaG9NRnBYTld0Vk0xSm9aRWRzYW1ONWFHdE1RMEpwUzFSMFkyTnNlSFZKUTBGblNVZGFNV0p0VGpCaFZ6bDFTVVk1Wmt0RGEyZGxlVUl3WVVkc2VreHRUblppYms0d1kyNVdhbVJIT1hsSlJEQm5Xa1J6WjJaV2VIbFlSelJuU1VOQloxcEROWGRqYlRrd1lqTlNOV05IVldkUVUwSnBTVVF3T1ZCVFFuVmtWM2h6U1VRNFoxUXlTbkZhVjA0d1RHMU9lVnBYUmpCYVUyaHBTMU5CTmtsRGFHWlllVFYzWTIwNU1HSXpValZqUjFWblVGTkNhVXh1UW5saU0xSjJaRWhzZDFwVGQyZGliVll6U1VZNVprdERhM0JQTVhoNVdFYzFPVmhJU21OaWJIaDVXRWMxYkdWSVFuWmpibEZuWkcxR2VVbEdPV1paV0U1NllWZGtkVWxFTUdkYWJsWjFXVE5TY0dJeU5HOUxVMEkzV0VoS1kySnBRV2RKUTBKbVdESkdlbU15Ykc1aWFVRTVTVVU1YVdGdFZtcGtRelZvWXpOT2NGb3lOR2RtU0hkbldtNVdkVmt6VW5CaU1qUm5XREU1YUdNelRuQmFNalJ2WkVOcloyVXhlSGxZUnpSblNVTkJaMGxEUVdkSlIxcDJZMmxCYjJSdFJubEpTRTF6U1VkcloxQlRRWGhNUTBKMVNVUXdaMWxZU201a1Z6RnNZbTVTZWt4dGVHeGliV1F3WVVSeloyRlRRVGhKUnpRM1NVZHJja3Q1YTJkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbnBKUkRCbldWaEtibVJYTVd4aWJsSjZWekpzWkU4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkNiV0l6U1dkTFNGcG9ZMmxDZDBsSGJIVkpTRTF3U1Vkc2JVbERhRkJaYlhCc1dUTlJkV05JU25aa1J6a3daVmhDYkV4dGFHaGpNRGt6WW14Q2VXSXpRbXhqYmxJMVRHMU9hR0pIZDI5amVYZG5ZME5yY0VsSVVtSmpSakJuVUZOQ2VsY3pRbVJQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWd4WTJOc2VIVkpRMEZuU1VOQlowbERRbmxhV0ZJeFkyMDBaMlJFZEdOamJIaDFTVU5CWjBsSU1XTmpiSGgxU1VOQlowbElTbXhrU0ZaNVltbENabGd5Um5wak1teHVZbWsxYUdOSVFuTmxVMmd3WVVkc2VreERRbWhqYldReFlsZFdkV1JJVFhCUE1YaDVXRWMxT1ZoSVNtTmliSGg1V0VjMWJHVklRblpqYmxGbldtNVdkVmt6VW5CaU1qUm5XREU1ZVZwWVRqQkxTRTF6U1VkVmNFbElkR05qYkhoMVNVTkJaMGxJV21oamFVSXdTVVF3WjJVek1EZFlTRXBqWW1sQlowbERRbTFpTTBsblMwaGFhR05wUW5kSlIyeDFTVWhOY0VsSGJHMUpRMmhRV1cxd2JGa3pVWFZqU0VwMlpFYzVNR1ZZUW14TWJXaG9ZekE1TTJKc1FubGlNMEpzWTI1U05VeHRUbWhpUjNkdlkzbDNaMk5EYTJkS2FWbG5XbE0xY0dKdFVteGxSVGx0UzBoQmNFbEVkMmROUTJ4alkyeDRkVWxEUVdkSlEwRm5TVU5DTUZjelFtUkpSREJuWXpGMGQxaFVkR05qYkhoMVNVTkJaMGxIYkcxSlEyaDZTVU5GT1VsSE5URmlSM2RuU21sWloyUkliSGRhVnpsdFNVVTVhV0Z0Vm1wa1F6VnVXbGhTVUdReU5WRmpiVGwzV2xoS01HVldUalZpVjBwMllraE5aMUJVTURsSlJuZHBXbTVXZFZrelVuQmlNalZqU1dsc1kyTnNlSFZKUTBGblNVTkJaMGxEUW0xaU0wbG5TMGhhYUdOcFFuQkpSREJuVFVOM1oyTkRRVGxKUlRscFlXMVdhbVJETlc1YVdGSlFaREkxVVdOdE9YZGFXRW93WlZaT05XSlhTblppU0UxdlkzbHJOMGxIYTJkUVEwSjNURzE0YkdKdFpEQmhSSE5uWVZOemNrdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSGJHMUpRMmhzVEcxc2RWcEhWalJVTWxsdlkwWjBjRmhUYTJkUVEwRjNTVU5aYlVsRk9XbGhiVlpxWkVNMWQyTnRPVEJpTTFJMVkwZFZkV05JU25aalIxWjVaRWhzU21Nd1ZuVmtWekZzWTIxR2FXSkhWWFZaTWtaellrTm9la3hEUW5kWE1teGtTMU5zWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJVW1KalJuUndXRll3WjFCVFFucFhNMEppWVZZeFpFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlNERmpZMng0ZFVsRFFXZEpTRXBzWkVoV2VXSnBRakJQTVhoNVdFYzFPVmhJU21OaWJIaDVXRWMxYkdWSVFuWmpibEZuV201V2RWa3pVbkJpTWpSbldERTVhMXBYVG5aamJVWXdXbE5vYTFwWFRuWmpiVVl3WWpOS2VreERRakJaV0VwdVdsaFJjMGxIZEd4bFUzZG5Xa2RXZWxsNWEyZGxNWGg1V0VjMFowbERRV2RrYlVaNVNVZE5aMUJUUW1oamJXUXhZbGRXZFdSSVRYVmlSMVoxV2pOU2IweERRbmxKUkRCbldYbEJPRWxFVFdkUWVVSXdXVmhLYmxwWVVXZFBhVUpyV2xoT2FrbEVNRGxRVTBKMVpGZDRjMGxFT0dkYVIxWjZXWGxCT1VsRk9XbGhiVlpxWkVNMWJscFlVbEJrTWpWUlkyMDVkMXBZU2pCbFZWSnNZekpPZVdGWVFqQmlNMGx2WkVkR2VWb3lWakJNUTBKeVdsaHJjRWxFYjJkYVIxWjZXWGwzWjFwRWRHTmpiSGgxU1VOQlowbEhiRzFKUTJnd1pWaENiR0l5V1dkVmJWWnRZa2RXYW1SRFFUbFFWREJuV0VOS2RsbHRjR3haTTFKalNXbEJiVXBwUWpCbFdFSnNZakpaWjFWdFZtMWlSMVpxWkVNMWExcFhUblpqYlVZd1dsTkJPVkJVTUdkWVEwcHRaRmMxYW1SSGJIWmliSGRwUzFOQ2VVbEVNR2RWYlZadFlrZFdhbVJETld0YVYwNTJZMjFHTUZwVGFHdGFWMDUyWTIxR01HSXpTbnBNUTBJd1dWaEtibHBZVVhOSlIzUnNaVk4zWjFwSFZucFplV3MzV0VoS1kySnBRV2RKUTBKc1lraE9iRWxIV25aamFVRnZaRzFHZVVsSGEyZFFVMEpyV2xkT2RtTnRSakJpTTBwNlRHMTRiR0p0WkRCaFEwRjBTVVJGTjBsSGEyZFFhakJuVFVSeloyRlRNSFJMVTBKd1dtbEJiMXBEUVRsSlIxSnNXVEk1ZVZsWVVuWmpiazVpWVZZd2NFbElTV2RRVTBGdldYbEJPRWxFVFdkUWVVSnJTMGhKY0VsRWIyZFplVUVyU1VSTloxQjVRbXRMU0ZKb1kyMWtiR1JEZDJkaE1sWTFURU5DZVV0VFFUWkpSMUZ2WkVkR2VWb3lWakJNUTBKeVdsaHJjRXRUUWpobVEwSjVUekY0ZVZoSE5HZEpRMEZuWTIxV01HUllTblZKUjAxblVHbEJla2xEV1cxSlNFbG5TbWxaWjFReVNuRmFWMDR3VEcxU2JGcHRiSFZhVmtKNVlqTkNiR051VWpWTFNGSm9ZMjFrYkdSRGQyZGhNbFkxVEVOQ2VVdFRkMmRqYW5SalkyeDRkV1pXZUhsWVJ6VmpZMng0ZFZwWWFIZGlNMG93U1VkYU1XSnRUakJoVnpsMVNVWTVabU5IUm5sWlZ6QnZZMGRHZVZsWE1VcGliVkpzWlVOM1oxcEhWbXBpTTBwb1pFYzVlVXRUUWpkWVNFcGpZbWxCWjBsRFFubGFXRkl4WTIwMFoxcHVWblZaTTFKd1lqSTBaMHRJVW1oamJXUnNaRU4zWjJFeVZqVkxVMEkzU1VkU2JGa3lPWGxaV0ZKMlkybG9NRmxZU201YVdGRnpTVWQwYkdWVGQyZGpSMFo1V1ZjeFNtSnRVbXhsUTJzM1NVZ3hZMk5zZUhWbVZuaDVXRWMxWTJOc2VIVmFXR2gzWWpOS01FbEhXakZpYlU0d1lWYzVkVWxHT1daaVYxWXdXVmRTYUdSSFJXOWlWMVl3V1ZkU2FHUkhSa3hhV0d0elNVY3hiR1JIUm10WldGSm9WbTFHYzJSWFZYQkpTSFJqWTJ4NGRVbERRV2RKUjJ4dFNVTm9NR1ZZUW14aU1sbG5WVzFXYldKSFZtcGtRMEU1VUZRd1oxaERTblpaYlhCc1dUTlNZMGxwUVcxS2FVSXdaVmhDYkdJeVdXZFZiVlp0WWtkV2FtUkROWFJhV0ZKb1drZEdNRmxUUVRsUVZEQm5XRU5LYldSWE5XcGtSMngyWW14M2FVdFRRbmxhV0ZJeFkyMDBaMVZ0Vm0xaVIxWnFaRU0xZEZwWVVtaGFSMFl3V1ZOb2RGcFlVbWhhUjBZd1dWVjBiR1ZUZDJkaVYxWXdXVmRTYUdSSFJsZFpWM2d4V2xOck4xaElTbU5pYmpGalkyeDRkVmhJU21OaWJWWTBZMGM1ZVdSRFFtMWtWelZxWkVkc2RtSnBRbVpZTWtZeldWZHNNRnBZU1c5a1IyaHdZekJHZVZwNWQyZFlNa1o1V2pOV2RGcFhOVEJqZVhkblZVTjNaMW95Vm5WYVdFcG9aRWM1ZVV0VFFqZFlTRXBqWW1sQlowbERRbTFrVnpWcVpFZHNkbUpwUW1oYVJ6bDNaRU5vTWxsWGVERmFVMnRuWlhsQ2VWcFlVakZqYlRSblpHMUdjMlJYVldkaFZ6VjZaRWRHZFZreVZuWmFhVUpSU1VRNFoyUnRSbk5rVjFWblQybENkVnBZWTJkVlEyaHRaRmMxYW1SSGJIWmlhVUZ2WTIxV2VtSXllREphVTJ0blpYbENlVnBZVG5aaVNGcHNTMGhhYUdKSVZteExWSE5uWmxOck4wbElNV05qYkhoMVNVTkJaMGxJU214a1NGWjVZbWxDZFZwWVkyZExSa0ZuWmtoM1owdEdRV2RRVTBKUlkyMDVkR0ZZVG14TFUydHZXbTVXZFZrelVuQmlNalJuUzBoS2JHTXlPWE5rYlZWelNVaEtiR0Z0Vm1wa1EydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbEhXakZpYlU0d1lWYzVkVWxIV2pGaVIxcHdZa2Q0YkZwRGFESlpWM2d4V2xOcloyVjVRakJqYm10blpYbENlbVJIVm5kTFIyUnNZbTFXZVZsWVVuWmphVFYxV2xob01FdElXbWhpU0Zac1MxTnJOMGxJTUdkWk1rWXdXVEpuWjB0SFZYQkpTSE5uWTIxV2NWcFhUakJMUjFWd1QzbENPVWxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEp0WkZjMWFtUkhiSFppYVVKNVdsZHdiRmt6VW14YVEyZ3lXVmQ0TVZwVGEyZGxlVUl3WTI1cloyVjVRbnBrUjFaM1MwZGtiR0p0Vm5sWldGSjJZMngwWTBsdVVtOWpiVGt6V0VOS1pFdElXbWhpU0Zac1MxTnJOMGxJTUdkWk1rWXdXVEpuWjB0SFZYQkpTSE5uWTIxV2NWcFhUakJMUjFWd1QzbENPVWxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEp0WkZjMWFtUkhiSFppYVVKNlpFZFdkMHRJU214ak0xWnpaRU5yWjJWNVFubGFXRTR4WWtoUmRWcEhPWFZhVTBFdlNVaEtiR015T1hOa2JWVnZZMjFXZW1SWGVEQk1ibHBvWWtoV2JFdFRRVFpKUjBacllqTkNNRXRJU214ak0xWnpaRU0xTWxsWGVERmFVMnQxWkVkb2JHSnBhRzFrVjNodFlWZDRjMXBYVVhOSlNFcHNZVzFXYW1SSFZtdExWSE5uWmxaNGVWaEhOR2RKUTBGblNVTkJaMGxJVGpCYVdFRnZTMGRrYkdKdFZubFpXRkoyWTJsQk9VbEhaR3hpYlZaNVdWaFNkbU5wTldoalNFSnpaVk5vTUdGSGJIcFJXRXB1VEVOQ1psbFlTbTVrVnpGc1ltNVNla2xJZURoSlJuUmtTMU5yZFdKdFZqUmtRMmR3UzFSMFkyTnNlSFZKUTBGblNVZ3djRTh4ZUhsWVJ6VTVXRWhLWTJKc2VIbFlSelZzWlVoQ2RtTnVVV2RhYmxaMVdUTlNjR0l5TkdkWU1UbHVXbGMxYkdOdFJqQmlNMGx2WkVkb2NHTXdSbmxhZVhkbldXMDVhMlZUYTJkbE1YaDVXRWMwWjBsRFFXZGtiVVo1U1VZNFoxQlRRamRKUjNob1dXMVdjMDlwUVhkTVEwSjZXbGMxTUU5cFFtMWtWelZxWkVkc2RtSnBaM0JKU0hObllWZFpaMHRJVW1KTlJqQm5TbWxCZUV0VFFqQmhTRXAyWkhsQ01GZDZSbVJQZVVKNVdsaFNNV050Tkdka1JuTjRXRlJ6WjJaVGQyZGtTRW8xWTNwdloxY3hNSE5KUnpsM1kzcHZaMWN4TUdkbVUzZG5XbWwzWjJWVGQyZGtRM2RuV25wMFkyTnNlSFZKUTBGblNVaEtiR1JJVm5saWFVSnVTVVF3WjJWNVFuVmFXR2d3VDJsQ01scFlTbWxMUkVGd1RFTkNZMGx1VW05amJUa3pXRU5KTmtsSVdteGpiVWx2VFZOcmMwbEdkMmxqYlZZd1pGaEtkVmhEU1RaSlNGcHNZMjFKYjAxcGEyZG1VM2RuWkVoc2QxcFhPVzFKUms0MVlsZEtkbUpEUVRsUVZEQm5XRU5LYldSWE5XcGtSMngyWW14M2FVbERXVzFKUTJodVZ6Rk9OV0pYU25aaVF6VndaRWRXZVZsWVVuWmpiREJuVUZOQ2JXUlhOV3BrUjJ4MlltbG5jRWxJYzJkamJWWXdaRmhLZFVsSVVtOWhXRTAzU1Vnd2NFeERRbTVQTVhoNVdFYzBaMGxEUVdkYWJsWjFXVE5TY0dJeU5HZGtiVlo1V1dsb2RVdFRRamRKU0Vwc1pFaFdlV0pwUW0xa1Z6VnFaRWRzZG1KcFFXOWthV3RuWlhsQ2VWcFlVakZqYlRSbll6TlNiR05EYUdKaWFYZG5aR3d3Y0U5NVFqbFBlVUk1V0VoS1kySnBRV2RKUTBKdFpGYzFhbVJIYkhaaWFVSjZaRWRXZDB0SE9YZExVMEkzV0VoS1kySnBRV2RKUTBGblNVTkJaMkZYV1dkTFIxbHdTVWhTYjJOdE9UTkpSelZzWkhsQ1ZXVllRbXhTV0VwNVlqTkpiMWhEU2toYVZ6VnNZMjFHTUdJelNXZGhXRTFuV1ZkNGVWcFhSbXRsVTBKc1pVZFdhbVJZVW5CaWJXTjFXRU5KY0U4eGVIbFlSelJuU1VOQlowbERRV2RKU0dSdllWZDRiRWxEYUdaTFUwSXdZMjVyWjJVeGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkNjRnBwUVc5YWFVRTVTVVJGYzBsSWEyZEthVmxuUzBoUloxQlRRblpqUm5OM1dGTkJiVWxFU1dkUWVVSTFWekYzYVdOdFZqQmtXRXAxV0VOS1pFbEViMmRpTTBKaVRVWXdaMUI1UWpWWE1YZHBaRWRvZVdJelpHTkpiREJuWmtoM1owdERhREJKUkRCblpWWjBZMGx1U214a1NGWjVZbXgzYVZoVGEyZEthVmxuWkVNMWFsbFhlSE5MU0d0d1RFTkJkMHRUUVRaSlNHdDFZbTFXTkdSRGEyZEthVmxuU1ZOb01FbEVNR2RrUXpWcVdWZDRjMHRJYTNOSlJ6bDNWM3BHWkV0VGEzVmFSemwxV2xOcloyTnRWakJrV0VwMVNVaFJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1Vkc2JVbERhRFZKUkRCblRVTjNaMlJEYTJkaU0wRm5VRk5DWW1JelFtSk5SakJuU21sQmVVeERRakJNYmxwb1lraFdiRmhVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyTXpaSEJrUjA1dlNVTm9kbU5HYzNkWVUydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMWt5Um5wYVUwRjNUMmxDYWxsWVRteEpSRVUyU1VoUloxQlRRblpqUkhObldXNUtiRmxYY3pkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKcVdWaE9iRWxFVVRaSlJqaDFZa2RHYVZwWGQzSkxlbk5uWTIxV01HUllTblZKU0hOblpHMUdjMlJYVlRaSlJ6bDNWM3BHWkV4RFFtdGlNalZzVDJsQ2JWbFhlSHBhVTBJNVR6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxa3lSbnBhVTBFeFQybENaa3h0ZUdoWmJWWnpTM2x6TjBsSWEyZFFVMEoyWTBaemVGaFVjMmRpTTBGblVGTkNZazFHTURkSlIwNTJZbTVTY0dKdVZteFBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5XVEpHZWxwVFFUTlBhVUoyWTBOQk9VbEdPSFZpTTBKNlRHNUNkbU5EWjNCUGVVSm1URzVTZVdWWVRYVmpSemwzUzBOck4wbEhUblppYmxKd1ltNVdiRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RhUjFadFdWaFdjMlJFY0dOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNjRnBwUVc5SlUyZ3dTVVF3WjFoNU5UQmpibXg2VEVOQ01FbEVNR2RrUXpWeldsYzFibVJIWjJkUWFVRjNTVU5aYlVsSVVtSmtRelZ6V2xjMWJtUkhaMmRNVTBGNFdGTnJaMHBwV1dkTFJ6bDNWM3BDWkVsRU1EbFFVMEV5U1VoNE9FbEhPWGRYZWtKa1NVUXdPVkJUUVhsTFUydG5aWGxDWmtsRU1HZE5SSE5uV1RJNWRXUkhiSFZrVjFVM1NVZ3hZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKd1dtbEJiMkl6UW1KTlJqQm5VRlF3T1VsRVRXZEthVmxuUzBOR01FbEllRGhKUTJoMlkwWnplRmhUUVN0SlNGSmlUVVl3WjBwcFdXZGlNMEppVFZZd1oxQkRRakJYZWs1a1MxTnJjRWxJYzJkWWVUVnpXVmRLYkdKRFFUbEpSemwzVjNwR1pFOTVRbWxqYlZab1lYcHpaMlpXZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZHNiVWxEYUhaalJuTjNXRk5CT1ZCVU1HZE9hVUZ0U21sQ1preHRlR2haYlZaelNVUjNaMlJHYzNoWVUydG5aWGxDWmt4dGVHaFpiVlp6U1VRd1oyUkdjM2hZVkhOblpFTkJPVWxIT1hkUGVVSnBZMjFXYUdGNmMyZG1Wbmg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSGJHMUpRMmd3U1VOWmJVbEdPSFZpUjBacFdsZDNaMUJEUWpCWGVrcGtTMU5DTjBsR09IVmlSMFpwV2xkM1oxQlRRakJYZWtwa1QzbENaa3h0T1hkamVUVjNaRmhPYjB0SE9YZExWSE5uV1c1S2JGbFhjemRKU0RGalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbkJhYVVGdlpFWnplVmhUYTJkWWVUVjJZMGhOZFdOSE9YZExRMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZFllVFV3WTI1c2VreHVRblpqUTJkd1QzbENhbUl5TlRCaFZ6VXhXbFIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblpsWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEoyWTBOQk9VbEhTblphU0d0MVdUSkdjMkpEYURCaFIyeDZVVmhLYmt4RFFtWkxWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkNPVWxIVG1oa1IwNXZTVU5vYkV0VFFqZEpSemwzU1VRd1oxZDZXWE5KUjFaa1QzbENOVWxFTUdkTlJITm5abE5DYldGWE5XaGlSM2cxU1VoeloxcHBRVGxKU0ZGblVGTkJkMDk1UWpsWVNFcGpZbWxCWjBsRFFXZEpRMEZuWVZkWlowdEhPWGRYZWtKa1NVTlpaMDVUYTJka1IyaDVZak5qWjJJelFtSk5WakEzU1VoS2JHUklWbmxpYVVJM1NVaGFhR0pJVm14UGFVSjJZMFp6ZDFoVFFTOUpSemwzVjNwR1pFbEViMmRrYlRsd1drTkJkMHhEUW10aU1qVnNUMmxDTUdOdVZteEpTREEzV0VoS1kySnBRV2RKUTBJNVdFaEtZMkp1TVdOamJIaDFXRWhLWTJKdFZqUmpSemw1WkVOQ2JXUlhOV3BrUjJ4MlltbENabGd5VG5sYVYwWXdXbFZLY0dKdFVuQmliV052WW5sM1oySlRkMmRoZVhkbllYcEpjRWxJZEdOamJIaDFTVU5CWjBsSGJHMUpRMmh5VFdsQk9WQlVNR2RrVnpWcldsZGFjR0p0Vm10TFUwSnlUV2xCT1VsSGN6ZFlTRXBqWW1sQlowbERRblpYTW5ONVdGTkJPVWxITVdKaE1UQTNXRWhLWTJKdU1XTmpiSGgxV0VoS1kySnRWalJqUnpsNVpFTkNiV1JYTldwa1IyeDJZbWxDWmxneVZqUmpSemw1WkVaT01GbFlTVzlpVTNkbldsaG9kMkl6U2pCamVXdG5aVEY0ZVZoSE5HZEpRMEZuV20wNWVVbERhREpaV0VsblkwTkNjR0pwUW5STFUwSndXbWxCYjJORFFXaFFWREJuV0VOS2ExcFhXbWhrVjNnd1dFTkpaMHBwV1dkSlYxWTBZMGM1ZVdSSVRYVmhSMFo2VkROa2RWVklTblpqUjFaNVpFaHJiMk5EYTNCSlIxWTBZMGM1ZVdSSVRtSmpSakJuVUZOQ2RGY3pRbVJQTVhoNVdFYzFPVmhJU21OaWJIaDVXRWMxYkdWSVFuWmpibEZuV201V2RWa3pVbkJpTWpSbldERTVNbGxYZURGYVdFMXZZbmxyWjJVeGVIbFlSelJuU1VOQloyUnRSbmxKU0UxblVGTkNNR1ZZUW14aU1sbG5WVE5zZEZsdE9YTkpSREE1VUZOQ1kwbHRXakZpYlU0d1lWYzVkVmhEU1dkS2FWbG5WVE5zZEZsdE9YTk1iV3d3V2xoS2FHUkhPWGxNUTBKMFNVUXdaMk41UVcxS2FVSjJWek5PWkV4RFFuQkpSREJuVFVSMFkyTnNlSFZKUTBGblNVZHNiVWxEYUhSTFUwSjVXbGhTTVdOdE5HZGlVelZxV1ZkNGMwdEhPSEJQTVhoNVdFYzBaMGxEUVdkaFYxbG5TMGM0WjBwcFdXZGtTR3gzV2xjNWJVbEhPSFZpUjFaMVdqTlNiMGxFTURsUVUwSmpTVzAxTVdKWFNteGpiSGRwUzFOQ2VWcFlVakZqYlRSblpURjRlVmhITkdkSlEwRm5TVU5CWjBsSE5XeGxTRkUyU1VkYU1XSnRUakJoVnpsMVNVTm5jRWxJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyRlhXV2RMUnpoblNtbFpaMkZUUVN0UVUwSjJURzE0YkdKdFpEQmhRMnRuWW5sQk9VbElXblpoVjFGblRVUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTIxV01HUllTblZKU0hOblpHMUdjMlJYVlRaSlJ6aG5TbWxaWjJJeGRIQkxlWFJrVEVOQ2EySXlOV3hQYVVGb1lubENPVTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpTREZqWTJ4NGRVbERRV2RKU0RBM1dFaEtZMkpwUVdkSlEwSXdZVWhLZG1SNVFuVmFXR05uVmtoc2QxcFZWbmxqYlRsNVMwaE5aMUI1UW1OSmF6bHBZVzFXYW1SRFFuQmplVUoxWWpOUloyRllVbXhqYlVacFlrZFZkVmhEU1dkUGFVSmpTV3hPTldKWFNuWmlRelZ3WkVkV2VWbFlVblpqYVVKd1kzbENkV0l6VVdkYVIxWnRZVmMxYkZwRE5XTkphV3MzV0VoS1kySnVNV05qYkhoMVdFaEtZMkp0VmpSalJ6bDVaRU5DYldSWE5XcGtSMngyWW1sQ1psZ3pTbXhaVjFGdllubDNaMkpwYTJkbE1YaDVXRWMwWjBsRFFXZGtiVVo1U1Vjd1oxQlRRakJsV0VKc1lqSlpaMVV6YkhSWmJUbHpTVVF3T1ZCVFFtTkpiVm94WW0xT01HRlhPWFZZUTBsblNtbFpaMkl4ZEZSbFZ6RnBZakozZFdGWVVteGpiVVl3WWpOS1pFOHhlSGxZUnpSblNVTkJaMkZYV1dkTFEwWjBTMU5DZVZwWVVqRmpiVFJuWW5wMFkyTnNlSFZKUTBGblNVaGFhR05wUW5CSlJEQm5ZbE0xYWxsWGVITkxSemh3VEVOQ2VVeERRbWhqYVVFNVNVWjBaRXhEUW14UE1YaDVXRWMwWjBsRFFXZGtTRW8xU1VoMFkyTnNlSFZKUTBGblNVTkJaMGxEUWpOaFIyeHpXbE5CYjB0SE5HZFFWREE1U1VoYWRtRlhVV2ROUTBJNFprTkNkVXhUTUdkUWFVRjNTMU5CYlVwcFFXaExTRWxuVUZOQ2NFeHROV3hsU0ZGdlMxTnJkVnBIT1hWYVUydG5XVmhKZFdOSVZucGhRMmg1VEc1YWFHSklWbXhMVkhSalkyeDRkVWxEUVdkSlNERmpZMng0ZFVsRFFXZEpSMDVvWkVkT2IwbERhR3hqYmtwMlkybHJaMlY1UW14SlJEQm5aWGxDYkdOdVNuWmphbTluV2xoS2VXSXpTV2RtVkhOblpsWjRlVmhITkdkSlEwRm5XbTFzZFZsWGVITmxVMEkzV0VoS1kySnBRV2RKUTBGblNVTkJaMlJJU2pWSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RoVjFsblMwaEpaMHBwV1dkSldFbDFXa2M1ZFZwVFFXMUthVUZ2WWxOQk9VbEhiR0pZUTBwNVdsaFNNV050TldOSmJEQndTMU5DZEV4dFRtaGlSM2R2WVZOck4xaElTbU5pYVVGblNVTkJaMGxEUVdkbVZuaDVXRWMwWjBsRFFXZEpRMEZuU1VkYWNHSnRSbk5pU0d0blpYbENjRnBwUVc5YVUydG5aRWRvZVdJelkyZGFVelZzWTI1S2RtTnFjMmRtVm5oNVdFYzBaMGxEUVdkbVZuaDVXRWMwWjBsRFFXZGpiVll3WkZoS2RVbEhSbmxQTVhoNVdFYzFPVmhJU21OaWJIaDVXRWMxYkdWSVFuWmpibEZuV201V2RWa3pVbkJpTWpSbldERTVlbU5JU214WlYxRnZTMU5DTjFoSVNtTmlhVUZuU1VOQ2JXSXpTV2RMU0Zwb1kybENhR05wUVRsSlJuUmtURU5DY0VsRU1HZE5SSE5uWVZOQk9FbEhSbmxhTTFaMFdsYzFNR041TlhOYVZ6VnVaRWRuTjBsSGEzSkxlV3hqWTJ4NGRVbERRV2RKUTBGblNVTkNhR05wUVRsSlIwWjVURzFPZG1KdFRtaGtRMmhtV0ROS2JGbFhVVzlaV0VwdVpGY3hiR0p1VW5wWE1teGtTMU5yTjFoSVNtTmlhVUZuU1VOQ2VWcFlVakZqYlRSbldWaEpOMWhJU21OaWJqRmpZMng0ZFZoSVNtTmliVlkwWTBjNWVXUkRRbTFrVnpWcVpFZHNkbUpwUW1aWU0wNTNZMjFXYUZwRlJubGpiVVkxWTNsbmNFbElkR05qYkhoMVNVTkJaMGxIV25aamFVRnZaRzFHZVVsSVRXZFFVMEYzVEVOQ2NFbEVNR2ROUTNkbllWZDNaMUJUUW1oamJXUXhZbGRXZFdSSVRYVmlSMVoxV2pOU2IwOTVRbkJKUkhkbllWZDNOMGxIYTNKTGVXdG5ZM2xCY2xCVFFtaGpiV1F4WWxkV2RXUklUbUpoVmpCMVlrZFdkVm96VW05UE1YaDVXRWMwWjBsRFFXZGFiVGw1U1VOb01sbFlTV2RqYVVFNVNVVkdlV050UmpWTFNFMXdURU5DY2tsRU1HZE5RM2RuWVZOQk9VbEVRVGRKUjJ0blVFTkNjR0pFYzJkaFUzTnlTMVo0ZVZoSE5HZEpRMEZuU1VOQlowbEhXblpqYVVGdlpHMUdlVWxIUldkUVUwSm9ZMjFrTVdKWFZuVmtTRTVpWVZZd2MwbEhiMmRRVTBGM1RFTkNjV0pEUVRsSlIwVjFZa2RXZFZvelVtOVBlVUp4U1VSM1oyRnRkemRKUjI5eVMzbDNaMkY1YzNKTFZuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbmxYTW5Sa1NVUXdaMWxXZEhGWVZIUmpZMng0ZFVsRFFXZEpTRXBzWkVoV2VXSnBRbmxQTVhoNVdFYzFPVTh4ZUhsWVJ6VmpZMng0ZFZwWWFIZGlNMG93U1VkYU1XSnRUakJoVnpsMVNVWTVabGxZWkdoaFdGRnZaR2xyWjJVeGVIbFlSelJuU1VOQloyTnRWakJrV0VwMVNVaFNiMkZZVFdkaFZ6VjZaRWRHZFZreVZuWmFhVUptV0RKR00xbFhiREJKUkRoblMwaFNiMkZZVFhWa2FVRTVTVWhaYzBsSVVtOWhXRTF3U1VSdloySnRWak5KUmpsbVdWaGthR0ZZVVc5a2FXczNXRWhLWTJKdU1XTmpiSGgxV0VoS1kySnRWalJqUnpsNVpFTkNiV1JYTldwa1IyeDJZbWxDWmxneVJucGxWelZxVWpKV2RWcFlTbWhrUnpsNVMwaFNiMkZZVGtKamJXTnpTVVk1YUdOdFpERmlWMVoxWkVoTmMwbEhaR3hpYlZaNVdWaFNkbU5wYTJkbE1YaDVXRWMwWjBsRFFXZGhWMWxuUzBOR1ZHVlhNV2xpTW5kMVdWaE9OV0p0VGtwa1IxWjVXVmhTZG1OcGEyZGtSMmg1WWpOaloySnRWak5KUmxJMVkwZFdSbU51U25aamFXaGpTV3hPTldKWFNuWmlRelZvWXpOc2RWa3diREJhV0Vwb1pFYzVlVWxIYkhwSlJ6VjJaRU5DYTFwWFduQmliVlpyVEd4M2FVdFVkR05qYkhoMVNVTkJaMGxJV21oamFVSnVTVVF3WjFveVZuVmFXRXBvWkVjNWVVeHRSbmRqUjNnMVMwaFNiMkZZVGtKamJXTnpTVVk1YUdOdFpERmlWMVoxWkVoTloyWklkMmRYTVRCd1RFTkNjRXhEUW5oSlJEQm5WekV3TjFoSVNtTmlhVUZuU1VOQ2VWcFlVakZqYlRSbllWTkJPVWxJZERsTVEwSXlXbGhLYVV0R2QybGliVlkwWkVaM2FVdFRkMmRrYlZaNVdXbG9ZMGx1VW05amJUa3pXRU5KY0V4RFFqSmFXRXBwUzBaM2FXTnRWakJrV0VwMVdFTkpjRXhEUW5CWE1VNDFZbGRLZG1KRE5XaGpNMngxV1RCc01GcFlTbWhrUnpsNVdGTkJPVWxIV2pGaWJVNHdZVmM1ZFVsRFozQkpTSE5uWTIxV01HUllTblZKU0ZKdllWaE5OMGxJTUhOSlIyczNXRWhLWTJKcFFXZEpRMEp0WkZjMWFtUkhiSFppYVVJeVdsaEthVXRITkhCSlNITm5ZVmRaWjB0SFpHSmliREJ3U1Vkc1ltSnNNR2RRVTBKdFpGYzFhbVJIYkhaaWFVRnZaR2xyWjJWNVFubGFXRkl4WTIwMFoySnRWak5KUmtKNVlqSXhjR015Vlc5YWJsWjFXVE5TY0dJeU5HZExSMFZ6U1VkSmNFbEljMmRqVXpWM1pGaE9iMHRHZEhWTVEwSXlURU5DYUV4RFFtbFlVMnRuVUdsQmVFbEllRGhKU0Vwc1l6TldkRnBUYUhWTVEwSXlTMVJ6WjJaVGF6ZEpTREEzU1VneFkyTnNlSFZKUTBGblNVZGFNV0p0VGpCaFZ6bDFTVWhLYkdNelZuUmFVMmgxVEVOQ01rdFRRamRKU0ZKNVpWTkNOMGxJVGpCYVdFRnZXakYwZFZoVGFESkxVMnMzU1Vnd1oxa3lSakJaTW1kblMwZFZjRWxJYzJkak1sWXdaRWQ0YkV0SVJtSk5SakZpVFRFd2MwbEhWWEJQZVVJNVNVZ3hZMk5zZUhWSlEwRm5TVWRhTVdKdFRqQmhWemwxU1VoT01GcFlRVzlqYVd0blpYbENlVXh1V21oaVNGWnNTVWRzZFdNelVtaGliVTVzWWpKWloxZ3hPV2hrTWtad1pFTkJMMGxHUW5saU1qRndZekpWZFdOdFZucGlNbmd5V2xOb2VVeHVXbWhpU0Zac1RHNVpjRXh1VW05YVZ6UnZXbTVXYzFwdGJITmlRM2RuWTIxV2NWcFhUakJMVTBFMlNVaE9iR1JJVW5OYVUyaDRWM3BDWkZkNlNtUk1RMEo1UzFSeloyWldlSGxZUnpSblNVTkJaMXB1Vm5WWk0xSndZakkwWjFwdVZuTmFiV3h6WWtOb01sbFhlREZhVTJ0blpYbENlVnBZVGpGaVYxVnZXRU5LZFZwWWFEQllRMGx6U1VoYWFHSklWbXhMVkhOblpsWjRlVmhITkdkSlEwRm5XbTVXZFZrelVuQmlNalJuWTIxV2NWcFhUakJMU0Zwb1lraFdiRXRUUWpkSlNFcHNZek5XZEZwVGFHTkpibEp2WTIwNU0xaERTWE5KU0Zwb1lraFdiRXRVYzJkbVZuaDVXRWMwWjBsRFFXZGFibFoxV1ROU2NHSXlOR2RqTWxZd1pFZDRiRXRIV1hOSlNGbHdTVWh6WjJGWFdXZExSMWx2WkdscmMwbElSWFZqTW1od1dtNVJiMHRUZDJkalV6VnpXbGMxYm1SSFozQkpTRXBzWXpOV2RGcFRhSGhYZWtKa1YzcENaRXhEUW5oWGVrSmtWM3BHWkV0VWMyZG1Wbmg1V0VjMU9WaElTbU5pYkhoNVdFYzFiR1ZJUW5aamJsRm5XbTVXZFZrelVuQmlNalJuV0RFNWFHTXpiSFZaTUZKc1lrZFdibGxZVW5aamFXaDJTMU5DTjFoSVNtTmlhVUZuU1VOQ01sbFlTV2RoVTNkblkwUjBZMk5zZUhWSlEwRm5TVWhLYkdSSVZubGlhVUp3U1VRd1oyVXpNSE5KU0Zwc1kyMUpiMWhEU25WYVdHZ3dXRU5KY0V4RFFqSmFXRXBwUzBaM2FXUkhhSGxpTTJSalNXbDNaMXB1Vm5WWk0xSndZakkwWjB0SFZYQkpTSE5uWkVkb2VXSXpZMmRhVkhOblpsTnJjMGxJV214amJVbHZXRU5LZVZwWVVqRmpiVFZqU1dscmMwbEhiR0pWTTJ4MFdXMDVjMHh0YkRCYVdFcG9aRWM1ZVZoVFFUbEpSMW94WW0xT01HRlhPWFZKUTJkd1NVaHpaMk50VmpCa1dFcDFTVWhTYjJGWVRUZEpTREJ6U1Vkck4xaElTbU5pYVVGblNVTkNiV1JYTldwa1IyeDJZbWxDTWxwWVNtbExSelJ6U1VkWmNFbEljMmRoVm5SMVdGTkJPVWxIT1dKaWJEQm5VSGxDYldSWE5XcGtSMngyWW1sQmIyUnBhMmRsZVVKNVdsaFNNV050TkdkTFNFRm5VRk5CYUdORGEyZFFlVUkzU1VoYWFHSklWbXhQYVVKbVdESkdNMWxYYkRCTFJ6bGlZbXd3YjJScGEzQk1RMEpyWWpJMWJFOXBRblZKUkRBNVVGTkNZMGx1U214a1NGWjVZbXgzYVVsSU1HZFBhVUp0U1VRNFoxcHBhREpMVTBFMlNVaFpOMGxJTUdkUGFVSnRUM2xDT1ZoSVNtTmliakZqWTJ4NGRWaElTbU5pYlZZMFkwYzVlV1JEUW0xa1Z6VnFaRWRzZG1KcFFtWllNa1o2WlZjMWFsWnRSbk5rVjFaNlMwYzRjRWxJZEdOamJIaDFTVU5CWjBsSGJHMUpRMmRvVlROc2RGbHRPWE5NYlVaNlpWYzFhbE5ZVW14amJVWXdZak5KY0VsSVVtOWpiVGt6U1VjMWJHUjVRbFZsV0VKc1VsaEtlV0l6U1c5WVEwcFVaVmN4YVdJeWQzVlpXRTQxWW0xT1NtUkhWbmxaV0ZKMlkybENjR041UW5WaU0xRm5Xa2RXYldGWE5XeGFRelZqU1dsck4xaElTbU5pYVVGblNVTkNNbGxZU1dkaVUwRTVTVWM1WWxVemJIUlpiVGx6VEcxR2VtVlhOV3BUV0ZKc1kyMUdNR0l6U21STVEwSndUekY0ZVZoSE5HZEpRMEZuWTIxV01HUllTblZKUnpCblVIbENkRXh0VG1oaVIzZHZZbmxyWjA5cFFXOWllVUU1U1VoU05XTkhWblphYVVKbVdETmFhR0pJVm14amVVRTVVRlF3WjFoRFNtMWtWelZxWkVkc2RtSnNkMmxKUkRobldERTVNbGxYZURGYVdFMXZZbmxyWjA5cFFuWlhNVTQxWWxkS2RtSkROWEJrUjFaNVdWaFNkbU5zTUc5TFUzZG5ZVk5CT1VsSWREbE1RMEl5V2xoS2FVdEdkMmxpYlZZMFpFWjNhVXRUZDJka2JWWjVXV2xvWTBsdVVtOWpiVGt6V0VOSmNFeERRakphV0VwcFMwWjNhV050VmpCa1dFcDFXRU5KY0V4RFFuQlhNVTQxWWxkS2RtSkROV2hqTTJ4MVdUQnNNRnBZU21oa1J6bDVXRk5CT1VsSFdqRmliVTR3WVZjNWRVbERaM0JKU0hOblkyMVdNR1JZU25WSlNGSnZZVmhOTjBsSU1ITkpSMnR3VHpGNGVWaEhOR2RKUTBGbldtNVdkVmt6VW5CaU1qUm5aRzFXZVZscGFIVkxVMEkzU1Vkc1ltSnNNR2RRVTBKMlZ6STFaRWxEV1cxSlIxb3hZbTFPTUdGWE9YVkpRMmd5UzFOQ04wbElTbXhrU0ZaNVltbENkVnBZWTJkVlNFcDJZbGRzZWxwVGFHMWtWelZxWkVkc2RtSnBRVzlqYlZaNllqSjRNbHBUZDJkamJWWnhXbGRPTUV0VFFqZEpTRmxuVUZOQ2RsY3lOV1JMU0Zsd1RFTkNlbHBZVWpCaVIxVnZZMjFXZW1JeWVESmFVM2RuWTIxV2NWcFhUakJNUTBJeVRHMVNkbUp0VlhOSlNGbDFaRzFHYzJSWFZYQlBlVUk1UzFSeloyWlVjMmRtVm5oNVdFYzBaMGxEUVdkYWJsWjFXVE5TY0dJeU5HZGpNbFl3WkVkNGJFdElTbXhqTWpselpHMVZjMGxJU214aGJWWnFaRU4zWjFwRGQyZGthV3RuWlhsQ1VXTnRPWFJoV0U1c1RHNUtiR015T1hOa2JWVnZaR2xyZFdSSGFHeGlhV2h0WkZjMWFtUkhiSFppYVdneVMxTkNOMGxJU214ak1qbHpaRzFWYjJWNVFqSlpWM2d4V2xSdloyUnBkMmRhUnpsMVdsUnZaMXBEUWpsTFZITm5abE4zWjJOdFZuRmFWMDR3UzFSeloyWldlSGxZUnpVNVdFaEtZMkpzZUhsWVJ6VnNaVWhDZG1OdVVXZGFibFoxV1ROU2NHSXlOR2RZTVRsMFdWZDBiRlpIVm5SalIzaG9aRWRXVUZsdGNHeFpNMUZ2V1RJNWRtRXlWbXRNUTBKNVdWaGpjRWxJZEdOamJIaDFTVU5CWjBsSGJHMUpRMmhRV1cxd2JGa3pVWFZhUjFadFlWYzFiRlZJU25aalIxWjVaRWhyY0VsSWMyZFVNa3B4V2xkT01FeHRVbXhhYld4MVdsWkNlV0l6UW14amJsSTFTMGRPZG1JeWRHeGFRM2RuV0VOS2VWbFlaR05KYVhkblpYbENNbGxYZURGYVZHOW5ZMjFHTTBsSU1IQlBlVUk1U1VkV2MyTXlWV2RsZVVKcVlqSTVjbHBYVVhWamJVWXpTVVF3WjJOdFJqTlBlVUk1V0VoS1kySnBRV2RKUTBKNVdsaFNNV050TkdkWk1qbDJZVEpXYTA4eGVIbFlSelU1VHpGNGVWaEhOV05qYkhoMVdsaG9kMkl6U2pCSlIxb3hZbTFPTUdGWE9YVkpSamxtWVZjeGQySXpTakJWTTFKb1kybG9kR0l5VVhCSlNIUmpZMng0ZFVsRFFXZEpSMnh0U1VOb2RHSXlVV2RLYVZsbllsYzVhMHhzT1daYVdFNU9ZakpTTVdKSFZYQkpTRXBzWkVoV2VXSnBRblJpTWxFM1dFaEtZMkpwUVdkSlEwSXlXVmhKWjJOdFZucGtWM2d3U1VRd1oyVXpNRGRZU0VwalltbEJaMGxEUW5CYWFVRnZZbGM1YTBsRFJUbEpSelV4WWtkM2NFbEhXblpqYVVGdlpHMUdlVWxIYzJkaFZ6Um5ZbGM1YTB0VFFuQmFhVUZ2VkRKS2NWcFhUakJNYldob1l6QTVNMkpzUW5saU0wSnNZMjVTTlV4dFRtaGlSM2R2WWxjNWEweERRbkpMVTJ0blkyMVdlbVJYZURCWE1uUmtTVVF3WjJKWE9XdFhNblJrVHpGNGVWaEhOR2RKUTBGblkyMVdlbVJYZURCTWJWSnNXbTFHTVdKSVVXZFFVMEowWWpKUk4xaElTbU5pYVVGblNVTkNlVnBZVWpGamJUUm5ZMjFXZW1SWGVEQlBNWGg1V0VjMU9WaElTbU5pYkhoNVdFYzFiR1ZJUW5aamJsRm5XbTVXZFZrelVuQmlNalJuV0RFNWNHSllRblpqYmxKRldsZGFhR1JYZURCTFJ6RjJXa05yWjJVeGVIbFlSelJuU1VOQloyTnRWakJrV0VwMVNVTm9kR0l5VVdkS2FWbG5ZbGM1YTB4c09XWmFXRTVPWWpKU01XSkhWWEJKUkRobllsYzVhMGxFYjJkbGVVSnJXbGRhYUdSWGVEQlBhVUowWWpKUloyWlVkR05qYkhoMVpsWjRlVmhITldOamJIaDFXbGhvZDJJelNqQkpSMW94WW0xT01HRlhPWFZKUmpsbVdUSjRhR016VGxGamJXd3lXVmhTYkZKdGJHeGlSMUpJV2xoUmIyTnRWbXBhVjJ3eVdsaEpjMGxJUW5saFdGcG9aRWRXVGxsWVFYQkpTSFJqWTJ4NGRVbERRV2RKUjJ4dFNVTm5hR05JU25Ca2JVWXdXbFV4YUdORE5XOVpXRTF2WTIxV2FscFhiREphV0Vsd1MxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZGtSMmg1WWpOaloySnRWak5KUmxJMVkwZFdSbU51U25aamFXaGpTVzFHTUdSSFZuUmpTRkpzV2tOQ01HSjVRbTVhV0ZGblkwaEtjR1J0UmpCYVUwSnRZVmRXYzFwRFFuWmlhVUoxWWpJMGRHRlhOWHBrUjBaMVdUSldZMGxwYXpkWVNFcGpZbWxCWjBsRFFqbFlTRXBqWW1sQlowbERRbmxhV0ZJeFkyMDBaMk5JU25Ca2JVWXdXbFV4YUdORE5XNWFXRkZ2WTIxV2FscFhiREphV0Vsd1R6RjRlVmhITlRsWVNFcGpZbXg0ZVZoSE5XeGxTRUoyWTI1UloxcHVWblZaTTFKd1lqSTBaMWd4T1dwaVIwWjZZekZDZVdGWVdtaGtSMVpIWVZkV2MxcEdUbXhrUTJoNVdsZE9iR0ZZV214amFYZG5ZMGhLY0dSdFJqQmFWVEZvWTBOM1oyUnRSbk5rVjFWd1NVaDBZMk5zZUhWSlEwRm5TVWRzYlVsRFoyaGpTRXB3WkcxR01GcFZNV2hqUXpWdldWaE5iMk50Vm1wYVYyd3lXbGhKY0V0VFFqZFlTRXBqWW1sQlowbERRV2RKUTBGblpFZG9lV0l6WTJkaWJWWXpTVVpTTldOSFZrWmpia3AyWTJsb1kwbHRSakJrUjFaMFkwaFNiRnBEUWpCaWVVSjZXbGhSWjJOSVNuQmtiVVl3V2xOQ2JXRlhWbk5hUTBKMlltbENkV0l5TkhSaFZ6VjZaRWRHZFZreVZtTkphV3MzV0VoS1kySnBRV2RKUTBJNVdFaEtZMkpwUVdkSlEwSjNZMjFzTWxsWVVteFVWMFozVEc1T2JHUkRhSGxhVjA1c1lWaGFiR05wZDJka2JVWnpaRmRWY0U4eGVIbFlSelJuU1VOQloyTnRWakJrV0VwMVNVaGFhR0pJVm14UE1YaDVXRWMxT1ZoSVNtTmlhVWx6U1drNGNVdHNlSFZKUTI5blVVZDRjRmt5Vm5Wak1sWmpZbWxCY1VsRlRuWmpTR3g1WVZka2IyUkRRVzlaZVd0blRXcEJlRTU1UWxWaFIxVm5WVWM1YzJWWE1XeGphVUpSWTIwNWNWcFhUakJKUlVZeFpFZG9kbU51VFhWSlJVWnpZa05DZVdGWFpHOWtTRTFuWTIxV2VscFlTakphVjFGMVdFYzBaMHRwUWxWaFIyeDZTVWRPZGxwSFZXZGlWMFkxU1VjNWRXSklhMmRaYlZWblpGaE9iRnBEUWpGaWJWSnNZMmxDTUdGSFZXZFJiRTVGU1VoT01HVlhlR3hKUjNod1dUSldkV015VldkYWJUa3hZbTFSWjFsWVVtTmlhVUZ4U1Vkb01HUklRVFpNZVRsM1lqSjROV0pYVm5sTWJXUndaRWRvTVZscE5YQmllVGxOVTFWT1JsUnNUa1pNYmxJMFpFWjRkVWxEYjJkV1IyaHNTVWRPZG1KWVFuTmFXRkpzU1VoT2JHUkRRblphYVVKb1pGaFNiMkl6U25wSlJ6Rm9aVk5DYVZwVFFtMWlNMVoxV2tOQ2FHUkdlSFZKUTI5bllVaFNNR05FYjNaTU0wSjJZa2hzZEZwWVNYVmFNbXd3WVVoV2FVeHRiSFpNTUVaV1ZrVm9VRlZzVFhWa1NHZ3dXRWMwWjB0cFFsVmhSMVZuV1RJNWRHTkhlR3hrUjFWbll6SldNRWxIT1cxSlIwNTJZbTVTZVdGWFNqRmtSemw1WTNsQ2RGbFlhMmRaYlZWbldtMDVNV0p0VVdkWldGSmpZbWxCY1VsSGFEQmtTRUUyVEhrNWQySXllRFZpVjFaNVRHMWtjR1JIYURGWmFUVndZbms1UkZRd05WVlZhMnhEVmxaU1VGVnNUWFZrU0dnd1dFYzBaMHRwUWtSaU1sSnNTVWRTY0dNelVubGhWMG94WkVkV2EwbEhTalZKUldSMllqSmtjMXBUUW1oamVVSjNXVmhLTUVsSE9XMUpTRkp2V2xOQ2QySXllRFZpVjFaNVNVaENlV0l5Y0d4Wk0xRm5ZVmhOWjFsWGVIcGlNWGgxU1VOdloyTXpWbWxoYlZacVpFTkNNR0o1UW1oaWFVSm9Xa2RTY0dSSGJIWmliVVp6U1VWc1VVbElTbkJhTW1nd1kzbENibU50Um5Wa1EwSnRZak5XZFZwRFFtaGtSbmgxU1VOdloyRklVakJqUkc5MlRETkNkbUpJYkhSYVdFbDFXakpzTUdGSVZtbE1iV3gyVERGQ1FsWkZWazlXUmsxMVpFaG9NRmhITkdkTGFUbGpZbWs0Y1V0c2VIVkpRMjluVmtoS01WcFRRbkJhYVVJd1lVZFZaMWt6Vm5wa1J6bDBTVWRXYzFwWE1XeGlibEo2U1VoQ2RtSkliRzFoVjNoelNVZHNla2xIYkhWSlNGWjZXbE0xWTJKcFFYRk1NWGgxV2xob2QySXpTakJKUjA1MlltNU9NRWxIYkhwUk1GWlJZako0TlZwdGJITmlRMEU1U1VoU05XTkhWblphYVVJellWYzFhMkl6WTJkSlZEQTVTVU5rTVdKdFVteGFiV3gxV2xkUmJrbERXVzFZUnpSblNVTkJaMlF5YkhWYVJ6a3pURzFPTVdNelVuWmlWVlp6V2xjeGJHSnVVbnBKUTBVNVNVYzFNV0pIZDJkS2FWcGpZbWxCWjBsRFFqTmhWelZyWWpOamRWa3pWbnBrUnpsMFVsZDRiR0pYVm5Wa1NFMTFZMGM1YzJWWFduQmlSM2hZWTIxR2QxSnRlREZqTW1oRVdWZDRjMWx0Um1waGVVRm9VRlF4WTJKcFFXZEpRMEZuU1VOQloyUlhOV3RhVjFwd1ltMVdhMDh4ZUhWTWVXOXhXRWMwWjB0cFFsTmFXRUpvWTIxV2RXUklUV2RpYlRscldsaE5jMGxJVGpCWldFb3dZVmMxYmtsSFdubGlNakJuV1VoT01GbFlTakJaUTBGdllWYzFhbUpJVm5waFdGcHNTMU5DTUdKNVFtZGFWelZyV1VOQmIxcFlhR3BpU0ZaNllWaGFiRXRUZUdOaWFVRnhTVWRzZFdSSE9HZFpWelYyWkVkb2JHTnBRbXBpTWpVd1dWZHNkVnBZU1dkTFIwNTJaRmQ0YTBsSFNteEpTRkp2V2xOQ2VsbFhNV3hKUjA1MlltNVNhR0ZYTld4amFXdHpTVWRLYkZwdE9YbGFVMEpuV1cxV2JXSXpTbXhaUXpSblUxZGFZMkpwUVhGSlIwSnBXbGRhZG1OdFZtZEpSMng2U1VjMU1XSkhkM05KUjJ3d1NVZEdkMk5IVm5WYVNFMW5aRWRvYkVsSE5YWmFSMVo2U1VoU2RrbElVbTlhVTBKcVlqSTFNRmxYYkhWYVdFbDFXRWMwWjB0cE9XTmliVlkwWTBjNWVXUkRRbXBpTWpWNlpFTkNlVnBZUW1oamJWWjFaRVUxZGxwSFZucEpSREJuUzBkT2RtSnVVbWhoVnpWc1kybDNaMk16VW1oamJsRnpTVWRXZFZwRFFUbEpSelV4WWtkM2MwbEhTbXhhYlRsNVdsTkJPVWxITlRGaVIzZHdTVVF3SzBsSWRHTmlhVUZuU1VOQ00yRkhiSE5hVTBGdll6TlNhR051VVdkSlZEQTVTVWRXZFZwRGEyZGxNWGgxU1VOQlowbERRV2RKUTBKcVlqSTFlbVJEUW5WSlJEQm5Zek5TYUdOdVVYVmliVlkwWkVaT2NGbHRlSEJpYldNM1dFYzBaMGxEUVdkSlEwRm5TVWRPZG1KdVVtaGhWelZzWTJrMWNHSnVUbXhqYmxKRFdsZGFkbU50Vlc5ak0xSm9ZMjVSYzBsSFNteGFiVGw1V2xOck4xaEhOR2RKUTBGblNVTkJaMGxJVGpCWldFb3dTVVF3WjJKcWRHTmlhVUZuU1VOQ09WaEhOVGxQTVhoMVRIbHZjVmhITkdkTGFVSlRXbGN4ZG1SdFZucEpSelYyV2tkV2VreERRbnBrUjBaNVpFZHNkVnA1UW0xamJUbDBTVWRDZW1SSFJubGtSMEZuUzBkc2RWa3llREZqTW13eVdsTnJaMlJIT0dkWlIxWjFXa2RCWjB0SFZqUlpNbmd4WXpKc01scFRhM05KUjFwNVlqSXhZMkpwUVhGSlIwSnFZakkxTUZsWGJIVmFXRXBuVEd4NGRVbERiM1pZUnpWc1pVaENkbU51VVdkWk1qbDFZek5SWjJOdFZuUmlNMXBzVkcwNWExcFlUV2RRVTBGdldUSTVkV1JIUm5CaWJWWjVURU5DZW1SSFJubGtRM2RuV2xjMWEwbEVNR2RpYmxaellrTnJaMUJVTkdkbE1YaDFTVU5CWjBsSVpHOWhWM2hzU1VOb2VtUkhSbmxrUTBGb1VGUXdaMXBYTld0TFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VkT2RtSnVUakJKUnpSblVGTkNlbVJIUm5sa1F6VjFXbGhvTUZVeWJHbGlSMngxV25wMFkySnBRV2RKUTBGblNVTkJaMWt5T1hWa1IwWndZbTFXZVV4dVNteGlWemt5V2xWT2IyRlhlR3RMU0U0d1dWaEtNRXRVZEdOaWFVRm5TVU5CWjBsRFFXZGpNMUpvWTI1UloxQlRRblZQTVhoMVNVTkJaMGxJTVdOaWJqQTNXRWMwZGt4NVRXZGpNamt4WTIxT2JGUlhSbmRqUjJ4MVdqRldVMVJFTVd0aU1qQjFZVzVOZFdKWFJuZEphWGRwVEhsdmNWaEhOR2RMYVVKQllrZHNhbHBYTlhwYVZuaDFTVU52WjFFeU9YZGxXRXB3V2pKb01FbERhR3BMVTBGNVRVUkZNMGxHVW05YVUwSlJZako0TldKWFZubEpSa0o1WWpKd2JGa3pVV2RSV0ZZd1lVYzVlV041TkdkUlYzaHpTVWhLY0ZveWFEQmplVUo1V2xoT2JHTnVXbXhhUXpWalltbEJjVWxHVW05aFdFMW5XVEk1YTFwVFFuUlpXR3RuWWpJMWMyVlRRbWxhVTBJeFl6SldhMGxJVm5WYVIxWjVTVWhTYjFwVFFrTlZNRkZuWXpOU05XSkhWV2RpUjJ4cVdsYzFlbHBUUW0xaU0xWjFXa05DYUdSR2VIVkpRMjluWVVoU01HTkViM1pNTTBKMllraHNkRnBZU1hWYU1td3dZVWhXYVV4dGJIWk1NSGhLVVRCV1QxVXdWWFZrU0dnd1dFYzBaMHRwUWxWaFIxVm5XVEk1ZEdOSGVHeGtSMVZuWXpKV01FbEhPVzFKUjBZeFpFZG9kbU51VFdkaVYwWTFTVWRLYkVsSFduWmtWelZyU1VkR01GaEhOR2RMYVVKdlpFaFNkMDlwT0haalJ6bHpaVmN4YkdOcE5XNWhXRkp2WkZkSmRXRlhPSFpSVmxaVlUwVTVVMVY1TlRCbFNGSmpZbWxCY1VsR1VtOWFVMEpxWWpJeGQySkhWakJhVTBKNldsaFJaMkl5V1dkWk1qbDFaRWhLY0ZsdVZqQmlNMHA2U1VjeGFHVlRRbWxhVTBKdFlqTldkVnBEUW1oa1JuaDFTVU52WjJGSVVqQmpSRzkyVEROQ2RtSkliSFJhV0VsMVdqSnNNR0ZJVm1sTWJXeDJUREJPVUZSc1VsTlRWVXBXVmtVNVUxVjVOVEJsU0ZKalltbEJjVWxGVG5aYVIxVm5Xa2RzZW1SSVNuQlpibFl3V2xkUloxbHVhMmRTTWpsMldqSjRiRWxIUm5wSlNFSm9ZMjVSWjJJeVdXZGtSMmhzU1VoQ2RtSkliSFJhV0VsblkwaEtkbUZ0Vm1wa1EwSndZM2xDYUdKSVRuWllSelJuUzJsQ2VtUlhTbkZhVjA0d1NVaFNka2xIUm5WSlIwWnJXa2RzTUdGWE9YVlpWM2RuVTFaQloyTnRiRzVoU0ZKNlNVZGtlVmxYTlRCSlIxcDJaRmMxYTBsSFJqQllSelJuUzJsQ2IyUklVbmRQYVRoMlkwYzVjMlZYTVd4amFUVnVZVmhTYjJSWFNYVmhWemgyVlVWR1ZWSlZOVlZWZVRVd1pVaFNZMkpwUVhGTU1YaDFUSGx2Y1ZoSE5HZExhVUpDWW1sQ2JHVklRbmxhV0U1NllWYzVkVWxITVdoamJYUnNZMmxDTTJGWVVtOUpSMVowV1cxV2ExcEhWbXRKU0ZaMVlWaEdNVnBUUW5KYVdHdG5aRWM0WjFsWVduWmhWMUZuV1RJNWMySkhiSHBoVnpsMVNVaGtjR1JIYUdOaWFVRnhTVWhDZG1NelRuQlpiWGhzU1VoU2JHVklVV2RoVnpSblpFZFdkR05IZUdoa1IxWjZUR3g0ZFVsRGIzWllSelZzWlVoQ2RtTnVVV2RaTWpsMVl6TlJaMkpYUm5saE1sWjVTVVF3WjFsSWREZGlSMnd3VEZOU04xVXpVbmxoVnpWdVMwVXhhR1JIWjNWamJVWjFXa2M1ZEV0RGEzQk1iazV6WVZkT2JFdEVTWEJtV0RFNVdVUjBZMkpwT0hGTGJIaDFTVU52WjFGWE5HZGFXR2gzWTIxV2VtTXliSFppYVVKMFdWaEtjbHBZU1dka1dFNXNXa05DTUZwWWFEQk1XRUoyWXpKc01HRlhPWFZqZVhkbllsaFdjMlJIYTNSWmJXeDFXa2RzZFZwNVFtaGtTRko1WVZkS01XUkhWbnBNUTBKb1ltMVNZMkpwUVhGSlIwWXdaRWhLY0ZsdVZqQmFXRTFuWkRKc01HRkRRblJaV0VweVpGaEJkR0pIYkhKYVUwSXdXbGhvTUVsSVdtaGlTRlpzWTNrMVkySnBRWEZNTVhoMVdsaG9kMkl6U2pCSlIwNTJZbTVPTUVsSE5YWmFSMVpPV1ZoS2NscFlTV2RRVTBKblVFTkZkRXhUVWpkaVYwWjVZVEpXZVdaVE1IUlFiVUUzV0VjMWJHVklRblpqYmxGbldUSTVkV016VVdkaVYwWjVZVEpXZVZWdFZtNWFXR2RuVUZOQ2RWcFlZMmRWYlZadVVsaG9kMHRIUVd0bE1qRm9ZMjEwYkdOdU1UaEtTSFIxWWpKU2JGUlhSbmxoTWxaNVpsZEJjRTh4ZUhWTWVXOXhXRWMwWjB0cFFsUmtWMXB0WVZobloxbFlRbmRhVnpWcldsZFJaMlJIT0dkWlYzaHpTVWRLZG1SWE5XdEpSMFl3WkVoS2NGbHVWakJhVTBKMVdWY3hiR041TldOaWFVRnhUREY0ZFZwWWFIZGlNMG93U1VkT2RtSnVUakJKUjBwMlpGYzFhMUZZVWpCamJXeHBaRmhTYkZVelZtMWFiV3cwU1VRd1owcDVVbk5oV0ZGclNucDBZMkpwT0hGTGJIaDFTVU52WjFGWE5HZGtXRUpyV1ZoU2FGbHRlR3hKUmxKc1lsaENjMWxZVW14SlNGSnZXVmhSWjJSSVNtaFpNblI2U1VoU2IxcFRRbk5pTWs1b1pFZHNkbUpwUW5aYWFVSnJaVmMxYUdKWGJHcEpTRUpvWTI1U2VreHNlSFZKUTI5MldFYzFiR1ZJUW5aamJsRm5XVEo0YUdNelRXZFdSMVowWTBkNGFHUkhWV2RsTVhoMVNVTkJaMGxIVG5aaWJrNHdZMjVXYW1SSE9YbExTRXBzWXpOV2MyUkRkMmRhVjNoc1lsZFdkV1JEYTJkbE1YaDFTVU5CWjBsRFFXZEpRMEl3WVVkc2VreHVRbWhqYmxKNlNVUXdaMWN4TURkWVJ6Um5TVU5CWjBsRFFXZEpTRkp2WVZoTmRWcFhlR3hpVjFaMVpFTkJPVWxIVm5OYVZ6RnNZbTVSTjFoSE5HZEpRMEZuU1VOQlowbEhUblppYms0d1NVYzFkbHBIVm5wV1J6bFRXbGN4ZG1SdFZXZFFVMEppV0ZSMFkySnBRV2RKUTBGblNVTkJaMWt5T1hWak0xRm5Zek5TYUZreWMyZFFVMEppV0ZSMFkySnBRV2RKUTBGblNVTkJaMHg1T0dkU1YxSnVXbE5DZFZwWFZtdGplVUpvWWtkM1owNURRbmRaV0Vwb1lsZFdNRnBZU25wSlNFSjVXbGhPYkdKdVVUZEpSV3hHVFZSRloySnRWbXhhU0UxblRUTkthMGxJUW1oamJVWjBXbGhTYkdOcFFqQmllVUpwV2xOQ2RXUlhlSE5ZUnpSblNVTkJaMGxEUVdkSlIwNTJZbTVPTUVsSVpHaGlSM1JzWTJsQk9VbEhVblpaTTFaMFdsYzFNRXh0VG5sYVYwWXdXbFpTZVZwWFZsaFpWM2h5V2xoSmIxcFhlR3hpVjFaMVpFTTFhbUl5TlRCYVZ6VXdURU5CZUUxNlRXZE1lVzluVkcwNWExcFZXbkJpU0ZKc1kyazFWRk5GT1ZoWU0zUkdWRVZXVGxKVk5WVm1SVTVRVkZVeFJsUnNVamhXUlZaWlZrZ3daMHRwT0hOSlJ6VXhZa2QzYzBsSFdtaGlTRTVzUzFSMFkySnBRV2RKUTBGblNVTkJaMHg1T0dkVE1sWnNZMGhOWjJSSVNtaFpNbk5uWWpKWloyUkhhR3hKUjNob1l6TlJaMkZYTld0YVdHZG5XVmhPZW1JeVRuQlpXRkpzV2tOQ00yRllVbTlKUjBWblkwZEdlV1JETkdkV01sVm5aRWhLTlVsSVVuWkpSMUpzWWtkV01GcFdlSFZKUTBGblNVTkJaMGxEUVhaTWVVSXhZbTAxYkZreVZucGpNa1o1WlZOQ2RXSXlVbXhqZVhkbldXNVdNRWxJWkd4SlJ6VnNaRzFXZVVsSVpHaGlibEZuWkVjNFoxbFlUbnBpTWs1d1dWaFNiRWxJVWpOaWVVSnJZVmRhYlZwWVNteGlibEZuWTBkR2VXUklUbU5pYVVGblNVTkJaMGxEUVdkTWVUaG5aRWM0WjJSSGFHeEpTRTVvWWxkVloyRlhOV3RhV0dkMVNVWlNiMXBZYTJkaVdGWjZaRU5DYjFsWVdteEpSMFZuV1RJNWRXTXpVbWhpYmxGblltMDVhMXBUUW1sYVdGSXpXbGRXZFV4c2VIVkpRMEZuU1VOQlowbERRbk5hV0ZGbllrZEdlbVJHUW1oamJsSktZbTFTYkdWRFFUbEpSRUUzV0VjMFowbERRV2RKUTBGblNVZDRiR1JEUW5CaWJWSnNaVU5CT1VsRE1IaFBNWGgxU1VOQlowbERRV2RKUTBKeldsaFJaMk5IUm5sa1JXeDFXa2RXTkVsRU1HZE5SSFJqWW1sQlowbERRV2RKUTBGbldUSTVkV016VVdkbGVVSjZaRWhLY0dKdFpIcE1RMEl5V1ZkNE1WcFlUVFpKU0hObllrZFdkVm96VW05SlNEQm5abE5CT1VsSVNteGpNMVp6WkVSMFkySnBRV2RKUTBGblNVTkJaMlF5YUhCaVIxVm5TMGhDYUdOdVVrcGliVkpzWlVOQk9FbEhlR3hpYldRd1lVTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuV1RJNWRXTXpVV2RpYlRscldsTkJPVWxJWkdoaVIzUnNZMmsxZFZwWWFEQlViVGxyV2xObmNFOHhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5ZVmRaWjB0SE5YWmFSMVZuVUZRd09VbEhOVEZpUjNkd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmRreDVRbGhhVTJReVdsTkNiR1ZIYUdoa1dFNHdXbGRSWjJSSGFHeEpSMDUyWW01U2JHSnVVV2RoVnpWNllWZFNiRWxIUldkaWJWWjZaRWRXYTBsSVVteGlXRUp6V1ZoU2JFbEhWbk5hVnpGc1ltNVJkVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RSYlZacVdWaFdlbHBUUWpOYVUwSjZaRWRzYzJKRFFtOVpXRnBzU1VoQ2FHTnVVbnBKUTJnd1lVZFZaMkl6VmpCYVdFbG5XbTA1ZVV4WGVIWmlNMEZ3VEVOQ00xcFRRbkppYlRrelQyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VNNGRrbERNR2RXUjJoc1kyMVZaMkZZVFdkWlUwSXdXbGN4ZDJKSFJqQmFVMEp3WW1sQ01HRkhWV2RqTTFKb1dUSjBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmRreDVRWFJKUmxKdldsTkNNMWxYZUhKYVdFbG5aREpzYzJKRFFtMWhWelZyU1VkRloySnRWalJrUlRWMldrZFZaMkl6VmpCak1teHJXbE5DTUdGSFZXZGtSMVowWTBkNGFHUkhWbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFqTlpWM2h5V2xoSmRWa3pWbmxqYlZaMVpFVTFkbHBIVldkUVUwSjZaRWRHYW1GNU5YZGlNMEZ2UzFSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DYW1JeU5UQmhWelV4V2xSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNERmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbEhiSFZhUjFZMFMzbHpOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEp3V21sQmIySnRPV3RhVXpWMVlqSlNiRlpJYkhkYVUwRTVVRlF3WjAxVFFYWkxhVUpQWWpKU2JFeHJWazFTVlRGR1ZHeFNabFJyT1VWU1UwRnhUSGxyWjJVeGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIYkcxSlEyaDFZakpTYkV4dGFHaGpNRVl3WkVoS2NGbHVWakJhV0UxdlMxTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKcVlqSTFlbVJEUW1oa1NGSjVZVmRLTVdSSFZucEpSREJuWW0wNWExcFROV2hrU0ZKNVlWZEtNV1JIVm5wUE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNhbUl5Tlhwa1EwSTNTVWQ0YkdKdFpEQmhRMEk1U1VRd1oxbFlVakJqYld4cFpGaFNiR042ZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblRIazRaMVZIVm5sWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTTRka2xIYURCa1NFSjZUMms0ZGxwSFZqSmFWM2gyWTBkV2VVeHRNWFpsYld4ellrZEZkV0l6U201TU1sWjFURlpXVkV3eVVuWlpNMDEyVmpKV2FVd3dSbEZUVXpsUFdWY3hiRnBGTlhaYVIxWk9XVmhCYzFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlF6aDJTVWRHTUdSSVNuQlpibFl3V2xoTloxbFlTbXhKUnpWMlpFTkNibVJYUm5sWlZ6VXdXbGRXYTBsSVVuWkpSMHBzU1VoS2JHUklWbmxpYlZaclNVZHNkVWxIVW5aWk0xWjBXbGMxTUVsSE9YbGFSMVo1VEd4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFYWk1lVUpLWW1sQ2QxbFlTakJoVjA0eFlrZEdlVXhEUWtaYVIyUnNUREJzUmtsSFRtaGlhVUo1V2xoU01XTnROR2RrUjJoc1lsTkNkbVJZVVdkaU1sbG5Zak5LYTFwWVNYTkpTRTUyU1Voa2JFbEhUbWhpYlRWMlpFWjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRWFpNZVVKb1l6Tk9NV0pYVldkWlUwSnFZak5LZVZwWVRuZGlNalZyV2xjMWFscFRRbWxhV0ZJeldsZFdkVWxJUW1oamJsRm5ZVmMxYTFwWVoyZFpWelZyU1VkR01HUklTbkJaYmxZd1dsTkNjR0p0VW14bFF6VmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMkpIVmpCSlIwNTJaRmMxTUVsRU1HZE5SSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjFwdE9YbEpRMmh6V2xoUloyRlRRVGxKUkVFM1NVZHJaMUJEUW5OYVZ6VnVaRWRuTjBsSGEzSkxlV3RuWlRGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWVZkWlowdEhWblZhU0U1WVlWaFNiMHRIUmpCa1NFcHdXVzVXTUZwWVRtSmhWakIxWW0xR2RGcFRkMmRaYlRreFltMVNRbVJJVW5saFYwb3haRWRXVkdSWFdtMWhXR2R3UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RaTWpreFltNVJja3Q2ZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTVdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblpsWjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRak5oUjJ4eldsTkJiMWt5T1RGaWJsRjBURk5CSzBsRVFYQkpTSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRemgyU1VWa2JHUkRRakJoUjFWblpFZFdkR05IZUdoa1IxVm5Za2RzTUZwWVNtaGlRMEo2V2xkT01HRlhPWFZKUjNoc1dWZFNjR0p0WTJka1dFRm5aRWM0WjJSSGFHeEpSMXB3WTI1T01GaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmRreDVRbXhsU0VKNVdsaE9lbUZYT1hWSlIyeDFTVWhTYjJGWVRXZFpXRkl3WTIxc2FXUllVbXhZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbXBpTWpWNlpFTkNlbVJJU25CaWJXUkhZak5LVVZsWVNqQkpSREJuWXpOU2VXRlhOVzVqTVhSM1dWaEtNRk5YTld0YVdHaGtUekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5USGs0WjFKdGJIVmFRMEl3WVVkVloxbFlVakJqYld4cFpGaFNiRWxITldoaVYxWmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlIwNTJZbTVPTUVsSE5XaGlWMVZuVUZOQ2MxbFlUakJSV0ZJd1kyMXNhV1JZVW14VWJVWjBXbFpLYkZveVZqUk1iVlkwV2xkTmIyTXpVbmxoVnpWdVVtMDVlVlZIUm5sa1EyeGlUV3d3TjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CZGt4NVFrZGhWelZyU1VoU2IxcFRRbXBpTTBwNVdsaE9kMkl5Tld0aFZ6VnVTVWRHTUdSSVNuQlpibFl3V2xaNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuVEhrNFoxRlhlSE5KUjBwMlpGYzFhMGxIUmpCa1NFcHdXVzVXTUZwWVRXZGhSMFl5V2xOQ2IxbFhVV2RaVTBKNlpGZGFiV0ZZWjJkWlYxSnJXbGRSWjJGWE5XTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRE9IWkpSbEpzWWxoQ2MxbFlVbXhWYlZaNlpGZDRNRWt5Wkd4a1JXaFZWRlYzWjJSSE9HZGlNMEl3U1VjNU1XUkRRblphYVVKNlkwZFdhbUZYUm5OSlIwWXdaRWhLY0ZsdVZqQmFWbmgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZE1lVGhuWVVkR2RWcEhlSEJpYldOMVNVWlNka2xIZUhaaU1uTm5aRmhCWjJSSGFHeEpSMFl3WkVoS2NGbHVWakJhVTBJeVdWZDRNVnBUUWpOYVUwSm9Za2hPZGtsSE5XeGFWMUZuWkVjNFoxbFhVbXRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRWFpNZVVJd1lVZFZaMk16Vm0xYWJXdzBUR3g0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5XVEk1ZFdNelVXZFpXRkl3WTIxc2FXUllVbXhVUnpsMllUTldkMVJ0Um5SYVUwRTVTVWMxYUdKWFZYVmtSemxOWWpOa2JHTnJUbWhqTWxWdlMxTkJja2xIU25aa1Z6VnJVVmhTTUdOdGJHbGtXRkpzVlROV2JWcHRiRFJQTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RaTWpsMVl6TlJaMWxZVWpCamJXeHBaRmhTYkZadFJuTmtWMVZuVUZOQ2RXSXlVbXhNYldSc1pFVkdNR1JJU25CWmJsWXdXbE5vYUdSSVVubGhWMG94WkVkV1RXSXlPWEprV0VKUFdWY3hiRXRVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxITlhaYVIxVjFZMjFXZEdJeldteFJXRkl3WTIxc2FXUllVbXhMUjBZd1pFaEtjRmx1VmpCYVZYaDJZakowTVdORk5XaGlWMVZ3VHpGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuV1RJNWRXTXpVV2RqTTFKb1pFZHNhbU41UVRsSlIwWXdaRWhLY0ZsdVZqQmFWbHBvWWtoV2JFeHVUbmRpUjJ3d1MwY3hhR050ZEd4amJFcHNXakpXTkV0VWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVVtOWhXRTExWTBkR2VXUklUWFZqU0ZaNllVTm9OMGxJVWpWalIxVTJTVU5rYUdSSVVubGhWMG94WkVkVmJreERRbkJpYlZKc1pVTjNaMkp0Um5SYVUzZG5Zek5TZVdGWE5XNWplbTluWXpOU2FHUkhiR3BqZVVJNVMxUjBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVaENhR051VWtwaWJWSnNaVU5CY2xCVFFucGtSMFl3WVZkT2VreHRlR3hpYldRd1lVTkJkRWxFUlRkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZ3hZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ09WaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJGWFdXZExSelYyV2tkVmRXUkhSbTVVYlVaMFdsTkJPVkJVTUdkS01WSkdWRlpDVFZGV1VrWktlV3RuWlRGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFucGtSMFpxWVhrMWQyUllUbTlMUnpWMldrZFZjRTh4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJeldWZDRjbHBZU1hWWk0xWjVZMjFXZFdSRk5YWmFSMVZuVUZOQ2RXSXlVbXhNYlU1MlltNVNiR0p1VVRkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RtVm5oMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQlowbERRV2RKUTBGbldsZDRlbHBUUW5CYWFVRnZZbTA1YTFwVE5YVmlNbEpzVmtoc2QxcFRRVGxRVkRCblRYbEJka3RwUWs5aU1sSnNUR3hTUmxkR1VtWlVhemxGVWxOQmNVeDVhMmRsTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSMDUyWW01T01FbEhVbWhrUjBWblVGTkNkV0l5VW14TWJWSm9aRWRGTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMkZYV1dkTFIxSm9aRWRGZFdGWE5XdGFXR2hRV21sb2RGbFlTbkphV0Vsd1NVUTBPVWxFUVhCSlNIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMWt5T1hWak0xRm5ZMGRHZVZwWE5UQkpSREJuWW0wNWExcFROWGRaV0Vwc1ltNVNUMkl5VW14UE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNhbUl5Tlhwa1EwSjZaRWhLY0dKdFpIcEpSREJuV2tkR01GbFROWHBqUjNod1pFTm9kRmxZU25KYVdFcFRXbGRrYkdWRGF6ZFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRPZG1KdVRqQkpSM2hvWXpOU1NtSnRVbXhsUTBFNVNVaE9NR050YkhWYU0wMTFZa2RXZFZvelVtOUpRekJuVFZSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZE1lVGhuVWpKV2RWcFlTbWhrUjFWbldWTkNkVnBZWTJka1IxWTBaRU5DZFdJeVVteEpSMXAyWTJsQ2JGbFhUbTlKUjNod1pFZFdlVmxYZDJkak1sWnFaRWRzZG1Kc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRjJUSGxDVldGSFZucGFVMEoxWWpKU2JHTjVRbWhqYlZWbldWZDRlbUo1UWpGak1sWnJTVWRHZWtsSVVtOWFVMEowV1ZoS2NscFlTbnBKUjFwMlkybENkV0l5VW14SlNFSm9ZMjVTZWxoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlIxcDJZMmxCYjJKSFZqQkpSMnRuVUZOQmQwOTVRbkJKUkhkbllrZEdlbVJGYkhWYVIxWTBUM2xDY0V0NWMzQkpTSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSM2hzWkVOQ2NHSnVUbXhqYmxFM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKeldsaFJaMk41UVRsSlNFNHdZMjFzZFZvelRtSmhWakEzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEp3V21sQmIyTjVRVGxRVkRCblNubGpjRWxJZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSndZbTVPYkdOdVVXZFFVMEpxWTIxV2FHUkhWazVaV0VweVdsaEpiMHRVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTVdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIVm5Oak1sVm5aVEY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFRuWmliazR3U1VjeGFHUkhUbTlKUkRCbllrZEdlbVJGUmpCa1NFcHdXVzVXTUZwVk5XaGlWMVpUV2xka2JHVkROV3hsUjFacVMwaE5jRTh4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlIyeHRTVU5vZEZsWVVtcGhRMEZvVUZRd1oySnVWbk5pUTBGdFNtbENiR0p0VW5wV01td3dZVU5vZEZsWVVtcGhSbk41V0ZOM1oxbHRPVEZpYlZKQ1pFaFNlV0ZYU2pGa1IxWlVaRmRhYldGWVozQkxVMEkzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0UxblVGTkNla3h1VG5OaFYwNXNTMFJCYzBsSE1XaGtSMDV2VEcxc2RWcEhWalJMVTBGeVNVY3hhR1JIVG05WGVrWmtTVU4wWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhNV2hrUjA1dlYzcEtaRXh1VG5OaFYwNXNTMFJCYzBsRE1XbGlNMVoxV2tWR01HUklTbkJaYmxZd1dsWk9NVnB0V25CbFF6VnpXbGMxYm1SSFozQkpRM05uWWxkR01Ga3lhR0pOTVRBM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMlpXZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlIyeDFZekpXZVdSRFFUbEpSMUoyV1ROV2RGcFhOVEJNYlU1NVdsZEdNRnBXVW14bFNGSlBZakpTYkV0SVRYQlBNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZG1WbmgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGpSMFo1V2xjMU1FeHRiSFZqTWxaNVpFVktiRnB0T1hsYVUyaHdZbTVPYkdOdVVYTkpSelYyV2tkVmNFOHhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWM1dWaEtNR041Tlhka1dFNXZTMGh6WjJSSWJIZGFWRzluU2pJMWRscEhWVzVNUTBKd1ltMVNiR1ZFYjJkTGVYUndZbTFTYkdWRFFqbExWSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRjJUSGxDU2xwcFFqQmhSMVo1V2xOa2VrbEhOWFpKU0ZKc1pVaFJjMGxJWkd4SlJ6RXhZek5SWjJGWE5YcGFXRW93U1VkRloxa3lPWFJpVjFaMVpFTkNNR0o1UW5SWldFcHlTVWM1TVdOcFFuZGlSMFpxV2xNMVkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZE1lVGhuVWxkNGVscFRkMmRrTWxWbldUSkdkVWxJVW5sa1dFNHdTVWRzTUVsSVpIQmlSM2RuWXpOU2NGa3ljMmRaV0VwMlpGYzFhMGxIUm0xa1IxWjVTVWRPYzJJeU5YQmliV04xV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSGJHMUpRMmg2WkVoS2NHSnRaSHBYTW5ob1l6TlNTbUp0VW14bFJqQm5VRlF3T1VsRFkyNUxVMEkzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEozV1ZoS2JHSnVVWFZoVnpWNldsaEtNRkZ0Vm0xaU0wcHNTMGRPZVZwWFJqQmFWVEZvWTIxMGJHTnBaM0JNUTBKMVlqSlNiRXRVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxITlhaYVIxWjZWa2M1VTFwWE1YWmtiVlYxWTBoV2VtRkRhSFZpTWxKc1MxUjBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RtVm5oMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2JHSklUbXhKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUnpWMldrZFZkVnBIUmpCWlUwRTVTVWhPTUdOdGJIVmFNMDVpWWtkR2VtUkZiSFZhUjFZMFdGUjBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RtVm5oMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmRreDVRbGhhVTBKdldWaGFiRWxIUldkalIwWjVaRU5DYldJelNXZGFWMFpxWVVOQ2RGbFlVbXBoUTBKdFlqTldkVnBHZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKM1dWaEtNRk5YTld0YVdHZG5TM293WjJKSFJucGtSV3gxV2tkV05FOHhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSU1XTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZ3hZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMVp6WXpKVloyRlhXV2RMUnpWMldrZFZkV0p0T1d0YVZsSTFZMGRWWjFCVU1EbEpSR2RuVEhsdloxUnRPV3RhVXpWRVZEQXhUbEpWTlZWWU1EVlFVa1ZWWjB0cE9IQkpTSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSndXbWxCYjJKdE9XdGFVelZyV1ZoU2FFbEVNRGxRVTBKMFdWaEtjbHBZU1hCSlNIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMWt5T1hWak0xRm5ZMGRHZVZwWE5UQkpSREJuWW0wNWExcFROWGRaV0Vwc1ltNVNUMkl5VW14UE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJka3g1UWtKYVIxRm5XVk5DZFZwWVkyZGlWMFo1WVRKV2VVbEhOWFphUjFWblpFYzRaMWx0Vldka1IyaHNTVWhPTUZsWVNqQlViVGxyV2xOQ2RscHBRakJoUjFWblZVZEdlV1JEUW5CYWFVSm9ZbTVyWjJJeVdtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5USGs0WjJSSGFHeEpSMXAyWWtkNGRtUXliSFZhZVVKb1kyMVZaMlJJU2pGYVZIQmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMHg1T0dkSlEyOW5WakpWWjFwSE9YVktNMUZuWVVkR01scFRRbWhKU0VKNVdsaGFjR0l6Vm5wVk1teHBZa2RzZFZveGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRjJUSGxCWjB0cFFsVmhSMVZuWTBoS2JHUnRiSFprV0U1VVlWZEtjMkZYTlc1SlIyeDZTVWRHYzJOdFZtaGFTR3RuWkVkb2JFbElUakJaV0Vvd1NVYzViVWxIUldkalNFcHNaRzFzZG1SWVRXZGpSMFo1WkVaNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFuQmFhVUZ2WW0wNWExcFROWGRqYlZZeVlWYzVNV014VG5CWmJYaHdZbTFqWjFCVU1EbEpSelV4WWtkM1oyWklkMmRoVnpWcldsaG5aMUJVTURsSlIzaG9Zek5TVVZsWVNqQlRWelZyV2xobmNFbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhiSFZhUjFZMFMzbHpOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNkMWxZU214aWJsRjFZVmMxZWxwWVNqQlJiVlp0WWpOS2JFdEhUbmxhVjBZd1dsVXhhR050ZEd4amFXZHdURU5DZFdJeVVteExWSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSnpXVmhPTUZWSFJubGtSV3gxV2tkV05FbEVNR2RoVnpWcldsaG5OMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0ZKdllWaE5kV05IUm5sa1NFMTFZMGhXZW1GRGFEZEpTRkkxWTBkVk5rbERaSFZpTWxKc1NubDNaMkZYTld0YVdHZG5abE5yTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlF6aDJTVVZzYlVsSVpHeEpSMUoyWW1sa01FbEhhR2hrYlZWbldWTkNkVnBZYURCVk1teHBZa2RzZFZwNWQyZGhNbFpzWTBOQ01HRkhiSHBKUnpWMldrZFZaMk15T0dka01sVm5ZVWRHTWxwVFFtaGlhVUpzWW0xUmRWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRemgyU1VWV2MyTXlWWE5KU0dSc1NVZE9hR0pwUW5sYVZ6RjJaRzFWWjJGWVVXZGtSemhuWXpKR01scFRRbTFrV0ZJeFkyMVZaMWt5T1hwa1NFMTFXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIYkcxSlEyaDFZakpTYkV4dE5XeGxTRkpVWVZkS2MyRlhOVzVKUkRBNVVGTkNkV1JYZUhOTFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSjFZakpTYkV4dFVtaGtSMFZuVUZOQmJrcDZkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxaNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFteGlTRTVzU1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VjMWRscEhWbnBXUnpsVFdsY3hkbVJ0VlhWalNGWjZZVU5vZFdJeVVteExWSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSMngxV2tkV05FeFRNRGRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VneFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGpSMFo1WkVWc2RWcEhWalJMZVhNM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxaNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRXYzJNeVZXZGxNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DYzFwWVVXZGhVMEU1U1VNd2VFOHhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEl6WVVkc2MxcFRRVzlMUjJ0blVGTkNkV0l5VW14TWJWSm9aRWRGZFdGWE5XdGFXR2hRV21sb2RGbFlTbkphV0VselNVZHJaMHQ1UVhoTFUydG5TVlF3T1VsRE1IaExVMEkzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEYyVEhsQ1JHSXlNWFJhVnpVd1NVYzFkbHBIVldkaFIwWjZTVWRGWjFsdGJIVmFSMngxV25sQ2RGbFlTbkphV0VsbllWYzFlbUZYVW14TVEwSjBXVmQwYkVsSFJuVkpSMngxV1ZkT01HRllXbXhKU0VKb1kyNVNZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTTRka2xHVW05YVUwSnBZVmMxYTJGWE5XNUpTR1IyWW1sa01FbElaSFpqYlhOelNVZEtNV1JEUW5wa1YwcDZXbGhHTVZwWE5UQkpSMHB3WW0xU2NHSnRaSHBKU0dSd1lrZDRZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTTRka2xHVWxCU1JUaG5TMGR3TVdNelVuQmliVnBvV2pJMWFHSnRhM0JQYVVKcVlqSTFlbUZYVW14amFVSXpZVWRXTUdGSFZubEpSMnd3U2pOTloxcFlXbXhpYVVJellqTktNR0ZEUW5Ca1EwSXdZakY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5USGs0WjJKWFJuSmFVMEpwWVZjMWEyRlhOVzVqZVVKd1ltbENhbUl5TVhSYVZ6VXdZM2xDTTJJelNuSllSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFqQmhSMng2VEc1Q2FHTnVVbnBNYmtJeFl6Sm5iMlY1UWpCbFdFSnNUMmxCYm1KdE9XdGFVMk56U1Vkc2RWcEhWalJQYVVGMFRWTkNPVXRVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJUW1oamJsSktZbTFTYkdWRGMzSlBNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DT1ZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMlpXZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxaNGRVbERRV2RKUTBGblNVTkNPVmhITkdkSlEwRm5TVU5CWjBsRE9IWkpSa3BzWWxjNU1scFRRakJhV0dnd1NVZEtjR0p0VW5CaWJXTm5ZbTA1YTFwWVRXZFpWMW93V2xoSloyUkhhR3hKU0dSb1lrZHpaMlJIT0dkaWJUa3dTVWRTY0dNelVqRmpiVWxuWkVkb2JFbEdVbmxhVjFaWVdWZDRjbHBZU21OaWFVRm5TVU5CWjBsRFFXZGFiVGw1U1VOb2FtSXlOWHBrUTBKMVNVYzViVWxITlhaYVIxWjZWa2M1VTFwWE1YWmtiVlZ3U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlJ6UjFZMGRHZVZwWE5UQlViVGxyV2xNMWVWcFhNWFprYlZaRVlVZHNjMXBEYUhWTFZIUmpZbWxCWjBsRFFXZEpRMEZuWmxaNGRVbERRV2RKU0RGalltNHhZMkp0VG5aaWJrNHdTVWRXZFZwSVRsaGhXRkp2U1VRd1owdElUakJqYVhkbll6TldiVnB0YkRSTFUwRTVVR2xDTjFoSE5HZEpRMEZuV1RJNWRXTXpVV2RoVnpWcldsaG5aMUJUUW5wa1NFbDFZa2RXZFZvelVtOUpRekJuWXpOV2JWcHRiRFJNYlhoc1ltMWtNR0ZFZEdOaWFVRm5TVU5DZVZwWVVqRmpiVFJuWVZjMWExcFlaMmRRYWpCblRVTkJiVXBwUW5wa1NFbDFZeko0Y0ZreVZXOWhWelZyV2xobmNFbEVNRGxRVTBKNlpGZGFiV0ZZWnpkWVJ6VTVUekY0ZFZwWWFIZGlNMG93U1VkT2RtSnVUakJKUjJ4NlZrZFdkR05IZUdoa1IxWlJXVmhLTUZGWFRqQmhXRnBzU1VRd1owdElRbWhqYmxGd1NVUXdLMGxJUW1oamJsRjFZVmMxYTFwWVoyZEpWREE1U1VNd2VFOHhlSFZNZVRoblVWZDRjMkl6WkhwSlIwSnJZakpPTVdKWFZuVmtRelZxWTIxV2FHUkhWa1JpTWpGMFdsYzFNRXREWTI1TFYwRm5aRWM0WjFsdFZXZGpiVloxV1ZjeGJGcERRbTFpTTBsbldWWjRkVXg1T0dkak1qRm9Za2QzWjJKWFJuVmtWMFp6U1VoT2NHVnRWWFJqTWtZeVlWYzFibU41TldOaWJWWTBZMGM1ZVdSRFFtcGlNalY2WkVOQ2FtTnRWbWhrUjFaT1dWaEtjbHBZU1dkUVUwRnZTMU5CT1ZCcFFtdGlNazR4WWxkV2RXUkROV3BqYlZab1pFZFdSR0l5TVhSYVZ6VXdTME5qYmt0VWRHTmlhVGh4UzJ4NGRVbERiMmRXUjJod1kzbENlVnBYWkd4bFEwSnNaVWhTZVZsWFRqQmplVUl3WVVkVloxbFlVakJqYld4cFpGaFNiRWxITldoaVYxVm5ZMGhLYkZreVZtdGhWelZ1U1VkR2RVbEhSakJrU0Vwd1dXNVdNRnBUTVhkaU0wNXdaRWRzZG1Kc2VIVkpRMjluV2xob2QyTnRWbnBqTW14MlltazBaMU5ZVVdkYVJ6bHNZM2xDTUdGSGJIcEpSMG8xU1VjeGFHUkhUbTloVnpWdVNVaFNiMXBUUW5wbFZ6VXdXVmhuWjFsWGVITmlNMlJzV2tOQ2JXSXpTV2RaV0ZJd1kyMXNhV1JZVW14ak1YaDFTVU52WjFsWFpHaGhWelY2WkVOQ01HRkhWV2RqTTFKNVlWYzFia2xIZUhCa1IxWjVXVmQzWjFwSGJIbGFWMDR3WWtocloyTklTbXhaTWxacllWYzFia2xJVW05YVUwSnNaVWhDZVZwWVRucGhWemwxVEVOQ2FHTXpUakZpVjJ4MVdubENNR0ZIUmpCWVJ6Um5TMmxDTUdGSFZXZGFXR2gzWTIxV2VtTXliSFppYVVKd1kzbENjR0pwUW1oaWFVSm9aRWhTZVdGWFNqRmtSMVYwWkcxR2MyUlhWV2RqUnpsNllWaFNjR0l5TkhWWVJ6Um5TMng0ZFVsRGIyZFZNbFpzU1VkR01HUklTbkJaYmxZd1dsaE5aMkZYTkdka1IyaHNTVVZvVlZSVmQyZGpNMEpzV1hwd1kySnBRWEZKUjJnd1pFaENlazlwT0haa00yUXpURzVqZWt4dE9YbGFlVGxWVldrNWIyUkhNWE5PVXpsNlpWYzFNRmxZWjNWaFNGSjBZa05PYkdKSFZuUmFWelV3WTNreGFHUklVbmxoVjBveFpFZFdlbGhITkdkTGJIaDFTVU52WjFoRFNXZFlSbmcwVFVSc1kxaElaM2RaVm5oalpVUkNhbGhHZURSTlIxSmpTV2xDYUdOdFZXZFRSbEpPVkVOQ2VtTkhSbXBhVTBKcVlVZEdlVmxYVGpCYVdFcDZUMng0ZFVsRGIyZGhTRkl3WTBoTk5reDVPVE5rTTJOMVpIcE5kV0l6U201TU1WSlRUREpvTUdKWGR6Rk1NbXgxV201S2FHTXpVbmxrVjA0d1pGaEtiRXh0YURCaVYzZHFZek5DYUZreVZYUlpNbWhvWTIxR2FtUkhWbmxqTVhoMVNVTndZMkpwUVhGSlJuZHBXRVozZDB4V2VHTmxSRVpIV0VaNE5FNHdXWFJZUm5nMFQxVmFZMGxwUW1oamJWVm5WbGMxY0ZreU9XdGFVMEpxWWpJMU1HTnRPWE5KUjA1dldWaEthRmt6VW14amJrMXpTVWhrYjJGWFRtOUpSMngxV1RKNE1WcEhWbnBKUjFZeVdsaEtOVmhITkdkTGFVSjZZMGRHYWxwVFFtcGhSMFo1V1ZkT01GcFlTV2RhV0docVdsaENNRWxHZDJsSlJuZHBUR3g0ZFVsRGNHTmlhVUZ4U1VaT2RrbEhSblZKUjBZd1pFaEtjRmx1VmpCYVUwSndZM3B3WTJKcFFYRkpRMEZ4U1VaU2IxcFRRblZaVnpGc1QybENhR0p1YTJkWk1taG9ZMjFHYW1SSFZubEpSMVkwV1RKV2QyUkRRbWhKUjA1MlltNVNlV0l5ZDJkWk1taG9ZMjFHYW1SSFZubE1RMEo2WTBkR2FscFRRbXBoUjBaNVdWZE9NRnBZU1hOSlEyZHVTMU40WTJKcFFYRkpRMEZuU1VOb1kwbHBhM05KUm5kcFVHeDNhVXhEUW1OSmFqRmpTV2wzWjJJelNXZFlRMGwyV0VOS1kySnBRWEZKUTBGeFNVVmFkbUpIZUhaa01sWnJTVWRLTlVsSWNHeGpiVGhuWWpOSloySlhPWGxhVTBKNlkwZEdhbHBUUW1waFIwWjVXVmRPTUZwWVNucFlSelJuUzJsQlowdHBRa2RpTW5oellqTmtiRnBEUW1sbFUwSmpTV294WTBsc2VIVkpRMjluU1VOdloxSnRPWE5pUnpreldsZFJaMWx1YTJkbGJWWjVZbmxDZG1OcFFuUmlNMHBzU1VoT2QxbFhUbXhKUjA1dldWaEthRmt6VW14amJrNWpZbWxCY1VsRFFYRkpSVnAyWWtkNGRtUXlWbXRKUjBvMVQyeDRkVWxEYjJkSlEwRm5TMmxDUW1KdWEyZFpNbWhvWTIxR2FtUkhWbmxKUjFZMFdUSldkMlJEUW5walIwWnFXbE4zWjB0RFkzQk1RMEZ2V0VOSmNFeERRbU5KYW5oalNXbDNaMWhEU1N0WVEwbHpTVVozYVZCV2QybE1RMEZ2V1VOcmMwbEhPWGxZUnpSblMybEJaMGxEUVhGSlEyaGpTV2xyWjJSSGFHeGlhVUpvWW01cloySnRPWFZNVTJoalNXbHJjMGxIT1hsWVJ6Um5TMmxCWjBsRFFYRkpRMmR1UzFOQ01HRkhWblZKUjBaMVpWTkNkV0l5TkhSTFEyTndXRWMwWjB0cE9XTmliVlkwWTBjNWVXUkRRbXBpTWpWNlpFTkNjMWxZVGpCUldGSXdZMjFzYVdSWVVteFViVVowV2xaS2JGb3lWalJKUkRCbldFYzBka3g1UW14ak1uaHdZbTVSZEZwSGJIcFpWMHB6V2xNeGRWcFlhREJNVjNod1ltMVZaMkp0T0hSWk1qbDFaRWhLZG1KRE1YbGFWMlJzWlVaNGRVeDVhR0pKUm5oalpVUkJOVmhHZURSTlIwWmpXRWhuZDFreGVHTmxSRUpyV0ZOcmIxY3hOV05ZUkVGMFdFWjRORTFWV21OWVNHY3pVbWt4WTFoSVp6VlNhVUpqU1dsaksxQlRPV1JMZVd0dlYzbENZMWhJWjNkUFZuaGpaVVJDYUZoR2VEUk5SMDVqV0VobmQxcEdNSEZRVm5ObldFWjRORTFFYkdOWVNHZDNXVlo0WTJWRVFtcFlSbmcwVFVkU1pFdHBaeTlQYkhSbFNVWjRZMlZFUVRWWVJuZzBUVWRHWTFoSVozZFpNWGhqWlVSQ2ExaERTVzVaUkhjclVGWXdjV1pHZDJsWE1UVmpTV3d3Y1daRFpHSllhV1JrUzJscmNFcERPRGRZUnpSMlRIbE5aMk15T1RGamJVNXNWRmRHZDJOSGJIVmFNVlpUVkVReE1GcFhNWGRpUjBZd1dsTTFjV041TlhSWldFRnBURU5KZGt0cGNHTmlhVUZ4U1VWQ2MyRlhUbXhpYms1c1dFYzBaMHRwUWtSaU0wSTFZMjFzYm1GSVVXZExSMDF3U1VSSmQwMVVZMmRXUjJoc1NVWkNkbUpJYkhSYVdFbG5WVWhLZG1GdFZtcGtRMEpDWkZoU2IySXpTbnBNYVVKQ1lrZDNaMk50Ykc1aFNGSjZTVWhLYkdNeVZubGtiVlpyVEd4NGRVbERiMmRXUjJod1kzbENhbUl5VW14SlJ6Rm9aVk5DZG1KdGVEVkpSMHBzU1VoV2VscFhVV2RrVnpWcldsaEpaMlJIYUd4SlJVcFVVa05DZW1SSWJITmFVMEp6WVZkT2JHSnVUbXhKUjFwMlpGYzFhMGxIUmpCWVJ6Um5TMmxDYjJSSVVuZFBhVGgyWTBjNWMyVlhNV3hqYVRWdVlWaFNiMlJYU1hWaFZ6aDJWRVZzUkZKVk5WUlNVelV3WlVoU1kySnBRWEZKUmxKdldsTkNhbUl5TVhkaVIxWXdXbE5DZWxwWVVXZGlNbGxuV1ZoV01HRkhPWGxqZVVKMFdWaHJaMWx0VldkYWJUa3hZbTFSWjFsWVVtTmlhVUZ4U1Vkb01HUklRVFpNZVRsM1lqSjROV0pYVm5sTWJXUndaRWRvTVZscE5YQmllVGxDVmxaU1NWUXhTbFJNYmxJMFpFWjRkVWxEYjJkV1IyaHNTVWRPZG1KWVFuTmFXRkpzU1VoT2JHUkRRblphYVVKcVlqSTFNR050Ykdsa1dGSjJZMjVOWjJKWFJqVkpSMHBzU1VkYWRtUlhOV3RKUjBZd1dFYzBaMHRwUW05a1NGSjNUMms0ZG1OSE9YTmxWekZzWTJrMWJtRllVbTlrVjBsMVlWYzRkbEV3T1U5V1JrcEtVV3hXVlZReFNsUk1ibEkwWkVaNGRVbERiMmRSTWpscldsTkNhMkZZVGpCamJXeHBaRmhTYkZwRFFtbGxVMEpJWWpJNWJtSkhWV2RaV0UxblkwZEdlV1JEUW5aYWFVSXdZVWRWWjJOSE9YTmxWekZzWTJsQ2QyTnRPWEZhVjA0d1NVZHNla2xIUm5Oak1qbGpZbWxCY1VsSVRqRlpiWEJzV1ROUloyUkhPR2RaVnpSbldWZFNhMkZZVW5CaU1qVm9Za05DU2xWRFFubGhWMlJ2WkVoTloxb3pTbWhpYmxGbldtMDVNV0p0VVdkWldGSmpZbWxCY1VsSGFEQmtTRUUyVEhrNWQySXllRFZpVjFaNVRHMWtjR1JIYURGWmFUVndZbms1VVZGV1VrWlViRkpVVEc1U05HUkdlSFZKUTI5MldFYzBka3RwY0dOaWFVRnhTVVZDZEdJeVVqRmlSMVZuWXpKb2FGcElhM1JqYlZaMVdrZFdlVmhITkdkTGFUbGpZbTFzZEdOSE9YbGtRMEkzU1Vkc2VsWkhWblJqUjNob1pFZFdVVmxZU2pCUlYwNHdZVmhhYkVsSU1HZGFia3AyWWxOQmJreHBPVEJhVnpGM1lrZEdNRnBUTlhGamVXTTNXRWMxYW1JeU5YcGtRMEl6V1ZkNGNscFlTazlpTWxKc1VtMXNjMlJIVm5sSlJEQm5UVlJOZWtsRE9IRkpSVFYyV2tkV1IyRlhlREJhV0VsMVZUQm9VRll4T1RkU1ZYaEdWRlZXVDFaSWVFUlVNREZPVWxVMVZXWkdVa1pYUmxJNVNVTnZkazh4ZUhWTWVXOXhXRWMwWjB0cFFsTmFWekYyWkcxV2VrbElVbTlhVTBKellWaE9NRWxIT1cxSlJ6VjJXa2RXZWtsSFdubGlNakJuV1ZOQ1ZWcFhNWGRpUjBZd1dsTkNlbGxYV214aVNHdDFTVVZzZFVsSFJtdGFSMnd3WVZjNWRVbElVblpKU0Vwc1lsYzVNbUZYTlc1WVJ6Um5TMmxDZFdJeVVteGplVUp0WTIwNWRFbElVbTlhVTBKVldsY3hkMkpIUmpCYVUzZG5aRWRvYkVsR1VteGlXRUp6V1ZoU2JFbElRbWhqYmxGbllWYzFhMkZYVG14amVVSm9ZMjFWWjJSWVFtdFpXRkpzV2tOQ01HSjVRblJaV0ZKcVlVWjRkVWxEYjJka1IyaHNTVWN4TVdSSFJqQmFWMUZuVmtkV2RHTkhlR2hrUjFWblVrVTVUa3hzZUhWSlEzQmpZbWxCY1VsRlJucEpTRkp2V2xOQ01GcFhNWGRpUjBZd1dsTkNjR041UWpOWlYzaHlXbGRSWjJSSGFHeEpTRXBzWWxjNU1sbFhkMmRqTTFKb1pFZFZaMkZZVFdka1NFcG9XVEowYkZwRFFtaGliVkpqWW1sQmNVbElRbWhqYmxGbllWYzFhMkZYVG14amVVSm9ZMjFWWjFsWFVuRmtXRTR3V2xkUloxbFlUV2RpYlZac1drZFdhMHhzZUhWSlEzQmpZbWxCY1VsSFVuQmtiSGgxU1VOdlowbERRbXRoV0ZscVRWTkJiMk50Vm5SaU0xcHNTMU5CT0V4VE1HZGpNMUpvWTI1UloyTnRWblJpTTFwd1ltMWpaMHRJU214aVZ6a3lZVmMxYmtsSE5YWmFSMVZuWVZoTloxcEhiREpKZWtWd1dFYzBaMHRwUVdkSlEwRm5Xa2RzTWxoSE5HZExhVUZuU1VOQlowbERRbXRoV0ZscVRXbEJiMk50Vm5SaU0xcHNTMU5CWjFCRE1IUkpSMDUyWW01U2NHSnVWbXhKU0Vwc1lsYzVNbUZYTlc1SlEyaDVXbGN4ZG1SdGJIVmFlVUoxWWpKU2JFbEhiSHBKU0U0d1lWZDRjMGxIVW5Ca2FVMTRTMVo0ZFVsRGIyZEpRMEZuU1VOQlowbERRbXRoV0ZwalltbEJjVWxIVW5Ca2FVRTRURk13WjJNelVuWmpRMEo1V2xjeGRtUnRiSFZhZVVKNllWYzFhbHBUUW5kamJWWXlZVmM1TVdONVFucGhWMHB6WVZjMWJrbEhiSHBKU0ZKdldsTkNlVnBYTVhaa2JXeDFXbmxDZFdJeVVteEpRMmhyWVZoWmFrMVRlR05pYVVGeFNVaEtiR0pYT1RKYVYxRm5Ua05DZFdJeVVteGplV3hqWW1sQmNVd3hlSFZhV0doM1lqTktNRWxIV2pGaWJVNHdZVmM1ZFVsSVNteGlWemt5V2xVMWRscEhWbnBTYmtwMllsWlNiR0pZUW5OWldGSnNTMGhTYkdKWVFuTlpXRkpzVEVOQ2RXSXlVbXhqTVZKMlZXMVdkR0l6V214TFUwSTNXRWMwWjBsRFFXZFpNamwxWXpOUloyVjVRbXhpUjFaMFdsYzFNRTlwUWpkSlIwNTJZbTVTYkdKdVVXZG1VM2RuWTBkR2VXUklUV2RtVTBFNVNVaFNiR0pZUW5OWldGSnNUekY0ZFVsRFFXZEpSMDUyWW01T01FbElaR2hpUjNSc1kybEJPVWxIVW5aWk0xWjBXbGMxTUV4dFRubGFWMFl3V2xaU2VWcFhWbGhaVjNoeVdsaEpiMWt5T1hWa1IxWjFaRU4zWjJReVJuTmhNbFo1VkcwNWExcFZXbkJpU0ZKc1kybDNaMkp1Vm5OaVEzZG5XbTFHYzJNeVZYQlBNWGgxU1VOQlowbEhlR3hrUTBKM1dWaEtNRk5YTld0YVdHZG5VRk5DZFZwWWFEQlJWMDR3WVZoYWJGTlhOV3RhV0doS1lteFNiR0pZUW5OWldGSnNWVWRHZVdSSVRXOWpSMFo1WkVoTmNFOHhlSFZKUTBGblNVZDRiR1JEUW5kWldFb3dTVVF3WjJOSFJubGtTRTVpWTBkR2VXUkZiSFZhUjFZMFdGUjBZMkpwUVdkSlEwSnpXbGhSWjJKdE9XdGFWV3gxV2tkV05FbEVNR2RNVkVVM1dFYzBaMGxEUVdkaVIxWXdTVWhLYkdKWE9USmFWVTUyWkZjMU1FbEVNR2ROUkhSalltbEJaMGxEUW1waU1qVjZaRU5DZFdJeVVteGpNVkoyVlcxV2RHSXpXbXhUVnpWVldsY3hkMkpIUmpCYVUwRTVTVVowWkU4eGVIVkpRMEZuU1VkNGJHUkRRbXBrV0VwNVdsYzFNRlZ0Vm5SaU0xcHdZbTFrVDJJeVVteEpSREJuWW01V2MySkVkR05pYVVGblNVTkNNMkZIYkhOYVUwRnZaREpHYzJFeVZubE1iVFZzWlVoU1QySXlVbXhMUTJ0d1NVaDBZMkpwUVdkSlEwRm5TVU5CWjJKdE9XdGFWV3gxV2tkV05FdDVjemRZUnpSblNVTkJaMGxEUVdkSlIwNTJZbTVPTUVsSE5YWmFSMVZuVUZOQ00xbFhlSEphV0VsMVdUTldlV050Vm5Wa1JUVjJXa2RWTjFoSE5HZEpRMEZuU1VOQlowbERPSFpKUlZaMVdrTkNlVnBYTVhaa2JVWnpTVWRzYlVsSVRqQmFXRUozV2xkUloyTkhSbnBrUTBJd1lVZFZaMk50Vm5SaU0xcHdZbTFqWjJKdE9XdGFWbmgxU1VOQlowbERRV2RKUTBKd1dtbEJiMkp0T1d0YVV6VjNZMjFXTW1GWE9URmpNVTV3V1cxNGNHSnRZMmRRVkRBNVNVZE9NV051U214aWJsSlRXbGN4ZG1SdGJIVmFNRFYyV2tkVmNFbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWRPTVdOdVNteGlibEpUV2xjeGRtUnRiSFZhTURWMldrZFZaMUJUUW5Wa1YzaHpUekY0ZFVsRFFXZEpRMEZuU1VOQ09WaEhOR2RKUTBGblNVTkJaMGxET0haSlJVVm5ZbTA1YTFwVFFqQmllVUo1V2xjeGRtUnRWV2RrTWtaNlNVZGFkbVJYTld0SlIyeDFTVWhTYjFwVFFqQmFWekYzWWtkR01GcFdlSFZKUTBGblNVTkJaMGxEUW5CYWFVRnZZbTA1YTFwWVRsVmlNVXBzWWxjNU1scFROVzlaV0UxdlltMDVhMXBUYTNCSlNIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbEhOWFphUjFaNlZrYzVVMXBYTVhaa2JWWktZbXhTYkdKWVFuTlpXRkpzVEc1Q01XTXlaMjlpYlRscldsTnJOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEYyVEhsQ1ZXTnRSbXBoZVVKMVlqSlNiRWxJWkd4S00wcHNTVWhLYkdKWE9USmhWelZ1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUW5CYWFVRnZXVE5XZVdOdFZuVmtSa3BzWWxjNU1tRlhOVzVVYlRscldsTkJPVkJVTUdkaWJsWnpZa05yWjJVeGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIVGpGamJrcHNZbTVTVTFwWE1YWmtiV3gxV2pBMWRscEhWV2RRVTBKMVlqSlNiRTh4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxaNGRVbERRV2RKUTBGblNVTkNPVmhITkdkSlEwRm5TVU5CWjBsRE9IWkpSbVJ2V2xjMFoyTnRWblJpTTFwd1ltMWpjMGxIYkhWWk0wcHNZbGRXZFdSRFFtcGlNMVoxWkVOQ2FXVlRRak5oUjJ4cVlVTkNNR0o1UW1oYVIzQXhZek5SWjJNelZtbGpNbFo0WkZkV2RXUkRRbmRaV0Vvd1NVZHNkVnBIYkdwYVdFNWpZbWxCWjBsRFFXZEpRMEZuWVZkWlowdEhUakZqYmtwc1ltNVNVMXBYTVhaa2JXeDFXakExZGxwSFZXZEpWREE1U1VjMU1XSkhkM0JKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSVNteGlWemt5V2xWT2RtUlhOVEJMZVhNM1dFYzBaMGxEUVdkSlEwRm5TVWd4WTJKcFFXZEpRMEZuU1VOQloyUXlhSEJpUjFWblMwaENhR051VVdkSlZEQTVTVWhXZFZwSFZtMWhWelZzV2tOQmJVcHBRbmRaV0Vvd1RHMXNkVnBIVmpSSlJEQTVVRk5DZFdJeVVteFRWelZyV2xobmNFbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU00ZGtsRmJHMUpTRUpvWTI1UloyRllUV2RoVnpSbldWTkNlVnBYTVhaa2JWWnJTVWMxZGxwSFZXZGFSMVpvV1ROU2NHUnRSakJhVTBKd1pFTkNhV1ZUUW5wYVdGSXdZVmMxYmtsSGJIVmFSMVkwU1VoU2RrbERNSGhKUnpsNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFYWk1lVUpvV2tkd01XTXpVV2RrUjJoc1NVZHNkVnBIVmpSSlIwWjZTVWMxYkZwWFVteGFRelZqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJUW1oamJsRjFZVmMxYTFwWVoyZFFVMEpxWkZoS2VWcFhOVEJWYlZaMFlqTmFjR0p0WkU5aU1sSnNTVU5GT1ZCVFFuVmtWM2h6U1VRNFoweFVSV2RQYVVKM1dWaEtNRXh0YkhWYVIxWTBTVU13WjJOdFZuUmlNMXBzVVRJNU1XSnVVVGRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CZGt4NVFtNWllVUl3WW5sQ01HRkhWV2RpYlZZMFpFTkNhRmt6VW5Ca2JWVm5ZMGRHZVdSRE5XTmlhVUZuU1VOQlowbERRV2RKUTBGblNVaENhR051VWtwaWJWSnNaVU5CT1VsSE5XeGxTRkpDV1ROU2NHUnRWa3BpYlZKc1pVVnNkVlpIVm5SalIzaG9aRWRXVVZsWVNqQmplV2gzV1ZoS01HTjVkMmRqUjBaNVpFVnNkVnBIVmpSTFZIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElRbWhqYmxGblVGTkNkMWxZU2pCak1YUjNXVmhLTUZOWE5XdGFXR2hrVHpGNGRVbERRV2RKUTBGblNVTkNPVmhITkdkSlEwRm5abFo0ZFVsRFFXZEpSelYyV2tkV2VsWkhPVk5hVnpGMlpHMVdTbUpzVW14aVdFSnpXVmhTYkV4dFduWmphMVpvV1RKbmIwdEhOSEJKUkRBclNVYzBkV05IUm5sYVZ6VXdWRzA1YTFwVE5YbGFWekYyWkcxV1JHRkhiSE5hUTJoMVMxTnJOMWhITlRsWVJ6VnFZakkxZW1SRFFtcGlNMVoxWkVVMWRscEhWbnBKUkRCblMwYzFkbHBIVlhCSlJEQXJTVWgwWTJKcFFXZEpRMEp6V2xoUloxa3lPVEZpYmxGblVGTkJiMkp0T1d0YVV6VjFZakpTYkZaSWJIZGFVMEU1VUZRd1owMVVSV2RNZVc5blZHMDVhMXBUTlVWVU1FNVdWRlZXVDFaR09VZFZhMFpJVkZWV1QxWkdPVTlVTUZKR1NVTnZka3RUUVM5SlJFRm5UMmxCZUU4eGVIVkpRMEZuU1VkT2RtSnVUakJKU0dSb1lrZDBiR05wUVRsSlIxSjJXVE5XZEZwWE5UQk1iVTU1V2xkR01GcFdVbmxhVjFaWVdWZDRjbHBZU1c5aWJUbHJXbE4zWjJReVJuTmhNbFo1VkcwNWExcFZXbkJpU0ZKc1kybDNaMkp1Vm5OaVEzZG5XbTFHYzJNeVZYQlBNWGgxU1VOQlowbElaRzloVjNoc1NVTm9NMWxYZUhKYVdFbDFZbTFXTkdSRk5YWmFSMVZ2UzFOcloyVXhlSFZKUTBGblNVTkJaMGxEUW1waU0xWjFaRU56Y2s4eGVIVkpRMEZuU1VneFkySnBRV2RKUTBKNVdsaFNNV050TkdkWk1qa3hZbTVSTjFoSE5UbFBNWGgxV1RJNWRXTXpVV2RpYlZZMFpFVkdhbVJIYkRKYVZXeDFXa2RXTkZOWE5WVmFWekYzWWtkR01GcFdRbWhqYmxKNlNVUXdaMHRJUW1oamJsSjZURU5DZW1SSFJubGtSV3gxV2tkV05FbEVNR2RNVkVWd1NVUXdLMGxJZEdOaWFVRm5TVU5DYldJelNXZExSM2hzWkVOQ2NFbEVNR2RqTTFKb1kyNVNTbUp0VW14bFEwRnlTVVJGTjBsSGEyZFFRMEozV1ZoS01HTjVOWE5hVnpWdVpFZG5OMGxIYTNKTGVXdG5aVEY0ZFVsRFFXZEpRMEZuU1VOQ2FtSXlOWHBrUTBKM1dWaEtNRWxFTUdkalIwWjVaRWhPWW1GV01EZFlSelJuU1VOQlowbERRV2RKUjJ4dFNVTm9jR014VW14aVdFSnpXVmhTYkZWSFJubGtSVVpxWkVkc01scFRhSGRaV0Vvd1MxTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTIxV01HUllTblZKUjJzM1dFYzBaMGxEUVdkSlEwRm5TVWd4WTJKcFFXZEpRMEk1V0VjMFowbERRV2RqYlZZd1pGaEtkVWxETUhoUE1YaDFabFIwWTJKcE9IRkxiSGgxU1VOdloxTlhOWHBhV0Vvd1kzbENNR0ZIVldkYU1td3lXbGMwWjJKdE9XdGFVMEp3WW01U2RrbElVbTlhVTBKVldsY3hkMkpIUmpCYVUzZG5Zak5DTUdGWE9YVlpWM2h6WlZOQ2FWcFhXblpqYlZWblpFZG9iRWxIWkhCa2JWWjFXRWMwWjB0cFFubGFWMXBQWWpKU2JFeHBRa3BpYVVKb1drZFNjR1JIYkhaaWFVSXdZbmxDY0dKdVRteGpibEp3WW0xaloyUkhhR3hKUnpWMldrZFZaMkZYTlRCaWVVSXdZVWRWWjFaSFZuUmpSM2hvWkVkVmMwbElVbTlhVTBKVldsY3hkMkpIUmpCYVZuaDFTVU52WjJOSFJubGtRMEp3WW0xU2NGa3lWbnBKUjBaNVdsTkNNV05IVW1oa1IxWnJTVWhTZGtsSE1XaGtSMDV2U1VoU2IxcFRRblJrV0ZKb1pFZFdhMGxHVW14aVdFSnpXVmhTYkVsRlVsQlVVelZqWW1sQmNVd3hlSFZhV0doM1lqTktNRWxIV2pGaWJVNHdZVmM1ZFVsSGJIVmpNbFo1WkVVMWRscEhWa3BpYmxKMlZrZFdkR05IZUdoa1IxVnZaRWRXZEdOSGVHaGtSMVZ6U1VjMWRscEhWWE5KU0Vwc1dtczFkbHBIVldkUVUwSjFaRmQ0YzB0VFFqZFlSelJuU1VOQloxa3lPWFZqTTFGblpYbENiR0pIVm5SYVZ6VXdUMmxDTjBsSFRuWmlibEpzWW01UloyWlRkMmRqUjBaNVpFaE5aMlpUUVRsSlNGSnNZbGhDYzFsWVVteFBNWGgxU1VOQlowbERPSFpKUld4dFNVaFNiMXBZU214S00wMW5ZbTA0WjJOdFZtMVViVGxyV2xOM1oyUkhhR3hpYVVKM1pGaFJaMkp0T1d0YVUwSm9aRU5DYkdKdFVXZGlNbGxuWkVkV2RHTkhlR2hrUjFWMVdFYzBaMGxEUVdkTWVUaG5WRzA0WjJOSFJubGtRMEp3WW0xU2NGa3lWbnBKUnpWc1dsZFJaMlJIT0dkWmJWVm5ZekpvY0ZwdVVteGFRMEp3WW1sQ01HRkhiSHBKUjA1b1l6SlZkVmhITkdkSlEwRm5ZVmRaWjB0SVNteGFhelYyV2tkVloxQlVNRGxKUnpVeFlrZDNaMlpJZDJkamJWWnRWRzA1YTFwVFFUbFFWREJuWkZjMWExcFhXbkJpYlZaclMxTkNOMWhITkdkSlEwRm5TVU5CWjBsSFRuWmlibEpzWW01UmRWbFlRbmRhVnpWclVUSm9jR0pIVVc5aWJUbHJXbE5yTjFoSE5HZEpRMEZuU1VOQlowbElTbXhrU0ZaNVltcDBZMkpwUVdkSlEwSTVXRWMwWjBsRFFXZFpNamwxWXpOUloyUXlSbk5oTWxaNVNVUXdaMXBIT1dwa1Z6RnNZbTVSZFZrelNteFpXRkpzVmtoS2JGcFdaR2hpUjNSc1kybG9hbUl5TlRCYVZ6VXdURU5DTTFsWGVISmFXRXBQWWpKU2JGSnRiSE5rUjFaNVRFTkNkV1JYZUhOTVEwSnRXVmQ0ZWxwVGF6ZFlSelJuU1VOQloySkhWakJKU0VKb1kyNVNTbUp0VW14bFEwRTVTVWMxYkdWSVVrSlpNMUp3WkcxV1NtSnRVbXhsUld4MVZrZFdkR05IZUdoa1IxWlJXVmhLTUdONWFIZFpXRW93WTNsck4xaEhOR2RKUTBGbllrZFdNRWxIYkhWak1sWjVaRVZPZG1SWE5UQkpSREJuVFVSMFkySnBRV2RKUTBKeldsaFJaMlF5Um5OaE1sWjVVMWMxYTFwWVoyZFFVMEYwVFZSMFkySnBRV2RKUTBJellVZHNjMXBUUVc5a01rWnpZVEpXZVV4dE5XeGxTRkpQWWpKU2JFdERhM0JKU0hSalltbEJaMGxEUVdkSlEwRm5aREpHYzJFeVZubFRWelZyV2xobmNrdDZkR05pYVVGblNVTkJaMGxEUVdkWk1qbDFZek5SWjJReVJuTmhNbFo1VkcwNWExcFRRVGxKU0dSb1lrZDBiR05wTldwa1dFcDVXbGMxTUZSdE9XdGFWSFJqWW1sQlowbERRV2RKUTBGbllWZFpaMHRJWkdoaVIzUnNZMnMxZGxwSFZXZFFWREE1U1VoS2JGcHJOWFphUjFWd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMngxWXpKV2VXUkZUblprVnpVd1NVUXdaMWt5T1RGaWJsSlBZakpTYkdONWFIVmlNbEpzUzFSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNFcHNXbXMxZGxwSFZYVmpSMFo1V2xjMU1GUnRPV3RhVXpWd1ltNU9iR051VWtOYVYxcDJZMjFWYjJKdE9XdGFVM2RuWTIxV2JWUnRPV3RhVTJzM1dFYzBaMGxEUVdkSlEwRm5TVWd4WTJKcFFXZEpRMEZuU1VOQloyUXlhSEJpUjFWblMwaENhR051VWtwaWJWSnNaVU5CYUZCVU1HZE1WRVZuU21sWloyTkhSbmxrU0U1aVkwZEdlV1JGYkhWYVIxWTBXRk0xY0dKdFVteGxRMEU1VUZRd1oyUXlSbk5oTWxaNVUxYzFhMXBZWjNCSlNIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERPSFpKUld4dFNVaGtiRW96V214SlIyeDFZekpXZVdSSFZtdEpTRkp2V2xOQ2RXSXlVbXhNUTBKNllWY3hkMkpJYTJkWlYxSnhaRmhPTUVsSFJuTmlRMEo2WkZkS2VscFlSakZhVnpVd1NVaENhR051VW5wWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ2NGcHBRVzloVnpWNldsaEtNRkV5T1RGaWJsRm5VR2xCZDB0VFFqZFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdka01taHdZa2RWWjB0SVFtaGpibEpLWW0xU2JHVkRRV2hRVkRCblRGUkZjRWxJZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblkwZEdlV1JJVG1KalIwWjVaRVZzZFZwSFZqUllVelZ3WW0xU2JHVkRRWEpRVTBKd1ltNU9iR051VWtSaU0xWjFaRVIwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkalIwWjVaRVZzZFZwSFZqUkpSREJuWW0xV05HUkZSbXBrUjJ3eVdsVnNkVnBIVmpSVFZ6VlZXbGN4ZDJKSFJqQmFWa0pvWTI1U2VrdElRbWhqYmxKNlRFTkNkMWxZU2pCVFZ6VnJXbGhuY0U4eGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTVdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbmxhV0ZJeFkyMDBOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUW5kWldFb3dVMWMxYTFwWVoyZFFVMEoxV2xob01GRlhUakJoV0Zwc1UxYzFhMXBZYUVwaWJGSnNZbGhDYzFsWVVteFZSMFo1WkVoTmIyTkhSbmxrU0UxelNVaENhR051VWtwaWJWSnNaVU5yTjFoSE5HZEpRMEZuU1VOQlowbElNV05pYVVGblNVTkNPVmhITlRsWVJ6UjJUSGxOWjJNeU9URmpiVTVzVkZkR2QyTkhiSFZhTVZaVFZFUXhkR0l5VW5CYWJtdDBaRWRXZEdOSGVHaGtSMVYxWVc1TmRXSlhSbmRKYVhkcFRIbHZjVmhITkdkTGFVSkJZa2RzYWxwWE5YcGFWbmgxU1VOdloxRXlPWGRsV0Vwd1dqSm9NRWxEYUdwTFUwRjVUVVJGTTBsR1VtOWFVMEpSWWpKNE5XSlhWbmxKUmtKNVlqSndiRmt6VVdkUldGWXdZVWM1ZVdONU5HZFJWM2h6U1VoS2NGb3lhREJqZVVKNVdsaE9iR051V214YVF6VmpZbWxCY1VsR1VtOWhXRTFuV1RJNWExcFRRblJaV0d0bllqSTFjMlZUUW1sYVUwSXhZekpXYTBsSVZuVmFSMVo1U1VoU2IxcFRRa05WTUZGbll6TlNOV0pIVldkaVIyeHFXbGMxZWxwVFFtMWlNMVoxV2tOQ2FHUkdlSFZKUTI5bllVaFNNR05FYjNaTU0wSjJZa2hzZEZwWVNYVmFNbXd3WVVoV2FVeHRiSFpNTUhoS1VUQldUMVV3VlhWa1NHZ3dXRWMwWjB0cFFsVmhSMVZuV1RJNWRHTkhlR3hrUjFWbll6SldNRWxIT1cxSlIwWXhaRWRvZG1OdVRXZGlWMFkxU1VkS2JFbEhXblprVnpWclNVZEdNRmhITkdkTGFVSnZaRWhTZDA5cE9IWmpSemx6WlZjeGJHTnBOVzVoV0ZKdlpGZEpkV0ZYT0haUlZsWlZVMFU1VTFWNU5UQmxTRkpqWW1sQmNVbEdVbTlhVTBKcVlqSXhkMkpIVmpCYVUwSjZXbGhSWjJJeVdXZFpNamwxWkVoS2NGbHVWakJpTTBwNlNVY3hhR1ZUUW1sYVUwSnRZak5XZFZwRFFtaGtSbmgxU1VOdloyRklVakJqUkc5MlRETkNkbUpJYkhSYVdFbDFXakpzTUdGSVZtbE1iV3gyVERCT1VGUnNVbE5UVlVwV1ZrVTVVMVY1TlRCbFNGSmpZbWxCY1VsRlRuWmFSMVZuV2tkc2VtUklTbkJaYmxZd1dsZFJaMWx1YTJkU01qbDJXako0YkVsSFJucEpTRUpvWTI1UloySXlXV2RrUjJoc1NVaENkbUpJYkhSYVdFbG5ZMGhLZG1GdFZtcGtRMEp3WTNsQ2FHSklUblpZUnpSblMybENlbVJYU25GYVYwNHdTVWhTZGtsSFJuVkpSMFpyV2tkc01HRlhPWFZaVjNkblUxWkJaMk50Ykc1aFNGSjZTVWRrZVZsWE5UQkpSMXAyWkZjMWEwbEhSakJZUnpSblMybENiMlJJVW5kUGFUaDJZMGM1YzJWWE1XeGphVFZ1WVZoU2IyUlhTWFZoVnpoMlZVVkdWVkpWTlZWVmVUVXdaVWhTWTJKcFFYRk1NWGgxV1RJNWRXTXpVV2RhUjJ4NVdsZE9NR0ZZV214amVVRTVTVWMxYkdSNVFsaGFWMFp5VkZkR2QwdERhemRZUnpSMlMybHdZMkpwUVhGSlJVcDVXVmMxYTJONVFtaEpSMW94WW0xT01HRlhPWFZKUjBaNlNVZEZaMXBIYkhsYVYwNHdZVmhhYkVsSFdtaFpNMUoyWTI1cloxcHVWblZaTTFKd1lqSTBaMk15T0dka1IyaG9aRU5DYzJGWVVYUmhTRkowWWtOQ00yRlhlSE5KUjA1b1lrZDRZMkpwUVhGSlNGSnZXbE5DYldSWE5XcGtSMngyWW1sQ2EyUllTbkJpYldOblpFZFdkR05IZUdoa1IxVm5ZMjFXZFZwSFZubGhWelZ1VEVOQ2VWbFlVbTlhV0VsblpFZG9hR0pwUW5kWldFNTZZVmMxYmtsSFJucEpSMFZuWkcxR2MyUlhWWFZZUnpSblMyeDRkVWxEYjJkUlUwSm1Xa2RzZVZwWFRqQmhXRnBzV0hsQ2NHTjVRbWhKUjFveFltMU9NR0ZYT1hWSlNGSnZXVmhSWjJSSFJuSmFXRTFuV1ZOQ1VWbFlTakJKUjBaNlNVZEdkVWxIUm5sYU0xWjBXbGMxTUV4cFFrcGtRMEp2V1ZoTloyUkhhR3hZUnpSblMybENlbUZYWkhWWldGSXhZMjFWTmtsSFFXOWpSMFo1WkVSdloxVkhSbmxrUTJ0blVGUTBaMlJ0T1hCYVIwRjFXRWMwWjB0c2VIVkpRMjluVVZOQ2EyRllTbXhaTTFKd1pHMVZaMWd5V21oWk0xSjJZMjVzWmtsSGJIcEpSMFZuV201V2RWa3pVbkJpTWpSblpFZG9hR1JEUWpCWlYzUnNZM2xDYUdOdFpERmlWMVoxWkVoTloxcHRPWGxKUjFKb1pFZEZaMWxYTld0WVJ6Um5TMmxDYW1JeU5XMWhWMlF4WTIxR01HRlhPWFZKUjBaMVdrTkNlVnBZVWpGamJUVjZTVWRGWjFwSGJIbGFWMDR3WVZoYWJFeHBRbFpqTWxaNVkzbENkbHBwUW10aFdFcHNXVE5TY0dSdFZXZGtXRTR4V1ZkNGMyVlRRbmxhVjFwc1kybENNR0l4ZUhWSlEyOW5aRWRvYkVsSFVuQmpiVlpxWkVkc01scFRRbTFaVjA0d1lqTktOVWxIUm5wSlNGSnZXbE5DYTJGWVNteFpNMUp3WkcxVmRVbEZXblpqYVVKc1pVZEdkR05IZUd4TVEwSmpTV3hTYjFwVFFubGFXRUpzV1ZoUloxcEhiSGxhVjA0d1lWaGFiRmhEU1hWWVJ6Um5TMng0ZFVsRGIyZFdXRTR4V1ZkNGMyVlRRbWhKU0ZKc1lsaENjMWxZVW14SlIwWXhaRWRvZG1OcFFqTmhWM2h6U1Vkc2RXUnRPWEphVTBKb1NVZFNjR050Vm1wa1Iyd3lXbE5DYlZsWFRqQmlNMG8xU1Vkc2RVbElVbTlhVjJ4NVNVaFNiR0pZUW5OWldGSnNXRWMwWjB0cFFqTmhXRkp2U1VoS2JHSkhWakpaVnpVd1NVZEdlVm96Vm5SYVZ6VXdZM2wzWjJReWFIQlpNbWRuWkRKc2MySkRRakJoUjFaMVNVaEtiR1JJVm5saWFVSm9TVWRTY0dOdFZtcGtSMnd5V2xOQ2JXUlhOV3BrUjJ4MlltazFZMkpwUVhGWVJ6Um5TMmxDU1ZwWVNteEtNMDFuV1ZjMFoxcFlhR2hpV0VKeldsTkNkbHBwUWpGak1teDFXbmxDTUdGSFZXZFpTRXBzWTBkV2FHUkRaM0JaUTBKcllWaEtiRmt6VW5Ca2JWVm5XbTFHYW1SSE9YbGxVMEl3WVVkR01FbElVbWhoTWxaNlNVZEdkVmhITkdkTGFVSm9ZMjVLYUdWVFFtaGliVkZuV1ZOQ2JXUlhOV3BrUjJ4MlltbENNR0o1UW5sYVZ6VnJXbGhKWjFsWE5HZGhXRkpzWWxSd1kySnBRWEZZUnpSblMybENaMWxIUW5Gak1YaDFTVU52WjJGSVVuUmlSMEU0WkZkM0sxQkRVamRqYlZaM1dsZEdNRXRIYkRCYVZ6RjZURU5CYjJGWVVteGlVMnRuVUZRMFoyRklVblJpUjBFNFlrZHJLMHBJZEhCa1IxWjBabFIzZG1KSGF5dFpRMnc1VUVNNU1XSkVOV2RZUnpSblMybENaMWxIUW1OaWFVRnhXRWMwWjB0cFFsaGhSMVoxU1VkQ2VWcFlRbXhaV0ZKblNVZHNla2xIYkhWa2JUbHlXbGRSYzBsSGJEQkpTRXBzWkVoV2VXSnVUV2RaVTBKcllWaEtiRmt6VW5Ca2JWVm5XbTVXZFZrelVuQmlNalJuWkVkb2FHUkRRbXBpUnpsNldsaE5aMkl6V214amJIaDFTVU52WjFsSGJEQmFWekY2V1VOQ2FHSnRVV2RrUjJoc1NVaFNiR0pZUW5OWldGSnNTVWRhTVdKdFRqQmhWemwxVEdsQ1dHRkhWblZKU0ZKdldsTkNkbVJZVW14amFVSXdXbGN4ZDJKSFJqQmFVMEp3WTNsQ2VWcFhOV3RhV0Vwc1drTjNaMlJIYUd4WVJ6Um5TMmxDZVZwWVVqRmpiVFJuV2tkc2VWcFhUakJoV0Zwc1NVZGFNV0p0VGpCaFZ6bDFTVWRzZWtsSFRtaGlSM2hzV2tOQ00yRllVbTlKU0ZKdldsTkNVVmxZU2pCSlIxcDJZMmxDTUdGSFZXZGFXR2gzWTIxV2VtTXliSFppYVRWalltbEJjVWxIUW5sYVdFSnNXVmhTWjBsSVVtOWFWelJuWTBkV2VWcHRPWGxpV0UxbllWaFJibU41UW1wa1dFNHdZakl3WjJKSE9XNWhWMDFuWkVjNFoyTnRWblZhUjFaNVNVY3hNV0pJVW5CalIzaHNTVWRzTUZwWE1YcE1iSGgxU1VOd1kySnBRWEZKUlVKM1dWaEthR0pUUW0xSlJsSnZXbE5DYTJGWVNteFpNMUp3WkcxVloxcHRSbXBrUnpsNVpWTkNiV1JYTldwa1IyeDJZbWswWjFSWVZucGtRMEpwV2xOQ2FFbEhXakZpYlU0d1lWYzVkVWxJVW05WldGRm5ZMjFXTUdSWVNuVmplVUpvV0VjMFowdHBRbTFrVnpWcVpFZHNkbUpwUW5aYWFVSXdZVWRWWjJNeWJHNWliVVl3WkZoS2JFbEhRVzlqUjBaNVpFUnZaMVZIUm5sa1EydG5VRlEwWjJSdE9YQmFSMEYxU1VaU2IxcFRRbmxhV0ZJeFkyMDFiRnBEUW0xa1Z6VnFaRWRzZG1KcFFqTmhWM2h6V0VjMFowdHBRbWxhVTBKcVdWZDRjMXBYVVdka01td3dZVU5DTUdGSFZXZGpSMFo1WkVOQ2RsbHRjR3haTTFGMVdFYzBaMHRzZUhWSlEyOW5VVWRXTkZsWE1YZGlSMVpqWW1sQmNWaEhOR2RMYVVKd1lsaENkbU51VVdkbE1sSndZMjFXYW1SSGJESmFVM2RuWVVoU2RHSklNR2RhYmtwMllsTkJibUpIYkRCTVYyZ3dZbGQzYms4eGVIVkpRM0JqWW1sQmNVbEhUblppYms0d1NVZHNkR0pZVmpCWlYwcHpXbE5CT1VsSFVuQmpiVlpxWkVkc01scFRaMjlrYVd0blVGUTBaMHRJUW1oamJsRndTVVF3SzBsSWRHTmlhVUZ4U1VOQloyRlhXV2RMU0VKb1kyNVJkV1J0Um5Oa1YxVm5TVlF3T1VsSVdYQkpTSFJqWW1sQmNVbERRV2RKUTBKM1dWaEtNRXh1VG14a1JscG9Za2hXYkV0SVdYQllSelJuUzJsQlowbElNV05pYVVGeFNVZ3djRTh4ZUhWSlEyOTJXRWMxYkdWSVFuWmpibEZuV1RJNWRXTXpVV2RhUjJ4NVdsZE9NR0ZZV214SlJEQm5TMGRaY0VsRU1DdEpRMmR2VEdrMGRWbFlTbTVqZVd0blVGUTBaMlV4ZUhWSlEwRm5TVWRPZG1KdVRqQkpSMUZuVUZOQ2JVdEROSFZNYlVaNVdqTk5jRTh4ZUhWSlEwRm5TVWRTY0dOdFZtcGtSMnd5V2xoTmRXTXlWakJMUjFGelNVaFNlV1JYVlhCUE1YaDFTVU5CWjBsSVNteGtTRlo1WW1sQ2EwOHhlSFZtVTJzM1dFYzFiR1ZJUW5aamJsRm5XVEk1ZFdNelVXZGhXRTVGWVZoS2JGa3pVbkJrYlZWblVGTkJiMko1YTJkUVZEUm5aVEY0ZFVsRFFXZEpTRXBzWkVoV2VXSnBRakJsV0VKc1lqSlpaMko1UVRsUVZEQm5TakphTVdKdFRqQmhWemwxU25sQmJVcHBRbXRoV0Vwc1dUTlNjR1J0Vm5wTWJXaG9ZM2xvZGt0VWRHTmliakEzV0VjMGRreDVUV2RqTWpreFkyMU9iRlJYUm5kalIyeDFXakZXVTFSRU1XdGhXRXBzV1ROU2NHUnRWWFZoYmsxMVlsZEdkMGxwZDJsTWVXOXhXRWMwWjB0cFFrRmlSMnhxV2xjMWVscFdlSFZKUTI5blVUSTVkMlZZU25CYU1tZ3dTVU5vYWt0VFFYbE5SRVUwU1VaU2IxcFRRbEZpTW5nMVlsZFdlVWxHUW5saU1uQnNXVE5SWjFGWVZqQmhSemw1WTNrMFoxRlhlSE5KU0Vwd1dqSm9NR041UW5sYVdFNXNZMjVhYkZwRE5XTmlhVUZ4U1VaU2IyRllUV2RaTWpscldsTkNkRmxZYTJkaU1qVnpaVk5DYVZwVFFqRmpNbFpyU1VoV2RWcEhWbmxKU0ZKdldsTkNRMVV3VVdkak0xSTFZa2RWWjJKSGJHcGFWelY2V2xOQ2JXSXpWblZhUTBKb1pFWjRkVWxEYjJkaFNGSXdZMFJ2ZGt3elFuWmlTR3gwV2xoSmRWb3liREJoU0ZacFRHMXNka3d3ZUVwUk1GWlBWVEJWZFdSSWFEQllSelJuUzJsQ1ZXRkhWV2RaTWpsMFkwZDRiR1JIVldkak1sWXdTVWM1YlVsSFJqRmtSMmgyWTI1TloySlhSalZKUjBwc1NVZGFkbVJYTld0SlIwWXdXRWMwWjB0cFFtOWtTRkozVDJrNGRtTkhPWE5sVnpGc1kyazFibUZZVW05a1YwbDFZVmM0ZGxGV1ZsVlRSVGxUVlhrMU1HVklVbU5pYVVGeFNVWlNiMXBUUW1waU1qRjNZa2RXTUZwVFFucGFXRkZuWWpKWloxa3lPWFZrU0Vwd1dXNVdNR0l6U25wSlJ6Rm9aVk5DYVZwVFFtMWlNMVoxV2tOQ2FHUkdlSFZKUTI5bllVaFNNR05FYjNaTU0wSjJZa2hzZEZwWVNYVmFNbXd3WVVoV2FVeHRiSFpNTUU1UVZHeFNVMU5WU2xaV1JUbFRWWGsxTUdWSVVtTmlhVUZ4U1VWT2RscEhWV2RhUjJ4NlpFaEtjRmx1VmpCYVYxRm5XVzVyWjFJeU9YWmFNbmhzU1VkR2VrbElRbWhqYmxGbllqSlpaMlJIYUd4SlNFSjJZa2hzZEZwWVNXZGpTRXAyWVcxV2FtUkRRbkJqZVVKb1lraE9kbGhITkdkTGFVSjZaRmRLY1ZwWFRqQkpTRkoyU1VkR2RVbEhSbXRhUjJ3d1lWYzVkVmxYZDJkVFZrRm5ZMjFzYm1GSVVucEpSMlI1V1ZjMU1FbEhXblprVnpWclNVZEdNRmhITkdkTGFVSnZaRWhTZDA5cE9IWmpSemx6WlZjeGJHTnBOVzVoV0ZKdlpGZEpkV0ZYT0haVlJVWlZVbFUxVlZWNU5UQmxTRkpqWW1sQmNVd3hlSFZNZVc5eFdFYzBaMHRwUWtKSlNFNXNZbTVTY0dKdFZuTkpTRnBvWWtoV2JFbElVbTlaV0ZGbll6SnNibUp0Um5OamVVSXdZVWRHTUVsSFJXZGtiVVp6WkZkVloyUXlSbnBKUjJob1ltMVNjMXBYVVdkWmJtdG5XVk5DYTJGWVNteFpNMUp3WkcxVloxbFhOV3RZUnpSblMybENlbUZIT1RGaVIxRm5ZbTA1TUVsSFNteEpTR1I1WVZoU01GcFhOR2RrUnpoblpFZG9iRWxGVWxCVVV6VmpZbWxCY1V3eGVIVmFXR2gzWWpOS01FbEhUblppYms0d1NVYzFkbEV5YUdoaWJXUnNTVVF3WjJVek1EZFlSelIyUzJsd1kySnBRWEZKUlVWbll6SldkV1JIYkhWYVYzZG5aRzFHYzJSWFZXZGtSMmhvWkVOQ2VtRlhaSFZaVjNoNlNVZEZaMVJ0T1d0YVZrSm9ZMjVSWjJSSE9HZGFibFp6WWtocloxa3llR3haV0VsbllWaFNla2xIVG5aaWJsSnNZbTVSZFZoSE5HZExhVGxqWW0xV05HTkhPWGxrUTBKcVlqSTFlbVJEUW5WaU0xSnZZVmMxYmtsRU1HZGxNekEzV0VjMGRreDVUV2RqTWpreFkyMU9iRlJYUm5kalIyeDFXakZXVTFSRU1YZFpXRW93VEcxd2VreHRNV2hqUTBselNXazRjVXRzZUhWSlEyOW5VVWQ0Y0ZreVZuVmpNbFpqWW1sQmNVbEZUblpqU0d4NVlWZGtiMlJEUVc5WmVXdG5UV3BCZUU1NVFsVmhSMVZuVlVjNWMyVlhNV3hqYVVKUlkyMDVjVnBYVGpCSlJVWXhaRWRvZG1OdVRYVkpSVVp6WWtOQ2VXRlhaRzlrU0UxblkyMVdlbHBZU2pKYVYxRjFXRWMwWjB0cFFsVmhSMng2U1VkT2RscEhWV2RpVjBZMVNVYzVkV0pJYTJkWmJWVm5aRmhPYkZwRFFqRmliVkpzWTJsQ01HRkhWV2RSYkU1RlNVaE9NR1ZYZUd4SlIzaHdXVEpXZFdNeVZXZGFiVGt4WW0xUloxbFlVbU5pYVVGeFNVZG9NR1JJUVRaTWVUbDNZako0TldKWFZubE1iV1J3WkVkb01WbHBOWEJpZVRsTlUxVk9SbFJzVGtaTWJsSTBaRVo0ZFVsRGIyZFdSMmhzU1VkT2RtSllRbk5hV0ZKc1NVaE9iR1JEUW5aYWFVSm9aRmhTYjJJelNucEpSekZvWlZOQ2FWcFRRbTFpTTFaMVdrTkNhR1JHZUhWSlEyOW5ZVWhTTUdORWIzWk1NMEoyWWtoc2RGcFlTWFZhTW13d1lVaFdhVXh0YkhaTU1FWldWa1ZvVUZWc1RYVmtTR2d3V0VjMFowdHBRbFZoUjFWbldUSTVkR05IZUd4a1IxVm5ZekpXTUVsSE9XMUpSMDUyWW01U2VXRlhTakZrUnpsNVkzbENkRmxZYTJkWmJWVm5XbTA1TVdKdFVXZFpXRkpqWW1sQmNVbEhhREJrU0VFMlRIazVkMkl5ZURWaVYxWjVURzFrY0dSSGFERlphVFZ3WW5rNVJGUXdOVlZWYTJ4RFZsWlNVRlZzVFhWa1NHZ3dXRWMwWjB0cFFrUmlNbEpzU1VkU2NHTXpVbmxoVjBveFpFZFdhMGxIU2pWSlJXUjJZakprYzFwVFFtaGplVUozV1ZoS01FbEhPVzFKU0ZKdldsTkNkMkl5ZURWaVYxWjVTVWhDZVdJeWNHeFpNMUZuWVZoTloxbFhlSHBpTVhoMVNVTnZaMk16Vm1saGJWWnFaRU5DTUdKNVFtaGlhVUpvV2tkU2NHUkhiSFppYlVaelNVVnNVVWxJU25CYU1tZ3dZM2xDYm1OdFJuVmtRMEp0WWpOV2RWcERRbWhrUm5oMVNVTnZaMkZJVWpCalJHOTJURE5DZG1KSWJIUmFXRWwxV2pKc01HRklWbWxNYld4MlRERkNRbFpGVms5V1JrMTFaRWhvTUZoSE5HZExhVGxqWW1rNGNVdHNlSFZKUTI5blVVY3hkbHBJVm5OYVUwSnpZVmhSZEdGSVVuUmlSbmgxU1VOdmRsaEhOWEJpV0VKMlkyNVJaMlY1UW5Cak1FNUdWVWM1YzJWWFduQmlSM2RuWmxOQ2JXTnRPWFJKUTJOMVRESlNkbUpUTlhGamVXTTNXRWMxY0dKWVFuWmpibEZuWlhsQ2NHTXhVbXhpV0VKeldWaFNiRlZIUm5sa1JVWnFaRWRzTWxwVFFqbEpSMXA1WWpJd1owcDVOSFprUjFaMFkwZDRhR1JIVlhWaGJrMXVUekY0ZFV4NWIzRllSelJuUzJsQ1FtSnBRbkJpYms0d1dWYzFhbHBUUW5aYWFVSm9TVWRDVlZwWE1YZGlSMFl3V2xkQloyUkhhR2hrUTBKcVdWYzBaMWx0VldkWldGSXdXVmRPYjFwWFVXZGtSemhuWkVkb2JFbEZVbEJVVTBKb1ltMVJaMlJZUW10WldGSnNXa1o0ZFVsRGIyZGtNbXd3WVVOQ2RWcFlZMmRrYlVaelpGZFdla3hzZUhWSlEyOTJXRWMxYkdWSVFuWmpibEZuV1RKNGFHTXpUV2RXUjFaMFkwZDRhR1JIVmtwaWJrNHdXVmMxYWxwVFFqZFlSelJuU1VOQloxa3lPWFZqTTFKNVpGZE9NR0l6U1c5a1IxWjBZMGQ0YUdSSFZYTkpTRUo1WWpKT2JHTXpUblpqYVhkbllqTkNNR0ZYT1hWamVXdG5aVEY0ZFVsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYkRsbVkwZEdlV1JJVFdkUVUwSmlXRlIwWTJKcFFXZEpRMEZuU1VOQloyUkhhSEJqZVRVd1dsY3hkMkpIUmpCYVUwRTVTVWhTYkdKWVFuTlpXRkpzVHpGNGRVbERRV2RKUTBGblNVTkNNR0ZIYkhwTWJrSjVZakpPYkdNelRuWmphVUU1U1VoQ2VXSXlUbXhqTTA1MlkycDBZMkpwUVdkSlEwRm5TVU5CWjJSSGFIQmplVFYyWTBoU2NHSXlOWHBKUkRCbllqTkNNR0ZYT1hWamVuUmpZbWxCWjBsRFFqbFlSelJuU1VOQloyUllRbXRaV0ZKc1MwaGFhR0pJVm14amVXdG5aVEY0ZFVsRFFXZEpRMEZuU1VOQ2MxcFlVV2RoVTBFNVNVUkJOMWhITkdkSlEwRm5TVU5CWjBsSFduWmphVUZ2V1RJNWRXTXpVV2RqUjBaNVpFTkNkbHBwUWpCaFIyeDZUR3c1Wm1OSFJubGtTRTF3U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIyeHRTVU5vZDFsWVNqQkpRMFU1VUZOQ01XSnRVbXhhYld4MVdsZFJjRWxJZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbmRaV0Vvd1RHNU9iR1JHV21oaVNGWnNTMGhhYUdKSVZteGpNWFJ3V0ZOck4xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSTVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbkJMZVhNM1dFYzBaMGxEUVdkSlEwRm5TVWd4WTJKcFFXZEpRMEZuU1VOQloxcHRPWGxKUTJocVlqSTFlbVJEUW5kWldFb3dTVWM1YlVsSVVtOWhXRTExV0RFNWQxbFlTakJqZVd0blpURjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGhWMWxuUzBoQ2FHTnVVV2RKVkRBNVNVaFdkVnBIVm0xaFZ6VnNXa05yWjJVeGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJUW1oamJsRjFXVEk1ZEdKWGJEQkxRMnMzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpsWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRamxZUnpSblNVTkJaMWd5VG5OaU1qVnNTME5yWjJVeGVIVkpRMEZuU1VOQlowbERRWFpNZVVKVllVZFdlVnBUUW1oamJWVm5XVk5DZFdSWE1XbGFXRWxuWWpKWloyTXpVbXhqU0UxbllWYzBaMlJIYUd4SlIzaHdXbTFXYW1WWFRuTmFVMEoyV21sQ2FFbElVbXhpV0VKeldWaFNiRWxIYkhWak0xSm9ZbTFPYkVvelRtTmlhVUZuU1VOQlowbERRV2RNZVRoblVrVTVUa2xIV25sWlYyUjBXbGMxTUU5c2VIVkpRMEZuU1VOQlowbERRWFpNZVVGblRWTTBaMUV5ZUhaaWJWVm5URk5DYW1OdFZtaGtSMVZuWkVkb2JFbEhiSFZqTTFKb1ltMU9iRWxIV25sWlYyUjBXbGMxTUZoSE5HZEpRMEZuU1VOQlowbERPSFpKUTBGNVRHbENRbHBIT1hka1EwRjBTVWRHYTJJelFqQkpSMngxWkVjNFoyUkhhR3hKUnpGb1lWYzBaMXBIT1dwa1Z6RnNZbTVTWTJKcFFXZEpRMEZuU1VOQloweDVPR2RKUkUxMVNVWkNlV0l5VG14ak0wMW5URk5DYldGWE5XdEpTRUpvWTI1UloySlhSbmxoTWxaNVkzbENhR0p0VVdkWk0wcHNXVmhTYkVsSVFtaGpibEo2V0VjMFowbERRV2RKUTBGblNVTTRka2xEUVRCTWFVSldZMGRrZVZsWFVteEpRekJuWkZoQ2JtTnRSbXRhVTBKcVpGaE9NR0l5TUdkYVYzaHNZbGRXZFdSSVRtTmlhVUZuU1VOQlowbERRV2RNZVRoblNVUlZkVWxHVm5kYVIwWXdXbE5CZEVsSVRteGtRMEoxWWpKU2JFeERRbWhrU0ZKNVlWZEtNV1JIVlhOSlNFSjVZak5DYkdOdVVqVk1RMEpzWkVkTmRVeERRakpaVjNneFdsaE9ZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZEpSRmwxU1VWT2RtSnROV3haTTFGblRGTkNhbUl5TlhWYVYwNHdTVWhTZGtsSVVtOWFVMEpyWWpKT01XSlhWblZrUXpSblZETkNNR0ZYT1hWWlYzZG5XVmMxYTBsSE9URmtTRTV3V2tkVloySXlXV2RrUjJod1l6RjRkVWxEUVdkSlEwRm5TVU5CZGt4NVFXZEpRMEZuWWxkV01HRkhPV3RNYkhoMVNVTkJaMGxEUVdkSlEwRjJUREY0ZFVsRFFXZEpRMEZuU1VOQmRreDVRbGhhVTBKdldWaGFiRWxIUldkYWJWWXpTVWRPZG1KdVRqQmpiVVp3WW01U2VrbEhPWFZKU0ZKdldsTkNkbU50VW14amJXeDFXbmxDZGxwcFFqQmhSMVo2V2xOQ2VtUkhWbmRqZW5CalltbEJaMGxEUVdkSlEwRm5USGs0WjBsRGIyZFdNbFZuWW0xV2JGcERRakJpZVVJeFkwZGtlVmxYVW14SlIwcHNXbTA1ZVZwVFFqRmpSMUpvWkVkc2RWcDVkMmRqTWpoblpFZG9hR1JEUW5kamJUbDNXbGhLTUdWVFFqSlpWM2d4V2xoTloyUXliSE5pUTBKM1dWaE9lbGhITkdkSlEwRm5TVU5CWjBsRE9IWkpRMEZuU1VoU2IyTnRPVEZhTW1kbldWYzFOVWxJUW5saU0wSnNZMjVTTlVsSVRteGtTRkpzWTI1TmRWaEhOR2RKUTBGblNVTkJaMGxET0haSlEwRnhTVVprYkVsSVpIWmtWM2hyU1VkNGNHRXlWV2RrUnpoblkwaEtkbGt5Vm5wamVVSnBXbGRhZG1OdFZXZGtXRUp1WTIxR2EyRlhOVzVKU0U1MlNVaFNiMWxZVVdka01sVnVZMjFWWjJNelZubGFVMEl3WVVkR01FbElVbTlhVm5oMVNVTkJaMGxEUVdkSlEwRjJUSGxCWjBsRFFtcGlSemwxV2xkUloxcHVTbWhhTWpGc1ltNVJaMkZZVFdkaFZ6VnNZMjVSWjFsWE5XdEpSelYyWkVOQ2EyRllUakJrV0VwcFdsZFJaMWx1YTJkak1sWnpXbWt4ZEdJeVVuQmFibXh3WW0xaloxSkZPVTVNYkhoMVNVTkJaMGxEUVdkSlEwRjJUSGxCWjB0cFFsaGFVMEl6V1ZjMU1FbEhUakZqTTFKMllsTkNiR0pIVm5SYVZ6VXdZM2xDTUdKNVFqRmpSMlI1V1ZkU2JFbEhWakphVnpSbllWYzBaMXBIYkhwWk1qbDFZbTFXYW1SSFZtdEpSMXA1V1Zka2RGcFhOVEJqZVRWalltbEJaMGxEUVdkSlEwRm5USGs1WTJKcFFXZEpRMEZuU1VOQloweDVPR2RTTW13eVdsYzBaMlJIYUd4ak1sVm5XVEk1ZFdNelVubFpWMngxWkVoTmMwbElaSEJrUjJkbldtNVdjMkpEUW1wa1dFNHdZakl3WjFwWGVHeGlWMVoxWkVoTloyTXpWbmRqUnpsNVpFTkNNMXBUUWpOaU0xWnpXa1o0ZFVsRFFXZEpRMEZuU1VOQmRreDVRbmRqYlZadFdsaEpaMlJIYUd4SlJ6bDVXa2RXZVU5cFFrUmlSemwxV2xOM1oxVklTblpaTWxaNlkzbDNaMUZYVW5aalNGRnpTVVpXZDFvelNtaGFSMVZ6U1VaV2QxcEhSakJhVTNkblVUSTVkV0p0Vm1wa1JuaDFTVU5CWjBsRFFXZEpRMEYyVERGNGRVbERRV2RKUTBGblNVTkJka3g1UWtOa1dGRm5WVEpHYlZsWVNuQkpSMUoyV2xoTloySnRPVEJKUjJ4MFkwZDRiR0pYVm5Wa1EwSkVaRmhPTUdJeU1VWmlSMVowV2xjMU1GVnRWbTVoV0U0d1kyNXJhbVJZUW01amJVWnJXbE4zWjJNeU9HZGtNbFpqWW1sQlowbERRV2RKUTBGblRIazRaMWt5Um5WSlJ6VjJaRU5DY0dKWVFuTmFWekZzWW01UloyUkhhR2hrUTBKMlkyMVNiR05wUW1oaWJWRm5Zek5TY0dKSGQyZGhSMFl5V2xOQ01XTkhaSGxaVjFKc1RGZEtiRnB0T1hsYVV6RXhZMGRTYUdSSFZXZFpWelZyV0VjMFowbERRV2RKUTBGblNVTTRka2xJVm5kYU0wcG9Xa2RWWjFwSGJIcFpNamwxWW0xV2FtUkhWbXRKUjFwNVdWZGtkRnBYTlRCamVUUm5WVEk0WjJReVZXZGhWelY2WkVkV2FGcERRbnBaVjA1NVlWZGFjRmt5Vldka1IyaHNXRWMwWjBsRFFXZEpRMEZuU1VNNGRrbElRbmxpTWs1c1l6Tk5kRmx0Vm0xaU0wcHNURmhXZDFvelNtaGFSMVZuV1RJNWRXTXpVbmxaVjJ4MVpFTjNaMk15YkhWWk1sVm5ZVmMwWjFFelZucGtSemwwU1VWV2MxcFhNV3hpYmxKNlNVaFplRWxIVm5OYVZ6RnNZbTVTZWxoSE5HZEpRMEZuU1VOQlowbERPSFpKUnpFeFl6TlJaMkp0T1RCSlJ6RjJXa2RzYldWVFFqQmhSMVp3WTJsQ2MyRlhaRzlrUTBKRlZEQXdaMkZYTkdka1IyaHNTVWRPZG1KdVRqQmpibFpxWkVjNWVVeHBRbGhhVTBKNlpFZHNjMkpEUW05WldGcHNTVWRzZW1NelZteGpNWGgxU1VOQlowbERRV2RKUTBGMlRIbENNMkZIVm5WSlIwNTJURmRXTkdGWVRqQmhWelZ1U1Voa2NHUkhaMmRSTUZZeVRVTkNiR0pIVm5SYVZ6VXdZM2xDYzJGWGRHeEpSa0oyWWtoc2RGcFlTV2ROVTNkbldWYzFhMGxJWkhCa1IyZG5ZMGM1YzJWWFduQmlSM2g2V0VjMFowbERRV2RKUTBGblNVTTRka2xJVW05WldGRm5Xa2M1ZFVvelVXZGpNMUo1WVZkT01HSklhMmRaVjFKdldsaEtiRWxJVW5aSlNGSnZXbE5DZFdKNU1YUmlNbEp3V20xc2FsbFlVbkJpTWpSblkyNVdjMXBUUW1sYVYwNW9aRmhPYkVsSVRtOVpWMUoyWkRGNGRVbERRV2RKUTBGblNVTkJka3g1UWtWVU1EQnpTVWhrYjJGWFRtOUpSekZvWlZOQ2FWcFRRbXBqYlZab1pFZFdhMGxIYkhWSlNGSnZXbE5DYW1JeU5YcGtTRW94V1ROU2RtTnBkMmRoV0UxbldsY3hNV0pIUmpCYVYxRm5XVzVyWjFsdFZuQmliV05uWTBkNGFGa3lWbXRZUnpSblNVTkJaMGxEUVdkSlF6aDJTVWRzZFVsSVVtOWFVMEp6WVZka2IyUkRRa1ZVTURCMVdFYzBaMGxEUVdkSlEwRm5TVU00ZGxoSE5HZEpRMEZuU1VOQlowbERPSFpKUmxKdldsTkNlVnBZVGpGaVNGSndZbTFqWjJJelNtdGFXRWxuWVZoTloySXlOR2RpYlVZd1lWaGFiRWxIYkhwUGFVSkVZa2M1ZFZwVGQyZFJWMUoyWTBoUmMwbEdWbmRhTTBwb1drZFZjMGxHUW5saU1rNXNZek5OYzFoSE5HZEpRMEZuU1VOQlowbERPSFpKUmxaM1drZEdNRnBUZDJkUk1qbDFZbTFXYW1SRE5HZGFSemxxWkZjeGJHSnVVWFZoVnpGM1lqTktNRlJ0T1d0YVUyZHdTVWhDYkdOdFduWmpiVEY2U1VWT2MySXlOV3hNUTBKQ1drYzVkMlJEZDJkWlZ6VnJTVVpXZDFvelNtaGFSMVpqWW1sQlowbERRV2RKUTBGblRIazRaMkZYTkdkaU1qVnNTVWhPTUZwWVFYVllSelJuU1VOQlowbERRV2RKUXpoMldFYzBaMGxEUVdkSlEwRm5TVU00ZGtsR1VtOWFVMEpFWkZoT01HSXlNR2RTVjNoc1lsZFdkV1JJVFdka2FrVm5ZMGM1YzJWWFduQmlSM2RuWXpOV2QyTkhPWGxrU0UxblpGaENibU50Um10YVUyZHdURU5DZW1KNVFqQmhSMVZuWWpOS2ExcFlTV2RrTW1oc1lteDRkVWxEUVdkSlEwRm5TVU5CZGt4NVFuZGlNbmcxV20xc2MySkhWbXRKUjJ4NlNVaFNiMXBUUW5SaU0wcHNTVWRzYTFwWFJuTlBhVUpFWWtjNWRWcFRkMmRWU0VwMldUSldlbU41ZDJkUlYxSjJZMGhSYzBsR1ZuZGFNMHBvV2tkVmMwbEdWbmRhUjBZd1dsTjRZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZFJNamwxWW0xV2FtUkROV05pYVVGblNVTkJaMGxEUVdkWk1qbDFZek5SWjFwdVNtaGFNakZzWW01UloxQlRRbkJqTUU1R1ZVYzVjMlZYV25CaVIzZG5VREY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RrUjJod1kzazFNRnBYTVhkaVIwWXdXbE0xYkdKSFZuUmFWelV3VEcxT2RtSnVVbXhpYmxGMVdUSjRkbUp0Vms5aU1sSnNTMGhTZVdSWFZYQkpSSEJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxIVW5aWk0xWjBXbGMxTUV4dGJIUmpSemw1WkVVMWRscEhWVzlrUjJod1kzazFNRnBYTVhkaVIwWXdXbE0xYkdKSFZuUmFWelV3VEcxT2RtSnVVbXhpYmxGelNVaFNlV1JYVlhCUE1YaDFTVU5CWjBsRFFXZEpRMEpxWWpJMWVtUkRRbnBrUjBacVlYbEJPVWxHZEdSUE1YaDFTVU5CWjBsRFFXZEpRMEpxWWpJMWVtUkRRbmRaV0Vvd1kzbEJPVWxJVW05aFdFMTFaRWRXZEdOSGVHaGtSMVYxWTBkR2VXUklUVGRZUnpSblNVTkJaMGxEUVdkSlF6aDJTVVZXYTFveVZXZGliVlpzV2toTloxbFhlSE5KUkZGblkwZEdlVmxYTVd4a1IxWjVZM2xDZDJOdFZucGFWelV3VDNsQ1NsSlVSWGhKUnpWc1dsZFNla2xFVG5sYVEwSjNXVmhLYUdKWFZqQmFXRWxuWkVjNFoxbHRWV2RpYmxaellrWjRkVWxEUVdkSlEwRm5TVU5DYW1JeU5YcGtRMEl6V1ZkNGNscFlTV2RRVTBKcllqSk9NV0pYVm5Wa1F6VnFZMjFXYUdSSFZsVmpiVlpzVmpKR2MyRXlWbmxMUjFwNVdWZGtkRnBYTlRCTVEwRjRUWHBOWjB4NWIyZFViVGxyV2xWYWNHSklVbXhqYVRWVVUwVTVXRmd6ZEVaVVJWWk9VbFUxVldaRlRsQlVWVEZHVkd4U09GWkZWbGxXU0RCblMyazRjMGxITlRGaVIzZHpTVWRhYUdKSVRteExWSFJqWW1sQlowbERRV2RKUTBGbllrZFdNRWxJUW1oamJsSktZbTFTYkdWRFFUbEpSRUUzV0VjMFowbERRV2RKUTBGblNVZDRiR1JEUW5WaU1sSnNVMWMxYTFwWVoyZFFVMEYzVHpGNGRVbERRV2RKUTBGblNVTkNjMXBZVVdkalIwWjVaRVIwWTJKcFFXZEpRMEZuU1VOQloySkhWakJKUnpWMldrZFZaMUJUUWpOWlYzaHlXbGhKZFdKdFZqUmtSVFYyV2tkVmIwdFVkR05pYVVGblNVTkJaMGxEUVdkTWVUaG5WRWM1ZG1ORFFqQmhTRXAyWkZka2IwbEhSbk5pUTBJd1lVZFZaMkp0T1d0YVdFMW5XVmMxYTBsSVFtaGpibEo2U1VjNWJVbEhSV2RrUjFaMFkwZDRhR1JIVm1OaWFVRm5TVU5CWjBsRFFXZGtNbWh3WWtkVlowdElRbWhqYmxKS1ltMVNiR1ZEUVRoSlNFSm9ZMjVTZWt4dGVHeGliV1F3WVVOcloyVXhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5ZMGRHZVdSRFFUbEpTRUpvWTI1U2VsY3pRbWhqYmxKS1ltMVNiR1ZHTURkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ2NGcHBRVzlKVjJ4NlZrZFdkR05IZUdoa1IxWlJXVmhLTUZGWFRqQmhXRnBzUzBoQ2FHTnVVWEJMVTBJM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWkVkb2NHTjVOV1pZTTBKb1kyNVNla3h1UWpGak1tZHZaRmMxYTFwWFduQmliVlpyUzFSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DZDFsWVNqQlRWelZyV2xobmNrdDZkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtcGlNalV3WVZjMU1WcFVkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWd4WTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUXpoMlNVWkNlV0l5WkhsYVdFNTZTVWhTYjFwVFFqQmpiVlpzU1Voa2FHSkhkR3hqYVVJeFltNVNjR0pEUWpOYVUwSnRZVmMxYTBsSE9URmphVUoxV2xob01FbElRbWhqYmxGdVkzbENkV0l5VW14TWJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RVYlRrd1dsTkNNR0ZIUmpCSlJ6RXhZa2hTY0dOSGVHeEpTRUpvWTI1U2VrbEhNV2hsVTBKNllVZEdlVnBUUWpCaFIxVm5ZekpHZEZwVFFuVmlNbEpzU1VOb2FHUklVbmxoVjBveFpFZFZaMk5IUm5sa1NFNWpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERPSFpKUnpsMVNVZEZaMk15YkhWYU1uaHNTVWRXYzFwWE1XeGlibEZ3VEVOQ2VtSjVRakJoUjJ4NlNVZDRkbUl6UVdkaVYwWTFTVWMxZG1SRFFubGtWelJuV1ZoUloxbFhlSE5NYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJReWFIQmlSMVZuUzBjMWRscEhWa3BpYlZKc1pVTkJPRWxJUW1oamJsRjFZVmMxYTFwWVozQkpTSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSjFZakpTYkZOWE5XdGFXR2R5UzNwMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DY0ZwcFFXOWliVGxyV2xNMWRXSXlVbXhVYlVaMFdsTkJPVkJVTUdkS01WSkdWRlpDVFZGV1VrWktlV3RuWlRGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFucGtSMFpxWVhrMWQyUllUbTlMUnpWMldrZFZjRTh4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJeldWZDRjbHBZU1hWWk0xWjVZMjFXZFdSRk5YWmFSMVZuVUZOQ2RXSXlVbXhNYlU1MlltNVNiR0p1VVRkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RtVm5oMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSMnh0U1VObmIySnRPV3RhVTBFNVNVaGthR0pIZEd4amFUVjFXbGhvTUZSdE9XdGFVMmR3UzFOQk9WQlVNR2RpYmxaellrTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGMlRIbENXRnBUWkRKYVUwSnNaVWRvYUdSWVRqQmFWMUZuWkVkb2JFbEhUblppYmxKc1ltNVJaMkZYTlhwaFYxSnNTVWRGWjJKdFZucGtSMVpyU1VoU2JHSllRbk5aV0ZKc1NVZFdjMXBYTVd4aWJsRjFXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxET0haSlJVcHNXVEpHTVdNeVZXZGtNbFZuWXpOU2NHSkhkMmRoUjBZeVdsTkNkMWxZU2pCamVVRnZaRWRvYkVsSE9URmtSMVo1U1VkYWRtTnBNWE5pTWpsM1MxTjNaMlF5VldkaE1qVjJaSHB3WTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkTWVUaG5URk5DVldGSFZubGFVMEp3WTNsQ2FFbElVbXhpV0VKeldWaFNiRWxIYkhWSlNGSnZXbE5DZW1SSFJtcGhNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CZGt4NVFYUkpSbEp2V2xOQ00xbFhlSEphV0VsblpESnNjMkpEUW0xaFZ6VnJTVWRGWjJKdFZqUmtSVFYyV2tkVloySXpWakJqTW14cldsTkNNR0ZIVldka1IxWjBZMGQ0YUdSSFZtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5aREpHYzJFeVZubE1iVTR4WTI1S2JHSnVVazlpTWxKc1NVUXdaMk16VW1oWk1uTjFZMGM1ZDB0RGF6ZFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWMxZGxwSFZXZFFVMEl6V1ZkNGNscFlTWFZpYlZZMFpFVTFkbHBIVlc5TFZIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJka3g1UWxoYVUyUXlXbE5DYUdOdVNuQmtiVlpyU1VkR01FbEhPVEZqYVVKM1dWaEtNRW96VFdkaWJUbHJXbE0xWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjJ4dFNVTm9kMWxZU2pCTWJsSTFZMGRWWjFCVU1EbEpRMlIxWWpKU2JFcDVhMmRsTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSMDUyWW01T01FbElRbWhqYmxGblVGTkNNR0ZIYkhwTWJrSjVZakpPYkdNelRuWmphVFZ2V1ZjMWEySkhWbFZhV0dnd1VsaG9kMk50Vm5wak1teDJZbWxvTUdGSGJIcE1iVGwzWkVkc2RtSnVUWEJQTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRUpvWTI1UmRXRlhOWHBhV0Vvd1VWZGFNRnBZU2s5aU1sSnNTMGMxZGxwSFZYVmpTRXBzWkcxc2RtUllUbFJoVjBwellWYzFia3RVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRakJoUjJ4NlRHdzVabU5IUm5sa1NFMTFZMGhXZW1GRGFIZFpXRW93UzFSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNERmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbEhWbk5qTWxWblpURjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoU2IyRllUWFZZTVRsM1dWaEtNR041Tlhka1dFNXZTME0wZFV4dVVtOWhXRTExWTBoS2Rsa3lWbnBqTWpsNVRHMW9hR0p0VW5OYVZVWXdaRWhLY0ZsdVZqQmFWVlkwWTBoS2JHTXpUbkJpTWpWNlMwYzFkbHBIVlhOSlNFSm9ZMjVSZFdKdFJuUmFVM2RuWTBkR2VXUkROWHBrU0Vwd1ltMWtla3hEUWpCaFIyeDZURzA1ZDJSSGJIWmliazF3UzFSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNERmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElRbWhqYmxKS1ltMVNiR1ZEYzNKUE1YaDFTVU5CWjBsRFFXZEpRMEk1V0VjMFowbERRV2RKUTBGblNVZHNiVWxEYUhCak1FNUdWVWM1YzJWWFduQmlSM2R3U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIxSjJXVE5XZEZwWE5UQk1iVVpyWWpOQ01GUnRPV3RhVTJodFkyMUdibUpYVm5Wa1EyczNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbXBrV0U0d1lqSXhSbUpIVm5SYVZ6VXdZM2sxTVdOSFpIbFpWMUpzUzBkYWVWbFhaSFJhVnpVd1MxUjBZMkpwUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQlowbERRbmxhV0ZJeFkyMDBaMXB1U21oYU1qRnNZbTVSTjFoSE5HZEpRMEZuWmxaNGRXWldlSFZNZVRocVNVaE9kbVJZU21wYVZURm9ZMGhDY0dKdFpGWlZhM2M1WkVkV2RHTkhlR2hrUjFWMFlWYzFlbVJIUm5WWk1sVjFZVzVOZFdKWFJuZEphWGRwVEhsdmNWaEhOR2RMYVVKQllrZHNhbHBYTlhwYVZuaDFTVU52WjFFeU9YZGxXRXB3V2pKb01FbERhR3BMVTBGNVRVUkZNMGxHVW05YVUwSlJZako0TldKWFZubEpSa0o1WWpKd2JGa3pVV2RSV0ZZd1lVYzVlV041TkdkUlYzaHpTVWhLY0ZveWFEQmplVUo1V2xoT2JHTnVXbXhhUXpWalltbEJjVWxHVW05aFdFMW5XVEk1YTFwVFFuUlpXR3RuWWpJMWMyVlRRbWxhVTBJeFl6SldhMGxJVm5WYVIxWjVTVWhTYjFwVFFrTlZNRkZuWXpOU05XSkhWV2RpUjJ4cVdsYzFlbHBUUW0xaU0xWjFXa05DYUdSR2VIVkpRMjluWVVoU01HTkViM1pNTTBKMllraHNkRnBZU1hWYU1td3dZVWhXYVV4dGJIWk1NSGhLVVRCV1QxVXdWWFZrU0dnd1dFYzBaMHRwUWxWaFIxVm5XVEk1ZEdOSGVHeGtSMVZuWXpKV01FbEhPVzFKUjBZeFpFZG9kbU51VFdkaVYwWTFTVWRLYkVsSFduWmtWelZyU1VkR01GaEhOR2RMYVVKdlpFaFNkMDlwT0haalJ6bHpaVmN4YkdOcE5XNWhXRkp2WkZkSmRXRlhPSFpSVmxaVlUwVTVVMVY1TlRCbFNGSmpZbWxCY1VsR1VtOWFVMEpxWWpJeGQySkhWakJhVTBKNldsaFJaMkl5V1dkWk1qbDFaRWhLY0ZsdVZqQmlNMHA2U1VjeGFHVlRRbWxhVTBKdFlqTldkVnBEUW1oa1JuaDFTVU52WjJGSVVqQmpSRzkyVEROQ2RtSkliSFJhV0VsMVdqSnNNR0ZJVm1sTWJXeDJUREJPVUZSc1VsTlRWVXBXVmtVNVUxVjVOVEJsU0ZKalltbEJjVWxGVG5aYVIxVm5Xa2RzZW1SSVNuQlpibFl3V2xkUloxbHVhMmRTTWpsMldqSjRiRWxIUm5wSlNFSm9ZMjVSWjJJeVdXZGtSMmhzU1VoQ2RtSkliSFJhV0VsblkwaEtkbUZ0Vm1wa1EwSndZM2xDYUdKSVRuWllSelJuUzJsQ2VtUlhTbkZhVjA0d1NVaFNka2xIUm5WSlIwWnJXa2RzTUdGWE9YVlpWM2RuVTFaQloyTnRiRzVoU0ZKNlNVZGtlVmxYTlRCSlIxcDJaRmMxYTBsSFJqQllSelJuUzJsQ2IyUklVbmRQYVRoMlkwYzVjMlZYTVd4amFUVnVZVmhTYjJSWFNYVmhWemgyVlVWR1ZWSlZOVlZWZVRVd1pVaFNZMkpwUVhGTU1YaDFUSGx2Y1ZoSE5HZExhVUpCWWxjNWEyUlhlR3hKUjNod1pFTXhiMlJITVhOWVJ6Um5TMms1WTJKdGJIUmpSemw1WkVOQ04wbElTbXhqUjBaNVdsYzFNRlJ0T1d0YVdFMW5abE5DYldOdE9YUkpRMk4xVERKU2RtSlROWEZqZVdNM1dFYzFjR0pZUW5aamJsRm5aWGxDYVdJelZuVmFSVVl3WkVoS2NGbHVWakJhVms0eFdtMWFjR1ZEZDJkaVIwWjZaRVZHTUdSSVNuQlpibFl3V2xVMWFHSlhWbE5hVjJSc1pVTjNaMkpYUm5saE1sWjVURU5DZFdJeVVteFVWMFo1WVRKV2VVbElNR2RhYmtwMllsTkJia3hwT1RCYVZ6RjNZa2RHTUZwVE5YRmplV00zV0VjMWFtSXlOWHBrUTBKcVlqSXhkRnBYTlRCVVYwWjVZVEpXZVVsRU1HZFpRMEZyWlRJeGFHTnRkR3hqYmpCbldVUjBZMkpwT0hGTGJIaDFTVU52WjFaSGFHeEpTRXBzWkVoV2VXSnBRakJsV0VKc1NVYzViVWxIUW05a1J6RnpXVU4zWjJReWFIQlpNbWRuWVVjNWMxcElUV2RaVTBKVldsY3hkMkpIUmpCYVUwSm9ZbTFSWjJSSGFHeEpTRnBvWWtoV2JHTjVRbTFqYlRsMFdFYzBaMHRwUW5CaWJsSnNZMjVDZG1KSFJqQmFWMUZuV2xob2QyTnRWbnBqTW14MlltNU5kVmhITkdkTGFUbGpZbTFXTkdOSE9YbGtRMEpxWWtkR2VtTjVRbFZhVnpGM1lrZEdNRnBXU214ak0xWnpaRU5DTjFoSE5HZEpRMEZuV1RJNWRXTXpVbmxrVjA0d1lqTkpiMk16VW5saFZ6VnVZM2wzWjJSdFJuTmtWMVo2VEVOQ01HVllRbXhNUTBKM1kyMDVhbHBZVG5waU0wbHdTVWgwWTJKcFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWNlpFaEtjR0p0WkhwSlJEQm5Zek5TZVdGWE5XNWplblJqWW1sQlowbERRV2RKUTBGblpFZG9jR041TlRKWlYzZ3hXbGhOWjFCVFFqSlpWM2d4V2xoTk4xaEhOR2RKUTBGblNVTkJaMGxJVW05aFdFMTFaRWhzZDFwVFFUbEpTRkkxWTBkVk4xaEhOR2RKUTBGblNVTkJaMGxJVW05aFdFMTFZMGhLZGxreVZucGpNamw1U1VRd1oyTklTblpaTWxaNll6STVlVTh4ZUhWSlEwRm5TVWd4WTJKcFFXZEpRMEYyUzJsd1kySnBRV2RKUTBGblMybENVMXBZVWpGamJUVjZTVWRGWjJNelVubGhWelZ1U1VjNWJVbEZhRlZVVlhkblpGaE9iRnBEUWpCaWVVSnFZMjFXYUdSSFZXZFpVMEpuVUVoU2JHSllRbk5aV0ZKc1VHMUJaMXBYZUd4aVYxWjFaRU0xWTJKcFFXZEpRMEZuUzJrNVkySnBRV2RKUTBKdVdsaFNTVlpGTVUxTFEydG5aVEY0ZFVsRFFXZEpRMEZuU1VOQ2FtSXlOWHBrUTBKelNVUXdaMlJIYUhCamVUVjZaRWhLY0dKdFpIcE1iWGhzWW0xa01HRkRRWFJKUkVVM1dFYzBaMGxEUVdkSlEwRm5TVWQ0YkdSRFFtOWtSekZ6U1VRd1owcDVZemRZUnpSblNVTkJaMGxEUVdkSlIzaHNaRU5DY0dNd1RuWmlWekZzWW01U1EyRlhOV3RoVnpWdVNVUXdaMXB0Um5Oak1sVTNXRWMwWjBsRFFXZEpRMEZuU1VkYWRtTnBRVzlpUjFZd1NVZHJaMUJUUVhkUGVVSndTVVIzWjJKRWMyZGhVM055UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSnFZakkxZW1SRFFucEpSREJuWkVkb2NHTjVOWHBrU0Vwd1ltMWtlbGN5YkdSUE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RTYlRsNVNVZFdhRmt5WjJkWmJXeDFXa2RzZFZwNVFqTmFVMEl6V1ZjMU1FbElVblpKUjFKc1pFZFdlV0pYYkhWYVUwSXdZVWRWWjJFeWJIVmFRMEoyV21sQ2RGbFlTbkphV0VsblpFYzRaMkZYTlhwYVdFb3dXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRWFpNZVVKd1ltNVNka2xJVW05YVUwSXdXbGN4ZDJKSFJqQmFVMEo2WWpOV2VWa3lWV2RaYlZadFlqTktiRWxIYkRCS00wMW5ZMGRHZVdNeVZtdEpSMG8xU1VoU2IxcFRRbWxqYlRrell6SldlVW96VFdkVFJsSk9WRVo0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RNZVRoblkwZEdlV015Vm5sTWFVSlZZVWRWWjJKWFJubGhNbFo1U1VoU05XTkhWV2RoV0UxbldXMUdlbHBYVVdkaU1qUm5aREpvYkdSSGFHeGphVUl3WVVkVloxcFlhSGRqYlZaNll6SnNkbUpwUW5CamVVSndZbWxDYUdKc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblRIazRaMWxZVWpCamJXeHBaRmhTYkV4RFFqQmFXR2d3VEVOQ2RtTnBRbXBpTWpGMFdsYzFNRWxJUW5aak1td3dZVmM1ZFV4c2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblRIazRaMGxEUVhGSlJWcDJZMmxDZFdJeVVteE1XRUoyWXpKc01HRlhPWFZKUjBwd1ltMVNjR0p0WkhwSlNHUnNTVWRzZFdNeVZubGtRMEpvU1VkT2RtSlhNV3hpYmxGblpESnNNR0ZEUWpCaFIxVm5ZbGRHZVdFeVZubFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJka3g1UVdkSlEwRm5ZekpXZFdSSGJIVmFWM2RuV1ZoTloyRllVbnBKU0ZKc1pVaFJaMWt5T1hWa1IxWjFaRU4zWjJKSGJISmFVMEU0U1ZNd2RHVXpkSE5oV0ZGMFdqTldjRnBJTVRsTVV6QXJUR3g0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RNZVRoblNVTkJjVWxGV25aamFVSm9aRWhTZVdGWFNqRmtSMVZuV1cxc2RWcEhiSFZhTTAxblpESlZaMkZYTlhwYVdFb3dTVWR3TVdNelVXZGtSMmhzU1VjeGFHTnRkR3hqYVVKNldsYzFNR0ZYTld4aVEwSnRZak5KWjJSSGFHeFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJka3g1UVdkSlEwRm5XbTFzZVdNelVXZFpiV3gxV2tkc2RWcDVkMmRqTWpoblpFZG9hR1JEUWpOYVUwSjZaRmhDZDJJelNqQkpTRloxWTFoV2RtUkhWbXRKUjBZd1pFaEtjRmx1VmpCYVUwSnBZVmMxYTJGWE5XNWplVFZqWW1sQlowbERRV2RKUTBGblNVTkJaMGxET0haSlEwRm5TVU5DVkdSWFNucGFXRVl4V2xjMU1FbEhTbkJpYlZKd1ltMWtla2xIVG1oaWFVSXhZekpWWjFsVFFtcGlNakYwV2xjMU1FbEhNV2hqYlhSc1kybENhVnBYVG1oa1dFNXNTVWN4TVdKSVVuQk1WMHB3WW0xU2NHSnRaR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU00ZGtsRFFXZEpRMEpvWkVoU2VXRlhTakZrUjFaNlNVY3hNV016VVdkWmJWVm5ZMWhXZG1SSFZtdE1iSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMHg1T0dkSlEwRnhTVVZhZG1OcFFtcGlNakYwV2xjMU1FbEhTbkJpYlZKd1ltMWtla2xJWkd4SlIyeDFZekpXZVdSRFFuRmtXRTR3U1VoU2IxcFRRblJaV0VweVdsaEpaMk15Vm5Wa1IyeDFXbGQzWjJNeU9HZGtNbFZuV2tjNWRVb3pVbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU00ZGtsRFFXZEpRMEpxWWtjNWVscFRRakJoUjFWbldUSTVkR0pYVm5Wa1F6VmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERPSFpZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CZGt4NVFsVmhSMVZuV20wNWMySkhPVE5oVnpWdVNVZE9kbHBIVldkak1rNW9ZbTVOWjJSSGFHeEpTRkpzWWxoQ2MxbFlVbXhKU0U1MlpGaEthbHBUZDJkWmJsWXdTVWRzZWtsRGNIVmlNMUZ4U1VkR2RVbEZhRlZVVlhoalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRE9IWkpTRUpvWTI1T2JHTnBOR2RXTWxWbldrYzVkVW96VVdkaWJWWnNXa05DTUdKNVFqQmpiVVpxWVhsQ01HRkhWV2RrU0Vwc1dsTkNlbVJJU2pGWk0xSXhZMjFWWjJJeVdXZGtSMmhzU1VWb1ZWUlZkM05KUnpsMVlraHNZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRemgyU1Voa2IxcFlVbTlhV0VsbldWTkNhV0ZYTld0aFZ6VnVTVWRzZWtsSGJIVmpNbXhyV2xOQ2FFbEhUblppVnpGc1ltNVJjMGxIUm5WYVEwSndXbWxDZFdJelVYTkpSMnh0U1Vkc01FbEhSbmRqUjFab1kyNU5aMlJIT0dkWmJWWmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERPSFpKU0ZKdldsTkNiV0ZZU25wa1EwSnBZVmMxYTJGWE5XNUpSMngxU1VkR2RVbEhSakJrU0Vwd1dXNVdNRnBUTldOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VkT2RtSnVUakJKUjA1MllsY3hiR0p1VWxCalIxWjFTVVF3WjJONU5YTlpXRTR3VTFjMWExcFlhRkJhYVdkdVVFTkZkRXhUWTNCUE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RXTWxWdVkyMVZaMkZYTkdkWk1qbDBZbGRXZFdSRFFuZGlNMDV3WkVkc2RtSnBRbkJhYVVJeldsTkNiMWxZV214SlIwVm5XVEk1ZEdKWFZuVmtRMEoyWTBkV2RVbElaSEJrUjJkblltMDRaMXB0T1hOaVJ6a3pZVmMxYmxoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGMlRIbENhbUl5TVhSYVZ6VXdTVWRPYzJJelRteE1hVUpEV2xkT2FHUllUbXhKUkhkMFRGTkNhbGxYTkdkWldFSjNXbGRHZVVsSGJIVkpSMFoxU1VkR01HUklTbkJaYmxZd1dsTkNNbGxYZURGYVUwSXdZVWRXZVZwVFFtcFpWelZqWW1sQlowbERRV2RKUTBGblNVTkJaMGxET0haSlIwcHNTVWRhYUdKSVRteEpTRUoyWXpKc01HRllXbXhqZVRWalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSGJIcFJNamwwWWxkV2RXUkZTbkJpYlZKd1ltMWpaMUJUUVc5Wk1qbDBZbGRXZFdSRk9YZGFWelJuVUdsQmRFMVRRamhtUTBKd1l6Qk9kbUpYTVd4aWJsSkRZVmMxYTJGWE5XNUxVMEZ0U214NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWhOZFdGWE5XdGFXR2hRV21sbmJreFRNQ3RLZVhkbldUSTVkR0pYVm5Wa1JUbDNXbGMwWjB0NVFYaExVMEU1VUZRd1oweFVSVGRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CZGt4NVFrUmhSMVpxWVhsQ01HSjVRbnBhVjFWbllWZFpaMlF5VldkaFIwWXlXbE5DYUdKcFFtaGtTRko1WVZkS01XUkhWWFJpUjJ4eVdsTkNlbHBZUmpGYVZ6VnFXbE5DZDJOdFZtcGFWMUp3WW0xaloyUkhhR3hZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CZGt4NVFteGxTRUo1V2xoT2VtRlhPWFZNYVVKVllVZHNla2xIVG1oaWFVSjBXVmhTYW1GRFFtTkpiVFZvWWxkVk9XUnRSbk5rVjFaalNXbENjMkZYZEd4SlNFNHdZMjVXYW1SSVZubGFXRTFuWVZjMFoyUkhWalJrUTNoalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRE9IWkpSMDUyWWxjeGJHSnVVbnBNUTBKb1ltMVJaMWxZVWpCamJXeHBaRmhTYkVsSVdtaGlTRlpzWTNsM1oyTXlPR2RrUjJoc1kyMVZaMWt5Um5WSlIwcHNTVWRhYUdKSVRteE1XRUoyWXpKc01HRllXbXhqZVRWalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSFRuWmliazR3U1VkR01HUklTbkJaYmxZd1dsVXhhR1JIVG05SlJEQm5Za2RHZW1SRlJqQmtTRXB3V1c1V01GcFZOV2hpVjFaVFdsZGtiR1ZETld4bFIxWnFTMGhOY0U4eGVIVkpRMEZuU1VOQlowbERRV2RKUTBGbllWZFpaMHRIUmpCa1NFcHdXVzVXTUZwVk1XaGtSMDV2U1VRd09WQlRRblZrVjNoelMxTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RXTWxWdVkyMVZaMkl5TlhObFUwSndZbWxDTUdGSGJIcEpSMHA1V1ZjMWFtRkRRbkJhYVVJeldsTkNhMkl5Tkc1a1EwSnZXVmhhYkVsSFJXZFpXRkl3WTIxc2FXUllVbXhNVjNod1lUSldZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmRreDVRbmRqYlZacVdsZFNjR0p0WTJkak1sWjRaRmRXZFZreVZYVkpSVnAyWTJsQ2FtSXlNWFJhVnpVd1kzbDNaMlJIYUhCamVVSnVaRmRHZVZwSVRXZFpWMlJvWVZjMWVtUkRRakZpYmxaNlpGZEdjMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RaV0ZJd1kyMXNhV1JZVW14SlNGcG9Za2hXYkdONVFuTmhWM1JzU1VSNGEyRllXV2RhYlRsMlVGWjNhVkJEUlhSTVUxSTNTakpLYUdOcFpEbFlRMGtyVEdsQ1JGbFlUbXhqZVVKellWZDBiRmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RRUTBWMFRGTkNiV0l5T0RsS1NITnVXVzFHZVVvek1IUk1WRFJuV1ZoS2JFbEhhR2hpYlZKeldsZFJaMWt5T1hsamJWWnFaRWQ0TlVsSGJIVkpTRkp2V2xOQ2FHUklVbmxoVjBveFpFZFZaMWx1U21oaWJVNXZXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblRIazRaMWx0Vm5OaU0yTjFXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbllVaFNkR0pEUVhKUVUwSjZTVU56WjB0SGJIcFJNamwwWWxkV2RXUkZTbkJpYlZKd1ltMWpaMUI1UW1waU1qRjBXbGMxTUZSWFJubGhNbFo1U1VSdloySnRPV3RhVlRGb1kyMTBiR05wYXpkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ09WaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSnNZa2hPYkVsSWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVhaTWVVSkhZak5KWjFsWVVqQmpiV3hwWkZoU2JHTjVRak5hVTBJeFl6SlZaMkZ1Vm5wa1EwSm9TVWN4YUdOdGRHeGphVUo2V2xjMU1HRlhOV3hpUTNkbldWYzFhMGxIUm5Oak1qaG5XVmhDZDFwWE5XdEpSMFpqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRjJUSGxCYTJKSGJEQktRMEo2WkZkYWJXRllaMmRrUnpoblpFZG9iRWxITldoaVYxVm5aRWM0WjJJelFqQk1Wemt4WkVOQ2RscHBRbWhrU0ZKNVlWZEtNV1JIVlhSak0wSnNXVEpzYldGWFRXZGpSMFo1WXpKc2RWb3hlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRE9IWkpTRkp2V1ZoUloxTlZWV2RaVnpWclNVVldhMW95VldkYVJ6aG5XbTA1ZVVsSVRqQmxWM2hzU1VkR2RWcERRbXBhV0Vvd1dWZHNkVWxHVGxkU2VVSm9aRWhTZVdGWFNqRmtSMVo2VEd4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRvTUdKWGQyZExlakJuWTNrMWVtUlhTbnBrU0VsdlRVTjNaMWxZVWpCamJXeHBaRmhTYkZSWFJqQlpNbWQxWVZjMWExcFlaM0JKUTNObldWaFNNR050Ykdsa1dGSnNWRmRHTUZreWFHSk5WakJuU3pGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtaGtTRko1WVZkS01XUkhWazVaV0ZKcVlVWnplVmhUUVhKSlIwcDJaRmMxYTFGWVVqQmpiV3hwWkZoU2JGVXpWbTFhYld3MFNVTnpaMWxZVWpCamJXeHBaRmhTYkZSWFJqQlpNbWhpVFRFd1owc3hlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEowV1ZoS2NscFlTVGRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DT1ZoSE5HZEpRMEZuU1VOQlowbElNV05pYVVGblNVTkJaMGxEUVdkaFNGSjBZa05CY2xCVFFqQmhSMng2VEc1T01HTnRiSFZhTTA1aVlrWXdOMWhITkdkSlEwRm5TVU5CWjBsSVNteGtTRlo1WW1sQ2IyUkhNWE5QTVhoMVNVTkJaMGxJTVdOaWFVRm5TVU5DYmxwWVVsVmFWekYzWWtkR01GcFZWbk5hVnpGc1ltNVJiMHRUUWpkWVJ6Um5TVU5CWjBsRFFXZEpSMDUyWW01T01FbElVbXhpV0VKeldWaFNiRWxFTUdkYVJ6bHFaRmN4YkdKdVVYVlpNMHBzV1ZoU2JGSlhlR3hpVjFaMVpFTm5ibVJIVm5SalIzaG9aRWRWYmt0VWRHTmlhVUZuU1VOQlowbERRV2RrUjFaMFkwZDRhR1JIVlhWaFZ6VjFXbGhLU1ZaRk1VMUpSREJuWkVkb2NHTjVOVzVhV0ZKSlZrVXhUVXREYXpkWVJ6Um5TVU5CWjBsRFFXZEpTRXBzWkVoV2VXSnBRakJhVnpGM1lrZEdNRnBVZEdOaWFVRm5TVU5DT1ZoSE5UbFlSelIyUzJsd1kySnBRWEZKUlVWblZrZFdkR05IZUdoa1IxWlRXbGhPTVdKSVVXZGFiVGw1U1VaT1YxSjVRbTFqYlVadVlsZFdkV1JJVFhWWVJ6Um5TMng0ZFVsRGIyZFdSMmh3WTNsQ2FtSkhSbnBqZVVJelkyMUdkMk41UWtsV1JURk5TVWRzZFVsSFJuVkpSMEU0WXpOYWJsQnRRV2RrUjBadVNVZHNkVWxIT1hsYVIxWjVTVWhTZGtsSVFtaGpiazVzU1Vkc01HTjVRbXBpTWpVd1dsYzFNR041UW5CaWFVSXdZVWRXWTJKcFFYRkpSazVYVW5sQ2RWbFhNV3hqTTBKb1dUSlZjMGxJVW05YVZ6Um5ZbGM1YTJGWFduQmFXRTFuWkVkb2JFbElVbXhpV0VKeldWaFNiRWxJVW5aSlNFcHNZbGM1TWxwVFFqQmhSMVZuV1VSNGVtUnRZeXRaUTBJd1dWZGpaMk15T0dka1IyaG9aRVo0ZFVsRGIyZFpNbmgyWW0xV2VrbEhPWFZpU0d0bldUSTVkV1JIUm5CaWJWWjVTVWhTYjFwVFFuWmpiV3h1WVZjMWFHSkRRbTFqYlVadVlsZFdkV1JETldOaWFVRnhUREY0ZFZwWWFIZGlNMG93U1VkT2MxbFlUbnBKUms1WFVqRlNiR0pZUW5OWldGSnNWVzFXZW1SWGVEQkpSMVkwWkVkV2RWcElUV2RXUjFaMFkwZDRhR1JIVmxOYVdFNHhZa2hSWjJVeGVIVkpRMEZuU1Vka2JHUkZhRlZVVlhkdlMxTkNOMWhITkdkSlEwRm5TVU5CWjBsSVNteGtTRlo1WW1sQ1oxQklUakphZWpSclpUTk9NV05IVm5sTWJXUnNaRVZvVlZSVmQyOUxXREE0VEROT01scDZOV2RQTVhoMVNVTkJaMGxJTVdOaWFVRm5TVU5DYmxwWVVsVmFWekYzWWtkR01GcFZWbk5hVnpGc1ltNVJiMHRUUWpkWVJ6Um5TVU5CWjBsRFFXZEpSMDUyWW01T01FbElVbXhpV0VKeldWaFNiRWxFTUdkak0xWjNXbGhKZFZveVZqQldSMVowWTBkNGFHUkhWa1ppUjFaMFdsYzFNRXREYXpkWVJ6Um5TVU5CWjBsRFFXZEpSMDUyWW01T01FbEhUblppYmxKc1ltNVJaMUJUUWpCYVZ6RjNZa2RHTUZwVE5XcGlNalV3V2xjMU1FOHhlSFZKUTBGblNVTkJaMGxEUW1waU1qVjZaRU5DZW1SdFpFWmlSMVowV2xjMU1FbEVNR2RaTWpsMVpFZFdkV1JETlcxaFdFcDZaRVZPYjJGWGVHdFBNWGgxU1VOQlowbERRV2RKUTBKcVlqSTFNRnBYTlRCTWJrcHNZbGM1TWxwVlRtOWhWM2hyUzBoT01sb3dWbk5hVnpGc1ltNVJjRTh4ZUhWSlEwRm5TVU5CWjBsRFFubGFXRUpvWTIxV2RXUkZOWFphUjFaNlMwZE9kbUp1VW14aWJsRnpTVWhPTWxvd1ZuTmFWekZzWW01UmRWcHRiSGxqTTFKRVlVZHNjMXBEYXpkWVJ6Um5TVU5CWjBsRFFXZEpTRXBzWkVoV2VXSnBRakJhVnpGM1lrZEdNRnBVZEdOaWFVRm5TVU5DT1ZoSE5UbFlSelIyVEhsTloyTXlPVEZqYlU1c1ZGZEdkMk5IYkhWYU1WWlRWRVF4TUZwWE1YZGlSMFl3V2xNeGVWcFlUakZpU0ZGMVlXNU5kV0pYUm5kSmFYZHBUSGx2Y1ZoSE5HZExhVUpCWWtkc2FscFhOWHBhVm5oMVNVTnZaMUV5T1hkbFdFcHdXakpvTUVsRGFHcExVMEY1VFVSRk0wbEdVbTlhVTBKUllqSjROV0pYVm5sSlJrSjVZakp3YkZrelVXZFJXRll3WVVjNWVXTjVOR2RSVjNoelNVaEtjRm95YURCamVVSjVXbGhPYkdOdVdteGFRelZqWW1sQmNVbEdVbTloV0UxbldUSTVhMXBUUW5SWldHdG5ZakkxYzJWVFFtbGFVMEl4WXpKV2EwbElWblZhUjFaNVNVaFNiMXBUUWtOVk1GRm5Zek5TTldKSFZXZGlSMnhxV2xjMWVscFRRbTFpTTFaMVdrTkNhR1JHZUhWSlEyOW5ZVWhTTUdORWIzWk1NMEoyWWtoc2RGcFlTWFZhTW13d1lVaFdhVXh0YkhaTU1IaEtVVEJXVDFVd1ZYVmtTR2d3V0VjMFowdHBRbFZoUjFWbldUSTVkR05IZUd4a1IxVm5ZekpXTUVsSE9XMUpSMFl4WkVkb2RtTnVUV2RpVjBZMVNVZEtiRWxIV25aa1Z6VnJTVWRHTUZoSE5HZExhVUp2WkVoU2QwOXBPSFpqUnpselpWY3hiR05wTlc1aFdGSnZaRmRKZFdGWE9IWlJWbFpWVTBVNVUxVjVOVEJsU0ZKalltbEJjVWxHVW05YVUwSnFZakl4ZDJKSFZqQmFVMEo2V2xoUloySXlXV2RaTWpsMVpFaEtjRmx1VmpCaU0wcDZTVWN4YUdWVFFtbGFVMEp0WWpOV2RWcERRbWhrUm5oMVNVTnZaMkZJVWpCalJHOTJURE5DZG1KSWJIUmFXRWwxV2pKc01HRklWbWxNYld4MlREQk9VRlJzVWxOVFZVcFdWa1U1VTFWNU5UQmxTRkpqWW1sQmNVbEZUblphUjFWbldrZHNlbVJJU25CWmJsWXdXbGRSWjFsdWEyZFNNamwyV2pKNGJFbEhSbnBKU0VKb1kyNVJaMkl5V1dka1IyaHNTVWhDZG1KSWJIUmFXRWxuWTBoS2RtRnRWbXBrUTBKd1kzbENhR0pJVG5aWVJ6Um5TMmxDZW1SWFNuRmFWMDR3U1VoU2RrbEhSblZKUjBacldrZHNNR0ZYT1hWWlYzZG5VMVpCWjJOdGJHNWhTRko2U1Vka2VWbFhOVEJKUjFwMlpGYzFhMGxIUmpCWVJ6Um5TMmxDYjJSSVVuZFBhVGgyWTBjNWMyVlhNV3hqYVRWdVlWaFNiMlJYU1hWaFZ6aDJWVVZHVlZKVk5WVlZlVFV3WlVoU1kySnBRWEZNTVhoMVRIbHZjVmhITkdkTGFVSkJZbGM1YTJSWGVHeEpSM2h3WkVNeGIyUkhNWE5ZUnpSblMyazVZMkp0YkhSalJ6bDVaRU5DTjBsSGJIcFNSMng1V2xkT01HRllXbXhKU0RCbldtNUtkbUpUUVc1TWFUbHJZVmhLYkZrelVuQmtiVlYxWVc1TmJrOHhlSFZoVnpGM1lqTktNRWxJYzJkamJWWjBZak5hYkZSdE9XdGFXRTFuWmxOQ2JXTnRPWFJKUTJOMVRESlNkbUpUTlhGamVXTTNXRWMxY0dKWVFuWmpibEZuWlhsQ2RXSXdUbTlaVnpWdVdsTjNaMkp0T1RCaFIyeDFXbmxDT1VsSFdubGlNakJuU25rMGRtTkhSbmxrUXpWeFkzbGpOMWhITlhCaVdFSjJZMjVSWjJWNVFsVmFWekYzWWtkR01GcFZiSFZqTTFKb1ltMU9iRWxJTUdkYWJrcDJZbE5CYmt4cE9UQmFWekYzWWtkR01GcFRNWEJpYms0d1dWYzFhbHBUTlhGamVXTTNXRWMxY0dKWVFuWmpibEZuWlhsQ1ZWcFhNWGRpUjBZd1dsWktiR016Vm5Oa1EwSTVTVWRhZVdJeU1HZEtlVFIyWkVkV2RHTkhlR2hrUjFWMFkyMVdlbVJYZURCTWJYQjZTbnAwWTJKdGJIUmpSemw1WkVOQ04wbEhUbmxhVjBZd1dsVXhhR050ZEd4amFVSTVTVWRhZVdJeU1HZEtlVFIyWkVkV2RHTkhlR2hrUjFWMVlXNU5iazh4ZUhWYVdHaDNZak5LTUVsSFRuWmliazR3U1Vkc2VsVklTbkJpVjJ3d1lWaGFiRWxFTUdkTFNGcG9Za2hXYkV0VFFUbFFhVUkzV0VjMFowbERRV2RqYlZZd1pGaEtkVWxEYURKWlYzZ3hXbE5CT1ZCVU1HZGlibFp6WWtOQ09HWkdlSFZKUTBGblNVTkJaMGxEUVdoTFNGSTFZMGRXZGxwcFFqSlpWM2d4V2xOQk9WQlVNR2RLTWpscFlXMVdhbVJEWTJkbVNIZG5aRWhzZDFwWE9XMUpTRnBvWWtoV2JFbEVNRGxRVTBGdVdtNVdkVmt6VW5CaU1qUnVTMU5yTjFoSE5UbFBNWGgxV2xob2QySXpTakJKUjA1MlltNU9NRWxIYkhwVFdGSnNZMjFHYVdKSFZXZFFVMEZ2WkcxR2MyUlhWWEJKUkRBclNVaDBZMkpwUVdkSlEwSjVXbGhTTVdOdE5HZFJXRXA1V1ZocmRXRllUa0pqYmtwb1pWTm9NbGxYZURGYVUydG5aa2g0WTJKcFFXZEpRMEZuU1VOQloweDVPR2RhV0U1ellWYzFNRXhYVW5Cak1rWnBZa2RWZEdKdFZqUmtRekZ6WVZjMWJFbEZRakJsV0VKc1l6Sk9lV0ZZUWpCTVYxWjZZa2RzZFdSRE9YVmllVEZzWlVoQ2MyRlhUbkJrUXpGb1ltNXNZMkpwUVdkSlEwRm5TVU5CWjBsVFJXOWtiVVp6WkZkVlowcHBXV2RrYlVaelpGZFdZbFV6YkhSWmJUbHpURzFzTUZwWVNtaGtSemw1V0ZOck4xaEhOVGxQTVhoMVRIbHZjVmhITkdkTGFVSllZMjFzTUZwWVRXZFpXRkl3WTIxc2FXUllVbXhKU0Zwb1lraFdiR041UWpCaWVVSXdZVWRWWjFKRk9VNUpSMXAyWTJsQ2FFbEhaSGxpTTFaM1NVYzViVWxGUmpCa1NFcHdXVzVXTUZwV1FtaGpibEo2U1VkS2RtUlhOV3RKU0ZKMlNVZEdZMkpwUVhGSlNFNXdZbTFrYzFwVFFtaGtTRko1WVZkS01XUkhWWFZKUmxKdldsTkNNbGxYZURGYVUwSndZM2xDZG1KdGVEVkpTRTVzWkVOQ2RtSnRUbXhKUjFZeVdsYzBaMkZYV1dka1IyaHNZMjFWWjFsWVNteEpSekV4WWtoU2NHTkhlR3hKU0VKb1kyNVNlbGhITkdkTGFVSnRZak5KWjFsWE5HZFpXRkl3WTIxc2FXUllVbXhNYkhoMVNVTnZkbGhITld4bFNFSjJZMjVSWjFreWVHaGpNMDFuVVZoU01HTnRiR2xrV0ZKc1VUSTVkR0pYYkRCa1IxWjVTVWgwWTJKcFFXZEpRMEpxWWpJMWVtUklTakZaTTFKMlkybG9iR0pIVm5SYVZ6VXdURU5DZFZsWE1XeE1RMEo2WkVoS2NHSnRaSHBMVTBJM1dFYzBaMGxEUVdkSlEwRm5TVWhTYjJGWVRYVmFSMng1WkVocloxQlRRakJqYmxac1R6RjRkVWxEUVdkSlEwRm5TVU5DTUdGSGJIcE1iVlp6V2xjeGJHSnVVV2RRVTBKc1lrZFdkRnBYTlRCUE1YaDFTVU5CWjBsRFFXZEpRMEl3WVVkc2VreHROV2hpVjFWblVGTkNkVmxYTVd4UE1YaDFTVU5CWjBsRFFXZEpRMEl3WVVkc2VreHVUakJqYld4MVdqTk5aMUJUUW5wa1NFcHdZbTFrZWs4eGVIVkpRMEZuU1VOQlowbERRakJoUjJ4NlRHNUNhR051VW5wSlJEQm5WekV3TjFoSE5HZEpRMEZuU1VOQlowbEhXblpqYVVGdllrZFdNRWxIYTJkUVUwRjNUM2xDY0VsRWQyZGpNMUo1WVZjMWJtTjVOWE5hVnpWdVpFZG5aMHhUUVhoUGVVSndTM2x6Y0VsSWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVaFNiMkZZVFhWalIwWjVaRWhPWW1GV01HZFFVMEl3WVVkc2VreHNPV3BqYlZab1pFZFdVVmxZU2pCTFEyczNXRWMwWjBsRFFXZEpRMEZuU1VneFkySnBRV2RKUTBJNVdFYzBaMGxEUVdkTWVXOXhXRWMwWjBsRFFXZEpRMjluVVROS2JGbFlVbXhqZVVKb1NVaE9jR0p0WkhOYVUwSjNXVmhLTUV4cFFsQmtiVlo1WTIxc2ExcFRRakJoUjJ4NlNVaFNka2xIVG5sYVYwWXdXbE5DYUVsSFVuQmFiVnBzWTIwMU1FbElValZqUjFWbllqSlpaMk5IUm5sa1F6VmpZbWxCWjBsRFFXZExhVGxqWW1sQlowbERRbVpaTTBwc1dWaFNiRlZIUm5sa1EyZHdTVWgwWTJKcFFXZEpRMEZuU1VOQloyTnRWakJrV0VwMVNVYzFiR1I1UWtKa1NGSjVZVmRLTVdSSFZsRlpXRW93UzBoU2IyRllUWEJQTVhoMVNVTkJaMGxJTVdOaWFVRm5TVU5DWmxveVZqQldiVVp6WkZkVmIwdFRRamRZUnpSblNVTkJaMGxEUVdkSlIwNTJZbTVPTUVsSVRqQmpiV3gxV2pOTloxQlRRakJoUjJ4NlRHNU9NR050YkhWYU0wMDNXRWMwWjBsRFFXZEpRMEZuU1VkT2RtSnVUakJKUjNkblVGTkNlbVJJU25CaWJXUjZURzE0YkdKdFpEQmhRMEYwU1VSRk4xaEhOR2RKUTBGblNVTkJaMGxIZUd4a1EwSXdXbGhvTUVsRU1HZEtlV00zV0VjMFowbERRV2RKUTBGblNVZGFkbU5wUVc5aVIxWXdTVWRyWjFCVFFYZFBlVUp3U1VSM1oySkVjMmRoVTNOeVMxTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEl3V2xob01FbERjemxKU0U0d1kyMXNkVm96VG1KaFZqQTNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbXBpTWpWNlpFTkNkMWxZU2pCSlJEQm5aRWRvY0dONU5YZFpXRW93WXpGMGNGaFVkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWRzYlVsRGFIZFpXRW93U1VORk9WQlRRakZpYlZKc1dtMXNkVnBYVVhCSlNIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKcVlqSTFlbVJEUWpKSlJEQm5ZMGRHZVdSRE5USlpWM2d4V2xSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DY0ZwcFFXOWhXRTVSWTIxc2RHRllVbkJrYlZWdlpHbHJaMlpJZDJkSlYyeDZVMWhTYkdOdFJtbGlSMVZ2WkdscmNFbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWkVkV05HUkRRWEpRVTBJd1pWaENiR0l5V1dka2FVRTVVRlF3WjBvelRqQmpiV3gxV25saloxQjVRakpKUkc5blZUTlNlV0ZYTlc1TFNGbHdUekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZ3hZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2JHSklUbXhKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxcHRPWGxKUTJocVlqSTFlbVJEUWpCSlJ6bHRTVWhaY0VsSWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVVteGxTRkZuUzNvd1oyUkliSGRhVnpsdFNVaFJaMUJVTURsSlEyUjZaRWhLY0dKdFkyNUpSRGhuWkVOQk5rbEdUakJqYld4MVdubG9NRXRVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblpsWjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VneFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNERmpZbWxCWjBsRFFXZEpRMEZuWmxaNGRVbERRV2RKUTBGblNVTkNNRnBZYURCSlEzTTVTVWhPTUdOdGJIVmFNMDVpWWtZd04xaEhOR2RKUTBGblNVTkJaMGxJU214a1NGWjVZbWxDTUZwWWFEQlBNWGgxU1VOQlowbElNV05pYVVGblNVTkNhbUl5TVhSaFdGRnZTMU5DTjFoSE5HZEpRMEZuU1VOQlowbEhiRzFKUTJnd1lVZHNla3h0VW5CamJsSTFTMU5DTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBJd1lVZHNla3h0VW5CamJsSTFTVVF3WjFwdFJuTmpNbFUzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpCaFIyeDZURzFXYzFwWE1XeGlibEYxWXpKV01GRllVakJqYld4cFpGaFNiRXRJVW05aFdFMTFZbTFHZEZwVGQyZGtSMmh3WTNrMVpsb3lWakJXYlVaelpGZFZiMHRUYXpkWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRamxZUnpVNVdFYzBka3RwY0dOaWFVRnhTVVZGWjFWSFJubGtRMEl3WVVkR01FbEhUblppYmxKNVlqSjRla2xIUm5OaVEwSjJZMmxDZDFsWVNqQkpSemx0U1VkR2RVbEhSakJrU0Vwd1dXNVdNRnBUUWpKWlYzZ3hXbE0xWTJKcFFYRk1NWGgxV2xob2QySXpTakJKUjA1eldWaE9la2xGUmpCa1NFcHdXVzVXTUZwV1FtaGpibEZuWlRGNGRVbERRV2RKUjA1MlltNU9NR051Vm1wa1J6bDVTMGRPZG1KWE1YQmtTRkpzWTJscloyVXhlSFZKUTBGblNVTkJaMGxEUWpCaFIyeDZURzVhYUdKSVZteEpSREJuWkZjMWExcFhXbkJpYlZaclR6RjRkVWxEUVdkSlEwRm5TVU5DTUdGSGJIcE1iVTUyWWxjeGNHUklVbXhqYVVFNVNVZE9kbUpYTVhCa1NGSnNZMnAwWTJKcFFXZEpRMEk1V0VjMFowbERRV2RqTWxZd1ZtMUdjMlJYVlc5a2JVWnpaRmRWY0VsSWRHTmlhVUZuU1VOQlowbERRV2RoVjFsblMwaGFhR0pJVm14SlEwVTVVRk5DZFdJd1RtOVpWelZ1V2xOQmJVcHBRVzlKVjJ4NlZVaEtjR0pYYkRCaFdGcHNTMGhhYUdKSVZteExVMEk0WmtOQ01sbFhlREZhVTBGb1VGUXdaMlJIYUhCamVUVXlXVmQ0TVZwVGEzQkpTSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJVW05aFdFMTFaRzFHYzJSWFZXZFFVMEl5V1ZkNE1WcFVkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU00ZGtsRmJHMUpTRkp2V2xOQ01sbFhlREZhVTBKd1kzbENhRWxITlhaa1EwSm9TVWRTY0dOdFZtcGtSMnd5V2xOM1oxcEhiSGxrU0d0blpFZG9iRWxIVG5aaVZ6RndaRWhTYkdOcFFucGllVUl3WVVkR01FbEhiREJLTW5oeldFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFYWk1lVUpxV1ZkNGMwbElUbXhrUlVZd1pFaEtjRmx1VmpCYVV6Um5VMWRaWjJSSGFHeEpTRnBvWWtoV2JFbEhiSHBKUjBWbldrZHNlVnBYVGpCaFdGcHNURU5DY0dSRFpITmlRMEpyWVZoS01HVlRRakJoUjFaalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRE9IWkpSMDUyWWxjeGNHUklVbXhqYVVKd1dtbENjR1JEUW1wWlYzaHpZM2xDZWxwWVVsZFpWM2d4V2xObmNFeHNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5ZVmRaWjB0RFJuQmpNRkp3WTIxV2FtUkhiREphVTJneVdWZDRNVnBUYTNCSlNIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJd1lVZHNla3h0VG5aaVZ6RndaRWhTYkdOcE5XdGhXRW93WlZOQk9VbElVbmxrVjFVM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbFlSelJuU1VOQlowbERRV2RKU0RGalltbEJaMGxEUWpsWVJ6Um5TVU5CWjFreU9YUmlWMnd3UzBOcloyVXhlSFZKUTBGblNVTkJaMGxEUWpOaFIyeHpXbE5CYjJGWVRrVmhXRXBzV1ROU2NHUnRWVzlrUjJod1kzazFNbGxYZURGYVUydHdTVWgwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjA1MlltNU9NRWxIVW5CamJWWnFaRWRzTWxwVFFUbEpTRkp2WVZoTmRXUnRSbk5rVjFVM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqQmhSMng2VEc1YWFHSklWbXhKUkRCblltMDVSR0ZIUm5WYU1sVTNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbXRoV0Vwc1dUTlNjR1J0Vlc5a1IyaHdZM2xyTjFoSE5HZEpRMEZuU1VOQlowbElNV05pYVVGblNVTkJaMGxEUVdkaFYxbG5TMGhTYjJGWVRYVmtiVVp6WkZkVloxQlVNRGxKUnpWMlVUSm9hR0p0Wkd4TFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbmxhV0ZJeFkyMDBOMWhITkdkSlEwRm5TVU5CWjBsSU1XTmlhVUZuU1VOQlowbERRV2RrUjJod1kzazFhbUl5TVhSaFdGSXdXbGhKZFZreU9YUmlWMnd3UzBOck4xaEhOR2RKUTBGblpsWjRkV1pXZUhWTWVXOXhXRWMwWjB0cFFrSkpSa0pvWTI1UloyUkhhR2hrUTBKcVlqSTFNR050T1hOamVVSm9TVWQ0ZGxreVJqQmhWemwxU1Voa2NHUkhhSEJpYVVKb1NVVTFkbHBIVldka1NFcHNXbE0wWjFSSGJISmFVMEpvU1VaS2FHSnRaR3hNUTBKUFlqSlNiRlZIUm5sa1JuaDFTVU52WjJGSFJucEpTRTR3V1ZoS01FbEhSblZhUTBKc1ltMVJaMkpIT1dwWldGSndZakkxZWtsSFJuVmFRMEpxV1ZjMFoyTXlWakJKUjBaMVdrTkNNV05IVW1oa1IxVm5aRWRvYkVsRk5YWmFSMVo2U1VkS2JHUklaR3hhVnpSblpFZG9kbU15Vm1OaWFVRnhTVWQ0ZGxreVJqQmhWemwxWTNrMVkySnBRWEZZUnpSblMybENUMkl5VW14VlIwWjVaRWhOWjJNelZuZGpSemw1WkVOQ2VscFlXbXhqYlVaelNVaGFhR0pJVm14SlNGSTFZMGRXZWs5cFFuZGpiV3gwWVZoU2NHUnRWbnBNUTBKUFlqSlNiR041ZDJkV1IxWjBZMGQ0YUdSSFZsTmFXRTR4WWtoU2VreEdlSFZKUTI5bldWaE5aMlF5Vm5OaVEwSm9ZM2xDYUdOdVNtaGxXRTFuV1ZjMWEwbEhiREJhV0Vwb1dXMTRiR041UW5aYWFVSXdZVWM1ZWxwVFFqQmxXRUpzWTNrMVkySnBRWEZNTVhoMVdsaG9kMkl6U2pCSlIwNXpXVmhPZWtsRk5YWmFSMVpSV1ZoS01FbElkR05pYVVGblNVTkNhbUl5Tlhwa1NFb3hXVE5TZG1OcGFIWmpTRkp3WWpJMWVrdFRRamRZUnpSblNVTkJaMGxEUVdkSlNGSnZZVmhOZFdSdFJuTmtWMVZuVUZOQ01XSnRVbXhhYld4MVdsZFJOMWhITkdkSlEwRm5TVU5CWjBsSVVtOWhXRTExV0RFNWQxcFhOV3RoVnpWdVZtMUdjMlJYVldkUVUwSXhZbTFTYkZwdGJIVmFWMUUzV0VjMFowbERRV2RKUTBGblNVaFNiMkZZVFhWaU0wSXdZVmM1ZFdONVFUbEpSemwzWkVkc2RtSnVUVGRZUnpSblNVTkJaMlpXZUhWSlEwRm5TVU00Y1V0c2VIVkpRMEZuU1VOQmNVbEZSbmRqUjFaMVdraE5aMlJIYUhCamVVSjNXVmhLTUVsSGJIVmtSemhuV1ZOQ2FtSXlOVEJaVjJ4MVdsaEpkVmhITkdkSlEwRm5TVU53WTJKcFFXZEpRMEZuUzJsQ1ZXRkhiSHBKU0VKb1kyNVJaMkpZVm5wa1EwSnBXbE5DYkdKWVFqQmxVM2RuV1ZoTloyRllVbnBKUjA1MlltNVNiR0p1VW5wSlIwWjVXbE5DZFdJelVXZFpXRll3WWpJeGFHUkhiR3BaVjNoelpWTkNkR0l6V214YVF6VmpZbWxCWjBsRFFXZExhVGxqWW1sQlowbERRbWhqU0VKc1ltMVNTbUp1VW5aTFIwNTJZbTVTYUdGWE5XeGphV3RuWlRGNGRVbERRV2RKUTBGblNVTkNNR0ZIYkhwTWJrNHdXVmhLTUZSdE9XdGFVMEU1U1VkT2RtSnVVbWhoVnpWc1kyazFhR05JUW14aWJWSkVZVWRzYzFwRGFHcGpiVlpvWkVkV1RsbFlTbkphV0VsdlMxTnJOMWhITkdkSlEwRm5TVU5CWjBsSVVtOWhXRTExV2xjMWExUnRPV3RhVTBFNVNVZE9kbUp1VW1oaFZ6VnNZMmsxYUdOSVFteGliVkpFWVVkc2MxcERhR3BqYlZab1pFZFdUbGxZU25KYVdFbHZTMU5yTjFoSE5HZEpRMEZuWmxaNGRVbERRV2RKUXpoeFMyeDRkVWxEUVdkSlEwRnhTVVZzZFdNeVZubGtTRTFuWkVkb2NHTjVRbmRaV0Vvd1NVZEdiV1JIVm5sSlNGSnZXbE5DWjJOdFZtMVpRMEoxWWpKU2JFbERhR2xhV0ZJeldsZFdkVWxIUW5sYVYxcG5TVWRHZFZwRFFtZGpiVlp0V1VOa2VrbEhOV3hsU0ZKalltbEJaMGxEUVdkTGFVSjZZVmRLYzJGWE5XNUxVelJuVVcwNU1HRkRRbWRqYlZadFdVTkNhR0p0VVdkaFdGSjZTVWMxYkdWSVVXZGpNbXhwWWtkc2RWcDVRblJrV0U0d1NVZEtiRWxJVGpCWldGSndXWGwzWjJSWE5XcGhSMFoxV2pKc2RWcDVRblZpTWxKc1l6RjRkVWxEUVdkSlEwRnhTVWhPTVZreVoyZFpXRTFuWkVkb2RtTXlWV2RrUjJob1pFTkNhR05JUW14WldFbG5ZVmMwWjFsVFFuTmhXRkpzWTIxR2MwbElUbXhaTTFKd1lqSTBaMkl5V1dkWlUwSXdXbGN4ZDJKSFJqQmFVelZqWW1sQlowbERRV2RMYkhoMVNVTkJaMGxEUVhGSlJsSnZZVmhOWjJOSFJubGtRMEowWkZoT01FbEhTbXhKUjFaMFkwaFNOVXhEUW1oamVVSndaRWhOWjFreU9YVmtSMVoxWkVoTloxbFlTbXhKUnpWMlpFTkNhR1JZVW5aaVYwWXdZVmRPYUdKSGVEVkpSekYyWkcxV2EweHNlSFZKUTBGblNVTkJjVXd4ZUhWSlEwRm5TVWRzZFdNeVZubGtSVVp0WkVkV2VWUnRPV3RhVTJoNVdsZFpjRWxJZEdOaWFVRm5TVU5CWjBsRFFXZGtSMmh3WTNrMWVtUkhSbmxrUlRWMldrZFZaMUJUUW5sYVYxazNXRWMwWjBsRFFXZEpRMEZuU1VoU2IyRllUWFZhVnpWclZHMDVhMXBUUVRsSlNFcHNXbWsxZFZwWWFEQlZNbXhwWWtkc2RWcDZkR05pYVVGblNVTkNPVmhITkdkSlEwRm5USGx2Y1ZoSE5HZEpRMEZuU1VOdloxRllRbmRhVnpWclkzbENNR0ZIYkhwSlNFSm9ZMjVSWjJGWE5UQmllVUpvU1VoQ2FHTnRWblZrUTBKM1dWaEtNRXhzZUhWSlEwRm5TVU5CY1ZoSE5HZEpRMEZuU1VOdloxWkhhSEJqZVVKM1dWaEtNRWxITVRGak0xRm5XVzFWWjFwWE1YZGtTR3R6U1VkR2VrbEhiREJqZVVKcVlqSTFNRnBYTlRCamVVSm9ZMjFWWjJKdE9UQkpSMFl4WkVjNWRGbFlVbkJaTWtaellraHJaMkpYT1RKYVYxRjFXRWMwWjBsRFFXZEpRMjkyV0VjMFowbERRV2RaV0VKM1dsYzFhMU5YTlRCaU1VSm9ZMjVSYjJOSFJubGtRMnRuWlRGNGRVbERRV2RKUTBGblNVTkNkMWxZU2pCTWJEbG1ZVmMxZWxwWVNqQkxTRkp2WVZoTmRXTXpVbWhqYmxKUFlqSlNiRWxFTUdkWk0wcHNXVmhTYkZSWFJubGhNbFo1UzBOcmNFOHhlSFZKUTBGblNVTkJaMGxEUW5kWldFb3dUR3c1Wm1GWE5YcGFXRW93UzBoU2IyRllUWFZhVnpWclZHMDVhMXBUUVRsSlIwNTVXbGRHTUZwVk1XaGpiWFJzWTJsbmNFdFVkR05pYVVGblNVTkNPVmhITkdkSlEwRm5USGx2Y1ZoSE5HZEpRMEZuU1VOdloxTlhOWHBhV0Vvd1kzbENNR0ZIYkhwSlNFSm9ZMjVSWjFsWFdqQmFXRWxuWkVkb2JFbEhRbmxhVjFwblNVaENhR051VVhWWVJ6Um5TVU5CWjBsRGNHTmlhVUZuU1VOQlowdHBRbFZoUjJ4NlNVaENhR051VVdkaVdGWjZaRU5DYVZwVFFteGlXRUl3WlZOM1oxbFlUV2RoV0ZKNlNVZE9kbUp1VW14aWJsSjZTVWRHZVZwVFFuVmlNMUZuV1ZoV01HSXlNV2hrUjJ4cVdWZDRjMlZUUW5SaU0xcHNXa00xWTJKcFFXZEpRMEZuUzJrNVkySnBRV2RKUTBKd1ltNU9iR051VWtKYWJsSnNZMnhDYUdOdVVXOWpiVlp0UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxJU214YWFUVm1XREpzZFdNeVZubGtRMmd3WVVkc2VreHVUakJaV0Vvd1ZHMDVhMXBUUVRsSlIwNTVXbGRHTUZwVk1XaGpiWFJzWTJsbmNFdFVkR05pYVVGblNVTkJaMGxEUVdka1IyaHdZM2sxYkdKdFVrOWlNbEpzU1VRd1oyTnRWbTFNYlZaMVdrVTFkbHBIVlRkWVJ6Um5TVU5CWjBsRFFXZEpTRXBzV21rMWJHSnRVazlpTWxKc1NVUXdaMlJIYUhCamVUVjZaRWRHZVdSRk5YWmFSMVUzV0VjMFowbERRV2RtVm5oMVNVTkJaMGxJVG14a1JscG9Za2hXYkV0SVdtaGlTRlpzUzFOQ04xaEhOR2RKUTBGblNVTkJaMGxJVW05aFdFMTFXREU1ZDFwWE5XdGhWelZ1Vm0xR2MyUlhWV2RRVTBJeVdWZDRNVnBVZEdOaWFVRm5TVU5DT1ZoSE5HZEpRMEZuV1RJNWRHSlhiREJMUTJ0blpURjRkVWxEUVdkSlEwRm5TVU5DY0ZwcFFXOWtSMmh3WTNrMWVtUkhSbmxrUlRWMldrZFZkV05IUm5sYVZ6VXdWRzA1YTFwVFFUbFFWREJuWW01V2MySkRhMmRsTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxVHpGNGRVbERRV2RKUTBGblNVTkNPVmhITkdkSlEwRm5TVU5CWjBsSVpHOWhWM2hzU1VOb2NHTXdVbkJqYlZacVpFZHNNbHBUYURCaFIyeDZUR3c1Wm1OSFZuVmFSMngxV2pGYWFHSklWbXhMVTJ0blpURjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZFpNamwxWXpOUloxcEhiSGxhVjA0d1lWaGFiRWxFTUdka1IyaHdZM2sxWmxnelFteGliVkp3WW0xa1YxbFhlREZhVkhSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSVVtOWhXRTExV0RFNWQxcFhOV3RoVnpWdVZtMUdjMlJYVldkUVUwSjFZakJPYjFsWE5XNWFWSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxIVW5CamJWWnFaRWRzTWxwVGFEQmhSMng2UzFSMFkySnBRV2RKUTBGblNVTkJaMlpXZUhWSlEwRm5TVU5CWjBsRFFtcGlNalY2WkVOQ01sbFhlREZhVTBFNVNVaFNiMkZZVFhWWU1UbDNXbGMxYTJGWE5XNVdiVVp6WkZkVk4xaEhOR2RKUTBGblNVTkJaMGxIYkcxSlEyZ3lXVmQ0TVZwVFFUbFFWREJuWW0wNVJHRkhSblZhTWxWd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTRXBzWkVoV2VXSnFkR05pYVVGblNVTkJaMGxEUVdkbVZuaDFTVU5CWjBsRFFXZEpRMEp3V21sQmIyRllUbEZqYld4MFlWaFNjR1J0Vlc5a2JVWnpaRmRWY0V0VFFqZFlSelJuU1VOQlowbERRV2RKUTBGblNVTkNjRnBwUVc5a2JVWnpaRmRWWjBsVU1EbEpTRkp2WVZoTmRXUnRSbk5rVjFWd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYkRsbVdUSTVkR0pYYkRCV1IxWTBaRU5vTWxsWGVERmFVMnMzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpsWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRV2RKUTBGbldsZDRlbHBUUW5CYWFVRnZaRzFHYzJSWFZXZGhWelY2WkVkR2RWa3lWblphYVVKVldsY3hkMkpIUmpCYVZrcHNZek5XYzJSRGEyZGxNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlJIYUhCamVUVm1XREpPZG1KWE1YQmtSbEpzWWxoQ2MxbFlVbXhWYlZaNlpGZDRNRXRJV21oaVNGWnNTMVIwWTJKcFFXZEpRMEZuU1VOQloyWldlSFZKUTBGblNVTkJaMGxEUW14aVNFNXNTVWRzYlVsRGFESlpWM2d4V2xOQ2NHSnVUakJaVnpWcVdsYzViVWxGTlhaYVIxVndTVWgwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0ZKdllWaE5kVmd4T1dwaU1qRjBZVmhTVDJJeVVteExTRnBvWWtoV2JFdFVkR05pYVVGblNVTkJaMGxEUVdkbVZuaDFTVU5CWjBsRFFXZEpRMEpzWWtoT2JFbEhiRzFKUTJod1l6QnNNRnBZU21oWmJYaHNTMGhhYUdKSVZteExVMnRuWlRGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdka1IyaHdZM2sxWmxneVRuWmlWekZ3WkVWc01GcFlTbWhaYlhoc1MwaGFhR0pJVm14TFZIUmpZbWxCWjBsRFFXZEpRMEZuWmxaNGRVbERRV2RKUTBGblNVTkNiR0pJVG14SlIyeHRTVU5vTWxsWGVERmFVMEU1VUZRd1oySnRPVEJoUjJ4MVdubHJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWkVkb2NHTjVOVEpaVjNneFdsTkJPVWxITlhaa1IyaHdZbTFqTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBJd1lVZHNla3h0VG5OYVYwWjVTME5yTjFoSE5HZEpRMEZuU1VOQlowbElNV05pYVVGblNVTkJaMGxEUVdkYVYzaDZXbE5DTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGMlRIbENSMWxYZUhOWmJVWnFZWGwzWjJReWJITmlRMEo1V2xjMWExcFlTV2RrUjJoc1NVaE9NR050YkhWYWVVSjVXbGhDZVZwWVRteGlibEpvWkVkc2RtSnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5aRWRvY0dONU5XWllNazUyWWxjeGNHUkdVbXhsU0ZGdlpHMUdjMlJYVlhCUE1YaDFTVU5CWjBsRFFXZEpRMEk1V0VjMFowbERRV2RtVm5oMVNVTkJaMGxHT1daaFZ6VjZXbGhLTUV0SE5YWmFSMVZ3U1VoMFkySnBRV2RKUTBGblNVTkJaMlJIYUhCamVUVnNZbTFTVDJJeVVteE1ia0pvWTIxV2RXUkZOWFphUjFWMVlWYzFlbHBZU2pCUmJWWnRZak5LYkV0SE5YWmFSMVZ6U1VoU2IyRllUWFZhVnpWclZHMDVhMXBUYXpkWVJ6Um5TVU5CWjJaV2VIVkpRMEZuU1VZNVpsa3lPWFJpVjJ3d1ZHMDVhMXBUYURKWlYzZ3hXbE5yWjJVeGVIVkpRMEZuU1VOQlowbERRbkJhYVVGdlpFZG9jR041TlRKWlYzZ3hXbE5CT1ZCVU1HZGtiVVp6WkZkVmNFbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhLYkdSSVZubGlhblJqWW1sQlowbERRV2RKUTBGblpsWjRkVWxEUVdkSlEwRm5TVU5DTUdGSGJIcE1iVTV6V2xkR2VVdERhemRZUnpSblNVTkJaMGxEUVdkSlNGSnZZVmhOZFZneE9YQmliazVzWTI1UmIyUnRSbk5rVjFWd1R6RjRkVWxEUVdkSlEwRm5TVU5DTUdGSGJIcE1ibHBvWWtoV2JFbEVNR2RrYlVaelpGZFZOMWhITkdkSlEwRm5abFo0ZFVsRFFXZEpSamxtV1RJNWRHSlhiREJXUjFZMFpFTm9NbGxYZURGYVUydG5aVEY0ZFVsRFFXZEpRMEZuU1VOQ2FtSXlOWHBrUTBKMVlqSlNiRWxFTUdka1IyaHdZM2sxZW1SSFJubGtSVFYyV2tkVmRXSnRWalJrUms1d1dXMTRjR0p0WXpkWVJ6Um5TVU5CWjBsRFFXZEpTRnBvWWtoV2JFbEVNR2RrYlVaelpGZFZaMUJVTUdkaWJsWnpZa05CTDBsRFkyNUpSRzluWkcxR2MyUlhWVGRZUnpSblNVTkJaMGxEUVdkSlF6aDJTVVZzYlVsSFFqSlpWM2d4V2xkQloyRllUblZLTTFGbldWZDRlVnBYUm10bFUwSm9TVWhPTUdOdGJIVmFlWGRuWkRKVloxcFlhSGRpUjJ4cVlWaFNjMlZUUW1waU1qVXlXbGhLTUVsSGJEQkpSMmhzWTIxVloyRlhOR2RaTWtaNldsWjRkVWxEUVdkSlEwRm5TVU5CZGt4NVFuQmtRMEpxV1ZjMGJtUkRRbWxhVTBKd1lsaENjMkZYVG5Ca1IzZzFTVWRPZG1KdVdteGpibEpzV2tOQmRFbEhhM1ZhVXpSbllWaFJibU41UW1oSlNFNDFZbGRLZG1KRE5XTmlhVUZuU1VOQlowbERRV2RaTWpsMVl6TlJaMlJ0Um5Oa1YxWkNZekZPTUdOdGJIVmFlVUU1U1VoU05XTkhWblphYVVJeVdWZDRNVnBUUVRsUVZEQm5Tak5PTUdOdGJIVmFlV05uVUhsQ01sbFhlREZhVTBFMlNVWk9NR050YkhWYWVXZ3lXVmQ0TVZwVGF6ZFlSelJuU1VOQlowbERRV2RKUjJ4dFNVTm9kV0l5VW14SlJEQTVVRk5DTUdGSGJIcE1iVloxV2tVMWRscEhWWFZqU0Vwc1pHMXNkbVJZVGxSaFYwcHpZVmMxYmtsRFdXMVlSelJuU1VOQlowbERRV2RKUTBGblNVTkNkV0l5VW14TWJUVjJXa2RXVldWWVFteEpSREE1VUZOQmVrbERPSEZKUlRWMldrZFZkVlpGVmxsV1JqbFBWREJTUmtsRGIzWkxVMEkzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVhaTWVVSktXbWxDTTFwVFFuWmliWGcxU1Vkb2FHUnRWV2RaVTBKNllWYzFibUpIVldka1IxWTBaRU5DZFdJeVVteEpSMHBzWkVoa2JGcFhOR2RrUjJoc1NVY3hhR050ZEd4amJrMXpTVWhrYkVsSFRtaGlhVUp4WkZoT01GaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRjJUSGxDZWxwWVVXZGhXRko2U1VoYWFHSklWbXhNUTBKNVdWaFNiMXBZU1dka1IyaG9ZbWxDZVZwWVFuTlpWMDV3WW0xaloyRllVWFZZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CZGt4NVFsVlVNRkpRUzBkd01XTXpVbkJpYlZwb1dqSTFhR0p0YTNCUGFVSkVXVmMwWjJReVZXZGhibFo2WkVOQ2FtRkhWbXBoZVVKd1dtbENNR0ZIYkhwTWJscG9Za2hXYkVsSGJIcEpTRUo1WVZjeGNHUkhiREphVkRsalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSE5YWmFSMVYxV2tkR01GbFRRVGxKU0Zwb1lraFdiRkZZVGxSa1NFcHdZbTFqTjFoSE5HZEpRMEZuU1VOQlowbElNV05pYVVGblNVTkJaMGxEUVdkYVYzaDZXbE5DTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBJd1lVZHNla3hzT1daWk1qbDBZbGRzTUZSdE9XdGFVMmhyWWpKT01XSlhWblZrUXpWcVkyMVdhR1JIVmxWYVdHZ3dWRzA1YTFwVGFESlpWM2d4V2xWR2VsVXpVbmxoVnpWdVMxTnJOMWhITkdkSlEwRm5TVU5CWjBsSU1XTmlhVUZuU1VOQlowbERRV2RrUjJod1kzazFNbGxYZURGYVUwRTVTVWhhYUdKSVZteFBNWGgxU1VOQlowbElNV05pYVVGblNVTkNabGd5VG5aaVZ6RndaRVpTYkdKWVFuTlpXRkpzVlcxV2VtUlhlREJMU0Zwb1lraFdiRXRUUWpkWVJ6Um5TVU5CWjBsRFFXZEpSMDUyWW01T01FbElVbXhpV0VKeldWaFNiRWxFTUdka1IyaHdZM2sxZG1OSVVuQmlNalY2VEc1U2JHSllRbk5aV0ZKc1VtMUdhbVJIT1hsbFUyZ3lXVmQ0TVZwVGF6ZFlSelJuU1VOQlowbERRV2RKUjJ4dFNVTm9NR0ZIYkhwTWJscG9Za2hXYkVsSGJIVmpNMUpvWW0xT2JHSXlXV2RXUjFaMFkwZDRhR1JIVmtwaWJrNHdXVmMxYWxwVFFXMUtiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlJIYUhCamVUVXlXVmQ0TVZwVE5UQmFWekYzWWtkR01GcFRRVGxRVkRCblpFZFdkR05IZUdoa1IxVndTVWgwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0ZKdllWaE5kV1J0Um5Oa1YxVjFaRmhDYTFsWVVteExTRnBvWWtoV2JFeHVXbWhpU0Zac1kzbHJOMWhITkdkSlEwRm5TVU5CWjBsSU1XTmlhVUZuU1VOQlowbERRV2RhVjNoNldsTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEYyVEhsQ1RsbFhkR3hKU0U0eFkyMVZaMlF5VldkalNFcDJZMGRHYmxsWVVteEpTRkp2V2xOQ01GcFhNWGRpUjBZd1dsTkNkMk50T1dwYVdFNTZZak5KWjFwdVNuWmlVMEl3WVVkVloxWkhWblJqUjNob1pFZFdVMXBZVGpGaVNGSmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERPSFpKU0U1MlNVaFNiMWxZVVdka01sVm5aRmhPYkVsSGJEQmplVUo2WlZjMU1GbFlaMmRhV0dnd1dsYzFlbUZYT1hWTVEwSnNaRWROZFVsR1VtOWFVMEl3V2xjeGQySkhSakJhVTBKdFdWZE9NR0l6U2pWSlIwNTJZbGRXZWxoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGMlRIbENiV050T1hSSlNGSnZXbE5DZVZwWE5XdGFXRWxuV201V2RWa3pVbkJpTWpSbllqTkNNR0ZYT1hWamVVSjZZbmxDTUdGSFJqQkpSMnd3U1VkT2FHSnBRbXBpTWpVd1kyMDVjMGxJVW14aVdFSnpXVmhTYkZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGMlRIbENhbGxYVG05aFZ6VnVTVWRHZFZwRFFuZGpiVlozWTIwNWFscFlUbnBoVnpWdVRHeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZFpNamwxWXpOUloyRlhOWHBrUjBaMVdUSlZaMUJUUW5WYVdHTm5Wa2RXZEdOSGVHaGtSMVpLWW01T01GbFhOV3BhVTJnd1dsY3hkMkpIUmpCYVUzZG5aRzFHYzJSWFZYVmpTRXAyV1RKV2VtTXlPWGxNUTBJd1lVZHNla3h0T1hka1IyeDJZbTVOY0U4eGVIVkpRMEZuU1VOQlowbERRV2RKUTBGbldUSTVkV016VVdkYWJrcG9Xakl4YkdKdVVXZFFVMEp3WW01T01GbFhOV3BhVXpWbVdUSjRkbUp0Vlc5TFZIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbEhiSFZqTTFKb1ltMU9iRXh1Vm5kYVIwWXdXbE5vTWxsWGVERmFVelV5V1ZkNE1WcFlUWEJQTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJSSGFIQmplVFZtV0RKT2RtSlhNWEJrUlRWMldrZFZiMXB1U21oYU1qRnNZbTVSY0U4eGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblpFZG9jR041TlRKWlYzZ3hXbE5CT1VsSGJIVmpNMUpvWW0xT2JFOHhlSFZKUTBGblNVTkJaMGxEUWpsWVJ6Um5TVU5CWjJaV2VIVkpRMEZuU1VZNVpsa3lPWFJpVjJ3d1UxaFNiR050Um1saVIxVnZaRzFHYzJSWFZYQkpTSFJqWW1sQlowbERRV2RKUTBGblRIazRaMUp0T1hsSlIwWjFTVVZzTUZwWVNtaFpiWGhzVEVOQ00xcFRRbXBqYlZab1pFZFZaMWxUUW5WYVdHTm5VMWMxZW1SSFJuVlpNbFpSV1ZoS01FbElRbXhqYVVKd1pFZFdkRXhEUWpCaFIxWjFTVWhPYkdSRFFuQmtTRTVqWW1sQlowbERRV2RKUTBGblRIazRaMlJ0Um5Oa1YxVm5aRWM0WjJSSGFHeEpSMnd3V2xjd2RVbEdVbTloV0UxbllWaE5aMWxUUW5OaFdGSXdZa2RWWjFsdGJEQkpSemx0U1VjNU1scFlTbTlhVjBaclNVZGFkbU5wUW14a2JWWjVaVk5DY0dSSFZuUkpSMngxV0VjMFowbERRV2RKUTBGblNVTTRka2xIUm5WSlJXd3dXbGhLYUZsdGVHeE1RMEpwWkZoUloyRllVV2RpUjFZd1kzbENNV041UW5sYVYwNHhZMjVPYkVsSFZtaGpNbXh6WlZOQ2FHSnRVV2RhVjFwdFlWZE9jRnBYTlRCaVNHdG5aRmhDYTFsWVVteEpSVVo1WTIxR05XTXhlSFZKUTBGblNVTkJaMGxEUVhaTWVVSjJXbWxDVlZwWE1YZGlSMFl3V2xaS2JHTXpWbk5rU0UxblpFZG9hR1JEUWpOaFYzaHpTVWRLYkVsSFRuWmlWekYyWW0xNE5VbElTbXhrU0ZaNVltMVdhMGxIV25saU1qQm5XbGhvZDJOdFZucGpNbXgyWW01TloySkhiSEphVkhCalltbEJaMGxEUVdkSlEwRm5USGs0WjFsWVNubFpXR3QxWWxkR2QwdERhSEJMVTBFNVVHbENiMlJITVhOWlExSTNZVmd4WjB0VGQyZFpibXRuWTIxV01XTXliSFZhZVVKc1pVZHNlbVJIYkhWYWVVSlZXbGN4ZDJKSFJqQmFWV3gxWXpOU2FHSnRUbXhqZVRWalltbEJaMGxEUVdkSlEwRm5USGs0WjFOWFdXZFlNMXBvWWtoV2JFbEhiSHBKUjBaMVNVZEdlV050UmpWTVEwSXdZVWRXZFVsSVVtOWFVMEozWTIxV01tRlhPVEZqZVVKNVdsYzFhMXBZU1dka01rWjZTVWM1YlVsSFJuVllSelJuU1VOQlowbERRV2RKUXpoMlNVZHNNRnBZU21oWmJYaHNTVWRHZFZwRFFtWmtiVVp6WkZkVloyUXliSE5pUTBKcVlqSTFNRmxYYkhWSlNGSnZXbE5DVDJJeVVteFZSMFo1WkVoTloxcHVTblppVTBJd1lVZFZaMk5JU214a2JXeDJaRmhPWTJKcFFXZEpRMEZuU1VOQloweDVPR2RqYlZaMVdrZFdlVXhwUWtwYWFVSm1aRzFHYzJSWFZXZGhXRTFuWW0wNU1FbEhSblZKUjBaNVkyMUdOVXhEUW1waVIxWm9ZMmxDTUdGSGJIcEpTRUpvWTI1UloxbFhOV3RKUnpGb1lUSlZaMWxUUW5WYVdHUmpZbWxCWjBsRFFXZEpRMEZuVEhrNFoxbFlTbmxaV0d0bldtMDVlVWxGTlhaYVIxWlJXVmhLTUdONU5XTmlhVUZuU1VOQlowbERRV2RoVjFsblMwTkdRbU51U21obFV6VndZekJHZVdOdFJqVkxTRkp2WVZoTmRXUnRSbk5rVjFWd1MxTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEl3WVVkc2VreHVXbWhpU0Zac1NVUXdaMWN4TURkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYlU1eldsZEdlVXREYXpkWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRV2RKUTBGblRIazRaMVJIVmpCamVVSXhZM2xDY2xwWFZuZEpTRko1V1ZkT2NrbEhPVzFKUjJoMlpIbENkRmxYTlRWSlIyd3dXbGN4ZWtsSVpHeEpTRTR3V1ZjeGQxcFhVV2RqTWpoblpESlZaMWt5Um5WSlIwNXpXbGRHZVVsSGVHeGFibEoyWkcxV2VWaEhOR2RKUTBGblNVTkJaMGxET0haSlIyd3dXbGN4ZWtsSFdubGlNakJuV1ZOQ2QyTnRWakpoVnpreFkzbENlVnBYTld0YVdFcGpZbWxCWjBsRFFXZEpRMEZuV1RJNWRXTXpVV2RoV0ZKc1lsWkNhR051VW5wSlJEQm5aRWRvY0dONU5USlpWM2d4V2xSMFkySnBRV2RKUTBGblNVTkJaMkpIVmpCSlNFSm9ZMjVTU21KdFVteGxRMEU1U1VSQk4xaEhOR2RKUTBGblNVTkJaMGxIZUd4a1EwSndaRWRXZEZWSFJubGtSSFJqWW1sQlowbERRV2RKUTBGbldtMDVlVWxEYUdwaU1qVjZaRU5DY0dSSFZuUkpSemx0U1VoYWFHSklWbXhMVTBJM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFYWk1lVUpWWTI1cloyUkhPR2RqYlZZeFl6SlZaMWxYTkdkYVdHaHdZek5TY0dKdFkyZGpSMFo1WkVaNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkaFdGSnNZbFpDYUdOdVVXZFFVMEp3WkVkV2RGVkhSbmxrU0U1aVkwZEdlV1JGYkhWYVIxWTBXRlIwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUXpoMlNVVnNiVWxITlhaSlIxWTBZVmhPTUdGWE5XNUpTRUpvWTI1UmMwbEhUbmxhVjBZd1dsTkNhRWxITld4a2VVSjJZbTFXWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjJ4dFNVTm9jR1JIVm5SVlIwWjVaRU5CT1ZCVU1HZGtWelZyV2xkYWNHSnRWbXRMVTBJM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWVZoU2JHSldRbWhqYmxGblVGTkNkVnBZWTJkVWJUbHJXbFpDYUdOdVVXOWtSMmh3WTNrMWRtTklVbkJpTWpWNlMxUjBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2NHUkhWblJWUjBaNVpFaE5kV05JVm5waFEyaHdaRWRXZEZWSFJubGtRMnMzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5ZVmRaWjB0SVFtaGpibEpLWW0xU2JHVkRRVGxRVkRCblRVTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKd1pFZFdkRlZIUm5sa1F6Vm9ZMGhDYkdKdFVrcGlibEoyVlVkR2VXUkRhREJoUjJ4NlMxUjBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ09WaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjFwWGVIcGFVMEkzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSGJEQmFWekZSV1ZoS01FeHRiSFZqTWxaNVpFVkdiV1JIVm5sVlIwWjVaRU5vY0dSSFZuUlZSMFo1WkVoT1ltTkhSbmxrUld4MVdrZFdORWxETUdkTlZqQndUekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZ3hZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRV2RKUTBGblNVTkJaMGxIYkRCYVZ6RlJXVmhLTUV4dVRteGtSbHBvWWtoV2JFdEhiREJhVnpCd1R6RjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGhXRkpzWWxaQ2FHTnVVWFZaTWpsMFlsZHNNRXREYXpkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ2QxbFlTakJUVnpWcldsaG5ja3Q2ZEdOaWFVRm5TVU5CWjBsRFFXZG1WbmgxU1VOQlowbERRV2RKUTBKd1dtbEJiMk5IUm5sa1JXeDFXa2RXTkVsRWQyZGhXRkpzWWxaQ2FHTnVVbnBNYlhoc1ltMWtNR0ZEYTJkbE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RXU0VveFltMU9hR1JIVldka1IyaHNTVWhDYUdOdVVucEpSMFo1WTIxR05VbElUblpKUmpreVdWZDRNVnBUUW5sYVYxcHpXbGRPTUdONVFqQmhSMVZuV1ROV2VXTnRWblZrUTBKNlpFZEdNRnBXZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWVZoU2JHSldRbWhqYmxKNlRHMTRiR0p0WkRCaFEwRTVTVWhDYUdOdVVrcGliVkpzWlVSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNGSnZZVmhOZFZreWVHeFpXRWx2WVZoU2JHSldRbWhqYmxGblNtbFpaMkZZVW14aVZrSm9ZMjVSZFZwWE5XdFViVGxyV2xOck4xaEhOR2RKUTBGblNVTkJaMGxJTVdOaWFVRm5TVU5DT1ZoSE5HZEpRMEZuV1RKNGJGbFlTVzlqTTFKb1kyNVNUMkl5VW14SlJEQm5aRWRvY0dONU5YcGtSMFo1WkVVMWRscEhWWEJKU0hSalltbEJaMGxEUVdkSlEwRm5ZMjFXZEdJeldteFViVGxyV2xoTmIyUkhhSEJqZVRWNlpFZEdlV1JGTlhaYVIxVjFZMGRHZVZwWE5UQlViVGxyV2xOM1oyTXpVbWhqYmxKUFlqSlNiRXh0Tld4bFNGSlVZVmRLYzJGWE5XNU1RMEl3WVVkc2VreHRWblZhUlRWMldrZFZjRTh4ZUhWSlEwRm5TVWd4WTJKdU1XTmlhVGh4UzJ4NGRVbERiMmRUVnpGM1lrZFdkRnBYTlRCamVVSm9TVWRLZG1JeWVHeFpWelJuV1ZoU01HTnRiR2xrV0ZKc1RFTkNlV0l6Vm01aFIzZzFTVWRHZWtsSFVteGFiV3gxV2xkUloyRlhOR2RrUjJoc1NVVm9WVlJWZUdOaWFVRnhTVWhPZDFwWFRuQmFiV3hxV1ZoU2NHSXlOSFZZUnpSblMyeDRkVWxEYjJkVFYxbG5aRWRvYkVsSVdtaGlTRlpzU1Vkc2VrbElVbmxrV0ZKdlpWTjNaMlJIYUd4aWFVSXdZVWRWWjFsWVVqQmpiV3hwWkZoU2JFbEhiSHBKU0VKNVdsaE9iR0p1VVdka01td3dZVU5DYUVsSVdtaGlTRlpzU1VjNWJWaEhOR2RMYVVGdVNuazBaMU5YV1dka1IyaHNTVWhhYUdKSVZteEpSMng2U1VkYWFHSklUbXhsVTNkblpFZG9iRWxIUmpCa1NFcHdXVzVXTUZwVFFuQmplVUo1V2xjeGRtUnRWbXRNYkhoMVNVTnZkbGhITld4bFNFSjJZMjVSWjFreWVHaGpNMDFuVVcwNWRtSkhWbWhpYTBZd1pFaEtjRmx1VmpCYVZrSm9ZMjVSWjJVeGVIVkpRMEZuU1VkT2RtSnVUakJqYmxacVpFYzVlVXRIVm5OYVZ6RnNZbTVSYzBsSE5XaGlWMVZ6U1VoT01HTnRiSFZhTTAxd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjJSSGFIQmplVFV5V1ZkNE1WcFRRVGxKU0ZaMVdrZFdiV0ZYTld4YVJIUmpZbWxCWjBsRFFXZEpRMEZuWkVkb2NHTjVOV1pZTTBKc1ltMVNjR0p0WkZkWlYzZ3hXbE5CT1VsSVZuVmFSMVp0WVZjMWJGcEVkR05pYVVGblNVTkJaMGxEUVdkaFYxbG5TMGhPTUdOdGJIVmFNMDExWWtkV2RWb3pVbTlKUTBVNVVGTkJlVWxJZURoSlNFNHdZMjFzZFZvelRtSk5SakJuU1ZRd09VbERZMjVKU0hnNFNVaE9NR050YkhWYU0wNWlUVll3WjBsVU1EbEpRMk51UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSXdZVWhLZG1SNVFuVmFXR05uVWxoS2VXSXpTVzlLTUVwMllqSjRiRmxYTkdkWldGSXdZMjFzYVdSWVVteGplVUpxV1ZjMFoySXlOWE5sVTBKcVlqSTFNRmxYYkhWSlIwVm5ZekpzZFZveWVHeEpSMVkwWTBoS2JHTXpUbkJpTWpSdVMxUjBZMkpwUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQlowbERRakJoUjJ4NlRHMVdjMXBYTVd4aWJsRm5VRk5DYkdKSFZuUmFWelV3VHpGNGRVbERRV2RKUTBGblNVTkNNR0ZIYkhwTWJUVm9ZbGRWWjFCVFFuVlpWekZzVHpGNGRVbERRV2RKUTBGblNVTkNNR0ZIYkhwTWJrNHdZMjFzZFZvelRXZFFVMEo2WkVoS2NHSnRaSHBQTVhoMVNVTkJaMGxJTVdOaWFVRm5TVU5DZWxwWVVsZFpWM2d4V2xOb01sbFhlREZhVTJ0blpURjRkVWxEUVdkSlEwRm5TVU5DTUdGSGJIcE1iRGxtWTBkV2RWcEhiSFZhTVZwb1lraFdiRWxFTUdka2JVWnpaRmRWTjFoSE5HZEpRMEZuWmxaNGRVbERRV2RKUjA1MllsY3hjR1JEWjNCSlNIUmpZbWxCWjBsRFFXZEpRMEZuWkRKb2NHSkhWV2RMUjJ4NlVrZHNlVnBYVGpCaFdGcHNTMGhTYjJGWVRYVllNVGwzV2xjMWEyRlhOVzVXYlVaelpGZFZjRXRUUWpkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ2FtSXlOWHBrUTBKcllWaEtiRmt6VW5Ca2JWVm5VRk5DTUdGSGJIcE1iRGxtWTBkV2RWcEhiSFZhTVZwb1lraFdiRTh4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWkVkb2NHTjVOV1pZTTBKc1ltMVNjR0p0WkZkWlYzZ3hXbE5CT1VsSE5YWlJNbWhvWW0xa2JFOHhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5Xa2RzZVZwWFRqQmhXRnBzUzBoU2IyRllUWEJQTVhoMVNVTkJaMGxEUVdkSlEwSTVXRWMwWjBsRFFXZEpRMEZuU1Vkc2JVbERhREJoUjJ4NlRHdzVabU5IVm5WYVIyeDFXakZhYUdKSVZteEpSREE1VUZOQ2RXSXdUbTlaVnpWdVdsTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTIxV01HUllTblZQTVhoMVNVTkJaMGxEUVdkSlEwSTVXRWMwWjBsRFFXZEpRMEZuU1VkT2RtSnVUakJKU0Zwb1lraFdiRWxFTUdkSlUwWXdZVWRzZWt4c09XWmpSMVoxV2tkc2RWb3hXbWhpU0Zac1R6RjRkVWxEUVdkSlEwRm5TVU5DY0ZwcFFXOWtSMmh3WTNrMU1sbFhlREZhVTBGb1VGUXdaMlJ0Um5Oa1YxVndTVWgwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjJ4dFNVTm9NbGxYZURGYVUydG5aVEY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVaFNiMkZZVFhWYVYzaHNZbGRXZFdSRE5YcGFXRkpDWkVoU2VXRlhTakZrUjFWdlpFZG9jR041TlhWWlZ6RnNURU5CYmtwNWF6ZFlSelJuU1VOQlowbERRV2RKUTBGblNVTkNPVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEpzWWtoT2JFbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFqQmhSMng2VEcxV2MxcFhNV3hpYmxGMVkyMVdkR0l6V214UldGSXdZMjFzYVdSWVVteExTRkp2WVZoTmRXSnRSblJhVTJzM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkNNR0ZIYkhwTWJscG9Za2hXYkVsRU1HZGtiVVp6WkZkVk4xaEhOR2RKUTBGblNVTkJaMGxJTVdOaWFVRm5TVU5CWjBsRFFXZGtSMmh3WTNrMVpsZ3pRbXhpYlZKd1ltMWtWMWxYZURGYVUwRTVTVWMxZGxFeWFHaGliV1JzVHpGNGRVbERRV2RKU0RGalltNHhZMkpwT0hGTGJIaDFTVU52WjFVeVZqQmplVUpvWkVoU2VXRlhTakZrUjFWblpHMUdjMlJYVm5wSlIxcDJZMmxDVVdOdE9YZGFXRW93WlZaQ2FHTnVVbnBNUTBKNllubENNR0ZIUmpCSlNGSnZXbE5DTWxsWGVERmFVMEp3WTNsQ2RtSnRlRFZKU0U1c1pFTkNkbUp0VG14WVJ6Um5TMmxDYkdSdFZuVkpSMnh0U1VoU2IxcFlTbXhKUjBaNVdsTkNkR1JYZURCaFdFSnpXbE5DZDFsWVNqQmplVUp0WWpOSloxbFRRbmRqYlRsM1dsaEtNR1ZUTldOaWFVRnhXRWMwWjB0cFFrcGFhVUpvWW1sQ2JHVklRbmxhV0U1NllWYzVkVWxIVG5aaWJsSjVZako0ZWtsSVVtOWFVMEl6WVVjNWMxcFRRbmRqYlRsM1dsaEtNR1ZUUWpKWlYzZ3hXbE4zWjJSSGFHeGlhVUl3WVVkVloyUnRSbk5rVjFWbllWaE5aMk15YkhSalIzZzFXRWMwWjB0cFFtaGpNMDV3V2pJMWJGcERRakJpZVVJd1lVZFZaMk5JU25aalIxWjVaRWhyWjJSWE5XdGFXRWxuV1RJNWRXUklTblppUXpSblUxZFpaMlJIYUd4amJWVm5XVmhLYkVsSVRqQmpiV3gxV25sQ2MyRllVbXhqYlVaelkzbENkbU5zZUhWSlEyOW5ZbGhXYzJSSGJIZGlSMVZuV2xob2QyTnRWbnBqTW14MlltNU5jMGxJVW05YVZ6Um5aRWRvYkVsSVRqQmpiV3gxV2pOTloxbFlTbXhKUjFZMFkwaEtiR016VG5CaU1qVjZTVWRHZVZwVFFuQmlibEpzWTI1Q2RtSkhSakJhVjFGbllWYzFNR0l4ZUhWSlEyOW5XVk5DZW1SSVNuQmliV05uV20xc2VXTXpVWFZZUnpSblMyazVZMkp0VmpSalJ6bDVaRU5DYW1KSFJucGplVUpSWTIwNWQxcFlTakJsVlU1MllsY3hjR1JJVW14amFVSnNaVWhTYkdKdFVucEpSVVl3WkVoS2NGbHVWakJhVlU1MllsY3hjR1JJVW14amFVSTNXRWMwWjBsRFFXZFpNamwxWXpOU2VXUlhUakJpTTBsdldsZDRiR0pYVm5Wa1EzZG5ZbTFHZEZwVGQyZGpNMUo1WVZjMWJtTjVhMmRsTVhoMVNVTkJaMGxEUVdkSlEwSjZaRmhDYkdOcGFHeGlSMVowV2xjMU1FeERRblZaVnpGc1RFTkNlbVJJU25CaWJXUjZTMVIwWTJKcFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWNllWYzFibUpIVldkUVZuaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowdElUakJqYld4MVdqTk5kV0pIVm5WYU0xSnZTVVF3T1ZCVFFYbEpRMWx0U1VoT01HTnRiSFZhTTA1aVRVWXdaMUJVTURsSlEyTnVTVU5aYlVsSVRqQmpiV3gxV2pOT1lrMVdNR2RRVkRBNVNVTmpia3RVZEdOaWFVRm5TVU5DT1ZoSE5HZEpRMEZuV0RKT2VWcFhSakJhVmtKb1kyNVJiMHRUUWpkWVJ6Um5TVU5CWjBsRFFXZEpTRXBzWkVoV2VXSnBRblZhV0dOblZVaEtkbU5IVm5sa1NHeFJXVmhLTUV0SVVtOWhXRTF3VHpGNGRVbERRV2RKU0RGalltbEJaMGxEUW1aYU1sWXdWbTFHYzJSWFZXOUxVMEkzV0VjMFowbERRV2RKUTBGblNVZHNiVWxEYURCaFIyeDZURzVPY0dKdFpITmFVMnRuWlRGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkamJWWXdaRmhLZFVsSVVtOWhXRTExWTBkR2VXUklUbUpOUmpCMVpHMUdjMlJYVlRkWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRV2RKUTBGblkyMVdNR1JZU25WSlNFNHhZMGRXZVV4c09XNWFXRkpYV1ZkNE1WcFRaM0JQTVhoMVNVTkJaMGxJTVdOaWFVRm5TVU5DYW1JeU1YUmhXRkZ2UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxIYkcxSlEyZ3dZVWRzZWt4dFVuQmpibEkxUzFOQ04xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSXdZVWRzZWt4dFVuQmpibEkxU1VRd1oxcHRSbk5qTWxVM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFYWk1lVUpzWXpKNGNHSnVVWFJhUjJ4NldWZEtjMXBUTVhWYVdHZ3dURmQ0Y0dKdFZXZFJTRkkxWTBkV2Vsa3pTbkJqU0ZGMFdsaE9jMkZYTlRCTU1qVjJURmRXTkdOSGVIQlpNbXd3VEZkR2RXVldlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5aRWRvY0dONU5XeGlSMVowV2xjMU1GY3pVbTloV0UxMVltMUdkRnBXTUdkUVUwSXdZVWRzZWt4c09XNWFXRkpYV1ZkNE1WcFRaM0JQTVhoMVNVTkJaMGxEUVdkSlEwSTVXRWMwWjBsRFFXZG1WbmgxWmxaNGRWcFlhSGRpTTBvd1NVZE9jMWxZVG5wSlJrSjVZak5DYkdOdVVqVlZSMFo1WkVOQ2JHVklVbXhpYlZKNlNVVkdNR1JJU25CWmJsWXdXbFpDYUdOdVVXZGxNWGgxWmxaNGRVeDVPR2RTUjFZd1dsZE9NRWxIVmpKYVZ6VXdTVWQ0Y0dNelVteGliVlo1U1VjNWQyUkhiSFppYmsxbll6TldkMk5IT1hsa1F6Um5VMWRaWjJSSGFHeEpSMEpxV1ZoQ01HUllTbXhaUTBKM1kyMDVkMXBZU2pCbFUwSndZM2xDZVZwWFJtdFlSelIyVEhsQ2JXTnRPWFJKU0ZKdldsTkNkbU5JVW5CaU1qVjZTVWM1YVdGdFZtcGtRM2RuWkVkb2JHSnBRblpqU0ZKd1lqSTFla2xIUm5sYVUwSjZaRmhDZDJJelNqQmFWMUYxU1VWc2JVbEhOWFprUTNkblpFZG9iR0pwUWpCaFIxVm5aRWRvY0dOdFVtTmlhVGgyU1VkR2VWb3pWblJhVnpVd1NVaFNka2xIUm10YVF6bDVXbGN4ZG1SdFZrWmtiVloxWkVWNGNHTXpVbXhpYlZaNVNVZHNla2xIYkhWa1IxWjVZMGhLYkdSSFZtdEpSMFo2U1VoU2IxcFRRbWxpTWpseldsZEdkVWxIVG1oalNGSXhZMjFXWTJKcE9IWkpTRnBvWWtoV2JFbElUblpKU0dSc1NVaE9iMkl6Vm5OYVEwSjJZbTE0TlVsSVFtaGpNMDFuWkVkb2JFbEhRbXBaV0VJd1pGaEtiRmxEUW5kamJUbDNXbGhLTUdWVE5XTmliWGhzWkVOQ2JHUnRWblZrUlRsM1pFZHNkbUp1VGxSa1dFSjNZak5LTUZwWFVXZFFVMEp0V1ZkNGVscFVkR05pYVRoMlNVWmtlVmxZUVdkaFZ6VXdZbmxDYUdKcFFrcFRWVnBHU1VkS2JGa3lSakZqTWxWblZGWk5aMUpYVW01YVUwRTRVRk5DTWs1RVJXZGFSemxzWTNsQ2RXSXpVV2RqTTFaM1kwYzVlV1JEUW05WldGcHdZbTFqWjJSSVNqVk1NazVvWkVkT2IxaEhOSFpNZVVKcFlrYzVhbUV6VFdkamJXeHVZVWhSWjJGWE5UQmllVUl3WVVkVloxbHRPV3RsVTBKMldtbENhRWxITVhaYVNGWnpXbFo0ZFV0RFozQkpSREFyU1VoMFkySnBRV2RKUTBJd1kyNXJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFtcGlNalY2WkVOQ2RtTklVbkJpTWpWNlNVUXdaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuV2pKV01FbEhUbWhqU0ZJeFkyMVZiMHRUUWpkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RhV0Zwc1ltNVNVR05JVW5CaU1qVjZWVE5XZDJOSE9YbGtSMVpyU1VRd1oyUklTakZhVkhSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEo1V2xoU01XTnROR2RhYlVaell6SlZOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1V0VjMFowbERRV2RKUTBGblNVZ3dOMWhITkdkSlEwRm5TVU5CWjBsRE9IWkpSMVo2WWtkc2RXUkRNV3RoV0U1b1dXMTRiRXhYTld4bFNGRjBZa2RzZFZwVFFrRmtTR3gzV2xoT2FtTnRiSGRrUXpGc1l6SjRjR0p1VVhaaWJUaDBXbGhvZDJKSGJHcGhXRkYwV1ZjMU5WaEhOR2RKUTBGblNVTkJaMGxJWkhCaWJWSjJaSGsxYUZwSFVrWmtiVloxWkVWNGNHTXpVbXhpYlZaNVMwTmtNRnBZVGpCS2VYZG5Zak5DTUdGWE9YVmplWGRuWWpOQ01HRlhPWFZqZVdzM1dFYzBaMGxEUVdkSlEwRm5TVU00ZGtsSFZucGlSMngxWkVNeGEyRllUbWhaYlhoc1RGYzFiR1ZJVVhSaVIyeDFXbE5DUVdSSWJIZGFXRTVxWTIxc2QyUkRNV3hqTW5od1ltNVJkbUp0T0hSYVdHaDNZa2RzYW1GWVVYUlpWelUxV0VjMFowbERRV2RKUTBGblNVaGtjR0p0VW5aa2VUVjVXbGN4ZG1SdFZrWmtiVloxWkVWNGNHTXpVbXhpYlZaNVMwTmtNRnBZVGpCS2VYZG5Zak5DTUdGWE9YVmplWGRuWWpOQ01HRlhPWFZqZVdzM1dFYzBaMGxEUVdkbVZuaDFTVU5CWjBsSFRtaGtSMDV2U1VOb1pscFRhMmRsTVhoMVNVTkJaMGxEUVdkSlEwRjJUSGxDYkdSdFZuVmtRMEoyWTBoU2NHSXlOWHBKUnpWMlpFTkNlbVJZUW5kaU0wb3dXbGRTWTJKcFFXZEpRMEk1V0VjMU9VdFRaM0JQTVhoMVdsaG9kMkl6U2pCSlIwNXpXVmhPZWtsRlZqSmFWelV3VlVkR2VXUkRRamRZUnpSblNVTkJaMWt5T1hWak0xSjVaRmRPTUdJelNXOWFWM2hzWWxkV2RXUkRkMmRhV0Zwc1ltNVNUMWxYTVd4TVEwSnNaRzFXZFdSRlRuWmlibEpzWlVoUmNFbElkR05pYVVGblNVTkJaMGxEUVdka1IyaHdZM2sxTWxsWGVERmFVMEU1U1VoV2RWcEhWbTFoVnpWc1drUjBZMkpwUVdkSlEwRm5TVU5CWjJSSGFIQmplVFZtV0ROQ2JHSnRVbkJpYldSWFdWZDRNVnBUUVRsSlNGWjFXa2RXYldGWE5XeGFSSFJqWW1sQlowbERRV2RKUTBGblpFZG9jR041Tld4aVIxWjBXbGMxTUVsRU1HZGFWM2hzWWxkV2RXUkVkR05pYVVGblNVTkJaMGxEUVdka1IyaHdZM2sxYkdSdFZuVmtSVFZvWWxkVloxQlRRbXhrYlZaMVpFVTFhR0pYVlRkWVJ6Um5TVU5CWjBsRFFXZEpTRkp2WVZoTmRWcFlXbXhpYmxKRVlqSTFNRnBZYURCSlJEQm5XbGhhYkdKdVVrUmlNalV3V2xob01FOHhlSFZKUTBGblNVTkJaMGxEUWpCaFIyeDZUR3c1WmxsdE9URmliVkpKV1ZjMWEySkhWa1prYlZaMVpFTkJPVWxEYUd4TFUwRTVVR2xDTUdGSGJIcE1iV2hvWW0xU2MxcFZWakphVnpVd1MwZFZjRTh4ZUhWSlEwRm5TVWd4WTJKcFFXZEpRMEo2V2xoU1YxbFhlREZhVTJneVdWZDRNVnBUYTJkbE1YaDFTVU5CWjBsRFFXZEpRMEl3WVVkc2VreHNPV1pqUjFaMVdrZHNkVm94V21oaVNGWnNTVVF3WjJSdFJuTmtWMVUzV0VjMFowbERRV2RtVm5oMVNVTkJaMGxIVG5aaVZ6RndaRU5uY0VsSWRHTmlhVUZuU1VOQlowbERRV2RrTW1od1lrZFZaMHRIYkhwU1IyeDVXbGRPTUdGWVdteExTRkp2WVZoTmRWZ3hPWGRhVnpWcllWYzFibFp0Um5Oa1YxVndTMU5DTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKcVlqSTFlbVJEUW10aFdFcHNXVE5TY0dSdFZXZFFVMEl3WVVkc2VreHNPV1pqUjFaMVdrZHNkVm94V21oaVNGWnNUekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RrUjJod1kzazFabGd6UW14aWJWSndZbTFrVjFsWGVERmFVMEU1U1VjMWRsRXlhR2hpYldSc1R6RjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGFSMng1V2xkT01HRllXbXhMU0ZKdllWaE5jRTh4ZUhWSlEwRm5TVU5CWjBsRFFqbFlSelJuU1VOQlowbERRV2RKUjJ4dFNVTm9NR0ZIYkhwTWJEbG1ZMGRXZFZwSGJIVmFNVnBvWWtoV2JFbEVNRGxRVTBKMVlqQk9iMWxYTlc1YVUydG5aVEY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RqYlZZd1pGaEtkVTh4ZUhWSlEwRm5TVU5CWjBsRFFqbFlSelJuU1VOQlowbERRV2RKUjA1MlltNU9NRWxITld4a01IaHdZek5TYkdKdFZubEpSREJuWkVkb2NHTjVOV1pZTTBKc1ltMVNjR0p0WkZkWlYzZ3hXbFIwWTJKcFFXZEpRMEZuU1VOQloxa3lPWFZqTTFGbllqSjRhMVJIYkhwa1IxWjFXbGhKWjFCVFFqQmhSMng2VEc1YWFHSklWbXhQTVhoMVNVTkJaMGxEUVdkSlEwSnFZakkxZW1SRFFucGhSemt4WWtkU1UxcFhNWFprYlZaTllWaE9NRnBYTld4amFVRTVTVWMxYkdRd2VIQmpNMUpzWW0xV2VVbEVNRGxKUnpVeFlrZDNaMlpJZUdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VjNWMxcEZlSEJqTTFKc1ltMVdlVWxEUlRsSlJ6VXhZa2QzWjBwcFdtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVc5aWJWWXpWRWRzZW1SSFZuVmFXRWwxV1RKR2QyUklWbmxhVTBGb1VGUXdaMkl5ZUd0VVIyeDZaRWRXZFZwWVNYVlpNa1ozWkVoV2VWcFRRamhtUm5oMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2RWcFlaRTFoV0U0d1dsYzFiR05wTlhaaWJVNXNTVU5GT1ZCVFFuWmlSMUpOWVZoT01GcFhOV3hqYVRWMlltMU9iRWxJZURoWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVYzFiR1F3ZUhCak0xSnNZbTFXZVV4dVFtaGpNMDV3WkcxVlowbFVNRGxKUnpseldrVjRjR016VW14aWJWWjVURzVDYUdNelRuQmtiVlZ3VHpGNGRVbERRV2RKUTBGblNVTkNhbUl5Tlhwa1EwSjZZVWM1TVdKSFVrSmFSMUpOWVZoT01GcFhOV3hqYVVFNVNVYzFiR1F3ZUhCak0xSnNZbTFXZVVsRFJUbEpSelV4WWtkM1owcHBXV2RMUnpseldrVjRjR016VW14aWJWWjVTVVF3T1VsSE5URmlSM2RuWmtoM1oyTXlhSFprVjNoclZXMVdkR0l6V214VVIyeDZaRWRXZFZwWVNYQlBNWGgxU1VOQlowbERRV2RKUTBKd1dtbEJiMk15YUhaa1YzaHJWVzFXZEdJeldteFVSMng2WkVkV2RWcFlTWEJKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSVVtOWhXRTExV2xkNGJHSlhWblZrUXpWNVdsY3hkbVJ0Vmtaa2JWWjFaRVY0Y0dNelVteGliVlo1UzBoU2IyRllUWFZhV0Zwc1ltNVNUMWxYTVd4TVEwSXdZVWRzZWt4c09XWlpiVGt4WW0xU1NWbFhOV3RpUjFaR1pHMVdkV1JEZDJka1IyaHdZM2sxWmxneU9YZGtSMngyWW01TmNFOHhlSFZKUTBGblNVTkJaMGxEUWpsWVJ6Um5TVU5CWjBsRFFXZEpSMnh0U1VOb2VtRkhPVEZpUjFKQ1drZFNUV0ZZVGpCYVZ6VnNZMmxyWjJVeGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblpFZG9jR041TldaWU1qbDNaRWRzZG1KdVRXZFFVMEp1V2xoU1VHTklVbkJpTWpWNlMwYzFiR1F3ZUhCak0xSnNZbTFXZVV0VWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVaFNiMkZZVFhWYVYzaHNZbGRXZFdSRE5XaGFSMUpHWkcxV2RXUkZlSEJqTTFKc1ltMVdlVXRJVW05aFdFMTFXbGhhYkdKdVVrOVpWekZzVEVOQ01HRkhiSHBNYkRsbVdXMDVNV0p0VWtsWlZ6VnJZa2RXUm1SdFZuVmtRM2RuWkVkb2NHTjVOV1pZTWpsM1pFZHNkbUp1VFhCUE1YaDFTVU5CWjBsRFFXZEpRMEk1V0VjMFowbERRV2RKUTBGblNVaFNiMkZZVFhWa2JVWnpaRmRWWjFCVFFuVmFXR1JOWVZoT01GcFhOV3hqYW5SalltbEJaMGxEUVdkSlEwRm5aRWRvY0dONU5XWllNMEpzWW0xU2NHSnRaRmRaVjNneFdsTkJPVWxITlhaUk1taG9ZbTFrYkU4eGVIVkpRMEZuU1VneFkySnBRV2RKUTBKdldWYzFhMkpIVmtaa2JWWjFaRU5vYkdSdFZuVmtRMnRuWlRGNGRVbERRV2RKUTBGblNVTkNjRnBwUVc5a1NHeDNXbGM1YlVsSVVtOWhXRTExWkcxR2MyUlhWV2RRVkRBNVNVTmtiV1JYTldwa1IyeDJZbWxqY0VsSWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVaFNiMkZZVFhWa2JVWnpaRmRWZFZreVJuTmlRMmd3WVVkc2VreHRWakphVnpVd1VUSTVkV1JIVmpSa1EwSTRaa05DTUdGSGJIcE1iVlp6V2xjeGJHSnVVWE5KUjFZeVdsYzFNRXRVZEdOaWFVRm5TVU5CWjBsRFFXZG1WbmgxU1VOQlowbERRV2RKUTBKc1lraE9iRWxJZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoU2IyRllUWFZrYlVaelpGZFZkV0ZIUm5WYVIzaHNVbGhhYkdKdVVXOWFXRnBzWW01UmNFOHhlSFZKUTBGblNVTkJaMGxEUWpsWVJ6Um5TVU5CWjJaV2VIVm1WbmgxVEhrNFoxWXlWV2RaTWpsM1pWTkNkbU5JVW5CaU1qVjZTVWRLYkZreVJqRmpNbFZuWWpKWloyUkhhR3hKUjJ4MVdUSTVkV015Ykhwa1IxWjFaRU5DYVZwWGFHaGtiV3gyWTJsQ2RscHBRbWxqYlRrell6SldlV041UWpOaFIxWjFTVWhLYkZsWFVuQmliV1JqWW1rNGRrbElVbTlhVTBJd1lVZHNlVnBEUW1oamJXUXhZbGRXZFdSRFFuWmFhVUpvV2tkUmRtTnRWblJpTTFwc1VsaGFiR0p1VWsxaFdFNHdXbGMxYkdOcE5HZFRWVlY0VFZOQ2EySXlWbnBpYVdRd1NVaE9NV05JUW5aamJsRm5Zak5DTUdGWE9YVmpNWGgxVEhrNFoxbFlVV2RaVjNoelRHbENSR0ZJU25aaVYxVm5Ua1JGWjJJeU5YTmxVMEo1V2xkR2EyTjVRbWRaTWtaM1pFaFdlVnBYUVdkaFYxbG5aRWRvYkVsSFJubGFNMVowV2xjMU1FbEhiSHBKUjBaMVNVYzVhV0Z0Vm1wa1F6VmpZbTFPZG1KdVRqQkpSMlJzWkVVNWQyUkhiSFppYmsxblVGTkJiMko1YTJkUVZEUm5ZbmxCYlVwc2VIVkpRMEZuU1VOb2JHUnRWblZrUlRsM1pFZHNkbUp1VGxSa1dFSjNZak5LTUZwWFVXZFFNWGgxU1VOQlowbERRV2RKUTBJM1NVZE9hR05JVWpGamJWVTJTVWM0ZFZreVJuZGtTRlo1V2xOM1oyTkhSbnBqTW13eVdsUnZaMko1TlhkWldFNTZZVmhhYkV4RFFuWmliVTVzVDJsQ2RreHRPWFZaTWxWblpsTkJObGhITkdkSlEwRm5TVU5CWjBsSE9IVlpNa1ozWkVoV2VWcFRhemRZUnpSMlRIbE5aMk15T1RGamJVNXNWRmRHZDJOSGJIVmFNVlpUVkVReGQxbFlTakJqZVRWeFkzazFkRmxZUVdsTVEwbDJTMmx3WTJKcFFYRkpSVUp6WVZkT2JHSnVUbXhZUnpSblMybENSR0l6UWpWamJXeHVZVWhSWjB0SFRYQkpSRWwzVFZSaloxWkhhR3hKUmtKMllraHNkRnBZU1dkVlNFcDJZVzFXYW1SRFFrSmtXRkp2WWpOS2VreHBRa0ppUjNkblkyMXNibUZJVW5wSlNFcHNZekpXZVdSdFZtdE1iSGgxU1VOdloxWkhhSEJqZVVKcVlqSlNiRWxITVdobFUwSjJZbTE0TlVsSFNteEpTRlo2V2xkUloyUlhOV3RhV0VsblpFZG9iRWxGU2xSU1EwSjZaRWhzYzFwVFFuTmhWMDVzWW01T2JFbEhXblprVnpWclNVZEdNRmhITkdkTGFVSnZaRWhTZDA5cE9IWmpSemx6WlZjeGJHTnBOVzVoV0ZKdlpGZEpkV0ZYT0haVVJXeEVVbFUxVkZKVE5UQmxTRkpqWW1sQmNVbEdVbTlhVTBKcVlqSXhkMkpIVmpCYVUwSjZXbGhSWjJJeVdXZFpXRll3WVVjNWVXTjVRblJaV0d0bldXMVZaMXB0T1RGaWJWRm5XVmhTWTJKcFFYRkpSMmd3WkVoQk5reDVPWGRpTW5nMVlsZFdlVXh0WkhCa1IyZ3hXV2sxY0dKNU9VSldWbEpKVkRGS1ZFeHVValJrUm5oMVNVTnZaMVpIYUd4SlIwNTJZbGhDYzFwWVVteEpTRTVzWkVOQ2RscHBRbXBpTWpVd1kyMXNhV1JZVW5aamJrMW5ZbGRHTlVsSFNteEpSMXAyWkZjMWEwbEhSakJZUnpSblMybENiMlJJVW5kUGFUaDJZMGM1YzJWWE1XeGphVFZ1WVZoU2IyUlhTWFZoVnpoMlVUQTVUMVpHU2twUmJGWlZWREZLVkV4dVVqUmtSbmgxU1VOdloxRXlPV3RhVTBKcllWaE9NR050Ykdsa1dGSnNXa05DYVdWVFFraGlNamx1WWtkVloxbFlUV2RqUjBaNVpFTkNkbHBwUWpCaFIxVm5ZMGM1YzJWWE1XeGphVUozWTIwNWNWcFhUakJKUjJ4NlNVZEdjMk15T1dOaWFVRnhTVWhPTVZsdGNHeFpNMUZuWkVjNFoxbFhOR2RaVjFKcllWaFNjR0l5TldoaVEwSktWVU5DZVdGWFpHOWtTRTFuV2pOS2FHSnVVV2RhYlRreFltMVJaMWxZVW1OaWFVRnhTVWRvTUdSSVFUWk1lVGwzWWpKNE5XSlhWbmxNYldSd1pFZG9NVmxwTlhCaWVUbFJVVlpTUmxSc1VsUk1ibEkwWkVaNGRVbERiM1pZUnpWd1lsaENkbU51VVdkbGVVSjBXVmhLY2xwWVNYTkpSbEpzWWxoQ2MxbFlVbXhKU0RCbldtNUtkbUpUUVc1TWFUa3dXbGN4ZDJKSFJqQmFVelZ4WTNsak4xaEhOSFpMYVhCalltbEJjVWxHVW05YVUwSnJXbGRhYUdSWGVEQkpSbEpzWWxoQ2MxbFlVbXhTYlVacVpFYzVlV1ZUUWpOaFIyeHFZVU5DYWxsWFRtOWFXRTFuVmtkV2RHTkhlR2hrUjFaNlNVZDBiR1ZYVm10SlJ6bDFXRWMwWjB0cFFubGFXRTR4WWtoUmRXUkliSGRhVTBKb1ltMVJaMk50Vm5wa1YzZ3dURzVPTUdOdGJIVmFNMDExV0VjMFowdHBPV05pYlZZMFkwYzVlV1JEUW0xa1Z6VnFaRWRzZG1KcFFqQmFWekYzWWtkR01GcFZXbWhaTTFKMlkyNXJiMk50Vm5wa1YzZ3dTMU5DTjFoSE5HZEpRMEZuWWtkV01FbElVbXhpV0VKeldWaFNiRkV5Um1waFIxVm5VRk5DTUZwWE1YZGlSMFl3V2xWT2FGa3lhR3hqZVRWdVdsaFJiMk50Vm5wa1YzZ3dURzVTTldOSFZYQlBNWGgxU1VOQlowbEhiRzFKUTJnd1dsY3hkMkpIUmpCYVZVNW9XVEpvYkVsRU1EbFFVMEl4WW0xU2JGcHRiSFZhVjFGd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjJSSFZuUmpSM2hvWkVkV1JGbFhUbTlhVTBFNVNVaDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTRTR3WTIxc2RWb3pUa0pqYmtwb1pWUnZaMkp0VmpOSlJtUnNXVmQwVGxsWVFXOUxVM2hqWW1sQlowbERRV2RKUTBGblNVTkJaMGxIZEd4bFZrNHdZMjFzZFZwNmIyZGliVll6U1VVeGFHTkRaM0JZUnpSblNVTkJaMGxEUVdkSlNEQTNXRWMwWjBsRFFXZEpRMEZuU1VoU2JHSllRbk5aV0ZKc1VUSkdhbUZIVm5wTWJrNXNaRU5vZVZwWVRqRmlTRkYxWkVoc2QxcFRkMmRrUjFaMFkwZDRhR1JIVmtSWlYwNXZXbE5yTjFoSE5HZEpRMEZuWmxaNGRVbERRV2RKUjNoc1pFTkNNRnBYTVhkaVIwWXdXbE5CT1VsSVVteGlXRUp6V1ZoU2JGRXlSbXBoUjFWMVl6TlNlV0ZYTlc1ak1FWjVZMjFHTlV4dFpHeGtRMmg1V2xoT01XSklVWFZqTTFKNVlWYzFibU41YXpkWVJ6Um5TVU5CWjJGWFdXZExTRkpzWWxoQ2MxbFlVbXhKUTBVNVVGTkNNV0p0VW14YWJXeDFXbGRSY0VsSWRHTmlhVUZuU1VOQlowbERRV2RqYlZZd1pGaEtkVWxJVW14aVdFSnpXVmhTYkU4eGVIVkpRMEZuU1VneFkySnBRV2RKUTBGMlRIbENTbHBwUWpCaFIxVm5Wa2RXZEdOSGVHaGtSMVpVWkVoS2NHSnRaSHBSV0VwNVdWaHJaMkZZVFdkaWJWWXpURU5DYmxwWE5XeGpiVVl3V2xOQ2FFbEhkR3hsVTBKdFkyMDVkRWxJVW05YVUwSjZaRWhLY0dKdFpIcFlSelJuU1VOQloweDVPR2RXUjJod1kzbENjbHBZYTJkaFdFMW5ZekpvYUdOdFZtdEpSMHBzWkVoa2JGcFhOR2RaVjNoelNVaFNiR0pZUW5OWldGSnNZM2xDTTJGWVVtOUpSMnhyV2xjMU1HRlhUbWhpUTBKcVlqSTFNRnBYTlRCWVJ6Um5TVU5CWjFreU9YVmpNMUZuWVRKV05VbEVNR2RqYlZaNlpGZDRNRXh1VGpCamJXeDFXak5OZFdGdE9YQmlhV2gwV1ZoS2NscFlTWEJQTVhoMVNVTkJaMGxET0haSlJVNXZXbGRPY2tsSGJHMUpTR1JzU1VkR2MyTnRWbWhhU0d0bllVZEdNbHBUUW1oSlJsSnNZbGhDYzFsWVVteEpSMXAyWTJsQ01HRkhiSHBKUjNSc1pWWjRkVWxEUVdkSlNGSnNZbGhDYzFsWVVteEpSREJuWkVkV2RHTkhlR2hrUjFaRVdWZE9iMXBUTlhKYVdHeFVaRWhLY0dKdFkzVmFNbFl3UzBkMGJHVlRhemRZUnpSblNVTkJaMkZYV1dkTFNGSnNZbGhDYzFsWVVteEpSREE1VUZOQ01XSnRVbXhhYld4MVdsZFJjRWxJZEdOaWFVRm5TVU5CWjBsRFFXZE1lVGhuVTFkWloyUXlWV2RoUjBZeVdsTkNkV0l6VVdkak1sWnNZbWxDTUdGSGJIcEpSM1JzWlZOQ2FWcFhXblpqYlZWelNVZE9lVnBYUmpCYVUwSm9TVWMxYkdSNVFsVmFWekYzWWtkR01GcFdlSFZKUTBGblNVTkJaMGxEUWpCYVZ6RjNZa2RHTUZwVFFUbEpSelZzWkhsQ1ZWcFhNWGRpUjBZd1dsTm9lVnBZVGpGaVNGRnpTVWhLYkdNelZuTmtRelZ1V2xoU1ZWcFhNWGRpUjBZd1dsVldjMXBYTVd4aWJsRnZTMU5yTjFoSE5HZEpRMEZuU1VOQlowbERPSFpKUlU1b1dUSm9iRWxJVW05YVUwSlZXbGN4ZDJKSFJqQmFVMEp0WWpOSloyUkhhSEJqZVVKeVdsaHNZMkpwUVdkSlEwRm5TVU5CWjJSSFZuUmpSM2hvWkVkV1JGbFhUbTlhVXpWeVdsaHNWR1JJU25CaWJXTjFZekpXTUV0SGRHeGxVM2RuWkVkV2RHTkhlR2hrUjFWd1R6RjRkVWxEUVdkSlNERmpZbWxCWjBsRFFYWk1lVUpFV1ZkT2IxcFRRbWhpUjNkbldtNVdNR1JZU214SlNFWXhXbGhLY0ZwWVRXZGFiVGw1U1VoU2IyRllUV2RXUjFaMFkwZDRhR1JIVmxSa1NFcHdZbTFrZWxGWVNubFpXR3hqWW1sQlowbERRakJhVnpGM1lrZEdNRnBWVG1oWk1taHNURzVPTUdOdGJIVmFNMDVDWTI1S2FHVlROWHBhV0ZGdlkyMVdlbVJYZURCTWJrNHdZMjFzZFZvelRYTkpTRkpzWWxoQ2MxbFlVbXhMVkhSalltbEJaMGxEUW5sYVdGSXhZMjAwWjJSSFZuUmpSM2hvWkVkVk4xaEhOVGxZUnpWc1pVaENkbU51VVdkWk1qbDFZek5SWjJSSFZuUmpSM2hvWkVkV1JGbFhUbTlhV0UxblVGTkNkVnBZWTJkVVYwWjNTME5yTjFoSE5IWk1lVTFuWXpJNU1XTnRUbXhVVjBaM1kwZHNkVm94VmxOVVJERXdXbGN4ZDJKSFJqQmFVekZ0V1ZkT01HSXpTalZNYlhCNlRHMHhhR05EU1hOSmFUaHhTMng0ZFVsRGIyZFJSM2h3V1RKV2RXTXlWbU5pYVVGeFNVVk9kbU5JYkhsaFYyUnZaRU5CYjFsNWEyZE5ha0Y0VG5sQ1ZXRkhWV2RWUnpselpWY3hiR05wUWxGamJUbHhXbGRPTUVsRlJqRmtSMmgyWTI1TmRVbEZSbk5pUTBKNVlWZGtiMlJJVFdkamJWWjZXbGhLTWxwWFVYVllSelJuUzJsQ1ZXRkhiSHBKUjA1MldrZFZaMkpYUmpWSlJ6bDFZa2hyWjFsdFZXZGtXRTVzV2tOQ01XSnRVbXhqYVVJd1lVZFZaMUZzVGtWSlNFNHdaVmQ0YkVsSGVIQlpNbFoxWXpKVloxcHRPVEZpYlZGbldWaFNZMkpwUVhGSlIyZ3daRWhCTmt4NU9YZGlNbmcxWWxkV2VVeHRaSEJrUjJneFdXazFjR0o1T1UxVFZVNUdWR3hPUmt4dVVqUmtSbmgxU1VOdloxWkhhR3hKUjA1MllsaENjMXBZVW14SlNFNXNaRU5DZGxwcFFtaGtXRkp2WWpOS2VrbEhNV2hsVTBKcFdsTkNiV0l6Vm5WYVEwSm9aRVo0ZFVsRGIyZGhTRkl3WTBSdmRrd3pRblppU0d4MFdsaEpkVm95YkRCaFNGWnBURzFzZGt3d1JsWldSV2hRVld4TmRXUklhREJZUnpSblMybENWV0ZIVldkWk1qbDBZMGQ0YkdSSFZXZGpNbFl3U1VjNWJVbEhUblppYmxKNVlWZEtNV1JIT1hsamVVSjBXVmhyWjFsdFZXZGFiVGt4WW0xUloxbFlVbU5pYVVGeFNVZG9NR1JJUVRaTWVUbDNZako0TldKWFZubE1iV1J3WkVkb01WbHBOWEJpZVRsRVZEQTFWVlZyYkVOV1ZsSlFWV3hOZFdSSWFEQllSelJuUzJsQ1JHSXlVbXhKUjFKd1l6TlNlV0ZYU2pGa1IxWnJTVWRLTlVsRlpIWmlNbVJ6V2xOQ2FHTjVRbmRaV0Vvd1NVYzViVWxJVW05YVUwSjNZako0TldKWFZubEpTRUo1WWpKd2JGa3pVV2RoV0UxbldWZDRlbUl4ZUhWSlEyOW5Zek5XYVdGdFZtcGtRMEl3WW5sQ2FHSnBRbWhhUjFKd1pFZHNkbUp0Um5OSlJXeFJTVWhLY0ZveWFEQmplVUp1WTIxR2RXUkRRbTFpTTFaMVdrTkNhR1JHZUhWSlEyOW5ZVWhTTUdORWIzWk1NMEoyWWtoc2RGcFlTWFZhTW13d1lVaFdhVXh0YkhaTU1VSkNWa1ZXVDFaR1RYVmtTR2d3V0VjMFowdHBPV05pYVRoeFMyeDRkVWxEYjJkUlJ6RjJXa2hXYzFwVFFuTmhXRkYwWVVoU2RHSkdlSFZKUTI5MldFYzFjR0pZUW5aamJsRm5aWGxDZVZwWE1YWmtiVlpQWWpKU2JHTjVRamxKUjFwNVlqSXdaMHA1TkhaYVJ6bDBURzF3ZWtwNmRHTmliV3gwWTBjNWVXUkRRamRKUlRWMldrZFdVVmxZU2pCSlNEQm5XbTVLZG1KVFFXNU1hVGwzV1ZoS01HTjVOWEZqZVdNM1dFYzFjR0pZUW5aamJsRm5aWGxDTUZwWE1YZGlSMFl3V2xWYWFGa3pVblpqYm10blpsTkNiV050T1hSSlEyTjFURE5TYkdKWVFuTlpXRkpzVEZkYWFGa3pVblpqYm10MVlXNU5iazh4ZUhWYVdHaDNZak5LTUVsSFRuWmliazR3U1VoQ2FHTnVVbnBKUkRCblltMVdNMGxHWkd4WlYzUk9XVmhCYjB0VWRHTmlhVGh4UzJ4NGRVbERiMmRWYlZaMVdrZFdlV041UW1oSlNGSnNZbGhDYzFsWVVteEpTRXBzWXpOV2MyUkRRblpqYVVKMlpFZG9iR05wUWpKWlYzZ3hXbE5DTUdKNVFtaEpSMDUyWW01U2FHRlhOV3hqYVRWalltbEJjVmhITkdkTGFVSlZZbmxDTVdOSFVtaGtSMVZuV1ZOQ2FtSXlOVEJaVjJ4MVdsaEpaMlF5YkRCaFEwSjFXbGhqWjJSdFJuTmtWMVo2VEVOQ2VWcFhWakpaVjNneFdWaFNiRWxJVW05YVUwSXdXbGN4ZDJKSFJqQmFVMEp6WVZoU2JHTnRSbk5KUjBaMVdrWjRkVWxEYjJkWk1rWnpZa05DWjJOdFZuVmFSMVo1V1VOQ00yRllVbTlKU0ZKdldsTkNkVnBZWTJkamJWWjZaRmQ0TUV4c2VIVkpRM0JqWW1sQmNVbEZRbmRaV0Vwb1lsTkNlVnBZVGpGaVNGRm5VVmMxTlVsSVdtaGlTRlpzU1VoS2JHSnRVbXhqYlVacFlrZFZaMWx1YTJkVWJUbHJXbFpDYUdOdVVXZE1VMEl3WlZoQ2NGa3lSbk5pU0d0bldWTkNWVnBYTVhkaVIwWXdXbFpLYkdNelZuTmtSbmgxU1VOdlowbERRV2RKUjA1NVdsZEdNRnBYVVdkWmJtdG5XbGhhYUdKSVZtaGtSMngxV25sQ2FFbElVbXhpV0VKeldWaFNiRWxJVW1oYWVVSnpZVmQwYkVsSFFtOWtSekZ6V1VOQ2RtTnBRbWRqTTFwdVdVTTFZMkpwUVhGSlJVSjNXVmhLYUdKVFFtcGlNalV3V1Zkc2RWcFlTV2RSVTBKRlZEQXdaMk5IUm5sYVZ6VXdTVWhTZGtsSVNteGliVkpzWTJsQ01HSjVOR2RXUjJoc1NVZFdkV1JIYkhsYVUwSnFZakkxTUZwWE5UQmplVUpvWTIxVloxcFhiREJoUjFaNVdFYzBaMHRwUVdkSlEwRm5ZMjFXZDJKSFJtcGFWMUZ6U1VjNWVVbEhWbTFhYld4cVlWZFdkV1JIZURWSlNGWjNXa2RHTUZwWFVXZGhWMWxuWkVkb2JFbElUbWhpVjFWblkyMVdlbVJYZURCSlNGSTFZMGRWWjJReVJucEpTRUo1V2xoYWNHSXpWbnBZUnpSblMybEJaMGxEUVdkamJWWjFXa2RXZVZwWFVXZGtSMmhzWTIxVmRWaEhOR2RMYVVKQlkwZEdlVmxYTUdkaU0wSXdZVmM1ZFdONVFsTmFWelZyV2xoS1VHTklVbkJpTWpWNlNVZGFkbU5wUWpCaFIxVm5XbGMxTUdGWVNteEpTRXBzWW0xU2JHTnBRakJqYlZac1NVaEtiR0p0VW14amJWWnJTVWhTZGtsSVVtOWhXRTVqWW1sQmNVbERRV2RKUTBKcVlqSTFNRmxYYkhWYVdFbDFTVVpLYkdKdFVteGphVUoyWTBoU2NHSXlOWHBKUnpFeFl6TlJaMHR0Tlhaa1EyOW5XVEpvYUdKdFpHeEpSMHBzWkVoa2JGcFhOR2RqYlZaMVdrZFdlV041UWpCaWVVSXdZVWRWWjJNeVJuUmFWbmgxU1VOdlowbERRV2RKUjA1MlltNVNhR0ZYTld4amFYZG5XVmhOWjJSSGFIWmpNbFZuV1RKb2FHSnRaR3hqZVVJellWZDRjMGxITlhaa1EwSnNXbTFhYkZrelVXZGpTRXBzWkcxc2RtUllUbk5sVTBKNVdsYzFhMXBZU214YVEwSkZWREF3ZFZoSE5HZExhVGxqWW0xV05HTkhPWGxrUTBKcVlqSTFlbVJEUW5sYVZ6VnJXbGhKWjFCVFFXOWpiVlo2WkZkNE1FeERRbXBpTWpVd1dWZHNkVnBZU1hOSlJ6bDNaRWRzZG1KdVRYQkpSREFyU1VoMFkySnBRV2RKUTBKeldsaFJaMk5IUm5sa1EwRTVTVWhDYUdOdVVucE1iV1JzWkVOb2FtSXlOVEJaVjJ4MVdsaEpjRTh4ZUhWSlEwRm5TVWRzYlVsRGFIZFpXRW93U1VRd09WQlRRakZpYlZKc1dtMXNkVnBYVVhCSlNIUmpZbWxCWjBsRFFXZEpRMEZuWTIxV2RHSXpXbXhVYlRscldsaE5iMWt5T1hWa1IwWndZbTFXZVV4RFFtcGlNalV3V1Zkc2RWcFlTWFZhYld4NVl6TlNSR0ZIYkhOYVEyczNXRWMwWjBsRFFXZEpRMEZuU1VoQ2FHTnVVbnBNYms1c1pFTm9hbUl5TlRCWlYyeDFXbGhKYzBsSVFtaGpibEZuVUZOQ2RWcFlZMmRVYlRscldsWkNhR051VVc5VU1rcHhXbGRPTUV4dFJucGpNbXh1WW1sb04wbElVbXhpV0VKeldWaFNiRkp0Um1wa1J6bDVaVk5DT1V4RFFuWmpTRkp3WWpJMWVrdFRhM0JQTVhoMVNVTkJaMGxEUVdkSlEwSjNXVmhLTUV4dFJuZGpSMVoxV2tWc2RXUkhPRzlaTWpsMVpFZEdjR0p0Vm5sTFZIUmpZbWxCWjBsRFFqbFlSelJuU1VOQloyTkhSbmxrUXpWNldsaFNWMWxYZURGYVUyaDVXbGhPTVdKSVVYQlBNWGgxU1VOQlowbElRbWhqYmxGMVdUSTVkR0pYYkRCTFEyczNXRWMxT1U4eGVIVk1lVGhxU1VoT2RtUllTbXBhVlRGb1kwaENjR0p0WkZaVmEzYzVZMjFXZFZwSFZubE1iWEI2VEcweGFHTkRTWE5KYVRoeFMyeDRkVWxEYjJkUlIzaHdXVEpXZFdNeVZtTmlhVUZ4U1VWT2RtTkliSGxoVjJSdlpFTkJiMWw1YTJkTmFrRjRUbmxDVldGSFZXZFZSemx6WlZjeGJHTnBRbEZqYlRseFdsZE9NRWxGUmpGa1IyaDJZMjVOZFVsRlJuTmlRMEo1WVZka2IyUklUV2RqYlZaNldsaEtNbHBYVVhWWVJ6Um5TMmxDVldGSGJIcEpSMDUyV2tkVloySlhSalZKUnpsMVlraHJaMWx0Vldka1dFNXNXa05DTVdKdFVteGphVUl3WVVkVloxRnNUa1ZKU0U0d1pWZDRiRWxIZUhCWk1sWjFZekpWWjFwdE9URmliVkZuV1ZoU1kySnBRWEZKUjJnd1pFaEJOa3g1T1hkaU1uZzFZbGRXZVV4dFpIQmtSMmd4V1drMWNHSjVPVTFUVlU1R1ZHeE9Sa3h1VWpSa1JuaDFTVU52WjFaSGFHeEpSMDUyWWxoQ2MxcFlVbXhKU0U1c1pFTkNkbHBwUW1oa1dGSnZZak5LZWtsSE1XaGxVMEpwV2xOQ2JXSXpWblZhUTBKb1pFWjRkVWxEYjJkaFNGSXdZMFJ2ZGt3elFuWmlTR3gwV2xoSmRWb3liREJoU0ZacFRHMXNka3d3UmxaV1JXaFFWV3hOZFdSSWFEQllSelJuUzJsQ1ZXRkhWV2RaTWpsMFkwZDRiR1JIVldkak1sWXdTVWM1YlVsSFRuWmlibEo1WVZkS01XUkhPWGxqZVVKMFdWaHJaMWx0VldkYWJUa3hZbTFSWjFsWVVtTmlhVUZ4U1Vkb01HUklRVFpNZVRsM1lqSjROV0pYVm5sTWJXUndaRWRvTVZscE5YQmllVGxFVkRBMVZWVnJiRU5XVmxKUVZXeE5kV1JJYURCWVJ6Um5TMmxDUkdJeVVteEpSMUp3WXpOU2VXRlhTakZrUjFaclNVZEtOVWxGWkhaaU1tUnpXbE5DYUdONVFuZFpXRW93U1VjNWJVbElVbTlhVTBKM1lqSjROV0pYVm5sSlNFSjVZakp3YkZrelVXZGhXRTFuV1ZkNGVtSXhlSFZKUTI5bll6TldhV0Z0Vm1wa1EwSXdZbmxDYUdKcFFtaGFSMUp3WkVkc2RtSnRSbk5KUld4UlNVaEtjRm95YURCamVVSnVZMjFHZFdSRFFtMWlNMVoxV2tOQ2FHUkdlSFZKUTI5bllVaFNNR05FYjNaTU0wSjJZa2hzZEZwWVNYVmFNbXd3WVVoV2FVeHRiSFpNTVVKQ1ZrVldUMVpHVFhWa1NHZ3dXRWMwWjB0cE9XTmliV3gwWTBjNWVXUkRRamRKUlVZd1pFaEtjRmx1VmpCYVZVNTJZbGN4Y0dSSVVteGphWGRuVVcwNWRtSkhWbWhpYTBZd1pFaEtjRmx1VmpCYVZrSm9ZMjVSYzBsRlZqSmFWelV3VlVkR2VXUkRkMmRVYlRscldsWkNhR051VVhOSlJrSjVZak5DYkdOdVVqVlJNamwwWWxkc01HUkhWbmxKU0RCbldtNUtkbUpUUVc1TWFUbDNXVmhLTUdONU5YRmplV00zV0VjMGRrdHBjR05pYVVGeFNVVk9lVnBYUmpCYVdFMW5WVWRHZVdSSVRXZGtNbWhzWW1sQ2FFbElVbXhpV0VKeldWaFNiRWxIYkhwSlIyeDFZek5TYUdKdVVuQlpXRkpzV2tNMVkySnBRWEZNTVhoMVdsaG9kMkl6U2pCSlIwNXpXVmhPZWtsRlVteGFiVVl4WWtoU1ZWcFhNWGRpUjBZd1dsWkNlV0l5VG14ak0wNTJZMmxDTjFoSE5HZEpRMEZuVEhsdmNWaEhOR2RKUTBGblNVTnZaMUV6U214WldGSnNTVWhDYUdOdVVucEpSMXAyWTJsQ2FHSnBRbWhrU0ZKNVlWZEtNV1JIVlhSalJ6bDZZVmhTY0dJeU5HZFpiV3gxV2tkc2RWcDVkMmRhTW13eVdsYzBaMlJIYUd4SlIxWXlXbGMxTUV4RFFtaGtTRko1WVZkS01XUkhWbU5pYVVGblNVTkJaMHRwUW5WWlZ6RnNURU5DYUdKdFVXZGpNMUo1WVZjMWJrbEhlSEJrUjFaNVdWZDRla3hzZUhWSlEwRm5TVU5CY1ZoSE5HZEpRMEZuU1VOdloxRklRbWhqYlVaMFNVZFdjMXBYTVd4aWJsRm5Wa2RvYkVsSFZuTmFWekZzWW01Uloxa3lPWFZrUjBad1ltMXNkVnA1UWpCaFIxVm5XVzFzZFZwSGJIVmFNWGgxU1VOQlowbERRWEZKUlVKM1dWaEthR0pUUW5WWlZ6RnNTVU5DVldGSFZXZFpXRkl3WTIxc2FXUllVbXhKUnpWb1lsZFdZMkpwUVdkSlEwRm5TMmxDUVdOSFJubFpWekJuWXpOU2VXRlhOVzVqZVVKVllVZFZaMk16VW5saFZ6VnVTVWQ0Y0dSSFZubFpWM2g2VEdsQ1ZXRkhWbmxhVTBKb1kyMVZaMWxYZUROWldHeDZTVWRHTUVsSGVHeFpXRTR3U1VoU00ySjVRbnBrU0Vwd1ltMWtla3hHZUhWSlEwRm5TVU5CY1VsRFFXZGFXRnBzWW01UloxcHRPWGxKUjFveFlrZDROVXhYVG5aaWJsSjVZako0YzFwWFVXZFpiV3gxV2tkc2RWb3pUV2RrTW13d1lVTkNhRWxJVG5CaWJXUnpXbE5DYkdWSVFubGFXRTU2WVZjNWRVeHNlSFZKUTBGblNVTkJjVXd4ZUhWSlEwRm5TVWRvYUdKdFVuTmFWVVl3WkVoS2NGbHVWakJhVlZZMFkwaEtiR016VG5CaU1qVjZTMGRXYzFwWE1XeGlibEZ6U1VjMWFHSlhWWE5KU0U0d1kyMXNkVm96VFhOSlJ6bDNaRWRzZG1KdVRYQkpTSFJqWW1sQlowbERRV2RKUTBGbldUSTVkV016VVdkalNFcHNXbTFzTkVsRU1HZGliVVowV2xaemQxaFVkR05pYVVGblNVTkJaMGxEUVdkaFYxbG5TMGhDZVZwWFduQmxRMEU1VUZRd1owcDVORzVMVTBJM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFtcGlNalY2WkVOQ2FtSXlNWFJoV0ZJd1dsaEpaMUJUUW5WYVdHTm5WVWhLZG1OSFZubGtTR3hFWWpJeGRHRllVakJhV0VsdldsZDRiR0pYVm5Wa1EzZG5ZbTFHZEZwVE5YcGlSMnhxV2xObmVFdFRkMmRqTTFKNVlWYzFibU41YXpkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ2VWcFlVakZqYlRSbldUSTVkR0pYYkRCa1IxWjVURzVDYUdOdVVucFBNWGgxU1VOQlowbERRV2RKUTBJNVdFYzBaMGxEUVdkSlEwRm5TVWRzYlVsRGFIZGpiVlp0WVZobloxQlVNRGxKUTJSQlNubHJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTIxV01HUllTblZKUm5SMVdsaGpaMUpZV214aWJsSlJXVmhLTUV0SFZuTmFWekZzWW01UmMwbEhOV2hpVjFWMVl6SjRjRmt5Vlc5TlUydHpTVWM1ZDJSSGJIWmliazExV2xoYWJHSnVVa1JpTWpVd1dsaG9NRXRXTURkWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRV2RKUTBGbllWZFpaMHRJUW5sYVYxcHdaVU5CT1ZCVU1HZEtlamh1UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSjVXbGhTTVdOdE5HZFhNalZzWkhsQ1EySXlPWE5hVjBaMVVWaFNNR050Ykdsa1dGSnNWVWRHZVdSRGFHeGlSMVowV2xjMU1FeERRblZaVnpGc1RHNU9jMkZYVG14TFJFVndURU5DZW1SSVNuQmliV1I2UzFZd04xaEhOR2RKUTBGblNVTkJaMGxJTVdOaWFVRm5TVU5CWjBsRFFXZFpNamwxWXpOUloxa3lPWFJpVjJ3d1pFZFdlVWxFTUdkaWJWWXpTVVZHTUdSSVNuQlpibFl3V2xWT2RtSlhNWEJrU0ZKc1kybG9iR0pIVm5SYVZ6VXdURU5DZFZsWE1XeE1RMEo2WkVoS2NHSnRaSHBMVkhSalltbEJaMGxEUVdkSlEwRm5ZMjFXTUdSWVNuVkpSMDUyWWxjeGNHUklVbXhqYVRWM1dWaEtNR042ZEdOaWFVRm5TVU5DT1ZoSE5HZEpRMEZuVEhsdmNWaEhOR2RKUTBGblNVTnZaMUV6U214WldGSnNTVWhDYUdOdVVucEpSMXAyWTJsQ2FFbElVbXhsU0ZGMFkwYzVlbUZZVW5CaU1qUm5XVzFzZFZwSGJIVmFlVFZqWW1sQlowbERRV2RMYVVKQlkwZEdlVmxYTUdka1IxWjBZMGQ0YUdSSFZrZFpWMDR3WWpOS05WaEhOR2RKUTBGblNVTnZkbGhITkdkSlEwRm5ZVWRHZFZwSGVHeFdSMVkwWkVWV05HTklTbXhqTTA1d1lqSTBiMkl6UWpCaFZ6bDFZM2xyWjJVeGVIVkpRMEZuU1VOQlowbERRbmxhV0ZJeFkyMDBaMkp0VmpOSlJUVjJXa2RXVVZsWVNqQkxSemwzWkVkc2RtSnVUWEJQTVhoMVNVTkJaMGxJTVdOaWJqRmpZbTFXTkdOSE9YbGtRMEpxWWpJMWVtUkRRbXRhVjFwb1pGZDRNRlpIVm5SalIzaG9aRWRXVVdOdE9XcGFXRTU2WWpOSloxQlRRblZhV0dOblVrZFdiVmxZVm5Oa1JsSnNZbGhDYzFsWVVteFZTRXAyV1RKV2VtTXlPWGxMUTJzM1dFYzBka3g1VFdkak1qa3hZMjFPYkZSWFJuZGpSMngxV2pGV1UxUkVNV3RhVjFwb1pGZDRNRXhZVW14aVdFSnpXVmhTYkV4WVFubGlNazVzWXpOT2RtTnBOWEZqZVRWMFdWaEJhVXhEU1haTGFYQmpZbWxCY1VsRlFuTmhWMDVzWW01T2JGaEhOR2RMYVVKRVlqTkNOV050Ykc1aFNGRm5TMGROY0VsRVNYZE5WR05uVmtkb2JFbEdRblppU0d4MFdsaEpaMVZJU25aaGJWWnFaRU5DUW1SWVVtOWlNMHA2VEdsQ1FtSkhkMmRqYld4dVlVaFNla2xJU214ak1sWjVaRzFXYTB4c2VIVkpRMjluVmtkb2NHTjVRbXBpTWxKc1NVY3hhR1ZUUW5aaWJYZzFTVWRLYkVsSVZucGFWMUZuWkZjMWExcFlTV2RrUjJoc1NVVktWRkpEUW5wa1NHeHpXbE5DYzJGWFRteGliazVzU1VkYWRtUlhOV3RKUjBZd1dFYzBaMHRwUW05a1NGSjNUMms0ZG1OSE9YTmxWekZzWTJrMWJtRllVbTlrVjBsMVlWYzRkbFJGYkVSU1ZUVlVVbE0xTUdWSVVtTmlhVUZ4U1VaU2IxcFRRbXBpTWpGM1lrZFdNRnBUUW5wYVdGRm5ZakpaWjFsWVZqQmhSemw1WTNsQ2RGbFlhMmRaYlZWbldtMDVNV0p0VVdkWldGSmpZbWxCY1VsSGFEQmtTRUUyVEhrNWQySXllRFZpVjFaNVRHMWtjR1JIYURGWmFUVndZbms1UWxaV1VrbFVNVXBVVEc1U05HUkdlSFZKUTI5blZrZG9iRWxIVG5aaVdFSnpXbGhTYkVsSVRteGtRMEoyV21sQ2FtSXlOVEJqYld4cFpGaFNkbU51VFdkaVYwWTFTVWRLYkVsSFduWmtWelZyU1VkR01GaEhOR2RMYVVKdlpFaFNkMDlwT0haalJ6bHpaVmN4YkdOcE5XNWhXRkp2WkZkSmRXRlhPSFpSTURsUFZrWktTbEZzVmxWVU1VcFVURzVTTkdSR2VIVkpRMjluVVRJNWExcFRRbXRoV0U0d1kyMXNhV1JZVW14YVEwSnBaVk5DU0dJeU9XNWlSMVZuV1ZoTloyTkhSbmxrUTBKMldtbENNR0ZIVldkalJ6bHpaVmN4YkdOcFFuZGpiVGx4V2xkT01FbEhiSHBKUjBaell6STVZMkpwUVhGSlNFNHhXVzF3YkZrelVXZGtSemhuV1ZjMFoxbFhVbXRoV0ZKd1lqSTFhR0pEUWtwVlEwSjVZVmRrYjJSSVRXZGFNMHBvWW01UloxcHRPVEZpYlZGbldWaFNZMkpwUVhGSlIyZ3daRWhCTmt4NU9YZGlNbmcxWWxkV2VVeHRaSEJrUjJneFdXazFjR0o1T1ZGUlZsSkdWR3hTVkV4dVVqUmtSbmgxU1VOdmRsaEhOSFpMYVhCalltbEJjVmhITkdkTGFVSk9XVmRzZFVsSGVIQmtRekZ2WkVjeGMwbEhNWFphU0ZaeldsTTFZMkpwUVhGWVJ6Um5TMmxDVGxsWGJIVkpSMVkwWTBjNWVXUklUVFpZUnpSblMyeDRkVWxEYjJkTVUwRm5WekYwYjJSSE1YTllWakZqWW1sQmNVbERNR2RKUm5SaVl6TmFibGhXTVdOaWFVRnhTVU13WjBsR2RHSmpiVloxV2tkV2VWaFdNV05pYVVGeFdFYzBaMHRwUWtGaVZ6bHJaRmQ0YkVsSGVIQmtRekZ2WkVjeGMxaEhOR2RMYVVKQlkwaEtiRnB0Vm5samJWWnJXRWMwWjB0cE9XTmlhVGh4UzJ4NGRVbERiMmRTUnpoblltMDVNRWxJU214aVZ6a3lXbE5DTUdGSGJIcEpSMDUyWWxjeGJHSnVVVGRKUjJ3d1NVZDBiRnBZUW5wSlNGSTFZMGRXYTJJeVRXZGFia3AyWWxOQ2RHRllUbmRpUjBacVlWYzFia2xJVW05YVUwSjBZakpTTVdKSFZtTmlhVUZ4U1VkU2Rsa3pUWFZZUnpSblMyazVZMkp0YkhSalJ6bDVaRU5DTjBsSFVteGFiVVl4WWtoU1ZWcFhNWGRpUjBZd1dsWkNlV0l5VG14ak0wNTJZMmxDT1VsSFdubGlNakJuU25rMGRtSkhiR2xNTWxKc1dtMUdNV0pJVVhSa1IxWjBZMGQ0YUdSSFZYUmpTRXAyV1RKV2VtTXlPWGxNYlhCNlNucDBZMkp0YkhSalJ6bDVaRU5DTjBsR1RsZFNNVkpzWWxoQ2MxbFlVbXhWYlZaNlpGZDRNRXhEUWxWYVZ6RjNZa2RHTUZwV1NteGpNMVp6WkVOQ09VbEhXbmxpTWpCblNuazBkbUpIYkdsTU0xSnNZbGhDYzFsWVVteE1XRXBzWXpOV2MyUkROWEZqZVdNM1dFYzFiR1ZJUW5aamJsRm5aWGxDUlZwWFdtaGtWM2d3VmtkV2RHTkhlR2hrUjFaUlkyMDVhbHBZVG5waU0wbHpTVWRTYkZwdFJqRmlTRkpWV2xjeGQySkhSakJhVmtKNVlqSk9iR016VG5aamFVSTVTVWRhZVdJeU1HZEtlVFIyWWtkc2FVd3lVbXhhYlVZeFlraFJkR1JIVm5SalIzaG9aRWRWZEdOSVNuWlpNbFo2WXpJNWVVeHRjSHBLZW5SalltMVdOR05IT1hsa1EwSTNTVWRTY0dOdFZtcGtSMnd5V2xOM1oyRllUa1ZoV0Vwc1dUTlNjR1J0VldkbVUwSnRZMjA1ZEVsRFkzVk1Nbmh3V1drNWEyRllTbXhaTTFKd1pHMVZkV0Z1VFc1UE1YaDFUSGs0WjFaRk9VVlVlV2h4WkZoT01HRlhOVzFaVjJSMVdWYzFjRXRVYjJkamJWWjBZak5hYkVsSGVIQmliVlZuWkRKb2JHSnBRak5hVTBKdVdsaFJaMVJ0T1d0YVZrSm9ZMjVSWjJKWE9USmhWelZ1U1VjeGJHUkhhSFphU0U1alltMVdOR05IT1hsa1EwSTNTVWhLYkdKWE9USmFWVFYyV2tkV2VreERRbmxhV0VKb1kyMVdkV1JGTlhaYVIxWjZTVWd3WjFwdVNuWmlVMEZ1VEdrNWMyRlhTWFphUnpsMFRHMXdla3A2ZEdOaWJWWTBZMGM1ZVdSRFFqZEpSelYyVVRKb2FHSnRaR3hNUTBKMVlqTlNiMkZYTlc1SlNEQm5XbTVLZG1KVFFXNU1hVGx6WVZkSmRtTkhSbmxrUXpWeFkzbGpOMWhITld4bFNFSjJZMjVSWjJWNVFrSmtTRko1WVZkS01XUkhWa1JpTWpGMFlWaFNNRnBZU1hOSlJVWXdaRWhLY0ZsdVZqQmFWa0pvWTI1UmMwbEZTblppTW5oc1dWYzFRbVJJVW5saFYwb3haRWRXVVZsWVNqQk1RMEpHWkcxV2RXUkdRbWhqYmxGelNVZHNlbE5ZVW14amJVWnBZa2RWYzBsSGJIcFZTRXB3WWxkc01HRllXbXhNUTBKUFlqSlNiRlZIUm5sa1EzZG5WVWhLZG1OSFZubGtTR3hFWWpJeGRHRllVakJhV0VselNVWkNlV0l6UW14amJsSTFWVWRHZVdSRFFqbEpSMXA1WWpJd1owcDVOSFppUjJ4cFRETkNhR051VW5wTWJYQjZTbnAwWTJKdFZqUmpSemw1WkVOQ04wbElRbWhqYmxKNlRFTkNlVnBYTld0YVdFbG5abE5DYldOdE9YUkpRMk4xVERKNGNGbHBPWGxhVnpWcldsaEpkV0Z1VFc1UE1YaDFXbGhvZDJJelNqQkpTSE5uWkVkV2RHTkhlR2hrUjFaRVdWZE9iMXBZVFhOSlNGSnNZbGhDYzFsWVVteFNiVVpxWkVjNWVXVlRRamxKUjFwNVlqSXdaMHA1TkhaaVIyeHBURE5TYkdKWVFuTlpXRkpzVEZkYWFGa3pVblpqYm10MVlXNU5iazh4ZUhWYVdHaDNZak5LTUVsSWMyZFdSMVowWTBkNGFHUkhWa3BpYms0d1dWYzFhbHBUUWpsSlIxcDVZakl3WjBwNU5IWmlSMnhwVEROU2JHSllRbk5aV0ZKc1RGZHNkV016VW1oaWJVNXNURzF3ZWtwNmRHTmliVlkwWTBjNWVXUkRRamRKUms1WFVqRlNiR0pZUW5OWldGSnNWVzFXZW1SWGVEQk1RMEpWV2xjeGQySkhSakJhVmtwc1l6TldjMlJEUWpsSlIxcDVZakl3WjBwNU5IWmlSMnhwVEROU2JHSllRbk5aV0ZKc1RGaEtiR016Vm5Oa1F6VnhZM2xqTjFoSE5XeGxTRUoyWTI1UloyVjVRbXBqYlZab1pFZFdUbGxZU25KYVdFbHpTVWRzZWxaSFZuUmpSM2hvWkVkV1VWbFlTakJSVjA0d1lWaGFiRXhEUWxWYVZ6RjNZa2RHTUZwVFFqbEpSMXA1WWpJd1owcDVOSFppUjJ4cFRETlNiR0pZUW5OWldGSnNURzF3ZWtwNmRHTmlhVGgyU1VWc1RsVkZPVk5XUlVaUFZrUnZaMXBIT0dkaWJUa3dTVWRPYjFsWE5XNWFVMEl3WVVkVloyTklTblpqUjFaNVpFaHJaMkp0Um5SYVUwSjJZMmxDTUdGSFZXZFpXRTU2WVZka2RXSlhWblZrUTBKc1pVaENlVnBZVG5waFZ6bDFUR3g0ZFV4NU9HZFdSMmh3WTNsQ2MyRlhOV3hKU0dSd1lrZDNaMWx0Vldka1dFNXNXa05DY0dKcFFubGFWMlJzWlVkV2VrbElVblpKU0U1c1dWaEthbUZEUW0xaU0wbG5Za2RzTUV4WGFEQmlWM2RuWkZoT2FGb3lWWFZZUnpSMlRIbENWVlF3VWxCTFIzQXhZek5TY0dKdFdtaGFNalZvWW0xcmNFOXBRbkJpYlhCc1dUTlJaMlJ0Vm5sak1teDJZbWxDZFdSWE1XbGFXRWxuV1ZoUloxbHVWbkJpUjFGblpFZHNkRnBXZUhWaFYxbG5TMGhTTldOSFZuWmFhVUl6WVZjMWEySXpZMmRKVkRBNVNVTmtNV0p0VW14YWJXeDFXbGRSYmt0VFFqZFlSelJuU1VOQlowdElaSEJpYlZKMlpERnpibUpIYkRCVFNGSjBZa1phYkdOdVRuQmlNalY2U2pFd1oyWklkMmRMU0dSd1ltMVNkbVF4YzI1aVIyd3dVMGhTZEdKR1dteGpiazV3WWpJMWVrb3hNR2RRVTBKaVdGTnJjRXh1UWpGak1tZHZTbnBGZFUxcE5IaEtlV3MzV0VjMU9WaEhOSFpMYVhCalltbEJjVWxGYkhWa1IxWjVZMGhLYkdSSVRXZFpVMEl3V2xjeGQySkhSakJhVTBKellWaFNiR050Um5OSlIwWjZTVWRHZFVsRmFGVlVWWGRuWkVkV2RHTkhlR2hrUjFWblpFZG9hR1JEUW1wWlZ6Um5XbGRhYldGWFRuQmFWelV3WWtoc1kySnBRWEZKU0Vwc1ltMVNiR05wUWpCaWVVSm9ZbTFSWjJSWVFtdFpXRkpzU1VkRloxa3lPWFZrUjBad1ltMVdlVXhzZUhWSlEyOTJXRWMxYkdWSVFuWmpibEZuV1RJNWRXTXpVV2RoU0ZKMFlrTkJPVWxEYUhwa1NFcHdZbTFrZWt4RFFYVk1hVFV5V1ZkNE1WcFlUWEJKUkRBclNVYzFiR1I1UWxWYVZ6RjNZa2RHTUZwV1NteGpNMVp6WkVOb2VtUklTbkJpYldSNlRFTkNNbGxYZURGYVdFMXpTVU5rYjJSSE1YTktlWGRuV2tkV2JWbFlWbk5rUmxKc1lsaENjMWxZVW14VlNFcDJXVEpXZW1NeU9YbExWSFJqWW1rNGNVdHNlSFZKUTI5blUxYzFNRnBZU25kamJWWXdZM2xDYUVsSVVteGlXRUp6V1ZoU2JFbEhlSEJrUjFaNVdWZDNaMWxZVFdkWlZ6Um5WVEZhU0VsSVVteGlXRUp6V1ZoU2JFbElVbTlaV0ZGbldUSkdkVWxIVm0xYWJXeHFZVmRXZFdSSGVEVllSelJuUzJsQ2VWcFhOV3RhV0VsblpFYzRaMWxYTld0SlNGWjNXa2RHTUZwVFFtaEpSMDUyWW01U2FHRlhOV3hqYVRWalltbEJjVXd4ZUhWYVdHaDNZak5LTUVsSFRuWmliazR3U1VoT01scDVRVGxKUTJoNlpFaEtjR0p0WkhwTVEwRjFUR2sxTWxsWGVERmFXRTF3U1VRd0swbEhOV3hrZVVKVVZtdGtWVnBYTVhkaVIwWXdXbFpLYkdNelZuTmtRMmg2WkVoS2NHSnRaSHBNUTBJeVdWZDRNVnBZVFhOSlEyUjZaRzFqYmt4RFFtdGFWMXBvWkZkNE1GWkhWblJqUjNob1pFZFdVV050T1dwYVdFNTZZak5KY0U4eGVIVk1lVGhxU1VoT2RtUllTbXBhVlRGb1kwaENjR0p0WkZaVmEzYzVZa2RzTUV4WGFEQmlWM2QxWVc1TmRXSlhSbmRKYVhkcFRIbHZjVmhITkdkTGFVSkJZa2RzYWxwWE5YcGFWbmgxU1VOdloxRXlPWGRsV0Vwd1dqSm9NRWxEYUdwTFUwRjVUVVJGTTBsR1VtOWFVMEpSWWpKNE5XSlhWbmxKUmtKNVlqSndiRmt6VVdkUldGWXdZVWM1ZVdONU5HZFJWM2h6U1VoS2NGb3lhREJqZVVKNVdsaE9iR051V214YVF6VmpZbWxCY1VsR1VtOWhXRTFuV1RJNWExcFRRblJaV0d0bllqSTFjMlZUUW1sYVUwSXhZekpXYTBsSVZuVmFSMVo1U1VoU2IxcFRRa05WTUZGbll6TlNOV0pIVldkaVIyeHFXbGMxZWxwVFFtMWlNMVoxV2tOQ2FHUkdlSFZKUTI5bllVaFNNR05FYjNaTU0wSjJZa2hzZEZwWVNYVmFNbXd3WVVoV2FVeHRiSFpNTUhoS1VUQldUMVV3VlhWa1NHZ3dXRWMwWjB0cFFsVmhSMVZuV1RJNWRHTkhlR3hrUjFWbll6SldNRWxIT1cxSlIwWXhaRWRvZG1OdVRXZGlWMFkxU1VkS2JFbEhXblprVnpWclNVZEdNRmhITkdkTGFVSnZaRWhTZDA5cE9IWmpSemx6WlZjeGJHTnBOVzVoV0ZKdlpGZEpkV0ZYT0haUlZsWlZVMFU1VTFWNU5UQmxTRkpqWW1sQmNVbEdVbTlhVTBKcVlqSXhkMkpIVmpCYVUwSjZXbGhSWjJJeVdXZFpNamwxWkVoS2NGbHVWakJpTTBwNlNVY3hhR1ZUUW1sYVUwSnRZak5XZFZwRFFtaGtSbmgxU1VOdloyRklVakJqUkc5MlRETkNkbUpJYkhSYVdFbDFXakpzTUdGSVZtbE1iV3gyVERCT1VGUnNVbE5UVlVwV1ZrVTVVMVY1TlRCbFNGSmpZbWxCY1VsRlRuWmFSMVZuV2tkc2VtUklTbkJaYmxZd1dsZFJaMWx1YTJkU01qbDJXako0YkVsSFJucEpTRUpvWTI1UloySXlXV2RrUjJoc1NVaENkbUpJYkhSYVdFbG5ZMGhLZG1GdFZtcGtRMEp3WTNsQ2FHSklUblpZUnpSblMybENlbVJYU25GYVYwNHdTVWhTZGtsSFJuVkpSMFpyV2tkc01HRlhPWFZaVjNkblUxWkJaMk50Ykc1aFNGSjZTVWRrZVZsWE5UQkpSMXAyWkZjMWEwbEhSakJZUnpSblMybENiMlJJVW5kUGFUaDJZMGM1YzJWWE1XeGphVFZ1WVZoU2IyUlhTWFZoVnpoMlZVVkdWVkpWTlZWVmVUVXdaVWhTWTJKcFFYRk1NWGgxVEhsdmNWaEhOR2RMYVVKT1lqSlNNV0pIVldka1J6aG5XVmRTYTBsSVRtOVpWMUkxU1VWU1VGUlRPWHBoUjBaclpWTkNSRlV4VFdkalJ6bHpaVmRhY0dKSGQyZGpNMVozWTBjNWVXUkRRakJpZVVKellWaFJkR0ZJVW5SaVEwSXdXbGN4ZDJKSFJqQmFWbmgxU1VOdloyTnRWblZhUjFaNVlWYzFia3hwUWxSYVYxVm5aRWRvYkVsR2RHSmpiVloxV2tkV2VWaFdNR2RpVjFZd1lVYzVhMGxIV25aamFVSnJXbGhTYUdGWGVIcE1iSGgxU1VOd1kySnBRWEZKUlVKMFlqSlNNV0pIVldkak1taG9Xa2hyZEdOdFZuVmFSMVo1V0VjMFowdHBRa0ZqU0Vwc1dtMVdlV050Vm10WVJ6Um5TMms1WTJKcE9IRkxiSGgxU1VOdloxSkhPR2RpYlRrd1NVaEtiR0pYT1RKYVUwSXdZVWRzZWtsSFRuWmlWekZzWW01Uk4wbEhiREJKUjNSc1dsaENla2xJVWpWalIxWnJZakpOWjFwdVNuWmlVMEowWVZoT2QySkhSbXBoVnpWdVNVaFNiMXBUUW5SaU1sSXhZa2RXWTJKcFFYRkpSMUoyV1ROTmRWaEhOR2RMYVRsalltMXNkR05IT1hsa1EwSTNTVWhLYkdKWE9USmFWVFYyV2tkV2VrbElNR2RhYmtwMllsTkJia3hwT1d0aU1qQjFZVzVOYms4eGVIVmhWekYzWWpOS01FbEljMmRoVnpWNldsaEtNRlJ0T1d0YVZXeDFaRWM1VlZwWE1YZGlSMFl3V2xOM1oyTnRWblJpTTFwc1ZHMDVhMXBZVGtkamJUbDBWa2RXZEdOSGVHaGtSMVZuWmxOQ2JXTnRPWFJKUTJOMVRESXhkbHBIYkcxbFV6RXdXbGN4ZDJKSFJqQmFVelZ4WTNsak4xaEhOWEJpV0VKMlkyNVJaMlY1UW5kWldFb3dZM2wzWjJOdFZuVmFSMVo1U1VkR2VrbEhlSEJrUmtwc1ltMVNiR05wUWpsSlIxcDVZakl3WjBwNU5IWmpiVloxV2tkV2VVeHRjSHBLZW5SalltMXNkR05IT1hsa1EwSTNTVWhTYkdKWVFuTlpXRkpzVVRKR2FtRkhWbnBKU0RCbldtNUtkbUpUUVc1TWFUa3dXbGN4ZDJKSFJqQmFVekZ0V1ZkT01HSXpTalZNYlhCNlNucDBZMkp0YkhSalJ6bDVaRU5DTjBsR1VteGlXRUp6V1ZoU2JGTlhOWHBrUjBaMVdUSlZaMlpUUW0xamJUbDBTVU5qZFV3elVteGlXRUp6V1ZoU2JFeFhiSFZqTTFKb1ltMU9iRXh0Y0hwS2VuUmpZbTFzZEdOSE9YbGtRMEkzU1VjeGFHTnRkR3hqYVhkblZrZFdkR05IZUdoa1IxVm5abE5DYldOdE9YUkpRMk4xVEROU2JHSllRbk5aV0ZKc1RHMXdla3A2ZEdOaWJWWTBZMGM1ZVdSRFFqZEpSMmd3WWxkM2MwbElUakphZVhkblZrZFdkR05IZUdoa1IxWlRXbGhPTVdKSVVXZG1VMEp0WTIwNWRFbERZM1ZNYVRsellWaFJkR0ZJVW5SaVF6VnhZM2xqTjFoSE5IWk1lVUpJV2xoUloxbFRRbkphV0d0blpFYzRaMkpIT1haaE0xWjNTVWRzZFVsSFFqQmFWekYzWWtkR01GcFZUbWhaTW1oc1l6SkJkVmhITldwaU1qVjZaRU5DYmxwWVVsVmFWekYzWWtkR01GcFZUbWhaTW1oc1V6SldOVWxFTUdkTFNGSTFZMGRWYzBsSVRtcGlNMEpzVkcxR2RGcFRhMmRRVkRSbldVTlNOMlJJYkhkYVdEQjBURk5TTjJNeVRuWmpSMVpQV1ZjeGJHWlhRVGRZUnpWeldsaFJaMWt5T1hSalIwWXdZVmRLYzFwV1RtOVpWMUkxVVRGT1ZGWnRWbmxqTW14MlltbEJPVWxJVW5sa1YxVTNXRWMxY0ZwcFFXOWtTR3gzV2xjNWJVbElaSEJpYlZKMlpIazFWR0ZIUm10bFZVNVVWWGxCT1ZCVU1HZEtNMVoxV2tkV2JXRlhOV3hhUTJOd1NVaDBZMkpwUVdkSlEwSnFZakl4ZDFsWVVuQlpiWGhzVlRKb2FGcEliRVJWTVU1WFdsaEtlbUZYT1hWSlJEQm5XbTFHYzJNeVZUZFlSelU1V0VjMWJHSklUbXhKUjJ4dFNVTm9NR1ZZUW14aU1sbG5aREpzZFZwSE9UTk1iRTV2V1ZkU05WRXhUbFJNYmtKNVdsaENhR050VmxWYVZ6RjNZa2RHTUZwVlVuWmlVMEU1VUZRd1owb3pWblZhUjFadFlWYzFiRnBEWTNCSlNIUmpZbWxCWjBsRFFtcGlNalY2WWpKNGJFeHVaR2hqYlRSdldVVnNkVmt5T1hSalIwWXdZVmRLYzFwVFFsUmhSMFpyWlZWT1ZGVjVRakphV0VwNllWYzVkVWxIVW14a1IxWnFaRWRXYTB4cFFtZEpRM1JqWW1sQlowbERRV2RKUTBGbldVWkNjMXBYUm5wYVUwSXhZMGRTYUdSSFZXZGtSemhuV1ZoUloySkhWbWhqTTFGblVVaGtiRmx0VG5aaVdFSjJZbTFXZFdSSVRYWmtNbFpwV1RJNWRHTkhPWFZhVnpVd1l6SndlbEZFU1hWTlF6UjVTVWRHZFZwRFFtZEpRM1JqWW1sQlowbERRV2RKUTBGbldVVkNNMXBYU21waU1qRjNZakkxYkdKdVVucE1NMDV2V1ZkU05Wa3pUbnBSUkVWMVRYazBlRXh0UVhCUE1YaDFTVU5CWjBsSFRuWmlXRUpvWkVkc2FXSkhWbFJoUjBaclpWVk9WRlV4V214amJrNXdZakkwWjFCVFFtMVpWM2g2V2xSMFkySnVNV05pYVRoeFMyeDRkVWxEYjJkV1IxWjBZMGQ0YUdSSFZXZGFiVVpxWkVjNWVXVlRRak5oUjJ4cVlVTkNlbGt5T1hkYVdFMW5aRWRXZEdOSGVHaGtSMVZuVWtVNVRrbElWbnBoVnpWdVNVWk9iMWxYVWpWUk1VNVVUR3g0ZFVsRGIyZFJTRUpvWTIxR2RFbElUbXBpTTBKc1ZHMUdkRnBUUWpkak0xSjVZVmMxYm1aV2VIVkpRMjkyV0VjMWFtSXlOWHBrUTBKNllVZEdhMlZXVW14aVdFSnpXVmhTYkZKdFJtcGtSemw1WlZOQk9VbERhSHBaTWpsM1dsVTFhR0pYVlhCSlJEQXJTVU5vZVZwWVRqRmlTRkZ3U1VRd0swbElkR05pYVVGblNVTkNhbUl5Tlhwa1EwSnFXVmRPYjFwVmRHeGxVMEU1U1Vka2JHUkdVbXhpV0VKeldWaFNiRkV5Um1waFIxWk1XbGhyYjJOdFZucGtWM2d3VEc1U05XTkhWWE5KU0U1cVlqTkNiRlJ0Um5SYVUyczNXRWMwWjBsRFFXZGlSMVl3U1VoU2JHSllRbk5aV0ZKc1VUSkdhbUZIVldkUVUwSXdXbGN4ZDJKSFJqQmFWVTVvV1RKb2JHTjVOVzVhV0ZGdldUSkdhbUZIVmt4YVdHdHdUekY0ZFVsRFFXZEpSMnh0U1VOb01GcFhNWGRpUjBZd1dsVk9hRmt5YUd4SlJEQTVVRk5DTVdKdFVteGFiV3gxV2xkUmNFbElkR05pYVVGblNVTkJaMGxEUVdka1IxWjBZMGQ0YUdSSFZrUlpWMDV2V2xOQk9VbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhPTUdOdGJIVmFNMDVDWTI1S2FHVlViMmRpYlZZelNVWmtiRmxYZEU1WldFRnZTMU40WTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjNSc1pWWk9NR050YkhWYWVtOW5ZbTFXTTBsRk1XaGpRMmR3V0VjMFowbERRV2RKUTBGblNVZ3dOMWhITkdkSlEwRm5TVU5CWjBsSVVteGlXRUp6V1ZoU2JGRXlSbXBoUjFaNlRHNU9iR1JEYUdwWlYwNXZXbFYwYkdWVGQyZGtSMVowWTBkNGFHUkhWa1JaVjA1dldsTnJOMWhITkdkSlEwRm5abFo0ZFVsRFFXZEpSM2hzWkVOQ01GcFhNWGRpUjBZd1dsTkJPVWxJVW14aVdFSnpXVmhTYkZFeVJtcGhSMVYxWXpOU2VXRlhOVzVqTUVaNVkyMUdOVXh0Wkd4a1EyaDVXbGhPTVdKSVVYVmpNMUo1WVZjMWJtTjVhemRZUnpSblNVTkJaMkZYV1dkTFNGSnNZbGhDYzFsWVVteEpRMFU1VUZOQ01XSnRVbXhhYld4MVdsZFJjRWxJZEdOaWFVRm5TVU5CWjBsRFFXZGpiVll3WkZoS2RVbElVbXhpV0VKeldWaFNiRTh4ZUhWSlEwRm5TVWd4WTJKcFFXZEpRMEpxWWpJMWVtUkRRbkphV0d0blVGTkNlVnBZVGpGaVNGRjFZek5TZVdGWE5XNWplVFZ4WWpKc2RVdEhNV2hqYlhSc1kybHJOMWhITkdkSlEwRm5aRWRXZEdOSGVHaGtSMVZuVUZOQ01GcFhNWGRpUjBZd1dsVk9hRmt5YUd4TWJYUnNaVlpPTUdOdGJIVmFlVFZ1V2xoUmIyRXlWalZMVkhSalltbEJaMGxEUW5CYWFVRnZaRWRXZEdOSGVHaGtSMVZuVUZRd09VbElWblZhUjFadFlWYzFiRnBEYTJkbE1YaDFTVU5CWjBsRFFXZEpRMEpxWWpJMWVtUkRRbXhpUjFaMFdsYzFNRWxFTUdkamJWWjZaRmQ0TUV4dFpHeGtSbEpzWWxoQ2MxbFlVbXhTVjNoc1lsZFdkV1JEWjNCUE1YaDFTVU5CWjBsRFFXZEpRMEp3V21sQmIxa3lPWFJqUjBZd1lWZEtjMXBXVG05WlYxSTFVVEZPVkZadFZubGpNbXgyWW1scloyVXhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5aREpzZFZwSE9UTk1iRTV2V1ZkU05WRXhUbFJNYmtKNVdsaENhR050VmxWYVZ6RjNZa2RHTUZwVlVuWmlVMmhzWWtkV2RGcFhOVEJNUTBKNldUSTVkMXBWTldoaVYxVndUekY0ZFVsRFFXZEpRMEZuU1VOQ09WaEhOR2RKUTBGblNVTkJaMGxJVW14aVdFSnpXVmhTYkVsRU1HZGliVll6U1VaU2JHSllRbk5aV0ZKc1MwaEtiR016Vm5Oa1EzZG5XbGQ0YkdKWFZuVmtRMnMzV0VjMFowbERRV2RKUTBGblNVaFNiR0pZUW5OWldGSnNVVEpHYW1GSFZYVmhNbFkxVlROU2VXRlhOVzVNYms1c1pFTm9jbHBZYTNOSlNGSnNZbGhDYzFsWVVteExWSFJqWW1sQlowbERRamxZUnpSblNVTkJaMlJIVm5SalIzaG9aRWRXUkZsWFRtOWFVelY2WkVoS2NHSnRaSHBSV0VwNVdWaHJkV015VmpCTFNFcHNZek5XYzJSRE5YcGtTRXB3WW0xa2VreERRakJhVnpGM1lrZEdNRnBUYXpkWVJ6Um5TVU5CWjJOdFZqQmtXRXAxU1VoU2JHSllRbk5aV0ZKc1R6RjRkV1pVZEdOaWJVNTJZbTVPTUVsR1VrWlVWa0pOVVZaU1JsZ3hVbHBWUlZaVVNVUXdaMWQ1Wkc5a1J6RnpTbmwzWjBvelRqSmFlV1JrVHpGNGRVeDViM0ZZUnpSblMybENVMXBYTVhaa2JWWjZTVWRHYzJKRFFucGtTR3h6V2xOQ2JHSkhWblJhVnpVd1kzbENiV050T1hSSlJsSnNZbGhDYzFsWVVteGplVUp0WWpOSloyUkhhR3hKUjJSd1pHMVdkVWxJVG1waU0wSnNWRzFHZEZwVE5XTmlhVUZ4VERGNGRWa3lPWFZqTTFGblkyMVdkR0l6V214Vk0xSTFZa2RXZWxKdVNuWmlWWGh3WkVaU2JHSllRbk5aV0ZKc1kzbEJPVWxEYUhwWk1qbDNXbFUxYUdKWFZYQkpSREFyU1VoMFkySnBRV2RKUTBKVlVsVXhVVlJGUmxWU1ZqbFZWMVpDUmxWNU5XMWlNMHBHV1ZkT2IwdERhREJsV0VKc1MxTkJPVkJwUWpkWVJ6Um5TVU5CWjBsRFFXZEpSMDUyWW01T01FbElVbXhpV0VKeldWaFNiR041UVRsSlNGSnNZbGhDYzFsWVVteFJNa1pxWVVkV2VreHRaR3hrUTJodVdsaFNWVnBYTVhkaVIwWXdXbFZPYUZreWFHeFRNbFkxUzBoU05XTkhWWE5KU0U1cVlqTkNiRlJ0Um5SYVUydHdUekY0ZFVsRFFXZEpRMEZuU1VOQ2NGcHBRVzlrUjFaMFkwZDRhR1JIVm5wSlEwVTVVRk5DTVdKdFVteGFiV3gxV2xkUmNFbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhTYkdKWVFuTlpXRkpzWTNrMWNscFliRlJrU0Vwd1ltMWpkVnB0T1hsU1YwWnFZVU5uYjJSSFZuUmpSM2hvWkVkVmNFbEVNQ3RKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEpxWWpJMWVtUkRRamRKUjFaeldsY3hiR0p1VVRaSlNITm5XVEk1ZFdSSFZuVmtRMEk1U1Vnd1oxQlRRakJhVnpGM1lrZEdNRnBVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRWFpNZVVKS1VsTkJlRTFUUW10aU1sWjZZbWxrTUVsSVRqRmpTRUoyWTI1UloyUkhhR3hKUjJ3d1dsaEthRmx0ZUd4SlNFSm9ZMjFHZEVsR1RteGtRMEpxWWpJMWVtUklTakZaTTFKMlkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VkT2RtSnVUakJKU0U0d1pWZDRiR041UVRsSlJ6VnNaSGxDVkZwWVVXOUxWSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSkNZMjVLYUdWVE5XMWpiVGwwUzBkT2RtSnVVbXhpYmxGMVkxaFdiR051YkZSYVYzaHNXVE5TZG1OclJuTmlRMmR1WXpOU05XSkhWVzVMVTJ0MVdtMDVlVkpYUm1waFEyZHZZM2xyWjFCVU5HZGxNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DZW1SSWJITmFXRTExV1ZkU2EwdElUWEJQTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTREJ3VHpGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWhLYkdKWE9USmFWVFYyV2tkV2VsSnVTblppVmxKc1lsaENjMWxZVW14TFNGSnNZbGhDYzFsWVVteE1RMEo2WkVoc2MxcFlUWEJQTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJaVGF6ZFlSelJuU1VOQlowbERRV2RKU0RGalltbEJaMGxEUWpsTFZIUmpZbTR3TjFoSE5XcGlNalY2WkVOQ2VtRkhSbXRsVmtwc1ltMVNiR05zVG14a1EwRTVTVWMxYkdSNVFsUmFXRkZ2UzFSMFkySnBPSEZMYkhoMVNVTnZaMUp0T1hsSlNGSnZXbE5DYm1GWVdteGlhVUo2V1RJNWQxcFRRblZaVnpGc1RFTkNiR0p1VGpGamJWWjZTVWhTYjFsWVVXZFZNbWhvV2toc1JGVXhUV2RqTTFJMVlrZFZaMk15VG5aalIyeDFXbmxDY0dONVFuZGFXRXB0WWpOS2RGcFhVWFZZUnpSblMybENWV0ZIYkhwSlIyeDZTVWRTZG1KdFZXZGhibFo2WkVOQ2RtSnRUbXhKU0VKc1kybENlbGt5T1hkYVUwSjFXVmN4YkVsSVRuWkpTRkp2V2xOQ2JXTnRSbTVpVjFaMVpFTkNhR0p0VVdka1IxWjBZMGQ0YUdSSFZXZFpNa1oxWW0wNU1GaEhOR2RMYVVKcFdsTkNkR0l5VW5CYWJXeHNXa00xWTJKcFFYRkpRMmQ0UzFOQ2JHVklVbmxaVjA0d1kzbENlbVJJYkhOYVdFMW5XbTVLZG1KVFFqQmhSMVZuWTIxV2RWcEhWbmxhVjFGbldtNUthRm95TVd4aWJsRm5XVmMxYTBsSGFHaGliVko2U1VoU2IxcFhNR2RrUnpoblZUSm9hRnBJYkVSVk1VNWpZbWxCY1VsSVVuWkpSMHBzU1VoT2FtSXpRbXhhUTBKb1ltMVJaMWxZUW5kYVZ6VnJXbGRSWjJSSE9HZGtSMmhzU1VkU2Rsa3pWblJhVnpVd1dFYzBaMHRwUVc5TmFXdG5ZMjFXZEdJeldteGplVUo2WkVoc2MxcFRRbXhpUjFaMFdsYzFNR041UW0xamJUbDBTVWRHYzJKRFFuTmhXRkYwWVVoU2RHSkRRbFZhVnpGM1lrZEdNRnBZVFdkYWJUbDVTVWhTYjJGWVRXZGpNazUyWTBkVloySnRSblJhVXpWalltbEJjVmhITkdkTGFVSlBZak5TYkV4RFFUaGpNMUkxWWtkVkswbEhWbk5hVnpGc1ltNVNla2xIVG1oaWFVSjJZbTE0TlVsSFNteEpTRUp6V1ZkT2JGcERRbkJpYmxKMlNVaFNiR0pZUW5OWldGSnNZM2xDYldJelNXZGtSMmhzV0VjMFowdHBRbkJpYld3d1lWZEdjMGxJU214aWJWSnNZMjFzZFZwNVFuWmFhVUl3WVVkVloyTXlUblpqUjFWMVNVVnNiVWxFZUhwa1NHeHpXbFEwWjFwWGVHeGlWMVoxWkVoTloxbFlTbXhKUjJ4MVdUSjRNVnBIVm10SlIyeDFTVWhTYkdKWVFuTlpXRkpzWXpGNGRVbERiMmRhU0d4MVdWY3hjRmt5Um5OaVNHdG5ZMjFXZFZwSFZubGFWMUZuWkVjNFoyUkhhR3hKU0U1cVlqTkNiRWxEYUdoYWJsSnNZMmxDTUdGSFZXZGFiV3g1WXpOUloyTXlUblpqUjFWblkyMVdkVnBIVm5sTFUzZG5aRWRvYkdWVFFqTmhWM2h6V0VjMFowdHBRblZpTTFGbldXMVZaMk15VG5aalIxWnJTVWRHZFZwRFFqQmhSMVZuVUVoT01HVlhlR3hRYVVJellWZDRjMGxIU214SlIzaHNXbTVSWjJGWE5HZGtSMmhzU1VoU2JHSllRbk5aV0ZKc1NVZEdkVnBEUW5sYVZ6VnJXbGhLYkZwR2VIVkpRMjluWWpOV01HTklWakJNYkhoMVNVTnZkbGhITldwaU1qVjZaRU5DZDJOdFZuZFpXRXBzVmtkV2RHTkhlR2hrUjFaVVpFaHNjMXBZVFdkUVUwRnZZekpPZG1OSFZrOVpWekZzVEVOQ2VWcFhOV3RhV0Vwc1drVlNVRlJUZDJka1IxWjBZMGQ0YUdSSFZYQkpSREFyU1VoMFkySnBRV2RKUTBKNllVZEdhMlZXU214aWJWSnNZMnhPYkdSRE5XaGFSMUZ2WXpKT2RtTkhWazlaVnpGc1MxUjBZMkpwUVdkSlEwRjJUSGxDU2xwcFFtZGpiVloxV2tkV2VWcFhVa1ZVTURGblNVZHNla2xJVGpCWlZ6RjNXbGRSWjFwdVNuWmlVMEpvU1VaU2JHSllRbk5aV0ZKc1RFTkNNR0ZIVm5WSlNHUnNTVWMxYkZwWFVXZGtSemhuV2xkU2NHUkRRakJoUjBZd1dFYzBaMGxEUVdkTWVUaG5Wa2RXZEdOSGVHaGtSMVZ1WTNsQ01XSnRVbXhqYlhnMVlWYzFia2xJVW14aVdFSnpXVmhTYkVsSFZuTmFWekZzWW01UmRVbEZPVEJoUjFaNVpESnNlbHBUZDJka01sVm5XVE5LYkZsWVVteEpSemwxV2xOQ2IxcFlTbXhZUnpSblNVTkJaMHg1T0dka1J6aG5XakpzTWxwVFFqQmllVUpVWVVkR2EyVlZUbFJWZVhkblpESm9jRmt5WjJkak0xSndZa2QzWjJOdFZuaGtWMng1V2xoTloySXlOV3hKU0dSdllWZDRiRWxJVG1waU0wSndZbTFqZFZoSE5HZEpRMEZuV1RJNWRXTXpVV2RrUjFaMFkwZDRhR1JIVmtaaVIxWjBXbGMxTUVsRU1HZEpVMFl3V2xjeGQySkhSakJhVTBFdlNVaFNiR0pZUW5OWldGSnNURzFXYzFwWE1XeGlibEZuVDJsQ2EySXlUakZpVjFaMVpFTTFhbU50Vm1oa1IxWkdZa2RXZEZwWE5UQkxRMlF3V2xjeGQySkhSakJhVTJOd1R6RjRkVWxEUVdkSlF6aDJTVVV4ZG1SdFZXZGpNMUkxWWtkV2VrbEhPVEZrUTBKMldtbENlVnBYTld0YVdFcHNXa05DUlZRd01HZFpWelZyU1VoT01HSXpTbXhNYkhoMVNVTkJaMGxIVG5aaWJrNHdTVWhPTUdWWGVHeGplVUU1U1VoS2JHSnRVbXhqYlZaclVrVTVUa3h1UmpGYVdFbzFWVEpXYzFwWFRqQmlNMHBDWWtkM2Iwb3pUakJsVjNoc1NubHJOMWhITkdkSlEwRm5XVEk1ZFdNelVXZGxlVUp6V2xjMWJtUkhaMmRtVTBFNVNVaE9NR1ZYZUd4amVuUmpZbWxCWjBsRFFYWk1lVUpLV21sQ01HRkhWbmxhVTBKb1kyMVZaMkp0T0dkak0xSTFZa2RXZWt4RFFucGhNbXgzU1VoV2RXSnRWbXBhV0U1NldWaEtOVWxJWkhaamJYUmpZbWxCWjBsRFFuQmFhVUZ2WWtkV2RWb3pVbTlKUkRBNVVGTkJkMHRUUWpkWVJ6Um5TVU5CWjBsRFFXZEpRemgyU1VWV2RXTXpWbmxhVTBKM1kyMVdkMWxZU214V1IxWjBZMGQ0YUdSSFZsUmtTR3h6V2xoTloyRllUV2RaTWtaellrZFdhMGxJVW5aSlNFNHhZMGhDZG1OdVVXZFpWMUpyWVZjMWJsaEhOR2RKUTBGblNVTkJaMGxET0haSlNFNHdaVmQ0YkdONVFqSmhWMFZuV1VoQ2VWcFlRbWhqYlZaQ1drYzVkMlJIVm10Uk0wNTZWa2RXTkdSSFFXZGpNbXgxV1RKVloyUkhhR2hrUTBKNVdsaEdNV0ZZU214amVVSXdZVWRHTUZoSE5HZEpRMEZuU1VOQlowbERPSFpKUjBKM1kyMVdkMWxZU214V1IxWjBZMGQ0YUdSSFZsUmtTR3h6V2xoT1owbEhiSHBKUjA1b1lrZDRiRnBETldOaWFVRm5TVU5CWjBsRFFXZE1lVGxqWW1sQlowbERRV2RKUTBGblRIazRaMVV5YUdoYVNHeEVWVEZOWjJReWJITmlRMEoyWW0xNE5VbElWbmRhUjBZd1dsTkNlbVJJYkhOYVdFMW5XVEk1ZFdSSFJuQmliV3gxV25sQ1FWbFlRbmRpU0d0bllWYzBaMlJIYUd4SlNGSnNZbGhDYzFsWVVteFlSelJuU1VOQlowbERRV2RKUXpoMlNVZGtjR1J0Vm5WSlNGSjJTVWRDZDJOdFZuZFpXRXBzVmtkV2RHTkhlR2hrUjFaVVpFaHNjMXBZVG1kTWFVSktXbWxDZFdKNVFuTmhXRkZuVmtkV2RHTkhlR2hrUjFWblpESkdla2xIWkhCa2JWWjFURVo0ZFVsRFFXZEpRMEZuU1VOQmRreDVRbFJoUjBaclpWVk9WRlY1UWpOaFYzaHpTVWMxZG1SRFFtbGFVMEpvV1cxNGJFbElVblpKU0ZaM1drZEdNRnBUUWpGak1sWjZTVWM1YlVsRlFtaGpTRUp6WlZOQ2NHSnBRbWhpYm10blkyMVdjMXBZV21oaWJsSmpZbWxCWjBsRFFXZEpRMEZuVEhrNFoyUkhWblJqUjNob1pFZFZkVWxGYUhaa01sWXlXbGhKYzBsSVVtOWhXRTFuWVZoTloySnRPVEJKUjBWblkwaEtkbGx0ZUd4aVUwSnBXbGRPYUdSWVRteEpTR1JzU1VjNWRXSklhMmRaTTBwc1dWaFNiRWxJVW05YVZuaDFTVU5CWjBsRFFXZEpRMEYyVEhsQ01GcFhNWGRpUjBZd1dsTkNiV0l6U1dka1IyaHNTVWhDTVdOdVFuWmpNbFZuWWpKWloyTXpWbmRqUnpsNVpFZHNkVnA1UW1kalNFcHNZMGRHZVZwVlJtdGlNMEl3V2xkU1JHTXpUbFZhV0dnd1dVTjRZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZGtNbWh3V1RKbloxcEhPV3hqTWpSdVpFTkNlbVJZUW5kaU0wb3dTVVZDYUdOSVFuTmxVMEpvWkVOQ2FHSkhkM1ZZUnpSblNVTkJaMGxEUVdkSlNHUndZbTFTZG1SNU5WUmhSMFpyWlZWT1ZGVjVOWGRqYlZaM1dWaEtiRlpIVm5SalIzaG9aRWRXVkdSSWJITmFXRTF2WkVkV2RHTkhlR2hrUjFaR1lrZFdkRnBYTlRCTVEwSjZXVEk1ZDFwVk5XaGlWMVZ3VHpGNGRVbERRV2RKUTBGblNVTkNlVnBZVWpGamJUUTNXRWMwWjBsRFFXZG1WbmgxU1VOQlowbEhUblppYms0d1NVZE9kbUp0VW14aWJrNXNXa1pPTUdWWGVHeEpSREJuV2tjNWFtUlhNV3hpYmxGMVdUTktiRmxZVW14U1YzaHNZbGRXZFdSRFoyNWpNMUkxWWtkVmJrdFVkR05pYVVGblNVTkJka3g1UWtSaU1uaHpXbGRPTUVsSVRqQmxWM2hzWTNsQ2NHSnVVblpKUjBWbll6SnNkVm95ZUd4SlNFNHdaVmQ0YkV4cFFsVmhSMng2U1Vkb2JHSklRbnBKU0ZaNlNVY3hhR0V5Vldkak0xWjVXbE5DVkdGSFJtdGxWVTVVVlRGNGRVbERRV2RKUXpoMlNVY3hhR0p0Ykhka1YzaG9aRWRzZG1KdVRXZGtNbXh6WWtOQ2RXSXpVV2RqU0Vwc1pHMVdkV1JEUWpGamVVSnRZMjA1ZEVsSFNteGhWelZ1U1VkR2FXSkhWV2RrUnpobldtMXNORWxJVm5kSlNGSnNZbGhDYzFsWVVteFlSelJuU1VOQloweDVPR2RqUjBaNVpFTkNjR0p0VW5CWk1sWjZUR3g0ZFVsRFFXZEpRemgyU1VVMVVGWkZWVFpKUjA1MllrZDRiRmt6VW5CaWJXTm5Zek5TTldKSFZucEpSMng2U1Vkc2RWcFhXbTFoVjA1d1dsYzFNRWxIV25aamFVSnBZMjA1TTJNeVZubGplVUpwWkZoUloxVXlhR2hhU0d4RVZURk9ZMkpwUVdkSlEwRjJUSGxDYW1SWVNubGFWelV3WWtocloxcEhPV3hqZVVJd1lVZHNla2xIUm5WbFdHUm9aVk0wWjFZeWFHeGlhVUp3WkVOQ2EySXlWbnBKUnpWMlpFTjNaMlJIYUhCamVVSjZZVWM1TVdKSFVXZFpiVlZuV1RKb2FHSnRaR3hhUXpWalltbEJaMGxEUW0xaU0wbG5TMGQ0YkdSRFFuQkpSREJuVFVSeloyRlRRVGhKUjNoc1ltMWtNR0ZFYzJkaFUzTnlTMU5DTjFoSE5HZEpRMEZuU1VOQlowbEhUblppYms0d1NVaE9NR1ZYZUd4SlJEQm5Zek5TTldKSFZucFhNbXhrVHpGNGRVbERRV2RKUTBGblNVTkNlbVJJYkhOYVV6VjNXVmhLYkdKdVVrOWlNbEpzVEc1S2JHSlhPVEphVlU1dllWZDRhMHRJVGpCbFYzaHNTMVIwWTJKcFFXZEpRMEZuU1VOQloxa3lPWFZhUjFaMVl6SldhMVV6VWpWaVIxVjFaRWRXTkdSRlRuWmlibEpzWW01UlowdDZNR2RqTTFJMVlrZFZkV1JIVmpSa1JVNTJZbTVTYkdKdVVUZFlSelJuU1VOQloyWldlSFZKUTBGblNVTTRka2xHU214aVZ6a3lXbE5DZW1SSWJITmFXRTFuV201S2RtSlRRblZhV0U0d1dsZFJaMlJIVm5SalIzaG9aRWRXZWtsSGJIVkpTRkp2WVZoTloyTXlUblpqUjFWMVdFYzBaMGxEUVdkamJWWjBZak5hYkZVelVqVmlSMVo2VW01S2RtSlZlSEJrUmxKc1lsaENjMWxZVW14amVXaDZXVEk1ZDFwVk5XaGlWMVZ3VHpGNGRVbERRV2RKUXpoMlNVVkdkVnBEUWpCaFIxWjFTVWhDTVdSRFFqQmhSMVZuV1RJNWRWcEhWblZqTWxaclNVaE9NR1ZYZUd4SlIyeDFaRWM0WjJSSGFHeEpSbmRwWTIwNWRtUkdkMmxKU0ZKc1lsaENjMWxZVW14SlNFSm9Zek5PYkZwRFFuQmlhVUpvWXpGNGRVbERRV2RKUXpoMlNVZENNRnBYTVhkaVIwWXdXbGRCZFZoSE5HZEpRMEZuV1RJNWRXTXpVV2RaTWpsMVpFZFdkV1JEUVRsSlNGSnNZbGhDYzFsWVVteFNWM2hzWWxkV2RXUkROV3BpTWpVd1dsYzFNRTh4ZUhWSlEwRm5TVWRzYlVsRFoyaEpXRkpzWWxoQ2MxbFlVbXhMVTBJM1dFYzBaMGxEUVdkSlEwRm5TVWRzZFdNeVZubGtSVFYyV2tkV1NtSnVVblpXUjFaMFkwZDRhR1JIVlc5a1IxWjBZMGQ0YUdSSFZYTkpSMDUyWW0xU2JHSnVUbXhhUms0d1pWZDRiRXhEUW1waU1qVXdXbGMxTUV4dFduQmpiazR3VVRKb2NHSkhVWEJQTVhoMVNVTkJaMGxJTVdOaWFVRm5TVU5DYkdKSVRteEpTSFJqWW1sQlowbERRV2RKUTBGbldUSTVkV1JIVm5Wa1F6VndZbTVPYkdOdVVrTmFWMXAyWTIxVmIxa3lPWFZhUjFaMVl6SldhMVV6VWpWaVIxVnpTVWRPZG1KdVVteGlibEYxV20xc2VXTXpVa1JoUjJ4eldrTnJOMWhITkdkSlEwRm5abFo0ZFVsRFFXZEpRemgyU1VVMWRtUkhWWE5KUjJ3d1NqTk5aMkZYTVhkaU0wb3dXVmMxTUVsSVVtOVpXRkZuVlRKb2FGcEliRVJWTVUxbldqSldNR041UWpCaFIxVm5aRWRXZEdOSGVHaGtSMVZuWkVkb2FHUkRRbWRpUjJ3d1RGZG9NR0pYZUdkWVJ6Um5TVU5CWjB4NU9HZGtNbXh6WWtOQ2FGa3pVakZaVjNoelpWTkNlVnBYTld0YVdFbG5Zekk0WjJSSGFHaGtRMEp3WkVOQ2FsbFhOR2RrV0VKcldWaFNiRWxJVW05YVUwSjZaRWhzYzFwVFFuQmliazV3V2tkVloyUXlhR3hpYkhoMVNVTkJaMGxET0haSlJ6VnNXbGRTYkZwRFFXOWFVelZ1VEdsQ1FWbFlRbmRpU0d0blltMUdNR0ZZV214SlJrNXZXVmRTZG1SNVFrVlVNREJuV1RKR2VscFRhM1ZZUnpSblNVTkJaMlF5YkhWYVJ6a3pUR3hPYjFsWFVqVlJNVTVVVEc1Q2VWcFlRbWhqYlZaVldsY3hkMkpIUmpCYVZrNHdaVmQ0YkdONWFEQmFWekYzWWtkR01GcFZWbk5hVnpGc1ltNVJjMGxJVG1waU0wSnNWRzFHZEZwVGF6ZFlSelJuU1VOQloxa3lPWFZqTTFGbll6TlNOV0pIVldkUVUwSnFZakkxTUZwWE5UQk1ia1l4V2xoS05WVXlWbk5hVjA0d1lqTkpiMG96VGpCbFYzaHNTbmxyTjFoSE5HZEpRMEZuWVZkWlowdElaSEJpYlZKMlpIazFWR0ZIUm10bFZVNVVWWGsxZFZsWVVuQmtiVlpVWVVkR2EySXpZMmRLYVZsbll6TlNOV0pIVldkSlZEQTVTVWMxTVdKSGQzQkpTSFJqWW1sQlowbERRV2RKUTBGblRIazRaMVl5YUd4aWFVSndZbWxDZFZsWVVuQmtiVlZuVlRKb2FGcEhPVE5KUlZKUVZGTjNaMXBYTlhwa1dFcHNTVWhTYjFwVFFucGtTR3h6V2xOQ2FtTnRWbWhrUjFaclNVZEtOVWxHVG05WlYxSTFVVEZPVkVsSGJIcFlSelJuU1VOQlowbERRV2RKUXpoMlNVZHNkVmt5ZURGYVIxWnJTVWRzZFVsSGJIVmhXRkp3V1ZkNGMyVlRRbmxhVnpWcldsaEtiRnBEUW5aa1dGSjNaRmhSWjB0SFFubGFWelZyV2xoS2JGcEZVbEJVVjBGd1RHeDRkVWxEUVdkSlEwRm5TVU5DZVZwWE5XdGFXRXBzV2tWU1VGUlROWEJpYms1c1kyNVNRMXBYV25aamJWVnZZek5TTldKSFZYVlpNbmgyWW0xV1QySXlVbXhMU0ZKNVpGZFZjRXhEUW5sYVZ6VnJXbGhLYkZwRlVsQlVVelZ0WVZoS2VtUkZUbTloVjNoclMxUjBZMkpwUVdkSlEwSTVXRWMwWjBsRFFXZGFWM2g2V2xOQ2NGcHBRVzlKVTBZd1dsY3hkMkpIUmpCYVUydG5aVEY0ZFVsRFFXZEpRMEZuU1VOQmRreDVRbGhoUjFaMVNVYzFka2xJVGpCbFYzaHNTVWRzZWtsSGVHeGFibEZuWVZjMFoyUkhhR3hKU0ZKc1lsaENjMWxZVW14TVEwSjNXVmhLTUdONVFqTmhWM2h6U1VkS2JFbEhTbmxpTW5Sc1ltbENhR041UW1oWVJ6Um5TVU5CWjBsRFFXZEpRemgyU1VoS2JHTXpWbk5rUXpSblZrYzRaMXB0YkRSSlNGSnZZVmhOYzBsSVpHeEpTRUl4WkVOQ2FWbFhUbkpKU0ZKdldsTkNlbVJJYkhOYVUwSjFZakpTYkVsR1RtOVpWMUkxVVRGT1ZFbElTbXhpVnpreVdsZFNZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZFpWelZyU1VoU2IxcFhOR2RrUjFaellrTkNjMkZZVVdka1J6aG5ZMjFXZEdJeldteEpTRkp2V1ZoUloySnRPV3RhVTBKdFkyMDVkRWxJVW05YVUwSXdXbGN4ZDJKSFJqQmFVelZqWW1sQlowbERRV2RKUTBGblRIazRaMVpIYUd4amJWVm5XVEpHZFVsSFNteEpSelYyU1VoT01HVlhlR3hKUjJ4MVNVaFNiMXBUUWpCYVZ6RjNZa2RHTUZwVFFuQmlhVUY1U1VkT2FHTXlWbnBKUTJkNFMxTkNNMkZIVm5WSlJrNXZXVmRTTlVsRlVsQlVWbmgxU1VOQlowbERRV2RKUTBGMlRIbENjR041UW5CaWFVSXhZekpWYzBsR1RtOVpWMUkxVVRGT1ZFbElTbXhpVnpreVdsaE5aMWxYZUhOSlNFNHdaVmQ0YkdONWQyZExSRWx3U1Voa2IxcFhOR2RpYlVZd1lWaGFiRWxHVG05WlYxSjJaSGxDUlZRd01XTmlhVUZuU1VOQlowbERRV2RNZVRobllWaE5aMkZYTkdka1dFNXNTVVpPYjFsWFVqVlJNVTVVU1VoS2JHSlhPVEphV0UxblpFZG9iRWxJVGpCbFYzaHNTVWRzYlVsSGJEQkpSMDUyWW01U2FHRlhOWHBKUnpWMlNVZE9kbUp1VW14aWJsRjFXRWMwWjBsRFFXZEpRMEZuU1VNNGRrbEZOVkJXUlZWelNVWk9iMWxYVWpWUk1VNVVTVWRPZVZwWFJqQmFXRTFuWVZoU2VrbEhPVE5pYVVKNlpFaHNjMXBUUW5waWVVSXpXbE5DYWxsWE5HZGpNa1p0V2xkNE5VbEhSbXRhUXpsNVdsY3hkbVJ0Vm1OaWFVRm5TVU5CWjBsRFFXZE1lVGhuV1VkT2RtSnRVbXhpYms1c1drWk9NR1ZYZUd4WlEwSnZXbGhLYkV4c2VIVkpRMEZuU1VOQlowbERRbXBpTWpVd1dsYzFNRXh0YkhWak1sWjVaRVZLYkZwdE9YbGFVMmhxWWpJMWExcFhOWHBhVjFKVVpFaHNjMXBUZDJkWk1qbDFaRWRXZFdSRE5XMWhXRXA2WkVWT2IyRlhlR3RMVkhSalltbEJaMGxEUVdkSlEwRm5XVEk1ZFdNelVXZGpiVlowWWpOYWJHTjVRVGxKUnpWc1pIbENWRnBZVVc5TFZIUmpZbWxCWjBsRFFXZEpRMEZuWTIxV2RHSXpXbXhqZVRWb1drZFJiMWt5T1hWYVIxWjFZekpXYTFVelVqVmlSMVZ3VHpGNGRVbERRV2RKUTBGblNVTkNlVnBYTVhaa2JWWlBZakpTYkdNd1dubGlNakZWV2xjeGQySkhSakJhVTJnd1dsY3hkMkpIUmpCYVUzZG5ZMjFXZEdJeldteGplV3MzV0VjMFowbERRV2RtVm5oMVpsUjBZMkpwT0hGTGJIaDFTVU52WjFKWWFEQmFWelY2WVZjNWRVbElVblpKU0ZKdldsTkNlbVJIUm5WYVIwWjVXa05DWjJOdFZuVmFSMVo1V1VOQ2RGcFlVbTlpTWxGblpESm9jRmt5WjJkak0xWjNZMGM1ZVdSSVRXZGpiVloxV2tkV2VXRlhOVzVZUnpSblMybENNR0o1UWxSaFIwWnJZak5rVTJJeU9UQmplVUl6WVVkV2RVbElVbTlhVTBKVVlVZEdhMlZWVWxCVVUwRnZZVWhTTUdOSVRUWk1lVGx1WVZoU2IyUlhTWFZaTWpsMFRETmtiRmx0VG5aaVdFSjJZbTFXZFdSSVRYWmpNbWhvV2toc2EySXlNSEJZUnpSblMybENhR0p0VVdkVk1taG9Xa2hzUkZVeFRXZExSMmd3WkVoQ2VrOXBPSFphTW13d1lVaFdhVXh0VG5aaVV6a3pXbGRLYW1JeU1YZGlNalZzWW01U2Vrd3pUbTlaVjFJMVdUTk9la3RUUW5kaU1uZzFXbTFzYzJKSVRXZFpXRXBzU1VoV2VscFhVbU5pYVVGeFNVYzVlVWxJWkc5YVZ6Um5aRWRvYkVsSVpHeFpiVTUyWWxoQ2RtSnRWblZrU0U1eFl6RjRkVWxEYjJkTFIyZ3daRWhDZWs5cE9IWmFNbXd3WVVoV2FVeHRUblppVXpreldsZEthbUl5TVhkaU1qVnNZbTVTZWt3elpHeFpiVTUyWWxoQ2RtSnRWblZrU0U1eFkzbHJaMk5IT1hObFYxcHdZa2QzWjJGWVRXZGtXRTVzV2tNMVkySnBRWEZZUnpSblMybENRbHBIVW5wSlIwVm5XVWhPYW1JelFteFViVVowV2xkQloySXpRakJoVnpsMVNVaGtiMkZYVG05SlIyeDZTVWhXZWxwWFVXZGtSemhuWXpKT2RtTkhWV2RhVjNoc1lsZFdkV1JEUWtWVU1EQm5XVmMxYTBsSVRqQmxWM2hzWXpKb2JGcFlVbnBZUnpSblMybENNMkZIVm5WSlJ6Vm9aRWRzTWxwVFFsUmhSMFpyWWpOa1JWUXdNR2RoV0UxblpGYzFhR1J0Um5CaVIwWnBZa2RWZFVsR1VtOWFVMEpuWXpKT2RtTkhWazlaVnpGc1dVTkNNMkZYZUhOSlIwcHNTVWRHYTFwSFZtdEpTRkoyV0VjMFowdHBRakJoUjFWbldUSjRhR016VFdkWldGSXdZMjFzYVdSWVVteEpSemx0U1VkR2MySkRRbmxhVnpWcldsaEtiRnBEUWtWVU1EQjFTVVZzZFVsSFJtdGFSMnd3WVZjNWRVeERRbWhpYm10bll6TlNOV0pIVldkYVYzaHNZbGRXZFdSSVRXZGtNbXh6WWtaNGRVbERiMmRaYlZWbldWaFdNR0l5TVdoa1IyeHFXVmQ0YzJWVFFubGFVekV6WTIxc01HUkhWblZKU0dSd1pFZG5aMlJIYUhCamVVSm5ZekpPZG1OSFZrOVpWekZzV1VOQ2VscFhlR3haTTFKMlkybENhR0p0VVdkaVZ6a3lXbGRSWjJJelZqQllSelJuUzJsQ2RscHBRakJoUjFWblkyMVdkVnBIVm5sYVYxRm5Va1U1VGtsSFJuVmFRMEp3WW01U2RrbElVbTlhVTBKcllqSk9NV0pYVm5Wa1EwSm5VRWRvYkZsWFVTdFpRelZqWW1sQmNWaEhOR2RMYVVKS1pFTkNjR041UW1waU1qRjBZakkwWjJSSE9HZGtXRTVzU1VoU2IyRllUV2RqYlZaMVdrZFdlVWxITVd4a1IyaDJXa05DY0dKcFFtcGlNalZ4WkZjMWFtUkhiSFppYVVJellWaFNiMGxIUldkWk0xWjZaRWM1ZEVsSFZuTmFWekZzWW01U1kySnBRWEZKU0dSdllWZE9iMGxJU214aWJWSnNZMjVOWjFsVFFucGhSMFpyWWpOa1UySXlPVEJNYVVKWVlVZFdkVWxJVW05aFdFMW5ZVmhOWjFwSE9YVmFVM2RuWkVoc2QyRlhUbWhpUjNnMVNVaFNiMXBUUW14aVIxWjBXbGMxTUVvelRtTmlhVUZ4U1VkQ2MySXlUbWhpUlRWb1lsZFdaMGxJVG05aU0xWnpXa05DYVZwVFFqRmpNbFpyU1VkR2VrbElVbTlhVTBKbll6Sk9kbU5IVms5WlZ6RnNXVU0xWTJKcFFYRllSelJuUzJsQ1NtSnBRbWhhUjFKd1pFZHNkbUpwUWpCaWVVSkZWREF3WjJNeVRuWmpSMngxV25sM1oxVXlhR2hhU0d4RVZURk5aMWxYZUhwaWVVSjZaRmhDZDJJelNqQmplVUpvU1VkS2FHTXliR3BKU0U1dllWY3daMXB0T1hsSlIwNTZZekY0ZFVsRGIyZFpNMVo2WkVjNWRFbElRbmxpTTBKc1kyNVNjRnBZVFdkTFJ6VnNXbGRTYkZwRFFuWmliWGcxU1VjNWRVbEhPWE5hUjFaNVNVZEtlV0l6WkhwYVdFcDZTVWQ0Y0dFeVZXZFRWVlY0VFZOcloxbFhOV3RKUjBWbll6Sm9jR0pUUW0xaU0wcGpZbWxCY1VsSFJXZGFSMVozWTIxV2FsbFlVbXhhUTBKdFdsZEdNR1JZU214SlIwNW9Za2Q0YkZwRFFtZFJSMFozWTBkNE5WbERRakJoUjBZd1NVaE9NV05JUW5aamJsSjZTVWRHZDJOSGVEVmhWelZ1U1VkRloyTXlWakJKUnpsdFNVZE9lbU14ZUhWSlEyOW5XVE5XZW1SSE9YUkpTRUo1WWpOQ2JHTnVVbkJhV0UxblpFYzRaMWxUUW01aFdGcHNZbWxDYzJJeVRtaGtSMngyWW1rMVkySnBRWEZZUnpSblMybENWbU15Um01YVUwSnFZakkxZW1GWFVteGpiVVl3WVZjNWRXTjZjR05pYVVGeFdFYzBaMHRwUVhGSlJrSm9ZMjVSWjJSdFJuTmtWMVo2U1Vkc2RVbEhRVGhqTTFJMVlrZFZLMWxEUW14aVIxWjBXbGMxTUdONVFtaGpiVlZuWWpJMWMyVlRRbWhqU0VKellWZFdhMGxJVW05YVUwSnRZVmhLZW1SRFFqQmhWekZzU1VkRloxb3liREphVnpWalltbEJjVWxIUW5wWk1qbDNXbFUxYUdKWFZtZEpTRXBzWW0xU2JHTnVUWFZKUms0eFdXNU9iR05ZVm14aWJsRm5XVEpvYUdKdFpHeGplVUl3WW5sQ2QxbFlTakJqZVVKd1ltbENlbVJJYkhOYVUwSnNZa2RXZEZwWE5UQmplVUl6WVZkNGMwbEhhR2hrYlZaalltbEJjVWxITlhaSlIxWnRXbTFXYW1SRE5HZFJiVlpxV1ZoV2VscFRRblphYVVJd1lVZHNla3hEUW5kWldFb3dZM2xDY0dKcFFucGtTR3h6V2xOQ2JHSkhWblJhVnpVd1kzbENlbUZIT1RGaVIxRm5ZakkxYzJWVFFtbGFVMEl4WXpKV2EwbEhXblpqYkhoMVNVTnZaMlJ0Um5Oa1YxWjZTVWhTYjFsWVVXZGtNbXh6WWtOQ2RWcFlXbXhqYVVKcVlVZEdkVm95VlhOSlIxcDJZMmxDYkdWSFJuUmpSM2hzU1VoQ2FHTnVVbnBKU0ZKdldWaFJaMk15VmpCSlNFNXFZak5DYkV4WVpIQmFSMVZuWkVkb2JHSlhWbU5pYVVGeFNVaGFhR0pJVm14amVVSjJZMmxDZDFsWVNqQmplVUl6WVVkc2FtRkRRbmxhVnpWcldsaEpaMk15YUdoamJWWnJTVWhPTUdWWGVHeEpSMVp6V2xjeGJHSnVVbnBNYkhoMVNVTndZMkpwUVhGSlEyOW5WRzA1TUZwVGQyZGFTRlpzU1VoU2RrbEhSV2RpUjJ4MFlWaFNhR1JIYkhaaWFVSjJXbWxDTUdGSFZXZFZNbWhvV2toc1JWUXdNR2RqUnpselpWZGFjR0pIZDNOSlNFcHNZbTFTYkdOdGJIVmFlVUp3WW1sQ2FGaEhOR2RMYVVKcVpGaE9NR0l5TUdkYVYzaHNZbGRXZFdSRFpIcEpSMEpxWWpJMWVtUklTakZaTTFKMlkyMUJaMkZZVFdkaWJUa3dTVWhPTVdOSVFuWmpibEpzV2tNMFoxTlhOWHBrUjFab1drTkNlVnBYTld0YVdFcHdZbTFqWjJNeWFIWmtWM2hyV0VjMFowdHBRbXhoV0ZKdldsaEpaMXBIT1hWYVUwSm9Zek5zZFZreWFIbGlNalYyWkZoT2MyVlRkMmRhYlRsNVNVZFdORmxYTVhkaVIxVm5XVmhSWjJKWGJHcGpiVGt3V1ZoT2NrbElVbkJpVjJ4MVdubEJiMXB0T1hsSlIxWTBXVmN4ZDJKSFZtTmlhVUZ4U1VkQ1VXTnRPWFJoV0U1c1RHNUtiR015T1hOa2JWVnZTMWRCY0V4RFFuWmphVUpwV2xOQ2ExcFhXbXhqYmtwc1drTkNNV0p1VW5CaVEwSXdZVWRWWjFwdGJIbGpNMUZuWkVkc2RGcFRRakJoUjFWbldsZDRiR0pYVm5Wa1EyUjZXRWMwWjB0cFFtZFpNamwxWW0xV2FtUkhWbXRSTWtaellrZEthRmt5ZEdkSlNFb3hZbTVOZFZoSE5HZExiSGgxU1VOdloxWllUbWhhTWxWbldUSTVkV015Ykd0YVdFcG9aRWRzZG1KdVRXZGtNbWhzWW1sQ01XTXliSFZhZVVKNllVZHNkR0pYVm10SlIwNHhZek5TZG1KVFFuZGpiVGwzV2xoS01HRlhWbnBKUnpsNVNVZENRVmxZUW5kaVNHeG5UMng0ZFVsRGNHTmlhVUZ4U1VOdloxWXlhR3hpYlZZeVdsaEpaMWxYTlRWSlIxSTFZbTFHZEdGWFRXZFpNbWhvWW0xa2JHTjVRbWhqYlZWbllsZEdhMXBUUWpOaFIyeHFZVU5DYUZwdFdteFpNMUpqWW1sQmNVbEhUbnBqZVVKcVpGaE9NR0l5TUdkalNFcDJZMGRXZVdSSGJHeGplWGRuV1VaT2IxbFhValZSTVU1VVRHNU9NR1ZYZUd4U1YzaHNZbGRXZFdSRGFHeGlSMVowV2xjMU1FdFhRV2RpV0ZaNlpFTkNhVnBUUW1wWlYzaHpXbGRTWTJKcFFYRkpTRkoyU1VoV2QxcEhSakJhVTBJd1lVZFZaMXBYZUd4aVYxWjFaRU0wWjFaSGFHeGpiVlZuV1ZoS2JFbElVak5pZVVKcVdWaE9iR041UWpOaFIxWjFTVWhTYjJGWVRXZGhXRTFuWW0xV2JGcEhWbXRQYkhoMVNVTnZaMHRFUlhCSlNGSnZXbE5DYkdKSFZuUmFWelV3U1Vkc2VrbEhUblppYlRWc1dUTlNiRnBEUWpCaWVVSm9TVWMxYkdSNVFuZFpXRXBzWW01UmMwbERaM2xMVTBKb1NVZE9jMWxZVG5wSlIyeDZTVWRHYTFwSFZtdEpTRkoyU1VoU2IxcFdlSFZKUTI5bldsZDRiR0pYVm5Wa1EwSXdZVWRHTUVsSFRtaGtXRTVzWTNsQ2NHUkRRakJpZVVKMFdWaFNhbUZEUW10aFYxcHRXbGhLYkdKdVVXZFpNMVo2WkVjNWRFbElRbmxpTTBKc1kyNVNjRnBZVFhWWVJ6Um5TMmxDVldKNVFtaGFSMUo1V2xoT2VrbElVbTlhVTBKdFlWaEtlbVJEUW1wWldFNXNTVWhrYjFwWE5HZGpiVloxV2tkV2VXRlhOVzVKUjBWbldUTldlbVJIT1hSSlIxWnpXbGN4YkdKdVVYTkpSMEo2WkVoc2MxcFZWbk5hVnpGc1ltNVNaMWhITkdkTGFVSjZZVWM1TVdKSFVXZFpiVlZuV1RKR2MySkhWbXRKUjJ4MVNVaFNiMXBUUW14aVIxWjBXbGMxTUVvelRXZFpSMDUyWW0wMWJGa3pVbXhhUlU1b1lrZDRhVmxYVG5KWlF6VmpZbWxCY1ZoSE5HZExhVUZ4U1VaT2IyRlhNWFJhVjFGbldUTldlbVJIT1hSSlNFSjVZak5DYkdOdVVuQmFXRTFuWWxkR05VbEhPWFZpU0d0bldXMVZaMXBIVm0xaFZ6VnNXa05DYkdGWVVtOWFXRWxuV20wNWVVbEhSblZKUjFaMVpFZHNlVnBXZUhWSlEyOW5ZekpvYUZwSE9UTlZiVGwyWkVOQmIxcHRPWGxKUjFZMFdWY3hkMkpIVlhOSlIyeDFTVWRGWjFsRWNHOWlNMDR3V1VOQ2VXUlhlR3hMVTBKMlkybENNbUZYUldkWlUwSjVaRmQ0YkVsSVVtOVpXRkZuV2tkc2VWcFhUakJpU0d4alltbEJjVWxITVdoa1IwNXZXbGhOWjFsWE5HZGFWM2hzWWxkV2RXUkRRak5oV0ZKdlNVZEZaMk15YUdoYVJ6a3pWVzA1ZG1SRE5HZFRWelJuWWpOU2IxcFlTV2RrTWpsNVdraE5jMGxIYkhWak0xSnNXVmRSWjJJeVdXZGFiWGgyWkRKc2RWcDVRbTFqYlRsMFdFYzBaMHRwUW5kWldFcHNZbTVSWjJSSE9HZFpNbWh3WWtkUloxbFlUV2RhUnpoblltMUdNR0ZZV214SlIwNTZZM2xDYW1SWVRqQmlNakJuWTBoS2RtTkhWbmxrUjJ4c1kzbDNaMk15YUhCaVZ6RnNXa05DYW1SWVRqQmlNakJuWTBoS2RtTkhWbmxrUjJ4c1l6RjRkVWxEYjJkYWJYaDJaSGxDZG1KdGVEVkpSMXA1WWpJd1oyTXlhR2hhUnprelZXMDVkbVJJVFdka1J6aG5ZbTFXZW1SSFZtdEpTRTV2V1ZkU2RtUXhTblppTTFKNlRHeDRkVWxEY0dOaWFVRnhTVU52WjFZeWFHeGlhVUl4WXpKc2RWcDVRbWRSUjBaM1kwZDROVmxEUW5SaFdHaHdZbTFqWjFrelRucEpTRTV2WWpOS01HRkhSblZhUTBKM1kyMDVkMXBZU2pCbFUwSjFXVmN4YkdONVFqTmhXRkp2V0VjMFowdHBRblZpTWpSMFl6Sm9kbU51VW05WlZ6VnJTVWMxYUdKWFZucEpRMmh0WWpOSloxcFlhR2hpV0VKeldsTkNaMWx0T1hsYVIxWjVXVU5DYUdKdFVXZFpSMHAyWTIxU2JHTnBNVE5oVjFJd1lVZEJjRWxIYkhwSlJ6VjJaRVo0ZFVsRGIyZGpNMVozWTBjNWVXUkhWbXRNYkhoMVNVTnZkbGhITld4bFNFSjJZMjVSWjFreU9YVmpNMUZuWTIxV2RWcEhWbmxKUkRCblMwaEtiR016Vm5Oa1EzZG5XVEk1ZFdSSFJuQmliVlo1VEVOQ2RtTklVbkJpTWpWNlMxTkJPVkJwUWpkWVJ6Um5TVU5CWjJGWFdXZExRMFoyWTBoU2NHSXlOWHBKU0hnNFNVaFNOV05IVm5aYWFVSjJZMGhTY0dJeU5YcEpRMFU1VUZOQmJtSXlTbkZhVjA0d1NubENPR1pEUVdoaU0wSXdZVmM1ZFdONU5YcFpNamwzV2xVMWFHSlhWWEJKU0hSalltbEJaMGxEUVdkSlEwRm5aRWRvZVdJelkyZGliVll6U1VWV2VXTnRPWGxMUTJSVllVZFZaMWxJVG1waU0wSnNWRzFHZEZwWFFXZGlNMEl3WVZjNWRVbEhiSHBKU0Vwc1kxaFdjR050Vm10TWFXTndUekY0ZFVsRFFXZEpTREZqWW1sQlowbERRbXBpTWpWNlpFTkNlbGt5T1hkYVZUVm9ZbGRWWjFCVFFuWmpTRkp3WWpJMWVreHVUbXBpTTBKc1ZHMUdkRnBVZEdOaWFVRm5TVU5DYW1JeU5YcGtRMEp2V1ZoT1UxcFhOV3RhV0Vwc1drTkJPVWxJUW1oamJsSjZURzFvYUdONWFHcGlNalV3V1Zkc2RWcFlTWEJQTVhoMVNVTkJaMGxIVG5aaWJrNHdTVWMxYkZwWFVucFZNazUyWTBkc2RWcDVRVGxKUjA1MllsaENhR1JIYkdsaVIxWlVZVWRHYTJWVlRsUlZNVnBzWTI1T2NHSXlOR2RLYVZwalltbEJaMGxEUVdkSlEwRm5XVEk1ZFdSSFJuQmliVlo1VEcwMWRscEhWbFZsV0VKc1NVUXdPVkJUUVhoTlUwRjJTMmxDVDJJeVVteE1hMUpRVVRGV1RsSlZOVlZZTUZwVFVWVmtUbEpWTlZWWU1EVlFVa1ZWWjB0cE9HZEthVnBqWW1sQlowbERRV2RKUTBGblNWTkdhbUl5TlRCWlYyeDFXbGhKZFdGSE9YcGtSSFJqWW1sQlowbERRWFpNZVVKSldWYzFhMkpIVldkYWJXeDVZek5SWjJOdFZuVmFSMVo1U1VoU2RrbEhSV2RqTWs1MlkwZFZaMk16UW14Wk1teG9Za2Q0TlV4cE5IVllSelJuU1VOQloxa3lPWFZqTTFGbldtMXNlV016VWxSWk1qbDNXbFpLYkdKdFVteGphVUU1U1VjMWJGcFhVbnBWTWs1MlkwZHNkVnA1UVcxS2FVRm9ZekpvYUZwSWJGTmFWelZyV2xoS1ZGcFlVWFZoUjBaNlMwaE9hbUl6UW14VWJVWjBXbE5yTjFoSE5HZEpRMEZuVEhrNFoxUXlOR2RhYld4NVl6TlJaMk15VG5aalIxVm5ZMjFXZFZwSFZubE1RMEo1V2xjMWExcFlTV2RoVnpVd1lubENhRWxIV25sWlYyUjBXbGMxTUU5NVFqQmhSMng2U1VkT2FHSnROWFprUTBKcFdsTkNhRWxJVG5CaWJXUnpXbFo0ZFVsRFFXZEpRemgyU1VkYWVWbFhaSFJhVnpVd1NVaFNiMWxZVVdkaFdFMW5ZMjFXTVdNeVZtdEpTRTV3WW0xT2JFbEhOV3hqTTFKc1drTkNlVnBYTld0YVdFcDZTVWRPYUdKcFFuWlpNazR4WTJsQ2VtVlhOV3BoU0VwMlltMDVNV015ZURWTWJIaDFTVU5CWjBsSFRuWmliazR3U1VoS2JHSnRVbXhqYTA1MlltNVNhR0ZYTld4amFVRTVTVWRhY0dOdVRqQlZNazUyWTBkV1UxcFhOV3RhV0VsblVIbENhMkl5VGpGaVYxWjFaRU0xYW1OdFZtaGtSMVpGWWpKT01XSlhWblZrUlZwNVdWZGtkRnBYTlRCTFEydG5UMmxDYW1JeU5UQlpWMngxV2xoSk4xaEhOR2RKUTBGbllrZHNNRlZ0Vm5WYVIxWjVTMGhLYkdNelZuTmtRM2RuWTIxV2RWcEhWbmxSTWpsMVpFZEdjR0p0Vm5sTVEwSlFXVzF3YkZrelVYVlpXRTU2WVZka2RVdEljMmRrUjFaMFkwZDRhR1JIVmtkWlYwNHdZak5LTlU5cFFucGhSMFpyWlZaU2JHSllRbk5aV0ZKc1VtMUdhbVJIT1hsbFUyaDZXVEk1ZDFwVk5XaGlWMVZ3U1Vnd2MwbEhPWGRrUjJ4MlltNU5jRXRVZEdOaWFVRm5TVU5CZGt4NVFsaGhSMVoxU1VoQ2JHTnRXblpqYlRGd1ltMWpaMXB0Ykhsak0xRm5ZekpPZG1OSFZXZGpiVloxV2tkV2VVeEdlSFZKUTBGblNVTTRka2xEWjNoTFUwSllXbE5rTWxwVFFubGFWelZyV2xoS2JGcERRbkJpYmxKMlNVZEZaMXB1U21oYU1qRnNZbTVSWjJNeU9HZGtSMmhvWkVOQ01HRkhWbmxhVTJSNlNVZEZaMWt5YUdoaWJVNXNTVWhTZGxoSE5HZEpRMEZuVEhrNFoxbElRbmxhV0VKb1kyMVdWVnBYTVhkaVIwWXdXbFpPTUdWWGVHeGpNa0ZuV1cxV2JXSXpTbXhKU0U0eFdXa3hiR0pIVm5SYVZ6VXdZM2xDYjJGWVVXZGtSMmhzU1VWU1VGUldlSFZKUTBGblNVTTRka2xEYUROaFIyeHFZVU5DZEdGWFpHOWtRMEpxV1ZoV2VscFRRakJoUjFaMFNVaFNka2xJU214aWJWSnNZMmxDYVZsWVRteGFRMEoyWW1sQ2FFbEhUblppVnpGMlltbENkMWxZVWpCYVdFcDFTVWM1YlZoSE5HZEpRMEZuVEhrNFoyTnRWblZhUjFaNVlWYzFia2xIYkhWSlIwVm5XVE5XZW1SSE9YUkpSMVp6V2xjeGJHSnVVVzVqZVVKbldUSTVkV0p0Vm1wa1IxWnJVVEpHYzJKSFNtaFpNblJuUzFSMFkySnBRV2RKUTBGMlRIbEJiMDFwYTJkVk1rNTJZMGRWWjJSSGFHeEpTRkpzWWxoQ2MxbFlVbXhKU0dSd1pFZG5aMVV5YUdoYVNHeEVWVEZOWjJJeU5XeEpTRkp3WWxkVloySXlOWE5sVTBKdFlqTkpaMlJIYUhCamVVSjZXVEk1ZDFwVE5XTmlhVUZuU1VOQmRreDVRVzlOZVd0blZXMVdkVnBIVm5sSlNGSnZXbE5DYldOdFJtNWlWMVoxWkVOQ2NHSnVVblpKU0ZKdldsTkNhbUl5TlRCWlYyeDFXbGhKWjFsWE5XdEpSekZvWVRKVloyTXpWbmxhVTBJd1lVZFdZMkpwUVdkSlEwRjJUSGxDYW1JeU5UQlpWMngxV2xoSloyRXlOWFprTTAxbllWaFNla2xIUW5kWldFb3dXVU5DY0dONVFqQmhSMVZuWWpJMWJFbElaR3hKUjNBeFl6TlJaMk50Vm5WYVIxWjVXbGRSZFVsR1VtOWhXRTFuV2xjMWVtUllTbXhqTVhoMVNVTkJaMGxET0haSlJWSlFWRk5DTTJGWGVITkpSMHBzU1VoS2JFeFlWbnBhVjFGbllqSTBaMk16Vm1sak1sWjRaRmRXZFdSRFFubGFWelZyV2xoS2VreHNlSFZKUTBGblNVZHNiVWxEYUcxaFdFcDZaRVpPYW1JelFteFZiVloxV2tkV2VVdFRRamRZUnpSblNVTkJaMGxEUVdkSlIwNTJZbTVPTUVsSVFtaGpibEZuVUZOQ2QxbFlTakJqZVRWdVdsaFJiMk50Vm5WYVIxWjVVVEk1ZFdSSFJuQmliVlo1UzFSMFkySnBRV2RKUTBGblNVTkJaMk5IUm5sa1NFMTFXa2RXYzFwWVVteExTRXBzWW0xU2JHTnJUblppYmxKb1lWYzFiR05wYXpkWVJ6Um5TVU5CWjBsRFFXZEpRemgyU1VaT2IxbFhValZSTVU1VVNVY3hjRm95YURCSlIyaG9aRzFWWjJNelVqVmlSMVZuWXpKb2JGcFlVbnBKUTJoc1RHMWpkVWxIV25saU1qQm5XVWhDZVZwWVFtaGpiVlpDV2tjNWQyUkhWbXRSTTA1NlZrZFdOR1JIUVhCWVJ6Um5TVU5CWjBsRFFXZEpRemgyU1VoU2IxbFlVV2RqTW1oMlpGZDRhMGxIUm5kalIzZzFTVWhTZGtsSFFubGFWelZyV2xoS1JHSXlOVEJaVjJ4MVdsaEtaMGxIVmpKYVZ6Um5ZVmRaWjJSSGFHeEpTRXBzWW0xU2JHTnRWbXRKU0Zwb1lraFdiRWxIYkhwWVJ6Um5TVU5CWjBsRFFXZEpRemgyU1VjMWRtUkRRbWhKUmxKc1lsaENjMWxZVW14VFZ6VjZaRWRHZFZreVZYVkpSV2gyWkRKV01scFlTWE5KUjJ3d1NVaGtjR0pIZDJkaU1qVnpaVk5DY0dKdVRteGpibEZuWXpKT2RtTkhWbXRKU0U0d1pWZDRiR014ZUhWSlEwRm5TVU5CWjBsRFFYWk1lVUp3WW01U2RrbElVbTlhVTBKcllqSk9NV0pYVm5Wa1EwSndXbWxDWjJOSVNteGpSMFo1V2xaU2JHSllRbk5aV0ZKc1ZUTlNOV0pIVm5wWlEwSnZXVmhOWjFsWGVIbGFWMFpyWlZOQ2FWcFhWblZKUjA1b1lrZDRiRnBHZUhWSlEwRm5TVU5CWjBsRFFYWk1lVUp0WWpOSloyUkhhR3hKUjJSd1pHMVdkVWxJVG1waU0wSnNTVWMxYUdKWFZYVllSelJuU1VOQlowbERRV2RKUjA1MlltNU9NRWxJVW14aVdFSnpXVmhTYkVsRU1HZGpSMFo1WkVNMU1sbFhlREZhVTBKd1ltNU9NRmxYTldwYVZ6bHRTVVpTYkdKWVFuTlpXRkpzVTFjMWVtUkhSblZaTWxWblVERjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGpSMFo1WkVNMU1sbFhlREZhVXpVd1dsY3hkMkpIUmpCYVUwRTJXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRakZpYlZKc1dtMXNkVnBYVVRkWVJ6Um5TVU5CWjBsRFFXZEpTRUo1V2xoQ2FHTnRWbFZhVnpGM1lrZEdNRnBXVGpCbFYzaHNZM2xvZWxreU9YZGFWVFZvWWxkVmMwbElTbXhpYlZKc1kydE9kbUp1VW1oaFZ6VnNZMmwzWjJSSFZuUmpSM2hvWkVkVmNFOHhlSFZKUTBGblNVTkJaMGxEUW5sYVZ6RjJaRzFXVDJJeVVteGplV2hxWWpJMU1GbFhiSFZhV0VselNVZE9kbUp1VW1oaFZ6VnNZMmsxYldGWVNucGtSVTV2WVZkNGEwdFVkR05pYVVGblNVTkJaMGxEUVdkWk1qbDFaRWRHY0dKdFZubE1iVVozWTBkV2RWcEZUbTloVjNoclMwaEtiR0p0VW14amEwNTJZbTVTYUdGWE5XeGphV3MzV0VjMFowbERRV2RKUTBGblNVaENhR051VW5wTWJrNXNaRU5vYW1JeU5UQlpWMngxV2xoSmMwbElRbWhqYmxGd1R6RjRkVWxEUVdkSlNERmpZbWxCWjBsRFFYWk1lVUpDV201U2JHTnBRbXhpUjFaMFdsYzFNR041UW05WldGcHNTVWRvY0dSRFFqQmhSMVZuVWtVNVRreERRakZqUjFKb1pFZFZaMk16VWpWaVIyeDFXbmxDY0ZwcFFqQmhSMng2U1Vkc2VrbElVbTlhVm5oMVNVTkJaMGxET0haSlIyeDFZVmhTY0ZsWGQyZGpiVloxV2tkV2VVbElVblpKU0ZKdllWaE5aMWt5T1hWa1IwWndZbTFXZVV4c2VIVkpRMEZuU1VNNGRrbEdVbTloV0UxbllWaE5aMkp0Vm14YVIxWnJTVWhrYjFwWE5XeGtiVlo1U1VkU05XSnRSblJoVjAxbldUSm9hR0p0Wkd4amVVSm9ZMjFWWjJKWFJtdGFVMEo2WW5sQ2NHUkRRak5pTTFaeldrTkNhVnBXZUhWSlEwRm5TVU00ZGtsSVRtaGFiVlo2WkVOQ01HSjVRbXRpZVVKc1pHMVdlV1ZUUW5sYVZ6VnJXbGhKTjBsSGFIWmtNbFl5V2xoSmMwbElVbTloV0UxblpESTVNV0pIVVdkamJWWnVZMjFXZW1ONVFuZGFXRXB0WWpOS2RGbFhOV3BhVm5oMVNVTkJaMGxET0haSlNFNTJTVWhrYkVsSGVHeFpXRnBzU1Vkc01FbElWbmRKU0ZKMlNVaFNiMXBUUWpGak1sWjVTVWhTZGtsSFRtaGlSM2RuV1VaT2IxbFhValZSTVU1VVRHNU9NR1ZYZUd4U1YzaHNZbGRXZFdSSFFtTmlhVUZuU1VOQmRreDVRbTFpTTBsbldraHNkVmxYTVhCWmVVSnFZVWRHZFZveVZucE1iSGgxU1VOQlowbEhiRzFKUTJkb1lVZEdlbFZ0Vm5WYVIxWjVXbGRSWjBwcFdXZGliVlpzV2toT1ZGa3lPWGRoVnpWdVMxTkNOMWhITkdkSlEwRm5TVU5CWjBsSVpIQmliVkoyWkhrMVZHRkhSbXRsVlU1VVZYazFlbVJJYkhOYVZWWnpXbGN4YkdKdVVXOVpNamwxWkVkR2NHSnRWbmxNYldoMll6TlJjRTh4ZUhWSlEwRm5TVWd4WTJKdU1EZFlSelIyVEhsTloyTXlPVEZqYlU1c1ZGZEdkMk5IYkhWYU1WWlRWRVF4ZW1GSFJtdGxVekY1V2xjMWExcFlTWFZoYmsxMVlsZEdkMGxwZDJsTWVXOXhXRWMwWjB0cFFrRmlSMnhxV2xjMWVscFdlSFZKUTI5blVUSTVkMlZZU25CYU1tZ3dTVU5vYWt0VFFYbE5SRVV6U1VaU2IxcFRRbEZpTW5nMVlsZFdlVWxHUW5saU1uQnNXVE5SWjFGWVZqQmhSemw1WTNrMFoxRlhlSE5KU0Vwd1dqSm9NR041UW5sYVdFNXNZMjVhYkZwRE5XTmlhVUZ4U1VaU2IyRllUV2RaTWpscldsTkNkRmxZYTJkaU1qVnpaVk5DYVZwVFFqRmpNbFpyU1VoV2RWcEhWbmxKU0ZKdldsTkNRMVV3VVdkak0xSTFZa2RWWjJKSGJHcGFWelY2V2xOQ2JXSXpWblZhUTBKb1pFWjRkVWxEYjJkaFNGSXdZMFJ2ZGt3elFuWmlTR3gwV2xoSmRWb3liREJoU0ZacFRHMXNka3d3ZUVwUk1GWlBWVEJWZFdSSWFEQllSelJuUzJsQ1ZXRkhWV2RaTWpsMFkwZDRiR1JIVldkak1sWXdTVWM1YlVsSFJqRmtSMmgyWTI1TloySlhSalZKUjBwc1NVZGFkbVJYTld0SlIwWXdXRWMwWjB0cFFtOWtTRkozVDJrNGRtTkhPWE5sVnpGc1kyazFibUZZVW05a1YwbDFZVmM0ZGxGV1ZsVlRSVGxUVlhrMU1HVklVbU5pYVVGeFNVWlNiMXBUUW1waU1qRjNZa2RXTUZwVFFucGFXRkZuWWpKWloxa3lPWFZrU0Vwd1dXNVdNR0l6U25wSlJ6Rm9aVk5DYVZwVFFtMWlNMVoxV2tOQ2FHUkdlSFZKUTI5bllVaFNNR05FYjNaTU0wSjJZa2hzZEZwWVNYVmFNbXd3WVVoV2FVeHRiSFpNTUU1UVZHeFNVMU5WU2xaV1JUbFRWWGsxTUdWSVVtTmlhVUZ4U1VWT2RscEhWV2RhUjJ4NlpFaEtjRmx1VmpCYVYxRm5XVzVyWjFJeU9YWmFNbmhzU1VkR2VrbElRbWhqYmxGbllqSlpaMlJIYUd4SlNFSjJZa2hzZEZwWVNXZGpTRXAyWVcxV2FtUkRRbkJqZVVKb1lraE9kbGhITkdkTGFVSjZaRmRLY1ZwWFRqQkpTRkoyU1VkR2RVbEhSbXRhUjJ3d1lWYzVkVmxYZDJkVFZrRm5ZMjFzYm1GSVVucEpSMlI1V1ZjMU1FbEhXblprVnpWclNVZEdNRmhITkdkTGFVSnZaRWhTZDA5cE9IWmpSemx6WlZjeGJHTnBOVzVoV0ZKdlpGZEpkV0ZYT0haVlJVWlZVbFUxVlZWNU5UQmxTRkpqWW1sQmNVd3hlSFZrYlVaNVNVWTVhRTh4ZUhWTWVXOXhXRWMwWjB0cFFsaGhSMVoxU1VoV2VtRlhOVzVKUlU1ellqTk9NV050VldkUk1qbDBZMGRzYzFwWVNYTkpSWEJVVVRJNWRHTkhiSE5hV0VwbVkyMVdkVmxYTVd4VlNFcDJZMGRXZVdSSWEyOWpTRXAyWTBkV2VXUklhM05KUnpscFlXMVdhbVJEYTJkaFdFNWpZbWxCY1VsSVNteGpSM2hvV1RKV2EwbEhSakJKUjA1MllsaENjR0pIVldka1IyeDBXbE5DYVdWVFFqQmhSMVZuWWxoV2RWb3lWbXRKUnpWb1lsZFZaMXB0T1hsSlJ6bHBZVzFXYW1SR2RIZGpiVGwzV2xoS01HVldNSFZKUm1Sc1NVZE9hR0p0Tlhaa1JuaDFTVU52WjFsWGVIQlpXRTFuWkVkb2NHTjVRbTFrVnpWcVpFZHNkbUpwZDJkak1qaG5aREpWWjJGSFJqSmFVMEl3WW5sQ01XTXlWV2RaVTBKNllsZEdjMkpEUW5waFIyeDBTVWhTYjFsWVVXZGhSMFo2U1VoU2IxcFRRbnBaVnpGc1dFYzBaMHRwUW1sYVYyaG9aRzFzZG1OcFFqTmhSMVoxU1VjMWRtUkRRbXBpTWpGM1lWZDRjR0p0WTNWWVJ6Um5TMms1WTJKdVpIQmliVkoyWkhrMVMxVXdUblppV0VKd1lrZFdlVmd6U214aWJVWjBXbFpDZVdJelFteGpibEkxU1VReFkySnBRV2RKUTBGdlkwaEtkbU5EZDJkWU1qbHBZV2xyWjFCVU5HZGpTRXAyWTBSMFkySnRWalJqUnpsNVpFTkNhbUl5Tlhwa1EwSnJXbGRhYUdSWGVEQlJNamwxWkcxV2VXUkhWbmxKUkRCblpURjRkVWxEUVdkSlNGSjJVVmhTTUdOdGJHbGtXRkpzUzBoYWFHSklWbXhNUTBJd1pWaENiRXRUUWpkWVJ6Um5TVU5CWjBsRFFXZEpTRTR6WVZoU2FtRkRRVzlrU0d4M1dsTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuV1RKR2VscFRRa05pTWpseldsZEdkVTlzZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElTbXhrU0ZaNVltbENNbGxYZURGYVUwRXZTVU5qYmtsRWIyZGlibFp6WWtSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIwNW9ZekpWWjFReVNuRmFWMDR3VDJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkWk1rWjZXbE5DUW1OdVNtaGxWSEJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRjJUSGxDY0ZwcFFqQmhSMVZuWkcxR2MyUlhWV2RoV0UxbldVYzFNV0pIZUdkSlJ6bDVTVWRDTVdKdFVteGFiV3gxV2xkU1owbElRbWhqTTAxblpFZG9jR041UWpCaFNFcDJaRmRrYjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMHg1T0dka1J6aG5XVmQ0YzJJelkyZGpiVlowWWpOYWNHSnRZM1ppYlRobldUSm9hR0p0Wkd4SlIwcHNZVWRHTW1GWE9YbE1iSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNFcHNaRWhXZVdKcFFqSlpWM2d4V2xOQk9WQlRRblZrVjNoelNVUTRaMlJ0Um5Oa1YxVm5UMmxDUzFVd09VOU1iazR3WTIxc2RWb3liRzFsVTJneVdWZDRNVnBUYXpkWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRV2RKUTBGblkyMVdNR1JZU25WSlNGcG9Za2hXYkU4eGVIVkpRMEZuU1Vnd2MxaEhOR2RKUTBGbldtNUtkbUpWUmpCa1NFcHdXVzVXTUZwVGFESlpWM2d4V2xOM1oyUkliSGRhVTJ0blpURjRkVWxEUVdkSlEwRm5TVU5DZW1ReWJEQlpNbWRuUzBoU05XTkhWWEJKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSFRtaGpNbFZuVVcwNWRtSkhWbWhpYW5CalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEo1V2xoU01XTnROR2RrYlVaelpGZFZaMGxVTURsSlJ6VXhZa2QzTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKcVdWaE9iRWxGTlRGaVYwcHNZMnB3WTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNlVnBZVWpGamJUUm5aRzFHYzJSWFZXZFFWREE1U1VjMU1XSkhkMmRRZVVKMVpGZDRjMGxFYjJkVWJsWjBXVzFXZVV0SVdtaGlTRlpzUzFSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIwNW9ZekpWWjFReVNuRmFWMDR3VDJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkWk1rWjZXbE5DUW1OdVNtaGxWSEJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSjVXbGhTTVdOdE5HZFRiRTVRVkdrMWQxbFlTbnBhVTJneVdWZDRNVnBUYXpkWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRV2RKUTBGblkyMVdNR1JZU25WSlNGcG9Za2hXYkU4eGVIVkpRMEZuU1VneFkySnVNRGRZUnpSMlMybHdZMkpwUVhGSlJVNXZXVmMxYmxwVFFtMWtWelZxWkVkc2RtSnBRakJoUjBZd1NVaEtiR1JJVm5saWJrMW5aRWhLTVZwVFFuQmFhVUpuWkcxR2MyUlhWbWRKUjJ4NlNVZFNjRnB0V214amJWWjFaRU5DYldOdE9YUkpSMEoyWWtkU1YxbFhlREZhVjBGMVdFYzBaMHRwUWxWaFIyeDZTVWN4YkdSSGFIWmFRMEp3WTNsQ01XTXlWbXRKUjBaNlNVaFNiMXBUUW10YVYxcG9aRmQ0TUVsSFduWmphVUpvU1VoQ2VXSXpRbXhqYmxJMVNqTk5aMWxIYUdoak1FNXZXVmMxYmxwWFVtZEpSMW94WW0xT01HRlhPWFZNYkhoMVNVTnZkbGhITld4bFNFSjJZMjVSWjFreU9YVmpNMUZuWW0wNU1GSllSakZaVjNkblVGTkJiMlJ0Um5Oa1YxVnpTVWM1YzFwRGEyZFFWRFJuWlRGNGRVbERRV2RKUXpoMlNVWlNiMkZZVFdkYVZ6VjZaRmhLYkdONVFXOWlNbmhyVUZReFQxbFZOSE5KU0Zwb1lraFdiRkJVTVU5WlZUUndTVWRHYzJReVJqVmplVUo1V2xoU01XTnROWHBKUjFwb1lraE9iRmhITkdkSlEwRm5ZMjFXTUdSWVNuVkpSemx6V2tOQmFGQlVNR2RrYlVaelpGZFZaMHBwV1dkTFJ6bHpXa05CT1ZCVU1HZGlNbmhyU1VoNE9FbElXbWhpU0Zac1NVUXdPVkJUUWpKWlYzZ3hXbE5yTjFoSE5UbFBNWGgxV1RJNWRXTXpVV2RhUjFadFdWaFdjMlJHUW5saU0wSnNZMjVTTlZKSFZtcGlSMFo1V1ZoU2NHSXlOR2RRVTBJM1dFYzBaMGxEUVdkWldGSXdZMjFzYVdSWVVteFBhVUl3WTI1V2JFeEdlSFZKUTBGblNVaFNOV05IVlRaSlJrNHdZMjFzZFZwNWVHTmlhVUZuU1VOQ2FtSXlOVEphV0Vvd1dsaEpOa2xIVW14YWJVWXhZa2hTUkdJeU5USmFXRW93V2xoSmMxaEhOR2RKUTBGblkyMVdiV0pIVm1wa1JHOW5XbTFHYzJNeVZYTllSelJuU1VOQloyRkhSbnBSTW1ob1ltMWtiRnBFYjJkaWJUa3dVbGhHTVZsWGVHTmliakEzV0VjMWFtSXlOWHBrUTBKVVZrVkdWVkpXT1VsUlZrNW1WbFpDUlZGV1VrWlNRMEU1U1VSRk4xaEhOV3BpTWpWNlpFTkNWRlpGUmxWU1ZqbFdWVVZTUWxaRlZtWlZhMVpTVmxWV1ZGWkZWa1ZKUkRCblRWTkJPRkJEUVhsUE1YaDFXVEk1ZFdNelVXZFZNVkpDVmtWV1psTldUbVpWYTFaSFZFVldSRlpGYkU5U01UbFZWREU1UWxaR1VsTlRWVXBXVmtWVloxQlRRWGhKUkhjNFNVUk5OMWhITldwaU1qVjZaRU5DVkZaRlJsVlNWamxLVlRFNVUxSlZXazFTVlU1VlUxVTFTRmd4VWxCWU1VSlRWREZDUmxWc1VscEpSREJuVFZOQk9GQkRRVEJQTVhoMVRIbHZjVmhITkdkTGFVSlZZVWRWWjFFeWVIWmpNMVo1V2xOQ1MxVjVRa1JpTWpGM1lWZDRiR05wUW10aU1sWjZZbWxrTUVsSFRqRmpia3BzWW01U2MyVlRRbTlaV0Zwc1NVZGtkbUl5VVdkak0xWjNZMGM1ZVdSRFFtMWlNMGxuWXpOU2FHUkhiR3BZUnpSblMybENkMk50T1hkYVdFb3daVk5DZWxwWE1XaGlibEp3V1ROTloyUXlhR3hqYlZWbldFTktNR0ZIYkhwWVEwbG5ZVmhOWjFwSWJIVlpWekZ3V1hsQmIxcFROVzVNYkhoMVNVTnZaMkZJVWpCalNFMDJUSGs1Ym1GWVVtOWtWMGwxV1RJNWRFd3laSFppTW1SeldsTTVhbUpIT1hwa1dFcHNURmRPZG1KWVFuQmlSMVo1VERKc2VtTXpWbXhqZVRoNlRWUmpNMGxIUm5WYVEwSjJaRWRvYkdOdVRYQkpTRTUyU1Voa2JFbElWbnBhVm5oMVNVTnZaMlJIYUhCamVVSnZXVmRPY2tsSVVuWkpSMG8xWTBkR2VtTjVRbWhpYm10blkyMVdNMk50YkRCaFZ6VnVTVWRLTlVsSVVtOWFVMEpxWWpJeGQyRlhlR3hqYVRWalltbEJjVXd4ZUhWWk1qbDFZek5SWjFwdGJIVlpWM2h3WlcxV2EwbEVNR2RLTWxwd1ltMUdjMkZZY0d4YVEyTTNXRWMwZGt0cGNHTmlhVUZ4U1VWS2FHTXlWV2RhVjNoc1lsZFdkV1JEUW1waVIwWjZZM2xDTTJGSGJHcGhRMEowV1ZjMWFGb3lWbnBKUjFaeldsY3hiR0p1VVdkalNFcDJZMGRXZVdSSGJHeGplVUpvWW0xUloxbFlVakJqYld4cFpGaFNiR041TkdkV01taHNZbXg0ZFVsRGIyZGpTRXAyWTBkV2VXUkhiR3hqZVVKcVlVZEdkVm95VlhOSlNGSnZXbE5DWjJSWVFtdFpXRkpzV1VOQ2RGcFlVbTlpTWxGbllWaE5aMWxZVGpWaWJVNXZZMjA1ZFdJelZucGlTR3RuV1RKR2MySkhWbXRNYVVKVllVZHNla2xITVd4a1IyaDJXa1o0ZFVsRGIyZGpNbWgyWkZkNGEwbEhTbXhKU0U0eFkwaENjMkZYVm10SlIwbzFTVWhPTVZsdFRuTlpXRTU2V2xoS2VrbElVblpKU0Vwc1ltMVNiR05wUWpGalIxSm9aRWRXZWtsSFJucEpSMUpzWXpKc2VWcFhVWFZZUnpSblMyazVZMkp0VmpSalJ6bDVaRU5DYW1KSFJucGplVUpXWTBkU2FHUkhiSFZhTUZaeldsY3hiR0p1VVdkYVdHZ3dXbGMxYTJONVFrbFdSVEZOVWxkNGJHSlhWblZrUTBJM1dFYzBaMGxEUVdkWk1qbDFZek5TZVdSWFRqQmlNMGx2UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxJVGpGalIxWjVTME5yTjFoSE5HZEpRMEZuU1VOQlowbElVbTloV0UxMVdETldkMXBIUmpCYVZrNHdXVmhTYkVsRU1HZE5SSFJqWW1sQlowbERRV2RKUTBGblpFZG9jR041TldaaFZ6VjZaRWRHZFZreVZsRmpiVGwzV2xoS01HRlhWbnBKUkRCblpGYzFhMXBYV25CaWJWWnJUekY0ZFVsRFFXZEpRMEZuU1VOQmRreDVRa3BpYld3d1lWZEdjMkZZY0d4SlNGSjJTVWRHZFVsSVZuVmpiVlo2WWpKNE1scFhVV2RWU0VwMllsZHNlbHBUUW5waWVVSXpXbE5DYWxsWE5HZGlWMFp5V2xOQ2VtUllTbXhKU0ZKdldsTkNiR0pIVm5SYVZ6VXdTVWRvYUdNeGVIVkpRMEZuU1VOQlowbERRWFpNZVVKcVlqSTFkVnBYVGpCYVYxRm5XVzFXYldJelNteEpSMXB3WTI1T01FbElWbmRhUjBZd1dsTTFZMkpwUVdkSlEwRm5TVU5CWjJSSGFIQmplVFZtWkZoQ2ExbFlVbXhWU0VwMllsZHNlbHBUUVRsSlJ6VnNaSGxDVVdOdE9YUmhXRTVzUzBOb2VWcFlUWEJKUkRBclNVaFNiMkZZVFhWWU1sWjFXVmRLYzFwV1ZuZGFSMFl3WVZjMWJsVnRWbnBpTW5neVdsaEpaMUJUUW5sYVdFMXdUekY0ZFVsRFFXZEpRMEZuU1VOQmRrdHBjR05pYVVGblNVTkJaMGxEUVdkSlEyOW5WRmRHZDBsSVpIQmtSMmRuWVRKV05XTjVRbTFpTTBsbldWYzFOVWxJUW5saU0wSnNZMjVTY0ZwWVRXZGtSMmhvWkVOQ2IxbFlXbXhKUjA1dldWYzFibHBYVVdkak1teDFXVEpWWjJSSGFHeEpSM2hvWXpOU1kySnBRV2RKUTBGblNVTkJaMGxEYjJka1dFSnJXVmhTYkVsSFRqVlpNbmhzU1Voa2NHUkhaMmRqU0Vwc1pHMXNkbVJZVFdka2JVWnpaRmRXZWt4c2VIVkpRMEZuU1VOQlowbERRV2RMYVRsalltbEJaMGxEUVdkSlEwRm5aRWRvY0dONU5XWlpNbWhvWW0xa2JGcEdRbmxpTTBKc1kyNVNjRnBZVFdkUVUwSjFXbGhqWjFSWFJuZExRMnMzV0VjMFowbERRV2RKUTBGblNVTTRjVXRzZUhWSlEwRm5TVU5CWjBsRFFXZExhVUpPV1ZoQloyUXliREJoUTBKeVdsaHNla2xIT1cxSlNFSjVZak5DYkdOdVVuQmFXRTFuWkVkb2FHUkRRbnBoUnpreFlrZFJaMWx0VldkamJWWnRZa2RXYW1SSFZtdEpTR1J2V2xjMFoyUllRbXRaV0ZKc1drTTFZMkpwUVdkSlEwRm5TVU5CWjBsRGIzWllSelJuU1VOQlowbERRV2RKU0ZKdllWaE5kVmd6U214YWJYaHNXVE5TY0dKdFpGRmpiVGwzV2xoS01HRlhWbnBKUkRCblpGYzFhMXBYV25CaWJWWnJUekY0ZFVsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYld4MVlWaFNjRmxYZUhCbGJWVnZTMVIwWTJKcFFXZEpRMEk1V0VjMFowbERRV2RNZVc5eFdFYzBaMGxEUVdkSlEyOW5WVzFXTUdSWVNuVmplVUpvU1VkNGNHTXpVV2RpTWxsbldWaFNNR050Ykdsa1dGSnNZM2xDYW1JelNubGFXRTUzWWpJMWEyRlhOVzVKU0ZKMlNVaFNiMXBUUW5sYVYyUndZek5TYkdOdFZtdEpTRUo1WWpOQ2JHTnVVbkJhV0UxMVdFYzBaMGxEUVdkSlEyOW5VVWMxZGxreU9YTmlSMFozWXpKV1kySnBRV2RKUTBGblMyazVZMkpwUVdkSlEwSjZaRWRHTUdGWFRXZGFNbFl3U1VjNWFXTXlWbmxrYlZaclVWaFNNR050Ykdsa1dGSnNZM2xuY0VsSWRHTmlhVUZuU1VOQlowbERRV2RNZVRoblltMDVNRnBVYjJkalIyeHVXak5yWjFsdFJtcGhNbXgxV25sQ2RtSnBRakJoUjJ4NlNVaFNka2xIVm5Wak0xWjVXbE5DTTFwVFpIbGFVMEp0WVZjMWFHSkhiRFphVjFGMVdFYzBaMGxEUVdkSlEwRm5TVWhTYjJGWVRYVmFiV3gxV1ZkNGNHVnRWVzlMVkhSalltbEJaMGxEUVdkSlEwRm5XVEk1ZFdNelVXZFpXRkl3WTIxc2FXUllVbXhqZVVFNVNVWjBaRTh4ZUhWSlEwRm5TVU5CWjBsRFFYWk1lVUpXWXpKVloxcHRPWGxTVjBacVlVTkNlbUo1UWpCaFIyeDZTVWhrZG1OdGRIcEpSMVl5V2xjMFoyRlhXV2RhYlRsNVRESTViVWxIZUhaaU0wSjZTVWRHZVZwVFFtcGlNakYzWVZkNGJGcERRakJpZVVKdFlqTkpaMkpIT1haalNFNWpZbWxCWjBsRFFXZEpRMEZuVEhrNFoxcFlhSGRhVjA0d1lWYzFia2xIUm5samJVWTFZekY0ZFVsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYkRscVlrZEdlbU14UW5saU0wSnNZMjVTY0ZwWVRYVmFiVGw1VWxkR2FtRkRaMjlrYVhkblkwTnJaMUJVTkdkbE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloxa3lPWFZqTTFGbldWaFNNR05wUVRsSlNGSnZZVmhOZFZneVJqQmtTRXB3V1c1V01GcFZOV2hpVjFaSFlqTktVV050T1hkYVdFb3daVk5vZDB4RFFqSkxWSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxIYkcxSlEyaG9aRWhTZVVsRFJUbFFVMEl4WW0xU2JGcHRiSFZhVjFGd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYkRsb1pFaFNlV0ZYU2pGa1IxWlZZakZDZVdJelFteGpibEkxVkZkR2QweHVUbXhrUTJob1pFaFNlVXhEUW5kTFZIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKb1pFaFNlV0ZYU2pGa1IxWjZURzVDTVdNeVoyOVpXRkl3WTJsck4xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSTVXRWMwWjBsRFFXZEpRMEZuU1Vnd2NFOHhlSFZKUTBGblNVTkJaMGxEUW5sYVdGSXhZMjAwWjFsWVVqQmpiV3hwWkZoU2JHTjZkR05pYVVGblNVTkNPVmhITkdkSlEwRm5USGx2Y1ZoSE5HZEpRMEZuU1VOdloxSlhOWHBrV0Vwc1kzbENNR0ZIVldkalNFcHdaRzFHTUZwVFFtZFlNazV6V1ZoT2VsVklTblpqUjFaNVpFZHNiR015UVdkalNFcDJZMGRXZVdSSWEyZGlWMVl3V1ZkU2FHUkhSV2RoV0UxbldUTktiRmxZVW14YVF6VmpZbWxCWjBsRFFXZExhVUpLWW1sQ2FGcEhVbkJrUjJ4MlltbENNR0o1UW1kYWJXeDFXVmQ0Y0dWdFZtZEpTRkp2WVZoTloyRllUV2RaVjNoNllubENhbGxYZUhOYVYxRm5ZVmMwWjFsSFRubGFWMFl3V2xaQ2VXSXpRbXhqYmxJMVdVTkNNR0l4ZUhWSlEwRm5TVU5CY1VsSFZuVmpNMVo1V2xOQ01HRkhWV2RaUlVKM1kyMDVkMXBZU2pCbFYwRm5Xa2RXYW1JelNtaGtSemw1U1VkT2FHSnBRbWhhUjFGblkwaEtkbU5IVm5sa1NHdG5ZbGRXTUZsWFVtaGtSMFYxV0VjMFowbERRV2RKUTI5MldFYzBaMGxEUVdkTWVXOXhTVVZDZFdJeVRuWmlSM2hvWTBoT2JFbERiM1pZUnpSblNVTkJaMk16VW1oa1IyeHFTVVk1YkdKdVRqRmpiVlpFWWtkR2VtTXhRbmxpTTBKc1kyNVNjRnBZVFc5TFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VNNGRrbEhWblZqTTFaNVdsTkNkMk50YkRKWldGSnNTVWhPTUdJelNtaGFNbFZuV20wNWVVbElRbmxpTTBKc1kyNVNOVWxIVW14Wk1uaG9ZMjFHTUdGWE9YVmplVFZqWW1sQlowbERRV2RKUTBGbllWZFpaMHREUmpCaFIyeDZURzFvYUdNd09UTmliRUo1WWpOQ2JHTnVValZMUlhCVVVUSTVkR05IYkhOYVdFcG1ZMjFXZFZsWE1XeFZTRXAyWTBkV2VXUklhMjlLTVRscVlrZEdlbU14UW5saU0wSnNZMjVTY0ZwWVRXNU1RMEl3WVVkc2VrdFRhM0JKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSVVtOWhXRTExV0RKT2MxbFlUbnBWU0VwMlkwZFdlV1JIYkd4amVVRTVTVWMxYkdSNVFrNVpXRUZ2UzFSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlF6aDJTVVUxVUZaRlZUWkpSbVIyWTIxMGFHTnRPVEZpYlZGblUxVlZlRTFUUW5WaU0xRm5Zek5XZDJOSE9YbGtSMngxV25sQ1RsbFlRV2RaTWpsMVl6TlNlV1JYVGpCaU0wbG5XVmhLYm1SWE1XeGlibEYxV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUW1waU1qVjZaRU5DZW1SWVFteGpiRUo1WWpOQ2JHTnVVbkJhV0UxblVGTkNVRmx0Y0d4Wk0xRjFXakpXTUZWSVNuWmtSemt3WlZoQ2JGUXlXVzlrUjJod1kzbHJkVmd5VG5OWldFNTZWVWhLZG1OSFZubGtSMnhzWTNwMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIyeHRTVU5vZW1SWVFteGpiRUo1WWpOQ2JHTnVVbkJhV0UxblNWUXdPVWxJVm5WYVIxWnRZVmMxYkZwRGEyZGxNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNFNHhZMGRXZVZWSVNuWmpSMVo1WkVkc2JHTjVOVzFpTTBwR1dWZE9iMHREYURKTVEwSnlTMU5CT1ZCcFFqQmhSMng2VEd3NWFtSkhSbnBqTVVKNVlqTkNiR051VW5CYVdFMTFZekpXTUV0SGMzTkpTRmx3UzFSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNERmpZbWxCWjBsRFFXZEpRMEZuWmxaNGRVbERRV2RKU0RGalltbEJaMGxEUVhaTGFYQmpZbWxCWjBsRFFXZExhVUpFWTIxV2FHUkhWbnBKUjBWblkwaEtkbU5IVm5sa1NHdG5XVmRPYWxwWVRucGlNMGxuWWpJMFoyUkhhR3hKUjFaeldsY3hiR0p1VVdkalNFcDJaRWM1TUdWWVFteEpSMnh0U1VjNWRWcFRRbXRpTWxaNlNVYzFkbVJEUW14bFIyeDZaRVo0ZFVsRFFXZEpRMEZ4U1VkR2RWcERRbnBrUnpsNVdsaE5aMWxUUWxGamJUbDNXbGhLTUdWVlVteFpNbmhvWTIxR01HRlhPWFZKUjFwMlkybENNR0ZIVldkalNFcDJZMGRXZVdSSWEyZGtNbXd3WVVOQ01HRkhWV2RhTW13eVdsYzBaMkl6UWpCaFZ6bDFZM2sxWTJKcFFXZEpRMEZuUzJsQ1ZXRkhWV2RqU0VwMlkwZFdlV1JJYTJkak1sWXdaRWRXZVVsSFRtaGlSM2g2U1VoU2IxcFRRbmRqYlRsM1dsaEtNR1ZUWkhwSlIwSnZXVmhPUkdGSFJuVmFNbFpyV1VOQ2QyTnRPWGRhV0Vvd1pWTkNkbU5JVW5CaU1qVmpZbWxCWjBsRFFXZExhVUoyWTJsQ01XTXlWbnBKUjBWbll6TlNlV0ZYVGpCSlIyeHJXbGMxTUdGWVVqVkpSMDV2V2xkT2NrbElVblpKUjFKc1pFZFdlV0pYYkhWYVUwSXpZVWRXTUdGSFZubEpSemw1U1VjMWRtUkRRakJpZVVKNVdsaEdNVnBZVGpCWVJ6Um5TVU5CWjBsRGIyZFpWelJuWkZoQ2ExbFlVbXhNYkhoMVNVTkJaMGxEUVhGWVJ6Um5TVU5CWjBsRGIyZFdSMmh3WTNsQ2RGcFlVbTlpTWxGbllsZEdOVWxIU214SlJ6a3lXbGhLZVdGWFVtdGFWelJuWkVjNFoxa3pWbnBrUnpsMFlWaHdiRWxJUW5saU0wSnNZMjVTY0ZwWVRUZEpSMmgyWkRKV01scFlTWE5ZUnpSblNVTkJaMGxEYjJka01taHNZbWxDYTJJeWJIVmFlVUo2WW5sM1oyRllVVzVqZVVKd1lsaENkbU51VW1oaWJsRm5aRWM0WjFreVJuTmlRMEpuWXpOV2QxcFlTWFZaTTBwc1dWaFNiRlZJU25aalIxWjVaRWhzWjBsSVVuWkpSMVoxWXpOV2VWcFdlSFZKUTBGblNVTkJjVWxJVW05YVUwSjNZMjA1ZDFwWVNqQmxVMEp3WTNsQ2VscFlVakZqUTBKcVlqTktlVnBYVGpCaVNHdDFTVVpTYjJGWVRXZGlWMVl3WVVjNWEwbEhUbWhpUjNoNldFYzBaMGxEUVdkSlEyOW5XVWRrYkdSR1FubGlNMEpzWTI1U05WSkhWbnBaTTBwd1kwaFNkbU50UVdkaFZ6VXdXbGhLZFZsWGVITmxVMEl3WW5sQ2JscFlVV2RaVTBKcldsaE9hbU50Ykhka1J6bDVTVWhTZGtsSGJIVmpNMUpvWWtkM2RWaEhOR2RKUTBGblNVTnZaMVpIT0dkWk0xWjZaRWM1ZEdGWWNHeEpTR1J2V1ZoUloyTklTblpqUjFaNVpFZHNiR041UW10aWVVSXpZVWRXZFVsSVVtOWFXR3RuV1ZoS2JFbEhaR3hrUTBKMlkybENlbHBZVVhOSlJ6a3lXbGhLZVdGWFVteFlSelJuU1VOQlowbERiMmRaUjJSc1pFWkNlV0l6UW14amJsSTFVa2RXZWxrelNuQmpTRkoyWTIxQmRVbEdVblpKUjA0eFl6TlNkbUpYYkRaYVUwSXdZVWRWWjJJelFqQmhWemwxWTNsQ2JXSXpTV2RaVTBKM1kyMDVkMXBZU2pCbFUzaGpZbWxCWjBsRFFXZExhVUp3WWxoQ2MxcFhNV3hpYmxGbldVZE9lVnBYUmpCYVZrSjVZak5DYkdOdVVqVlpRMEp6WVZkMGJFbElVbTloV0UwMldFYzBaMGxEUVdkSlEzQmpZbWxCWjBsRFFXZExhVUo2WkVkR01HRlhUV2RaTTBwc1dWaFNiRlZJU25aalIxWjVaRWhyYjJKdFJuUmFVM2RuWWpOQ01HRlhPWFZqZVd0blpURjRkVWxEUVdkSlEwRnhTVU5CWjJJelFqQmhWemwxWTNsQk9VbEZPV2xoYlZacVpFTTFhR016VG5CYU1qUnZZak5DTUdGWE9YVmplWGRuWlRJeE5WUXpRakJoVnpsMVQybENNR051Vm14bVUyczNXRWMwWjBsRFFXZEpRMjluU1VOQ2VtUllRbXhqYVRWcVkyMVdhR1JIVmxGamJUbDNXbGhLTUdWVGFIVlpWekZzVEVOQ2RtTklVbkJpTWpWNlMxUjBZMkpwUVdkSlEwRm5TMmxDT1ZoSE5HZEpRMEZuU1VOd1kySnBRV2RKUTBGblMybENRV0p0T1dwaU1uaHpXVmhDZWxwV2VIVkpRMEZuU1VOQmNVd3hlSFZKUTBGblNVaE9NRmxZVW5CWmVVSnFZMjFXYUdSSFZsRmpiVGwzV2xoS01HVlRhSFZaVnpGc1RFTkNkbU5JVW5CaU1qVjZTVVF3WjFwSFZtMVpXRlp6WkVaQ2VXSXpRbXhqYmxJMVVrZFdhbUpIUm5sWldGSndZakkwY0VsSWRHTmlhVUZuU1VOQlowbERRV2RNZVRoblZHMDVNRnBUZDJkak1teDFXVEpWWjJSSGFIQmplVUpxV1ZjMFoxbHRWV2RaTWtaellrZFdhMGxIU2pWSlNGSnZXbE5DWjFGSVFubGlNMEpzWTI1U05WbERRbXRhVjA1MlkyMUdNR0l6U1dka01taHdXVEpvWTJKcFFXZEpRMEZuU1VOQloweDVPR2RoV0UxbldUSkdjMkpIVm10SlIwcHNXbTA1ZVZwVFFtZGFiV3gxV1ZkNGNHVnRWbWRNUTBJeldsTkNiR0p1VGpGamJWVm5Zek5TZG1OdFJtNWFVMEpzWlVkc2VtUklUV2RhYlRsNVNVaENlV0l6UW14amJsSTFXRWMwWjBsRFFXZEpRMEZuU1VNNGRrbEhNV3hrUjBacldWaFNhRXhzZUhWSlEwRm5TVU5CWjBsRFFqQmhSMng2VEd3NWJHSnVUakZqYlZaRVlrZEdlbU14UW5saU0wSnNZMjVTY0ZwWVRXOUxWSFJqWW1sQlowbERRV2RKUTBGblpFZG9jR041TldaWk1uaG9Zek5PVVdOdE9YZGFXRW93WVZkV2VreHVUbXhrUTJoMVdWY3hiRXhEUW5aalNGSndZakkxZWt0VWRHTmlhVUZuU1VOQlowbERRV2RNZVRoblVrYzRaMkp0T1RCSlIyUnNZbTFXZVZsWVVteEpSMFoxU1VkR2Fsa3lWbnBqTWpsNVNVZHNiVWxJVW05YVUwSjNZMjA1TUdJelVqVmpSMVZuV1ZkNGVWcFhSbXRsVTBKdldWaE5aMkl5Tld4TVEwSjZZVmMxYWxwV2VIVkpRMEZuU1VOQlowbERRWFpNZVVKd1pFTkNNMkl6Vm5OYVEwSnBXbE5DYzJJelRqQkpSemt3WVVkV2VXUXliSHBhVTBKb1ltMVJaMlJIYUdoa1EwSXpZak5XYzFwRFFuVmFXRnBzWTJsQ2FWcFRRakJoUjFWblpGaE9iR05wWkhwSlIyeDFaRWRXZFdSSGJIWmlhblJqWW1sQlowbERRV2RKUTBGblRIazRaMU5YTlhwa1IxWm9Xa04zWjJReVZXZGFXR2gzV2xkT01FbElWbnBhV0VwNlNVaFNka2xIVG1oaVIzZG5XVWhLYkdOWVZteGpNMUpXWTBkU2FHUkhWbWRKU0ZKdldsY3hlbHBYZURKYVdFMW5XbTVLZG1KV2VIVkpRMEZuU1VOQlowbERRWFpNZVVJeFl6SldlVXhYVW14YWJXeDFXbGRSWjFsWFRtcGFXRTU2WWpOS2VreHBRazlpTTFKc1NVaFNiMWxZVVdkaFYxbG5aRWRvYkVsSVRqRmpSMVo1U1Vkb2FHTjVRbWhpYVVKb1dUSk9iR016VG5aamFVSXpXbE5DTTJGWGVITllSelJuU1VOQlowbERRV2RKUXpoMlNVaE9NR0ZYZUhOSlJ6a3lXbGhLTTJOdGJEQmFVMEp3WkVaNGRVbERRV2RKUTBGblNVTkNjRnBwUVc5aU0wSXdZVmM1ZFdONU5YVmlNRVpxV1RKV2VtTXlPWGxKU0hnNFNVaFNiMkZZVFhWalNFcDJaRWM1TUdWWVFteE1iV2hvWXpBNU0ySnNRbmxpTTBKc1kyNVNOVXRITldoaVYxVndTMU5DTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKNVdsaFNNV050TkRkWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRV2RKUTBGbldUSTVkV016VVdkaE1sWTFTVVF3WjJSSWJIZGFWemx0U1VjMWFHSlhWV2RRVkRBNVNVTmtlbVZYTVdsaU1uZHVTVVE0WjFVemJIUlpiVGx6UzBOclowOXBRbWRZTVRoclpUSTFhR0pYVmpsWlJIUmpZbWxCWjBsRFFXZEpRMEZuV1RJNWRXTXpVV2RhUjFaNldUTktjR05JVW5aamFVRTVTVWhTYjJGWVRYVmFNbFl3VlVoS2RtTkhWbmxrU0d4RldsaE9hbU50Ykhka1J6bDVTMGMxYUdKWFZYTkpSM1JzWlZOM1oySXpRakJoVnpsMVkzbHJOMWhITkdkSlEwRm5TVU5CWjBsSGJHMUpRMmhyV2xoT2FtTnRiSGRrUnpsNVNVTkZPVkJUUWpGaWJWSnNXbTFzZFZwWFVYQkpTSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxGT1dsaGJWWnFaRU0xYTFwWFduQmliVlpSWTIwNWQxcFlTakJsVTJnd1lVZHNla3h1UW5saU0xSjJaRWhzZDFwVGQyZGliVVowV2xOM1oxcEhWbnBaTTBwd1kwaFNkbU5wYXpkWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRamxZUnpSblNVTkJaMHg1YjNGWVJ6Um5TVU5CWjBsRGIyZFZiVll3WkZoS2RXTjVRbWhKU0VKNVlqTkNiR051VWpWSlIxSnNZekpPZVdGWVFqQmlNMGxuWkVjNFoxbHRWV2RhUjFadFlWYzFiRnBEUW5aaWFVSXdZVWRWWjFveWJESmFWelJuWW0xR2RGcFhVV2RqU0VwMlkwZFdlV1JJYTNWWVJ6Um5TVU5CWjBsRGIyZFRWMWxuWW0wNFoxcEhWbnBaTTBwd1kwaFNkbU5wUW5CamVVSjVXbGhTTVdOdE5XeGFRM2RuWkVkb2JFbElRbmxpTTBKc1kyNVNOVWxJWkhCaVIzZG5ZbTA1TUVsSFNteFpNamwwV2xOQ2FHSnBRbWhaTWs1c1l6Tk9kbU5wTldOaWFVRm5TVU5CWjB0cFFrZGlNMGxuV2xob2FHSllRbk5hVTNoalltbEJaMGxEUVdkTGJIaDFTVU5CWjBsRFFYRkpRMEZuV1RKNGFHTXpUV2RVV0d4R1lrZFdkRnBYTlRCSlIxWTBaRWRXZFZwSVRXZFVSMnd3VWxkNGJHSlhWblZrUTBJM1dFYzBaMGxEUVdkSlEyOW5TVU5CWjBsSVRqQlpXRkp3V1hsQ2JscFlVbEZqYlRsM1dsaEtNR1ZWVW14ak1rNTVZVmhDTUdJelNXOWliVVowV2xOM1oyRXlWalZNUTBKMlkwaFNjR0l5TlhwTFUwSTNXRWMwWjBsRFFXZEpRMjluU1VOQlowbERRV2RaTWpsMVl6TlJaMXBIVm0xWldGWnpaRVZTYkdNeVRubGhXRUl3WWpOSloxQldlSFZKUTBGblNVTkJjVWxEUVdkSlEwRm5TVU5CWjBsRFFucGtXRUpzWTJrMWJscFlVbEZqYlRsM1dsaEtNR1ZWVW14ak1rNTVZVmhDTUdJelNXOWliVVowV2xOM1oyRXlWalZNUTBKMlkwaFNjR0l5TlhwTFZIUmpZbWxCWjBsRFFXZExhVUZuU1VOQlowbERRbXBpTWpWNlpFTkNlbHBZVWpCYVdFbG5VRk5DYTFwWFdtaGtWM2d3VWtkV2Vsa3pTbkJqU0ZKMlkyazFlbHBZVVRkWVJ6Um5TVU5CWjBsRGIyZEpRMEZuU1VOQloyTnRWakJrV0VwMVNVaDBZMkpwUVdkSlEwRm5TMmxCWjBsRFFXZEpRMEZuU1Vka2JHUkViMmRhUjFadFdWaFdjMlJGVW14ak1rNTVZVmhDTUdJelNYVmFNbFl3VEVaNGRVbERRV2RKUTBGeFNVTkJaMGxEUVdkSlEwRm5ZekpXTUV0SVdtaGlTRlpzUzFOQ04xaEhOR2RKUTBGblNVTnZaMGxEUVdkSlEwRm5TVU5CWjBsSVRteGtTRkpzWTJrMWFsbFhlSE5MU0ZKdllWaE5jMGxJV21oaVNGWnNTMVIwWTJKcFFXZEpRMEZuUzJsQlowbERRV2RKUTBGblNVTkJaMHg1T0dkWk0xWjZaRWM1ZEVsSFJtcGtSMngyWW1rMVkySnBRV2RKUTBGblMybEJaMGxEUVdkSlEwRm5TVWd3YzFoSE5HZEpRMEZuU1VOdlowbERRV2RKUTBGblNVTkNhbUl5TlcxaFYyUXhZMjFHYVdKSFZUWkpTRko1WkZkVmMxaEhOR2RKUTBGblNVTnZaMGxEUVdkSlEwRm5TVU5DYkdKdVZuUmFXRXBvV1cxNGJFOXBRakJqYmxac1dFYzBaMGxEUVdkSlEyOW5TVU5CWjBsRFFXZG1WbmgxU1VOQlowbERRWEZKUTBGblNVTkNPVmhITkdkSlEwRm5TVU52WjBsRFFqbFlSelJuU1VOQlowbERjR05pYVVGblNVTkJaMHRwUWtGaWJUbHFZako0YzFsWVFucGFWbmgxU1VOQlowbERRWEZNTVhoMVNVTkJaMGxJVGpCWldGSndXWGxDYmxwWVVsRmpiVGwzV2xoS01HVlZVbXhqTWs1NVlWaENNR0l6U1c5aWJVWjBXbE4zWjJFeVZqVk1RMEptWWpOQ01HRlhPWFZqZVd0blpURjRkVWxEUVdkSlEwRm5TVU5DZVZwWVVqRmpiVFJuWlRGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkTWVUaG5aRWhPYzJGWE5UQlBiVkp3WXpKR2FXSkhWWFJpYlZZMFpFTXhjMkZYTld4UGJUVjJURmRHZFdWVFFuVmllVUo2WlZjeGFXSXlkMmRoVnpSbllWYzFhMXBZYUdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1Vka2JHUkRaM0JKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEo1V2xoU01XTnROR2RrUjJod1l6RjBjbHBZYkdSUE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyWlRlR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhPYkdSRGFESlpWM2d4V2xOcloyVXhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFRuWmliazR3U1VjNWMxcEdXbWhpU0Zac1NVUXdaMlJIYUhCak1YUjFXVmN4YkZoVWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUWpCaFIyeDZWekowYkdWV01HZFFVMEl5V1ZkNE1WcFVkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFqQmhSMng2VEd3NWVWcFlSakZhV0U0d1ZsaENhMWxZVW14TFJ6Vm9ZbGRWYzBsSE9YTmFSbHBvWWtoV2JFdFVkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWd3YzFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKcVlqSTFiV0ZYWkRGamJVWnBZa2RWTmtsSVVubGtWMVZ6V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUW14aWJsWjBXbGhLYUZsdGVHeFBhVUl3WTI1V2JGaEhOR2RKUTBGblNVTkJaMGxJTURkWVJ6Um5TVU5CWjJaV2VIVkpRMEZuU1VNNGNVdHNlSFZKUTBGblNVTkJjVWxHU214a1NGWjVZbTVOWjJSSGFHeEpTRUo1WWpOQ2JHTnVValZKUnpsM1pFZHNkbUp1VFdkWldFNTZZakpPY0ZsWVVteGFRMEl6WVZoU2IwbElVbTlhVTBKdVlWaGFiR0pwUW5kamJUbDNXbGhLTUdWVE5XTmlhVUZuU1VOQlowdHBRbFZoUjFaNldsTkNkbU5JVW5CaU1qVjZTVWRHZVZwVFFtdGFWMXB3WW0xV2EwbElaSEJrUjJkbldWTkNVV050T1hkYVdFb3daVlZTYkZreWVHaGpiVVl3WVZjNWRVbElXbkJaVTBJd1lVZFZaMWxJUW5saU0wSnNZMjVTY0ZwWVRtZFlSelJuU1VOQlowbERiMmRpTWtweFdsZE9NRWxIT1hsSlNGSnZXbE5DWjFGSVFubGlNMEpzWTI1U05WbERRbXRhVjA1MlkyMUdNR0l6U1dkWlZ6VnJTVWRHZVZwVFFubGFWMlJ3WXpOU2JHTnRWbXRKUjJ4MVdFYzBaMGxEUVdkSlEyOW5XVWRPZVZwWFJqQmFWa0o1WWpOQ2JHTnVValZMUXpSMVRHbHNaMHhzZUhWSlEwRm5TVU5CY1ZoSE5HZEpRMEZuU1VOdloxUnRPVEJhVTNkblpFZG9jR041UW5SYVdGSnZZakpSWjJNeWFIWmtWM2hyU1VkS2JFbEhUblppYms1d1drZFdlVnBYVVdkWVEwcHRZVmMxYUdKR2QybEpSMFoxV2tOQ2RXSXpVV2RpTTFwc1kyNUtjRnBIVW14aWFUUm5Wa2M1WTJKcFFXZEpRMEZuUzJsQ2FtUllUakJpTWpGd1pXMVZaMlJIYUd4SlJ6bDNaRWRzZG1KdVRXZGFiVGw1U1VkRloxb3liREphVnpSblkwaEtkbU5IVm5sa1NHdHpTVWM1TWxwWVNubGhWMUpzU1VkQ2FtTnRWbWhrUjFaUlkyMDVkMXBZU2pCbFYwRjFXRWMwWjBsRFFXZEpRM0JqWW1sQlowbERRV2RMYVVKQlltMDVhbUl5ZUhOWldFSjZXbFo0ZFVsRFFXZEpRMEZ4U1VWQ2JXRlhOV2hpUm5oMVNVTkJaMGxEUVhGTU1YaDFTVU5CWjBsSVRqQlpXRkp3V1hsQ2JscFlVbEZqYlRsM1dsaEtNR1ZWT1hka1IyeDJZbTVOYjJKdFJuUmFVMnRuWlRGNGRVbERRV2RKUTBGblNVTkNlVnBZVWpGamJUUm5aRWRvY0dONU5XWlpNbmhvWXpOT1VXTnRPWGRhV0Vvd1lWZFdla2xEV1cxSlNGSnZZVmhOZFZneVRuTlpXRTU2VlVoS2RtTkhWbmxrUjJ4c1kzazFibHBZVVc5aWJVWjBXbE5yWjJaSWVHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZFNiRnB0UmpGaVNGSlJZMjA1ZDFwWVNqQmxWVkpzV1RKNGFHTnRSakJoVnpsMVR6RjRkVWxEUVdkSlNERmpZbWxCWjBsRFFYWkxhWEJqWW1sQlowbERRV2RMYVVKRVkyMVdhR1JIVm5wSlNFSjVZak5DYkdOdVVqVkpSMFpxV1RKV2VtTXlPWGxqZVVKdFlqTkpaMk50Vm01aFdFNHdXbGhLYkZwRFFuZGpiVGwzV2xoS01HRlhWbnBKUjBaMVdrTkNiR0p1VGpGamJWWjZXRWMwWjBsRFFXZEpRMjluV1ZjMU5VbElUakZqUjFaNVdUSjRhR016VG14amVVSm9ZMjFWWjFsWGVIcGllVUp0WVZjMWFHSkhiRFphVjFGMVdFYzBaMGxEUVdkSlEyOW5VVWMxZGxreU9YTmlSMFozWXpKV1kySnBRV2RKUTBGblMyazVZMkpwUVdkSlEwSjZaRWRHTUdGWFRXZGFiV3gxV1ZkNGNHVnRWVzlMVTBJM1dFYzBaMGxEUVdkSlEwRm5TVU00ZGtsSFduQmliVVp6WVZod2JFbEhSblZsVTBKNlpGaENiR050VG5OWldFNTZXbGhPWTJKcFFXZEpRMEZuU1VOQloxa3lPWFZqTTFGbll6TldkMXBZU2tSa1J6bDVTVVF3WjFReVNuRmFWMDR3VEcxa2JHUkdRbmxpTTFKMlpFaHNkMXBWT1cxTFNGSnZZVmhOY0U4eGVIVkpRMEZuU1VOQlowbERRbkJhYVVGdlNWaE9NV05IVm5sUk0xSjJZMmsxYjFsWVRsQmtNalZSWTIwNWQxcFlTakJsVTJodFlWYzFhR0pIYkRaYVYxRndTMU5DTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKNlpGaENiR05yVGpCaU0wbDFXbTFzZFZsWGVIQmxiVlZ2UzFSMFkySnBRV2RKUTBGblNVTkJaMlpXZUhWSlEwRm5TVU5CWjBsRFFqQmhSMng2VnpKYWNHSnRSbk5oV0hCc1drWXdaMUJUUWpCamJsWnNUekY0ZFVsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYkRsc1ltNU9NV050VmtSaVIwWjZZekZDZVdJelFteGpibEp3V2xoTmIwdFVkR05pYVVGblNVTkJaMGxEUVdkTWVUaG5ZVmMxY0dSSGJHaGlSMncyV2xOQ1RsbFlRV2RqUnpsM1pGZDRhR1JIVm10SlIyeDFTVWM1YVdNeVZubGtiVlpyVVZoU01HTnRiR2xrV0ZKc1l6RjRkVWxEUVdkSlEwRm5TVU5DTUdGSGJIcE1iRGxvWkVoU2VXRlhTakZrUjFaVllqRkNlV0l6UW14amJsSTFWRmRHZDBsRU1HZGliVll6U1VVeGFHTkRaM0JQTVhoMVNVTkJaMGxEUVdkSlEwRjJUSGxDZEZsWGRHeEpSMFoxWlZOQ2QyTnRPWGRhV0Vvd1lWZFdlbGhITkdkSlEwRm5TVU5CWjBsRE9IWkpSVFYyWkVkVmMwbEhPWFZpU0d0blkwaEtkbGt5Vm5wamVVSmpTVzA1TTJKc2QybEpTRUo1WWpOQ2JHTnVVbkJhV0Uxbll6SnNkVmt5Vldka1IyaHdZM2xDYkdKSFZuUmFWelV3U1Voa2NHSkhkMmRoVnpWdldsaEtjR1JHZUhWSlEwRm5TVU5CWjBsRFFYWk1lVUpvWW01cloyTklTblpqUjFaNVpFZHNiR041UW10YVYxcHdZbTFXYTBsSE9YVkpTRkp2V2xOQ2VtUllRbXhqYTA1eldWaE9la3hEUW1oaWJWRm5XbTFzZFZsWGVIQmxiVVl3WVZjNWRVbEhWblZqTTFaNVdsaE9ZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZGtSMmhzU1VkV2RXUkhiSGxhVTBKM1kyMDVNR0l6VWpWalIxVm5XVEpvYUdGWE5HZGhXRTFuV20xc2RWbFhlSEJsYlZaclRHeDRkVWxEUVdkSlEwRm5TVU5DY0ZwcFFXOWtSMmh3WTNrMWIxbFlUbEJrTWpWUlkyMDVkMXBZU2pCbFUyaExWVEJPZG1KWVFuQmlSMVo1V0ROS2JHSnRSblJhVmtKNVlqTkNiR051VWpWTFEyUjNZMjA1ZDFwWVNqQmhWMVo2U25sM1oyUkhhSEJqZVd0d1MxTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEpxWWpJMWVtUkRRbmRqYlRsM1kzbEJPVWxJVW05aFdFMTFZMGhLZG1OSFZubGtSMnhzWTNwMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlF6aDJTVWhPTVdOSVFuWmpibEZuWXpOc2RGbHRPWE5qZVVKd1ltbENkMk50T1hkYVdFb3dZVmRXZWtsRGFFcFNWRVY0U1VkU2RscFlUV2RpYlRrd1NVaE9NV05JUW5aamJsRm5aRWRvY0dONWJHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZE9kbUp1VGpCSlNFSjVZak5DVEZwWWJIcEpSREJuVnpGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU0wZFV4ck9XbGhiVlpxWkVNMWJscFlVbEJrTWpWUlkyMDVkMXBZU2pCbFZUVm9ZbGRXZWt0SVFubGlNMEo2UzFONFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CZFV4cE5HOWtTR3gzV2xjNWJVbEZPV2xoYlZacVpFTTFibHBZVWxCa01qVlJZMjA1ZDFwWVNqQmxWazQxWWxkS2RtSklUV2RRVkRBNVNVTmtiV1JYTldwa1IyeDJZbWxqY0VsRU9XTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5WREpLY1ZwWFRqQk1iV1JzWkVVNU0ySnNRbmxpTTBKc1kyNVNOVlV6YkhSWmJUbHpZM2xvZDJOdE9YZGplV3RuVDJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtSllWbmgxU1VOQlowbERRV2RKUTBGblNVTkJaMWhVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VNNGRrbEdVbTloV0UxbldtMDVlVXd5T1cxSlIyeDZTVWM1Y2tsSFNteFpNa1l4WXpKVloyTklTblpqUlhSc1pWaE5aMkZZVFdkWlZ6Um5XVmhLZVZsWWJHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZGFkbU5wUVc5Wk1qbDFZek5SWjJORFFuWmFhVUozWTIwNWQxTXlWalZqZVd0blpURjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VNNGRrbEhOWFprUjFWelNVaFdlbHBUUW5aYWFVSm5XVmMxTlZsRFFuQmplVUpyWkZkVloyUkhPR2RXU0d4M1dsWk9lV0ZZUWpCSlIzaG9XVEp6WjJJeVdXZGpNMVozWTBjNWVXUkRRbTFpTTBsbll6TnNkRmx0T1hOSlIyeDFXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblRIazRaMkZYTld0YVdHZG5aRWhzZDFwWVRtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVhaTWVVSXdZeko0Y0dKdVVUWmFSMng2V1ZkS2MxcFRNWFZhV0dnd1RGZDRjR0p0VlRaaWJUaDBXVmMxTlVsSE5YWkpTRTQxWWxkS2RtSkRRbkJpYVVKd1ltMVNiR1ZHZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElVbTloV0UxMVdUTktiRmxZVW14VlNFcDJZMGRXZVdSSWEyOWpRM2RuWTBoS2RtTklUbUpqUmpCd1R6RjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZG1WbmgxU1VOQlowbERRV2RKUTBJNVdFYzBaMGxEUVdkbVZuaDFTVU5CWjBsRE9IRkxiSGgxU1VOQlowbERRWEZKUmtwc1pFaFdlV0p1VFdka1IyaHNTVWhDZVdJelFteGpibEkxU1VjMWFHSlhWV2RhYlRsNVNVaFNiMXBUUW01aFdGcHNZbWxDYUdSSVVubGhWMG94WkVkVloxbEhOV2hpVjFablRHeDRkVWxEUVdkSlEwRnhTVVZDZFdJeVRuWmlSM2hvWTBoT2JGaEhOR2RKUTBGblNVTnZkbGhITkdkSlEwRm5Zek5TYUdSSGJHcEpSamxvWkVoU2VXRlhTakZrUjFaUFdWY3hiRkp0T1hsVlNFcDJZMGRXZVdSSWEyOWliVVowV2xOM1oySXpRakJoVnpsMVkzbHJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFtcGlNalY2WkVOQ2FHUklVbmxoVjBveFpFZFZaMUJUUW5aalNGSndZakkxZWt4dFJqQmtTRXB3V1c1V01GcFVkR05pYVVGblNVTkJaMGxEUVdkamJWWXdaRmhLZFVsSFJqQmtTRXB3V1c1V01GcFRRVGxRVkRCbldtMUdjMk15VldkUU1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyUlhOV3RhVjFwd1ltMVdhMGxFY0dOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOb01HVllRbXhpTWxsbldWaFNNR050Ykdsa1dGSnNTVVF3T1ZCVFFXNWpNMUo1WVZjMWJrcDVRUzlZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZFpXRkl3WTIxc2FXUllVbXhKUkhCalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZ2WkVoc2QxcFhPVzFKUnpWb1lsZFZaMUJVTURsSlEyUjZaRWhLY0dKdFkyNUpSRGhuWW0xR2RGcFROVEJpTUhoMlpESldlVkV5Um5wYVUyZHdTVVJ2WjJSWE5XdGFWMXB3WW0xV2EwdFRhemRZUnpSblNVTkJaMlpXZUhWSlEwRm5TVU00Y1V0c2VIVkpRMEZuU1VOQmNVbEdTbXhrU0ZaNVltNU5aMlJJU2pGYVUwSndXbWxDYUVsSVFubGlNMEpzWTI1U05VbElUbTlpTTFaeldrTkNlVnBZUmpGYVdFNHdTVWRHZFVsSVZuZGFSMFl3V2xNMVkySnBRV2RKUTBGblMybENSRmxYZUhOYVYxRm5aREpvYkdKcFFtaEpTRUo1WWpOQ2JHTnVValZKU0Zwb1lraFdiRWxIYkhwSlNFNXNaRU5DYUdKdFVXZGtXRTVzWTNsQ01HRkhWV2RaUjJob1l6Qk9iMWxYTlc1YVYxSm5XRWMwWjBsRFFXZEpRMjluWWpOQ01HRlhPWFZKUjFwMlkybENNR0ZIVldkalNFcDJZMGRXZVdSSWEyZGhWMWxuWTBoS2JHTXlWblZrUTBKMlkybENhRWxJVGpCamJXeHFaRU5DY0ZwSFZuVmtSMnd3WlZOQ2FtRkhWbXBoZVRWalltbEJaMGxEUVdkTGFVSkJZbTA1YW1JeWVITlpXRUo2V2xaNGRVbERRV2RKUTBGeFRERjRkVWxEUVdkSlNFNHdXVmhTY0ZsNVFtWmtiVVp6WkZkV1NWbFlUa1JoUjBaMVdqSldhMHRJV21oaVNGWnNURU5DZG1KSFVYTkpSMmhvWXpCT2IxbFhOVzVhVjFGblVGTkNkV0l6VWtaaldGWm9Za05yWjJVeGVIVkpRMEZuU1VOQlowbERRbmxhV0ZJeFkyMDBaMkZIUm5wUk1taG9ZbTFrYkZwRGFESlpWM2d4V2xOM1oySXllR3RMVkhSalltbEJaMGxEUWpsWVJ6Um5TVU5CWjB4NWIzRllSelJuU1VOQlowbERiMmRWYlZZd1pGaEtkV041UWpCaFIxVm5ZMGhLZG1OSFZubGtTR3RuWkcxR2MyUlhWV2RhYlRsNVNVaFNiMXBUUW01aFdGcHNZbWxDYUdSSVVubGhWMG94WkVkVloyUnRSbk5rVjFWMVdFYzBaMGxEUVdkSlEyOW5VVEpHYzJKSFZtdEpTRnB3V1ZOQ01HRkhWV2RaUjBZd1pFaEtjRmx1VmpCYVZVNXZXVmMxYmxwWFVrUlpWM2h6V1cxR2FtRXlRV2RaVnpWclNVaFdlbHBZVFdka1IyaHNTVWhDZVdJelFteGpibEkxU2pOT1kySnBRV2RKUTBGblMybENaMWt5T1hWa2JWWjVaRWRXZVZsRFFuWmphVUpuV1RJNWRXUnRWbmxrUjFaNVRHMWFlV0l5TVVKa1NGSjVZVmRLTVdSSFZtZEpTRUo1WWpOQ2JHTnVValZKUnpsM1pFZHNkbUpwTldOaWFVRm5TVU5CWjB0cFFrRmliVGxxWWpKNGMxbFlRbnBhVm5oMVNVTkJaMGxEUVhGTU1YaDFTVU5CWjBsSVRqQlpXRkp3V1hsQ1ptTklTblpqUjFaNVpFaHNWMWxYZURGYVZWcDVZakl4UW1SSVVubGhWMG94WkVkVmIyUnRSbk5rVjFWelNVYzVkMlJIYkhaaWJrMXdTVWgwWTJKcFFXZEpRMEZuU1VOQloxa3lPWFZqTTFGblpFaHNkMXBUUVRsSlJ6bDNaRWRzZG1KdVRYVmtTR3gzV2xSMFkySnBRV2RKUTBGblNVTkJaMWt5T1hWak0xRm5XVEk1ZFdSdFZubGtSMVo1U1VRd1oySXpRakJoVnpsMVkzazFhbUl5TlRKYVdFb3dXbGhKWjJaSWQyZGFSMVp0V1ZoV2MyUkZUblppYmxwc1kyNVNiR05xZEdOaWFVRm5TVU5CWjBsRFFXZFpNamwxWXpOUloxcHVTblppVlVZd1pFaEtjRmx1VmpCYVUwRTVTVU5vTUdWWVFteGlNbGxuV1RJNWRXUnRWbmxrUjFaNVNVUXdPVkJUUVc1YWJsWjFXVE5TY0dJeU5HNUpSRGhuV1RJNWRXUnRWbmxrUjFaNVNVUnZaMWt5T1hWa2JWWjVaRWRXZVV4dFdubGlNakZDWkVoU2VXRlhTakZrUjFWd1R6RjRkVWxEUVdkSlEwRm5TVU5DZVZwWVVqRmpiVFJuV201S2RtSlZSakJrU0Vwd1dXNVdNRnBUUVM5SlIxcDVZakl4UW1SSVVubGhWMG94WkVkVmIyUnRSbk5rVjFWelNVaFNOV05IVlhCSlJHOW5aRzFHYzJSWFZUZFlSelJuU1VOQloyWldlSFZKUTBGblNVTTRjVXRzZUhWSlEwRm5TVU5CY1VsR1NteGtTRlo1WW01TloyUkhhR3hKUjBZd1pFaEtjRmx1VmpCYVUwSXlXVmQ0TVZwVFFtMWlNMGxuWkVkb2JFbEhaSEJrYlZaMVNVaENlV0l6UW14amJsSTFTVWhhYUdKSVZteE1hVUpLV21sQ01HRkhiSHBZUnpSblNVTkJaMGxEYjJkamJWWXdaRmhLZFdONVFqRmliVkpzV20xc2RWcFhVWE5KU0ZKdldsTkNkMk50T1hkYVdFb3daVk5DTTJGWGVITkpRM0IxWWpOUmNVbEhTbXhKU0Vwc1dtMTRiRmt6VW14YVEwSXdZbmxDYUdKcFFtaGtTRko1WVZkS01XUkhWWFZZUnpSblNVTkJaMGxEYjJkVFYxbG5aRWRvY0dONVFubGFXRkl4WTIwMWVrbEhOVEZpUjNkelNVaFNiMXBUUW1oa1NGSjVZVmRLTVdSSFZXZGtNbXh6WWtOQ2FWcFRRbmxhVnpGMlpHMVdhMHhEUW5aa1IyaHNZMjVrY0dNeVZXZGtSMmhzV0VjMFowbERRV2RKUTI5bldWaFNNR050Ykdsa1dGSnNTVWhrY0dKSGQyZFpiVlZuWXpKV01FbElVblpKU0ZKdldsTkNNbGxYZURGYVV6VmpZbWxCWjBsRFFXZExhVUpWWVVkc2VrbElWbnBhV0UxblpFZG9iRWxJUW5saU0wSnNZMjVTTlVvelRXZFpTRXBzV20xNGJGa3pVbWRKUjBaMVdrTkNaMlJJYkhkYVV6VXdZakJHTUdSSVNuQlpibFl3V2xkQloyTklTblpqUjFaNVpFaHJaMkl6UWpCaFZ6bDFZM2sxWTJKcFFXZEpRMEZuUzJsQ1FXSnRPV3BpTW5oeldWaENlbHBXZUhWSlEwRm5TVU5CY1V3eGVIVkpRMEZuU1VoT01GbFlVbkJaZVVKbVkwaEtkbU5IVm5sa1NHeFhXVmQ0TVZwV1VuWlJXRkl3WTIxc2FXUllVbXhMU0Zwb1lraFdiRXhEUW5aalNGSndZakkxZWt0VFFqZFlSelJuU1VOQlowbERRV2RKUjJ4dFNVTm9kbU5JVW5CaU1qVjZURzVLYkZwdGVHeFpNMUZuVUZRd09VbElWblZhUjFadFlWYzFiRnBEYTJkbE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyTnRWakJrV0VwMVR6RjRkVWxEUVdkSlEwRm5TVU5DT1ZoSE5HZEpRMEZuU1VOQlowbEhUblppYms0d1NVaFNOV05IVldkUVUwSjJZMGhTY0dJeU5YcE1ibEkxWTBkVk4xaEhOR2RKUTBGblNVTkJaMGxIVG5aaWJrNHdTVWRPZG1KdVdteGpibEpzWTJsQk9VbEhPWGRrUjJ4MlltNU5kVmt5T1hWa2JWWjVaRWRXZVU4eGVIVkpRMEZuU1VOQlowbERRbXBpTWpWNlpFTkNNR0l3UmpCa1NFcHdXVzVXTUZwVFFUbEpSMDUyWW01YWJHTnVVbXhqYVVGdFNtbENhbUl5TlRKYVdFb3dXbGhKZFdSSE9VSmtTRko1WVZkS01XUkhWV2RtU0hoalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSFVteGFiVVl4WWtoU1JHSXlOVEphV0Vvd1dsaEpkV1JIT1VKa1NGSjVZVmRLTVdSSFZUZFlSelJuU1VOQlowbERRV2RKU0Vwc1pFaFdlV0pwUWpCaU1FWXdaRWhLY0ZsdVZqQmFVMmd5V1ZkNE1WcFRkMmRrU0d4M1dsTnJOMWhITkdkSlEwRm5abFo0ZFVsRFFXZEpRemh4UzJ4NGRVbERRV2RKUTBGeFNVWkNiR050V25aamJURjZTVWRXYzFwWE1XeGlibEZuWVZjMWNHUkhiR2hpUjJ3MldWaFNjR0l5TkhWSlJVbzFTVWRTYkZwdFJqRmlTRkZuV1RKR2QyUklWbmxhV0UxbldWYzFOVWxJUW5sYVV6RjZXbGhSWjJSdFJuTmtWMVo2U1VkYWRtTnNlSFZKUTBGblNVTkJjVWxJU214YU1teDZaRWRXZVZwWFVXZGpTRXAyWTBkV2VXUkhiR3hqZVRWalltbEJaMGxEUVdkTGFUbGpZbWxCWjBsRFFuQmliV3d3WVZkR2MyRlljR3hMUTJ0blpURjRkVWxEUVdkSlEwRm5TVU5DTUdGSGJIcE1iRGw2V1ZoYWJGTlhOWHBrUjBaMVdUSldVV050T1hkYVdFb3dZVmRXZWt0RGF6ZFlSelJuU1VOQlowbERRV2RKUXpoMlNVZFdkV016Vm5sYVdFMW5XbTFzZVdNelVXZGtXRUpyV1ZoU2JFbElaSEJpUjNkbldXMVZaMWt5UmpGYU1tZ3dTVWRLTlVsSFJuVkpSMVpvWTIxNE5VbEhSbXBaTWxaNlkzbENkbHBzZUhWSlEwRm5TVU5CWjBsRFFYWk1lVUpuWkZoQ2ExbFlVbXhSTWpsMFkwZDRiR1JIVm1kWVJ6Um5TVU5CWjBsRFFXZEpTRkp2WVZoTmRWZ3pTbXhqV0Zac1l6TlNWbU5IVW1oa1IxVnZTMVIwWTJKcFFXZEpRMEk1V0VjMFowbERRV2RNZVc5eFdFYzBaMGxEUVdkSlEyOW5VbTFzTkZwWVRXZFpWelUxU1VoQ2VXSXpRbXhqYmxKd1dsaE5aMk15VmpCSlJ6bDFTVWhTYjFwVFFuQmliazR3V1ZjMWFscFRRbWxhVjFwMlkyMVZaMlJZUW01amJVWnJXbE5DTUdGWE1XeE1iSGgxU1VOQlowbERRWEZKUlRrd1lVZFdlV1F5YkhwYVUwSXdZVWRXZWxwVFFqTmlNMVp6V2tOQ2VtRkhSbXRpTTJOblpFZG9iRWxIUm1wWk1sWjZZekk1ZVVsSFJuVmFRMEpwWTIxV2FHRjVRakJoUjFaNldsTkNkMk50T1hkYVdFb3dZVmRXZWt4c2VIVkpRMEZuU1VOQmNVbEdVbTlhVTBKM1kyMDVkMXBZU2pCaFYxWjZTVWRHZVZwVFFucGtSemw1V2xkUloyRlhOR2RaVTBKT1dWaEJaMlF5YUhCWk1tZG5ZVmhOWjJOSGVHaGxWMVpyU1VkS2FGa3ljMmRaVjFvd1dsaEpaMlJIYUd4WVJ6Um5TVU5CWjBsRGIyZFpNamwxWXpOU2VXUlhUakJpTTBsblkyNVdkV041TkdkVWJUa3dXbE4zWjJJeU5HZGtiVlo1WlZOQ2RtSkhVV2RrYlZaNVl6SnNkbUp1VFdkaU1sbG5WVEpHYlZsWVNuQkpRMmM0VUZScmNFbEhPWGxKUlU1dlkyMDVkRnBXZUhWSlEwRm5TVU5CY1VsRFp6aFFWRkY0UzFOM1oyTklTblpqUjFaNVpFZHNiR041UW1wamJWWm9aRWRXYTBsSFduWmphVUoxV1ZoU2NHUnRWV2RqUjNob1pFZGFkbU50TUdkalNFcDJZMGRXZVdSSGJHeGplVUp6WVZkMGJFbERhR2RoVjFKblNVYzVlVmhITkdkSlEwRm5TVU52WjFsSE5XaGlWMVpuUzFOQ2RGbFlhMmRpYlRrd1NVZG9hR1J0VldkYVIxWnRXVmhXYzJSRFFqSlpWM2d4V2xoTloyTXlWakJKUjJ4MVNVaFNiMXBUUW14aVIxWjBXbGMxTUVsSFRuWmliazR3WTI1V2FtUkhPWGxNYVVKUVlteDRkVWxEUVdkSlEwRnhTVWhTYjFwWVRteEpSMHA1WWpOa2VscFlTbnBKUnpWb1pFZHNNbHBUUW5kamJUbDNXbGhLTUdGWFZucEpSMFozWTBkV2FHTnBRblppYVVKd1ltNU9NRmxYTldwYVdFMW5XVmMxYTBsSVVtOWFXRXBzV20wNWVWcFRRakJoUjFad1kyeDRkVWxEUVdkSlEwRnhTVWRTYkZwdFJqRmlTRkZuWkcxR2MyUlhWV2RrTW14ellrTkNkbVJ0Vm5sa00wcHdaRWRWWjFsWE5UVkpSMVp6V2xjeGJHSnVVV2RhUjFadFdWaFdjMlJEUVc5YVV6VnVUR2xDY0ZwcFFqQmhSMVZuV2xkNGJHSlhWblZrUTBKNldsaFNlbGhITkdkSlEwRm5TVU52WjJSSGFIQmplVFZ3V2tOQk9VbERaSEJhUTJObllWYzBaMlJIYUd4SlIwNTJZbTVPTUdOdVZtcGtSemw1VEVOQ01HRkhWV2RLTW14clNubENNMkZYZUhOSlIwcHNXVEk1ZEZwVFFXNUtlVUo2WVZjMWFscFRRakJoUjJ4NlNVZHNlbGhITkdkSlEwRm5TVU52WjJSSGFHeEpSelZvWkVkc01scFRRbmRpUjBZd1dtMDVlV0pUUW10YVYxcG9aRmQ0TUV0VE5XTmlhVUZuU1VOQlowdHBPV05pYVVGblNVTkNabU15UmpKYVZXeDFZek5TYUdKdFRteFZTRXAyWTBkV2VXUkhiR3hqZVdkd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZFdXRTVzU1VkYWRtTnJWbWhaTW1kbll6STRaMlJIYUhCamVVSXpZak5LY21ONVFteGtiVloxU1Vkc2JVbEhXblpqYVRsMldtbENjMkl5T1hkamVVSm9ZMjFWWjFreU9YUmpSMnh6V2xkUloyUkhPR2RhYlRsNVNVZDRkbUl6UW5wWVJ6Um5TVU5CWjBsRFFXZEpRemgyU1VkV05HTkhWbXBrUjJ4MVdubENhR051U21obFdFNWpZbWxCWjBsRFFXZEpRMEZuWkVkb2NHTjVOV3BpTWpWNlpFaEtNVmt6VW5aamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloweHNPV3BpUjBaNll6RkNlV0l6UW14amJsSndXbGhOZFZwdE9YbFNWMFpxWVVObmIxZ3pXWE5KU0VGd1NVUXdLMGxJZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1Vkc2JVbERhREJoUjJ4NlRHMW9hR013T1ROaWJFSjVZak5DYkdOdVVqVkxTRUZ3UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjFreU9YVmpNMUZuWkcxR2MyUlhWV2RRVTBJd1lVZHNlbGN6UW1SUE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUjFKc1lrZFdNRnBUUWpCaFIyeDZWek5DWkU4eGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIYkcxSlEyZG9aRWRvY0dONU5XWmhWelY2WkVkR2RWa3lWbEZqYlRsM1dsaEtNR0ZYVm5wTFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJVW05aFdFMTFXREpzZFdNelVtaGliVTVzVlVoS2RtTkhWbmxrUjJ4c1kzbEJPVWxITld4a2VVSk9XVmhCYjB0VWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUWpsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RrUjJod1kzazFabUZYTlhwa1IwWjFXVEpXVVdOdE9YZGFXRW93WVZkV2VreHVUbXhrUTJoM1RFTkNNbGxYZURGYVUyczNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRamxZUnpSblNVTkJaMGxEUVdkSlNEQndUekY0ZFVsRFFXZEpTREZqWW1sQlowbERRWFpMYVhCalltbEJaMGxEUVdkTGFVSkNZMGhDYzJGWFZucEpTRUo1V2xoYWNHSXpWbnBpU0d0bll6SkdNbHBYVVdkaFZ6VjZaRWRHZFZreVZXZGpTRXAyWTBkV2VXUkhiR3hqZVRWalltbEJaMGxEUVdkTGFUbGpZbWxCWjBsRFFtWlpXRUozWWtoc1NtSnVUakJaVnpWcVdsWkNlV0l6UW14amJsSndXbGhOYjB0VFFqZFlSelJuU1VOQlowbERRV2RKUXpoMlNVWldlbHBUUW0xaU0wcEdXVmRPYjBsSVRuWkpTRkp2WVZoTloyUXlPWGxoTTAxbldsaGFiR0pwUW5CYWFVSnRZak5KZG1JeVdXZGlSemwyWTBoTloxbFlTbXhKUjA1MllsaENjR0pIVm10SlNGSjJTVWRhZG1OcFFuTmlNamwzWXpGNGRVbERRV2RKUTBGblNVTkJka3g1UW14bFNFSnNXVE5TY0dKdFkyZFpXRXA1V1Zoc2VsaEhOR2RKUTBGblNVTkJaMGxET0haSlNGSjZZa2RzZFdSRWNHdGhXRTVvV1cxNGJFeFhOV3hsU0ZGMFlrZHNkVnBVY0hWaWVURm9ZbTVzWTJKcFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWbVlWYzFlbVJIUm5WWk1sWlJZMjA1ZDFwWVNqQmhWMVo2VEcxYWRtTnJWbWhaTW1kdlMwaFpjMGxJUVhCSlJEQXJTVWhTYjJGWVRtSmpSakJuVUZOQ01rdFVkR05pYVVGblNVTkJaMGxEUVdka1IyaHdZM2sxWm1GWE5YcGtSMFoxV1RKV1VXTnRPWGRhV0Vvd1lWZFdla2xFTUdka1Z6VnJXbGRhY0dKdFZtdFBNWGgxU1VOQlowbElNV05pYVVGblNVTkNhbUl5TlhWYVYwNHdXbGRTUkZsWGVITlpiVVpxWVhsbmNFbElkR05pYVVGblNVTkJaMGxEUVdkTWVUaG5VbGMxZW1SWVNteEpSMXB3WTI1T01FbEhUblppYlRWc1dUTlNjR0l5TkdkWk1qbDBZMGQ0YkdSSFZucEpSMFoxU1VoV2QxcEhSakJhVXpSblZsaENhMWxZVW14amVVSnFXVmMxZFdJelVXZFpNamwwWTBkNGJHUkhWbU5pYVVGblNVTkJaMGxEUVdkTWVUaG5XVzFXYldJelNteEpSMDUyWW0wMWJGa3pVbkJpTWpSMVdFYzBaMGxEUVdkSlEwRm5TVWhTYjJGWVRYVmFWelZvV1cxNGJGWllRbXRaV0ZKd1ltMWpiMHRVZEdOaWFVRm5TVU5DT1ZoSE5HZEpRMEZuV2xjMWFGbHRlR3hXV0VKcldWaFNjR0p0WTI5TFUwSTNXRWMwWjBsRFFXZEpRMEZuU1Vkc2JVbERhREJoUjJ4NlRHdzViR0p0Um1saVIxWldZMGRTYUdSSGJIVmFNVXBzWXpJNWMyUnRWbmxKUTBVNVVGTkNNV0p0VW14YWJXeDFXbGRSY0VsSWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVaFNiMkZZVFhWWU1sWjFXVmRLYzFwV1ZuZGFSMFl3WVZjMWJsVnRWbnBpTW5neVdsaEpiMHRVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoU2IyRllUWFZZTWxaMVdWZEtjMXBXVm5kYVIwWXdZVmMxYmxWdFZucGlNbmd5V2xoSloxQlRRakZpYlZKc1dtMXNkVnBYVVRkWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRamxZUnpSblNVTkJaMHg1YjNGWVJ6Um5TVU5CWjBsRGIyZFJWM2h6WWpOa2VrbEhXblpqYVVKbll6TldkMXBZU1hWYVIyeDZXVEk1ZFdKdFZtcGtSMVpyVVRKR2MySkhTbWhaTW5OdlMxZEJaMkZYTkdkYVdHZ3dXbGMxZW1GWE9YVmplVUl6WVVkc2MxcFdlSFZKUTBGblNVTkJjVWxJU214ak1sWjVaRzFzZFZwNVFqQmhSMVZuWTBjNWVtTXliR2xoVjNod1pFaHJaMkl5V1dkaVYwWnlZVmMxYmtsSE5YWmlhVEZwWTIxV2FHRXliSFZhZVVKdFdsZEdNR1JZU214SlIwWnJXa2RzTUdGWE9YVmpNWGgxU1VOQlowbERRWEZKU0dSdldsYzBaMXBIYkhwWk1qbDFZbTFXYW1SSGJIVmFlVUpvWkVOQ2VtSXlNV3hKU0VKMllWYzFNRWxIYkhWSlNGSnZXbE5DYldSWVVqRmpiVlYxV0VjMFowbERRV2RKUTI5MldFYzBaMGxEUVdkYVIyeDZXVEk1ZFdKdFZtcGtSMVpyVVRKR2MySkhTbWhaTW5OdlMxTkNOMWhITkdkSlEwRm5abFo0ZFVsRFFXZEpRemh4UzJ4NGRVbERRV2RKUTBGeFNVWk9OV0p0VG05amJUbDFZVmh3YkdONVFuZGpiVGwzV2xoS01HVlRRakpaVjNneFdsaE5aMlF5YUd4aWFVSm9aRWhTZVdGWFNqRmtSMVo2U1VkT2IxbFhOVzVhVXpWalltbEJaMGxEUVdkTGFUbGpZbWxCWjBsRFFtaGtTRko1WVZkS01XUkhWa1JoUjBaMVdqSldhMUV5Um5OaVIwcG9XVEp6YjJKdFJuUmFVM2RuWWpKNGEweERRakpaVjNneFdsTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFuQmFhVUZ2WWpKNGEwbERSVGxRVTBJeVdWZDRNVnBUYTJkbE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWbVdWaFNNR050Ykdsa1dGSnNWa2M1VVdOdE9YZGFXRW93WlZOb2RWbFhNV3hNUTBJeVdWZDRNVnBUYXpkWVJ6Um5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRamxZUnpSblNVTkJaMWd6UW5saU0wSnNZMjVTTlZaSE9VSmtTRko1WVZkS01XUkhWVzlpYlVaMFdsTjNaMlJ0Um5Oa1YxVnpTVWM1ZDJSSGJIWmliazFuVUZOQ2ExcFhXbWhrVjNnd1ZVaEtkbU5IVm5sa1NHeEZXbGRPYzFsWVNtaGtSMngyWW1scloyVXhlSFZKUTBGblNVTkJaMGxEUW1waU1qVjZaRU5DYW1SSE9YbEpSREJuWkVkb2NHTjVOV3BpTWpWNlpFaEtNVmt6VW5aamFuUmpZbWxCWjBsRFFXZEpRMEZuV1RJNWRXTXpVV2RaV0ZJd1kybEJPVWxIVGpCaU0wbDFXREpHTUdSSVNuQlpibFl3V2xVMWFHSlhWa2RpTTBwUlkyMDVkMXBZU2pCbFUyaDFXVmN4YkV4RFFuWmpTRkp3WWpJMWVrdFVkR05pYVVGblNVTkJaMGxEUVdkaFYxbG5TMGRHTUdSSVNXZEpWREE1U1VoV2RWcEhWbTFoVnpWc1drTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuV1RJNWRXTXpVV2RaV0ZJd1kyeGFhR0pJVm14SlJEQm5XVE5TZG1OcE5XWmpTRXAyWTBkV2VXUkliRmRaVjNneFdsWlNkbEZZVWpCamJXeHBaRmhTYkV0SVdtaGlTRlpzVEVOQ2RtTklVbkJpTWpWNlMxUjBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRemgyU1VkR2RVbElWblZhUjFadFlWYzFiRnBEUWpKWlYzZ3hXbE5DYTJJeVZucEpSelYyWkVOQ2FtRkhSblZhTWxWblpFZG9iRWxIUmpCa1NFcHdXVzVXTUZwVE5XTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZHNiVWxEYUdoa1NGSjVWbTFHYzJSWFZXZFFWREE1U1VoV2RWcEhWbTFoVnpWc1drTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElTbXhrU0ZaNVltcDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRV2RKUTBGblNVTkJaMGxET0haSlJsSjVXVmRPY2tsSGJHMUpTRkp2V2xOQ2QyTnRPWGRhV0Vvd1pWTkNjR041UW1sYVYyeDFXbmxDZVZwWFduTmFWMDR3V2xkUloyUkhPR2RaV0ZwMllWZFNZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRemgyU1VoT2JHUklVbkJpYldOblpFZG9iRWxJUW5saU0wSnNZMjVTTlVsSFJtNVpWMngxU1VoYWNGbFRRbWRaV0ZJd1kyMXNhV1JZVW14Uk1taG9ZbTFrYkZwRlRtaGlSM2hwV1ZkT2NsbEROR2RVYlRrd1dsUndZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRemgyU1VSRmRVbElVbTloV0UxblpFZEdjbHBZVFdkWlYxSXlXVmMxTUZsWFpHeEpSemx0U1VoU2IxcFRRbTFaVjA0d1NVaFNiMWxZVVdka1IyaHNTVWRPYUdKSGVHbFpWMDV5U1Vkc2VrbElUalZpYlU1dlkyMDVkV0l6Vm5wTWJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2ROYVRSblpESnNjMkpEUW1sYVYyaG9aRzFWWjJGWE5XcGlNMHA1V2xkT01HSklhMmRoVjFsbllsaFdjMlJIYkhkaVIxVm5XVmhTTUdOdGJHbGtXRkpzWTNsQ2FHTnRWV2RoVnpSblpFZG9iRWxJU214WlYwNHdZVmM1ZFZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGMlRIbENlbVJIUm1waGVVSm9aRU5DTUdGWE1XeEpSemx0U1VkT2FHSkhlSEJpYldOMVNVVm9kbVF5VmpKYVdFbHpTVWhPY0dKdFRteEpTR1JzU1VoQ2VXSXlUbXhqTTAxbldWaFNNR050Ykdsa1dGSnNZekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RNZVRobllWYzBaMWxJVm5kYVIwWXdXbGRCWjJSSGFIQmplVUo2WVVjNU1XSkhVV2RpYlRrd1NVZEtiRWxJUW5aak0wNXdXVzE0YkVsRGFIWmphVUpvWW1sQ2JHVklVbmxhVnpGc1NVZE9kbU50Tld4amFVSnFXVmhPYkZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGMlRIbENNR0ZIUmpCSlNHUnNTakpSWjJKSGJISmFVMEl3WW5sQ2EyRllUbXBpTTFwc1kybHJkVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEYyVEhsQ2RGbFlTbkpKU0U0d1dWaFNiRWxJU214YWJYaHNXVE5TY0dKdFpHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVaFNiMkZZVFhWWU0xWjNXa2RHTUZwV1RqQlpXRkpzU1VRd1oyUkhhSEJqZVRWbVpGaENhMWxZVW14Vk0xSm9aRWRWWjJaRFFsUldSVVpWVWxZNVNsVXhPVk5TVlZwTlVsVk9WVk5WTlVoWU1WSlFXREJHVlZaR1NrcFJiRlpWVWxSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIyeHRTVU5vYUdSSVVubFdiVVp6WkZkVloxQlVNR2RpYmxaellrTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElVbTloV0UxMVkyMVdkR0l6V214UldGSXdZMjFzYVdSWVVteExSMFl3WkVoSmNFOHhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5abFo0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RhVjNoNldsTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWNldsaFNRbVJJVW5saFYwb3haRWRWYjFsWVVqQmphWGRuV1ZoU01HTnNXbWhpU0Zac1MxUjBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRV2RKUTBGblNVTkJaMGxET0haSlJ6Rm9ZMjF6WjJNelVtaGtSMVZuWW0wNU1FbElTbXhhYlhoc1dUTlNjR0p0WkdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoU2IyRllUWFZZTTFaM1drZEdNRnBXVGpCWldGSnNTVVF3WjJSSGFIQmplVFZtWkZoQ2ExbFlVbXhWTTFKb1pFZFZaMHBwUWl0Vk1WSkNWa1ZXWmxOV1RtWlZhMVpIVkVWV1JGWkZiRTlTTVRsVlZERTVRbFpHVWxOVFZVcFdWa1ZWTjFoSE5HZEpRMEZuU1VOQlowbElNV05pYVVGblNVTkNPVmhITkdkSlEwRm5XREpHTUdSSVNuQlpibFl3V2xaU2RsVklTblpqUjFaNVpFaHJiMkp0Um5SYVUzZG5aRzFHYzJSWFZYQkpTSFJqWW1sQlowbERRV2RKUTBGblRIazRaMVpZVG14SlNGSjVXVmRPY21GWE5XNUpSMngxV20wNFoyUkhPR2RaV0ZwMllWZFJaMXBIVm5wYVdFcHdXVmQ0Y0dWdGJIVmFlVUpvWkVoU2VXRlhTakZrUjFWblpHMUdjMlJYVldkaFYxbG5ZVmhSWjJReVJucFlSelJuU1VOQlowbERRV2RKUXpoMlNVZHdNV016VVdkak1sWXdTVWRhZVdJeU1HZFpVMEozWTIwNWQxcFlTakJsVTBKNldsaFNNRnBZU1hWWVJ6Um5TVU5CWjBsRFFXZEpSMnh0U1VOb01HRkhiSHBNYkRreFkwZFNhR1JIVmxSa1IwWXdXbE5CYlVsR1RsVlJWbEpHV0RCc1ZGZ3hTa1pTYTNoR1VURlNTbFJyWkdaV1JUbG1VVlpTVlZWcmJFTldWbEpHUzFOQ04xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSjVXbGhTTVdOdE5EZFlSelJuU1VOQlowbERRV2RKU0RGalltbEJaMGxEUVdkSlEwRm5XVEk1ZFdNelVXZFpNMUoyWTJsQk9VbElVbTloV0UxMVdUSTVkV016VW5sa1YwNHdZak5KTjFoSE5HZEpRMEZuU1VOQlowbERPSFpKUlRWMlpFZFZjMGxIYUhCaWJsRm5aRWRvY0dONVFtaGplVUpvWW1sQ1oxRllVakJqYld4cFpGaFNiRlJYUm5kWlEwSjZZbmxDYW1KSE9YcGtXRXBzU1VkT2MxcFhSbmxpU0d0blpGYzFhMXBZU25wa1IwWjFXa2hPWTJKcFFXZEpRMEZuU1VOQloweDVPR2RrUjJoc1NVaFNOV05IVlRkSlIyd3dTVWRvYUdONVFuQmpNMDR4V2xoTloyUXliREJoUTBJd1kyMUdhbUV5YkhWYWVVSXdaVmhDYkdONVFqQmhTRXAyWkZka2IwbElUakJaV0ZKd1dUTk9ZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZGtTRTV6WVZjMU1FOXRVbkJqTWtacFlrZFZkR0p0VmpSa1F6RnpZVmMxYkU5dE5YWk1XRloxWW0xV2FscFlUbnBaV0VvMVRGaFNOV05IVlhSWldFNTZXbGhLTUdGWE9YVllSelJuU1VOQlowbERRV2RKUjA1MlltNU9NRWxJUW5saU0wSlBXVmN4YkVsRU1HZFpNMUoyWTJrMVpsbFlVakJqYld4cFpGaFNiRlpIT1ZGamJUbDNXbGhLTUdWVk1XaGpRelZ1V2xoUmIySnRSblJhVTJzM1dFYzBaMGxEUVdkSlEwRm5TVWRzYlVsRGFIZGpiVGwzVkcxR2RGcFRRV2hRVkRCblpGYzFhMXBYV25CaWJWWnJTMU5DTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKcVlqSTFlbVJEUW5aalNGSndZakkxZWtsRU1HZFpNMUoyWTJrMWJscFlVbEZqYlRsM1dsaEtNR1ZWT1hka1IyeDJZbTVOYjJOSVNuWmpSVFZvWWxkVmNFOHhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5USGs0WjJKWFJubGhlVUo2WkVkR01GcFRRbmxhVjFweldsZE9NR0ZYTlc1WVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYkRreFkwZFNhR1JIVmxSa1IwWXdXbE5CT1VsSVVtOWhXRTExV0ROV2QxcEhSakJhVms0d1dWaFNiRWxJZDJkVk1WSkNWa1ZXWmxOV1RtWlZhMVpIVkVWV1JGWkZiRTlTTVRsVlZERTVVVlZyT1ZGU1ZrcFZWMVIwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0ZKdllWaE9ZbU5JU25aalJUVm9ZbGRXWkVsRU1XTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVhaTWVVSXdZeko0Y0dKdVVUWmFSMng2V1ZkS2MxcFRNWFZhV0dnd1RGZDRjR0p0VlRaaWJUaDBXVmMxTlZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMWt6VW5aamFUVm1ZMGhLZG1OSFZubGtTR3hYV1ZkNE1WcFZXbmxpTWpGQ1pFaFNlV0ZYU2pGa1IxVnZaRzFHYzJSWFZYTkpSemwzWkVkc2RtSnVUWEJQTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjB4NU9HZGlWMFo1WVhsQ2VtUkhSakJhVTBKMVlqTlJaMk50Vm0xaVIxWnFaRWRzZFZveGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblpFZG9jR041Tldaa1dFSnJXVmhTYkZVelVtaGtSMVZuVUZOQ01HRkhiSHBNYkRreFkwZFNhR1JIVmxSa1IwWXdXbE5CYlVsSU5WUldSVVpWVWxZNVNsVXhPVk5TVlZwTlVsVk9WVk5WTlVoWU1WSlFXREZDVTFReFFrWlZiRkphVHpGNGRVbERRV2RKUTBGblNVTkNPVmhITkdkSlEwRm5abFo0ZFVsRFFXZEpRemh4UzJ4NGRVbERRV2RKUTBGeFNVWlNiMkZZVFdkalNFcHdaRzFHTUZwVFFqSmFXRXA2WVZjNWRVbEhPVzFKUjBKNVdsaEdNVnBZVGpCV1dFSnJXVmhTYkZsRFFtdGlNbFo2U1VjMWRtUkRRbWhaTWs1c1l6Tk5aMkl6U1dkamJWWXdaRmhLZFVsSVVtOWFWbmgxU1VOQlowbERRWEZKUjBJeFkwZFNhR1JIVmtSaU1qRjNZa2RXTUZwWFFXZGpTRXAyWWxkc2VscFROR2RXUjJod1kzbENkMk50T1hSaFdFNXNTVWRPYUdKcFFtbGFVMEoyWkcxV2VXTnRiR3RhUjFaMVNVZEdkVnBEUW5CamVVSXdZVWRXZVZwWFduWmpiVlpqWW1sQlowbERRV2RMYVVKMVlqTlJaMXB1U214YVUwSXdZbmxDYUZreVRteGpNMDExV0VjMFowbERRV2RKUTI5MldFYzBaMGxEUVdkWU0wcHNZMWhXYkdNelVsWmpSMUpvWkVkVmIySnRSblJhVTNkbllqSjRhMVp0Um5Oa1YxVndTVWgwWTJKcFFXZEpRMEZuU1VOQloySkhWakJKU0U1dllqTldjMXBHU214aldGWnNZek5TVm1OSFVtaGtSMVZuVUZOQ01HTnVWbXhQTVhoMVNVTkJaMGxEUVdkSlEwRjJUSGxDU2xwcFFqTmFVMEp2V1ZoYWJFbEhSV2RqU0VwMlkwZFdlV1JJYTJkaE1sWTFURU5DZDFwWVNtMWlNMHAwU1VoQ2VXSXpRbXhqYmxJMVNVaFdkMXBIUmpCYVUwSjZaRWRXZDJONU5XTmlhVUZuU1VOQlowbERRV2RoVjFsblMwYzFhR0pYVldkSlZEQTVTVWhXZFZwSFZtMWhWelZzV2tOcloyVXhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5XVEk1ZFdNelVXZFpNMUoyWTJsQk9VbElVbTloV0UxMVdUSTVkV016VW5sa1YwNHdZak5KTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKcVlqSTFlbVJEUW5aalNGSndZakkxZWtsRU1HZFpNMUoyWTJrMWJscFlVbEZqYlRsM1dsaEtNR1ZWT1hka1IyeDJZbTVOYjJKdFJuUmFVMnMzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUW5CYWFVRnZXVE5TZG1OcE5XWmtiVVp6WkZkV1NWbFlUa1JoUjBaMVdqSldhMHRJVW05aFdFNWlZbTFHZEZwV01ITkpSemx6V2taYWFHSklWbXhNUTBKMlkwaFNjR0l5TlhwTWJXaG9ZekJPYjFsWE5XNWFWMUZ3UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJGWFdXZExRMFl3WVVkc2VreHNPV3BoUjBaMVdqSldhMVZJU25aalIxWjVaRWRzYkdONU5XOVpXRTF2WW0xR2RGcFRhM0JKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWbVdUSm9hR0p0Wkd4YVJrSjVZak5DYkdOdVVuQmFXRTExWXpKV01FdEhOV2hpVjFWelNVYzVjMXBHV21oaVNGWnNTMVIwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNPVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RSVjFKclNVaFNka2xJU214YWJYaHNXVE5TY0dKdFkyZGpTRXAyWTBkV2VXUkhiR3hqZVVKNldsaFJkVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RVYlRrd1dsTjNaMkZZVVc1amVVSndZbGhDZG1OdVVtaGlibEZuWkVkb2FHUkRRbXhrYlZaNVpWTkNhbUZIUm5WYU1sVm5ZVWRHZWtsSFJXZFpNbWhvWW0xT2JFbElVblpKUjBacldrTkNNR0ZIVm1OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRWFpNZVVKM1kyMDVkMXBZU2pCbFUwSXdZbmxDWjFnelNteGFiWGhzV1ROU2NHSnRaRkZqYlRsM1dsaEtNR0ZYVm5wWlF6Um5Wa2RvY0dONVFteGliazR4WTIxV2VrbElUbXhrU0ZKd1ltMWtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmRreDVRbWhrU0ZKNVlWZEtNV1JIVldkTGVVSjNZMjA1ZDFwWVNqQmxVMEo1V2xkYWMxcFhUakJqZVVKcVlqTktlVnBYVGpCaVNHdDFXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbllWZFpaMHRIT1hka1IyeDJZbTVOZFdOdFZtMWlSMVpxWkVOQk9WQlVNR2RrU0VveFdsTkJiVXBzZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGb1MwaFNiMkZZVFhWWU0xWjNXa2RHTUZwV1RqQlpXRkpzU1VOWloxVXhVa0pXUlZabVUxWk9abFZyVmtkVVJWWkVWa1ZzVDFJeE9WVlVNVGxSVldzNVVWSldTbFZYVTJ0d1NVaDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RoVjFsblMwaFNiMkZZVFhWWU0wcHNXbTE0YkZrelVuQmliV1JSWTIwNWQxcFlTakJoVjFaNlNVUXdPVkJUUWpGaWJWSnNXbTFzZFZwWFVYQkpTSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRkp2WVZoTmRWZ3pTbXhhYlhoc1dUTlNjR0p0WkZGamJUbDNXbGhLTUdGWFZucEpSREJuWW0xV00wbEZNV2hqUTJkd1R6RjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRamxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoU2IyRllUWFZZTTBwc1dtMTRiRmt6VW5CaWJXUlJZMjA1ZDFwWVNqQmhWMVo2VEc1T2JHUkRhSFZaVnpGc1RFTkNkbU5JVW5CaU1qVjZTMVIwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNPVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUW14aVNFNXNTVWgwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJka3g1UWtKWmJUbDVaRU5DTUdGSFZXZGpiVlo0WkZkV2VtUkRRbkJhYVVJd1lVZFZaMk5JU25aalIxWjVaRWhyWjJNeWFIWmtWM2hyU1VjMWRtUkRRbWxhVTBKcVlqSTFlbUZYVW14amJWWnJTVWRPYjFsWE5XNWFWMUYxV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5ZekpvZG1SWGVHdFZiVlo0WkZkV2VtUkdWbmRhUjBZd1dsTkJPVWxIV21oaVNFNXNUekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RtVm5oMVNVTkJaMGxEUVdkSlEwSTVXRWMwWjBsRFFXZEpRMEZuU1Vkc2JVbERaMmhrUjJod1kzazFabUZIUm5wVmJWWjRaRmRXZW1SSFZtdFdXRUpyV1ZoU2JFbERXVzFKU0U1dllqTldjMXBHU214aldGWnNZek5TVm1OSFVtaGtSMVZ3U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNGSnZZVmhOZFZnelZuZGFSMFl3V2xaQ2VXSXlNWEJqTWxWblVGTkNNR0ZIYkhwTWJEbHNZbTVHTVZwWVZteFdXRUpyV1ZoU2JFdERhemRZUnpSblNVTkJaMGxEUVdkSlNERmpZbWxCWjBsRFFqbFlSelJuU1VOQloweDViM0ZZUnpSblNVTkJaMGxEYjJkVmJWWjRaRmRXZW1SSVRXZFpWelJuWkZoQ2ExbFlVbXhKU0dSdllWZE9iMGxIYkhwSlNFSjVZakpPYkdNelRteGFRMEpvWXpOc2RWa3lhSGxpTWpWMlpGaE9jMlZUTkdkV1IyaHdZM2xDZW1GSE9URmlSMUpqWW1sQlowbERRV2RMYVVKcFdsTkNhbGxYZUhOYVYxRm5aREpvYkdKcFFtaGlhVUpzWWtkV2RGcFhOVEJKU0U1dllqTldjMXBEUWpGalIxSm9aRWRWWjFsdFJucGFWMUZuWWpJMFoyTXlPWFJhVTBKNlpFZEdNRnBUUW5WaU0xRm5aRWhLY0ZveVpHeGpiVlpyV0VjMFowbERRV2RKUTI5bldXNXJaMk15VmpCa1IyeDFXbmxDYUVsSVFubGlNMEpzWTI1U05VeHBRa3BpYVVJd1lVZHNla2xIVG1oak1sVnpTVWhDYUdNelRXZGliVGhuV1ZoS2JtUlhNV3hpYmxKNlRHbENTbVJEUW5waFJ6a3hZa2RSWjFsWGVIcGllVUpwV2xaNGRVbERRV2RKUTBGeFNVZE9hR0pIZUd4YVEwSXpZVWRXZFVsSE1XaGlibFpvWWtkNE5VbEhiSFJqUjNoc1lsZFdkV1JIYkhWYWVVSm9TVWhDZVdJelFteGpibEkxU1VoT2JHUklVbXhqYVRSblUxYzBaMlJIYUhCamVVSnFXVmhPYkV4RFFuZFpXRTU2U1VoU2IxcFdlSFZKUTBGblNVTkJjVWxJUW5saU0wSnNZMjVTTlVsSFFuVlpWekZzV1VOQ2FHSnRVV2RaUnpseldrWmFhR0pJVm14WlEwSXdZbmxDYkdKdVRqRmpiVlZuWkVkb2FHUkRRbWhpYm10bldUSTVkVnB0Ykc1a1dFcHNXa05DZDJOdE9YZGFXRW93WlZaNGRVbERRV2RKUTBGeFNVYzVkMlJIYkhaaWJrMW5XVmhLYkVsSGFIWmliVGw1V2xkUmRVbEdTbXhrU0ZaNVltNU5aMlJIYUd4SlIwSXhZMGRTYUdSSFZrUmlNakYzWWtkV01GcFhRV2RWU0VwMllsZHNlbHBUUWpOaFIyeHFZVU5DY0dONVFubGFXRTUyWWtoYWJGcEdlSFZKUTBGblNVTkJjVWxJWkc5YVZ6Um5aRWRvYkVsSVZuZGFSMFl3V2xOQ2FtSXlNWGRpUjFZd1dsaE5kVmhITkdkSlEwRm5TVU53WTJKcFFXZEpRMEZuUzJsQ1FXTkhSbmxaVnpCblltMUdkRnBUUWpkVlNFcDJZMGRXZVdSSWJFeGFXR3c1U1VOb2RtTklVbkJpTWpWb1lrTnJaMkp0Um5SYVUwSjJXbWxDZVZwWVJqRmFXRTR3WVZjMWJrbElRbmxpTTBKc1kyNVNOVmhITkdkSlEwRm5TVU52WjFGSVFtaGpiVVowU1VjNWMxcEdXbWhpU0Zac1NVaDBhR0p1YkRsSlEyaDJZMGhTY0dJeU5XaGlRMnRuWWpKNGEwbElXbWhpU0Zac1NVYzViVWxJU214aldGWnNZek5TY0dKdFkyZGpTRXAyWTBkV2VXUkliR05pYVVGblNVTkJaMHRwUWtGamJWWXdaRmhLZFdONVFqZFZTRXAyWWxkc2VscFlNR2RSVTBKUlkyMDVkR0ZZVG14SlNGSnZXVmhSWjJGWVRXZGpiVlo2WWpKNE1scFhVV2RrTW1oc1ltbENNR0ZIVldka1dFSnJXVmhTYkVsSFRuWmlXRUp6V2xoU2JHTjVOV05pYVVGblNVTkJaMHRwT1dOaWFVRm5TVU5DZVZwWVJqRmFXRTR3VmxoQ2ExbFlVbXhMUnpWb1lsZFZjMGxIT1hOYVJscG9Za2hXYkV0VFFqZFlSelJuU1VOQlowbERRV2RKU0ZKdllWaE5kVmd6U214aldGWnNZek5TVm1OSFVtaGtSMVZ2WW0xR2RGcFRkMmRpTW5oclZtMUdjMlJYVlhCUE1YaDFTVU5CWjBsRFFXZEpRMEo1V2xoU01XTnROR2RrUjJod1kzazFNV05IVW1oa1IxWkVZakl4ZDJKSFZqQmFWSFJqWW1sQlowbERRamxZUnpSblNVTkJaMHg1YjNGWVJ6Um5TVU5CWjBsRGIyZFZNbFl3WTNsQ01XTkRRakJoUjFWbldsZDRiR0pYVm5Wa1EwSXdZbmxDYUdNemJIVlpNbWg1WWpJMWRtUllUbk5sVTBJeFkwZFNhR1JIVlhWWVJ6Um5TVU5CWjBsRGIzWllSelJuU1VOQloxbFlUalZpYlUxbldESldkV05ZVm14a1YxWldZMGRTYUdSSFZXOUxVMEkzV0VjMFowbERRV2RKUTBGblNVaFNiMkZZVFhWWU0xWjNXa2RHTUZwV1RqQlpXRkpzU1VRd1oyUkhhSEJqZVRWbVpGaENhMWxZVW14Vk0xSm9aRWRWWjJaRFFsUldSVVpWVWxZNVZsVkZVa0pXUlZabVZXdFdVbFpWVmxSV1JWWkZUekY0ZFVsRFFXZEpRMEZuU1VOQ01HTnVhMmRsTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjB4NU9HZFNWelY2WkZoS2JFbEhSblZsVTBKM1kyMVdNbUZYT1RGamVVSXhZMGRTYUdSSFZXZGhSMFo2U1VoS2JHTXlPWE5rYlZaclNVZEtiRnB0T1hsYVUwSXhZMGRTYUdSSGJIVmFlVFZqWW1sQlowbERRV2RKUTBGblNVTkJaMGxET0haSlJsSnZZVmhOWjFsSFJqTlpWMnd3V1VOQ2FHSklUblpKUjFaMVl6TldlVnBZVFdka1IyaG9aRU5DZDJOdE9YZGFXRW93WlZOQ2FtRkhSblZhTWxaNlNVZEdlVnBUUW1sWldGSnFZVWRXYTB4c2VIVkpRMEZuU1VOQlowbERRV2RKUTBGbldWaGthR0ZZVVdka1IyaHdZM2sxWm1SWVFtdFpXRkpzVlVoS2RtSlhiSHBhVkhSalltbEJaMGxEUVdkSlEwRm5abFo0ZFVsRFFXZEpRMEZuU1VOQ2FsbFlVbXBoUTBGdldsTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuVEhrNFoxTlhaSFZpTTBwc1NVZEdkV1ZUUW5kamJWWXlZVmM1TVdONVFteGpia3AyWTI1TmRVbEdaR3hKUnpsMVlraHJaMWt5Um5sYVUwSXdZVWRHTUVsSVVtOWFVMEozWTIxV01tRlhPVEZqZVVKcVpWZE9jMXBUUW5Cak1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RhUnpsMVdsTTBaMUZYTlRWSlIxWjVZMjA1ZVVsSVRtOWlNMVp6V2tOQ2IxbFlXbXhKUjBwc1dsYzBaMkZIUm5WYVIzaHNXa05DY0dKcFFqQmhSMVZuWTBoS2JHUnRiSFprV0UxblpGaENhMWxZVW14TWJIaDFTVU5CWjBsRFFXZEpRMEk1V0VjMFowbERRV2RKUTBGblNVZE9kbUp1VGpCSlNFcHNZek5XYzJSRFFUbEpTRkp2WVZoTmRXTkhWbmxhYlRsNVlsWldkMXBIUmpCYVUyZHdUekY0ZFVsRFFXZEpRMEZuU1VOQmRreDVRa3BhYVVKblkwZFdlVnB0T1hsaVZsWjNXa2RHTUZwWFFXZGpiVll3WkZoS2RXTjVRbWhKUmtKNVlqSXhjR015VlhOSlNHUnNTVWRHTTFsWGJEQkpSMnd3VEdsQ1ZXRkhiSHBKUjJ4NlNVZFNkbUp0Vldka1J6bGpZbWxCWjBsRFFXZEpRMEZuVEhrNFoxcFhOV2haYlhoc1NVZE9kbUl6U210aFZ6Vm9aRWRzZFZwNVFqRmpSMUpvWkVkV2VrbElaSEJrUjJkbldWTkNlbGt5YUd4YVNGWnpXbGhKZFVsRk5YWmtSMVZ6U1VoU2IxcFRRbmxhV0U0eFlraFJaMkZZVG1OaWFVRm5TVU5CWjBsRFFXZE1lVGhuV1RKb2JGa3lkR3hhUTBJd1lubENhR1J0T1hCYVEwSnJXbGQ0YUdWWGJIVmFlVUpvWW1sQ2FGcEhVbkJrUjJ4MlltMUdjMGxITVhCWk0wcDJaRWRHZW1GNVFqRmliWGhzWXpOTloyUXlWV2RpYlZac1drTkNNR0o1TldOaWFVRm5TVU5CWjBsRFFXZGhWMWxuUzBoS2JHTXpWbk5rUTBGb1VGTkNkV1JYZUhOTFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbWhrTWtad1pFTkNlVnBZVGpGaVNGRTNXRWMwWjBsRFFXZEpRMEZuU1VneFkySnBRV2RKUTBGblNVTkJaMk50VmpCa1dFcDFTVU5HTUdGSGJIcE1iRGx2V1ZoT1UxcFlSakZhV0U0d1dsZFNWbU5IVW1oa1IxVTNXRWMwWjBsRFFXZG1WbmgxU1VOQlowbEhaR3hrUTBKbVlVZEdlbFZ0Vm5oa1YxWjZaRWRXYTFaWVFtdFpXRkpzUzBOcloyVXhlSFZKUTBGblNVTkJaMGxEUW5sYVdGSXhZMjAwWjB0SVVtOWhXRTExV0ROV2QxcEhSakJhVms0d1dWaFNiRWxEV1dkVk1WSkNWa1ZXWmxaV1FrVlJWbEpHV0RGS1JsVldWa1pWTVZKR1VrTnJOMWhITkdkSlEwRm5abFo0ZFVsRFFXZEpSMlJzWkVOQ2IxbFlUbFpqUjFKb1pFZFdhMHREYTJkbE1YaDFTVU5CWjBsRFFXZEpRMEo1V2xoU01XTnROR2RMU0ZKdllWaE5kVmd6Vm5kYVIwWXdXbFpPTUZsWVVteEpRMWxuVlRGU1FsWkZWbVpUUlVaVVdERldVVkpGUmxWU1ZWRndUekY0ZFVsRFFXZEpTREZqWW1sQlowbERRWFpMYVhCalltbEJaMGxEUVdkTGFVSlJXbGhLYldJelNuUmplVUpvWW1sQ2JHSkhWblJhVnpVd1NVaFdkMXBIUmpCYVV6Um5WRzA1TUZwVGQyZGhWMWxuV1ZjMFoxcFlhR3BhV0VJd1lWYzVkVWxIYkhwSlNGSnZZMjA1TTJKcFFtdGtXRXB3WW0xaloyUkhhR3hZUnpSblNVTkJaMGxEYjJka1dFSnJXVmhTYkV4RFFtZGFiV3g1WXpOU1ZtTkhVbWhrUjFacldVTkNhR0p0VVdkWlNGWjNXa2RHTUZwWFVtZEpTR1J3WWtkM1oySnRPVEJKUjBwc1NVZE9hR0pIZUd4YVF6VmpZbWxCWjBsRFFXZExiSGgxU1VOQlowbERRWEZKUm14MlpGTkNhbGxYTkdkaU0xcHNZMjVLY0ZwSFZXZGtSMmh3WTNsQ2RGcFlVbTlpTWxGblpFYzRaMWt5YUdoaWJXUnNTVWhTYjFwVFFqQmhWekZ3WW0xaloySXlXV2RrV0VKcldWaFNiR041TkdkVFYxbG5aRWRvY0dNeGVIVkpRMEZuU1VOQmNVbEhNV3hrUjJoMldrTkNjR041UW5aa2JWWjVZMjFzYTFwSFZuVk1RMEpuWXpOV2QxcFlTWFZqUjFaNVdtMDVlV0pXVm5kYVIwWXdXbE5uY0ZsRFFuUmtXRTR3U1VkS2JFbEhUbWhpUjNoc1drTTFZMkpwUVdkSlEwRm5TMng0ZFVsRFFXZEpRMEZ4U1VWYWRtTnBRbkJpYms0d1dWYzFhbHBUZDJka1J6aG5ZekpPYjFwWFVqRmlSMVZuWkZoQ2ExbFlVbXhqZVVJd1lubENkbGt5VGpGamFVSnhaRmhPTUVsSFNteGFiVGw1V2xOQ01HRkhWV2RpYlZZMFpFTkNiV050Um5SYVZIQmpZbWxCWjBsRFFXZExiSGgxU1VOQlowbERRWEZKUjBKbldVWjRkVWxEUVdkSlEwRnhTVWhDZVdJelVteFpNMUpzV2tOQ2FHTXpiSFZaZVVKM1dsaEtiV0l6U25SV1dFSnJXVmhTYkV0RGF6WkpSa0o1WWpJeGNHTXlWVGhrVnpWeVltMDVNMkpxTkdkbE1YaDFTVU5CWjBsRFFYRkpRMEZuV1Zoa2FHRllVV2RpYlZZelNVWkNlV0l5TVhCak1sVnZTMGhLYkdNeU9YTmtiVlZ3U1VRd0swbElTbXhqV0Zac1l6TlNRbUp0YkhSWldGSndZakkxUjJOdFJuUmFVMmR2UzFOQk9WQnBRbmxhV0U1MllraGFiRXREYTNCTFZIUmpZbWxCWjBsRFFXZExhVUZuU1VoT01XTkhWbmxNYmtKc1kyMWFkbU50TVZaalIxSm9aRWRWYjB0VWRHTmlhVUZuU1VOQlowdHBRamxZUnpSblNVTkJaMGxEYjJkWlIwSm5XRWMwWjBsRFFXZEpRMjkyV0VjMFowbERRV2RqUjFaNVdtMDVlV0pXVm5kYVIwWXdXbE5uY0VsSWRHTmlhVUZuU1VOQlowbERRV2RNZVRoblZGZHNOR0ZYTkdkaFZ6VjZaRWRHZFZreVZXZGpTRXAyWTBkV2VXUkhiR3hqZVVKMlltMU9iRXhEUW5CYWFVSXdZVWRXTlVsSFZqUmhXRTR3VEd4NGRVbERRV2RKUTBGblNVTkNjRnBwUVc5a1IyaHdZM2sxWm1GWE5YcGtSMFoxV1RKV1VXTnRPWGRhV0Vvd1lWZFdla3RUUWpkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYkRsb1kwaENjMlZWYkhWak0xSm9ZbTFPYkZWSVNuWmpSMVo1WkVkc2JHTjVaM0JQTVhoMVNVTkJaMGxEUVdkSlEwSTVXRWMwWjBsRFFXZEpRMEZuU1VkNGJHUkRRbnBoUnpreFlrZFNWbU5IVW1oa1IxVm5VRk5DYlZsWGVIcGFWSFJqWW1sQlowbERRV2RKUTBGbldUSTVkV016VVdkWk1taG9ZbTFrYkZwR1FubGlNMEpzWTI1U2NGcFlUV2RRVTBJd1lVZHNla3hzT1dwaFIwWjFXakpXYTFWSVNuWmpSMVo1WkVkc2JHTjZkR05pYVVGblNVTkJaMGxEUVdka1NFbzFTVWgwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0U1dllqTldjMXBHVm5kYVIwWXdXbE5CT1VsSVVtOWhXRTExWXpKb2RtUlhlR3RXV0VKcldWaFNiRXRIVG05WlZ6VnVXbGRTVVdOdE9YZGFXRW93WVZkV2VrdFVkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWRzYlVsRGFIcGhSemt4WWtkU1ZtTkhVbWhrUjFWd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYmxaM1drZEdNRnBUYUdwaFIwWjFXakpXYTFWSVNuWmpSMVo1WkVkc2JHTjVhemRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DT1ZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKc1lraE9iRWxJZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRakJoUjJ4NlRHdzVkRmxZU25KV1dFSnJXVmhTYkZwRFozQlBNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlpXZUhWSlEwRm5TVU5CWjBsRFFqbFlSelJuU1VOQlowbERRV2RKUjA1b1pFZE9iMGxEYUd4TFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRWFpNZVVKUlkyMVdNbHBYTlRCSlIwSnRZVmhLZW1SR1ZuZGFSMFl3V2xkU1owbEhSblZhUTBKblpGaENhMWxZVW14YVIwRm5XbTVLZG1KVFFubGtWelYxWVZjMWJrbElaRzlhVnpSblpFZG9iR050Vlc1amVVSm9ZbXg0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RNZVRoblpGaENhMWxZVW14SlIxWTBXVEpXZDJSSGJIWmlhVFZqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJVG05aU0xWnpXa1pXZDFwSFJqQmFVMEU1U1VkYWFHSklUbXhQTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjB4NU9HZFNWelY2WkZoS2JFbEhWbk5hVnpGc1ltNVJaMWt5Um5WSlIwWnFXVEpXZDJSRFFtaGFSMUp3WkVkc2RtSnRSbk5KU0ZaM1drZEdNRnBZVFdkWlYxb3dXbGhKWjFsWE5HZGFXR2hxV2xoQ01HRlhPWFZNYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJSSGFIQmplVFZtWWxkR2VXRXhWbmRhUjBZd1dsZFJiMHRVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoU2IyTnRPVE5KUjFVM1dFYzBaMGxEUVdkSlEwRm5TVWd4WTJKcFFXZEpRMEZuU1VOQloyRlhXV2RMU0U1dllqTldjMXBHVm5kYVIwWXdXbE5yWjJVeGVIVkpRMEZuU1VOQlowbERRV2RKUTBGbllWZFpaMHREUlc5a1IyaHdZM2sxWm1SWVFtdFpXRkpzVlROU2FHUkhWV2RLYVVKVVZrVkdWVkpXT1VsUlZrNW1WbFpDUlZGV1VrWlNRMnR3U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DTUdGSGJIcE1iRGt4WTBkU2FHUkhWbFJrUjBZd1dsTkJPVWxJVW05aFdFMTFXRE5XZDFwSFJqQmFWazR3V1ZoU2JFbElkMmRWTVZKQ1ZrVldabE5GUmxSWU1WWlJVa1ZHVlZKVlVUZFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdka1IyaHdZM2sxYldGWVNucGtSbFozV2tkR01GcFhVVzlaTW1ob1ltMWtiRnBHUW5saU0wSnNZMjVTY0ZwWVRYQlBNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlpXZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWkVkb2NHTjVOVEZqUjFKb1pFZFdhMHRIVG05WlZ6VnVXbGRTVVdOdE9YZGFXRW93WVZkV2VrdFVkR05pYVVGblNVTkJaMGxEUVdkbVZuaDFTVU5CWjBsSU1XTmlhVUZuU1VOQ1ptSlhSbmxoTVZaM1drZEdNRnBYVVc5TFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VoU2IyRllUWFZZTWs1dldWYzFibHBYVWxGamJUbDNXbGhLTUdGWFZucEpSREJuWW0xV00wbEZNV2hqUTJkd1R6RjRkVWxEUVdkSlEwRm5TVU5DTUdGSGJIcE1iRGt4WTBkU2FHUkhWbFJrUjBZd1dsTkJPVWxJVW05aFdFMTFXRE5XZDFwSFJqQmFWazR3V1ZoU2JFbERXV2RtYkU1VlVWWlNSbGd4VmxGU1JVWlZVbFk1VTFKV1JsWlNWazVWVWxWUk4xaEhOR2RKUTBGblpsWjRkVWxEUVdkSlF6aHhTMng0ZFVsRFFXZEpRMEZ4U1VaS2JHUklWbmxpYmsxbldWTkNVV050T1hSaFdFNXNTVWhTYjFsWVVXZGpiVlo2WWpKNE1scFlUV2RrTW1oc1ltbENNR0ZIVldkYVYzaHNZbGRXZFdSRFFtOVpXRTFuV1RJNWRHTkhlR3hrUjFaclNVaFdkMXBIUmpCaFZ6VnVUR3g0ZFVsRFFXZEpRMEZ4U1VaU2IxcFRRbEZqYlRsMFlWaE9iRWxJV21oaVNGWnNTVWRzZWtsSFJXZFpiVGwyWWtkV2FHSnBRakJoUjBZd1NVZHNla2xIUWpCamJsWnNXVU5DY0ZwcFFqQmhSMVZuV2xkNGJHSlhWblZrUTBKcVlqSXhkMkpIVmpCYVYxRm5aRWRvYkZoSE5HZEpRMEZuU1VOdloyUllRbXRaV0ZKc1NVaGtjR1JIYUhaa1dGRm5aRWhLY0ZveVpHeGpiV3gxV25sQ2FHSnRPVEJoUjFaNVNVaFdkMXBIUmpCYVV6Um5Wa2RvYkVsR1FubGlNakZ3WXpKVloyTnRWbnBrVjNnd1NVZHNla2xIUW0xWlYzaDZXbGRCWjJGWFdtTmlhVUZuU1VOQlowdHBRbWhKU0VKNVlqTkNiR051VWpWSlNHUm9ZM2xDZWxwWVVXZGhWelY2WVZkU2JFbEhRakZqUjFKb1pFZFdhMHREYkdkTWFVSktXbWxDTUdGSFZXZFZTRXAyWWxkc2VscFRRbkJqZVVKNVdsZHdiRmt6VW14YVEzZG5XVmMxWTJKcFFXZEpRMEZuUzJsQ2JHVkhUbXhqU0ZKd1lqSTBaMlF5Um5wSlNGSnZZMjA1TTJKcFFtdGtXRXB3WW0xaloyUkhhR3hKU0ZaM1drZEdNRnBUTldOaWFVRm5TVU5CWjB0c2VIVkpRMEZuU1VOQmNVbEdVblpKUjBZeldWZHNNRWxIUm10YVIyd3dZVmM1ZFZsWGQyZFpXRTQxWW0xT2IyTnRPWFZpTTFaNlNVaGtkbU50YzNOSlJ6a3lXbGhLZVdGWFVteEpTRkp2V2xOQ1oxZ3laR3hrUmxaM1drZEdNRnBWVG5aaVdFSnpXbGhTYkZsR2VIVkpRMEZuU1VOQmNVbEhNV3hrUjJoMldrTTBaMUp0T1hsSlIxWTBXVmN4ZDJKSFZYTkpSMnd3U1Vkc2VrbElUblppVjFZd1lWY3hiR041UWpGak1sWnRaRmQzWjJSSE9HZFpXR1JvWVZoUloxbFRRbmxhVnpWcldsaEtiRnBEUW14aVIxWjBXbGMxTUZoSE5HZEpRMEZuU1VOdloxbHRWbTFpTTBwc1NVZGFNV0pIV25CaVIzaHdZbTFqWjJSSGFIQmplVUpSWTIwNWRHRllUbXhNYVVKVllubENhMko1UWpCaFIyeDZURU5DYldGWVNucGtRMEpvWkRKR2NHUkdlSFZKUTBGblNVTkJjVWxIUW5wa1dFSnNZMmsxWmxveVZqQldXRUpyV1ZoU2JGRXlPWFJqUjNoc1pFZFZiMHRYUVhOSlNGSnZXbGMwWjFsWE5UVkpTRTR4V1c1T2JHTllWbXhpYmxGbll6TlNhR1JIVlhWWVJ6Um5TVU5CWjBsRGNHTmlhVUZuU1VOQlowdHBRa0ZqYlZZd1pGaEtkV041UWpkVlNFcDJZbGRzZWxwWU1HZFdSMmhzU1VaQ2VXSXlNWEJqTWxWblkyMVdNR1JZU25WamVVSm9TVWRLZG1JeWVHeFpWelJuWkVkb2FHUkRRbkJpYlZKd1dUSkdNRnBZVFdkaFYxbG5aRWRvYkZoSE5HZEpRMEZuU1VOdloyUllRbXRaV0ZKc1NVaEtiR015T1hOa2JWWnJTVWhrY0dSSGFIWmtXRkZuWkVoS2NGb3laR3hqYld4MVdubENhR0p0T1RCaFIxWjVTVWhXZDFwSFJqQmFVelZqWW1sQlowbERRV2RMYVRsalltbEJaMGxEUW01YVdGRm5aRmhDYTFsWVVteFJNamwwWTBkNGJHUkhWVzlMVTBJM1dFYzBaMGxEUVdkSlEwRm5TVWhLYkdSSVZubGlhVUl3WVVkc2VreHNPVzVhV0ZKV1kwZFNhR1JIVmtSaU1qRjNZa2RXTUZwVFozQlBNWGgxU1VOQlowbElNV05pYVVGblNVTkJka3RwY0dOaWFVRm5TVU5CWjB0cFFsQmtiVlo1WTIxc2ExcFRRbmRpTW14MVpFTkNiV0l6U1dka1IyaHNTVWRDTVdOSFVtaGtSMVpFWWpJeGQySkhWakJhVjBGblkwaEtkbUpYYkhwYVV6VmpZbWxCWjBsRFFXZExiSGgxU1VOQlowbERRWEZKUld3d1NVZHNla2xITlhaa1EwSjZXVmRhYkVsSVVuWkpSemt5V2xoS2VXRlhVbXhKU0ZKdldsTkNaMlJZUW10WldGSnNVVEk1ZEdOSGVHeGtSMVpuU1Vka2JHUklVbXhqYVVKcllWaEtiRmt6VW5ObFUwSnJaRmRWWjJSSE9HZFpWbmgxU1VOQlowbERRWEZKUjNod1lsZHNNRmxZVW5CaU1qUm5ZVmMwWjFaSWJIZGFWazVxWTIxc2QyUkRRak5oUjJ4cVlVTkNkRnBYUm5WamVVSndaRU5DY0dONVFuVmlNMUZuWTBjNWVtTXliR2xpUjFWblpFYzRaMWt5Um5OaVEwSm9XRWMwWjBsRFFXZEpRMjluWXpOV2QxcFlTbXBpUjBaNlkzbENibHBZVWpCYVdFbG5TMGRWZFZwNU5HZFpTRTR4WTBkV2VVeHVWbmRhUjBZd1dsVk9kbUpZUW5OYVdGSnNURzVTYjFwWE5HOU1hVFIxUzFkQmNFbElaRzlhVnpSblpFZG9iRWxJVW1oamJXUnNaRVo0ZFVsRFFXZEpRMEZ4U1VkNGFHSnRaREZaVjJSc1NVZHNla2xGVmxST1UwRnZZVWhTTUdOSVRUWk1lVGx1WVZoU2IyUlhTWFZaTWpsMFRESXhjRmt6U25aak1qbHRaRU01VldWWVFteFZNazU1WVZoQ01Fd3liSHBqTTFac1kzazRlazE2WjNCTWJIaDFTVU5CWjBsRFFYRkpSbEp2WVZoTloySlhWakJoUnpsclNVaE9iMkl6Vm5OYVEwSnBXbE5DZG1SdFZubGpiV3hyV2tkV2RVbEhiSFZqTTFKc1dWZFJkVWxGV25aamFVSnNaVWRHZEdOSGVHeFBiSGgxU1VOQlowbERRWEZZUnpSblNVTkJaMGxEYjJkSlEwSnFZa2RHZW1ONVFrNWxWVlp6V2xjeGJHSnVVV2RhV0dnd1dsYzFhMk41UWsxaFdGSkdZa2RXZEZwWE5UQkpTSFJqWW1sQlowbERRV2RMYVVGblNVTkJaMWxZVGpWaWJVMW5XREprYkdSR1ZuZGFSMFl3V2xWT2RtSllRbk5hV0ZKc1MwTnJaMlV4ZUhWSlEwRm5TVU5CY1VsRFFXZEpRMEZuU1VkR00xbFhiREJKU0U0eFkwZFdlVXhzT1c1YVdGSldZMGRTYUdSSFZrUmlNakYzWWtkV01GcFRaM0JQTVhoMVNVTkJaMGxEUVhGSlEwRm5TVU5CWjBsSFJqTlpWMnd3U1VoU2IyRllUWFZZTWpFMVVUSm9jR0pIVVhWa1dFSnJXVmhTYkZFeU9YUmpSM2hzWkVkVk4xaEhOR2RKUTBGblNVTnZaMGxEUVdkSlNERmpZbWxCWjBsRFFXZExhVUZuU1VneFkySnBRV2RKUTBGblMyazVZMkpwUVdkSlEwSm1XakpXTUZaWVFtdFpXRkpzVVRJNWRHTkhlR3hrUjFWdlMxTkNOMWhITkdkSlEwRm5TVU5CWjBsSVNteGtTRlo1WW1sQ01HRkhiSHBNYkRreFkwZFNhR1JIVmxGamJUbDBZVmhPYkU4eGVIVkpRMEZuU1VneFkySnBRV2RKUTBGMlMybHdZMkpwUVdkSlEwRm5TMmxDUkdJeU5UQmpiVGx6WTNsQ00yRkhWakJoUjFaNVNVYzVlVWxITlhaa1EwSm5aRmhDYTFsWVVteFpRMEo2WVVjNU1XSkhVV2RaYlZWbldUSkdjMkpIVm10SlNHUnZXbGMwWjJSSGFHeEpSMVp6V2xjeGJHSnVVV2RqYlZaNFpGZFdlbVJJVG1OaWFVRm5TVU5CWjB0cFFtaGlhVUl4WTBkU2FHUkhWWFZKUlVvMVNVZFNiRnB0UmpGaVNGRnpTVWhTYjJGWVRXZGlWMVl3WVVjNWEwbEhSbk5rTWtZMVkzbENlVnBZVWpGamJUVjZTVWRDTUdOdVZteFpRM2RuV1c1V01FbElVbTloV0UxbldUSkdkVWxIU214WVJ6Um5TVU5CWjBsRGIyZFpNMVo2WkVjNWRHRlljR3hhUTBJd1lubENhbUl5TlRCamJUbHpTVWhrYjFwWE5HZGtSemhuWkZoQ2ExbFlVbXhNYkhoMVNVTkJaMGxEUVhGWVJ6Um5TVU5CWjBsRGIyZFJTRUpvWTIxR2RFbEdPV3BoUjBaMVdqSldhMVZJU25aalIxWjVaRWRzYkdONVFrNVpXRUZuWWpKWloxa3lhR2hpYldSc1drTkNkMk50T1hkYVdFb3dZVmRXZWtsSVpIQmtSMmRuWWpKNGEwbElXbWhpU0Zac1l6RjRkVWxEUVdkSlEwRnhUREY0ZFVsRFFXZEpTRTV2WWpOV2MxcEdWbmRhUjBZd1dsTm9abGt5YUdoaWJXUnNXa1pDZVdJelFteGpibEp3V2xoTmNFbElkR05pYVVGblNVTkJaMGxEUVdkamJWWXdaRmhLZFVsSVVubGtWMVUzV0VjMFowbERRV2RtVm5oMVNVTkJaMGxET0hGTGJIaDFTVU5CWjBsRFFYRkpSbFozV2tkR01GcFlUV2RrUjJoc1NVZFdjMXBYTVd4aWJsRjFTVVpTYjJGWVRXZGlWMVl3WVVjNWEwbElTbXhhYlhoc1dUTlNla2xJUW5saU0wSnNZMjVTTlVsSVdtaGlTRlpzWTNsQ01HSjVRbWhrU0ZKNVlWZEtNV1JIVm5wTWJIaDFTVU5CWjBsRFFYRkpSV3d3U1VkT2FHSnBRbWxhVTBKMlpHMVdlV050Ykd0YVIxWjFTVWhTZGtsSVNteGliVkpzWTJsQ2FHSnRVV2RoTWxac1kwTkNNV05IVW1oa1IxWnJTVWRXYzFwWE1XeGlibEZuVWtVNVRreHNlSFZKUTBGblNVTkJjVWxHVG14a1NGSndZbTFqWjJOSVNuWmpSMVo1WkVkc2JHTjVRbkJpYms1d1drZFZaMlJIYUhCamVVSjBXbGhTYjJJeVVXZGtNbXh6WWtOQmNXSnRPVEJMYVVJd1kyMXNibG95Vm5sWVJ6Um5TVU5CWjBsRGIyZFpWelYyWkVkb2JHTnBRakZqUjFKb1pFZFZkVmhITkdkSlEwRm5TVU53WTJKcFFXZEpRMEZuUzJsQ1FXTkhSbmxaVnpCbldESk9iMWxYTlc1YVYxSlJZMjA1ZDFwWVNqQmhWMVo2U1VVeGFHTkRRblphYVVKcVlVZEdkVm95Vm10SlNFSjVZak5DYkdOdVVuQmFXRTFuWkRKc01HRkRRblppUjFGblpHMUdjMlJYVm5wWVJ6Um5TVU5CWjBsRGIzWllSelJuU1VOQloyUllRbXRaV0ZKc1MwWTVhbUZIUm5WYU1sWnJWVWhLZG1OSFZubGtSMnhzWTNscloyVXhlSFZKUTBGblNVTkJaMGxEUW5CYWFVRnZaRWRvY0dONU5XWmpiVlp0WWtkV2FtUkhiSFZhTVVKNVlqTkNiR051VW5CYVdFMW5TVlF3T1VsSVZuVmFSMVp0WVZjMWJGcERRVzFLYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJSSGFIQmplVFZtWTIxV2JXSkhWbXBrUjJ4MVdqRkNlV0l6UW14amJsSndXbGhOZFdNeWJEWmFVMEVyU1VSQmNFbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU00ZGtsR1ZucGFVMEp0WWpOS1JsbFhUbTlKU0U1MlNVaFNiMkZZVFdka01qbDVZVE5OWjFwWVdteGlhVUp3V21sQ2JXSXpTWFppTWxsbllrYzVkbU5JVFdkWldFcHNTVWRPZG1KWVFuQmlSMVpyU1VoU2RrbEhXblpqYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjB4NU9HZGlSemwyWTBoTloxcFlhSGRhVjA0d1lWYzFia2xIUm5samJVWTFZekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RrUjJod1kzazFabU50Vm0xaVIxWnFaRWRzZFZveFFubGlNMEpzWTI1U2NGcFlUWFZhYlRsNVVsZEdhbUZEWjI5a2FYZG5ZWGxyWjFCVU5HZGtSMmh3WTNrMVptTklTblpqUjFaNVpFaHNWV0l3UmpCa1NFcHdXVzVXTUZwVGFISk1RMEl3WVVkc2VsY3lkR1JNUTBJeVMxTnJOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEl3WVVkc2VreHNPWGxhVjFweldsZE9NR0ZYTlc1VlNFcDJZMGRXZVdSSGJHeGplVUU1U1VoV2RWcEhWbTFoVnpWc1drUjBZMkpwUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQlowbERRakJoUjJ4NlRHdzVkRmxZU25KV1dFSnJXVmhTYkZwRFozQlBNWGgxU1VOQlowbElNV05pYVVGblNVTkJka3RwY0dOaWFVRm5TVU5CWjB0cFFrcGlibHAyWVRKV2EwbElaRzlhVnpWc1pHMVdlVWxJVW05YVUwSnNZa2RXZEZwWE5UQkpSMng2U1VoV2QxcEhSakJhVjFGMVNVVnNkR05IZUd4aVYxWjFaRU5DTUdKNVFuZGFXRXB0WWpOS2RGaEhOR2RKUTBGblNVTnZaMk5IT1hwa1F6RXhZMGRTYUdSSGJIVmFlVUl3V1ZoT2NtTjVRakpoVjBWblVrVTVUa2xGUmxGVFdFMXpTVWRhZG1OcFFteGxSMFowWTBkNGJFeERRbTFpTWs0eFl6SnNkVnA1UW1oaWFVSnNZa2RXZEZwWE5UQk1iSGgxU1VOQlowbERRWEZZUnpSblNVTkJaMGxEYjJkVk1sWXdaRWRzZFZwNVFuZGpiVGwzV2xoS01HRlhWbnBKUjJ4MVl6SnNhMXBUUWpCaFIyeDZTVWN4YkdSSGFIWmFRMEl6WVZkNGMwbElVbmxoVjJSdVdsaEpaMlJIYUd4SlIxWnpXbGN4YkdKdVVXZGtSemhuWkZoQ2ExbFlVbXhZUnpSblNVTkJaMGxEYjJkWlYyUm9ZVmMwWjFsWFdqQmFXRWxuWkVkb2NHTjVRakZqUjFKb1pFZFZaMWt6YkdwaVIxVm5XVEk1ZEdOSGVHeGtSMVo2VEd4NGRVbERRV2RKUTBGeFdFYzBaMGxEUVdkSlEyOW5VVWhDYUdOdFJuUkpSamxxWVVkR2RWb3lWbXRWU0VwMlkwZFdlV1JIYkd4amVVSk9XVmhCWjJJeVdXZFpNbWhvWW0xa2JGcERRbmRqYlRsM1dsaEtNR0ZYVm5wSlNHUndaRWRuWjJJeWVHdEpTRnBvWWtoV2JHTXhlSFZKUTBGblNVTkJjVXd4ZUhWSlEwRm5TVWhXZDFwSFJqQmFWMUZ2V0RKT2IxbFhOVzVhVjFKUlkyMDVkMXBZU2pCaFYxWjZTMU5DTjFoSE5HZEpRMEZuWmxaNGRVbERRV2RKUXpoeFMyeDRkVWxEUVdkSlEwRnhTVVZzZFdSdE9YSmFWMUZuWkRKb2JHSnBRakJoUjFWbldsZDRiR0pYVm5Wa1EwSndZM2xDYldGWVNucGtRMEl4WTBkU2FHUkhWbXRNYVVKS1lsaENjMXBYTVd4aWJsRm5aRWM0WjJOSFZubGFiVGw1WWxOQ2RtSnRWV2RrUjJ4MFdsWjRkVWxEUVdkSlEwRnhTVWhrZG1OdGMyZGlNalJuWkVkb2JFbEhWbk5hVnpGc1ltNVJaMWxYV2pCYVdFbG5aRmhDYTFsWVVteE1iSGgxU1VOQlowbERRWEZZUnpSblNVTkJaMGxEYjJkVk1sWXdaRWRzZFZwNVFuZGpiVGwzV2xoS01HRlhWbnBKUjJ4MVl6SnNhMXBUUWpCaFIyeDZTVWN4YkdSSGFIWmFRMEl6WVZkNGMwbElVbmxoVjJSdVdsaEpaMlJIYUd4SlIxWnpXbGN4YkdKdVVXZGtSemhuWkZoQ2ExbFlVbXhZUnpSblNVTkJaMGxEYjJkWlYyUm9ZVmMwWjFsWFdqQmFXRWxuWkVkb2NHTjVRakZqUjFKb1pFZFZaMWt6YkdwaVIxVm5XVEk1ZEdOSGVHeGtSMVo2VEd4NGRVbERRV2RKUTBGeFdFYzBaMGxEUVdkSlEyOW5VVWhDYUdOdFJuUkpSamxxWVVkR2RWb3lWbXRWU0VwMlkwZFdlV1JIYkd4amVVSk9XVmhCWjJJeVdXZFpNbWhvWW0xa2JGcERRbmRqYlRsM1dsaEtNR0ZYVm5wSlNHUndaRWRuWjJJeWVHdEpTRnBvWWtoV2JHTXhlSFZKUTBGblNVTkJjVXd4ZUhWSlEwRm5TVWRhY0dOdVRqQldXRUpyV1ZoU2JGcERhR1paTW1ob1ltMWtiRnBHUW5saU0wSnNZMjVTY0ZwWVRYQkpTSFJqWW1sQlowbERRamxZUnpVNVdFYzFabGxUUVRsSlIxcHdZbTFHYzJGWWNHeGFSSFJqWW1rNGNVdHNlSFZKUTI5blZGZEdlV0V6VFdkWk1uaG9Zek5OWjFsWVRXZGhSMFl5WVZjMWJrbEhXbkJpYld4NllVZFdhMGxIVG5sYVYwWXdZVmMxYmtsSVFubGlNMEpzWTI1U2NGcFlUWFZZUnpSblMyazVZMkpzVm5kYVIwWXdZVmMxYmxKWGVHeGlWMVoxWkVaMFpsbFdNR2RRVTBJd1kyNVdiRTh4ZUhWTWVUaHFTVWhPZG1SWVNtcGFWVEZvWTBoQ2NHSnRaRlpWYTNjNVpGaENhMWxZVW5CaWJXTjBXbGQ0YkdKWFZuVmtRelZ4WTNrMWRGbFlRV2xNUTBsMlMybHdZMkpwUVhGSlJVSnpZVmRPYkdKdVRteFlSelJuUzJsQ1JHSXpRalZqYld4dVlVaFJaMHRIVFhCSlJFbDNUVlJqWjFaSGFHeEpSa0oyWWtoc2RGcFlTV2RWU0VwMllXMVdhbVJEUWtKa1dGSnZZak5LZWt4cFFrSmlSM2RuWTIxc2JtRklVbnBKU0Vwc1l6SldlV1J0Vm10TWJIaDFTVU52WjFaSGFIQmplVUpxWWpKU2JFbEhNV2hsVTBKMlltMTROVWxIU214SlNGWjZXbGRSWjJSWE5XdGFXRWxuWkVkb2JFbEZTbFJTUTBKNlpFaHNjMXBUUW5OaFYwNXNZbTVPYkVsSFduWmtWelZyU1VkR01GaEhOR2RMYVVKdlpFaFNkMDlwT0haalJ6bHpaVmN4YkdOcE5XNWhXRkp2WkZkSmRXRlhPSFpVUld4RVVsVTFWRkpUTlRCbFNGSmpZbWxCY1VsR1VtOWFVMEpxWWpJeGQySkhWakJhVTBKNldsaFJaMkl5V1dkWldGWXdZVWM1ZVdONVFuUlpXR3RuV1cxVloxcHRPVEZpYlZGbldWaFNZMkpwUVhGSlIyZ3daRWhCTmt4NU9YZGlNbmcxWWxkV2VVeHRaSEJrUjJneFdXazFjR0o1T1VKV1ZsSkpWREZLVkV4dVVqUmtSbmgxU1VOdloxWkhhR3hKUjA1MllsaENjMXBZVW14SlNFNXNaRU5DZGxwcFFtcGlNalV3WTIxc2FXUllVblpqYmsxbllsZEdOVWxIU214SlIxcDJaRmMxYTBsSFJqQllSelJuUzJsQ2IyUklVbmRQYVRoMlkwYzVjMlZYTVd4amFUVnVZVmhTYjJSWFNYVmhWemgyVVRBNVQxWkdTa3BSYkZaVlZERktWRXh1VWpSa1JuaDFTVU52WjFFeU9XdGFVMEpyWVZoT01HTnRiR2xrV0ZKc1drTkNhV1ZUUWtoaU1qbHVZa2RWWjFsWVRXZGpSMFo1WkVOQ2RscHBRakJoUjFWblkwYzVjMlZYTVd4amFVSjNZMjA1Y1ZwWFRqQkpSMng2U1VkR2MyTXlPV05pYVVGeFNVaE9NVmx0Y0d4Wk0xRm5aRWM0WjFsWE5HZFpWMUpyWVZoU2NHSXlOV2hpUTBKS1ZVTkNlV0ZYWkc5a1NFMW5Xak5LYUdKdVVXZGFiVGt4WW0xUloxbFlVbU5pYVVGeFNVZG9NR1JJUVRaTWVUbDNZako0TldKWFZubE1iV1J3WkVkb01WbHBOWEJpZVRsUlVWWlNSbFJzVWxSTWJsSTBaRVo0ZFVsRGIzWllSelZxWWpJMWVtUkRRbk5hVjJSb1dUTnNSR1JZVGpCaU1qRkdZa2RXZEZwWE5UQkpSREJuUzBoU2FGb3dOV2hpVjFWelNVZE9jMWxZY0RaTFUwRTVVR2xDTjFoSE5HZEpRMEZuWkRKc2RWcEhPVE5NYlU0eFl6TlNkbUpWVm5OYVZ6RnNZbTVTZWt4dFVteGFiV3gxV2xOb01GbFhaRTlaVnpGc1RFTkNhbUpIUmpabGFXczNXRWMwWjBsRFFXZE1lVGhuVVRKR2VtUkRRbWhqZVVKb1ltNXJaMWx0Vm1wWldGWjZXbE5DVlZWNVFtdGlNbFo2WW1sa01FbElTbXhaTWpsdVltMXNObHBUUWpCaFIxVm5ZMjFXTUdSWVNuVkpTRkkxWTBkVloxbFlUV2RaYlZad1ltMWpaMWxXZUhWSlEwRm5TVU00ZGtsSVRqRlpibEkxWTBkVloySXlXV2RrUjJoc1NVZFNiRmt5T1hsWldGSnNXa05DYW1KSFJucGplVUl6WVVkV2RVbEhUbk5aV0hBMlNVZHNla2xJVWpWalIxWnJTVWRHZWxoSE5HZEpRMEZuVEhrNFoxbEZUblppYms0d1kyNVdhbVJIT1hsUVJXaFZWRlY0Um1KSFZuUmFWelV3VUcxQloxcHRPWGxKU0U1MllsZFZaMk50Vm1oak1qbDFUR3g0ZFVsRFFXZEpRemgyU1VkQ1JHSXlOWHBrU0VveFdUTlNkbU5xZUVsV1JURk5VbGQ0YkdKWFZuVmtSRFZuU1Vkc2VrbEhhR3hpU0VKdFpGZDNaMlJIT0dkaVYwWnlXbE5DZW1SWVNteEpTRkp2V2xOQ2ExcFhUblpqYlVZd1lqTkpaMkZZVG1OaWFVRm5TVU5CZGt4NVFtaGpTRUp6WVZkV2EwbElVblpKUjFaeldsY3hiR0p1VW5wSlIyaDJaREpXTWxwWVNYVllSelJuU1VOQloweDVPR2RrU0U1ellWYzFNRTl0VW5Cak1rWnBZa2RWZEdKdFZqUmtRekZ6WVZjMWJFOXROWFpNVjBaMVpWWjRkVWxEUVdkSlNFcHNaRWhXZVdKcFFtcGlSMFkyWldwMFkySnVNRGRZUnpWcVlqSTFlbVJEUW5wa1IwWjFXa2RHZVZwRlRqRmpNMUoyWWxWV2MxcFhNV3hpYmxGblVGTkJiMlJIUm01VWJVWjBXbE4zWjFwSFZucFpNMHB3WTBoU2RtTnBhMmRRVkRSblpURjRkVWxEUVdkSlIwNTJZbTVPTUVsSWMyZGhNbXgxV2tOM1oxcFhlR3hpVjFaMVpFaE5aMlpUUVRsSlIxSnNZekpPZVdGWVFqQmlNMGszV0VjMFowbERRV2RqYlZZd1pGaEtkVWxJZEdOaWFVRm5TVU5CWjBsRFFXZGhNbXgxV2tONFkySnBRV2RKUTBGblNVTkJaMXBYZUd4aVYxWjFaRWhOYzFoSE5HZEpRMEZuU1VOQlowbERPSFpKUmxKdllWaE5aMWt5Um5OaVIwcG9XVEp6WjJGWVRXZFpNa1p6WWtkV2EwbEhPWFZaTWxWblpFZG9iRWxIVG5OWldFNTZTVWRzZWtsSE9UQmhSMVo1WkRKc2VscFRRbTFrVjNoelpWTkNhMXBYV25CaWJWWnJXRWMwWjBsRFFXZEpRMEZuU1VkYWNHSnRiSHBoUjFaNVMwZE9jMWxZY0RaTFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRak5oVnpWcllqTmpkVmt6Vm5wa1J6bDBVbGQ0YkdKWFZuVmtTRTExV2tkV2JXRlhOV3hMU0ZKb1dqQTFhR0pYVlhOSlIwNXpXVmh3Tmt0VWRHTmlhVUZuU1VOQlowbERRV2RtVm5oMVNVTkJaMGxJTURkWVJ6VTVUekY0ZFV4NWIzRllSelJuUzJsQ1JHSkhSbnBqZVVKcldsZE9kbU50UmpCaU0wbG5XbTFHYW1SSE9YbGxVMEl3WVVkR01FbEhVbXhhYld4MVdsaE5aMlJIYUd4SlIxSnNXVEk1ZVZsWVVteGFRMEpxWWtkR2VtTjVRbWhqZVVKb1NVZE9NV016VW5aaVUwSnNZa2RXZEZwWE5UQk1iSGgxU1VOd1kySnBRWEZKUjBKbldVWjRkVWxEYjJkUlIwNHhZek5TZG1KVlZuTmFWekZzWW01UmIwb3lNVFZNVjFaeldsY3hiR0p1VVc1TFZuaDFTVU52WjFreWVHaGpNMDFuVkZoc1JtSkhWblJhVnpVd1NVaDBZMkpwUVhGSlEwRm5ZMjFXZFZwSFZubExRMnRuWlRGNGRVbERiMmRKUTBGblNVaEtiR1JJVm5saWFVSnZaRWN4YzFsSFFUZFlSelJuUzJsQlowbElNV05pYVVGeFNVZ3hZMkpwUVhGSlIwSm5XVVo0ZFVsRGNHTmlhVUZ4U1VWQ2QxbFlTbWhpVTBJd1dWZGtUMWxYTVd4SlJsSnZXbE5DZFZsWE1XeEpSemx0U1VoU2IxcFRRbXBrV0U0d1lqSXdaMXBYZUd4aVYxWjFaRU5DTUdKNVFtdGFWMXB3WW0xVmRWaEhOR2RMYVRsalltMVdOR05IT1hsa1EwSnFZakkxZW1SRFFtcGtXRTR3WWpJeFJtSkhWblJhVnpVd1NVUXdaMHRJVW1oYU1EVm9ZbGRWY0VsRU1DdEpRMmhxWWtkR2VtTXdPWGxTUjFaNldUTktjR05JVW5aamFXdG5VRlEwWjB0SVVqVmpSMVoyV21sQ2FtSkhSbnBqTURsNVVrZFdlbGt6U25CalNGSjJZMmxCT1ZCVU1HZEtNbG94WW0xT01HRlhPWFZLZVd0blVERjRkVWxEUVdkSlIzaHNXakpHYW1WVlRqRmpNMUoyWWxWV2MxcFhNV3hpYmxGdlpFZEdibFJ0Um5SYVUzZG5XVEo0YUdNelRsQmphMUpzWXpKT2VXRllRakJpTTBsd1NVUndZMkpwUVdkSlEwSjZaRWRHZFZwSFJubGFSVTR4WXpOU2RtSlZWbk5hVnpGc1ltNVJiMlJIUm01VWJVWjBXbE4zWjFreWVHaGpNMDVRWTJ0U2JHTXlUbmxoV0VJd1lqTkpjRTh4ZUhWWk1qbDFZek5SWjJNelVtaGliVkpvWTIxU1VXTnRPWGRhV0Vvd1pWTkJPVWxEYUhaalNGSndZakkxZWt4RFFteGlSMVowV2xjMU1FdFRRVGxRYVVJM1dFYzBaMGxEUVdkTWVUaG5WakpvYkdKcFFtdGFWMDUyWTIxR01HRlhOVzVKUjBaMVNVZEdhbGt5Vm5wak1qbDVURU5DZDFsWVRucEpSMnd3U1VoU2IyTnRPVEZhTW1kbldWYzFhMGxIUm10YVEwSjNZMjA1ZDFwWVNqQmxVMEowV2xoU2FGcEhSakJaVXpWalltbEJaMGxEUVhaTWVVSlBZak5TYkV4RFFqQmhSMVZuV1Vkb2FHTXdPVE5pYkVKNVlqTkNiR051VWpWWlEwSnFZVWRXYW1GNVFuQmlhVUpuV1ROS2JGbFlVbXhWU0VwMlkwZFdlV1JJYkdkSlIxWjFZek5XZVZwWVRXZGtNbFZuV2tjNWRVb3pVbU5pYVVGblNVTkJka3g1UW5wa1J6bDBZME5DZG1SdFZubEpTRkp2V2xOQ01XTXlWbmxLTTAxbldWZE9hbHBZVG5waU0wbDFXRWMwWjBsRFFXZGhWMWxuUzBkV2MxcFhNV3hpYmxGMVlUSnNkVnBEUVRsUVZEQm5Takl4YkdSSGFIWmFRMk5uU21sWloxcFhlR3hpVjFaMVpFTTFhMXBZVG1wamJXeDNaRWM1ZVVsRFdXMVlSelJuU1VOQlowbERRV2RKUTBWdlNqTmFhR0pJVm14S2VVSndZbWxDYkdKSFZuUmFWelV3VEcxU2JHTXlUbmxoV0VJd1lqTkpjRXRUUWpkWVJ6Um5TVU5CWjBsRFFXZEpTRXBzWkVoV2VXSnBRbEJaYlhCc1dUTlJkVmxZVG5waFYyUjFTMFU1YVdGdFZtcGtRelZvWXpOT2NGb3lORzlsTXpCelNVZFdjMXBYTVd4aWJsRndURU5DTjBsSFduQmliV3g2WVVkV2VVdEhUbk5aV0hBMlMxTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxa3llR2hsYm05MVdUTktiRmxZVW14VlNFcDJZMGRXZVdSSWEyOWFWM2hzWWxkV2RXUkROWEphV0d0elNVYzVkMlJIYkhaaWJrMXdUekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RtVTBJNVMxUjBZMkpwUVdkSlEwSTVXRWMwWjBsRFFXZGFWM2g2V2xOQ04xaEhOR2RKUTBGblNVTkJaMGxET0haSlIwNTVXbGRHTUZwV1FubGlNMEpzWTI1U05VdERhMmRrUjBaeVdsaE5aMWt5Um5sYVUwSjJXbWxDYTFwWFduQmliV3gxV25sQ01HRkhWV2RqU0VwMlkwZFdlV1JJYTNOSlIwb3haRU5DTTFwVFFucGtSMnh6WWtaNGRVbERRV2RKUTBGblNVTkJka3g1UW5Sa1dFNHdTVWhLYkdSSVZubGlhVUo2WWpJeGJFbEhkSEJpYlZGbllqSlpaMXBIVm5wWk0wcHdZMGhTZG1OcGQyZGpNamhuWTIxV01HUllTblZKUjBWbldrZFdlbGt6U25CalNGSjJZMmxDYldJelNXZFpWelZqWW1sQlowbERRV2RKUTBGblRIazRaMlJYTlRGak1sWnJTVWhDZVdJelVuWmtTR3gzV2xOQ2JXRlhWbk5hUXpSblZrZG9iRWxIV25CaWJXeDZZVWRXZVVsSFRtaGlSM2g2U1VkT2VWcFhSakJhVmtKNVlqTkNiR051VWpWTFEydDFXRWMwWjBsRFFXZEpRMEZuU1VoS2JHUklWbmxpYVVJM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFuSmhWelZyVDJsQmJscHRiR3hpUjFGdVRFWjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGhNbFkxVDJsQ1ZHVlhNV2xpTW5kdlMxTjRZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTRUp6V1ZkT2JHSlhWblZrUkc5blNqSTVNMkpwWTNOWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ2ExcFlUbXBqYld4M1pFYzVlVTlwUWpkbVUzaGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERPSFpKUm1SdldsYzBaMUZIU21oWmJWWnpURE5DYzJSWFpIQmlhVEYzWTIwNWQySXpUbWhpUXpGcldsZE9kbU50UmpCaU0wcDZTVWRzZEdOSGVHeGlWMVoxWkVoTloyRlhOWEJrUjJ4b1lrZHNObHBZU25wTVJuaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RhUnpoblpFZG9jR041UW5CaWJrNHdXbGRHYTBsSE9XMUpTRkp2V2xOQ2NHSnRiREJoVjBaellWaHdiR05wUW1sYVYzaDJaSGswWjFVeVZteFBiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMHg1T0dkaFNGSXdZMGhOTmt4NU9XNWhXRkp2WkZkSmRWa3lPWFJNTWtwb1dXMVdjMHd5U21oWmJWWnpUREpzZW1NelZteGplVGcxVFdwWmQwbEhWalJrU0Vwb1kzcHZaMWN4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuVEhrNFowbERRamRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CZGt4NVFXZEpRMEZuWVRKc2RWcEViMmRLTW14MVlWaFNjRmxYZUhCbGJWWjVTbmw0WTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUXpoMlNVTkJaMGxEUW5kaVIwWnFXbGN4YkdKdVVUWkpRMlIyWkRJMGJreEdlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5USGs0WjBsRFFXZEpSMngxWVZoU2NGbFhlSEJsYlZaNVQybENhMXBZVG1wamJXeDNaRWM1ZVV4dGJIVmhXRkp3V1ZkNGNHVnRWbmxNUm5oMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjB4NU9HZEpRMEk1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVhaTWVVSmtURVo0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RoVnpWd1pFZHNhR0pIYkRaYVdFbHZTMU5DTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMkZYV1dkTFNGSTFZMGRXZGxwcFFteGlSMVowV2xjMU1FeHRiSFZoV0ZKd1dWZDRjR1Z0Vm5sSlJEQTVVRk5CYmxwdVZuVlpNMUp3WWpJMGJrdFRRamRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoU2IyRllUbUphVjNoc1lsZFdkV1JETlhKYVdHeGtTVVF3WjFwWGVHeGlWMVoxWkVNMWNHSnRiREJoVjBaellWaHdiR05wTldwWlYzaHpTMGhTYjJGWVRYQlBNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNERmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElNSE5ZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DYldGWE5YQmpNbWhzWTJsb2FtSkhSalpsYVd0blpURjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VkT2MxbFljRFpNYlU1NVdsZEdNRnBXUW5saU0wSnNZMjVTTlV0SFZuTmFWekZzWW01UmRXRXlWalZNUTBKMlkwaFNjR0l5TlhwTFZIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElNV05pYVVGblNVTkJaMGxEUVdkbVZIUmpZbWxCWjBsRFFqbFlSelU1VHpGNGRWa3lPWFZqTTFGbllrZFdibGxYVGpWVlNFcDJZMGRXZVdSSWEyZFFVMEZ2WWpOQ01HRlhPWFZqZVhkblkwaEtkbVJIT0hOSlJ6Vm9ZbGRWY0VsRU1DdEpTSFJqWW1sQlowbERRbmRqYlRrd1luazFhbUl5Tlhwa1NFb3hXVE5TZG1Oc2VIVkpRMEZuU1VOQlowbERRWFZaTTBwc1dWaFNiRlZJU25aalIxWjVaRWhyYjJKdFJuUmFVM2RuWWpOQ01HRlhPWFZqZVdzM1dFYzFPVTh4ZUhWTWVXOXhXRWMwWjB0cFFrSkpTRUo1WWpOQ2JHTnVValZKUjFKc1dUSTVlVmxZVW5aamFVSXpZVWRzYW1GRFFtcGpiVlpvWkVkV2VrbEhSV2RVUjJ3d1VsZDRiR0pYVm5Wa1EwSjNZMjA1ZDFwWVNqQmxVMEl6WVVkc2FtRkRRbmxhVjFweldsZE9NR041UW1oWVJ6Um5TMmxDYW1JelNubGFXRTUzWWpJMWEyRlhOVzVKUjBZd1pFaEtjRmx1VmpCYVUwSXlXVmQ0TVZwVE5HZFJVMEpuVlVoS2RtTkhWbmxrU0d4RldsZE9jMWxZU21oa1IyeDJZbTFCWjJKWFJqVkpSemwzWkVkc2RtSnRSbk5pU0d0bldXMVdZMkpwUVhGSlNFNHhZMGhDYzJGWFZtdEpTRkoyU1VkT2RtSnRXbkJhTTFaNVdsTkNkMk50T1hkYVdFb3daVk5DYlZwWFJqQmtXRXBzWTNrMVkySnBRWEZZUnpSblMybENWV0ZIYkhwSlIxSnNXVEk1ZVZsWVVuWmphVUo2WVVjNU1XSkhVV2RpTWpWelpWTkNhVnBUUWpGak1sWnJTVWRhZG1OcFFuZGtWMHB6WVZkTloxcHRiR3hpUjFKNlRHbENVV050YkRKWldGSnNTVWM1ZVVsSVFubGlNMUpzV1ROU2JGcEdlSFZKUTI5bldtMXNiR0pIVW5wSlNFNXZZak5XYzFwRFFqRmpNbFZuWkVkb2JFbEhiSFZrUjFaNVltMUdjMVZJU25aalIxWjVaRWhyWjFwSFZtcGlNMHBvWkVjNWVVeHNlSFZKUTNCalltbEJjVWxGUW14bFIwWjBZMGQ0YkZoSE5HZExiSGgxU1VOdlowbERRV2RKUjA1eldWaE9la2xGTVRWU1YzaHNZbGRXZFdSRFFqZFlSelJuUzJsQlowbERRV2RKUTBKQlkwaEtkbU5IVm5sa1NHdHZaWGxDTUdWWVFteFBhVUpEWWpJNWMxcFhSblZKU0RCd1dFYzBaMHRwUVdkSlEwRm5TVU5DYW1KSGJHcGhNbFpyU1VRd1oxcHRSbk5qTWxVM1dFYzBaMHRwUVdkSlEwRm5abFo0ZFVsRGNHTmlhVUZ4U1VWQ1JtVklRblpqYmxKRldsZE9kbU50UmpCYVYxSktaRWRXZEdNeGVIVkpRMjkyV0VjMWJHVklRblpqYmxGbldtNVdkVmt6VW5CaU1qUm5ZMGhLZG1OSFZubGtTR3R2WWpOQ01HRlhPWFZqZVd0blpURjRkVWxEUVdkSlF6aDJTVWhTZW1KSGJIVmtSSEJyWVZoT2FGbHRlR3hNVnpWc1pVaFJkR0pIYkhWYVZIQjFZbmt4YUdKdWEyZGFSMVpxWWpOS2FHUkhPWGxZUnpSblNVTkJaMk50VmpCa1dFcDFTVU5vZDJOdE9UQmlNRGw1VWtkV2Vsa3pTbkJqU0ZKMlkybDNaMkp0Um5SYVUydG5VRlEwWjB0SE5XaGlWMVZuU1ZRd09VbElWblZhUjFadFlWYzFiRnBEYTJkUU1YaDFTVU5CWjBsRFFXZEpRMEp6V2xka2FGa3piRkZqYlRsM1dsaEtNR1ZUYUhaalNGSndZakkxZWt4RFFuZGpiVGt3WWpBNWVWSkhWbnBaTTBwd1kwaFNkbU5wZDJkaWJVWjBXbE5yWjA5c2VIVkpRMEZuU1VOQlowbERRbnBrUjBaMVdrZEdlVnBHUW5saU0wSnNZMjVTTlV0SE9YZGtSMngyWW01TmMwbElRbmxpTTFKMlZETktSVnBZVG1wamJXeDNaRWM1ZVV0VWRHTmliakZqWW1rNGNVdHNlSFZKUTI5blVrZFdhbUpIUm5sYVdFMW5XVk5DZDJOdGJESlpXRkpzU1VjNWVVbElRbmxpTTFKc1dUTlNiRnBEUW5kamJUbDNXbGhLTUdWVFFqQmhSMFl3U1VoT01HRlhlSE5KU0ZKNVlWZGtibHBZU25wSlNGWjNXa2RHTUZwWVRXZGtSemhuWkVkb2JGaEhOR2RMYVVKc1lrZFdkRnBYTlRCSlNHUnZXbGMwWjJGWVVXZFpNbWhvWW0xa2JHTjVOV05pYVVGeFdFYzBaMHRwUWxGamJUbDNXbGhLTUdGWFZucEpSMUpzV1RKNGFHTnRWbXRKU0ZKdllWaE5aMlF5UmpWSlJ6RXhZek5SWjJKdE9UQkpSMHBzU1VoV2VscFhVV2RhYmtwMllsTkNTVlpGTVUxSlJ6bDVTVVZvVlZSVmQyZGtSMVowWTBkNGFHUkhiSFZhTVhoMVNVTnZaMk16Ykhwa1IxWjBZM2wzWjJSSGFHeGxVMlI1V2xOQ2VtSXllR3hpU0d0bldtMDVlVWxJUW5saU0wSnNZMjVTY0ZwWVRXZGhWelV3V2xoS2RWbFhkMmRrUnpoblpFZG9iRWxIVm5OYVZ6RnNZbTVSZFVsR1VtOWFXRTVzV0VjMFowdHBRbmRqYlRsM1dsaEtNR0ZYVm5wSlJ6Rm9aVk5DYVZwVFFubGFWelZvWWxkV2EwbEhTalZKUnpsM1pFZHNkR0ZZY0doa1IyeDJZbWxDTUdJeU9YTmplVUp6WVZkMGJFbEhUbk5pTTA0eFkyMVZaMWt5T1hSalIyeHpXbGhKZFZoSE5HZExhVGxqWW0xV05HTkhPWGxrUTBKdFpGYzFhbVJIYkhaaWFVSndZbTVTYkdOdE5XaGlSa0o1WWpOQ2JHTnVValZMUnpsM1pFZHNkbUp1VFhCSlNIUmpZbWxCWjBsRFFubGFXRkl4WTIwMFoyTklTblpqUjFaNVpFaHJiMlY1UW1oa1NGSjVZVmRLTVdSSFZUWkpSMXBvWWtoT2JFeERRbTlaV0U1RVlVZEdkVm95Vm10UGFVSjJZMGhTY0dJeU5YcEpSREE1VUZOQ2RXUlhlSE5KU0hnNFNVYzVkMlJIYkhaaWJrMW5VRlF3T1VsSVduWmhWMUZuVFVOQkwwbElXblpoVjFGblRVTkJOa2xIT1hka1IyeDJZbTVOZFdGSFJucFJNbWhvWW0xa2JGcERRamxMVkhSalltNHhZMkpwT0hGTGJIaDFTVU52WjFGVFFuZGpiVGwzV2xoS01HVlRRbXRhVjA1MlkyMUdNR0l6U1dka1IyaG9aRU5DYW1JeU5USmFXRW93WTNsQ2FFbEhUbk5aV0U1NlNVaENlV0l6UW14amJsSTFTVWRzZFdSSE9HZFpVMEp1V2xoU01GcFlTV2RrUjJob1pFWjRkVWxEYjJkYVdHaHNXVE5XTUZwWVRXZFpVMEo0WkZkV2VXVldUbXhpUjFacVpFYzVlVWxIT1hWSlNGSnZXbE5DYkdKSFZuUmFWelV3U2pOTloyTnRWblZhUjFaNVZXMDVkbVJETldOaWFVRnhXRWMwWjB0cFFrRmpSMFo1V1Zjd1oyTXlWbk5hVjA0d1lqTkpaMUZUUWtWVU1ERlVaRWhLY0dKdFkyZFpNamwxWkVkR2NHSnRiSFZhZVVKMlltMVZaMkl6U1dkaVZ6bDVXbE5DZWxwWGVHeFpNMUoyWTI1TloyUkhPR2RpVjBZd1dUSm5kVmhITkdkTGJIaDFTVU52WjFVeVZteFBhVUp2WkVoU2QyTjZiM1pNTWxKc1pHMVdjMkl6UW14amFUVjBZak53Y0dKSGVHaE1iVGw1V25rNWJHSnBNVlpWZVRscllqSk9la3d4Wkd4WmFUbENWVVZyZGxKSE9XcGtWekZzWW01UmRtTllWbXhqYm14VVdsZDRiRmt6VW5aamJIaDFTVU53WTJKcFFYRkpSVUpzWlVkR2RHTkhlR3hZUnpSblMyeDRkVWxEYjJkSlEwRm5TVWRPYzFsWVRucEpSVEUxVWxkNGJHSlhWblZrUTBJM1dFYzBaMHRwUVdkSlEwRm5TVU5DUVdOWVZteGpibXR2U25sT2JXRllTbnBrUTJOd1dFYzBaMHRwUVdkSlEwRm5TVU5DYldGWVNucGtSSFJqWW1sQmNWaEhOR2RMYVVGblNVTkJaMGxEUW5sYVZ6VnJXbGhKYjB0VFFqZFlSelJuUzJsQlowbERRV2RKUTBGblNVaEtiR1JJVm5saWFVSnZaRWN4YzFsR2VIVkpRMjluU1VOQlowbERRV2RKUTBGblNVUjRhMkZZV1dkaFYxRTVXRU5LYldGWVNucGtSbmRwVUdwM2RscEhiREpRYkhoMVNVTnZaMGxEUVdkSlEwRm5TVU5CWjBsRWVHdGhXRmxuWVZkUk9WaERTbnBhVjA1MlltMVNZMGxxTkRoTU1sSndaR28xWTJKcFFYRkpRMEZuU1VOQlowbERRV2RaUkhSalltbEJjVWxEUVdkSlEwRm5TVWd4WTJKcFFYRkpRMEZuU1VOQ09WaEhOR2RMYkhoMVNVTnZkbGhITld4bFNFSjJZMjVSWjFwdVZuVlpNMUp3WWpJMFoyTllWbXhqYm10dll6SldjMXBYVGpCaU0wbHdTVWgwWTJKcFFXZEpRMEo1V2xoU01XTnROR2RMU0VKNVlqTlNkbFF6U2tWYVdFNXFZMjFzZDJSSE9YbE1RMEpqWW1sQlowbERRWFpNZVVJd1l6SjRjR0p1VVRaYVIyeDZXVmRLYzFwVE1YVmFXR2d3VEZkNGNHSnRWVFppYlRoMFdWYzFOVWxIVW14Wk1qbDVXVmhTZG1Oc2VIVkpRMEZuU1VjMWFHSlhWWEJKUkRBclNVaDBZMkpwUVdkSlEwRm5TVU5CWjFreU9YVmpNMUZuV2tkV2Vsa3pTbkJqU0ZKMlkybEJPVWxJZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1Vka2JHUkRaM0JKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEo1V2xoU01XTnROR2RrUjJod1kzazFlVnBYTld0YVdFcFRZakk1TUV4dVJqRmFXRW8xVlRKV2MxcFhUakJpTTBsdll6SldjMXBYVGpCaU0wbHdUekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RtVTNoalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSFZuVmtWekZzWTIxR2FXSkhWVFpKU0ZKNVpGZFZjMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEpxWWpJMWJXRlhaREZqYlVacFlrZFZOa2xJVW5sa1YxVnpXRWMwWjBsRFFXZEpRMEZuU1Vnd04xaEhOR2RKUTBGblNVTkJaMGxJU214a1NGWjVZbWxCYjJKdFJuUmFVMEZvVUZRd1oyUlhOV3RhVjFwd1ltMVdhMHRUUVM5WVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ2MxcFhaR2haTTJ4U1pGZFdlV1ZUYUd0YVdFNXFZMjFzZDJSSE9YbE1RMEozWTIwNU1HSXdPWGxTUjFaNldUTktjR05JVW5aamFYZG5ZbTFHZEZwVGEyZFBiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMk16VW1oaWJWSm9ZMjFTVW1SWFZubGxVMmhyV2xoT2FtTnRiSGRrUnpsNVRFTkNkMk50T1RCaU1EbDVVa2RXZWxrelNuQmpTRkoyWTJsck4xaEhOR2RKUTBGblpsUjBZMkp1TVdOaWFUaDJTVVUxZG1SSFZYTkpSMngxU1VoU2IxcFRRbTFrV0ZJeFkyMVZjMGxJWkd4SlJ6Rm9aVk5DYkdWSVVteGliVkZuWkVkb2NHTjVRbXRhVjA1MlkyMUdNR0l6U1dka1J6aG5Zek5XZDJOSE9YbGtRMEl3WVVkVloyUllUbXhKUjA1b1l6SldZMkpwT0haSlNHUnZXbGhLYkVsSVVtOWFVMEo0WkZkV2VXRlhWbXRKUjFaeldsY3hiR0p1VVdkaVYwWTFTVWMxYkZwWFVXZGtSemhuV2tjNFoyUXlPWGxoZVVJd1lubENhVnBYVG5aaVYxVm5ZMjFXYUZwSWEyZGtSemhuWVZjMU1GcFlTbWhaTTFKalltazRka2xJWkhCa1IyZG5TMGRWZFZwNU5HZGlSemxvV2tOQ2VtSXlNV3hKUjJ4MFkwZDRiR0pYVm5Wa1IwWXdZVmM1ZFVsSFRuWmFSMVZ3VEdsQ1NscHBRbnBpZVhkblpESlZaMkpYYkc1aFNGRm5XbGQ0YkZrelVXZGtSemxqWW1rNGRrbEhSbXRhUTBKb1NVaE9iRmt5T1hWYVEwSm9ZMjFrTVdKWFZuVmtRMEpyV2xkYWNHSnRiSFZhZVVKb1NVZGFNV0p0VGpCaFZ6bDFTVWhTYjFsWVVXZFpNa1oxU1VkS2JFbElTakZpYVVJd1lubENkRmxYZEd4SlNGSnZXbFo0ZFV4NU9HZGpXRlpzWTIxc2JGcERRbXhpUjFaMFdsYzFNRWxIZUhaWlYxSnNXa001TVdOSFVtaGtSMVpyVEROS2JGbFhValZNYkhoMVRIbHZjVmhITkdkTGFVSkNTVWhDZVdJelFteGpibEkxU1VkU2JGa3lPWGxaV0ZKMlkybENNR0ZIUmpCSlIwNTJZbTVhYkdOdVVucEpSMFZuV1RKNGFHTXpUV2RqU0VwMlkwZFdlV1JJYTJkaFZ6VXdZbmxDYUVsSFpHeGtTRkpzWTJsQ01HRkhSakJZUnpSblMybENlVnBZVWpGamJUVjZTVWRGWjJOSVNuWmlWMng2V2xOQ01HRkhSakJKU0Vwc1l6STVjMlJ0Vm5wSlNGSjJTVWhTYjFwVFFubGFXRTR4WWtoUloySXlXV2RaVTBKNFpGZFdlV1ZXVG14aVIxWnFaRWM1ZVVsSE9YVkpTRkp2V2xaNGRVbERiMmRhVjNoc1lsZFdkV1JEWkhwSlNFcHNZbTFTYkdOc1NuWmlNMUZuV2tjNWRWcFRRbWhhYmxKc1kybENNR0ZIVldkYVYzaHNZbGRXZFdSRFpIcEpSMEl4WTBkU2FHUkhWa1JpTWpGM1lrZFdNRnBYUVdkalNFcDJZbGRzZWxwV2VIVkpRMjluWTIxV2VtSXllREphV0UxMVNVWmtiMXBYTkdka1IyaHNTVWhHTVZwWVNuQmFWMUZuWTBoS2RtTkhWbmxrU0d0bllsZEdOVWxIVG05WlZ6VnVXbE5DTTJGWVVtOUpSMVp6V2xjeGJHSnVVV2RqTTFKb1pFZFZjMGxJVW05aFdFNWpZbWxCY1VsSFVteFpNamw1V1ZoU2RtTnBRbXBaVnpSbldXMVZaMlJZVG14YVEwSndZbTVPTUZwWFJtdEpSemx0U1VoS2JHTllWbkJqYld4MVdubENNV015Vm5samVVSXdZbmxDYUdReVJuQmtRMEl3WVVkV1kySnBRWEZKUjBJeFkwZFNhR1JIVmtSaU1qRjNZa2RXTUZwWFFXZFpiVlp0WWpOS2JFbEhSbXBaTWxaNll6SnNkVnA1UWpCaFIxVm5ZMGhLZG1OSFZubGtTR3QxV0VjMFowdHNlSFZKUTI5blVVaENhR050Um5SSlNFNXNZa2RXYW1SSE9YbEpSVVZuVWtVNVRsVXpVbmxoVnpWdVNVZE9kbUp1VW1oaFZ6VndZbTFqWjJJeU5XeEpSemw1U1VjeGRtTnRWV2RqTWxaeldsZE9NR0l6U25wSlNGSjJTVWN4YUdSSFRtOU1iSGgxU1VOd1kySnBRWEZKUms1c1dsUnZaMkZJVWpCalNFMDJUSGs1YTFwWVdteGlSemwzV2xoSmRXSlhPVFpoVjNoeldWTTFkbU50WTNaYVZ6UjBWbFpOZGxwSE9XcGplVGxZV2xkSmRsRldRa3BNTUZKMldUTldkRnBYTlRCTU0wWXhXbGhLTlZVeVZuTmFWMDR3WWpOS1kySnBRWEZZUnpSblMybENRVnBZYUdoaVdFSnpXbFo0ZFVsRGNHTmlhVUZ4U1VOQlowbERRbXBpUjBaNlkzbENUbVZWVm5OYVZ6RnNZbTVSWjJVeGVIVkpRMjluU1VOQlowbERRV2RSU0VZeFdsaEtOVkZZVGpWaWJVMXZTbmxPYldGWVNucGtRMk53V0VjMFowdHBRV2RKUTBGblNVTkNiV0ZZU25wa1JIUmpZbWxCY1ZoSE5HZExhVUZuU1VOQlowbERRbmxhVnpWcldsaEpiMHRUUWpkWVJ6Um5TMmxCWjBsRFFXZEpRMEZuU1VoS2JHUklWbmxpYVVKdlpFY3hjMWxHZUhWSlEyOW5TVU5CWjBsRFFXZEpRMEZuU1VSNGEyRllXV2RoVjFFNVdFTktiV0ZZU25wa1JuZHBVR3AzZGxwSGJESlFiSGgxU1VOdlowbERRV2RKUTBGblNVTkJaMGxFZUd0aFdGbG5ZVmRST1ZoRFNucGFWMDUyWW0xU1kwbHFORGhNTWxKd1pHbzFZMkpwUVhGSlEwRm5TVU5CWjBsRFFXZFpSSFJqWW1sQmNVbERRV2RKUTBGblNVZ3hZMkpwUVhGSlEwRm5TVU5DT1ZoSE5HZExiSGgxU1VOdlowbERRV2RKUXpoMlNVZFdOR1JIVm5saWJVWnpTVWhXZWxsWFpHeFlSelJuUzJsQlowbERRV2RaV0U0MVltMU5aMXBIT1ZSaU1qRnNaRWRvY0dKdFpGaGhXRkp2VW0xc2VXTXpVVzlMVTBJM1dFYzBaMHRwUVdkSlEwRm5TVU5vYUdReVJuQmtRMEpvVkZoc1JtSkhWblJhVnpVd1RHMWFjR051VGpCTFV6VnJZakZPZG1KWFZqQmhSMngxV25sbmNFOHhlSFZKUTI5blNVTkJaMGxJTVdOaWFVRnhUREY0ZFZwWWFIZGlNMG93U1VkYU1XSnRUakJoVnpsMVNVaEdNVnBZU2pWUldFNDFZbTFOYjJNeVZuTmFWMDR3WWpOSmNFbElkR05pYVVGblNVTkNlVnBZVWpGamJUUm5TMGhDZVdJelVuWlVNMHBGV2xoT2FtTnRiSGRrUnpsNVRFTkNZMkpwUVdkSlEwRjJUSGxDTUdNeWVIQmlibEUyV2tkc2VsbFhTbk5hVXpGMVdsaG9NRXhYZUhCaWJWVTJZbTA0ZEZsWE5UVkpSMUpzV1RJNWVWbFlVblpqYkhoMVNVTkJaMGxITldoaVYxVndTVVF3SzBsSWRHTmlhVUZuU1VOQlowbERRV2RaTWpsMVl6TlJaMXBIVm5wWk0wcHdZMGhTZG1OcFFUbEpTSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxIUm5wbFZ6VnFTVWRrYkdSRFozQkpTSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSm9aREpHY0dSRFFqQmhSMng2VEc1V2QxcEhSakJhVlU1MllsaENjMXBZVW14UE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0Vwc1pFaFdlV0pwUWpCaFIyeDZURzVLYkdKdFVteGpiRXAyWWpOUmRXTllWbXhqYm14VVdsZDRiRmt6VW5aamFXaDZXbGQ0YkZrelVuWmphV3MzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpsTVJuaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloxcFhOVEZpVjFaNVdWZEtjMXBVYjJka1NFb3hXbE40WTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjA1MlltMWFjRm96Vm5sWlYwcHpXbFJ2WjJSSVNqRmFVM2hqWW1sQlowbERRV2RKUTBGblpsUjBZMkpwUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VOb2RWbFhNV3hKUTBVNVVGTkNNV0p0VW14YWJXeDFXbGRSY0VsRU9XTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZDRiRm95Um1wbFZrWXhXbGhLTlV0SFVteGpNazU1WVZoQ01HSXpTWE5KU0VKNVlqTlNkbFF6U2tWYVdFNXFZMjFzZDJSSE9YbE1RMEoxV1ZjeGJFdFRRVFpZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DZW1SSFJuVmFSMFo1V2taR01WcFlTalZMUjFKc1l6Sk9lV0ZZUWpCaU0wbHpTVWhDZVdJelVuWlVNMHBGV2xoT2FtTnRiSGRrUnpsNVMxUjBZMkpwUVdkSlEwSTVUekY0ZFdaV2VIVk1lVzl4V0VjMFowdHBRa0pKU0VKNVlqTkNiR051VWpWSlIxSnNXVEk1ZVZsWVVuWmphVUl3WVVkR01FbEhUblppYmxwc1kyNVNla2xIUldkWk1uaG9Zek5OWjJOSVNuWmpSMVo1WkVocloyRlhOVEJpZVVKb1NVZGtiR1JJVW14amJIaDFTVU52WjJSSGFHaGtRMEpzWlVkV2FtUllVbXhqZVVKb1NVaEdNVnBZU2pWVk1sWnpXbGRPTUdJelNrSmlSM2RuWWpJMFoyUkhhR3hKUjFaeldsY3hiR0p1VVc1amVVSjVXbGMxYTFwWVNsTmlNamt3VEd4NGRVbERjR05pYVVGeFNVVkNkMWxZU21oaVUwSjZXbGQ0YkZrelVuWmphVUpDU1VWU1VGUldUakJqYld4MVdubENhbUl5TlRCWlYyeDFZVmMxYmtsSE9YVmFVMEoyWTJsQ2RHSXpTbXhKU0U1c1lrZFdhbVJIT1hsamVVSXdZbmxDZEZsWVVtcGhRelZqWW1sQmNWaEhOR2RMYVVKVVdsZFZObGhITkdkTGFVSnZaRWhTZDJONmIzWk1NbEpzWkcxV2MySXpRbXhqYVRWMFlqTndjR0pIZUdoTWJUbDVXbms1YkdKcE1WWlZlVGxyWWpKT2Vrd3haR3haYVRsQ1ZVVnJkbEpIT1dwa1Z6RnNZbTVSZG1OWVZteGpibXhVV2xkNGJGa3pVblpqYTBaellrWjRkVWxEY0dOaWFVRnhTVVZDYkdWSFJuUmpSM2hzV0VjMFowdHNlSFZKUTI5blNVTkJaMGxIVG5OWldFNTZTVVV4TlZKWGVHeGlWMVoxWkVOQ04xaEhOR2RMYVVGblNVTkJaMGxEUWtGaldGWnNZMjVzUW1KSGQyOUtNbEp3WkdsamNGaEhOR2RMYVVGblNVTkJaMGxEUW10aFdGcDZUekY0ZFVsRGNHTmlhVUZ4U1VOQlowbERRV2RKU0Vwc1ltMVNiR05wWjNCSlNIUmpZbWxCY1VsRFFXZEpRMEZuU1VOQloyTnRWakJrV0VwMVNVZG9NR0pYZUdkWVJ6Um5TMmxCWjBsRFFXZEpRMEZuU1VOQloxQkhVbkJrYVVKd1drUXhZMGx0V25CamJrNHdXRU5KSzFCRE9XdGhXRmtyV0VjMFowdHBRV2RKUTBGblNVTkJaMGxEUVdkUVIxSndaR2xDY0ZwRU1XTkpiazVzV1RJNWRWcEdkMmxRYW5kMldrZHNNbEJzZUhWSlEyOW5TVU5CWjBsRFFXZEpRMEpuVHpGNGRVbERiMmRKUTBGblNVTkJaMlpXZUhWSlEyOW5TVU5CWjBsSU1XTmlhVUZ4VERGNGRWcFlhSGRpTTBvd1NVZGFNV0p0VGpCaFZ6bDFTVWhHTVZwWVNqVlJWM2h6UzBoT2JHSkhWbXBrUnpsNVMxTkNOMWhITkdkSlEwRm5ZMjFXTUdSWVNuVkpRMmgzWTIwNU1HSXdPWGxTUjFaNldUTktjR05JVW5aamFYZG5XRWMwWjBsRFFXZE1lVGhuWkVoT2MyRlhOVEJQYlZKd1l6SkdhV0pIVlhSaWJWWTBaRU14YzJGWE5XeFBiVFYyVEZkR2RXVlRRbXRhVjA1MlkyMUdNR0l6U21OaWFVRm5TVU5DZFZsWE1XeExVMEU1VUdsQ04xaEhOR2RKUTBGblNVTkJaMGxIVG5aaWJrNHdTVWRTYkdNeVRubGhXRUl3WWpOSloxQlRRamRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DYmxwWVVXOUxVMEkzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5ZMjFXTUdSWVNuVkpTRkp2WVZoTmRXTnRWblZhUjFaNVZXMDVkbVJETlhoa1YxWjVaVlpPYkdKSFZtcGtSemw1VVZkNGMwdElUbXhpUjFacVpFYzVlVXRVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1Vnd2MxaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSnNZbTVXZEZwWVNtaFpiWGhzVDJsQ01HTnVWbXhNUm5oMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjFreU9YVmFiV3h1WkZoS2FGbHRlR3hQYVVJd1kyNVdiRXhHZUhWSlEwRm5TVU5CWjBsRFFqbFBNWGgxU1VOQlowbERRV2RKUTBKNVdsaFNNV050TkdkTFJ6Vm9ZbGRWWjBsVU1EbEpTRloxV2tkV2JXRlhOV3hhUTJ0blVERjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGlSMVp1V1ZkT05WVllWbXhqYm10dldrZFdlbGt6U25CalNGSjJZMmwzWjJOSVNuWmtSemxRWTJ0U2JHTXlUbmxoV0VJd1lqTkpjMGxITldoaVYxVndTVVJ3WTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0U0d1dWYzFhMWxZU210VldGWnNZMjVyYjFwSFZucFpNMHB3WTBoU2RtTnBkMmRqU0VwMlpFYzVVR05yVW14ak1rNTVZVmhDTUdJelNYQlBNWGgxU1VOQlowbElNRGRZUnpVNVdFYzFhbUl5Tlhwa1EwSnpXbGRrYUZremJGSmtWMVo1WlZOQk9VbERhR3RhV0U1cVkyMXNkMlJIT1hsTVEwSjNZMjA1TUdKNWQyZGliVVowV2xOcloxQlVOR2RsTVhoMVNVTkJaMGxGT1dsaGJWWnFaRU0xYTFwWFduQmliVlpSWTIwNWQxcFlTakJsVTJoM1kyMDVNR0o1ZDJkaWJVWjBXbE4zWjFwSFZucFpNMHB3WTBoU2RtTnBhemRZUnpVNVR6RjRkVmt5T1hWak0xRm5Zek5TYUdKdFVtaGpiVkpTWkZkV2VXVlRRVGxKUTJocldsaE9hbU50Ykhka1J6bDVURU5DYkdKSFZuUmFWelV3UzFOQk9WQnBRVzlsTVhoMVNVTkJaMGxIZEhCaWJWRTJTVU5rZEZwWVVtOWlNbEZ1VEVaNGRVbERRV2RKU0VKeldWZE9iR0pYVm5Wa1JHOW5Tak5DZVdJelVuWmtTR3gzV2xOamMxaEhOR2RKUTBGbllUSldOVTlwUW14aVIxWjBXbGMxTUV4dGRHeGxVM2hqWW1sQlowbERRbXRhV0U1cVkyMXNkMlJIT1hsTVJuaDFabE5yTjFoSE5XcGlNalY2WkVOQ2VtUkhSblZhUjBaNVdrVldNbHBYTlRCVU0wSXdZVmM1ZFdONVFUbEpRMmgyWTBoU2NHSXlOWHBNUTBKc1lrZFdkRnBYTlRCTFUwRTVVR2xDTjFoSE5HZEpRMEZuWTIxV01HUllTblZKUlRscFlXMVdhbVJETldoak0wNXdXakkwYjFReVNuRmFWMDR3VEcxR2VtTXliRzVpYVdnM1psTjNaMXBYZUd4aVYxWjFaRU5yYzBsSWMyZGFiV3gxWVZoT2IxcFlTVzlaTW5ob1pXNXZjRWxJZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VVNWFXRnRWbXBrUXpWb1l6Tk9jRm95Tkc5Wk1uaG9aVzV2ZFdOSVNuWmtSemt3WlZoQ2JGY3lWbk5hVnpGc1ltNVJkV0V5VmpWWVUzZG5Zak5DTUdGWE9YVmplV3MzV0VjMFowbERRV2RKUTBGblNVZ3daMlpUYXpkWVJ6VTVUekY0ZFZreU9YVmpNMUZuWWtkV2JsbFhUalZTV0Zwc1ltNVNVR05JVW5CaU1qVjZTVVF3WjFoSE5IWk1lVUl3WXpKNGNHSnVVVFphUjJ4NldWZEtjMXBUTVhWYVdHZ3dURmQ0Y0dKdFZUWmliVGgwV1ZjMU5VbEhlR3hhTWtacVpWTkNhMXBYVG5aamJVWXdZak5LWTJKcGFIWmpTRkp3WWpJMWVreERRbmRqYlRrd1lubDNaMkp0Um5SYVUydG5VRlEwWjJVeGVIVkpRMEZuU1VVNWFXRnRWbXBrUXpWb1l6Tk9jRm95Tkc5alNFcDJaRWM1WW1KdFJuUmFWakJ6U1VjNWQyUkhiSFppYmsxd1R6RjRkV1pVZEdOaWFUaHhTMng0ZFVsRGIyZFJWMUpyWTNsQ2JHUnRWblZrUTBKellWaE9NRnBYTld4amFVSjJZMGhTY0dJeU5YcEpTRkoyU1VkRloySlhWakJoUnpsclNVaFdlbHBYVVdkWldFMW5XVmMwWjFwWVdteGlibEZuWWtkc2VtUkhWblZhV0VsbllWYzBaMWxXZUhWSlEyOW5Za2RzTUV4WGFEQmlWM2RuWkVkV2RHTkhlR2hrUjFWMVdFYzBaMHRzZUhWSlEyOW5VVWhDYUdOdFJuUkpSemwzWkVkc2RtSnVUV2RSVnpSbllqSktjVnBYVGpCSlNGSnZXVmhSWjJNelFteFpNbXh0WVZkV2VrbEhWakphVnpVd1NVZDRjR016VW14aWJWWjVTVWM1ZDJSSGJIWmliazFuV1ZoTloxbFhUbXBhV0VJd1dsZFJaMWx1YkdOaWFVRnhTVWRDUm1SdFZuVmtSbEpvWTIxa2JHUkRUbWhhUjFKR1pHMVdkV1JGZUhCak0xSnNZbTFXZVZsRFFtaGliVkZuV1VWV01scFhOVEJXUjBaNVdqSldNRWt6U214aVZ6a3lXbFZXTWxwWE5UQlVSMng2WkVkV2RWcFlTbWRNYkhoMVNVTndZMkpwUVhGSlJVNHhZMjVLYkdKdVVXZFpia3AyWkROT2JHTnVUV2RqTTFaM1kwYzVlV1JEUWpCaFIxVm5XVWRPYUdOSVVqRmpiVlpuVEVOQ1oyTkhSbnBqTW13eVdsZEJjMGxIUm5WYVEwSm5ZakkxYWxwWFFXZGlNMEl3WVZjNWRXTjVOR2RWTWxac1QyeDRkVWxEYjJkaFNGSXdZMGhOTmt4NU9XdGFXRnBzWWtjNWQxcFlTWFZpVnprMllWZDRjMWxUTlhaamJXTjJXbGMwZEZaV1RYWmFSemxxWTNrNVdGcFhTWFpSVmtKS1REQldNbHBYTlRCV1IwWjVXakpXTUV3eVJtdGFSVll5V2xjMU1GUkhiSHBrUjFaMVdsaEphbFZIUm5sWlZ6RnNaRWRXZVdNeGVIVkpRM0JqWW1sQmNVbEZRbXhsUjBaMFkwZDRiRmhITkdkTGJIaDFTVU52WjBsRFFXZEpSMDV6V1ZoT2VrbEZNVFZTVjNoc1lsZFdkV1JEUWpkWVJ6Um5TMmxCWjBsRFFXZEpRMEpxWWtkc2FtRXlWbXRKUkRCbldtMUdjMk15VlRkWVJ6Um5TMng0ZFVsRGIyZEpRMEZuU1VOQloyTnRWblZhUjFaNVMwTnJaMlV4ZUhWSlEyOW5TVU5CWjBsRFFXZEpRMEo1V2xoU01XTnROR2RoU0ZKMFlrZENZMkpwUVhGSlEwRm5TVU5CWjBsRFFXZEpRMEU0V2tkc01rbEZRbXBpUjJ4cVlYb3dhMlV6VW05aFdFMTFXREk1ZFZFeWVIQlpNblE1V1VRMVkySnBRWEZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVVI0YVdSWVVqQmlNalFyVUVNNWFXUllVakJpTWpRcldFYzBaMHRwUVdkSlEwRm5TVU5CWjBsRFFXZFFRemxyWVZoWksxaEhOR2RMYVVGblNVTkJaMGxEUVdkSlIwRTNXRWMwWjB0cFFXZEpRMEZuU1VOQ09WaEhOR2RMYkhoMVNVTnZaMGxEUVdkSlEwRm5VVWRXTWxwWE5UQlVNMEl3WVZjNWRXTjVhRGRaTWtaM1pFaFdlVnBVYjJka1NFb3hXbGd3Y0ZoSE5HZExhVUZuU1VOQlowbERRbVppTWpWRVlrZHNhbUY1YUd4TFUwSTNXRWMwWjB0cFFXZEpRMEZuU1VOQlowbElVbTloV0UxMVdUSjRjRmt5ZEd4YVEwRTVTVWhTZVdSWFZUZFlSelJuUzJsQlowbERRV2RKUTBJNVdFYzBaMHRwUVdkSlEwRm5abFo0ZFVsRGIzWllSelZzWlVoQ2RtTnVVV2RhYmxaMVdUTlNjR0l5TkdkYVdGcHNZbTVTVUdOSVVuQmlNalY2UzBjNWQyUkhiSFppYmsxd1NVaDBZMkpwUVdkSlEwRjJUSGxDVTFwWVVqRmpiVFJuWkcxR2MyUlhWV2RrU0d4M1dsZFJaMWxZVFdkWlZ6VTFTVWhTZGtsSVFubGFXRnBzWW01UloxWkliSGRhVms1cVkyMXNkMlJEUW0xamJUbDBTVWRPZG1KWVFuTlpWMngxWVZjMWJrbElVbTlaV0ZKalltbEJaMGxEUVhaTWVVSjZaRWRHZFZwSFJubGFRMEpyV2xkT2RtTnRSakJpTTBsbldtNVdkVmt6VW5CaU1qUm5ZekpzYm1KdFJqQmtXRXBzU1VkU2RscFlUV2RpYlRrd1NVY3hhR1JIVG05SlJsSTFZMGRXVkZrelNuQmpTRkZuV2tkV2FtSXpTbWhrUnpsNVdFYzBaMGxEUVdkTWVUaG5ZekpzYm1KdFJqQmtXRXBzV0VjMFowbERRV2RNZVRoblZrVTVSVlI1YUhKak1rNXZXVmRHYlV0VWIyZGtWelZxWWtkV2FHTnBRak5oU0d0bllWaFJaMlF5Um5wSlJ6bDFZa2hyWjFwdFJuQmlSMngxV25sQ2RtSnBRakJoUjJ4NlNVZFNiRmt5T1hsWldGSjJZMmxDYUdKdFVXZGliVGt3V0VjMFowbERRV2RNZVRoblpFZG9iRWxIT1RCaFIxWjVZekY0ZFVsRFFXZEpTRXBzWkVoV2VXSnBRVzlMU0VKNVlqTlNkbFF6U2tWYVdFNXFZMjFzZDJSSE9YbE1RMEoxV1ZjeGJFdFRRVGxRYVVGdlltMUdkRnBUUVdoUVZEQm5aRmMxYTFwWFduQmliVlpyUzFOQkwxaEhOR2RKUTBGblNVTkJaMGxIZUd4YU1rWnFaVlZXTWxwWE5UQlVNMEl3WVZjNWRXTjVhSFpqU0ZKd1lqSTFla3hEUW5kamJUa3dZakE1ZVZKSFZucFpNMHB3WTBoU2RtTnBkMmRpYlVaMFdsTnJaMDlzZUhWSlEwRm5TVU5CWjBsRFFucGtSMFoxV2tkR2VWcEZWakphVnpVd1ZETkNNR0ZYT1hWamVXaDJZMGhTY0dJeU5YcE1RMEozWTIwNU1HSXdPWGxTUjFaNldUTktjR05JVW5aamFXdHdUekY0ZFdaV2VIVk1lVzl4V0VjMFowdHBRa0pKU0VKNVlqTkNiR051VWpWSlIxSnNXVEk1ZVZsWVVuWmphVUl3WVVkR01FbEhUblppYmxwc1kyNVNla2xIUldkWk1uaG9Zek5OWjJOSVNuWmpSMVo1WkVocloyRlhOVEJpZVVKb1NVZGtiR1JJVW14amFVSXdZVWRHTUZoSE5HZExhVUo1V2xoU01XTnROWHBKU0ZKdldsTkNaMWxZVG5waFYyUjFXbGRTVDJJeVVteGpNa0ZuWWpKWloyUkhhR3hKUjJSd1pHMVdkVWxITldoaVYxWnJTVWRDZW1KSE9UQlpRelJuVkcwNU1GcFRkMmRrUjJoc1NVaFNOV05IVldkaU1scGpZbWxCY1VsSVVtOWhXRTFuWTBoS2RtTkhWbmxrU0d0bll6Sm9kbVJYZUd0SlIwcHNTVWRHZFdKdE9UQlpXRkpzV2tOQ2FHTjVRbWRVYlRscldsVjRjR016VWxCYWFuaEpWa1V4VFZKWGVHeGlWMVoxWkVRMVoweHNlSFZKUTNCalltbEJjVXd4ZUhWYVdHaDNZak5LTUVsSFdqRmliVTR3WVZjNWRVbElSakZhV0VvMVVWaE9lbUZYWkhWYVYxSlBZakpTYkdONWFIcGlSemt3VkcxR2RGcFRRVGxKUTJOdVRFTkNiV0pIUmpCa1IxWjFTVVF3WjFwdFJuTmpNbFZ3U1VoMFkySnBRV2RKUTBKNVdsaFNNV050TkdkTFNFSjVZak5TZGxRelNrVmFXRTVxWTIxc2QyUkhPWGxNUTBKalltbEJaMGxEUVhaTWVVSXdZeko0Y0dKdVVUWmFSMng2V1ZkS2MxcFRNWFZhV0dnd1RGZDRjR0p0VlRaaWJUaDBXVmMxTlVsSFVteFpNamw1V1ZoU2RtTnNlSFZKUTBGblNVYzFhR0pYVlhCSlJEQXJTVWgwWTJKcFFXZEpRMEZuU1VOQloxa3lPWFZqTTFGbldrZFdlbGt6U25CalNGSjJZMmxCT1VsSWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZGtiR1JEWjNCSlNIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKcVlqSTFlbVJEUW5wYVYzaHNXVE5TZG1OcFFUbEpSMEo2WWtjNU1FcElkSHBpUnprd1ZHMUdkRnBUUVM5SlIwSmlZbTFHZEZwVU1HdGxNMDV6WWpOU1QxbFhNV3htVmpGblNVUnZaMHA1WkRsWlJIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKcVlqSTFlbVJEUW5waVJ6a3dTVVF3WjJSSGFIQmplVFY1V2xjMWExcFlTbE5pTWprd1RHNUdNVnBZU2pWVk1sWnpXbGRPTUdJelNXOWpNbFp6V2xkT01HSXpTWEJQTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRXBzWkVoV2VXSnBRbnBpUnprd1NVTlpiVWxJVG5OaU0xRjFXVmhPZW1GWFpIVmFWMUpQWWpKU2JHTjVhRGRKUjFweldWaFNNRnBYTkdkbVUyczNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRamxNUm5oMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjFwWE5URmlWMVo1V1ZkS2MxcFViMmRrU0VveFdsTjRZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMDUyWW0xYWNGb3pWbmxaVjBweldsUnZaMlJJU2pGYVUzaGpZbWxCWjBsRFFXZEpRMEZuWmxSMFkySnBRV2RKUTBGblNVTkJaMk50VmpCa1dFcDFTVU5vZFZsWE1XeEpRMFU1VUZOQ01XSnRVbXhhYld4MVdsZFJjRWxFT1dOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VkNGJGb3lSbXBsVmtZeFdsaEtOVXRIVW14ak1rNTVZVmhDTUdJelNYTkpTRUo1WWpOU2RsUXpTa1ZhV0U1cVkyMXNkMlJIT1hsTVEwSjFXVmN4YkV0VFFUWllSelJuU1VOQlowbERRV2RKUTBGblNVTkNlbVJIUm5WYVIwWjVXa1pHTVZwWVNqVkxSMUpzWXpKT2VXRllRakJpTTBselNVaENlV0l6VW5aVU0wcEZXbGhPYW1OdGJIZGtSemw1UzFSMFkySnBRV2RKUTBJNVR6RjRkV1pXZUhWTWVUaHFTVWhPZG1SWVNtcGFWVEZvWTBoQ2NHSnRaRlpWYTNjNVdrZFdhbUl6U21oa1J6bDVZM2sxY1dONU5YUlpXRUZwVEVOSmRrdHBjR05pYTBKellWZE9iR0p1VG14WVJ6VkVZak5DTldOdGJHNWhTRkZuUzBkTmNFbEVTWGROVkd0blZrZG9iRWxHUW5aaVNHeDBXbGhKWjFWSVNuWmhiVlpxWkVOQ1FtUllVbTlpTTBwNlRHbENRbUpIZDJkamJXeHVZVWhTZWtsSVNteGpNbFo1WkcxV2EweHNlSFZXUjJod1kzbENhbUl5VW14SlJ6Rm9aVk5DZG1KdGVEVkpSMHBzU1VoV2VscFhVV2RrVnpWcldsaEpaMlJIYUd4SlJVcFVVa05DZW1SSWJITmFVMEp6WVZkT2JHSnVUbXhKUjFwMlpGYzFhMGxIUmpCWVJ6VnZaRWhTZDA5cE9IWmpSemx6WlZjeGJHTnBOVzVoV0ZKdlpGZEpkV0ZYT0haVVJXeEVVbFUxVkZKVE5UQmxTRkZuVmtkb2JFbEhUblppV0VKeldsaFNiRWxJVG14a1EwSjJXbWxDYUdSWVVtOWlNMHA2U1VjeGFHVlRRbWxhVTBKdFlqTldkVnBEUW1oa1JuaDFZVWhTTUdORWIzWk1NMEoyWWtoc2RGcFlTWFZhTW13d1lVaFdhVXh0YkhaTU1FWldWa1ZvVUZWc1RYVmtTR2d3U1VaU2IxcFRRbXBpTWpGM1lrZFdNRnBUUW5wYVdGRm5ZakpaWjFreU9YVmtTRXB3V1c1V01HSXpTbnBKUnpGb1pWTkNhVnBXZUhWYWJUa3hZbTFSWjFsWVVXZGhTRkl3WTBSdmRrd3pRblppU0d4MFdsaEpkVm95YkRCaFNGWnBURzFzZGt3d1RsQlViRkpUVTFWS1ZsWkZPVk5WZVRVd1pVaFJaMUV5T1d0YVUwSnJZVmhPTUdOdGJHbGtXRkpzV2tOQ2FXVlRRa2hpTWpsdVlrZFZaMWxZVG1OaWJrSm9ZMjVSWjJJeVdXZGtSMmhzU1VoQ2RtSkliSFJhV0VsblkwaEtkbUZ0Vm1wa1EwSndZM2xDYUdKSVRuWkpTRTR4V1cxd2JGa3pVV2RrUnpobldWYzBaMWxYVW10aFdGSndZakkxYUdKRFFrcFZRMEo1WVZka2IyUklUV2RhTTBwb1ltNVNZMkp0V25aa1Z6VnJTVWRHTUVsSGFEQmtTRUUyVEhrNWQySXllRFZpVjFaNVRHMWtjR1JIYURGWmFUVndZbms1VVZGV1VrWlViRkpVVEc1U05HUkdlSFZMYVRsalltMVdOR05IT1hsa1EwSnFZakkxZW1SRFFucGtXRUozWWpOS01HTXdSbXRpTTBJd1lWYzFibFV6VWpWaVIxWlVZVWRXYkdSSVRXZFFVMEZ2U2pKR2EySXpRakJhVjFKVVpFaHNjMXBXVG05YVYxWXdZM2xqWjJGWE5HZFNSemxxWkZjeGJHSnVVWFZqU0VwMlpFYzVNR1ZZUW14TFUwRnRTbXg0ZFVsRFFXZEpRMmR1WTIxV2QySkhSbXBhVTJObllWYzBaMUV4VGxSVk0xSTFZa2RXVkdGSFZteGtRelYzWTIwNU1HSXpValZqUjFWd1R6RjRkVmt5T1hWak0xRm5XVEk1ZFdNelVubGtWMDR3WVZjNWRWWkhPWEphVnpSblVGTkNWR1ZYTVdsaU1uZHZTMVIwWTJKdFZqUmpSemw1WkVOQ2FtSkhSbnBqZVVKRVZURk9VMXBZVGpGaVNGRm5aVEY0ZFVsRFFXZEpSMDUyWW01T01HTnVWbXBrUnpsNVMwZE9lbU14VW14bFNGRnpTVWhPYUZwdFZsVmlNblJzWW1scloyVXhlSFZKUTBGblNVTkJaMGxEUW5CYWFVRnZZekpHYlZwV1VuWmhNbFoxU1VORk9WQlRRbXBpTWpWNlpFaEtNVmt6VW5CaU1qVlZZakowYkdKcGEyZGxNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlJIYUhsaU0yTm5ZbTFXTTBsRlZubGpiVGw1UzBOa1JGVXhUbE5hV0U0eFlraFJaMkZZVFdkaWJUa3dTVWRPZG1KdVRqQmpibFpxWkVkR2FXSkhWWFZKUmxaNldsTkNaMlJYTlhwWlYxcHNVVEZPVkZsRFFuWmphVUpuV1ROT2VsbERRbkJpYms0d1dsZEdhMHhwWTNCUE1YaDFTVU5CWjBsRFFXZEpRMEk1V0VjMFowbERRV2RKUTBGblNVaFNiMkZZVFhWWk0wNTZWa2RXTkdSRFFUbEpSMDU2WXpGU2JHVklVVGRZUnpSblNVTkJaMlpXZUhWSlEwRm5TVU00ZGtsRk5YWmtSMVZ6U1VoU2IyRllUV2RoV0UxbldWTkNibHBZVWpCYVdFbG5Zekk0WjJSSGFHaGtRMEp3WkVOa2VrbEhlR2hsYm10MVNVVnNkVWxJUW5sWlYwNHdZVmRPYkV4RFFqQmhSMng2U1VjeGJGbFhOWHBZUnpSblNVTkJaMHg1T0dkak0xSTFZa2RXZW1GSFZteGtTRTFuV1ZoS2JFbEhOWFprUTBKcVkyMVdhR1JIVm10SlNGWjFaRWRzYzBsSVVtOWFVMEp0WVZoS2VtUkRRbXhpUjFaMFdsYzFNRWxIYkhWak0xSm9ZbTFPYkVsSGJIcEpSekZvV2tkVmRWaEhOR2RKUTBGbldqSldNRWxJVGpCbFYzaHNWVEpvYkZwWVVXOUxVMEkzV0VjMFowbERRV2RKUTBGblNVZHNiVWxEYURCaFIyeDZUR3c1ZW1SSWJITmFWazV2V2xkV01FbEVNRGxRVTBJeFltMVNiRnB0YkhWYVYxRndTVWgwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUXpoMlNVVTFkbVJIVlhOSlIyeHRTVWRDYUZwSE9YZGtSMVpyVlROU05XSkhWbFJoUjFac1pFaE9aMGxIYkhwSlNFNHhZMGhDZG1OdVVteGFRMEl3WVVkV2RVbElaR3hKUjBaNll6TldkRnBUUWtSVk1VNVVaRWhzYzFwV1RtOWFWMVl3V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVhaTWVVSndZM2xDYW1JeU5YcGtTRW94V1ROU2FGbHRlR3hNYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJGWFdXZExTRTR4WTBoQ2RtTnVVbnBSVjFKMlkwaFNjR0p0WkZSa1NHeHpXbFpPYjFwWFZqQmplV3RuWlRGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWhTYjJGWVRYVllNMDR3WlZkNGJGVXlhR3hhV0ZGblVGTkNkVnBZWTJkUk1VNVVWVE5TTldKSFZsUmhSMVpzWkVObmNFOHhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVVtOWhXRTExV0ROT01HVlhlR3hWTW1oc1dsaFJkV050Vm5kaVIwWnFXbFpPTldKdFRXOWtSMmh3WTNrMWFtTXpUbFZhV0dnd1MxUjBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTREZqWW1sQlowbERRV2RKUTBGblNVTkJaMGxIVm5Oak1sVm5aVEY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVaFNiMkZZVFhWWU0wNHdaVmQ0YkZVeWFHeGFXRkZuVUZOQ2RXUlhlSE5QTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQlowbERRamxZUnpSblNVTkJaMGxEUVdkSlNFcHNaRWhXZVdKcFFqQmhSMng2VEd3NWVtUkliSE5hVms1dldsZFdNRTh4ZUhWSlEwRm5TVWd4WTJKcFFXZEpRMEl3WWpGT01HTnRiSFZhZVdkd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VoU2IyRllUWFZaTTA1NlZrZFdOR1JFZEdOaWFVRm5TVU5DT1ZoSE5UbFlSelIyUzJsd1kySnBRWEZKUm1SNVdWaEJaMWxUUWpKWlYzZ3hXbE5DYldJelNXZGhWelV3V2xoS2QySXllR2hrUjJ4MlltbENjR0pwUW1oSlIwNTZZM2xDTUZsWFpHNWFWMUZuWkVkV2RHTkhlR2hrUjFWbllrZHNNRnBZU21oaVF6VmpZbWxCY1ZoSE5HZExhVUpWWVVkc2VrbEhiSHBKU0ZaMVl6SkdiVnBUUW1sYVYwNW9aRmhPYkVsSVZuVmtTRW94WXpOU2JGcERRa1JWTVUxblpFZFdOR1JEUW1wWlZ6Um5XVzFWWjJSWVRteGFRMEl3WW5sQ2QyRkhPWFZhVTBKdllqSXhiRmhITkdkTGFVSjJZMmxDYkdWSFduQmlTRko1V1ZoU2JFbEhVbWhrUjBWblpFYzRaMWxYTkdkWldGSXdXVmRPY2xwWVNXZFpNamwxWkVoS2RtSkhlR3hhUTBKNllWaFNiRXhwUWxWWlYzUnNTVWRPYUdOdFZXZGtSemhuWWpJMWMyVlRRakZqTWxaalltbEJjVWxJVW05aFdFMW5aREpzTUdGRFFqQmpibFo2WkVkV2EwbEhiSFZqU0ZZd1RHeDRkVWxEYjNaWVJ6VnNaVWhDZG1OdVVXZFpNamwxWXpOUloyUlhOWHBaVjFwc1VURk9WRWxFTUdkTFNGcG9Za2hXYkV0VFFUbFFhVUkzV0VjMFowbERRV2RqYlZZd1pGaEtkVWxITld4a2VVSkVWVEZPVTFwWVRqRmlTRkZ2VlROU2VXRlhOVzVMU0Zwb1lraFdiRXRUZDJkWk1qbDFZek5TZVdSWFRqQmhWemwxVmtjNWNscFhOSEJQTVhoMVpsUjBZMkp0VG5aaWJrNHdTVWhTYkdWSVVrZGpiVGwwVVRGT1ZGVnRWbnBrVjNnd1NVUXdaMHRJV21oaVNGWnNTMU5CT1ZCcFFqZFlSelJuU1VOQloyRlhXV2RMU0Zwb1lraFdiRWxIYkhWak0xSm9ZbTFPYkdJeVdXZFJNVTVVVlcxV2VtUlhlREJMVTBJM1dFYzBaMGxEUVdkSlEwRm5TVWhLYkdSSVZubGlhVUl5V1ZkNE1WcFROV3BqTTA1VldsaG9NRTh4ZUhWSlEwRm5TVWd4WTJKcFFXZEpRMEpzWWtoT2JFbEhiRzFKUTJnd1pWaENiR0l5V1dka2JVWnpaRmRWWjFCVU1EbEpRMlIxWkZjeGFWcFlTVzVMVTBJM1dFYzBaMGxEUVdkSlEwRm5TVWhLYkdSSVZubGlhVUl5V1ZkNE1WcFVkR05pYVVGblNVTkNPVmhITkdkSlEwRm5XbGQ0ZWxwVFFqZFlSelJuU1VOQlowbERRV2RKU0ZKdlkyMDVNMGxITld4a2VVSkdZMjVLZG1OcGFHZFdiVVp6WkZkVloyTkhSbnBqTWxaclNVaFNka2xEWkdwak0wMXVTVWRhTVdKdFRqQmhWemwxU1VjeE1XTXpVV2RaYlZWbldWTkJibGt6VG5wS2VVSnRaRmMxYW1SSGJIWmlhVUo1V2xoT01XSklVVFpKUTFJM1pHMUdjMlJYVmpsTWFVSldZekpWWjBvelZuVmpNa1p0V2xWT1ZGVjVZMmRrUnpoblkwZEdlbU41UW5WaU1qUjBZa2RzTUZwWVNtaGlRMEl5V1ZkNE1WcFlUWE5KUjBveFpFWjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGtSMFp5V2xOQ2FsbFlTbXhKU0ZKMlNVZFdkV016Vm5sYVUwSjNXVmRrYkVsSVRteFpNMVo1WVZoU05VeHRRWEJQTVhoMVNVTkJaMGxJTVdOaWJqQTNXRWMwZGt0cGNHTmlhVUZ4U1VaU2JHSllRbk5aV0ZKc1NVaFNhRnA1UWpOaFIyeHFZVU5DTTJGSGJHcGhRMEpxV1ZjMFoxbHRWV2RrV0U1c1drTkNNMkZZVW05SlJYaHdaRVZXYzFwWE1XeGlibEZ1WTNsQ1oyTXpValZpUjFablNVaENlV0l6UW14amJsSTFTVWhTZGxoSE5HZExhVUo2V2xoUloxcFhlR3hpVjFaMVpFTkNlbVJJYkhOYVdFMTFTVVZhZG1OcFFucGFWMDR4WTIxc01HVlRRbmxhVjBaNllqSTFla3hEUW5aaWJYZzFTVWQ0Y0dSSFZubFpWM2RuWXpOU2VXRlhOVzVKU0Zwb1lraFdiR041UW5SWldHdG5XVzFXWTJKcFFYRkpTRlo2V2xkUmRVbEdVblpKUjJ4MVdUSTVlV05IT1hsWldGSnNTVWMxZG1KcE1YTmhXRkpzWTIxR2MwbElXbWhpU0Zac1kzbENaMlJYTlhwWlYxcHNVVEZPVkZsRFFuUlpXR3RuV1cxVloyUllUbXhhUTBKd1ltNU9jRnBIVldkWlZuaDFTVU52WjJSSFZuUmpSM2hvWkVkVloyTXpVbmxoVnpWdVNVaENhR051VVhWWVJ6Um5TMms1WTJKdFZqUmpSemw1WkVOQ2FtSXlOWHBrUTBKcVl6Tk5aMUJUUVc5ak0xSjVZVmMxYm1ONWQyZE1hVFIxWkcxR2MyUlhWbnBMVTBFNVVHbENOMWhITkdkSlEwRm5XVEk1ZFdNelVXZFpNMDU2VmtkV05HUkRRVGxKU0Zwb1lraFdiR041TlhsYVYxSXhXVEpWYjB0SFJtcFplWGRuWkdsM1oyRlhValJMVTBFNVVHbENhRmt5VFdkTGVVSXdXbGhvTUZKdVNuWmlWVTVVVlRGS2JHTXpWbk5rUTJneVMxTkJja2xJVGpCamJXeDFXak5PWW1GWFVqUkpRM05uVFZZd2MwbElUakJqYld4MVdqTk9ZazFHTUhCUE1YaDFTVU5CWjBsSVNteGtTRlo1WW1sQ2RWcFlZMmRSTVU1VVZXMVdlbVJYZURCTFIwNTZZekZTYkdWSVVYTkpSMDUyWW01T01HTnVWbXBrUjJ4MllteFNkbUV5Vm5WTFZIUmpZbTR3TjFoSE5IWk1lVTFuWXpJNU1XTnRUbXhVVjBaM1kwZHNkVm94VmxOVVJERnFZek5OZEdSSFJtNU1iWEI2VEcweGFHTkRTWE5KYVRoeFMyeDRkVWxEYjJkUlIzaHdXVEpXZFdNeVZtTmlhVUZ4U1VWT2RtTkliSGxoVjJSdlpFTkJiMWw1YTJkTmFrRjRUbmxDVldGSFZXZFZSemx6WlZjeGJHTnBRbEZqYlRseFdsZE9NRWxGUmpGa1IyaDJZMjVOZFVsRlJuTmlRMEo1WVZka2IyUklUV2RqYlZaNldsaEtNbHBYVVhWWVJ6Um5TMmxDVldGSGJIcEpSMDUyV2tkVloySlhSalZKUnpsMVlraHJaMWx0Vldka1dFNXNXa05DTVdKdFVteGphVUl3WVVkVloxRnNUa1ZKU0U0d1pWZDRiRWxIZUhCWk1sWjFZekpWWjFwdE9URmliVkZuV1ZoU1kySnBRWEZKUjJnd1pFaEJOa3g1T1hkaU1uZzFZbGRXZVV4dFpIQmtSMmd4V1drMWNHSjVPVTFUVlU1R1ZHeE9Sa3h1VWpSa1JuaDFTVU52WjFaSGFHeEpSMDUyWWxoQ2MxcFlVbXhKU0U1c1pFTkNkbHBwUW1oa1dGSnZZak5LZWtsSE1XaGxVMEpwV2xOQ2JXSXpWblZhUTBKb1pFWjRkVWxEYjJkaFNGSXdZMFJ2ZGt3elFuWmlTR3gwV2xoSmRWb3liREJoU0ZacFRHMXNka3d3UmxaV1JXaFFWV3hOZFdSSWFEQllSelJuUzJsQ1ZXRkhWV2RaTWpsMFkwZDRiR1JIVldkak1sWXdTVWM1YlVsSFRuWmlibEo1WVZkS01XUkhPWGxqZVVKMFdWaHJaMWx0VldkYWJUa3hZbTFSWjFsWVVtTmlhVUZ4U1Vkb01HUklRVFpNZVRsM1lqSjROV0pYVm5sTWJXUndaRWRvTVZscE5YQmllVGxFVkRBMVZWVnJiRU5XVmxKUVZXeE5kV1JJYURCWVJ6Um5TMmxDUkdJeVVteEpSMUp3WXpOU2VXRlhTakZrUjFaclNVZEtOVWxGWkhaaU1tUnpXbE5DYUdONVFuZFpXRW93U1VjNWJVbElVbTlhVTBKM1lqSjROV0pYVm5sSlNFSjVZakp3YkZrelVXZGhXRTFuV1ZkNGVtSXhlSFZKUTI5bll6TldhV0Z0Vm1wa1EwSXdZbmxDYUdKcFFtaGFSMUp3WkVkc2RtSnRSbk5KUld4UlNVaEtjRm95YURCamVVSnVZMjFHZFdSRFFtMWlNMVoxV2tOQ2FHUkdlSFZKUTI5bllVaFNNR05FYjNaTU0wSjJZa2hzZEZwWVNYVmFNbXd3WVVoV2FVeHRiSFpNTVVKQ1ZrVldUMVpHVFhWa1NHZ3dXRWMwWjB0cE9XTmliV3gwWTBjNWVXUkRRamRKU0Vwc1ltMVNiR05wUWpsSlIxcDVZakl3WjBveWVIQmtRekZ2WkVjeGMwd3llSEJaYVRsNllVZEdhMlZUTVhsYVZ6VnJXbGhKZFdGdVRXNVBNWGgxWVZjeGQySXpTakJKU0hOblZsaENhMWxZVW5CaWJXUkdZa2RXZEZwWE5UQkpTREJuV201S2RtSlRRVzVNYVRsellWZEpkbVJZUW10WldGSndZbTFqZEZwWGVHeGlWMVoxWkVNMWNXTjVZemRZUnpWc1pVaENkbU51VVdkTGFVSnRZMjA1ZEVsRFkzVk1Nbmh3V1drNU1XTkhVbWhrUjJ4MVdua3hiR0pIVm5SYVZ6VXdURzF3ZWtwNmRHTmliVlkwWTBjNWVXUkRRWEZKUjFwNVlqSXdaMHA1TkhaaVIyeHBUREpTYkZreU9YbFpXRkoyWTI1TmRXRnVUVzVQTVhoMVdsaG9kMkl6U2pCSlNITm5ZVWhTZEdKRGQyZGpNMXB1VEVOQ1ZWcFhNWGRpUjBZd1dsWktiR016Vm5Oa1EzZG5WVEZhU0ZaSFZuUmpSM2hvWkVkV1UxcFlUakZpU0ZGblpsTkNiV050T1hSSlEyUnpZVmhSZEdGSVVuUmlRemx6WVZoUmRHRklVblJpUXpWeFkzbGpOMWhITlhCaVdFSjJZMjVSWjJWNVFucGtXRUozWWpOS01HTXdSbXRpTTBJd1lWYzFibFV6VWpWaVIxWlVZVWRXYkdSSVRXZG1VMEp0WTIwNWRFbERZM1ZNTW5od1dXazVhbU16VFhSa1IwWnVURzF3ZWtwNmRHTmliVlkwWTBjNWVXUkRRWEZKUjFwNVlqSXdaMHA1TkhaaVIyeHBUREpPZW1ONU1UQlpWMk4xWVc1TmJrOHhlSFZNZVRoblUxVXhVVlF4U2xWUlZUVlZUMmxDYTJKNVFuVmlNMUZuV1RKb2FHSnRaR3hKU0ZKdldsTkNkMk50T1hkYVdFb3daVk5DZFZsWE1XeEpSemw1U1VoU2IxcFRRbWhqTTA1d1dqSTFkRnBYTlRCSlIxWTBZMGhLYkdNelRuQmlNalIxV0VjMGRreDVRbFZoUjJ4NlNVZDRjR0p0Vldka01teHpZa05DYVZwVFFqRmpNbFpyU1Vkc2RVbElTbXhhTWxZMFdsaE5aMlJIT0dkak1sWm9ZMjFPYjBsSFduWmphVUpOWVZoU1JtSkhWblJhVnpVd1NVaFdlbGxYWkd4TWJIaDFUSGs0WjFaRk9VVlVlV2h4WkZoT01HRlhOVzFaVjJSMVdWYzFjRXRVYjJkaFZ6VnhXbGRPTUVsSVdteGpiazV3WWpJMFoySnVWblJaYlZaNVNVZEdNRWxIU2pGaFYzaHJTVWhTY0dKWFZtTmlhV2d6WVZjMWEySXpaR0pLTW5od1pFVldjMXBYTVd4aWJsSlhXbGhLZW1GWE9YVmplV1JrU1VoNE9FbERhRE5oVnpWcllqTmtZa295ZUhCa1JWWnpXbGN4YkdKdVVsZGFXRXA2WVZjNWRXTjVaR1JKUkRCblZ6RXdjRXRXZUhWSlEwRm5TVU0xZDJSWVRtOUxRMk41VEdwTmRVMVRZM0JQTVhoMVRIbHZjVmhITkdkTGFVSlVXbGMxTUdGWE5XaGlRMEl5V1ZkNE1WcFRRakZqTWxaclNVaFNka2xIUmpKaU1teHJTVWRPYUdKSGVIQmliV05uWWtkc01FeFhhREJpVjNkdVkzbENlVnBYTld0YVdFbG5XbTVXZFZrelVuQmlNalJuWkRKb2JHSnNlSFZKUTI5bll6TldhVmt5ZUdoak0wNXNZM2xDYTJKNVFuVmlNMUZuWVZjeGQySkhWblJhVnpVd1NVZENlVnBYTld0YVdFcG5XRWMwWjB0cE9XTmliVTUyWW01T01FbElTbXhpYlZKc1kyczFkbVJGYkhSalIzaHNZbGRXZFdSSFZtdEpSREJuWlRNd04xaEhOV3hsU0VKMlkyNVJaMWt5ZUdoak0wMW5WRWRzTUZKWGVHeGlWMVoxWkVOQ2JHVklVbXhpYlZKNlNVWldkMXBIUmpCaFZ6VnVVbGQ0YkdKWFZuVmtRMEkzV0VjMFowbERRV2RNZVc5eFdFYzBaMGxEUVdkSlEyOW5WVzFXTUdSWVNuVkpTRkp2V2xOQ2FHTnVTbWhsVTBKMldtbENlbVJJYkhOYVdFMW5aRWM0WjFsWVFuZGlTR3RuWkVjNFoyUkhhR3hKUjFaeldsY3hiR0p1VVhWWVJ6Um5TVU5CWjBsRGIyZFVNMXBzWTI1S2NGcEhWV2RrUjJod1kzbENkRnBZVW05aU1sRm5aRWM0WjJGWE5UQmFWMlI1V1ZoU2JFbEhiSFZrUnpobldWTkNlbVJJYkhOYVUwSjBXVmMxYUZveVZuUmFWelV3U1VoT05XTXpVbXhpVXpWalltbEJaMGxEUVdkTGJIaDFTVU5CWjBsRFFYRkpSVUoxWWpKT2RtSkhlR2hqU0U1c1dFYzBaMGxEUVdkSlEyOTJXRWMwWjBsRFFXZGpNMUpvWkVkc2FrbEhaR3hrUms0d1pWZDRiR041WjNCSlNIUmpZbWxCWjBsRFFXZEpRMEZuWTIxV01HUllTblZKU0ZKdllWaE5kV016VWpWaVIxWjZUekY0ZFVsRFFXZEpTREZqWW1sQlowbERRWFpMYVc5blVVYzFkbGt5T1hOaVIwWjNZekpWWjB0cE9XTmlhVUZuU1VOQ2VtUkhSakJoVjAxbldESmtiR1JHVm5WaFdFWXhXbFpPTUdWWGVHeGplV2R3U1VoMFkySnBRV2RKUTBGblNVTkJaMHg1T0dkVU1qVnpaVk5DYmxsWVVtOWFXRWxuWXpOU05XSkhWbnBKUnpsMVdUSlZaMk5IVm5sSlIwNXpXVmhPZWxoSE5HZEpRMEZuU1VOQlowbEhiRzFKUTJnd1lVZHNla3h0YUdoak1Ea3pZbXhDZVdJelFteGpibEkxUzBWd1ZGRXlPWFJqUjJ4eldsaEtabU50Vm5WWlZ6RnNWVWhLZG1OSFZubGtTR3R2U2pFNWVtUkliSE5hV0UxdVRFTkNNR0ZIYkhwTFUydHdTVWgwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0Vwc1pFaFdlV0pxZEdOaWFVRm5TVU5CWjBsRFFXZG1WbmgxU1VOQlowbERRV2RKUTBGMlRIbENWVmxYZEd4SlIwNW9ZMjFWWjJKdE9UQkpTRkoyU1VkT2FHSkhkMmRaU0ZKdllWaE5kVm95VmpCVk0xSTFZa2RXZWt0RGJHZEpSekV4WWtoU2NHTkhlR3hKU0ZKd1lsZFdla2xJVG5CaWJVNXNTVWhTYjJGWVRtTmlhVUZuU1VOQlowbERRV2RNZVRobldqSldkVnBZU21oa1IxWjZTVWMxYkdSNVFrUlZNVTVUV2xoT01XSklVbnBKUjFab1dUSm5aMlJIYkhSYVV6VmpZbWxCWjBsRFFXZEpRMEZuVEhrNFoxWkZPVVZVZVdoNllqTktNbHBYZUhOTFZHOW5WVEpzZFZreVZXZGtNbFZuV2tjNFoySnRPVEJKUjA1b1dUSm9iRWxGVGxSVk1VcHNZek5XYzJSSVRXZFpibXRuWVZjMWQyUllVWE5KUjBaMVpWWjRkVWxEUVdkSlEwRm5TVU5CZGt4NVFucGhSMFo1V2xkUloyTXpValZpUjFaNlNVaGtjR0pIZDJkYU1sWjFXbGhLYUdSSFZXZGliVll6U1VoT01HVlhlR3hqTW1oc1dsaFJaMkl5U25GYVYwNHdZM2wzWjJReWFIQlpNbWRuWVZoTloyUXlSbnBrUjFadFpGZDNkVmhITkdkSlEwRm5TVU5CWjBsRE9IWkpSbEp2WVZoTloyTXlhSFprVjNoclNVZEtiRWxIUm10YVNFcHNZek5PYkZwRFFqTmhSMVoxU1VkRloxbHVTblprTTA1c1kybENlbUZIYkhkamVVSnFZakkxZW1SSVNqRlpNMUpvV1cxNGJGaEhOR2RKUTBGblNVTkJaMGxET0haSlNFNHdaVmQ0YkdNeWFHeGFXRko2VEd4NGRVbERRV2RKUTBGblNVTkNhbUl5Tlhwa1EwSXhZekpXZVZVelVqVmlSMVo2U1VRd1oyUkhhSEJqZVRWdVdsaFNWR1JJYkhOYVdFMXZTMVIwWTJKcFFXZEpRMEZuU1VOQloyRlhXV2RMU0ZaNldsaEtWR1JJYkhOYVdFMW5VRlF3T1VsSVZuVmFSMVp0WVZjMWJGcERhMmRsTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJSSGFIQmplVFZtWXpOU05XSkhWbnBKUkRCblZ6RXdOMWhITkdkSlEwRm5TVU5CWjBsSU1XTmlhVUZuU1VOQlowbERRV2RhVjNoNldsTkNjRnBwUVc5UldFcDVXVmhyZFdGWVRrSmpia3BvWlZOb01XTXlWbmxWTTFJMVlrZFdla3RUYTJkbE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloweDVPR2RTUjFWMFdraFdkMkpIYkdwWldGSnNTVWhPTUdWWGVHeGplVUozWTIxV2VscFlTakpoVnpWdVNVaFNiMXBUUW1aaVIwWjZaRVk0WjJGWE5YcGtSMFoxV1RKVloyRlhOR2RrUjJoc1NVaE9iR1JETldOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VNNGRrbEdVbTloV0UxbllWaE5aMWxUUW5kYVdFcHRZak5LZEZsWE5XcGFVMEoyWTBoU2NHSlhiRFpaV0ZKd1lqSTBaMlJIT0dkWldGcDJZVmRSWjFwSVZuZGlSMnhxV1ZoU2JGcERRbnBrU0d4eldsaE5aMlJIYUdoa1EwSnFXVmMxWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUXpoMlNVYzVhbGt6Vm5sSlIxWjZZMGRXYW1GWFJuTmlTR3RuWkRKb2JHSnBRbXBpTWpGM1lqTk9jR0p0WTJka2JXeG9TVWhPTVZsdFRuTlpXRTU2WVZjMWJreHNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5USGs0WjFaSGFHeEpSM2hvWXpOUloyRllVbXhpVTBKd1kzbENjbHBZUWpCSlNGSjJTVWhTZVdWVFFqQmllVUozWTIxV2VscFlTakphVTBJd1lVZFZaMWt5Um5wWk1rWnJXbE5DZG1OdFVteGphVUl6WVZoU2IwbElVbTlhVm5oMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjB4NU9HZFpXRTU2WkZjeGQyUkhiSFppYVVJd1lVZEdNRWxIYkRCS00wMW5ZbGM1ZW1SRFFuQmlXRUoyWTI1U2FHSnVVV2RrUjJob1pFTkNjMWxZVGpCSlIwWnJXa2RXYTBsSVRqQmxWM2hzWTNsQ2RtUnRWbmxqYld4cldsWjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZE1lVGhuWTBoS2JHUnRiSFprV0Uxbll6TlNOV0pIVm5wTWJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloxa3lPWFZqTTFGbldWZFNhMVV6VWpWaVIxWjZTVVF3WjB0SVRqQmxWM2hzWTNsM1oyTXlWakJMVTBFNVVHbENlbVJJYkhOYVdFMTFZMjFXYTJSWFRteFZiV3h1WVVoUmIwdElUbXhrUTNkblkzbHJaMUJVTkdkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQmRreDVRazlpTTFKc1QybENVR0pwUWtwU1UwSjZXbGhSZFZsWFVtdExRMnRuV2tjNWJHTjVRblZpTTFGblkyMVdNR1JZU25WSlNGSnZXbE5DZWxwWVVtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVVkdlV050UmpWTWJXeDZVVmhLZVZsWWEyOWplV3RuVUhsQ2FGcEhVbFJrU0d4eldsaE5iMk41ZDJkak1sWXdTMU5CTmtsRGFIcGFXRkYxV1ZkU2EwdElUWEJNUTBKNldsaFJjRXhEUW5wYVdGRndUekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RNZVRoblVWaEtlVmxZYTNWYWJrcDJZbE5DYTJJeVZucEpSelYyWkVOQ00ySXpTbkpKUnpsMVNVWk9iR1JEUW5CaWFVSktVbE4zWjJJelVtOWFXRW96WVZoT2JFbElTbXhrU0ZaNVlteDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZE1lVGhuVVZoS2VWbFlhM1ZhYmtwMllsTm9hRnBIVWxSa1NHeHpXbGhOYjJSWVRteGpiRTR3WlZkNGJHTjVkMmRpYlZZelNVWk9iR1JFZUVSVk1VNVRXbGhPTVdKSVVTdExRMnR3UzFNMWVWcFlXbXhqYms1c1MwTnNZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMDUyWW01T01FbElUbXhrUTBFNVNVZEdhMXBHVGpCbFYzaHNZM2xvTVdNeVZubFZNMUkxWWtkV2VreERRblZhV0dOblZUSldNRXREYTNCUE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloxa3lPWFZqTTFGbll6TlNOV0pIVm5wSlJEQm5WekV3TjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKNldsaFJkVnB0T1hsU1YwWnFZVU5uYjJScGEyZFFWRFJuWXpOU05XSkhWbnBNYmxaMVl6Sm9jRnB1VVc5a2FXdHdUekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RrUjJod1kzazFabU16VWpWaVIxWjZTVVF3WjJNelVqVmlSMVo2VHpGNGRVbERRV2RKUTBGblNVTkNPVmhITkdkSlEwRm5TVU5CWjBsSFZuTmpNbFZuWlRGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdka1IyaHdZM2sxWm1NelVqVmlSMVo2U1VRd1oxY3pWbnBhV0VwVVpFaHNjMXBZVG1SUE1YaDFTVU5CWjBsRFFXZEpRMEk1V0VjMFowbERRV2RtVm5oMVNVTkJaMGxET0hGTGJIaDFTVU5CWjBsRFFYRkpSa0pzWTIxYWRtTnRNWHBKUjFaeldsY3hiR0p1VVdkaFZ6VndaRWRzYUdKSGJEWlpXRkp3WWpJMGRVbEZTalZKUjFKc1dtMUdNV0pJVVdka1IyaHdZM2xDYWxsWGVITmplVUpuV1ROS2JGbFlVbXhWYlZaMVdrZFdlVlZ0T1haa1IwSmpZbWxCWjBsRFFXZExhVUl3WW5sQ2FtTnRWbWhrUjFWblpFZG9iRWxIVm5OYVZ6RnNZbTVSWjFsSVNteGliVkpzWTJ4S2RtSXpVbWRKUnpWMldrZFZaMWxYTld0SlIwNW9ZMGhTTVdOdFZucEpSMFoxWlZOQ2QyTnRWWFJqTWxZd1NVaGFhR0pJVm14amVVSnRZak5LWTJKcFFXZEpRMEZuUzJsQ2VWcFhaSEJqTTFKc1kyMVdhMGxJUW5saU0wSnNZMjVTY0ZwWVRYVllSelJuU1VOQlowbERiM1pZUnpSblNVTkJaMkZYTlhCa1IyeG9Za2RzTmxwVFozQkpTSFJqWW1sQlowbERRV2RKUTBGbll6TldkMXBZU1hWaFZ6VndaRWRzYUdKSGJEWmFVMmR3VHpGNGRVbERRV2RKUTBGblNVTkNNR0ZIYkhwTWJVNTJZbTVPTUdOdVZtcGtSemw1VEd3NWJscFlVbFppYld4NFpGZFdWR1JJYkhOYVdFMXZTMVIwWTJKcFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWNVdsYzFhMXBZU2xOaU1qa3dTVVF4WTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0ZKdllWaE5kVmt6U214WldGSnNWVzFXZFZwSFZubFZiVGwyWkVObmNFOHhlSFZKUTBGblNVTkJaMGxEUVhaTWVVSlBZak5TYkV4RFFuQmFhVUo1V2xjMWExcFlTbE5pTWprd1NVZHNla2xITlhaa1EwSm9TVWhPYjFsWFVuWmtNVXAyWWpOUmMwbElUakJsVjNoc1kzbENNMkl6Vm5OYVF6bHFZak5XYzFwRFFtaGpTRUp6WlZOQ01HSjVRakJoUjFaalltbEJaMGxEUVdkSlEwRm5USGs0WjFwWGVHeGlWMVoxWkVOa2VrbEhaR3hrUmtwMllqTlNUMkl5VW14TFEydDFTVVprYjJGWGVHeEpTRkp2WVZoTloxa3lPVEZpUjFGbldXMVZaMXBIT1hWYVUzZG5aREpWYm1OdFZXZFpNbWgyWWpOT2NHSnRZMmRpYlRrd1NVaFNkbGhITkdkSlEwRm5TVU5CWjBsRE9IWkpTRTR4WTBoQ2RtTnVVV2RrUjJod1kzbENkV0l6WTJkak1teDFXVEpWWjJGWVVXZGtNamt4WWtkUloyTnRWbmhrVjJ4NVdsTkNhMkZYV20xYVdFcHNZbTVSWjJKSE9XNWhWMDFuV1ZoS2RtUlhOV3RKUjFKc1RGZFNNV05IYkhWYWVUVmpZbWxCWjBsRFFXZEpRMEZuWVZkWlowdElaSEJpYlZKMlpIazFWR0ZIUm10aU0yUlRZakk1TUVsRFdXMUpTRkp2WVZoTmRXTnRWblZhUjFaNVZXMDVkbVJEUW5CaWJrNHdXVmMxYWxwWE9XMUpTR1J3WW0xU2RtUjVOVlJoUjBacllqTmtVMkl5T1RCTFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRakJoUjJ4NlRHMUdhMkl6UWpCVk0xSTFZa2RXZWt0RGF6ZFlSelJuU1VOQlowbERRV2RKU0RGalltbEJaMGxEUWpsWVJ6Um5TVU5CWjB4NWIzRllSelJuU1VOQlowbERiMmRWYlZZd1pGaEtkV041UWpCaFIxVm5ZbTA1YTFwVFFuQmlibEoyU1Voa2IyRlhUbTlKU0ZKdldsTkNiR0pIVm5SYVZ6VXdTVWhPYjJJelZuTmFRMEo1V2xjMWExcFlTV2RaVnpWclNVZEtOVWxIVW14YWJVWXhZa2hTWTJKcFFXZEpRMEZuUzJsQ2FtTnRWbWhrUjFaNlNVZEdkVnBEUW5sYVdGSXhZMjAxZWtsSFJuVkpSemwzV2xjMFoyTXlhR2hhUnprelZXMDVkbVJETkdkVFZ6RjNZa2RXZEZwWE5UQkpTRkoyU1VkT01XTXpVblppVjJ3MldsTkNNMkZIVm5sYVUwSXdZVWRXWTJKcFFXZEpRMEZuUzJsQ2JHSkhWblJhVnpVd1NqTk5aMUpGT1U1SlIyeDZTVWhLYkdKdFVteGpiVlpyVEdsQ1IySXpTV2RhV0dob1lsaENjMXBUZDJka1J6aG5ZMjFXZFZwSFZubEpSMngxWkVjNFoyUkhhR3hKUjFaeldsY3hiR0p1VVc1ak1YaDFTVU5CWjBsRFFYRkpSMDV2WVZkNGExUnRPV3RhV0UxelNVaEtiR1JJVm5saWFVSm5aRWRvY0dNeVFYVllSelJuU1VOQlowbERiMmRSU0Vwc1pFaFdlV0p1VFdkbE1GWnpXbGN4YkdKdVVqaFNSemxxWkZjeGJHSnVVa2RqYlVadVlsZFdkV1JJTUdkVmJWWXdaRmhLZFdONVFtaEpSelYyV2tkVloyRlhOVEJpZVVJellVZHNhbUZEUWpCaWVVSjVXbGMxYTFwWVNYVllSelJuU1VOQlowbERiM1pZUnpSblNVTkJaMWt6U214WldGSnNWVzFXZFZwSFZubFZiVGwyWkVObmNFbElkR05pYVVGblNVTkJaMGxEUVdkamJWWXdaRmhLZFVsSVVtOWhXRTExV1ZoU01GbFhUbTlWTW1ob1drYzVNMHRJYzJkaVZ6bHJXbFJ2WjBveU9YZGFWelJ1U1Vnd2NFOHhlSFZKUTBGblNVZ3hZMkpwUVdkSlEwRjJTMmx3WTJKcFFXZEpRMEZuUzJsQ1FtTklRbk5oVjFaNlNVaE9NR1ZYZUhCaWJXTm5aRWM0WjJSSGFHeEpSMVp6V2xjeGJHSnVVV2RqTW1ob1drYzVNMVZ0T1haa1EwSXhZekpzZFZwNVFqQmhSMVZuV1VoT01GbFlVbkJaZVVKdVdsaFJaMk16VWpWaVIxWjZXVVo0ZFVsRFFXZEpRMEZ4U1VoQ2VXSXpRbXhqYmxJMVRHbENWR1JJYkhOaFZ6VnVTVWhrY0dKSGQyZFpXRUozWWtocloyUllUbkJpYldObldVaE9iMWxYVW5aa01VcDJZak5SZFZsWFVuWmpTRkpzV2taT01HVlhlR3hWTW1oc1dsaFNlbGxEUWpOaFIxWjVXbFo0ZFVsRFFXZEpRMEZ4U1VkR01sbFhiSE5aVjBweldsTkNhR0p0VVdka01teHpZa05DYlZsWGVITlpiVVpxWVhsQ2RtUkhhR3hqYm1Sd1l6SlZkVWxHWkc5YVZ6Um5WVEpvYUZwSE9UTkpSVkpRVkZOQ2NHTjVRbmRpTW5nMVdtMXNjMkpIVm10TVJuaDFTVU5CWjBsRFFYRkpSazV2V1ZkU05WRXhUbFJKU0U1cVlqTkNiR041UW5wa1NHeHpXbGhOWjFsWE5XdEpSMFpyV2toTloyUkhhR3hpVTBJd1lubENNR0ZIVldkYVJ6bHFaRmN4YkdKdVVYVkpSbVJ2V2xjMFoxVXlhR2hhUnprelNVVlNVRlJXZUhWSlEwRm5TVU5CY1VsSGJIcEpSMFl5V1Zkc2MxbFhTbk5hVTBKcFpGaFJaMWxIUm10aU0wSXdXbGRTVkdSSWJITmFWazV2V2xkV01HTXlRV2RoV0UxblltMDVNRXhEUW5wa1NHeHpXbGhOWjFsWVNteEpSMFozWTBkV2RWcEhWbXRKU0ZKMlNVaFNiMXBXZUhWSlEwRm5TVU5CY1VsSFZuVmFRMEoyV21sQ01HRkhWV2RaU0U1dldWZFNkbVF4U25aaU0xSm5TVWhTZGtsR2RIUmhWekZ3V1hsQ2VtTkhWbXBZUnpSblNVTkJaMGxEYjJkWmJWWnZXVmhhY0dJelNtUkxSMmd3WkVoQ2VrOXBPSFprTW14cVduazFibUZZVW05a1YwbDFZVmM0ZGxreU9YVmpNMUo1WkZkT01FeFlUakJsVjNoc1l6Sm9iRnBZVW5wTWVVNHhZekpzZFZwNU1XcGlNalY2WkVoS01Wa3pVbXhhUXpGNlpFaHNjMXBZVG05YVYxWXdZM2xyZFZoSE5HZEpRMEZuU1VOdmRsaEhOR2RKUTBGbldWZFNkbU5JVWxSa1NHeHpXbGhOYjB0VFFqZFlSelJuU1VOQlowbERRV2RKUjA1MlltNU9NRWxJVGpCbFYzaHNZM2xCT1VsSVVtOWhXRTExV1RJNWRXTXpVbmxrVjA0d1lqTkpkVmd6VGpCbFYzaHNZM3AwWTJKcFFXZEpRMEZuU1VOQloyRlhXV2RMU0U0d1pWZDRiR041TlhOYVZ6VnVaRWRuWjFCVU1EbEpSRUZ3U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNFcHNaRWhXZVdKcWRHTmlhVUZuU1VOQlowbERRV2RtVm5oMVNVTkJaMGxEUVdkSlEwRjJUSGxDVldGSFZubGFVMEpvWTIxVloyUkhhSGxhVjFWbll6SldkMWxZU21oa1IxVm5XVEpHZWxwWVRXZGhSMVo1V2xOQ2FWbFlUbXhhUTBKMlltbENWR0ZIUm10aU0yTm5Va1U1VGtsSVRqRmpTRUoyWTI1UmRWaEhOR2RKUTBGblNVTkJaMGxET0haSlEyZDRTMU5DZW1GSFJtdGlNMlJUWWpJNU1FbElRblppU0d4dFlWZDRjMXBYVVRaSlNGWjZXbE5DVkdGSFJtdGxWVTVVVlRGNGRVbERRV2RKUTBGblNVTkJka3g1UVc5TmFXdG5ZekpvYUZwSE9UTlZiVGwyWkVNMWFGcEhPWGRrUjFaclZUTlNOV0pIVmxSaFIxWnNaRWhOWjFsWVdtaGhWM2hvV1cxNGJFOXBRakZqTWxWbllWaFJkVmhITkdkSlEwRm5TVU5CWjBsRE9IWkpRMmQ2UzFOQ2VtRkhSbXRpTTJSVFlqSTVNRXh0Um10aU0wSXdXbGRTVkdSSWJITmFWazV2V2xkV01HTjVRbmRpTW5nMVdtMXNjMkpIVm10UGFVSm9ZMGhDYkdKdFVXZGpNMUkxWWtkV2VrbEhSbTFrUjFaNVdFYzBaMGxEUVdkSlEwRm5TVU00ZGtsSVNteGliVkpzWTIxc2RWb3hlSFZKUTBGblNVTkJaMGxEUW5CYWFVRnZaREpzZFZwSE9UTk1iRTV2V1ZkU05WRXhUbFJKUTBVNVVGTkNNV0p0VW14YWJXeDFXbGRSWjBwcFdXZEpXR1J3WW0xU2RtUjVOVlJoUjBaclpWVk9WRlY1TlhWWldGSndaRzFXVkdGSFJtdGlNMk53U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNHUndZbTFTZG1SNU5WUmhSMFpyWlZWT1ZGVjVOVlJaTWpsM1lWYzFibFV5YUhCaVV6VjNZMjFXZDFsWVNteFJWMUoyWTBoU2JGcEZUbnBqTVZKc1pVaFJiMk16VWpWaVIxWjZURzB4YUdORFoyOWplV3RuVUZRMFoyTjVOV3BqTTA1VldsaG9NRXRUZDJka1IyaHdZM2sxYzJJeVRtaGlSVFZvWWxkVmNFOHhlSFZKUTBGblNVTkJaMGxEUWpsWVJ6Um5TVU5CWjBsRFFXZEpSMVp6WXpKVloyRlhXV2RMU0U0eFkwaENkbU51VW5wUlYxSjJZMGhTY0dKdFpGUmtTR3h6V2xaT2IxcFhWakJqZVd0blpURjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGtSMmh3WTNrMWVWcFhOV3RhV0VwVFlqSTVNRXh0Um10aU0wSXdXbGRTVkdSSWJITmFWazV2V2xkV01HTjVRVGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGpNMUkxWWtkV2VreHRNV2hqUTJkdlkzbHJaMUJVTkdkamVUVjZaRWhzYzFwV1RtOWFWMVl3UzFSMFkySnBRV2RKUTBGblNVTkJaMlpXZUhWSlEwRm5TVU5CWjBsRFFteGlTRTVzU1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlF6aDJTVVpTYjJGWVRXZGlXRlo2WkVOQ2FWcFRRbXRpTWpWc1NVZEdiV1JIVm5sSlNFcHNZbTFTYkdOdGJIVmFlVUo2WW5sQ01HRkhWV2RaVjA0d1pGZEdjMGxJVGpCbFYzaHNTVWRzZFdNeVZubGtSMngyWW1sQ2NHTjVRbXRpTWpWc1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFYWk1lVUp3WW1sQ1oyUllRbXRaV0ZKc1dVTTFZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTRkp2WVZoTmRWZ3lOV3hhVjFKNlZUSm9jR0pWUm10aU0wSXdXbGRTVkdSSWJITmFWazV2V2xkV01HTjVRVGxKU0ZKNVpGZFZOMWhITkdkSlEwRm5TVU5CWjBsSU1XTmlhVUZuU1VOQ09WaEhOR2RKUTBGbldUSTVkV0p0Vm1wa1IxWnJVVEpHYzJKSFNtaFpNbk52UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxJVGpGalIxWjVURzFPZG1KdE5XeFpNMUpzV2tWT2FHSkhlR2xaVjA1eVMwTnJOMWhITkdkSlEwRm5TVU5CWjBsRE9IWkpSVFYyWkVkVmMwbEhXbkJqYms0d1NVaFdkMXBIUmpCYVV6bDVXbGMxYTFwWVNXZGhSMFoxV2tkNGJHTjVRbnBrU0d4eldsVldjMXBYTVd4aWJsRm5Zekk0WjJReVZXZGlNalZ6WlZOQ2FsbFhlSE5KU0ZKdllWaE5aMkZYV21OaWFVRm5TVU5CWjBsRFFXZE1lVGhuV1RJNWRXSnRWbXBrUjFaclNVZEdiV1JIVm5sSlIxcHdZMjVPTUVsSVZuZGFSMFl3V2xNMVkySnBRV2RKUTBGblNVTkJaMkZYV1dkTFNGSnZZVmhOZFdGSFJucFdXRUpyV1ZoU2JGcERRVzFLYVVJellWYzFhMkl6WTNWVk1taG9Xa2hzUkZVeFRXZEpWREE1U1VoV2RWcEhWbTFoVnpWc1drTnJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWkRKc2RWcEhPVE5NYkU1dldWZFNOVkV4VGxSTWJrNHdaVmQ0YkZKWGVHeGlWMVoxWkVOb01HRkhiSHBMVkhSalltbEJaMGxEUVdkSlEwRm5abFo0ZFVsRFFXZEpTREZqWW1sQlowbERRWFpMYVhCalltbEJaMGxEUVdkTGFVSldZMGRTYUdSSFZucEpTRkp2V2xOQ2JHSkhWblJhVnpVd1RHbENWV0ZIYkhwSlJ6RnNaRWRvZGxwRFFubGFWMXB6V2xkT01HTjVRbmRqYlRsM1dsaEtNR1ZUUWpKWlYzZ3hXbGhOWjJSSE9HZFpXRkl3WTIxc2FXUllVbXhqTVhoMVNVTkJaMGxEUVhGSlIwWjFXa05DYWxsWGVITmplVUpuWTIxV2RWcEhWbmxaUTBJd1lubENlVnBYTld0YVdFbG5Va1U1VGtsSVduQlpVMEp6WVZoUmRHRklVblJpUXpSblZUSldNR1JIYkhWYWVVSjNZMjA1ZDFwWVNqQmhWMVo2U1Vkc2RXTXliR3RhVm5oMVNVTkJaMGxEUVhGSlNGSnZZVmhOWjJKWFZqQmhSemxyU1Voa2NHSkhkMmRMYlRWMlpFTnZaMlJJU25CYU1tUnNZMmxDYUdKdE9UQmhSMVo1U1VoV2QxcEhSakJhVXpWalltbEJaMGxEUVdkTGFVSkJZMGRHZVZsWE1HZFlNazV2V1ZjMWJscFhVbEZqYlRsM1dsaEtNR0ZYVm5wSlJURm9ZME5DZGxwcFFtcGhSMFoxV2pKV2EwbElRbmxpTTBKc1kyNVNjRnBZVFdka01td3dZVU5DZG1KSFVXZGtiVVp6WkZkV2VsaEhOR2RKUTBGblNVTnZkbGhITkdkSlEwRm5aRmhDYTFsWVVteExSMDV2V1ZjMWJscFhVbEZqYlRsM1dsaEtNR0ZYVm5wTFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VNNGRrbEdUbXhrU0ZKd1ltMWpaMk5JU25aalIxWjVaRWRzYkdONVFuQmlhVUpuWTIxV2RWcEhWbmxaUTBKNllVYzVNV0pIVVdkaWJUa3dTVWhTZVdGWFpHNWFXRWxuV1ZjMFoyUllRbXRaV0ZKc1RHbENWR0ZYTldwYVZuaDFTVU5CWjBsRFFXZEpRMEYyVEhsQ01XTkhVbWhrUjFaNlNVZEdlVnBUUW1oaVIzaDJaREpXYTBsSFJtMWtSMVo1U1VoT01XTkhWbmxNYmxaM1drZEdNRnBUZDJkaFdGRnVZM2xDY0dKWVFuWmpibEpvWW01UloyUkhPR2RaTWtaellrTkNaMk50Vm5WYVIxWjVXVVo0ZFVsRFFXZEpRMEZuU1VOQmRreDVRbWxhVjFwMlkyMVZaMlJIYUdoa1F6VmpZbWxCWjBsRFFXZEpRMEZuV1RJNWRXTXpVV2RrUjFaMFkwZDRhR1JIVmxOYVdFNHhZa2hSWjFCVFFqQmhSMng2VEc1S2JHSnRVbXhqYVdkd1R6RjRkVWxEUVdkSlEwRm5TVU5DZW1SWVFteGphVFV4WTBkU2FHUkhWVzlaTW1ob1ltMWtiRnBHUW5saU0wSnNZMjVTY0ZwWVRYQlBNWGgxU1VOQlowbERRV2RKUTBGMlRIbENTbHBwUW5sYVZ6VnJXbGhKWjJGWVRXZGliVGt3U1Vkc2RHTkhlR3hpVjFaMVpFZFdhMGxIU2pWSlNGSnZXbE5DYW1JeU1YZGlNalZzWW01UmMwbEhVblppYVdRd1NVZE9hR0pIZDJkaVIyd3dURmRvTUdKWGQyZGpiVloxV2tkV2VWaEhOR2RKUTBGblNVTkJaMGxIYkcxSlEyZ3dXbGN4ZDJKSFJqQmFWa3BzWXpOV2MyUkRRV2hRVkRCblkyMVdkVnBIVm5sVWJUa3dVMWN4ZDJKSFZuUmFWelV3V2xkUmNFbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhTYjJGWVRYVlpNamwxWXpOU2VXUlhUakJpTTBwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEYxWTIxV2RWcEhWbmxMU0ZKc1lsaENjMWxZVW14VmJWWjZaRmQ0TUV4RFFqQmhSMng2VEc1S2JHSnRVbXhqYkVwMllqTlJjMGxJYzJkak1rNTJZMGRXVDFsWE1XeFBhVUl3WVVkc2VreHRlSFpaTWtaelZHMUdkRnBUZDJkYVdGcHNZbTVTUkdJeU5UQmFXR2d3VDJsQ01HRkhiSHBKU0RCd1R6RjRkVWxEUVdkSlEwRm5TVU5DT1ZoSE5HZEpRMEZuU1VOQlowbERPSFpKUm1SdldsYzBaMkp0UmpCaFdGcHNTVVpPYjFsWFVuWmtlVUpGVkRBd1oyRllUV2RrV0U1c1drTkNhV1JZVVdkWlYxSjJZMGhTYkZwR1RqQmxWM2hzWTNsQ2FHTnRWV2RpYlRrd1NVaE9NV05JUW5aamJsSnNXa040WTJKcFFXZEpRMEZuU1VOQloweDVPR2RoVnpWNldsaEtNRWxJVGpCbFYzaHdZbTFqWjFsWFdqQmFXRWxuWTIxV2RWcEhWbmxoVnpWdVNVaFNka2xIVm5Wak0xWjVXbE5DYUZwSE9YZGtSMVpyVlROU05XSkhWbnBKUjJob1pHMVZaMkZIYkc1aFIxWjZaRVo0ZFVsRFFXZEpRMEZuU1VOQmRreDVRbmRqYld4MlkyMXNNR1ZUTldOaWFVRm5TVU5CWjBsRFFXZGhWMWxuUzBoU2IyRllUWFZZTWpWc1dsZFNlbFV5YUhCaVZVWnJZak5DTUZwWFVsUmtTR3h6V2xaT2IxcFhWakJqZVd0blpURjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGtSMmh3WTNrMVptSnRWbXhhU0U1VVlVZHNkRkZYVW5aalNGSnNXa1pPTUdWWGVHeFZNbWhzV2xoU2VrbEVNR2RhYlVaell6SlZOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEl3WVVkc2VreHRUblppYms0d1kyNVdhbVJIT1hsTWJEbDZaRWhzYzFwWVRYVmFiVGw1VWxkR2FtRkRaMjlqZVd0blVGUTBaMlV4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhUblppYms0d1NVaE9NR1ZYZUd4SlJEQm5Xa2M1YW1SWE1XeGlibEYxV1ROS2JGbFlVbXhTVjNoc1lsZFdkV1JEWjI1ak0xSTFZa2RWYmt0VWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW5wa1NHeHpXbE0xTUZwWWFEQlJNamwxWkVkV2RXUkRRVGxKU0UxMVdUTk9lbFpIVmpSa1JIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJd1lVZHNla3h1U214aWJWSnNZMnhLZG1JelVYVlpXRUozV2xjMWExRXlhSEJpUjFGdll6TlNOV0pIVlhCUE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyWlRhemRZUnpSblNVTkJaMGxEUVdkSlNERmpZbWxCWjBsRFFqbFlSelJuU1VOQloweDViM0ZZUnpSblNVTkJaMGxEYjJkVFZ6VXlZakowYkZwRFFuWmlhVUpzV1ZkT2IwbElWbmRhUjBZd1dsTkNNR0o1UW5kYVdFcHRZak5LZEVsSVNteGliVkpzWTIxc2RWcDVRakJaV0U1eVkzazBaMVpIYUhCamVVSjBXbGhTYjJJeVVXZGlWMFkxU1VoS2JHUklWbmxpYkhoMVNVTkJaMGxEUVhGSlIwWjFaVk5DTWxsWGVERmFVMEo1V2xjMWExcFlTbWhaYlhoc1NVZEtOVWxIZUhCa1F6RnZaRWN4YzBvelRXZFViVGxyV2xaQ2FHTnVVV2RNVTBJd1pWaENjRmt5Um5OaVNHdG5XVk5DVlZwWE1YZGlSMFl3V2xaS2JHTXpWbk5rUXpWalltbEJaMGxEUVdkTGFVSlVXbGhTTUdGWE5XNUpTRUo1WWpOQ2JHTnVVbkJhV0UxbllWYzFlbUZYVW14SlNGSnZZVmhOWjJKWFZqQmhSemxyU1Voa2NHSkhkMmRMYlRWMlpFTnZaMlJJU25CYU1tUnNZMmxDTUdGSFZXZGFWM2hzWWxkV2RXUkRRakJpTVhoMVNVTkJaMGxEUVhGSlNGWjNXa2RHTUZwVE5XTmlhVUZuU1VOQlowdHBPV05pYVVGblNVTkNlVnBYTld0YVdFbHZTMU5DTjFoSE5HZEpRMEZuU1VOQlowbElTbXhrU0ZaNVltbENlVnBYTld0YVdFcFBZak5TU21KWVFuTmFWekZzWW01U2JGcEVkR05pYVVGblNVTkNPVmhITlRsWVJ6UjJTMmx3WTJKcFFYRkpSVloxWXpOV2VWcFRRakJoUjJ4NlNVZE9jMWxZVG5wSlIyeDZTVWN4YUdOdGRHeGFRMEpvWTNsQ1oxcHRiSFZaVjNod1pXMVdhMWxEUW1oamVVSm9ZbWxDZG1OSVVuQmlWMncyV1ZoU2NHSXlOR2RhVnpWNlpGaEtjR0p0WkdOaWFVRnhTVWRzTUVsSVpIQmlSM2RuWW0wNU1FbEhOV3hhVjFKeldsaE9lbUpJYTJka1NFbzFTVWhTZGtsSFFtMWhWelZvWWtkc05scFhRWFZZUnpSblMyeDRkVWxEYjJkVWJUa3dXbE5DTUdGSGJIcEpTRUo1WWpOQ2JHTnVValZKUnpWb1lsZFZaMkZZVFdkWlUwSjZaRWhLY0dKdFkyZGtSemhuWTBoS2JHUnRWblZrUTBKcFkyMVdhR0V5YkhWYWVVSkVZa2M1ZW1SWVNteEpSWEJVU1VWT2RtSllRbkJpUjFaNVdFYzBaMHRwUW5aalNGSndZbGRzTmxsWVVuQmlNalY2VEdsQ1ZGcFhWV2RrV0VKcldWaFNjR0p0WTNSYVYzaHNZbGRXZFdSRE5UQmplVUp0WWpOSloySlhPWGxhVTBKd1ltMWFkbU50TVdoa1IyeDJZbWsxWTJKcFFYRk1NWGgxVkVkc01GSlhlR3hpVjFaMVpFWnpibHB0YkhWWlYzaHdaVzFXYTBveE1HZFFVMEl3WTI1V2JFOHhlSFZNZVc5eFdFYzBaMHRwUWxOYVZ6VnJXbGhKWjJKWFZqQmhSemxyU1VoV2VscFhVV2RrUnpoblkyMVdkVnBIVm5sSlNGSnZXbE5DTWxsWGVERmFVMEl3WW5sQ01HRkhWV2RhVjNoc1lsZFdkV1JEWkhwSlJWSlFWRk0xWTJKcFFYRkpSVUozV1ZoS2FHSlRRbmxhV0U0eFlraFJaMVpIYUd4SlNGcG9Za2hXYkVsSVVuWkpTRXBzWW0xU2JHTnBOV05pYVVGeFNVVkNkMWxZU21oaVUwSnFZakkxTUZsWGJIVmFXRWxuVkcwNWExcFRRbkJpYmxKMlNVaGtiMkZYVG05SlNGSjJTVWhLYkdKdFVteGphVFZqWW1sQmNVbEZRbmRaV0Vwb1lsTkNkbU5JVW5CaU1qVjZTVVZXYzFwWE1XeGlibEZuWW0xR2RGcFROV05pYVVGeFNVVkNkV0l5VG5aaVIzaG9ZMGhPYkZoSE5HZExhVGxqWW10NGNHUkZWbk5hVnpGc1ltNVJkV050Vm5WYVIxWjVTVVF3WjJOdFZuVmFSMVo1VHpGNGRVeDVPR3BKU0U1MlpGaEthbHBWTVdoalNFSndZbTFrVmxWcmR6bGlSMnd3VEZkV2MxcFhNV3hpYmxGMVlXNU5kV0pYUm5kSmFYZHBXbGhvZDJJelNqQkpSMDUyWW01T01FbEhXbkJqYlZaR1pHMVdkV1JEUVRsSlEyaGpZMng0ZFVsRFFqQlpXRXB1V2xoUk5rbEZWakphVnpVd1ZrZEdlVm95VmpCTVJuaDVXRWMwWjBsSFZqSmFWelV3VDJsQ2VtUklTbkJpYldOeldFaEtZMkpwUVdkYVIxWXdXVmRzYzA5cFFsTmFWMDUyWTIxUk9HTXpVbmxoVnpWdVRFTkNhR0p1YXl0SlJEQm5aVE14WTJOc2VIVkxWRzluWkcwNWNGcERRVGxRYVVJM1dFaEtZMkpwUVdka1IwWjVXakpXTUV4dFVuQmpNMEpvWkVkT2IxSllXbXhpYmxGdlltMVdNMGxGVGpGak0xSjJZbFZXTWxwWE5UQkxSMVl5V2xjMU1FeERRamRKUjFKc1pFZEdjR0pEUWpsTFUyczNXRWhLWTJKdU1EZFlTRXBqWW1sSmMwbHRiSFJqUnpsNVpFTkNNR1ZZUW14SlNITm5WRmM1TVdNeVZsVmlNMVpxWVVWNGRsa3lSakJoVnpsMVNVZ3daMXB1U25aaVUwSmpTV2swZFV3elVqVmpSMVo2V0VOSk4xaElTbU5pYkhoNVdFYzFiR1ZJUW5aamJsRm5XVEk1ZFdNelVXZGFNbFl3VkZjNU1XTXlWbFZpTTFacVlVVjRkbGt5UmpCaFZ6bDFTVVF3WjB0R2VIbFlSelJuU1VkV01rOXBRazVpTTFaNldsVldNbHBYTlRCSlNIZG5Wa2M1TVZreWFFWmtiVloxWkVONFkyTnNlSFZKUTBJd1lqTldhbUZGYkd0YVZ6VXdZVmRhY0ZwWVNUWkpSelV4WWxkS2JHTnBRamhKU0ZaMVdrZFdiV0ZYTld4YVJuaDVXRWMwY0U5cFFrNWlNMVo2V2xaU2RtUlhUbTlVUnpscVdWaFNjR0l5TkdkbVEwSXhZbTFTYkZwdGJIVmFWMUZuVUZRMFoyVXhlSGxZUnpSblNVZHNiVWxEYUd4a2FUVXdaVmhDYkV4dVRqQlpXRW93WXpGa2NHUkhaMjlZUTBvd1lqTldhbUZHZDJsTFUydG5aVEY0ZVZoSE5HZEpRMEZuWVZkWlowdElVblprVjA1dlUxZFNiR0p1VW5CYWJXeHNZMmxCT1ZCVU1HZGtWelZyV2xkYWNHSnRWbXRMVTBJM1dFaEtZMkpwUVdkSlEwRm5TVWhLYkdSSVZubGlhblJqWTJ4NGRVbERRV2RKU0RGalkyeDRkVmhJU21OaWFVRm5TVU5DYW1JeU5YcGtRMEl3WWpOV2FtRkZWakphVnpVd1NVUXdaMXBZV1dkWldFMW5Wa2M1TVZreWFFWmtiVloxWkVSMFkyTnNlSFZKUTBGblNVZE9kbUp1VGpCSlNGSjJaRmRPYjFReVNuRkpSREJuV2pKV01GWkhPVEZaTW1kdlpFYzVNVmt5YUVaa2JWWjFaRU4zWjJSSE9URlpNbWhLV2tkV2RXUkhiRzFoVjFaNVMxUjBZMk5zZUhWWVNFcGpZbWxCWjBsRFFubGFXRkl4WTIwMFoyVXhlSGxZUnpSblNVTkJaMGxEUWpSUGFVSXdZak5XYW1GRk9XbGhhVFUwVEVaNGVWaEhOR2RKUTBGblNVTkNOVTlwUWpCaU0xWnFZVVU1YVdGcE5UVk1Sbmg1V0VjMFowbERRV2RtVkhSalkyeDRkVWxEUWpsWVNFcGpZbXg0ZVZoSE5HZEpTRXBzWkVoV2VXSnBRamRZU0VwalltbEJaMGxEUWpSUGFVRnZXbGhaWjFsWVRXZFVWemt4WXpKV1JtUnRWblZrUTJ0MVdUSjRjRnBYTlRCWFEzaGpZMng0ZFVsRFFXZEpTR3MyU1VOb2JHUnBRbWhqZVVKT1lqTldlbHBWVmpKYVZ6VXdTMU0xYW1KSGJHeGlibEphVEVaNGVWaEhOR2RKU0RBM1dFaEtZMkp1TURkWVNFcGpZbXg0ZVZoSE5XcGlNalY2WkVOQ2JscFlVbFZpTTFacVlVTkJPVWxEYUd4UGFVSlZZak5XYW1GRlZqSmFWelV3VEVOQ2NGcEhWblZrUjJ4dFlWZFdlVTlwUW5Wa1Z6RnBXbGhKY0U5cFFrNWlNMVo2V2xaU2RtUlhUbTlVUnpscVdWaFNjR0l5TkdkUVZEUm5aVEY0ZVZoSE5HZEpSMDUyWW01T01FbElVblprVjA1dlZESktjVWxFTVdOamJIaDFTVU5CWjBsRGFHeE1ibEpvWTIxa2JHUkdVblprVjA1dldsaE5aMHBwV21OamJIaDFTVU5CWjBsRFFXZFJXRXA1V1ZocmRXTklTblprUnprd1pWaENiRXh0V25CaWJWRjFXVEpHYzJKRGFHTmpiSGgxU1VOQlowbERRV2RKUTBKc1RHNVNhR050Wkd4a1JsSjJaRmRPYjFwWVRYTllTRXBqWW1sQlowbERRV2RKUTBGblMwaFJjRWxFTUN0SlIyeHJXbGMxTUdGWFduQmFXRWxuVUZRd09VbElVWFZoVjFKc1ltNVNjRnB0Ykd4amJIaDVXRWMwWjBsRFFXZEpRMEZ3UzFOQ09HWkdlSGxZUnpSblNVTkJaMHRIVlhWWk1taG9ZbTFrYkZwR1VuWmtWMDV2V2xoTlowcHBXbU5qYkhoMVNVTkJaMGxEUVdkUldFcDVXVmhyZFdOSVNuWmtSemt3WlZoQ2JFeHRXbkJpYlZGMVdUSkdjMkpEYUdOamJIaDFTVU5CWjBsRFFXZEpRMEpzVEcxT2IxbFhOVzVhVjFKVllqTldhbUZIVm5wTVJuaDVXRWMwWjBsRFFXZEpRMEZuU1VOb01FdFRRVGxRYVVKd1drZFdkV1JIYkcxaFYxWjVTVVF3T1ZCVFFqQk1iV3hyV2xjMU1HRlhXbkJhV0VwalkyeDRkVWxEUVdkSlEwRm5TMU5yTjFoSVNtTmliSGg1V0VjMFowbElTbXhrU0ZaNVltbENOMWhJU21OaWFVRm5TVU5DTkU5cFFqQmlNMVpxWVVVNWFXRnBOV3BpUjJ4c1ltNVNXVXhHZUhsWVJ6Um5TVU5CWjJWVWIyZGtSemt4V1RKb1VGbHRiM1ZaTW5od1dsYzFNRmRUZUdOamJIaDFTVU5DT1U4eGVIbFlSelU1VHpGNGVWaEhOR2xNUTBsMlRIbENSR050Vm10aFdGRm5aRWM0WjJOdFZtaFpNMUYwV2toS2FGb3laR2haYlhoc1NVWjBiMlJJVW5kamVtOTJUREprY0dSSGFERlphVFZxWWpJd2RsVXhVbE5VVlhkMlkyMVdhRmt6VVhSYVNFcG9XakprYUZsdGVHeFlWbmg1V0VjMWMxcFlVV2RpVjBZd1dUSm9iR014VG14aVIxWnFaRWM1ZVZKdVZuVlplbTluWXpOU2VXRlhOVzVKU0hkblpGYzFhMXBYV25CaWJWWnJTVVF3WjFoRFNtTkphblJqWTJ4NGRWa3lPWFZqTTFGbllsZEdNRmt5YUd4ak1VNXNZa2RXYW1SSE9YbEpSREJuUzBkV2MwOXBRazlpTWxKc1RFTkNlbHBYZUd4Wk0xSjJZMnB2WjJNelVubGhWelZ1UzFSdloxbHRPWFppUjFab1ltbEJPVkJwUWpkWVNFcGpZbWxCWjJGWFdXZExRMFowV1ZoU2FtRkhWbnBWTWxaeldsZE9NR0l6U2tka1Z6VnFTMU5DTjFoSVNtTmlhVUZuU1VOQ2RGbFlVbXBoUjFaNlZUSldjMXBYVGpCaU0wcEhaRmMxYWtsRU1HZFhNWGg1V0VjMFowbERRV2RKUTBKalNXMHhhR1JIVG05YVdFNWpTV2w0WTJOc2VIVkpRMEZuU1VOQloxaERTak5hVjBweVlWaFNUbGxZVW1waFIxWjZWVEpXYzFwWFRqQmlNMHBqU1dsNFkyTnNlSFZKUTBGblNVTkJaMWhEU25SaU0zQk9XVmhTYW1GSFZucFZNbFp6V2xkT01HSXpTbU5KYVhoalkyeDRkVWxEUVdkSlEwRm5XRU5LZEdNd01XaGtSMDV2V2xoT1ZGcFhlR3haTTFKMlkyeDNhVXhHZUhsWVJ6Um5TVU5CWjBsRFFtTkpiVGxPV1ZoU2FtRkhWbnBWTWxaeldsZE9NR0l6U21OSmFYaGpZMng0ZFVsRFFXZEpSakIxV20xc2RWcERaMjlpVjFZd1lVYzVhMHRUUVRsUWFVSndZekJhTVdKdFRqQmhWemwxUzBkV2MxY3lNV3hrUjJoMldrWXdjRXRVZEdOamJIaDFTVU5DT1ZoSVNtTmliSGg1V0VjMFowbEhiRzFKUTJkb1lsZEdNRmt5YUd4ak1VNXNZa2RXYW1SSE9YbFNibFoxV1hsQ09HWkRRV2hoV0U1SFpGYzFhbVJIYkhaaWFXaHNZa1owZEZsWVVtcGhSMVo2VlRKV2MxcFhUakJpTTBwSFpGYzFhbGhUYTNCSlNIUmpZMng0ZFVsRFFXZEpTRXBzWkVoV2VXSnBRbTFaVjNoNldsUjBZMk5zZUhWSlEwSTVXRWhLWTJKc2VIbFlSelJuU1VoS2JHUklWbmxpYVVKc1lrWjBkRmxZVW1waFIxWjZWVEpXYzFwWFRqQmlNMHBIWkZjMWFsaFRhSHBhVjNoc1dUTlNkbU5wYXpkWVNFcGpZbTR3TjFoSVNtTmliSGg1V0VjMWJHVklRblpqYmxGbldUSTVkV016VVdkaVYwWXdXVEpvYkdNeFRteGlSMVpxWkVjNWVWRlhOV3RWUjBaNVdsYzFNR014VW5aSlJEQm5TMFo0ZVZoSE5HZEpSMVp6VDJsQ1QySXlVbXhNUm5oNVdFYzBaMGxJVG14aVIxWnFaRWM1ZVU5cFFucGtTRXB3WW0xamMxaElTbU5pYVVGbldXMUdlbHBWTlhaYVIxVTJTVVUxZGxwSFZtTmpiSGgxUzFSdloxbHRPWFppUjFab1ltbEJPVkJwUWpkWVNFcGpZbWxCWjJKSFZqQkpSelYyV2tkVk5rbEZOWFphUjFWblprTkNkV1JYZUhOSlJEQm5XbGQzTjFoSVNtTmlhVUZuV2tjNFoyVXhlSGxZUnpSblNVTkJaMHg1T0dkU2JUbDVTVWhTYkdNelVuQmliV05uWVZjMFoyTXlhR2hhUnprelNVZFNkbUpUZDJkV1JUbEZWSHB2WjFWdFZuUmlNMXBzV0VoS1kySnBRV2RKUTBGMlRIbENiR015ZUhCaWJsRjBXa2RzZWxsWFNuTmFVekYxV2xob01FeFhlSEJpYlZWblltMDRkRmt5T1hWak1qbHpXbFo0ZVZoSE5HZEpRMEZuV1RJNWRXTXlPWE5hVXpWellqSmpiMWhEU2xSYVYzaHNXVE5TZG1OcWIyZFlRMGx6U1VoT2JHSkhWbXBrUnpsNVRFTkNZMGxyTlhaYVIxVTJTVVozYVV4RFFuVmlNbEpzUzFSMFkyTnNlSFZZU0VwalltbEJaMGxEUW5CYWFVRnZZbGRHTUZreWFHeGpNVTVzWWtkV2FtUkhPWGxMUnpWMldrZFZjMGxJVG14aVIxWnFaRWM1ZVV0VGEyZGxNWGg1V0VjMFowbERRV2RKUTBKNVdsaFNNV050Tkdka1NFb3hXbFIwWTJOc2VIVkpRMEZuU1VneFkyTnNlSFZZU0VwalltbEJaMGxEUW5CYWFVRnZZbTA1YTFwVFFUbFFWREJuV1cxR2VscFZOWFphUjFWd1NVaDBZMk5zZUhWSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VkYWFHSklUbXhQTVhoNVdFYzBaMGxEUVdkbVZuaDVXRWMxWTJOc2VIVkpRMEZuU1VjMWRscEhWV2RRVTBKMVlqSlNiRXh1UW1oamJWWjFaRVUxZGxwSFZUZFlTRXBqWW1sQloyWlRRak5oUjJ4eldsTkJiMkp0T1d0YVUyczNXRWhLWTJKc2VIbFlSelJuU1VoS2JHUklWbmxpYVVKdFdWZDRlbHBVZEdOamJIaDFabFIwWTJOc2VIVllTRXBqWW0xT2RtSnVUakJKUjJ4NlVtNVdkVmt6VW5CaU1qUm5VRk5CYjFwdVZuVlplbTluV1ZjMU5VdFViMmRaYlRsMllrZFdhR0pwUVRsUWFVSTNXRWhLWTJKcFFXZGpiVll3WkZoS2RVbERhR05qYkhoMVNVTkJaMGxJVWpWalIxWjJXbWxDYldSWE5XcEpSREE1VUZOQ1kwbHRXakZpYlU0d1lWYzVkVmhEU1dkbVNIaGpZMng0ZFVsRFFXZEpSVGxwWVcxV2FtUkROWGRqYlRrd1lqTlNOV05IVlhWa1J6bFVaRWhLY0dKdFkzVlpNa1p6WWtOb2JXUlhOV3BMVTBFNVVGUXdaMWhEU21KaU1rcHhXbGRPTUVsRldqRmliVTR3WVZjNWRWaFdkMmxZU0VwalltbEJaMHRVZEdOamJIaDFabFIwWTJOc2VIVkphWGRwWVZjeGQySXpTakJKU0hSalkyeDRkVWxEUW1wa1dFNHdZakl4Um1KSFZuUmFWelV3VEVaNGVWaEhOR2RKUjJnd1lsZDNjMWhJU21OaWFVRm5WRWRzTUZKWGVHeGlWMVoxWkVONFkyTnNlSFZKUTBKVldsY3hkMkpIUmpCYVZrcHNZek5XYzJSRGVHTmpiSGgxU1VOQ2QyTnRPWGRhV0Vvd1pWTjRZMk5zZUhWbVUwSnRZMjA1ZEVsR2QybGlSMnd3VEZkV2MxcFhNV3hpYmxKalNXcDBZMk5zZUhWWVNFcGpZbTFzZEdOSE9YbGtRMEkzU1VkYWNHTnRWa1prYlZaMVpFTkNPVWxIV25saU1qQm5XRU5KZFV3elZqQmhWM2QyV20xc2VWcFRNV3hrYlZaMVpFWjNhVTh4ZUhsWVJ6VndZbGhDZG1OdVVXZGxlVUp1V2xoU1RtSXpWbnBhVmxKMlpGZE9iMVJIT1dwWldGSndZakkwWjJaVFFtMWpiVGwwU1VaM2FVeHBPVEZrUjJ4elRESmtiR1JETVhSaU0xWjZXbE14TUdJelZtcGhRekZ6WWpKT2FHUkhiSFppYkhkcFR6RjRlVmhITlhCaVdFSjJZMjVSWjJWNVFtNWFXRkpWWWpOV2FtRkZiR3RhVnpVd1lWZGFjRnBZU1dkbVUwSnRZMjA1ZEVsR2QybE1hVGt4WkVkc2Mwd3laR3hrUXpFd1lqTldhbUZETVhCYVIxWjFaRWRzYldGWFZubFlRMGszV0VoS1kySnRiSFJqUnpsNVpFTkNOMGxITVdoa1IwNXZXbGhPVkZwWGVHeFpNMUoyWTJ0R2RWcEdRbWhqYlZaMVpFaE9WV0o1UWpsSlIxcDVZakl3WjFoRFNYVk1NMVl3WVZkM2RtSlhSakJaTW1kMFl6SldjMXBYVGpCaU0wcGpTV3AwWTJOc2VIVllTRXBqWW10Q2FtUllUakJpTWpGR1lrZFdkRnBYTlRCTFJuZHBZa2RzTUV4WFVubFpWMlJ1V1ZkS2MxcFdkMmxMVm5oNVdFYzFiR1ZJUW5aamJsRm5XVEo0YUdNelRXZFVSMnd3VWtoS2FGb3laR2haYlhoc1NVZFdOR1JIVm5WYVNFMW5WRWRzTUZKWGVHeGlWMVoxWkVOQ04xaElTbU5pYVVGblVVaENlV0l6UW14amJsSTFTMGh6WjJSSWJIZGFWRzluVVZoS2VWbFlhMmRtVTJ0blkwaFdhV0pIYkdwSlIyUjVZVmRSTDA5cFFtSmlibFowV1cxV2VVeERRblZrVnpGcFdsaEtaRTh4ZUhsWVJ6VmpZMng0ZFVsRFFrRmpTRXAyWTBkV2VXUklhMjlsZVVJd1pWaENiRTlwUWtOaU1qbHpXbGRHZFV4RFFubGFWMXB6V2xkT01FOXBRakJqYmxac1NVZ3djRWxJUWpGWmJYaHdXWGxDYTJGWVRtaFpiWGhzV2tOQk9VbEhXbWhpU0U1c1R6RjRlVmhITldOamJIaDFTVU5DUVdOSVNuWmpSMVo1WkVocmIwdFRRbmRrVjBwellWZE5aMkZIUm5WYVIzaHNVSHB2WjJNelVubGhWelZ1VHpGNGVWaEhOV05qYkhoMVNVTkNkMk50YkRKWldGSnNTVWhPTUZsWVNqQlhSRGcyU1VjMU1XSlhTbXhqYW5SalkyeDRkVmhJU21OaWFVRm5ZMGhLY0dSdFJqQmFVMEo2WkVkR2VXUkdheTlQYVVKMVpGY3hhVnBZU1RkWVNFcGpZbXg0ZVZoSE5HZEpTRUo1WVZoYWFHUkhWV2RZTWxKNVdWZGtibUZYTlc1SlJEQm5XbTFHYzJNeVZUZFlTRXBqWW14NGVWaEhOR2RKU0VKNVlWaGFhR1JIVldkWU0xSjJaRmRPYjFOWFVteGlibEp3V20xc2JHTnFPRFpKUnpVeFlsZEtiR05xZEdOamJIaDFXRWhLWTJKcFFXZGpTRXAyWkVkV2FtUkhWbXRKUjFwd1kyNU9NRlpZUW10WldGSnNXa05uY0U5cFFqSmlNbXhyU1VoMFkyTnNlSFZKUTBGblNVaFNiMkZZVFhWWlYxSnJVbGhhYkdKdVVrMWhXRTR3V2xjMWJHTnBhR05KYlRGMlpGaE9iRnBIT1ROaWJIZHBURU5DTUdGSGJIcE1iRGxyWTIxR2JsVXpVbWhqYmxGMVdXMXNkVnBEYURCaFIyeDZTMU4zWjJVeGVIbFlSelJuU1VOQlowbERRbXBaV0VJd1pGaEtiRTlwUWpCamJsWnNURVo0ZVZoSE5HZEpRMEZuU1VOQ2QxbFlUbnBoV0Zwc1QybENiVmxYZUhwYVUzaGpZMng0ZFVsRFFXZEpTREJ3VHpGNGVWaEhOR2RKUTBGblpFZG9jR041TldoYVIxSkdaRzFXZFdSRmVIQmpNMUpzWW0xV2VVdEdkMmxrUnpreFdUSm9lbVJIUm5sa1JuZHBURU5DTUdGSGJIcE1iRGxyWTIxR2JsVXpVbWhqYmxGMVdXMXNkVnBEYURCaFIyeDZTMU4zWjJVeGVIbFlSelJuU1VOQlowbERRbXBaV0VJd1pGaEtiRTlwUWpCamJsWnNURVo0ZVZoSE5HZEpRMEZuU1VOQ2QxbFlUbnBoV0Zwc1QybENiVmxYZUhwYVUzaGpZMng0ZFVsRFFXZEpTREJ3VHpGNGVWaEhOR2RKUTBGbldrYzVhbVJYTVd4aWJsRjFXVmRTYTFKWVdteGlibEpOWVZoT01GcFhOV3hqYVdoalNXMHhkbVJZVG14aVZ6a3lXbFozYVV4RFFqQmhSMng2VEd3NWEyTnRSbTVNYlVwd1ltMVJiMlJIYUhCamVXdHpTVWgwWTJOc2VIVkpRMEZuU1VOQloxa3lSbmRrU0ZaNVdsUnZaMlJJU2pGYVUzaGpZMng0ZFVsRFFXZEpRMEZuWTBkR2VtTXliREphVkc5bldtMUdjMk15VlhOWVNFcGpZbWxCWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKUjFKMldUTldkRnBYTlRCTWJVWnJXa1ZXTWxwWE5UQlVSMng2WkVkV2RWcFlTVzlZUTBvd1lqTldhbUZITVhaa2JWWmpTV2wzWjJSSGFIQmplVFZtV2toS2FGcDVOV2xoVnpWclMwaFNiMkZZVFhCTVEwSTNXRWhLWTJKcFFXZEpRMEZuU1VkT2FHTklVakZqYlZVMlNVaFNlV1JYVlhOWVNFcGpZbWxCWjBsRFFXZEpTRUpvWXpOT2NHUnRWVFpKUjFwb1lraE9iRXhHZUhsWVJ6Um5TVU5CWjJaVGF6ZFlTRXBqWW1sQlowbERRbXRpTWs0eFlsZFdkV1JETldoYVIxSkdaRzFXZFdSRmVIQmpNMUpzWW0xV2VVdEdkMmxpVnpreFl6SldNV05HZDJsTVEwSXdZVWRzZWt4c09XdGpiVVp1VWxjMWEweHRTbkJpYlZGdlpFZG9jR041YTNOSlNIUmpZMng0ZFVsRFFXZEpRMEZuV1RKR2QyUklWbmxhVkc5blpFaEtNVnBUZUdOamJIaDFTVU5CWjBsRFFXZGpSMFo2WXpKc01scFViMmRhYlVaell6SlZjMWhJU21OaWFVRm5TVU5DT1V0VWRHTmpiSGgxU1VOQlowbEhVblpaTTFaMFdsYzFNRXh0Um10YVJWWXlXbGMxTUZSSGJIcGtSMVoxV2xoSmIxaERTakJpTTFacVlVZE9hR0p0VG14aVJuZHBURU5DTUdGSGJIcE1iRGxyWTIxR2JsSlhOV3RNYlVwd1ltMVJiMlJIYUhCamVXdHpTVWgwWTJOc2VIVkpRMEZuU1VOQloxa3lSbmRrU0ZaNVdsUnZaMlJJU2pGYVUzaGpZMng0ZFVsRFFXZEpRMEZuWTBkR2VtTXliREphVkc5bldtMUdjMk15VlhOWVNFcGpZbWxCWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKUjFKMldUTldkRnBYTlRCTWJVWnJXa1ZXTWxwWE5UQlVSMng2WkVkV2RWcFlTVzlZUTBvd1lqTldhbUZIVm5WYVJuZHBURU5DTUdGSGJIcE1iRGxyWTIxR2JsSlhOV3RNYlVwd1ltMVJiMlJIYUhCamVXdHpTVWgwWTJOc2VIVkpRMEZuU1VOQloxa3lSbmRrU0ZaNVdsUnZaMlJJU2pGYVUzaGpZMng0ZFVsRFFXZEpRMEZuWTBkR2VtTXliREphVkc5bldtMUdjMk15VlhOWVNFcGpZbWxCWjBsRFFqbExWSFJqWTJ4NGRVbERRamxZU0VwallteDRlVmhITkdkSlNFSjVZak5TYkZrelVteGFRMEo1V2xjMWExcFlTVzlMVkc5blZrZFdkR05IZUdoa1IxWlRXbGhPTVdKSVVXZGxNWGg1V0VjMFowbERRV2RqYlZZd1pGaEtkVWxIYURCaVYzaG5VRWhPYzJJelVTdFFRemw2WWtjNU1GQnRRVGRZU0VwalltbEJaMlpXZUhsWVJ6VmpZMng0ZFVsRFFuZGpiV3d5V1ZoU2JFbEdPV3RqYlVadVZUTlNhR051VVc5YVdGazJTVVV4ZG1SWVRteFNXRnBzWW01UloyWkRRbFZpTTFacVlVVldNbHBYTlRCTFZHOW5aRzA1Y0ZwRFFqZFlTRXBqWW1sQlowbERRbkJhYVVGdldFaEtZMkpwUVdkSlEwRm5TVU5vYkdScE5UQmxXRUpzVEc1T01GbFlTakJqTVdSd1pFZG5iMWhEU25SaU0xWjZXbFozYVV0VFFXMUthVUZ2V2xoWloxbFlUV2RVVnpreFl6SldSbVJ0Vm5Wa1EydDFXVzVXTUdSSE9YVkpRMFU1VUZOQmQwdFRRamhtUm5oNVdFYzBaMGxEUVdkSlEwSXdZVWRzZWt4dFVuQmpNa1pwWWtkV2ExaElTbU5pYVVGblNVTkJjRWxJZEdOamJIaDFTVU5CWjBsRFFXZGpiVll3WkZoS2RVOHhlSGxZUnpSblNVTkJaMlpXZUhsWVJ6VmpZMng0ZFVsRFFXZEpSMnh0U1VOb1kyTnNlSFZKUTBGblNVTkJaMlJIYUhCamVUVnZXVmMxYTJKSFZXZEthVnBqWTJ4NGRVbERRV2RKUTBGblNWY3hhR1JIVG05YVdFNVVXbGQ0YkZrelVuWmphMFoxV2taQ2FHTnRWblZrU0U1VllubG9ZMk5zZUhWSlEwRm5TVU5CWjBsRFFteGthVFV3V1ZoS2JscFlVV2hKUjBaNlNVVTFkbHBIVlhOWVNFcGpZbWxCWjBsRFFXZEpRMEZuWkVkb2NHTjVOVzlaVnpWcllrZFZjMWhJU21OaWFVRm5TVU5CWjBsRFFXZGtSMmh3WTNrMWRscHRXbnBhV0ZKUldWaEtiR0p1VVdkWldFMW5WRzA1YTFwV2VIbFlSelJuU1VOQlowbERRWEJZU0VwalltbEJaMGxEUVhCSlNIUmpZMng0ZFVsRFFXZEpRMEZuWTIxV01HUllTblZQTVhoNVdFYzBaMGxEUVdkbVZuaDVXRWMxWTJOc2VIVkpRMEZuU1VkV01reHVRbmxhV0Zwc1ltNVNSVnBYV21oa1YzZ3dTME5yTjFoSVNtTmlhVUZuU1VOQ2JHUnBOWHBrUnpsM1ZVaEtkbU5IUm01WldGSndZakkwYjB0VWRHTmpiSGgxV0VoS1kySnBRV2RKUTBKd1dtbEJiMXBZV1hWa1NHeDNXbE5CT1ZCVU1HZFlRMG93WWpOV2FtRklUakJaV0Vvd1dFTkpjRWxJZEdOamJIaDFTVU5CWjBsRFFXZGtSMmh3WTNrMVptUkhPVEZaTW1oS1drZFdkV1JIYkcxaFYxWjVTVVF3WjFveVZqQldSemt4V1RKb1NscEhWblZrUjJ4dFlWZFdlVXRIVmpKSlIwWjZTVVpTZG1SWFRtOVNXRnBzWW01UmNFOHhlSGxZUnpSblNVTkJaMlpXZUhsWVJ6VmpZMng0ZFVsRFFXZEpSMDUyWW01T01FbElRblpqZVVFNVNVZGtiR1JGTVhaa1dFNXNWa2M1TVZreWFFMWlNazVvWkVkc2RtSnBhR3hrYVhkblpFZG9jR041Tldaa1J6a3hXVEpvU2xwSFZuVmtSMnh0WVZkV2VVdFVkR05qYkhoMVdFaEtZMkpwUVdkSlEwSndXbWxCYjBsWVFuWmplV3RuWlRGNGVWaEhOR2RKUTBGblNVTkNlVnBZVWpGamJUUTNXRWhLWTJKcFFXZEpRMEk1V0VoS1kySnNlSGxZUnpSblNVTkJaMlJIYUhCamVUVjZaRWRHZVdSR1oyZFFVMEozWWpOTmRXVkVkR05qYkhoMVNVTkJaMGxJVW05aFdFMTFZek5TYUdOdVVscEpSREJuWTBjNWVreHVhemRZU0VwallteDRlVmhITkdkSlEwRm5aRWRvY0dONU5XWmFTRXBvV2pKa2NHSnRZMmRRVTBJd1kyNVdiRTh4ZUhsWVJ6VmpZMng0ZFVsRFFXZEpSMXB3WTIxV1JtUnRWblZrUTJnd1lVZHNla3hEUW1OSmJWSjVXVmRrVkdSSFJubGtSbmRwVEVOQ04xaElTbU5pYVVGblNVTkJaMGxJVGpCWldFb3dWMFJ2WjJSSGFIQmplVFY2WkVkR2VXUkdaM05ZU0VwalltbEJaMGxEUVdkSlNFNHdXVmhLTUZkVWIyZGtSMmh3WTNrMWVtUkhSbmxrUm10eldFaEtZMkpwUVdkSlEwSTVTMVIwWTJOc2VIVkpRMEk1V0VoS1kySnNlSGxZUnpSblNVaENlV0ZZV21oa1IxVm5XREpTZVZsWFkyOWFXRmsyU1VVeGRtUllUbXhTV0Zwc1ltNVJaMlpEUWxWaU0xWnFZVVZXTWxwWE5UQkxWRzluWkcwNWNGcERRamRZU0VwalltbEJaMGxEUW5CYWFVRnZTVmhTYjJGWVRYVllNbEo1V1Zka2JtRlhOVzVKU0hnNFNVaFNiMkZZVFhWYVIyeDZXVmRLYzFwWFVYQkpTSFJqWTJ4NGRVbERRV2RKUTBGblkyMVdNR1JZU25WUE1YaDVXRWMwWjBsRFFXZG1Wbmg1V0VjMVkyTnNlSFZKUTBGblNVZFdNa3h1UW5sYVdGcHNZbTVTUlZwWFdtaGtWM2d3UzBOck4xaElTbU5pYVVGblNVTkNiR1JwTlhwa1J6bDNWVWhLZG1OSFJtNVpXRkp3WWpJMGIwdFVkR05qYkhoMVdFaEtZMkpwUVdkSlEwSnFZakkxZW1SRFFuZGlNMDFuVUZOQ2JscFlVazVpTTFaNldsWlNkbVJYVG05VVJ6bHFXVmhTY0dJeU5HOWFXRmx6U1VoU2IyRllUWFZZTTFKMlpGZE9iMU5YVW14aWJsSndXbTFzYkdOcGF6ZFlTRXBqWW14NGVWaEhOR2RKUTBGbllWZFpaMHREUm5kaU0wMXdTVWgwWTJOc2VIVkpRMEZuU1VOQloyTnRWakJrV0VwMVR6RjRlVmhITkdkSlEwRm5abFo0ZVZoSE5XTmpiSGgxU1VOQlowbEhlR3hrUTBKcldsZDRNRmxXWjJkUVUwSjNZak5OZFdWRFFYUkpTRkp2WVZoTmRXTXpVbWhqYmxKWlNWUjBZMk5zZUhWSlEwRm5TVWQ0YkdSRFFtdGFWM2d3V1ZacloxQlRRbmRpTTAxMVpWTkJkRWxJVW05aFdFMTFZek5TYUdOdVVscEpWSFJqWTJ4NGRWaElTbU5pYVVGblNVTkNjRnBwUVc5a1IyaHdZM2sxYm1OdGJHdExVMEkzV0VoS1kySnBRV2RKUTBGblNVZFNiR0pJVW1oWFEwRTVTVVV4YUdSSFozVmpiVGt4WW0xUmIxcEhWbk5rUjBaWlNVTTRaMlJIYUhCamVUVnVZMjFzYTFkNlFtUkxVMEZ4U1VoU2IyRllUWFZhTTBwd1drWnpkMWhVZEdOamJIaDFTVU5CWjBsRFFXZGFSMVp6WkVkR1drbEVNR2RVVjBZd1lVTTFlV0l6Vm5WYVEyaHJXbGQ0TUZsV2EyZE1lVUl3WVVkc2VreHRaSGxoVjFKaVRWWXdjRWxEYjJka1IyaHdZM2sxYm1OdGJHdFhla1prVHpGNGVWaEhOR2RKUTBGblpsWjRlVmhITldOamJIaDFTVU5CWjBsSGJHMUpRMmRvV2tkV2MyUkhSbGxKUTFsdFNVTkdhMXBYZURCWlZtdHdTVWgwWTJOc2VIVkpRMEZuU1VOQloyTnRWakJrV0VwMVR6RjRlVmhITkdkSlEwRm5abFo0ZVZoSE5XTmpiSGgxU1VOQlowbEhXbkJqYlZaR1pHMVdkV1JEYURCaFIyeDZURU5DWTBsdFVubFpWMlJ1WVZjMWJsaERTWE5KU0hSalkyeDRkVWxEUVdkSlEwRm5Xa2RXYzJSSFJsbE1Sbmg1V0VjMFowbERRV2RKUTBKcldsZDRNRmxXYTNOWVNFcGpZbWxCWjBsRFFqbExWSFJqWTJ4NGRVbERRamxZU0VwallteDRlVmhITkdkSlNFSjVZVmhhYUdSSFZXZFlNbEo1V1Zka1JtSnRVVzlhV0ZrMlNVVXhkbVJZVG14U1dGcHNZbTVSWjJaRFFsVmlNMVpxWVVWV01scFhOVEJMVkc5blpHMDVjRnBEUWpkWVNFcGpZbWxCWjBsRFFuQmFhVUZ2U1ZoU2IyRllUWFZZTWxKNVdWZGtibUZYTlc1SlNIZzRTVWhTYjJGWVRYVmFSMng2V1ZkS2MxcFhVWEJKU0hSalkyeDRkVWxEUVdkSlEwRm5ZMjFXTUdSWVNuVlBNWGg1V0VjMFowbERRV2RtVm5oNVdFYzFZMk5zZUhWSlEwRm5TVWRXTWt4dVFubGFXRnBzWW01U1JWcFhXbWhrVjNnd1MwTnJOMWhJU21OaWFVRm5TVU5DYkdScE5YcGtSemwzVlVoS2RtTkhSbTVaV0ZKd1lqSTBiMHRVZEdOamJIaDFXRWhLWTJKcFFXZEpRMEl3WVVkc2VreHNPVEJpTTFacVlVVnNhMXBYTlRCaFYxcHdXbGhKWjFCVFFqRmliVkpzV20xc2RWcFhVVGRZU0VwalltbEJaMGxEUWpCaFIyeDZUR3c1YTJOdFJtNWFNbXgxV25sQk9VbEhXbWhpU0U1c1R6RjRlVmhITldOamJIaDFTVU5CWjBsSFduQmpiVlpHWkcxV2RXUkRhREJoUjJ4NlRFTkNZMGx0VW5sWlYyUkdZbTFTWTBscGF6ZFlTRXBqWW1sQloyWldlSGxZUnpVNVdFaEtZMkpzZUhsWVJ6VnJXbGRPYzFsWVNteEpSMlJ6WWpKS2FHSkRRamRZU0VwalltbEJaMkZYTlRCYVdFcHRXVmRPYkVsRmFGVlVWWGhHWWtkV2RGcFhOVEJXUjBadVZHMUdkRnBWTVdoalEwSTNXRWhLWTJKcFFXZEpRMEpqU1cxNGNHUkRNV3RqYlVadVdqSkdhV0pIVm1OSmFtOW5WRWRzTUZKSVNtaGFNbVJvV1cxNGJFOHhlSGxZUnpSblNVZ3hZMk5zZUhWbVZuaDVXRWMwYVV4RFNteGxTRUoyWTI1Uloxa3lPWFZqTTFGbldqSldNRlpIT1RGWk1taEtXa2RXZFdSSGJHMWhWMVo1U1VRd1owdEhWVFpKUmxKMlpGZE9iMUpZV214aWJsRndUMmxDZFdSWE1XbGFXRWxuVUZRMFoyVXhlSGxZUnpSblNVZHNiVWxEYUd4TWJsSm9ZMjFrYkdSR1VuWmtWMDV2V2xoTlowcHBXV2RhVXpVd1dWaEtibHBZVWxWaU0xWnFZVWRXZWxkNlFtUkxWbmg1V0VjMFowbERRV2RqYlZZd1pGaEtkVWxIVlhWa1IwWjVXakpXTUZaSE9URlpNbWhzWXpGemQxaFROWEJhUjFaMVpFZHNiV0ZYVm5sUE1YaDVXRWMwWjBsSGJHMUpRMmhzVEcxT2IxbFhOVzVhVjFKVllqTldhbUZIVm5wSlExbHRTVWRWZFZreWFHaGliV1JzV2taU2RtUlhUbTlhV0U1aVRVWXdjRmhJU21OaWFVRm5TVU5DZVZwWVVqRmpiVFJuV2xNMWFtRkhSblZhTWxaclZrYzVNVmt5YUd4ak1YTjNXRk0xY0ZwSFZuVmtSMnh0WVZkV2VVOHhlSGxZUnpSblNVaEtiR1JJVm5saWFVRjNUekY0ZVZoSE5UbFBNWGg1V0VjMGFWaFRkMmxpYlVaMFdsaE5hVTlzYzJsWU1UbHJXbGRPZG1OdFJqQmFVMGx6U1cxU2JGa3lPWGxaV0ZKMlkyNU5hVXhEU2pCWldFcHVXbGhSYVV4RFNuSmFXR3RwVEVOS2ExcFlUbXBKYVhkcFdrTkpjMGx0VFdsTVEwcG9ZMjFrTVdKWFZuVmtTRTFwVEVOS2MxcFhOVzVrUjJkcFRFTktlVWxwZDJsVU1rcHhXbGRPTUVscGQybGFNbFl3VkROa2RWVklTblpqUjFaNVpFaHNSVnBZVG1wamJXeDNaRWM1ZVVscGQybFZiVlp0WWtkV2FtUkRTWE5KYlZKc1dUSTVlVmxZVW14SmFYZHBZVk5KYzBsdFVteGFiV3gxV2xaQ2VXSXpRbXhqYmxJMVNXbDNhV0ZZVGtSU1ZrSjJZa2hzYldGWGVITkphWGRwWkRKc2RWcEhPVE5KYVhkcFdUTldlbVJIT1hSU1YzaHNZbGRXZFdSSVRXbE1RMG94WW0xU2JGcHRiSFZhVjFGcFRFTktkMkl5ZURWYWJXeHpZa1prZVZsWVFrZGlTRlo2WVVWT2FHSkhlR2xaVjA1eVNXbDNhV050Vm5SaU0xcHNWRzA1YTFwWVRXbE1RMHBxWWpJMU1GbFhiSFZhV0VscFRFTktlbVJIUm5sa1EwbHpTVzFXZFZwRFNYTkpiVFJwVEVOS2RWcFlhREJWTW14cFlrZHNkVnA1U1hOSmJrcHNZbGM1TWxwVlRtOWhWM2hyU1dsM2FXSlhSbmxoTWxaNVNXbDNhVlJYUmpCaFEwbHpTVzVLYUdKdFVuWmlVMGx6U1d4T01HTnRiSFZhZVVselNXNU9jMkZYVG14SmFYZHBZbTA1YTFwVk1XaGpiWFJzWTJsSmMwbHRNV2hqYlhSc1kyeEtiRm95VmpSSmFYZHBWVzFXYmxKWWFIZEphWGRwVmtkV2RHTkhlR2hrUjFWcFRFTktZbUl5U25GYVYwNHdTVVU1YVdGdFZtcGtSakJwVEVOS2VWcFlUakZpU0ZGcFRFTktiR0pIVm5SYVZ6VXdTV2wzYVdSSGFIQmplVWx6U1c1Q2FHTnVVbnBKYVhkcFltMDVhMXBZVGxWaU1VcHNZbGM1TWxwVFNYTkpiazR3V1ZkT2NrbHBkMmxrTWtaellUSldlVWxwZDJsYVJ6bHFaRmN4YkdKdVVXbE1RMHBxWTIxV2FHUkhWbFZqYlZac1ZqSkdjMkV5Vm5sSmFYZHBXVEk1ZFdSSFZuVmtRMGx6U1cxNGFHTXpVbEZaV0Vvd1UxYzFhMXBZWjJsTVEwcHdZbTFTYkdWRFNYTkpia0pvWTI1U1NtSnRVbXhsUTBselNXNU9NR050YkhWYU0wMXBURU5LTWxsWGVERmFXRTFwVEVOS2RXSXlVbXhKYVhkcFltMVdOR1JGTlhaYVIxVnBURU5LZFdJeVVteFdTR3gzV2xOSmMwbHRhR2hqTUVZd1pFaEtjRmx1VmpCYVdFMXBURU5LYUdSSVVubGhWMG94WkVkV2VrbHBkMmxaTWpreFltNVJhVXhEU214aWJWSjZWakpzTUdGRFNYTkpiVFZvWWxkVmFVeERTbnBrU0Vwd1ltMWtSMkl6U2xGWldFb3dTV2wzYVdKSFJucGtSVVl3WkVoS2NGbHVWakJhVlRWb1lsZFdVMXBYWkd4bFEwbHpTVzFXTkZwWFRXbE1RMHBvWkVoU2VXRlhTakZrUjFaTllqSTVjbVJZUWs5WlZ6RnNTV2wzYVdSSE9VMWlNMlJzWTJ0T2FHTXlWV2xNUTBwb1pFaFNlV0ZYU2pGa1IxWlhXVmQ0TVZwVFNYTkpiV1JzWkVWR01HUklTbkJaYmxZd1dsTkpjMGx1U214aVZ6a3lXbFZHTUdSSVNuQlpibFl3V2xOSmMwbHVUakJaV0ZKd1dUTk5hVXhEU25walIzaHdaRU5KYzBsdVFqRmpNbWRwVEVOS01HVllRbXhKYVhkcFpFZEdibFJ0Um5SYVUwbHpTVzFPTVdOdVNteGlibEpQWWpKU2JFbHBkMmxhUjBZd1dWTkpjMGx0YkhWYVIxWTBWREpaYVV4RFNuZFpXRXBzWW01UmFVeERTbmRaV0Vwc1ltNVNUMkl5VW14SmFYZHBZa2RHZW1SRmJIVmFSMVkwU1dsM2FXRlhOWHBhV0Vvd1NXbDNhV041U1hOSmJVNTVXbGRHTUZwVk1XaGpiWFJzWTJsSmMwbHRNV2hrUjA1dlNXbDNhVmx0T1RGaWJWSkNaRWhTZVdGWFNqRmtSMVpVWkZkYWJXRllaMmxNUTBwcVkyMVdhR1JIVmxWYVdHZ3dWRzA1YTFwVFNYTkpiV3gxWXpKV2VXUkZTbXhhYlRsNVdsTkpjMGx1UW5sYVdGcHdZak5XZWxVeWJHbGlSMngxV25sSmMwbHVRblpqUTBselNXNU9NR05wU1hOSmJrNHhXbTFhY0dWRFNYTkpiV3g2VmtkV2RHTkhlR2hrUjFaUldWaEtNRkZYVGpCaFdGcHNTV2wzYVdOSFJubGtRMGx6U1cxT2VWcFhSakJhVlU1MllsY3hiR0p1VVdsTVEwcDVXbGN4ZG1SdFZrOWlNbEpzWXpCYWVXSXlNVlZhVnpGM1lrZEdNRnBUU1hOSmJsSnNZbGhDYzFsWVVteEphWGRwWW0xV05HUkZSbXBrUjJ3eVdsVnNkVnBIVmpSVFZ6VlZXbGN4ZDJKSFJqQmFWa0pvWTI1U2VrbHBkMmxpYlRscldsVnNkVnBIVmpSSmFYZHBZMjFXZEdJeldteFJNamt4WW01UmFVeERTblZpTWxKc1l6RlNkbFZ0Vm5SaU0xcHNVMWMxVlZwWE1YZGlSMFl3V2xOSmMwbHRUakZqYmtwc1ltNVNVMXBYTVhaa2JXeDFXakExZGxwSFZXbE1RMHB2V1ZoTmFVeERTbTFpTTBwR1dWZE9iMGxwZDJsWk1qa3hZbTVTVDJJeVVteGplVWx6U1c1T01GbFlTakJUVnpWcldsaG5hVXhEU210aFdFcHNXVE5TY0dSdFZucEphWGRwVmpKV2FHRXdNV2hqUTBselNXMXNlbEpIYkhsYVYwNHdZVmhhYkVscGQybGllVWx6U1cwMWRsRXlhR2hpYldSc1NXbDNhV0p0T1RCaFIyeDFXbmxKYzBsc1VteGlXRUp6V1ZoU2JGTlhOWHBrUjBaMVdUSlZhVXhEU25kamJUbHFXbGhPZW1JelNXbE1RMHAyWTBoU2NHSXlOWHBKYVhkcFdERTVkMWxZU2pCamVVbHpTVzVPYkdSR1dtaGlTRlpzU1dsM2FWa3lPWFJpVjJ3d1NXbDNhVnB1U21oYU1qRnNZbTVSYVV4RFNtcGlSemwxV2xVMWRscEhWV2xNUTBwd1lsaENkbU51VWs5aU1sSnNTV2wzYVdKdE9XdGFWVFZvWWxkVmFVeERTbTlaVnpWcllrZFdWVnBZYURCU1dHaDNZMjFXZW1NeWJIWmlhVWx6U1cxc2RXTXlWbmxrUlVadFpFZFdlVlJ0T1d0YVUwbHpTVzFvYUdKdFVuTmFWVVl3WkVoS2NGbHVWakJhVlZZMFkwaEtiR016VG5CaU1qVjZTV2wzYVZsWFVuWmpTRkpQWWpKU2JFbHBkMmxrV0VKdVkyMUdhMXBUU1hOSmJVNTJZbGN4YkdKdVVrNVpXRXB5V2xoSmFVeERTbFZhVnpGM1lrZEdNRnBXU214ak0xWnpaRU5KYzBsdGQybE1RMHB2WkVjeGMwbHBkMmxoV0U1RVlqSXhkRnBYTlRCUmJXeDFXa2RzZFZwNVNYTkpiVTUyWWxjeGJHSnVVbEJqUjFaMVNXbDNhV0pIUm5wa1JXeDFXa2RXTkZReVdXbE1RMHBvWkVoU2VXRlhTakZrUjFaT1dWaFNhbUZEU1hOSmJrNHhXVzVPTUdOcFNYTkpiVTU1V2xkR01GcFZWbk5hVnpGc1ltNVJhVXhEU25CaWJUVnNZMnRvVlZSVmQybE1RMHB1V2xoU1NWWkZNVTFKYVhkcFlWaE9VV050YkhSaFdGSndaRzFWYVV4RFNqSlpWM2d4V2xOSmMwbHRiSHBUV0ZKc1kyMUdhV0pIVldsTVEwcENZMjVLYUdWVFNYTkpiV3g2VVZoS2VWbFlhMmxNUTBwVVpWY3hhV0l5ZDJsTVEwcHdaRWRXZVZsWVVuWmphVWx6U1d0R01HUklTbkJaYmxZd1dsVk9kbUpYTVhCa1NGSnNZMmxKYzBsdFVuQmpibEkxU1dsM2FWZ3lUbmxhVjBZd1dsWkNhR051VVdsTVEwcENaRWhTZVdGWFNqRmtSMVpSV1ZoS01FbHBkMmxrUjFZMFpFTkpjMGx1V1dsTVEwb3dTV2wzYVdNeVZqQlJXRkl3WTIxc2FXUllVbXhKYVhkcFdESmtiR1JHV21oaVNGWnNTV2wzYVZreU9YUmlWMnd3WkVkV2VVbHBkMmxhUjJ4NVdsZE9NR0ZZV214SmFYZHBWRzA1YTFwV1FtaGpibEZwVEVOS1psZ3pRbXhpYlZKd1ltMWtWMWxYZURGYVUwbHpTVzVPTUZsWVNqQlViVGxyV2xOSmMwbHRSbmRqUjFaMVdrVk9iMkZYZUd0SmFYZHBXbGMxYTFSdE9XdGFVMGx6U1c1S2JGcHBTWE5KYkRsbVlWYzFlbHBZU2pCSmFYZHBXREU1YW1JeU1YUmhXRkpWV2xob01FbHBkMmxZTVRscVlqSXhkR0ZZVWxWYVZ6RjNZa2RHTUZwV1NteGpNMVp6WkVOSmMwbHJOWFphUjFWcFRFTktabGd5VG5aaVZ6RndaRVUxZGxwSFZXbE1RMHBtV0RKT2RtSlhNWEJrUld3d1dsaEthRmx0ZUd4SmFYZHBXVEo0YkZsWVNXbE1RMG95V1ZkNE1WcFZSbnBWTTFKNVlWYzFia2xwZDJsa1IxWjBZMGQ0YUdSSFZrZFpWMDR3WWpOS05VbHBkMmxrV0VKcldWaFNiRWxwZDJsaFZ6VjZaRWRHZFZreVZXbE1RMHBtV1RKNGRtSnRWV2xNUTBwd1pFZFdkRlZIUm5sa1NFMXBURU5LY0dSSFZuUlZSMFo1WkVOSmMwbHRiREJhVnpCcFRFTkthR05JUW14aWJWSktZbTVTZGxWSFJubGtRMGx6U1cxc2RXTXlWbmxrUlVadFpFZFdlVlZIUm5sa1EwbHpTV3RLZG1JeWVHeFpWelZDWkVoU2VXRlhTakZrUjFaUldWaEtNRWxwZDJsU1dFcDVZak5KYVV4RFNsRmpiVGwzV2xoS01HVlZUblppVnpGd1pFaFNiR05wU1hOSmJrNHhZMGRXZVVscGQybGpNbXgxV2pKNGJFbHBkMmxWU0VwMlkwZFdlV1JJYkZGWldFb3dTV2wzYVZwWVdteGlibEpRWTBoU2NHSXlOWHBWTTFaM1kwYzVlV1JIVm10SmFYZHBXVEpHZDJSSVZubGFVMGx6U1cxR2ExcEZWakphVnpVd1ZFZHNlbVJIVm5WYVdFbHBURU5LZVZwWE1YWmtiVlpHWkcxV2RXUkZlSEJqTTFKc1ltMVdlVWxwZDJsWU1sVnBURU5LUm1SdFZuVmtSa0pvWTI1UmFVeERTbXhrYlZaMVpFVTFhR0pYVldsTVEwcHNaRzFXZFdSRlRuWmlibEpzWlVoUmFVeERTbVpZTWtwMlpGYzFhMU5IUm5WYVIzaHNVbGhhYkdKdVVXbE1RMHBzU1dsM2FXRkhSblZhUjNoc1VsaGFiR0p1VVdsTVEwcDFXbGhrVFdGWVRqQmFWelZzWTJsSmMwbHRPWE5hUlhod1l6TlNiR0p0Vm5sSmFYZHBZekpvZG1SWGVHdFZiVlowWWpOYWJGUkhiSHBrUjFaMVdsaEphVXhEU25aaWJVNXNTV2wzYVdOSFJucGpNbXd5V2xOSmMwbHVUbTlpTTFaeldrVkdhMXBGZUhCak0xSnNZbTFXZVVscGQybFlNVGwyWTBoU2NHSXlOWHBKYVhkcFdqSldNRlF6UWpCaFZ6bDFZM2xKYzBsdFZqSmFWelV3U1dsM2FWa3lSbk5pUTBselNXNVNiR0pZUW5OWldGSnNVVEpHYW1GSFZXbE1RMG93V2xjeGQySkhSakJhVlU1b1dUSm9iR041U1hOSmJXUnNaRU5KYzBsdVRqQmpiV3gxV2pOT1FtTnVTbWhsVTBselNXMTBiR1ZXVGpCamJXeDFXbmxKYzBsck1XaGpRMGx6U1c1T2JHUkRTWE5KYlhCMllWYzBhVXhEU201YVdGSlZXbGN4ZDJKSFJqQmFWVlp6V2xjeGJHSnVVV2xNUTBwcldsZGFhR1JYZURCV1IxWjBZMGQ0YUdSSFZsRmpiVGxxV2xoT2VtSXpTV2xNUTBwM1kyMVdiV0ZZWjJsTVEwcHVXbGhTVlZwWE1YZGlSMFl3V2xWT2FGa3lhR3hUTWxZMVNXbDNhV015VG5aalIxWlBXVmN4YkVscGQybFpNamwwWTBkR01HRlhTbk5hVms1dldWZFNOVkV4VGxSV2JWWjVZekpzZG1KcFNYTkpiRTV2V1ZkU05WRXhUbFJKYVhkcFkwaEtiR05IUm5sYVZsSnNZbGhDYzFsWVVteFNSemwwU1dsM2FWa3lPWFZqTWpseldsTkpjMGx1WkdoamJUUnBURU5LZW1GSFJtdGxWbEpzWWxoQ2MxbFlVbXhTYlVacVpFYzVlV1ZUU1hOSmJVNW9XVEpvYkZNeVZqVkphWGRwVmtWV1RsVkZlRUpXUlZabVZrWnNVVkpXVFdsTVEwcDZZVWRHYTJWV1NteGliVkpzWTJ4T2JHUkRTWE5KYkU1c1pFTkpjMGx1UW5sYVdFSm9ZMjFXVlZwWE1YZGlSMFl3V2xaT01HVlhlR3hqZVVselNXNUtiR0p0VW14amJWWnJVa1U1VGtscGQybFpWMUpyU1dsM2FXUkhWblJqUjNob1pFZFdSbUpIVm5SYVZ6VXdTV2wzYVdNelVqVmlSMVo2U1dsM2FXTllWbXhqYm14VVdsZDRiRmt6VW5aamEwWnpZa05KYzBsdFRuWmliVkpzWW01T2JGcEdUakJsVjNoc1NXbDNhV016VWpWaVIxVnBURU5LTUZwWWFEQlJNamwxWkVkV2RXUkRTWE5KYmxKc1lsaENjMWxZVW14amVVbHpTVzFhZVdJeU1HbE1RMHA1V2xjeGRtUnRWbFJrU0d4eldsaE9SMk50T1hSVVIyd3dWa2RXZEdOSGVHaGtSMVo2U1dsM2FXTnRWbTFVYlRscldsTkpjMGx0YkhWak1sWjVaRVZPZG1SWE5UQkphWGRwWkRKR2MyRXlWbmxUVnpWcldsaG5hVXhEU25CaWJrNXNZMjVTVDJJeVVteFRWelV3WWpGU2JHSllRbk5aV0ZKc1NXbDNhVnB0Ykhsak0xSkVZVWRzYzFwRFNYTkpia1l4V2xoS05WVXlWbk5hVjA0d1lqTkphVXhEU25WWldGSndaRzFXVkdGSFJtdGlNMk5wVEVOS2VWcFhNWFprYlZaNlNXbDNhVk5zVGtSaU1qRjNZVmQ0YkdOc09YbGFWelZvWWxkV1VXTnRPWGRhV0Vvd1pWTkpjMGx1UW5saU0wRnBURU5LWm1JeVNuRkphWGRwV2tkV2JWbFlWbk5rUlU1MlltNWFiR051VW14amFVbHpTV3RLZG1JeWVHeFpWelJwVEVOS1MxVXdPVTlKYVhkcFl6TlNlV0ZYTlc1aFYxbzFTV2wzYVZSdVZuUlpiVlo1U1dsM2FXTkhSbmxqTWxWcFRFTktkV0l6VWtaaldGWm9Za05KYzBsdE9YTmFRMGx6U1cxU2JGcHRSakZpU0ZKUlkyMDVkMXBZU2pCbFZWSnNXVEo0YUdOdFJqQmhWemwxU1dsM2FWbFlVakJqYld4cFpGaFNiRWxwZDJsWk1qbDFaRzFXZVdSSFZubEphWGRwWTIxV2JXSkhWbXBrUTBselNXMW9hR013VG05WlZ6VnVXbGRSYVV4RFNsWmpSMUpvWkVkc2RWb3dWbk5hVnpGc1ltNVJhVXhEU2tsV1JURk5VbGQ0YkdKWFZuVmtRMGx6U1d3NU1XTkhVbWhrUjFaVVpFZEdNRnBUU1hOSmJEbHdZbTVPTUZsWE5XcGFWa0o1WWpOQ2JHTnVVbkJhV0UxcFRFTktabVJZUW10WldGSnNWVWhLZG1KWGJIcGFVMGx6U1d4Q2VXSXlNWEJqTWxWcFRFTktlVnBZVFdsTVEwcG1XbGMxYUZsdGVHeFdXRUpyV1ZoU2NHSnRaRk5hV0U1MllraGFiR05wU1hOSmJEbHFZVWRHZFZveVZtdFZTRXAyWTBkV2VXUkhiR3hqZVVselNXdzVlVnBYV25OYVYwNHdZVmMxYmxWSVNuWmpSMVo1WkVkc2JHTjVTWE5KYld4MVlWaFNjRmxYZUhCbGJWVnBURU5LZGxsdVRteGpibHBzV2tWR01HUklTbkJaYmxZd1dsaE5hVXhEU20xaFZ6Vm9Za2RzTmxwVFNYTkpiRGxxWWtkR2VtTXhRbmxpTTBKc1kyNVNjRnBZVFdsTVEwcDNTV2wzYVZsWVVqQmphVWx6U1d3NWFHUklVbmxoVjBveFpFZFdUMWxYTVd4U2JUbDVWVWhLZG1OSFZubGtTR3RwVEVOS1psbFlVakJqYld4cFpGaFNiRlpIT1ZGamJUbDNXbGhLTUdWVk1XaGpRMGx6U1cxb2FHTXdPVE5pYkVKNVlqTkNiR051VWpWSmFYZHBZek5XZDFwWVNsRmpiVGwzV2xoS01HRlhWbnBKYVhkcFdqSldNRlZJU25aa1J6a3daVmhDYkZReVdXbE1RMHB5U1dsM2FWZ3lWblZqTTFaNVdsVk9jMWxZVG5wVlNFcDJZMGRXZVdSSGJHeGplVWx6U1cwMWRsRlhUbXBhV0U1NllqTkphVXhEU25kamJUa3dZak5TTldOSFZXbE1RMHByV2xoT2FtTnRiSGRrUnpsNVNXbDNhVm95VmpCVlNFcDJZMGRXZVdSSWJFVmFXRTVxWTIxc2QyUkhPWGxKYVhkcFdESTVkMlJIYkhaaWJrMXBURU5LZG1KSFVsZFpWM2d4V2xOSmMwbHNPWGxhV0VZeFdsaE9NRlpZUW10WldGSnNTV2wzYVZreU9YVmFiV3h1WkZoS2FGbHRlR3hKYVhkcFdsYzFNV0pYVm5sWlYwcHpXbE5KYzBsdVRqRmpSMVo1VVROU2RtTnBTWE5KYmtKNVlqTkNla2xwZDJsalNFcDJZMGRXZVdSSGJHeGplVWx6U1c1Q2VXSXpRa3hhV0d4NlNXbDNhVm95VmpCVU0yUjFWVWhLZG1OSFZubGtTR3hQV1ZjeGJHTjVTWE5KYldSc1pFVTVNMkpzUW5saU0wSnNZMjVTTlZVemJIUlpiVGx6WTNsSmMwbHRUbmxhVjBZd1dsWkNlV0l6UW14amJsSTFTV2wzYVZwdVNuWmlWVVl3WkVoS2NGbHVWakJhVTBselNXNVNkbEZZVWpCamJXeHBaRmhTYkVscGQybFlNMDVvWkcxV1NtSnVUakJaVnpWcVdsWkNlV0l6UW14amJsSndXbGhOYVV4RFNtcGlNalY2WkVoS01Wa3pVblpqYVVselNXdzVNa2xwZDJsYVZ6Vm9XVzE0YkZaWVFtdFpXRkp3WW0xamFVeERTbVpaV0ZJd1kyMXNhV1JZVW14V1J6bFJZMjA1ZDFwWVNqQmxVMGx6U1cxT01HSXpTV2xNUTBwb1pFaFNlVlp0Um5Oa1YxVnBURU5LWm1OSVNuWmpSMVo1WkVoc1YxbFhlREZhVmxKMlVWaFNNR050Ykdsa1dGSnNTV2wzYVdOSVNuWmpSVFZvWWxkVmFVeERTbTVhV0ZKUlkyMDVkMXBZU2pCbFZUbDNaRWRzZG1KdVRXbE1RMHBtWTBoS2RtTkhWbmxrU0d4WFdWZDRNVnBWV25saU1qRkNaRWhTZVdGWFNqRmtSMVZwVEVOS2VtRkhPVEZpUjFKVFdsaEdNVnBZVGpCV1dFSnJXVmhTYkVscGQybFlNMXBvWWtoV2JGTkhSbnBSTW1ob1ltMWtiRnBEU1hOSmJEbHZXVmhPVTFwWVJqRmFXRTR3V2xkU1ZtTkhVbWhrUjFWcFRFTktabHBYTlhoa1YxWXhXbFpXZDFwSFJqQmFVMGx6U1c1V2QxcEhSakJhVlU1MllsaENjMXBZVW14SmFYZHBZMGRXZVZwdE9YbGlWbFozV2tkR01GcFRTWE5KYldob1l6RldkMXBIUmpCYVYxRnBURU5LWmxsWVFuZGlTR3hLWW01T01GbFhOV3BhVmtKNVlqTkNiR051VW5CYVdFMXBURU5LZW1GSE9URmlSMUpXWTBkU2FHUkhWV2xNUTBwcVlVZEdkVm95Vm10VlNFcDJZMGRXZVdSSGJHeGplVWx6U1d3NWRGbFlTbkpXV0VKcldWaFNiRnBEU1hOSmJWcHdZMjVPTUZaWVFtdFpXRkpzV2tOSmMwbHVWbmRhUjBZd1dsZFJhVXhEU21aYU1sWXdWbGhDYTFsWVVteFJNamwwWTBkNGJHUkhWV2xNUTBwNllWaHdiRWxwZDJsWU0wSjVZak5DYkdOdVVqVldSemxDWkVoU2VXRlhTakZrUjFWcFRFTktlbVJIUm5WYVIwWjVXa1pDZVdJelFteGpibEkxU1dsM2FXRXliSFZhUTBselNXMUdlbU15Ykc1aWFVbHpTVzFPYzFsWWNEWkphWGRwWTBkNGFGa3lWblJhVnpVd1NXbDNhV0ZYTlhCa1IyeG9Za2RzTmxwWVNXbE1RMHAzWTIwNWQxcFlTakJsVTBselNXNUNlV0l6VW5aVU0wcEZXbGhPYW1OdGJIZGtSemw1U1dsM2FXTklTblprUnpocFRFTktjMXBYWkdoWk0yeFJZMjA1ZDFwWVNqQmxVMGx6U1c1T01XTklRblpqYmxKNlVWZFNkbU5JVW5CaWJXUlVaRWhzYzFwV1RtOWFWMVl3WTNsSmMwbHJVblpaTTFaMFdsYzFNRWxwZDJsUk1VNVVWVE5TTldKSFZsUmhSMVpzWkVOSmMwbHVTbXhpYlZKc1kyczFkbVJGYkhSalIzaHNZbGRXZFdSSFZtdEphWGRwVkVkc01GSlhlR3hpVjFaMVpFTkpjMGx1Vm5wYVdFcFVaRWhzYzFwWVRXbE1RMHB1V2xoU1ZHUkliSE5hV0UxcFRFTktabU16VWpWaVIxWjZTV2wzYVZsWFVtdFZNMUkxWWtkV2VrbHBkMmxqYlZaclpGZE9iRlZ0Ykc1aFNGRnBURU5LTVdKdVRtOWhWMW93U1dsM2FWZ3laR3hrUmxaMVlWaEdNVnBXVGpCbFYzaHNZM2xKYzBsdVNteGliVkpzWTJ4S2RtSXpVV2xNUTBwcVkyMVdhR1JIVmxOYVZ6VnJXbGhLVTJJeU9UQkphWGRwVlRKb2FGcEhPVE5WYlRsMlpFTkpjMGx0Um10aU0wSXdWVE5TTldKSFZucEphWGRwV1ZoU01GbFhUbTlWTW1ob1drYzVNMGxwZDJsaVZ6bHJXbE5KYzBsdFJtdGlNMEl3V2xkU1ZHUkliSE5hVms1dldsZFdNR041U1hOSmJURm9ZME5KYzBsdVRqQmxWM2hzVlRKb2JGcFlVV2xNUTBwbVltMVdiRnBJVGxSaFIyeDBVVmRTZG1OSVVteGFSazR3WlZkNGJGVXlhR3hhV0ZKNlNXbDNhVlV5VG5aalIyeDFXakZPYjJGWE1HbE1RMHAzWTIxV2QxbFlTbXhSVjFKMlkwaFNiRnBGVG5wak1WSnNaVWhSYVV4RFNtcGpNMDVWV2xob01FbHBkMmxpUnpscVdWZDRUMWxYTVd4SmFYZHBXVEk1ZFdKdFZtcGtSMVpyVVRKR2MySkhTbWhaTW5OcFRFTktlbVJJYkhOYVZWWnpXbGN4YkdKdVVXbE1RMG93V2xjeGQySkhSakJhVmtwc1l6TldjMlJEU1hOSmJrcHNZbTFTYkdOcFNYTkpiV2hvWXpGS2JHSnRVbXhqYlZaclNXbDNhV0p0Vm14YVNFNVVXVEk1ZDJGWE5XNUphWGRwWVVjNWVtUkRTWE5KYlZwd1kyNU9NRlV5VG5aalIxWlRXbGMxYTFwWVNXbE1RMHA1V2xjMWExcFlTa1JpTWpVd1dWZHNkVnBZU1dsTVEwcHFZMjFXYUdSSFZrVmlNazR4WWxkV2RXUkZXbmxaVjJSMFdsYzFNRWxwZDJsWldFSjNXbGMxYTFOWE5UQmllVWx6U1cxNGNHUkdTbXhpYlZKc1kybEpjMGx0VW14aVIxWXdXbE5KYzBsdFduQmpiVlpHWkcxV2RXUkRTWE5KYlZKc1pFZEdjR0pEU1hOSmJWSndZek5DYUdSSFRtOVNXRnBzWW01UmFVeERTa1JrV0U0d1lqSXhSbVJ0Vm5Wa1EwbHpTVzFrYkdSRk1YWmtXRTVzVmtjNU1Wa3lhRTFpTWs1b1pFZHNkbUpwU1hOSmJWWXlTV2wzYVdSSE9URlpNbWhLV2tkV2RXUkhiRzFoVjFaNVNXbDNhV016VW1oamJsSjZWakpzTUdGRFNYTkpibEoyWkZkT2IxUXlTbkZKYVhkcFdqSldNRlpIT1RGWk1tZHBURU5LTkVscGQybGxVMGx6U1cxT2MyRlhWblZrUm1kcFRFTkthbUpIYkd4aWJsSmFTV2wzYVdGWFVteGlibEp3V20xc2JHTnBTWE5KYmxKb1kyMWtiR1JHVW5aa1YwNXZXbGhOYVV4RFNtMWhWelZyU1dsM2FWa3lhR2hpYldSc1drWlNkbVJYVG05YVdFMXBURU5LZEZsWVVtcGhSMVo2VlRKV2MxcFhUakJpTTBwSFpGYzFha2xwZDJsaVYwWXdXVEpvYkdNeFRteGlSMVpxWkVjNWVVbHBkMmxhVjNkcFRFTktlbHBYZUd4Wk0xSjJZMmxKYzBsdE1XeGtSMmgyV2tOSmMwbHRiSHBTYmxaMVdUTlNjR0l5TkdsTVEwcHRaRmMxYWtscGQybGtSemxVWkVoS2NHSnRZMmxNUTBwTllWaFNSV050Um01YU1rWnBZa2RWYVV4RFNtWmFTRXBvV2pGT01GbFlTakJKYVhkcFdXMXNkVnBEU1hOSmJEbHJZMjFHYmtscGQybFlNbEo1V1Zka1JtSnRVV2xNUTBwcFpGaFNNR0l5TkdsTVEwcHJZVmhPYUZsdGVHeGFRMGx6U1cxb2FHSnRVbk5hVTBselNXMUthR015Vms5aU1sSnNTV2wzYVdKSE9XNUphWGRwWWxkR01Ga3lhR3hqTVU1c1lrZFdhbVJIT1hsUlZ6VnJWVWRHZVZwWE5UQmpNVkoyU1dsM2FXSXlXbTFqTWxZd1ZVZEdlVnBYTlRCSmFYZHBZMGhLYkdSdFZuVmtSVkpzV20xR01XSklVV2xNUTBwNlpFYzVkMVZJU25aalIwWnVXVmhTY0dJeU5HbE1RMHBtWkVjNU1Wa3lhRXBhUjFaMVpFZHNiV0ZYVm5sSmFYZHBZMGM1ZWtscGQybGpNMUpvWTI1U1dVbHBkMmxqTTFKb1kyNVNXa2xwZDJsWU1sSjVXVmRrYm1GWE5XNUphWGRwV2tkV2MyUkhSbGxKYVhkcFdrZFdjMlJIUmxwSmFYZHBXak5LY0ZwRFNYTkpia3AyWkZjMWEwbHBkMmxaTW5ob1l6Tk9VR05yVW14ak1rNTVZVmhDTUdJelNXbE1RMHByV2xkYWNHSnRWV2xNUTBweldsZGthRmt6YkVSa1dFNHdZakl4Um1KSFZuUmFWelV3U1dsM2FWcFhlR3hpVjFaMVpFaE5hVXhEU25wa1IwWjFXa2RHZVZwRlRqRmpNMUoyWWxWV2MxcFhNV3hpYmxGcFdGTjNhV0pYUm5kalIyeDFXak5OYVU5cFNrSlJWemxGVkhsNFZGRlZSbFJSVTNoR1VWVkdXRkY1ZUVaUlZVWmFVWGw0UmxGVlJsSlJlWGhHVVZWR1RGRjVlRWhSVlU1dlVrTjRTbEZWUlhsVFJVMXpVbFZHUW1ScmFFUk1SVlpDVVZWc1JFeEdWa0pSVmxaRVRFVTVRbEZXUmtSTVJWWkNVVlZzU1V4RlZrSlJWV3R6VWxWR1FsTlZiM05TVlVaQ1lUQkpjMVF3UmtKV1JWVnpVbFZHUWxvd1NrSk1SVlpDVVZVNVRreEZPVUpSVlRsRVRFaHNRMUZWUmpWUmJGRnpVbFZHUWxWVlRYTlNNRVpDVkRCTmMxSlZSa1JqYTJkelVqQkdRbVJWU1hOaFZVcENVVlp3VWt4R1RrSlJWemxGVEVjeFExRlZSbmxSYTBWelZWVkdRbFZWVFhOVk1FWkNaVlZLUzB4RlZrSlJWV3hJVEVaR1FsRldSa1JNUms1Q1VWWk9ZVXhGVmtKUlZteEVURVZXUWxGV1JrUk1SVlpDVVZWMFJFeEdSa0pSTTBKSlRFVnNRbEZWYzNOVFZVWkNVMVpWYzFKVlJrSlRWMGx6VWxWR1FsWXdPSE5VTUVaQ1ZYbDRSbEZWUmtoVVUzaElVVlZHVEV4RlZrSlJWV1JDVEVWMFFsRldUbFZNUlZaQ1VWVnNTMHhGVmtKUlZtUm9URVV4UWxGVmJFMU1SV1JDVVZWMFNVeEZWa0pSVld0elVsVkdRbE5WVVhOU1ZVWkNVbFZyYzFJd1JrSlRNR2R6VWxWR1FsTlRlRVpSVlVaS1VrTjRSbEZWUmtaVFEzaEdVVlZHVWxGNWVFWlJWVVpNVkZONFNGRlZSa3hUYVhoR1VWVkdSbE5EZUVaUlZVWlNVWGw0VEZGVlJsUlVVM2hJVVZWT2IxTnBlRkJSVlVaUVUwTjRSbEZWUmtwTVJXUkNVVlYwU0V4RlpFSlJWWFJFVEVVNVFsRlZPVXhNUjFaQ1VWZFdhVXhGVmtKUlZrWkVURVZXUWxGVmRFNU1SV1JDVVZWc1FreEZWa1JsUlU0MlVrTjRUbEZWUms1VWVYaEdVVlZHY0ZGNWVIWlJhMFpDVjBWTmMxVlZSa1JVYVhoT1VWVkdObEZyUlhOVU1FWkNWREJOYzJOVlNrSlNWV2hFVEVWc1FsSkZjRWRNUlRsQ1VWVTVSRXhIVmtKUlYxWkdURVJDUTFGWGRFTlphMDF6VWxWR1FsbDVlRVJSVlVaRVVYbDRSbEZWUmxoUmVYaEdVVlZHVUZGNWVFWlJWVVpPVEVaR1FsRXlhRVZNUlhSQ1VWVTVSVXhGYkVKUlZsWkVURVZrUWxGVmMzTlJNRVpFWWtWSmMxUlZSa0pVVlUxelVsVkdRbE5WV1hOU1ZVWkNWRlZqYzFkVlJrUmhSVXBMVEVWV1FsRldWa3hNUm14Q1VWWnNTMHhGWkVKUk0xSkRVVk40UmxGVlJsSlNVM2hLVVROYVExTkZZM05TVlVaQ1ZYbDRWbEZWUm01UmEwMXpVekJHUWxNd1RYTlZNRVpDVjJ0TmMxTlZSa0pqTUVwRVRFVXhRbEZWTUhOVU1FWk1UMVZPUkV4RlZrSlJWMFZ6VmxWR1FsUXdkM05XVlVaRVkwVktUa3hGVmtKUlYzUkRVWGw0VUZGVlJsQk1SV1JDVVZWa1VVeEZkRUpSVmxaTVRFVjBRbFZVVmtSTVJURkNVVlV4U0V4RlZrSlJNVkpFVEVac1FsRldiRVJNUlZaQ1VWWkdSRXhGWkVKUk1taERVWGw0VEZGVlJreFJlWGhPVVZWR1VreEZaRUpSTWtwRlRFVjBRbEZWZEVWTVJrWkNVVlpXUWt4RlZrSlJNbGx6VkZWR1FsUlZZM05TVlVaQ1dqQkpjMUl3UmtSaFJVcEVURVZXUWxGV1JYTlNNRVpHVld0TmMxSlZSa0pWTUUxelZUQkdRbFV3VFhOaFZVcENVVmRzUTFWRGVFWlJWVVpTVlZONFVsRlZSbFJNUld4Q1VWZDBSVXhGTVVKUlZUQnpVakJHU21KRlozTlRWVVpDVTFWTmMxSlZSa0phTUVselVsVkdSR0ZGU2tSTVJXUkNVVlpOYzFKVlJrUldSVTF6VWxWR1FsZFRlRVpSVlU1dlVXbDRUbEZWUms1UmVYaFNVVlZHUmxGVGVFWlJWVVpVVVhsNFVsRlZSbEpPVlUxelZEQkdRbEpWUlhOVFZVWkNXVlJvUTB4RlZrSlJNMmhFVEVWMFFsRlZPVnBNUlZaQ1VWWnJlRkY1ZUVoUlZVWlNURVZPUWxFeldrTk1SVEZDVVZVd01sRjVlRVpSVlVaUVZrTjRSbEZWUmxCV1UzaFlVVlZPZDFGcGVFaFJWVVpvVEVVNVFsRldVa1ZNUldSQ1ZUQnZjMUl3UmtWUlZXOXpVMVZHUkdNd1NYTlRWVVpDWWtWS1NreEZWa0pSVlhSR1RFWk9RbEZZWkVSTVJVNUNVWHBrUkV4RlpFSlJWV3hIVEVWV1FsRlZkRWhNUjJSRFVWVkdjRkZwZUVSUlZVNHdVV2w0VGxGVlJrNVJlWGhHVVZWR2FGTnBlRVpSVlVaTVUxTjRXbEZWVG5OUmJYQkZURVU1UWxGVlZrSk1SV1JDVVZaa2NGSkRlRVpSVlRGMVVXbDRTbEZWUmtwUmVYaEdVVlZHVWt4RlZrSlJNVzl6VTFWR1FsTjVlRXBSVlVaS1RsVk5jMUpWUmtKVFUzaEdVVlZHU0ZGVGVFWlJWVVpLVkdsNFJsRlZSbEpVVTNoS1VWVk9kMUZxV2tSTVJWWkNVVlpPUjB4RlZrSlJWbU42VVhsNFNGRlZSa2hQUlUxelV6QkdObEV5V1hOV1ZVVjNVVEZLUjB4RmJFSlNNVWx6VXpCR1FsUXdSWE5UTUVaQ1ZsTjRTRkZWUmtoTVJVNUNVakpvUTB4Rk1VSlJWVEZJVEVWV1FsRlhaRU5XYVhoR1VWVkdVbEpEZUVoUlZWWTBVV3hWYzFKVlJrSlVNRlZ6VWxWR1FtUlZTa1JNUlhSQ1VWVjBSMHhGWkVKUlYxVnpVakJHVG1KRlVraE1SVlpDVVZoT1ExTnBlRVpSVlVaTVUzbDRhbEZZYUVWamEwbHpWVlZHTlZKRk5VUk1SVlpDVVZkc1ExbHBlRVpSVlVaTVdYbDRhRkZWUm1oVFEzaElVVlZPTmxFeFozTlNWVVpDVXpKVmMxb3dTa0pSVjJSRFUybDRTRkZWVG5sUmFYaE9VVlZHVGxONWVFWlJWVVpXVTBONFJsRlZSbXhUVTNoT1VWVkdUbU5GVFhOU01FWkVZMnRPVGt4RmRFSlJWWFJFVEVVeFFsRlZNRFJSYVhoTVVWVkdURXhGVGtKUlZWWkVURVYwUWxGVk1ITlhWVVpDV1ZoYVEweEZNVUpSVlVaQ1RFVldRbEZWT1ZoTVJYUkNVVlZHUWt4RlZrSlJWVEZWVEVaR1FsRldUbkpSYVhoS1VWVk5lbEpITlVOTVJXUkNVVmRHZEZGcGVFWlJWVVpTVGpCUmMxUXdSa0pWZVhoSVVWVmtjVkZwZUdoUlZVWnhVV3BhUkV4RlZrSlJWWFIyVVdsNFZsRlZUazFQVlVselVsVkdRbFJVVWtOTVJYUkNVVlYwYzFGcGVFaFJWVTVaVmtONFJsRlZSbEJQUlVselYxVkdRbGt6U2tOTVJWWkNVVlYwVDB4SFRrSlNlbVJEVEVWa1FsRllUa05NUld4Q1VWZDRRMVJUZUVaUlZVWk1VbE40VkZGVlJuaFJlWGhFVVZWTmRsRjVlRTVSVlVaT1lqQkpjMUpWUmtKVU0xSkRURVZXUWxGVmRIcFJhWGhNVVZWT2MxRnBlRWhSVlVaS1VWTjRSbEZWUmt4UmVYaFNVVlZHVW1GRlVYTlRWVVpDVm5sNFJsRlZSa2hNUlU1Q1VYcE9RMHhGTVVKUlZURndVa040UmxGVlJsUmxSVWx6VWxWR1FsTXpiRU5NUm1SQ1VUSlJlbEZwZUVaUlZVWldaREJKYzFKVlJrSlRNSGR6VkZWR1FsUllRa1JNUldSQ1VUTktRMDVyVFhOU1ZVWkNWMVJXUTB4RlZrSlJWa1Y2VVhsNFVGRlZSbFJNUlZaQ1VqSTFSRXhGYkVKUlZYTnpVMVZHUWxOVk1ITlNWVVpDVTFONFJsRlZSa2hSVTNoR1VWVkdTbUZWVlhOU1ZVWkNWakp3Umt4RmJFSlJWWE56VVRCR1JHRkZUWE5UVlVaQ1UxZDBSa3hGVmtKUk1FWkVURVZXUWxGVmF6VlJhWGhHVVZWR1VtTnJUWE5TTUVaRVlVVkpjMUl3UmtKV1UzaE1VVlZHVDJKVlZYTlNWVVpFVVZWUmMxSlZSa0pWTUZWelZWVkdSbFZwZUVSUlZVNUZURVV4UWxGVk1VUk1SVlpDVVZaR2VWRnBlRVpSVlVZeFVXdE5jMU13UmtKVE1uUkRURVZrUWxGNlZrTk1SVGxDVVZaYVJreEZaRUpSVjNSRFpVVkpjMUpWUmtKVk0yUkRURVZXUWxGVk1ITlNNRVo1VW1wa1EweEdaRUpqTUZwTFVtbDRSbEZWUmtwUlUzaEdVVlZHUm1GclVYTlVWVVpDVkZONFJsRlZSa2hpVlZGelVsVkdRbFJYZUVSTVJUbENVVlpPY2xGNWVFWlJWVVpPVEVWa1FsRXlhRVJSVTNoR1VWVkdUa3hGWkVKUlZXUjFVa040VGxGVlJrNU1SV1JDVVZWc2RsSkRlRWhSVlVWeVVXdFJjMUpWUmtKVVUzaEtVVlZXYjFKVlozTlNWVVpDVlRJMVJFeEdUa0pSVms0elVYbDRiRkZWUm14VGFYaElVVlZXZVZFd2IzTlNWVVpDVkRGTmMxbFZSa0paVlRSelVsVkdRbFZVVGtOTVJXUkNVWHBXUTFscGVFeFJWVVpNVVhsNFRsRlZSazVQUlVselV6QkdRbE41ZUVSUlZVWkdVWGw0VEZGVlJrNU1SVGxDVVZaR01sRnBlRkpSVlVaVVVWTjRTbEZWYkhOUmFYaE1VVlZHTWxGclZYTlNWVVpDVlZSU1EweEZiRUpSTVVwSFRFVldRbEZWT1ZSTVIwWkNVVmRHUzB4RmJFSlJWMlJEVGpCSmMxSXdSa1JqUlU1WlRFVldRbEZYVFRKUmFYaE1VVlZHVEdKRlNYTlRWVVpJWW10S1FreEZWa0pSVlhSNlVXbDRURkZWUmxCbFJVbHpVbFZHUWxWVVVrTk1SV1JDVWpOb1EwNHdTWE5TTUVaQ1dWUmFRMHhHUmtKU01taERURVZrUWxGWVRrTk1SV3hDVVZkNFEwMVZTWE5TVlVaQ1V6QlZjMVV3UmtSV2FYaElVVlZHU2xKcGVFWlJWVVpNWXpCSmMxUXdSa0pWZVRsRVRFVldRbEZXUlhOUk1FWkVaRVZKYzFSVlJrSlVWMnhGVEVWV1FsRldUalJSYVhoR1VWVkdUR1ZWU1hOV01FWk1WWGw0VUZGVlJqWlJibkJEVEVWV1FsRlZkSEpSZVhod1VXdEdRazVGU2pCUmVYaEtVVlZHVmxKRGVFcFJWVTE2VVRCTmMxTlZSa1JSVkZKRFRFVldRbEZWT1ZSTVIwWkNVVmRHUzB4RmJFSlJWMlJEVGpCSmMxTlZSa1psUlU1TlRFVldRbEZYWkVOUmVYaEdVVlZPYjFGc1VYTlRNRVpDVXpCTmMxUlZSa0pVVkdoRFRFVjBRbEZWYzNOUk1FWkNVbFZOYzFNd1JrSlVVM2hRVVZWR1VtUnJTWE5VVlVaQ1VWVkZjMU5WUmtoVlEzaFFVVlZHZVZGcmEzTlNWVVpDVTNwT1EweEdiRUpSTUhkNVVXbDRSbEZWUmt4ak1FbHpVekJHUWxSNWVFcFJWV1JoWVd0TmMxSlZSa0paZWxwRFRFVjBRbEZWZEhOUmFYaElVVlZPZFZGcmIzTlRNRVpHVTJ0TmMxVlZSa1pSZVhoRVVWVk9SVXhGYkVKUlZXeDNVWGw0U0ZGVlJreE1SVlpDVVRGUmMxUlZSa0ppVlZGelV6QkdRazB3VGtKTVJWWkNVVlZzTVZGNWVFWlJWVVpNWXpCSmMxTXdSa0pUTUUxelZWVkdRbFZYYUVWTVJWWkNVVlpHYTB4RlZrSlJWV3R6VXpCR1RHUkZUWGRSYVhoTVVWVkdURkY1ZUU1UlZVWk9UMFZKYzFNd1JrSlRlWGhFVVZWR1JsRjVlRXhSVlVaT1RFVTVRbEZXUmpKUmFYaFFVVlZHVWt4RmJFSlJNMmhFVVhsNFZsRlhjRWxWYXpSelVsVkdRbFI2YUVOTVJteENVVmROZGxGcGVFWlJWVVpPVG10TmMxUlZSakZUUnpWRVRFVnNRbEZWYzNOVVZVWkNWRk01UlV4RmRFSlJWWFJ3VVdsNFJsRlZUbUZoYTBselVsVkdRbEpZUmtWTVJtUkNVVlprZFZKRGVGcFJWVVphVW1sNFNsRlZiSGxSZVhoT1VWVkdUbUV3VFhOU1ZVWkNWbmw0UkZGVlJrUlBSVWx6VWxWR1FsTXdUWE5UTUVaRVltdEpjMVJWUmtKVVdIQkVURVZXUWxGV1JqTlJlWGhHVVZWR1NtRnJXWE5VTUVaQ1ZUSjBSMHhGVmtKUlZUbHpVbWw0VUZGVlRuTlJlWGhRVVZWR1VHVlZUWE5TTUVaQ1ZYbDRTRkZWUmt4a01FMXpVbFZHUWxOWWNFVk1SVEZDVVZVeGNGRnBlRXhSVlVaWVpWVk5jMUl3UmtaaGEwNUVURVZXUWxGWVpFTlJlWGhLVVZWR05WRnBlRXBSVlVadlVXdEZjMUpWUmtKVGVrNUVURVV4UWxJelVrUmhWVTF6VWxWR1FscFRlRXBSVlVaT1kydE5jMVV3UmtKVk1tUkZURWRPUWxGWFRYTlRWVVY1VVdwV1JFd3dTWE5TVlVaR1dXbDNNbE5WVG5WVVJUaHpWVEJHUWxVeVpFUk1SVlpDVVZoa1ExRjVlRVpSVlVaV1kydFJjMUl3UmtSUFZVMXpWRlZHUWxWVlozTlZNRVpDVlRGRmMxVlZSa0pTVlVWelVqQkdRbFV3TkhOVVZVWkNVbFZGYzFJd1JrSldXRTVGVEVWV1FsRXllRVJpYTFGelVsVkdRbFV3VFhOVk1FWkNWVEJOYzJGVlNrSlJWMnhEVVhsNFJsRlhOVU5qUlVselUxVkdkRkZwZEVSTVJURkNVVlV3YzFJd1JrUk5WVlZ6VTFWR1FsTlZZM05TVlVaQ1YxUm9SRXhGVmtKUlUzUkRaR3RSYzFJd1JrUk5NRTUwVWtONFJsRlZSbEJpYTFGelVsVkdRbFJXVFhOU01FWkVXV2wwUkV4RlpFSlJWMFZ6VWxWR1JGbHJUWE5TVlVaQ1dYbDRSbEZWVG5OUmFYaE9VVlZHVGxGNWVFWlJWVVYzVVdsNFNGRlZUbTlSZVhoS1VWVkdTbEY1ZUVaUlZVWjZVV2w0VEZGVlRYaFJhWGhNVVZWR1VHVkZVWE5TVlVaQ1ZERlZjMWRWUmtKWFUzaEVVVlZPTUZGcVNrUk1SV3hDVVRCRmMxUlZSa0pVVkZaRVRFVldRbEZWT1ZWTVJWWkNVVlU0TkZGcGVGcFJWMnhEWTBWSmMxTlZSbTFUV0VwRFRFVldRbEZWZEhKUmVYaHlVV3RHUW1Jd1NtaE1SV3hDVVROd1ExRlRlRVpSVlVaNlVXbDRUbEZWWkRCUmFrWkZURVZXUWxGWFRYbFNRM2hLVVZWR1NtRkZVWE5UTUVaRVlrVkpORkY1ZUVaUlZVWXpVV3BXUTB4RmRFSlJWWFJ6VVdsNFNGRlZWa1ZNUlRsQ1VWaG9RMHN3VFhOVFZVWkVVVlZGYzFKVlJrSmpNRWwyVVhsNFNsRlZiRWRNUlRsQ1VWaG9RMHN3VFhOU01FWkVVVlZaYzFVd1JrWlhVemxHVEVWc1FsRldValZTVTNoSVVWVkdlbEZyUlhOU1ZVWkNVM3BPUkV4R1JrSlJWbFp1VWtONFNGRlZaRFJSTUhkelVsVkdRbE42VGtSTVJURkNVVmRrUkV4Rk9VSlJXR2hEWWxWUmMxSXdSa0phTUUxelVsVkdRbE5XU1hOU1ZVWkNVM3BPUkV4Rk1VSlJWa1p3VWtONFJsRlZWVFZTUjJoRlRFVldRbEZXYXpSUmVYaEdVVlZGY2xGdVdrVk1SVlpDVVZVNVZFeEZaRUpSTW5oRlRVVk5jMUpWUmtKVU1qVkZURVZXUWxGVk1WUk1SV1JDVWpOS1EyRlZVWE5TVlVaQ1pEQktTRXhHUmtKUlZrMHpVbE40U0ZGVlJrNVJVM2hHVVZWR1JtTlZVWE5XTUVaQ1ZqSTFSVXhHYkVKUlZteEhURVZzUWxKWVFrWk1SVEZDVVZVd05GSlRlRVpSVlVacVlrVlJjMU5WUmtSaFJVbHpVMVZHUWxOVmMzTlNWVVpDVFd0SmMxTXdSa0ppUlVwTlRFVldRbEZWZEVaTVJrNUNVVmhHUlV4RlZrSlJWV3R6VWxWR1JFMHdWWE5VVlVaQ1ZGWm5jMUpWUmtKVk1FMXpWVEJHUWxVd1RYTmhWVXBDVVZkc1ExUjVlRVpSVkVaRlkwVkpjMU5WUlhkU1JGSkVURVV4UWxGVk1ITlNNRVpFWkd0VmMxTXdSa0pVTVZGelVsVkdRbFF4VlhOWFZVWkVWbXRyYzFOVlJrWlRhWGhRVVZWR1VGRlRlRWhSVlZaTll6Qk5jMUpWUmtKaFZVMXpVVEJHUWxFeldrVk1SVlpDVVZVNGNsSkRlRWhSVlVab1RFVjBRbEV6YUVWTVJXeENVVlZ6YzFOVlJrSlRWRVpIVEVWV1FsRlZhM2RTYVhoR1VWVkdhRXhGVmtKUlZXTjRVbWw0UmxGVlJrcE5hMGx6VWxWR1FsUlhjRVJNUlRsQ1VWWkdUa3hGYkVKUlZYTnpVVEJHUkdGRlVYTlVWVVpDVkZSb1JreEZWa0pSVlRsMVVrTjRSbEZWUms1Tk1FbHpVakJHUkdKclNYTlNNRVpDVTFSYVJreEZWa0pSV0VaRFVYbDRTRkZWVG5sUmFYaFFVVlZHVUU5VlZYTlNWVVpJV21sNFVGRlZSbEpNUldSRVRUQldZVXhGTVVKUlZUQjVVbWw0UmxGVlJtaE1SV3hDVVZWc1JFeEdSa0pQUlU1WFVYbDRSbEZWUm14UmVYaElVVlZPUzB4SE1VTlJWVVpQVVZONFNGRlZSblpSYTJkelVsVkdRbFl3YjNOVFZVWkNVMVU0YzFJd1RYcFJNMmhFVVhsNFJsRlZSbGhNUldSQ1UxWm9SRXhGVmtKUlZsVnpVakJPUkdGRlNYTlVWVVpDVkZWTmMxSlZSa1JXUkVaR1RFWnNRbEZXYTNkU1EzaEdVVlZHVm1GVlNYTlNWVVpDVmpCTmMxSXdSa1JPTUVvMlVsTjRURkZWUmt4TlJWVnpWVlZHUWxaVGVFaFJWVTV0VFZWVmMxTXdSa0pUTTFaRlRFWk9RbEZXWkVKTVJWWkNVVEpvUTJSclVYTlRNRVpDVXpOa1JreEdWa0pSVm14Q1RFVldRbEV5Y0VObFJWVnpVekJHUWxNemJFWk1Sa1pDVVZaV1FreEZWa0pTVnpWRFRsVlZjMVF3UmtKVU1sVnpVakJHUkZORGVFcFJWVVpLWkVWTmMxSlZSa0pUVTNoR1VWVk9VMHhGYkVKUlZYTnpWRlZHUWxSVWFFWk1SWFJDVVZaR2QxSkRlRXhSVlVaTVRVVlZjMWxWUmtSVlF6bEhURVZzUWxGV1VqVlNVM2hJVVZWT1FsRlRlRVpSVlVaTVpGVkpjMVV3UmtKVmVUbEZURVZXUWxGVk9UQlJlWGhLVVZWV05sRnJSWE5UVlVaR1UybDRTbEZWUmt4TVJURkNVVlV3TkZKVGVFeFJWVVpTWTBWUmMxTXdSa0pUZWtKR1RFZEdRbEV4UVhaU2FYaEtVVlZHVldWVlZYTlNNRVpFVVZWRmMxSlZSa0pUTTJSRFRFWk9RbE5YY0VOTU1GVnpWVEJHZWxFd2EzTlVWVVpDVkZka1IweEZWa0pSVm1SNVVubDRSbEZWVG1sa01FbHpVekJHUWxNelZrVk1SazVDVVZaT05GSkRlRkpSVlVaU1ZWTjRVbEZWUmxKa1ZWVnpWakJHUWxaVGVFaFJWVTQwVVROd1JreEdUa0pSVmsxM1VsTjRXRkZWUmxoTU1GVnpVekJHUWxNelZrVk1SazVDVVZaT05GSkRlRkpSVlVaU1ZWTjRWRkZWUmxSTVJXUkNVVEp3UlZOcGVFWlJWVVpTVEVWa1FsRXhTa2RNUlZaQ1VWWkdSVXhGZEVKUlZYUXhVa040VkZGVlJsUmtSVkZ6VkZWR1JtUkZTa2hNUlZaQ1VWWk9SRXhHVGtKUlZrNUVURWRzUTFGVlJuQlJibFpHVEVWV1FsRldWWE5UVlVaQ1lUQlJjMVJWUmtKVVUzaElVVlZOZWxKNWVFcFJWVlpLWld0SmMxSlZSa2RSVkVaRVRFVldRbEZXYTNOU1ZVWkVWMmwwUkV4RlZrSlJWbXR6VWxWR1JsZHFWa1JNUlZaQ1VWVTVWVXhGVmtKUlZUbFdURVprUWxKWGVFTk1SWFJDVVZVNVMweEZWa0pSVm14VlRFVldRbEZWTVhGUmVYaFNVVlZXZVZGcGVFaFJWVkpDWWpCWmMxSlZSa0pVTWpWRlRFVldRbEZWTVZSTVJXUkNVVEZLTlZGNWVFWlJWVVo0VVd0TmMxSXdSa0pOVlVselVUQkdVbEZUZUV4UlZVWlFVM2w0UmxGVlJscFVRM2hHVVZWR1RFMHdUWE5VTUVaRVkwVktibEpEZUVwUlZVNTZVV2w0YUZGVlJuTlJhbFpFVEVWV1FsRlZkSFJTVTNoWVVWVk9UVTR3VlhOU1ZVWkNWRlJTUTB4RmRFSlJWWFJ6VVdsNFNGRlZUbGxXUTNoR1VWVkdVRTlGU1hOWFZVWkNXVE5LUTB4RlZrSlJWWFJQVEVaT1FsSlZjM05WVlVaQ1QxVktUa3hGVmtKUlZUbFZURVZXUWxGVk9WWk1SMDVDVXpKYVYweEZWa0pSVlRnMFVXbDRXbEZWUm1wTU1FbHpVbFZHUWxSVVdrUk1SVEZDVVhwT1EySnJUWE5TVlVaQ1ZERlJjMUpWUmtKVU1WVnpWMVZHU21SRlNYTlNNRVpDWVRCSmMxVXdSa0phU0U1RVRFVldRbEZWZEhkUmFYaE1VVlZHY0ZGcGVFUlJWVTR3VVdsNFRsRlZSazVpTUVselVsVkdRbFF6UWtWTVJYUkNVVlYwTTFKVGVGWlJWVVpXVlhsNGVGRnJSa0pqVlVweFVtbDRURkZWUmt4bFZWVnpWVEJHUkdSRlVubFJhWGhHVVZWR1RFOUZTWE5hTUVwQ1VWZGtRMk5yVlhOU1ZVWkNVekowUkV4SGJFTlJWVTE0VVdrNVJFeEZkRUpSVlhOM1VsTjRVbEZWUmxKTk1FMXpVekJHUWxNelJrTk1Sa1pDVWpKNFEyTkZVWE5UTUVaQ1UzcENSa3hHUmtKUlZrVjZVWGw0VWxGVlJsSk1NRWx6VXpCR1FsTXpaRVpNUmxaQ1VWWldXRXhFU2tOUlZVVjVVVzVTUmt4RlZrSlJWVEV4VVhsNFJsRlZSa3hoUlUxelV6QkdRbFJYWkVSTVJWWkNVVlYwTmxGNWVGSlJWVVpVVjBONFRGRlZSa3hsVlZWelZsVkdSbVJyWTNaU1EzaFVVVk01UTFOV1dYTlRNRVpDVTNwQ1JreEdSa0pSVmtWNlVYbDRWbEZWUmt4alJWRnpVakJHUkdKRlNYSlJhWGhLVVZjNVJGVnBlRkJSVlhCS1lrVk5jMU5WUmtSUlZGcERURVpPUWxGV1RYSlNVM2hXVVZWR1ZsVkRlRWhSVlU1MVVXMDFTRXhIVmtKUlYxVjVVbmw0VWxGVlJsSlZhWGhLVVZWV2QxRnJSWE5TTUU1MVUwZFpjMVJWUmtKVVZrMXpVbFZHUWxvd1NYTlRWVVpDVTFkNFNFeEZkRUpUTWpWRFRFVXhRbEZWTVhSU2VYaEdVVlZPVlUxVldYTlhWVVpDVjFkTmMxSlZSa0pWTUUxelVsVkdRbFZYT1VOTVJWWkNVVlV4TTFGNWVFaFJWVTEyVVc1b1JreEZkRUpSVlhSWVRFWkdRbEZXVmtKTVJWWkNVVEphV1V4RmRFSlJWWFJhVEVVNVFsRldUa0pNUlZaQ1VUSlNZVXhGZEVKUlZYUnVVWGw0VEZGVlJsQlJVM2hHVVZWT1lXRkZUWE5UTUVaQ1V6TmtSa3hHVmtKUlZteENURVZXUWxNelNrTk5NRlZ6VmxWR1JGTlRlRTVSVlVaT1RXdFpjMUpWUmtKVFdHaEhURVYwUWxGVmRGaE1Sa1pDVVZaRmVsRjVlRkJSVlVaVVRFVldRbEV5YUVSTVJXeENVVlZzTlZORGVFWlJWVVpRVEVWa1FsRXhRa1JNUldSQ1VWY3hRMHhGVmtKUk0xcERURVZzUWxGVmMzTlRWVVpDVTFoQ1NVeEZWa0pSVld0elVsVkdRbEl3UlhOU1ZVWkNVMWQwU1V4RlZrSlJWV1J6VTBONFNsRlZSa3hNUlU1Q1VUTm9RMHhGTVVKUlZURjBVbE40UmxGVlJrcGxhMDF6VXpCR1FsTXhZM05WVlVaQ1ZWaEtSRXhGWkVKaE1FcHhVVzVHU1V4RlZrSlJWMDV6VWtONFJsRlZSa1ppVlZGelYxVkdRbGRUZUZoUlZXeHpVVEJaYzFJd1JrSmlNRXBFVEVWa1FsRlhWWE5TTUVaQ1V6QlJjMU13UmtSU2VYaEtVVlZHTWxFeWNFVk1SVlpDVVZWV1RVeEdSa0pSVmtWelZUQkdRbFF6VmtWTVJWWkNVVmROYzFJd1JrcGlhMDF6VkZWR1FsUlZWWE5TVlVaQ1lWVktNbEpUZUVaUlZVWXhVV3ROYzFNd1JrSlRNblJEVEVWa1FsUjVPVVJhTUZGelVqQkdUMkpWU1hOVU1FWkNZbXRLU2t4RlZrSlVWa1ozVWtONFNGRlZSa3hoVlZGelVsVkdRbUpWU2t0TVJWWkNVVmRrUTA0d1dYTlNNRVpPWlVWT2JsSkRlRVpSVlVaR1kxVlJjMVF3UmtKVWVYaEdVVlZHU0ZKRGVFWlJWVVpzWTBWWmMxUXdSa0pWTWpsSFRFVldRbEZYVlhOU01FWkVaR3RTUWt4RlZrSlJWMVZ6VWpCNGQxSkZUWE5WVlhSMlVrUktRMUZUZUVaUlZVWnNURVZrUWxGNlJrVmxhMk56VWxWR1NsZHBlRkJSVlZKQ1kxVmpjMUl3UmtKVldIQkhURVYwUWxGVmRGaE1Sa1pDVVZaRk1sSlRlRWhSVlU1clVYbDRSbEZWVmxsT1ZWbHpZMVZLUWxFd2EzTlVWVVpDVkZSQ1JVeEZWa0pSVm1SelVrTjRWRkZWUmxSTlJWbHpXVEJHUWxsNWVGcFJWVlkwVVhsNFVGRlZVa0psUlUxelVsVkdRbFV6YkVSTVJsWkNVVlpzYjFKNWVFeFJWVVpNWVZWamMxWlZSa1JpYTBsNFVYbDRTRkV5TlVaVmFYaE9VVlZHVGsxclRYTlNWVVpDV2xWTmMxSXdSa1JVYVhoUVVWVkdWMUZUZUV4UlZVNXNURWRzUTFGVlJsZFJVM2hJVVZWR01WRjVlSFJSYTBaQ1ZtdEZjMUl3UmtaaGEwNUVURVZXUWxGWFRrVk1SV1JDVVRKb1ExSlRlRTVSVlVaT1VYbDRVbEZWUmxKVFEzaFFVVlZXYTFGVGVFcFJWVVpVVVZONFJsRlZSazVUVTNoUVVWVkdVRkY1ZUZoUlZUaDRVV2w0VGxGVlJrNVJlWGhHVVZWT1ZVNVZZM05YVlVaQ1YxVlZjMUpWUmtKVk0wWkRURVZXUWxGVk1WVk1SV1JDVVROYVExZERlRXhSVlVaTVRVVmpjMVF3UmtKVlUzaEdVVlZPYVUxVlkzTlRNRVpDVXpCUmMxVlZSa0pXVlVWelVsVkdSRnByVFhOVE1FWkNVekk1UTB4RmRFSlJWVGxDVEVWV1FsRXhjSGRSYVhoTVVWVkdURlo1ZUZKUlZVWldVVk40UmxGVlRtMVhRM2hNVVZWR1RGRjVlRTVSVlVaU1RFVmtRbEV5U1hOVFZVWkNVM2w0U2xGVlJrcE5NRWx6VWxWR1FsTlRlRVpSVlVaSVVWTjRSbEZWUmtwalZVMXpVbFZHUWxWVVRrUk1SVGxDVVZaTmMxSlZSa0pTTURCelUxVkdSR05GVFhkUmFYaE1VVlZHVEZGNWVFNVJWVVpPVFRCSmMxSXdSa0pUZWtKRFRFVjBRbEZWYzNsU2VYaHFVVlV3TTFGcWJFaE1SMDVDVVRCcmMxUXdSa0pVZVhoS1VWVkdTa3N3WTNOU1ZVWkNXWHBXU0V4Rk1VSlNWR1JEVTBONFdsRlZUa3BNUlRGQ1VWVXhha3hGVmtKUlZsWlpURVYwUWxGVmRGaE1Sa1pDVVRKWk1sSlRlRVpSVlVaS1RqQlZjMUpWUmtKVlZFNUVURVU1UWxGV1RYTlNWVVpFVFRCSmMxTlZSa0pUVkZwS1RFVldRbEZWT0hOU01FWkVWME40U2xGVlJreE1SV3hDVVZWc01sTlRlRVpSVlVaS1RFVldRbEZWWkVKTVJWWkNVVlZzY2xORGVFWlJWVVpJWWtWbmMxTlZSa0pUZVhoRVVWVk9ORkZ1VmtwTVJXUkNVVlpHYzFKNWVFWlJWVVpTWTJ0TmMxSXdSa1JoUlVselZGVkdRbFJVYUVaTVJWWkNVVlU1ZDFKRGVFeFJWVVpNVVhsNFRsRlZSazVOTUVselVqQkdSR1ZGU1hOVlZVWkNXVlZ6YzFOVlJrSldTR3hHVEVWV1FsRlhPVU5NUlU1Q1VUTkNRMHhGTVVKUlZUQjNVa040UmxGVlJrcE5WVkZ6VWxWR1FsTjVkRVJNUlRGQ1VUSlpjMUl3UmtKVFZWRnpVbFZHUWxkV2EzTlRNRVpDVkRGWmMxSlZSa0pXTVZWelVqQkdSRTlWU2tWTVJXUkNVVmhHUTB4SGJFTlJWVVpQVVhsNFJsRlZSbkJSYTBWelVsVkdRbFl3UlhOU1ZVWkNWVWhhU1V4R1JrSlNNMEpFVEVWc1FsRlZjM05VVlVaQ1ZGaGtTVXhGZEVKUlZYUkZURVZXUWxFeGNFVk1SV1JDVVZoR1EweEhiRU5SVlVaUFVsTjRSbEZWUm5CUmEwVnpVbFZHUWxZd1JYTlNWVVpDVlVob1NVeEZiRUpVV0VKRlRFVTVRbEpGUm5wVFEzaElVVlZHVW1KRlkzTlNWVVpDVlZSYVJreEZaRUpSTVZKNFVXbDRSbEZWVmxsaFJXZHpWVEJHUkZWVlkzTlRNRVpDVTNwQ1NFeEdSa0pSTUhkNFVubDRURkZWUmt4TlJXTnpWREJHUWxWVGVFWlJWVTVwVFZWamMxTXdSa0pUTUZGelZWVkdRbFZYYkVsTVIwWkNVVmRHYjFORGVFeFJWVVpNWWpCSmMxTXdSa0pVV0VKRFRFVjBRbEZWZEhCVFEzaHNVVlU0ZGxGNWVFNVJWVVpPVkVONFJsRlZUbFZNTUdOelYxVkdRbGRZUmtsTVJXUkNVVEZLYzFORGVFeFJWVVpNWWxWamMxWXdSa0pWV0doSlRFVldRbEV5U25oUmFYaE1VVlZHVEdFd1ozTldWVVpDVjFWRmMxSlZSa1pqYTBwNVUwTjRWRkZWUmxSak1HTnpVakJHUkZKRlJYTlRWVVpDVmxSc1EweEZaRUpSVjAweVVXbDRSbEZWUmxwUmVYaEtVVlZHVmxGVGVFcFJWVVpXWW10amMxTXdSa0pUTWpGSVRFWkdRbEY2WkVWaWEyTnpVekJHUWxNeU1VaE1SVEZDVVZaR1FreEZWa0pUVmtwdlVYbDRSbEZWUmxwYU1FMXpVekJHUkZsdE5VaE1SWFJDVVZWMGNsTkRlRlpSVlVaV1ZXbDRVRkZWUmxKTVJXeENVMWMxUkU0d1kzTlZNRVpFVTFONFRGRlZSbEJqTUZWelVsVkdRbGRYTlVaTVJYUkNVVlYwZEZKNWVGSlJWVVpTVEVWT1FsRjZWa05NUlRGQ1VWVXhibEZwZUVaUlZVWmFZbXRuYzFNd1JrSlRNakZJVEVVeFFsRXpXa05pYTJOelV6QkdRbE15TVVoTVJURkNVVlpGTlZGcGVFWlJWVTVwVDBWTmMxSlZSa0pXVnpWSlRFVXhRbEpXV2tKTVJYUkNVVlYwZEZKNWVGSlJWVVpXVDFWSmMxSXdSa2hpYTBwNVVsTjRURkZWUmt4aE1HZHpWbFZHUWxaWVVrUk1SbFpDVmpKb1EweEZNVUpSVlRFelVYbDRSbEZWVGxWa2EyZHpWMVZHUWxkVVVrWk1SV1JDVVRGS05sSlRlRXhSVlVaTVlsVmpjMVl3UmtKVldHaEpURVZXUWxFeVNuaFJhWGhNVVZWR1RHTlZaM05pTUVwQ1VWZHNRMDFWYTNOU1ZVWkVaRVZLZUZGcGVFeFJWVVpNWlZWVmMxVlZSa0pXVlVWelVsVkdVR0pyU1RGU1UzaFlVVlZHV0ZwcGVFaFJWVTVSWVRCSmMxTXdSa0pUTTA1SlRFWldRbEZXYkRSVFUzaEdVVlZHVm1WVmEzTlhWVVpDVjFSa1JreEZkRUpSTTFwRVRWVk5jMU13UmtKVE0yUkpURVpHUWxGV1ZYaFRVM2hHVVZWR1ZtVlZhM05YVlVaQ1YxUmtSa3hGZEVKVk0zQkVUakJOYzFvd1NrSlJWMlJEVGtWbmMxSXdSa1JYYm5CSlRFVjBRbEZWZEhwVFEzaFdVVlZHV2xKNWVFWlJWVTV4VVc1d1NVeEZkRUpSVlhRelUwTjRVbEZWUmxaUmVYaEdVVlZHU21ScmEzTlhWVVpRWkd0S1dFeEhWa0pSVjFZeFVrTjRTRkZWVGxsUlUzaEdVVlZHVEdNd1ZYTlZNRVpDVlhwR1NVeEZkRUpSVlhSNlUwTjRWbEZWUmxwT1ZWVnpVekJHUkV3d1NsWk1SVlpDVVZWMGVsSlRlRlJSVlVaVVRWVm5jMU13UmtKVE0yUkpURVpHUWxGV1ZUVlNVM2hNVVZVNWNWRjZaRVJNUjJSRFVWVkdibEZxVWtsTVJXUkNVVEZ3UWt4RlZrSlJWV3hFVEVaT1FsRldUWGhUUTNoTVVWVkdUR013WjNOV1ZVWkNWMVJXUmt4RmRFSlJlbXhEVFZWTmMxTXdSa0pUTTJSSlRFWkdRbEZXVmtSTVJWWkNVVlZzUlV4R1JrSlJNalZEVVhsNFJsRlZSa3BTUTNoU1VWVkdWbVZGWjNOVE1FWkNVek5PU1V4R1ZrSlNXRnBEWld0bmMxVXdSa0pWTTA1SVRFVmtRbEV3ZUhWU2VYaE1VVlZHVEdOVlozTmFWVVpDWVZWS2MxRnBlRVpSVlZWNFVXNVNTRXhHVGtKUk1HdHpVakJHUW1Fd1RYTlVNRVpDVDFWS1NFeEZkRUpSVlhSNlUwTjRWbEZWUmxaaFJWbHpWakJHUkZwcGVGQlJWVlpMVEVWMFFsRlZPREpSYVhoR1VWVkdXbUpyVlhOVE1FWkNVek5HU1V4SGJFTlJWVVp3VVdsNFJGRlZUbmxSZVhoT1VWVkdUbEpwZUVaUlZVWmFZbXRuYzFNd1JrSlRNMFpKVEVkV1FsRXpXa05qYTJkelV6QkdRbE16UmtsTVIxWkNVVmRzUTJGRlVYTlNWVVpFWkVWSk5GRjVlRVpSVlVaV1ltdG5jMVJWUmtaYVEzaE9VVlZHVG1KVlkzTlNWVVpDVlZjMVNFeEZkRUpSVlhSNFUwTjRiRkZWVG0xaVJVbHpVMVZHUWxaVWJFTk1SV3hDVWpGWk1sRnBlRVpSVlVaYVVYbDRTRkZWVGxOUlUzaEtVVlZHVm1KclkzTlRNRVpDVXpJeFNFeEZPVUpSTWxwMVVubDRURkZWUmt4TmEyZHpXVlZHUWxsWWFFTk1SV1JDVWpKd1ExRlRlR2hSVlVad1VXeHZjMUpWUmtSa1JVb3lVbWw0VEZGVlJreE9SV2R6WkZWS1FsRllWa05sYTBselVqQkdSbVJyU2tKTVIwWkNVVmRzUTAxRlNYTlRNRVpFWkVWSk0xTkRlRXhSVlVaTVQwVm5jMWxWUmtKWlZFNURURVZrUWxKWFNrUk1SVlpDVVZaa1JVeEZaRUpSTW1oRFltdGpjMU13UmtKVGVYUkpURWRzUTFGVlJuQlJhbFpEVEVWa1FsSlhjRU5SVTNoS1VWVkdWazR3U1hOU01FWkVXbTVTUmt4RmRFSlJWWFIwVW5sNFRsRlZSbEpPTUVselVsVkdSRmx1VWtaTVJYUkNVVlYwYmxOVGVGUlJWV3hOWVVWcmMxTXdSa0pUZWtwSlRFZEdRbEZYUmpSUmFYaEtVVlZqZUZGdVVraE1SazVDVVZaT2JsRnBlRWhSVlU1TldXbDRURkZWUmt4a01HZHpWVlZHUWxWWGVFZE1SbVJDVVZaa1VreEhSa0pSVjBaeFVYbDRSbEZWUms1WmFYaE1VVlZHVEdRd1ozTlZNRVpHWTBWUmVsTkRlR2hSVlVab1l6QmpjMUl3UmtSVVJ6VklURVYwUWxGVmRIUlNlWGhTVVZWR1ZsRlRlRXBSVldSMVVXMDFTRXhGZEVKUlZYUnVVMU40VWxGVlRrMWhSV3R6VXpCR1FsTjZRa2xNUms1Q1VWWk9NbEZwZUVoUlZVNXJZbXRqYzFNd1JrSlRNakZJVEVVeFFsRldSa0pNUldSQ1VsZHdRMlJGWTNOWlZVWkNXVmhPU0V4RlpFSlJNVkZ6VkZWR1FsUllVa2RNUlZaQ1VWVTVhVXhGZEVKUlZYUjZVME40VmxGVlJsWmpSV3R6VjFWR1NtUkZTWEpUVTNoR1VWVkdjRkY1ZUhCUmEwWkpaR3ROTlZGcGVFWlJWVVp3VVdsNFRsRlZSbFZSVTNoR1VWVkdibEZwZUVoUlZVWk1VVk40U0ZGVlpIaFJhMFZ6VWxWR1FscFZSWE5TVlVaQ1ZVUldTRXhGWkVKUk0xSkZZekJKYzFOVlJrSlZNa2x6VXpCR1FsTXpaRWxNUmtaQ1VWWkdObEpUZUhCUmEwWkVVMmw0U2xGVlJuTlJiWGhFVEVWV1FsRlZkRVpNUms1Q1UxVjRSMHhGVmtKUlZYUjZVV2w0VEZGVlJsQlBSVmx6VWxWR1NGZHRjRXBNUlhSQ1VWVnpORk5EZUdoUlZVWm9aV3RuYzFVd1JrSlZNMlJFVEVkV1FsRlhWblpTYVhoS1VWVlZOVkV5Y0VwTVJYUkNVVlYwZEZKNWVFNVJWVVpTVVZONFJsRlZWbkZSYmxKSVRFaFdRMUZWUmpGUmJrNUlURVZrUWxFeU5VTk1SVEZDVVZVd01WRjVlRVpSVlVaWVpHdFJjMU13UmtKVE0yeEdURVpHUWxGV1JqVlNRM2h1VVd0R1Fsb3dTWFpSYVhoSVVWVk5OVkY1ZUVoUlZVWktZbXRqYzFNd1JrSlRNakZJVEVkc1ExRlZSbkJSYWxaRFRFVmtRbEV6VWtOa2ExVnpVekJHUWxNeU1VaE1SVEZDVVZVd01WRjVlRmhSVlVab1VWTjRSbEZWVGpSUmJscEZURVYwUWxGVmRIUlNlWGhPVVZWR1Rsb3dUWE5VTUVaQ1ZESm9SRXhGVmtKUlZURXlVbWw0V2xGVlZqSlJhWGhFVVZWMFJVeEZNVUpSVlRFelUwTjRSbEZWUmxoTVJXeENVVlZyTTFKRGVFWlJWVVp3VVcxb1EweEZWa0pSVmxVd1VYbDRSbEZWUms1Tk1FbHpWbFZHUWxZemFFWk1SWFJDVVZWME5WSlRlRlJSVlU1dlVsVnJjMUpWUmtKV00xWkZURVZXUWxGV1RrUk1SazVDVVhwR1ExSkRlRVpSVlVaVVVrTjRVRkZWUmxCaFJVMXpVbFZHUWxSWVdrZE1Sa1pDVVROU1ExZHBlRXhSVlVaTVQwVm5jMWxWUmtKWlYzQkZURVZrUWxFeWVFTk9NRlZ6VXpCR1FsTXlNVWhNUlRGQ1VWWkdjRkY1ZUVoUlZXUjVVVzVhU2t4SGJFTlJWVVp3VVc1T1NFeEZaRUpXVmtwR1RFVXhRbEZWTVVSTVJrWkNVVlpHTUZKNWVFeFJWVVpNWWxWamMxVXdSa1JqUlVwMVVubDRURkZWUmt4aVZXTnpWRlZHUWxWVGVFaFJWVTVwWW10amMxTXdSa0pUTW1SS1RFWk9RbE5XVVhOVVZVWkNWRlV3YzFKVlJrSlhXRkpLVEVWMFFsRlZkSFJTZVhoT1VWVk9NbEZwZUVwUlZVNUtZakJOYzFKVlJrVlJWR1JKVEVWV1FsRldhM05TVlVaR1lVVkpjMU5WUmtKVGVYaE9VVlZHVGs5RlozTlRNRVpDVlZoS1JFeEZWa0pTVjFwMlVYbDRSbEZWUmxoU1EzaEdVVlZHVms1VlozTlZWVVpHVTJrNVEweEZiRUpSVjBrd1UybDRTbEZWVGtKUlUzaEdVVlZHV0V4RmJFSlJWV3gxVVdsNFJsRlZSbFJqUldkelV6QkdRbE16YkVaTVJrNUNVWHBrUTA1clVYTlNWVVpDVmxoYVNFeEZkRUpSVlhRelVubDRTRkZWVGtoTVJXeENVVmRSTTFORGVFWlJWVTVDVG10bmMxSlZSa0pWTUZWeldsVkdRbHBZY0VwTVJURkNVak5vUTJSVmEzTlNWVVpDVlRCamMxb3dTa0pSVjJSRFUybDRSbEZWUmxaT1ZXZHpVbFZHUWxkVGVFeFJWV1F5VWtSYVNVeEZWa0pSVmsweFVrTjRWRkZWUmxST2ExRnpVakJHUkdKRlNrVk1SVlpDVVZaTmVsSkRlRlJSVlU1VllrVlZjMU5WUmtaUlZVVnpVbFZHUWxkVVVrbE1SVlpDVVZaV01GTjVlRlJSVlZZd1VXNU9URXhGVmtKUlZsWXdVM2w0VUZGVlJsUk5SVTF6VWxWR1JHSnJTbGRNUlhSQ1VWVjBibE5UZUU1UlZVWk9WSGw0U0ZGVlJscFJVM2hHVVZWR1ZGcHBlRlpSVldRMFVYcE9TVXhGTVVKUlZURTFVME40UmxGVlJscGtSV2R6VXpCR1FsTXpUa2xNUm1SQ1VUSTFRMlZyYTNOU1ZVWkNWMWN4UTB4RmRFSlJWWFI2VTBONFZsRlZSbFpoUlZselZqQkdRbGRYWkVkTVJWWkNVVlpXZDFOVGVGcFJWVVpvV1hsNFRGRlZSa3hrTUdkelZsVkdWbU5GVlhOVVZVWkNWRmN4UTB4RlZrSlJNVkUxVTFONFdsRlZSbHBTVTNoR1VWVkdWR05WU1hOU1ZVWkNWRlpSYzFJd1JraGthMGx6VWpCR1IxRldaM05UTUVaQ1V6SXhTRXhHWkVKUlZrWTBVME40UmxGVlRtbGpWVWx6VXpCR1FsTXpSa2xNUnpsRFVWVkdjRkZxUmtwTVJWWkNVVEJOYzFOVlJrSmlhMHB1VVhsNFJsRlZSbEpOTUUxelZWVkdRa3N3U1hOVE1FWkNXbXBLUkV4RlZrSlJWa1Z6VTFWR1FrNUZTWE5UTUVaQ1dtdEZjMUpWUmtKVlUzaElVVlZPZVZKRGVFNVJWVVpXWVZWcmMxUlZSa0pVVTNkNVVrVkdSbU5GU1RGVFUzaE1VVlZHVEZKRGVGSlJWVVpXVVZONFJsRlZUbTFSZVhoTVVWVkdUR0l3U1hOVE1FWkNWREJGYzFKVlJrUlhia0pEVEVWMFFsRlZkRmhNUmtaQ1VWWldRa3hGVmtKU1Z6VkRXa040VkZGVlJsUmpNR056VWpCR1JGUkhOVWhNUlhSQ1VWVjBlRk5EZUd4UlZVWndVVzE0UTB4RlZrSlNWRVpEWkVWamMxVXdSa1JUVTNoTVVWVkdVR013VlhOU1ZVWkNWMWMxUmt4RmRFSlJWWFI0VTBONGNGRnJSa0poVlVselVUQkdSR05yVFhOVVZVWkNWRlZaYzFKVlJrSlhWelZKVEVWMFFsRlZkSGhUUTNoc1VWVk9NbEZ1U2tsTVJYUkNVVlYwZUZORGVHeFJWVVp3VVcxb1JVeEZWa0pSTTFKRFQwVk5jMUpWUmtKV1Z6VkpURVV4UWxKWFVYTlNNRVpDVTFWRmMxTXdSa0pUTTBaSlRFZHNRMUZWUm5SUmJXaEZURVZXUWxFemFFTk1SVGxDVWxWdmMxUlZSa0pVVkdoRFRFVnNRbEZXVm5WU2VYaE1VVlZHVEdOVlozTmFWVVpFWVd0S2VWTkRlRXhSVlVaTVlsVmpjMVZWUmtKV1ZVVnpVMVZHUkZkRlJYTlNWVVpFVVZjMVNFeEZkRUpSVlhSRlRFWkdRbEZXUm5CVFEzaG9VVlZHYUdGRlozTlRNRVpDVXpJNVEweEZkRUpSVlRCelUxVkdTR05yVG5kUmFYaE1VVlZHVEZKRGVGSlJWVVpTVG10SmMxb3dTa0pSVjJSRFRsVkpjMU13UmtKVE1qbERURVV4UWxKWVVrUmpSVWx6VXpCR1FsTXlNVWhNUlRGQ1VWWkdRa3hGWkVKU1YzQkRZbXRqYzFNd1JrSlRNMFpKVEVkV1FsRlhiRU5oUlZGelVqQkdXbVJyU1hOVVZVWkNWRmhrUmt4R1ZrSlJWRUpEWTBWTmMxSlZSa1JpYTAweFVubDRXbEZWUmxwU1UzaEdVVlZHVkdOVlNYTlNWVVpDVkZaUmMxSXdSa1JrYTBwMFUxTjRUbEZWUms1TU1HdHpVbFZHUWxVelJrTk1SVlpDVVZVeFZVeEZaRUpSTTBwRFYwTjRURkZWUmt4TE1HdHpWREJHUkdKVlNYTlRWVVpDWW10S2QxTlRlRVpSVlVaU1RUQk5jMVZWUmtKTE1FbHpVekJHUWxwcVNrUk1SVlpDVVZaRmMxTlZSa0pPUlVselV6QkdRbHByUlhOU1ZVWkNWVk40U0ZGVlZUVlNSMUZ6V1RCR1JGTlRlRkJSVlVaUVRFVnNRbEZWYkhSVGFYaEdVVlZHYUdGRmIzTlVWVVpHVGxWS1NVeEdiRUpSTUd0elZEQkdRbE5WWTNOVE1FWkNVM2wwU2t4Rk9VSlJNRlYyVTFONFRGRlZSa3hSZVhoT1VWVkdUa3hGWkVKUlZXUnlVbmw0VGxGVlZuTlJha3BFVEVVeFFsRlZNRE5SYVhoYVVWVldjVkZ1UWtsTVJrNUNVVEZHU0V4RmRFSlJWWE4zVW5sNFVsRlZUazFOVldOelV6QkdRbE42UWtoTVJUbENVVlpGYzFKVlJrWlpha1pJVEVWMFFsRlZkRVZNUmtaQ1VWWkdSRXhGZEVKUlZYUjJVV2w0VGxGVlJsSmpSVWx6VXpCR1FsTXliRWxNUjA1Q1UxaENSRXhGTVVKUlZUQnlVV2w0VmxGVlJuaFJia0pFVEVWa1FsUlhlRVJNUld4Q1VWVnNlRkY1ZUVoUlZVWXpVV2w0UmxGVll6RlJhWGhPVVZWT1NreEZiRUpSTUd0elZGVkdRbFJZYUVaTVJWWkNVVlpWYzFFd1JrUlhibXhHVEVkT1FsSlZhM05VTUVaRlVWVlJjMUl3UmtKa01FbHpVakJHUkdGclNYTlRWVVpLV201b1RFeEZPVUpSVlRoM1UzbDRjRkZyUmtKaFZVbHpWREJHUWxWVVJrWk1SVlpDVVZaT1FreEZaRUpTV0hCRVlVVmpjMVF3UmtKVWVrcE1URWM1UTFGVlJuWlJhWGhRVVZWR1VrMHdWWE5TVlVaQ1ZUQkZjMUl3UmtaaFJWRnpWRlZHUWxSNlVrWk1SVEZDV1d4bmMxSXdSbkJSYXpoelZGVkdRbFJWVFhOU1ZVWkVWa2h3UzB4R2JFSlJWbXhHVEVWV1FsRldUak5UYVhoR1VWVkdXRkY1ZUVoUlZVMHhVVzVvUzB4RmRFSlJWWFIwVW5sNFdGRlZSbEpsUldkelVsVkdSRmx1UmtOTVJYUkNVVlYwZUZORGVIWlJhMFpDWVZWSmVGTlRlRVpSVlU0d1VXNUdRMHhGZEVKUlZYUkZURVpHUWxGV1ZrSk1SVlpDVVRKYVJFeEZkRUpSVlhReFUybDRWbEZWUmxwUlUzaEdVVlZPY1ZGdVdrdE1SWFJDVVZWME0xTnBlR2hSVlVac1VWTjRSbEZWVG5kUmJtaExURVYwUWxGVmREVlRhWGgwVVd0R1FtTXdTa1JNUldSQ1VWVXdlRk5wZUV4UlZVWk1UV3R2YzFkVlJrSlhWVkZ6VWpCR1JtUkZVVE5UYVhoVVVWVkdWR013WTNOU01FWkVWRWMxU0V4RmRFSlJWWFI0VTBONGJGRlZSbkJSYlhoRFRFVldRbEpVUmtOa1JXTnpWVEJHUkZOVGVFeFJWVVpRWXpCVmMxSlZSa0pYVnpWR1RFVjBRbEZWZEhoVFEzaHdVV3RHUW1GVlNYTlJNRVpFWTJ0TmMxUlZSa0pVVlZselVsVkdRbGRYTlVsTVJYUkNVVlYwZUZORGVHeFJWVTR5VVc1S1NVeEZkRUpSVlhSNFUwTjRiRkZWUm5CUmJXaEZURVZXUWxFelVrTlBSVTF6VWxWR1FsWlhOVWxNUlRGQ1VsZFJjMUl3UmtKVFZVVnpVekJHUWxNelJrbE1SMnhEVVZWR2RGRnRhRVZNUlZaQ1VUTm9RMHhGT1VKU1ZXOXpWRlZHUWxSWVZrZE1SVlpDVVZkTk1WTnBlRXhSVlVaTVkxVm5jMXBWUmtSaWEwb3pVWGw0UmxGVlJtcE9NRzl6VXpCR1FsTXlNVWhNUlRGQ1VUSTFRMDFyVVhOU1ZVWkNZekJOYzFSVlJrSmFhMWx6VWpCR1JGWnBlRTVSVlVadFVYbDRTbEZWVGt4U1EzaEdVVlZHV2xacGVGWlJWVVphVm5sNFJsRlZSbHBYUTNoVVVWVk9jVkV4VlhOU1ZVWkNWMVZqYzFRd1JrSlZNRmx6VWxWR1FsZFZWWE5VVlVaRVlXdE9TVXhGVmtKUlZteEtURVpXUWxGV2JFbE1SVlpDVVZac1NFeEdUa0pSZWtaRVVYbDRSbEZWUm5SUmVYaE9VVlZHYlZSRGVFcFJWVVl4VVhsNFRsRlZSbTFSZVhoSVVWVkdNVkZyVFhOU01FWkVZMnRXUWt4RlpFSlJNRVUxVTJsNFRGRlZSa3hTUTNoU1VWVkdVbU5WYjNOaU1FcENVVmM1UTJORmIzTlRNRVpDVXpOV1MweEdWa0pSVm1ReVUybDRURkZWUmt4bFZXOXpZbFZLUWxGWE9VTmxhMjl6VXpCR1FsTXlkRXhNUm1SQ1VsTTVSbEpEZUVwUlZVNUNZV3R6YzFNd1JrSlRNblJNVEVaV1FsRldiRVJNUlZaQ1VWWmtVVXhGWkVKUmVsWkRUbFZ2YzFNd1JrSlRNRkZ6VlZWR1FsVlhPVXRNUjJ4RFVWVkdjRkZ0TlV0TVJYUkNVVlYwTVZOcGVGWlJWVVpZWkd0dmMxTXdSa0pUTTJ4TFRFY3hRMUZWUm5aUmJuQkxURVYwUWxGVmRISlRlWGhhVVZWV2IxSnRlRXhNUlhSQ1VWVjBkRko1ZUU1UlZVWlNaVlZSYzFKVlJrUlphbFpMVEVWMFFsRlZkSGhUUTNoc1VWVkdjRkZ0YUVWTVJWWkNVbFJHUTJWRlZYTlhWVVpDVjFoV1RFeEZaRUpSTW5SRFRFY3hRMUZWUm0xalJYTnpVekJHUWxNeU1VaE1SVEZDVVRGd2RWSjVlRXhSVlVaTVlsVmpjMVJWUmtKVVYzUkdURVYwUWxGVmRIbFRlWGhNVVZWR1RHUXdiM05aTUVaQ1dqQktORk5wZUV4UlZVWk1Va040VWxGVlJsUmpWWE56VWpCR1NHSnJVbmRUZVhoTVVWVkdUR0pWWTNOVVZVWkNWRmhrUlV4R2JFSlJWbXhVVEVWc1FsUXlOVVJNUlRGQ1VWVXhSVXhGVmtKUlYwMTJVbWw0U0ZGVlJrNVJVM2hLVVZWT2VWRnFXa1pNUlZaQ1VUQmpjMUV3UmtKU1ZVMXpWVlZHUWxWNmJFWk1SVlpDVVZWVk5GSlRlRkpSVlVaVVdYbDRVbEZWUmxST1ZWbHpVbFZHUWxKVVVrZE1Sa1pDVVZaT1JVeEZkRUpSVlRCNlVtbDRSbEZWUmtaTmExbHpWRlZHUkdKRlVYcFNhWGhHVVZWR1JrOUZWWE5WTUU1M1dXdG5jMVV3UmtKVk1taERURVZXUWxGWFpFTmpSV3R6VWpCR1JFNVZTWE5UVlVaQ1UxaGtURXhGVmtKUlYyUkRVWGw0UmxGVlJteFJlWGhLVVZWR1NrMVZjM05TVlVaQ1ZESjBSRXhHWkVKUk0yaERZMnRSYzFOVlJrSmlSVWw1VkVONFNsRlZUa0pSVTNoR1VWVkdibEZwZUVSUlZVNWhVbmw0YUZGVlJtcE1SV3hDVVZWc01sSjVlRkpSVlU1elVXNWtTRXhHVmtKUlZtTnpVMVZHUWxOVlRYTlRNRVpHWW10S1MweEZWa0pSVjFaTVRFVnNRbEZWYXpWVGVYaEdVVlZHVUdFd1RYTlRNRVpDVkZoT1NreEZiRUpTV0VKRVRFVnNRbEZWYTNaU2VYaEdVVlZHV0Vzd1kzTlNWVVpDV1RCamMxbFZSa0paVlZGelUxVkdRbE5VUmt4TVJWWkNVVlU1YUV4R1RrSlJNMHBGVEVaR1FsRlhiRU5oUlUxelUxVkdRbGxxVWtaTVJWWkNVVEJGYzFRd1JrSlVNRVZ6VWxWR1NsZERlRTVSVlVaT1RsVlpjMUpWUmtKVVZ6RkVURVZXUWxGVk9XaE1Sa1pDVVZaR2NsTjVlRXhSVlVaTVpXdDNjMUl3UmxoaFJVMXpWREJHVlZGWE1VWk1SVlpDVVZaamNsSjVlRVpSVlVacVUxTjRWbEZWUmxaU2FYaEtVVlZHU2s0d01ITlZWVVpFWkVWS2JsRnBlRXBSVlVacFRrVlZjMU5WUmtaUlZVVnpVbFZHUWxaNWVFcFJWVVpLVFRCUmMxSlZSa0pWTUZWelVsVkdRbFZWUlhOU1ZVWkNWREprVFV4SVRrTlJWVll5VVRGSmMxSlZSa0paTUd0elZsVkdRbFpWVlhOVFZVWkNVMWR3VDB4RlZrSlJWWE13VW1sNFNsRlZaSGxSZVhSSVRFVldRbEZYVGtoTVIwWkNVVmRHU0V4RmJFSlJWV3MxVTNsNFJsRlZSbEJaVTNoU1VWVkdWRTVGVFhOU01FWkVaVVZPUWt4RlZrSlNWVzl6VkZWR1FsUlhaRWxNUlZaQ1VWZHNRMHhGYkVKUlZXeEtURVZzUkUwd1NubFJha1pNVEVWV1FsRldSWE5UVlVaQ1UxZHNSa3hHUmtSTE1FcHpVV2w0VGxGVlJrNU9hMk56VWxWR1FrMXJTWE5UVlVaeFVUSndSRXhGTVVKV1ZXaHpWRU4zZVZGclJrSk5hMHBHVEVWV1FsRldUbmhSYVhoR1VWVkdUbFpEZUVaUlZVWlVUMFZSYzFJd1JrUk1NRTF6VkZWR1FsUllWa2hNUlZaQ1VWWk5NVk5wZUVaUlZVWk1URVZrUWxFelFrTk1SV1JDVVZkVmMxUlZSa0pYUkZKTFRFVldRbEZYWkVOTVJVNUNVbGRvUTB4Rk9VSlNSM1JEVEVWc1FsRlZiSFZSZVhoR1VWVkdjbEZxYkVwTVJWWkNVVlpPZUZGcGVFWlJWVVpNVGxWSmMxUlZSa0pVVTNoSVVWVkdTbUpWU1hOU01FWkVUREJPVjB4Rk1VSlNXRXBEVEVWa1FsRlhWWE5VVlVaQ1YwTjBURXhGVmtKUk1FVnpWRlZHUWxSNWVFUlJWVVpFVEVWc1FsRlZhM2hSYVhoR1VWVkdWbVJyYjNOU1ZVWkNWVE5HUTB4RlZrSlJWWE14VVdsNFRsRlZSazVNUldSQ1VWVnNjRkpwZUVaUlZVWlNTekJWYzFwVlJrWk5WVkZ6VWpCR1FscFRlRTVSVlVaWlpEQkpjMUpWUmtSUlUzaE9VVlZHVUV4RlRrSlJWVTF6VTFWR1FsTllTa1JNUlZaQ1VWaEdRMDVWYTNOU1ZVWkNWVE5HUTB4RlZrSlJWWE14VVdsNFRsRlZSazVNUldSQ1VWVnNkRkZwZUVwUlZXTXpVa040VUZGVlVuSlJhWGhLVVZWR1NrOUZXWE5TVlVaQ1lsVkplRko1ZUVaUlZVWlVZMVZKYzFKVlJrSlVWbEZ6VWpCR1JHUnJUbGRNUlRGQ1ZGaEtRMU5wZUhoUmEwWkNZMVZKTUZKVGVFaFJWVTV4VVdsNFVGRlZSbEJNUld4Q1VWVnJlVkY1ZUVaUlZVWlVUVEJOYzFNd1RrVlVhWGgyVVd0R1FsZEhhRWhNUms1Q1VUQTFRa3hGT1VKUldHUkRURWQwUTFGVlJrNVJVM2hRVVZWR00xRnBlRzVSYTBaQ1UxTjRURkZWUmt4ak1GRnpVekJHUWxONWVGUlJWVEZ6VWxONFRsRlZSazVOUlZGelVsVkdRbFI1ZUVSUlZVWkVUMVZWYzFNd1JrSlhWVTF6VTFWR1FsWjVlRXBSVlVaS1RXdFZjMUpWUmtKYVZGWkdURVZXUWxGV1RrUk1SVlpDVVZaRmMxUXdSa0pWVnpGTVRFVmtSR05yU25OU2ExVnpVbFZHUW1Nd1NYTlJNRVpDVVRKd1MweEZWa0pSVlRGeVUybDRTbEZWUm1wTVJXUkNVVlZrYzFOcGVFNVJWVVpVWVRCdmMxTlZSa1JPTUZGelUxVkdRbE5WVFhOU01FWkNUa1ZKYzFRd1JrUlNRM2hLVVZWR2QxRnFSazVNUlRsQ1VWVTRlVlJUZUZSUlZVNXJVa040U0ZGVlJUQlJhWGhRVVZWV01WRnBlRXBSVlVZeVVYcEdUa3hGT1VKUlZUaDVWRk40VkZGVlJsUlJlWGg0VVd0R1JFNVZTa1JNUmtaQ1VWWkdSRXhGZEVKUlZYTnpUbXRzUWxJeVNrdE1SV1JDVVZSU1EweEZaRUpVVjJoRVRFVXhRbEZWTVV4TVJWWkNVVmhrUTFScGVFaFJWVVpzWTBWM2MxTlZSa1JsYTAxelZGVkdRbFJVU2sxTVJWWkNVVlprVTB4RlZrSlJWemxEWW10M2MxSlZSa0pVTW5SRVRFVjBRbEZWTVhKVGFYaElVVlZPYzFKRGVFcFJWVVpLVjJsNFJsRlZSbTVSYTAxelVsVkdRbHBWVFhOVFZVWkNVMWRzUTB4R1JrSlJNbkJEVDFVd2MxTlZSa0ppUlVsNVZFTjRTbEZWVGtKUlUzaEdVVlZHYmxGcGVFUlJWVTVoVW5sNGFGRlZSbXBNUld4Q1VWVnNNbEo1ZUZKUlZVNXpVVzVrU0V4R1ZrSlJWbU56VTFWR1FsTlZUWE5UTUVaR1ltdEtTMHhGVmtKUlYxWk1URVZzUWxGVmJHaE1SVlpDVVZaV2RWRnBlRXBSVlZaeFVYbDRTbEZWUmtwTU1HTnpVbFZHUWxaNWRFaE1SVlpDVVZkT1NFeEhSa0pSVjBaRlRFVnNRbEZWYTNoVGVYaEdVVlZHVUZsVGVGUlJWVTU1VWtONFVsRlZSbkJSYldoRVRFVnNRbEZYU1RCU1UzaEdVVlZPUWt4Rk9VSlJWVGxDVEVWV1FsSldaM05VVlVaQ1ZGUldSMHhGVmtKUlZURjBVWGw0UmxGVlJsQlpVM2hTVVZWR1VtRXdjM05UTUVaQ1V6TndUVXhGWkVKU1YyaEVURVZrUWxKRlJuUlNVM2hHVVZWR1dFc3dZM05TVlVaQ1dUQnJjMVpWUmtKV1ZWbHpVMVZHUWxOVVpFNU1Sa1pDVVROU1Exb3dTWE5UVlVaQ1dXcFNSa3hGVmtKUldHUkRURVZPUWxFemFFTk1SVEZDVVZVeE5GSkRlRVpSVlVaV1VrTjRSbEZWUmxCYU1IZHpZMVZLUWxFeU5VTlRlWGhJVVZWT1FrMVZNSE5VTUVaQ1ZIcEtUa3hHVGtKUlZrNUVURWN4UTFGVlJuUlJibEpOVEVWV1FsRldUblJVUTNoSVVWVldiMUpFVGtsTVJWWkNVVlpqYzFOVlJrSlRWRTVGVEVWV1FsRldUa1pNUlZaQ1VWWkdSRXhGWkVKUk1taEVaRlZ6YzFKVlJrSlpNR3R6VmxWR1FsWlZWWE5UVlVaQ1UxZHdUMHhGVmtKUlZYTXdVbWw0U0ZGVlpIbFJlWGhRVVZWU1Frc3dZM05TVlVaQ1dUQmpjMWxWUmtKWlZXTnpVMVZHUWxOVWJFeE1SVlpDVVZVNWFFeEdSa0pSVmswd1VYbDRTRkZWVGpSUk1FVnpVakJHUmxSSE1VcE1SVlpDVVZkc1EweEZUa0pSVlUxelZEQkdRbFZUZUZCUlZ6bERUVlZLUkV4RlZrSlJWMnhEVEVWc1FsRlZiRVJNUld4Q1dsaEtRMUY1ZUVaUlZVWXpVV2w0UkZGVlJrUlhRM2hHVVZWR1dGZFRlRVpSVlVab1pHdHJjMU13UmtSaWExSjJVMU40UmxGVlJteFRVM2hLVVZWR1NsbHBlRWhSVld4MVVXbDRUbEZWUms1WmVYaEdVVlZHZGxGdWNFcE1SVlpDVVZaa1FreEZWa0pSVms0MFVrTjRVbEZWUmxaVVUzaFVVVlZHVkUxRldYTlpNRVpDV1hsNFdsRlZWalpTVjNSSVRFVldRbEZXVGtsTVJWWkNVVlpzU2t4SGJFTlJWVVp3VVdsNFZsRlZUakJSTW5oUVRFVTVRbEZWVmtKTVJXUkNVVlprY0ZSNWVFWlJWVloxVVdsNFNGRlZSbXhNUld4Q1VWWm9jVlI1ZUVaUlZteENURVpzUWxKRlJsUk1SVGxDVVZVNGVWUlRlRlJSVlVaVVZYbDRlbEZyUmtKak1FcElURVZXUWxGWGJFTmFRM2hJVVZWamVsSkRlRTVSVlVaT1lWVkpjMUpWUmtKaFZVazFWRU40VkZGVlJsUk5SVmx6V1RCR1FsbDVlRlJSVlRBMVVYbDRTbEZWUmt4TVJXeENVVlZzTmxORGVFWlJWVVpLVEVWV1FsRlZaRUpNUlZaQ1VWVnNUMHhGVmtKUlZrWk9URVZzUWxGVmMzTlJNRVpFVGpCSmMxUlZSa0pVVkdoUFRFVldRbEZXUmtsTVJWWkNVVlU0ZWxScGVFaFJWVTU1VVdwb1QweEZWa0pSVlRBMVUybDRXRkZWUmxoaWExRnpWMVZHUWxkWGJFOU1SV1JDVVhwa1ExSkRlRVpSVlVac1VsTjRhRkZWUm14U1EzaEdVVlZHVGxGNWVGcFJWMmhHVlVONFJGRlZSa1JpYTBselUxVkdSR0pGVGxKTVJWWkNVVmRWTVZORGVGSlJWVVpVVDFWSmMxTlZSa1JqUlVselZGVkdRbFJZVGt4TVJWWkNVVlpyZGxGcGVFWlJWVVpzVVhsNFNsRlZSa3BWZVhoR1VWVkdkbEZ0Y0V0TVJWWkNVVlV4Y2xOcGVGUlJWVTB6VVROYVRreEZiRUpSVjFGNVZHbDRTRkZWVGtKUlUzaEdVVlZHVms1VlNYTldWVVpDVmxSV1NFeEdSa0pSVms1UlRFVnNRbEV6Y0VOTVJURkNVVlpHTkZKRGVGUlJWVVpVVlZONFVsRlZSa1pSVTNoS1VWVkdhbG93VVhOU1ZVWkdUVEJKZDFOVGVFWlJWVVpVVEVWc1FsRlZiRTFNUld4Q1VUSTFRMlJyV1hOVVZVWkNWRmQwU0V4RmRFSlJWWFJ2VkZONFJsRlZSbEpOYTNkellWVktRbEZYYkVOTVJsWkNVVlpXZDFOVGVGSlJWVVpVWTJ0SmMxTlZSa1JpYTFJelUybDRSbEZWUmxCU2FYaEtVVlZHU21SRmIzTlRNRVpHV20xRmMxSlZSa0prTUVwRVRFVldRbEZXVlhkVFUzaFNVVmhrUlU5VlRsQk1SVTVDVVZSYVEyUkZTWE5TTUVaSVRqQkpjMVJWUmtKVVZFNU1URVZXUWxGV1ZqVlVRM2hHVVZWR2JsRnVjRTFNUmtaQ1VYcEdRMW93VVhOU1Zsb3dVa1ZuYzFVd1JrSmFNRTVDVEVWV1FsRldWWGhSZVhoR1VWVkdUazVGZDNOU1ZVWkNWbE40VGxGVlRUTlNRM2hPVVZWR1VrMVZNSE5WTUVaQ1ZURkZjMVZWUmtKU1ZVVnpVakJHUWxVd05ITlVWVVpDVWxWRmMxSXdSa0pXV0U1RlRFVldRbEl6YUVSTVJXUkNVVlZzY2xOcGVFNVJWVVpDVVZONFJsRlZWa0pNUm14Q1VrVkdjMVJUZUVaUlZVWlNXakJuYzFkVlJrSlhWRVpJVEVWa1FsSXphRU5NUlRGQ1VWVXhWVXhGVmtKUlZrNUVURVpPUWxGV1RrUk1SMnhEVVZWR2NGRnJUWE5TVlVZd1VtNUNRMHhGYkVKak1GbHlVWGw0VGxGVlJrNU1SV1JDVVhwR1JreEZiRUpSVld4SVRFVldRbEZXYXpSUmVYaEdVVlZGY2xGdVdrVk1SV1JDVVhwT1JHVlZNSE5TVlVaQ1dYbDRSbEZWVG10UmVYaElVVlZHYkV4RlZrSlJNalZEVEVWMFFsRlZPVEpVVTNoR1VWVkdVRlpUZUZwUlZVWmFURVZPUWxFelVrTk9hM2R6VTFWR1RsRlRlRXBSVlhoMFVXNWFUa3hGVmtKUlZUZzBVV2w0YWxGVlRsRmtWWE56VTFWR1JGcHJUWE5TVlVaQ1dYcE9Ta3hGVmtKUlZtUnpVa040U0ZGVlRqWlJhbEpOVEVWV1FsRldSblZUZVhoWVVWVkdXRlZUZUdoUlZVWm9ZV3ROYzFKVlJrSlVWRkpOVEVWMFFsSllRa05NUld4Q1VWZFpkbFJEZUVoUlZVWjJVV3hSYzFKVlJrSlVWazF6VWpCR1FsWXdVWE5WVlVaQ1ZsZDBUa3hGWkVKUlYwVnpVVEJHUmt3d1VYTlNNRVpDVTFWUmMxSlZSa0paZVhoR1VWVkdTRXhGVGtKUk1uQkRURVV4UWxGWVRrTk1SV3hDVVZkYWIxUlRlRWhSVlU1SlZrTjRSbEZWUms1VmVYaElVVlZHV0ZKRGVGQlJWVVpVWVZVd2MxSlZSa1JOVlVwdlZGTjRSbEZWUmxwUFJVMXpVbFZHUWtzd1NqSlNRM2hHVVZWR1VGVjVlRWhSVlZZd1VrTjRVRkZWVmt0UlUzaEdVVlZHV2s5RlRYTlNWVVpDU3pCS01sSkRlRVpSVlVaUVZYbDRURlpVU2tOa1JWSnlWRk40UkZGVlJqRlJia3BMVEVWV1FsRldWVEJUVTNoR1VWVkdibEZxVmsxTVJWWkNVVlpHZWxSVGVGcFJWV1EyVWtoU1RreEZWa0pSVmtZeFVYbDRhRkZWUm1oalZXOXpVbFZHUWxvd1NURlVRM2hHVVZWR1VtTXdNSE5YVlVaTVlXdFNkMVI1ZUZCUlZVWlFUV3N3YzFVd1JrSlZNVTF6WXpCS1FsRllUa05TZVhoR1VWVkdjRkZ0VVhOU01FWkVaR3RSYzFSVlJrSlVWM1JEVEVWV1FsRldSVE5VUTNoR1VWVkdVbVJWTUhOWk1FWkNXWGw0VkZGVlRuZFJlWGhJVVZWR1NtTnJPSE5VTUVaQ1ZIcEtUa3hHVGtKUlZrMTVVV2w0YWxGVlJYZFJhWGhRVVZWR1YxZERlRVpSVldSdlVUQTBjMUpWUmtKWFYyaExURWRHUWxGWFJucFRhWGhHVVZWR1RtUkZaM05XTUVaQ1ZsTjRTRkZWUmxCYU1HZHpVbFZHUWxkWFZYTmhWVXBDVWxST1JVeEZaRUpSVlRFd1UybDRSbEZWUmxaTVJVNUNWVEp3UTJGRlVYTlNWVVpDVlZoV1JFeEhSa0pSVjBaNFUybDRSbEZWUm01UmFsWk5URVZXUWxGV1JucFVVM2hhVVZWTk0xRjVlRTVSVlVaT1VubDRSbEZWUmxaTVJXeENVVlZzZDFGcGVFcFJWVTUzVVcwNVEweEZWa0pSVmtaeFVXbDRTbEZWUmtwVFUzaElVVlZPWVU0d2EzTlNWVVpDWkRCS1JFeEZWa0pSVmxZMVUybDRURkY2WkV0TlZVNHlWSGw0VUZGVlJsQmtNRGh6VFVWS1FsRXdaM05STUVaQ1VUQk5jMUpWUmtKVVZVMXpVMVZHUWxVd1VYTlNWVVpFV1dsNFRsRlZSazVTVTNoR1VWVkdkRkZwZUVSUlZVMHhVVzVhVDB4R2JFSlJWbXg2VW5sNFJsRlZSbEJpYTFWelVqQkdSRnBwZUZCUlZVWlNVVk40U0ZGVlRrdE1SWFJDVVZWMGVGUkRlRkpSVlU1RlRFVTVRbEZWT1hOVFEzaEdVVlZHVWt4RlpFSlJWWE56VXpCR1JHVkZTWE5UTUVaQ1V6SndTa3hGT1VKUk1IZHpVekJHUWxNeU1VcE1SVEZDVWpCUmMxUXdSa0phTUVselZGVkdRbFpGV1hOU1ZVWkNXakJLUWt4RlZrSlJWa1owVTBONFRGRlZSa3hSZVhoV1VWVkdWbU5GWjNOU01FWkdaRVZSYzFRd1JrSlVNRVZ6VWpCR1JsZElVa2hNUjA1Q1VWZE9lbEo1ZUVaUlZVWlFZbXRWYzFJd1JrUmhhMGx6VkRCR1FsVlZSWE5TTUVaRVUybDRURkZWUmt4alZYZHpWVlZHUkZKRGVGQlJWVVp3VVdsNFVGRlZSbGRpUldkelVsVkdSRmREZUV4UlZVWk1ZMVZuYzFRd1JrUlNRM2hRVVZWR2NGRnBlRkJSVlVaWFkydG5jMUpWUmtKaFZVbHpVekJHUWxRelJrbE1SVGxDVVZVNWVWTkRlRWhSVlUxNFVYbDRURkZWUmt4aGEydHpWREJHUkZSRGVFeFJWVVpNWWxWcmMxUlZSa1JTUTNoUVVWVkdVR0ZWWjNOVE1FWkNVekJqYzFSVlJrSlVXRkpKVEVWa1FsSlVSa05NUlRsQ1VWVTVRa3hGYkVKVU1Gb3hVME40UmxGVlJsaE1SVTVDVVZWT01sTkRlRVpSVlVaUVpEQm5jMU5WUmtaamEwcENURVZzUWxGV1JqUlRRM2hLVVZWR1ZtUXdaM05TTUVaQ1ZWVkZjMUl3UmtKVU0yaEpURVZrUWxGV1ZrSk1SV1JDVWxkb1JXVlZaM05TVlVaQ1RtdEpjMUV3UmtSTU1FcEVURVprUWxGV1kzTlNWVVpFVjBSa1RVeEZkRUpSVlRFMlVYbDRVRkZWVGs5a1ZUaHpWbFZHUWxZeFdYTlNWVVpFVjBaamMxVXdSa0pWZVhoR1VWVk9WVkY1ZUZoUlZVWmFWR2w0U0ZGWGRFTldRM2hPVVZWR1RsUjVlRlpSVlVZelVXdE5jMWRWUmtSaGEwNTVWSGw0YWxGVlRrcGhWVzl6VlZWR1JGRlViRXBNUlhSQ1VWVjBkRlI1ZUdoUlZVWnNURVZXUWxFelFrTmlhemh6VXpCR1FsTXlPVkJNU0d4RFVWVkdlbEZ1Y0ZGTVJWWkNVbnBPUTJOVlNYTlRNRVpDVXpOR1VFeEhWa0pSVjJ4RFRFVnNRbEZWYkVSTVJrWkNVVlpPUkV4RlpFSlJWa1l5VkhsNFRGRlZSa3hrTURoelpEQktRbEZVUWtOU1EzaElVVlZ6ZUZKWVdsQk1SWFJDVVZWME5WUjVlSFJSYTBaQ1kxVkpjMU5WUmtKVFZHeEZURVZzUWxOVWJFTk5NSE56VXpCR1FsTjZRbEJNUkVwRFVWVkdNMUZwT1ZGTVJWWkNVWHBrUTJOVlNYTlRNRVpDVTNwS1VFeEhSa0pVVmxKRVRFZGtSRkZWVmtwT1ZUaHpVekJHUWxONldsQk1SbVJDVVRCM2MxUlZSa0pVVkZaUFRFVldRbEZYUlhOU01FWldZbXRKYzFRd1JsRlJWM0JEVEVWMFFsRlZjelJVZVhod1VXdEdRbUZWU205VVEzaFNVVlZHVWt4RlRrSlJWVTV1VWtONFJsRlZSa2hoVld0elV6QkdSRTlWU1hOVVZVWkNWRlZOYzFKVlJrSlVNbWhSVEVWMFFsRlZkSEJWUTNkM1VXdEdRazFGU2tkTVJWWkNVVlZrY1ZOVGVGSlJWVTV6VVRJMVNreEZiRUpSVmxKNFZWTjRTbEZWVGtKaFJrRnpVekJHUWxNeWRGRk1TR1JEVVZWR00xRnVVa1pNUld4Q1VWVnNkbEpUZUVaUlZVWk9Va040U0ZGVlRqSlJlbXhQVEVWV1FsRldaR3BNUlhSQ1VWVjBjRlJwZUU1UlZXUnhVV2s1VDB4RlZrSlZWbWgzVVdsNGJsRXdSa1pUVTNoS1VWVkdURko1ZUV4UlZVWk1ZbFpCYzFwVlJrSmFWM2hFVEVSQ1ExRlZSWGRSYVhoMFVXdEdRbUl3U25GVWFYaFFVVlZHVWt4RlRrSlJlazVHVVZONFRGRlZSa3hQUlRoellWVktRbEZYTVVOTVJXeENVVlZzZFZKVGVFcFJWVlV4VVdsNFRsRlZSazVsVlZWelVsVkdRbUV3U25OVmFYaFFVVlZHVUdKV1NYTmFWVVpDV2xoS1VVeEZNVUpSVlRBMFZIbDRlbEZyUmtST1ZVcDFWVk40U2xGVlJuZFJibXhTVEVWa1FsRXdSa0pNUlZaQ1VWZGtRMlJGZDNOVlZVWkNWVk40UkZGVlJrUmFNRkZ6VWxWR1FsSXpaRXBNUld4Q1VWVXhNRlZEZUV4UlZVWk1UMFU0YzJGVlNrSlJWMnhEWWtWVmMxTlZSa0pUVkVKR1RFVldRbEZWWkRSVFUzaE1VVlJDUTAwd1ZuRlRRM2g2VVd0R1FtTXdTakZSYVhoR1VWVkdUbU5WVVhOU1ZVWkNWbGN4UzB4RlpFSldNbmhFVEVWa1FsVkZSVEZVYVhoTVVWVkdUR1JXUVhObFZVcENVVEI0TWxWRGVFeFJWVVpNVDBVNGMyRlZTa0pSVjJ4RFlrVlZjMU5WUmtKVFdHaExURVZXUWxGVk1YaFNRM2hJVVZVd01WRnJSWE5TVlVaQ1ZWTjBURXhHYkVKUlYwNDBWVU40VEZGVlJreGxWa0Z6VmxWR1FsWlZOSE5hVlVaQ1dsTTVUMHhGWkVKUk0wSkZURVU1UWxKVmIzTlVWVVpDVkZod1JVeEZWa0pSV0U1RFRFZHNRMUZWUmxWbFZWRnpVbFZHUW1Jd1NuUlNhWGhVVVZWR1dFeEZkRUpSVlhSMVVtbDRSbEZWVG5GU1NFNVFURVZXUWxGWFJYaFZRM2hNVVZWR1RFMXNRWE5qTUVwQ1VWaE9RMlJyT0hOU1ZVWkNWRmh3UlV4RlZrSlJWWE0wVW5sNFVsRlZUakJSZW14SFRFVnNRbEZYV1hKVlUzaElVVlZPUW1WR1NYTlVNRVpDVkRCemMxcFZSa0phV0d4RFRFVjBRbEZWZERWVlEzaFdVVlZHV0dOck9ITlNWVVpDVkZoT1VFeEZaRUpOYTBwM1VrUmtVVXhFV2tOUlZVVXlVVzVXUTB4RlZrSlJWVEUyVWtONFJsRlZSa3hoVmsxelVqQkdSR05GVFhOVVZVWkNWSGw0UkZGVlZrbE1NVUZ6VkZWR1JGTlRlRkJSVlVaUVVubDRURkZWUmt4amEwMXpVMVZHUm1GRlNuSlJlWGhLVVZWR1NtTXdZM05TTUVaRVVWTjRUbEZWUms1TlJXOXpVbFZHUWxaNlpGRk1SWFJDVVZWMGRsRnBlRWhSVlU0d1VXNUNRMHhGZEVKUlZYUjVVWGw0U0ZGVlJsQmtNR3R6VWxWR1JGZHROVWhNUlhSQ1VWVnpORlZEZUd4UlZVWnNUVlU0YzFKVlJrSlVXR3hRVEVWc1FsSlViRU5TVTNocVVWVkdha3hGVmtKUk1sSkVURVpzUWxGV2EzTlNNRVpzWTBWS2RWVlRkM2RSYTBaQ1RVVktNVkZwZUVoUlZVNHdVV2w0VUZGVlJsQmpSVWx6VXpCR1FsTjZhRkJNUjNSRFVWVkdkbEZxYkZCTVJYUkNVVlZ6TkZSNWVIQlJhMFpDWVZWS01GSlRlRXBSVlVaS1kwVnZjMU5WUmtSa1JWSXpWRk40UmxGVk9WTk1NRFJ6WVRCS1FsSlZhM05VVlVaQ1ZGYzVVa3hGVmtKUlZtdDJWV2w0VUZGVlJsQmlWa2x6V2xWR1FscFlTbEZNUlRGQ1YxaG9SRXhGWkVKWFJYUndWVk40UmxGVlJsWmFRM2hzVVZoU1RGUkRlR3BSV0ZaTVZHMU5jMUpWUmtKV1dFSkRURVprUWxKWFVUTlVlWGhNVVZWR2FreEdaRUpSVld0elVsVkdSR0pGU2tKTVJYUkNVVlYwTVZWRGVEVlJhMFpHVkVoYVVVeEZkRUpSVlhSeVZVTjRNMUZyUmtKTlJVbHpVMVZHUWxOWVdrWk1SV3hDVTNrNVEwMHdjM05UTUVaQ1V6SXhVVXhIVmtKUlYxWnpVWGwzZDFGclJrSk5SVWx6V1ZWR1Fsa3ljRTlNUlRsQ1VWWkZjMUV3UmtSalJWVnpWRlZHUWxSWGRGSk1SVlpDVVZaR2MxVlRlRXhSVlVaTVlsWkZjMVl3UmtaWmEwMXpVbFZHUWxaNWVFcFJWVTVYWWtaTmMxUXdSa0pVTWpGVVRFYzVRMUZWUm5aUmEyZHpWRlZHUkZsNWVIUlJhMFpDWVd0T2IxVjVlRkJSVlVaUVlqRk5jMk13U2tKUk1sSjNWWGw0VUZGVlJsQmlNVTF6WXpCS1FsRllUa05UYVhoSVVWVk5NMUZwZUVwUlZXUlRURVZzUWxGVmMzTlVWVVpDVkZjMVEweEZkRUpSVlhSNFVXbDRSbEZWYkdGalJrVnpVekJHUWxNelZsSk1SMVpDVVZkV05GRnBlRVpSVlVaSVlsVkpjMUpWUmtKVVZ6VkRURVYwUWxWWWNFUmlSa0Z6WVZWT1FsRlhiRVJrVlVselVsVkdRbFJZUmtWTVJXUkNVVEkxUkV4Rk1VSlJWVEYyVTJsNFJsRlZSbHBqUlc5elVsVkdRbFZYT1V0TVJsWkNVWHBHUTB4Rk9VSlJXRVpEVEVWc1FsRlhVa0pNUlRsQ1VUQm9jMVZEZUVaUlZVNTZVV2w0Y0ZGclJrSmFSM1JSVEVWV1FsRXdjRUpNUlZaQ1VUSnNRMHhIYkVOUlZVWlZaV3N3YzFKVlJrSmlNRXBDVEVWV1FsRlZkRXhNUnpGRFVWVkdibEZxYkVSTVJWWkNWVlJrUldFd1NYTmtNRXBDVVZoa1EyTXdZM05TVlVaQ1ZETmtTVXhGVmtKUlZYUk1URVZXUWxGWFJrOU1SV1JDVVhwa1JFeEZPVUpSVlRsT1RFVldRbEZXWXpOVFEzaEdVVlZHVUdRd1ozTlNNRVpTVGpCSk5WUnBlSFJSTUVaQ1lsVk9lbEo1ZUVaUlZVWlFUVlZKYzFJd1JrUmtSVTF6VkZWR1FsUlljRVJNUlZaQ1VWVTVOVkY1ZUVaUlZVWlNaV3ROYzFNd1JrUmFhbWhOVEVWV1FsRldiSGxUYVhoR1VWVkdVbU5WYjNOV01FWkNXVlpaYzFKVlJrUmhhMDUyVWtONFJsRlZSbnBSZVhoMFVXdEdRbHBFUmtSTVJWWkNVVlJLUTFGVGVFWlJWVVphVVZONFJsRlZSbFpOUlUxeldUQkdSRXd3VlhOVU1FWkNWREJGYzFKVlJrSmFNRXBDVEVWV1FsRlhUbmxUZVhoR1VWVkdVR0pyVlhOU01FWkNWVmN4Umt4RlZrSldXR2hGWkVWamMyRlZUa0pSVjJ4RVl6QmpjMUpWUmtKVWVrWkRURVZrUWxFelFrUk1Sa1pDVVZoa1EwOVZXWE5UVlVaQ1kwVkpORkpwZUVaUlZVWlNZekJ2YzFWVlJrUlZhWGhRVVZWV1MweEZNVUpSVlRCMlZFTjRSbEZWUmxCbFZVMXpVbFZHUWxWWWNFUk1SWFJDVVRKWk5GUkRlRVpSVlVaYVkydHZjMUpWUmtKVldFWkxURVpXUWxKNlJrTk1SVGxDVW0wNVExRlRlRWhSVlVab1VWTjRSbEZWUmxaTmEwMXpXVlZHUkdSclRubFNRM2hHVVZWR2NGRnVSa1ZNUjBaQ1VUQmFNRk41ZUVaUlZVWlFZbXRWYzFJd1JrNVBWVXAxVVhsNGFGRlZUa3BTZVhoTVVWVkdURTFHUlhOTlJVcENVakIzZUZWVGVFeFJWVVpNVDBaQmMyRlZTa0paTVZKeFZWTjNkMUZyUmtoVFZXTnpVekJHUWxONlNsSk1SbXhDVVRCRk0xRnBlSEJSYTBaQ1lWVktiMVJEZUZKUlZVWlNURVZPUWxGVlRUUlVVM2hHVVZWR1NrNHdTWE5UTUVaRVREQkpjMUl3UmtKVFV6bFFURVYwUWxGVmRIUlZRM2hzVVZWR2JGTnBlRWhSVlVaS1RFVk9RbEV6YUVOTVJURkNVVlV3TVZOVGVFWlJWVVpTWW10amMxTXdSa0pUZVhSUVRFWldRbEV4YjNaVWVYaE1VVlZHVEVzd09ITlNNRVpFVlVNNVVFeEZkRUpSVlhSMlZIbDRlbEZyUmtSVWJrSlFURVYwUWxGVmRIWlVlWGgyVVd0R1FtTXdTWE5UVlVaQ1UxaHdSVXhGZEVKU1Z6VkVUVEJ6YzFNd1JrSlRNamxRVEVjNVExRlZSblpSYm1oRlRFVnNRbEZWYkhSU1UzaEdVVlZHU0U1VmEzTlVWVVpRVGxWT01GSjVkM2xSYTBaS1UxVmpjMU13UmtKVE1qbFFURWM1UTFGVlJuWlJibEpNVEVaR1FsRldSWE5STUVaQ1VUSmtSVXhGVmtKUlZXUndVMU40U2xGVlJrNU1NRGh6VXpCR1FsTjVkRkJNUldSQ1VWVjBjVk5UZUVoUlZVNTVVa1JzU0V4RmRFSlJWWFIyVkhsNE5WRnJSa0pqTUVvMlZVTjRSbEZWVlhaUmJYUkRURWM1UTFGVlpFcFNlWGhNVVZWR1RFNXNSWE5oVlVwQ1VsWlNiMVZwZUhwUmEwWkVaVlZPYzFGcGVFcFJWVVp4VVROR1EweEZkRUpSVlhRelZIbDNkMUZyUmtSVVNHaFFURVYwUWxGVmRETlVlWGQzVVd0R1JGUklhRkJNUlhSQ1VWVjBNMVI1ZHpKUmEwWkNUVVZKTTFWRGVFaFJWa1l5VVRKMFEweElaRU5SVlhSQ1VWTjROVkZyUmtKbFZVb3hVV2w0UmxGVlJrNWtWVEJ6VWxWR1FsTXphRWxNUldSQ1VYcFdRMlF3WjNOVFZVWkNWVmhvU1V4RlpFSlJNVXAxVW5sNFRGRlZSa3hQUmtWelkxVktRbEZZUmtOTlZrRnpVbFZHUWxSVGRFWk1SV1JDVWpOb1JHUkZZM05qVlVwQ1VWaEdRMlJWU1hOU1ZVWkNWRk4wUmt4RlZrSlJWVGg0VVdsNFJsRlZSbFppVlc5elVqQkdSR1ZGVFhOVVZVWkNWRmN4UlV4RlZrSlJWVGgyVlZONFRGRlZSa3hOYkVWelYxVkdSRmRxVGtOTVJWWkNVVlU0Y2xGcGVFWlJWVVpNVDFWSmMwMUZTa0pSVkVKRFRqQTBjMUpWUmtKVVdFWkZURVZrUWxFeWVFVk1Sa1pDVVZkRk5WSnBlRXBSVlVaVlkxWkZjMUpWUmtKaU1FbHpVVEJHUkdORlNYTlVWVVpDVkZka1JFeEZWa0pSVm14RlRFVldRbEZWZEVaTVJFSkRVVlZGZDFGcWJFeE1SVlpDVVZVNGVGRnBlRWhSVlZZMFVrTjRVbEZWUm5KUmFteEhURVZzUWxGWFVuaFZlWGhHVVZWT1FreEZPVUpXVlhCdlZXbDRURkZWUmt4aVZUaHpXVlZHTkZadVpFTk1SVlpDWkRGYVZXSnJPSE5UTUVaQ1V6SXhVRXhIUmtKUk1VbHpWRlZHUWxscVdrUk1SVlpDVVRCR2IxVnBlRXhSVlVaTVRrVkpjMW93U2tKUlYyUkRZakEwYzFJd1JraGphMHB2VlVONFRGRlZSa3hhTUdkeldWVkdRbGxYWkVwTVJWWkNVVlV4YmxGNWVFaFJWV014VVcxb1UweEZkRUpSVlhSMFZIbDRhbEZWUm5SUmVYaEdVVlZHZDFGdE5WQk1SWFJDVVZWMGRGUjVlR3BSVldSeFVUTlNVRXhJUmtOUlZVWjRVVzVXUTB4RlZrSlJWVEJ5VWxONFNGRlZaREpSYVhoSVVWaFNXR0ZWVFhOU1ZVWjZWbnBrUTJKclkzTlRNRVpDVXpJeFVFeEhSa0pSTUhkelZEQkdSbE5wZUU1UlZVWk9Ua1ZOYzFKVlJrSlVlVGxTVEVWMFFsRlZjM2xWVTNoYVVWVnNZVlI1ZUVaUlZVWllVME40UmxGVlJreE9NRWx6WkRCS1FsRllaRU5OVlZWelUxVkdRbE5ZUWt0TVJXUkNVVEo0UlV4R1JrSlJWMnhEWld0TmMxTlZSa0paYmxaVVRFVldRbEZZWkVOTVJVNUNVVE5vUTB4Rk1VSlJWVEUyVkZONFJsRlZSbFpqTURCelVsVkdRbE13YTNOaVZVcENVVmN4UTFKRGVFaFJWVlkwVVRKNFUweEZkRUpSVlhSMFZIbDRhRkZYYUZsa1ZVbHpVakJHYmxkR1NuVlVlWGhNVVZWR1RHSlZPSE5aVlVaRVpXdEtkVlI1ZUV4UlZVWk1ZVEZKYzFJd1JrWlNSV2R6VWxWR1FsTXdjM05PUlVwQ1VWUlNRMkZyZDNOU1ZVWkNWSHBHUTB4RlpFSlNWRlpFWld0VmMxTXdSa0pUTWpGUVRFZE9RbEZYTVVSTVJXUkNVVmhDUTJKck9ITlRNRVpDVXpJeFVFeEhUa0pWVjNCRVpFVTRjMXBWUmtKYVdGWkRURVZXUWxGVk1UVlVlWGhJVVZWT2NWRnBlRXBSVlVaS1pEQkpjMUl3UmtKak1FbHpVbFZHUmsxVlNYTlZWVVpDV1ZSR1ZFeEZiRUpSVmxJMVVYbDRSbEZWUm5aUmFYaEVVVlZPZDFGcGVFNVJWVVpPVFd4QmMxSlZSa0pVZVRsU1RFVjBRbEZWYzNsVlUzaGFVVlZPWVdKRk1ITlNWVVpDVmxoT1RreEZWa0pSVlhSS1RFY3hRMUZWUm5SUmFUbFJURVZrUWxFelFrUk5iRUZ6VWxWR1FsTXdPSE5oVlVwQ1VWZHNRMlJHU1hOVE1FWkNVekk1UTB4RlpFSlJWVGsxVkhsNFJsRlZSbFpqUlhkelVsVkdRbFZZVmt0TVIwWkNVWGs1UkdGRk9ITlRNRVpDVXpOc1VFeEhNVU5SVlVaMFVXcFdURXhGYkVKUlZXdzJVWGw0U2xGVlRUTlJia0pEVEVWMFFsRlZkRFZVZVhoMFVXdEdRbUpWU1ROU1EzaEtVVlZHU21WRmIzTlNWVVpDVkZoc1VFeEZiRUpVVjFGelUxVkdRbU5GU25kVVEzaEdVVlZHVW1Nd2IzTlZNRVY2VjFacmMxSXdSVEJYVjNoRFREQTBjMU13UmtKVE1qRlFURWM1UTFGVlRUQlJibWhSVEVWc1FsRlRPVU5qVlVselV6QkdRbE42UWxCTVNHUkRVVlZPVFUxVk9ITlRNRVpDVTNwQ1VFeElUa05SVlVZelVXbDRTbEZWUmtwTU1GRnpVekJHUm1OclRYcFRlWGhNVVZWR1RFMUZPSE5qTUVwQ1VWaE9RMDlWVVhOVFZVWkNVMWhvUzB4RlZrSlJWVEY0VWtONFRGRlZkRFpSZWxKT1RFVmtRbEZZVGtOTVJXUkNVak53UTJOc1NYTlRNRVpDVXpOV1UweElSa05SVlVZeFVXdFpjMU5WUmtST01FcDVWV2w0VEZGVlJreGpWVGh6V2xWR1FtRlZTbmxVZVhoTVVWVkdUR1F4U1hOaE1FcENXakJLZFZGNlRsTk1SMDVDVVZkT01WRnBlRVpSVlVaT1pWVTRjMUl3UmtaaFJVbHpWREJHUlZGVVpGRk1SWFJDVVZWek5GVkRlR3hSVlVac1RWVTRjMUpWUmtKVVdHeFFURVZrUWxFeU5VTk9NVUZ6VXpCR1FsTXpiRk5NUjFaQ1V6Sm9RMDVXU1hOa1ZVcENVVEJzU0V4RmRFSlJWWFIwVkhsNGFGRlhOV2xoTUVselVsVkdkRmxyYUhWVWVYaE1VVlZHVEdKVk9ITlpWVVpFWld0SmMxWlZSa2hXVnpWUVRFVjBRbEZWZEhoVWVYaHNVVlZXYlV4Rk1VSlJWVGg2VWxONFNsRlZiRkZNUlRGQ1VWVXdNVk5wZUVaUlZVWlVVbE40VEZGVlJreE5Sa2x6V2pCS1FsUXpRa05NUlRsQ1UwZE5jMVJWUmtKV2FsWlRURVpPUWxFd01VSk1SV1JDVWxWYVJreEZkRUpSVlhReFZXbDRkbEZyUmtaaGEwcENURVJDUTFGVlRrcE1SVGxDWkcxT01WRnBlRVpSV0ZacVdtNWFVMHhGZEVKUlZYUjBWSGw0YUZGVlZuRlJibVJGVEVkc1ExRlZUa3BNUlRsQ1RUSk9jbEZwZUVaUlZFcHFWbXBPVTB4RmRFSlJWWFIwVkhsNGFGRlhkRU5oYTBvd1ZIbDRibEZyUmtaVlZXTnpVekJHUWxNeU9WQk1TRVpEVVZWT1RXTkZPSE5UTUVaQ1UzcFNVMHhFU2tOUlZWWlZURVZzUWxGVmJFUk1SV1JDVVZkVmMxSlZSa1JpYTBselZGVkdRbFJWVFhOU1ZVWkNZakJKTlZWcGVFeFJWVVpNWlZVNGMySlZTa0pSZVRsRFRFVnNRbEV3YkhaU1EzaEdVVlZHYkU0eFNYTlRNRVpDVTNwYVUweEhSa0pSVjBaRVRFVmtRbEY2WkVOU1EzaEdVVlZPUWs0eFNYTlRNRVpDVXpJeFNreEZPVUpSVlRoNVUybDRTRkZWWkdGUFZrbHpVekJHUWxONWRGTk1SMVpDVWpKSmMxUlZSa0pVTTBwS1RFVmtRbFJWWjNOVVZVWkpVVmN4U2t4RlpFSlJWMVZ6VWxWR1JscHFaRk5NUlhSQ1VWVnpjbFZwZUd4UlZVNUVZMnRyYzFKVlJrWlViVEZLVEVWc1FtTnRXbXBNUlZaQ1l6SmFVMDR4U1hOVE1FWkNVekl4VUV4SFZrSlJNVUoxVkhsNFRGRlZSa3hpVlRoeldWVkdNbHByYzNOU1ZVWXhXbXhXZFZSNWVFeFJWVVpNWWxVNGMxbFZSa1JsYTBwMVZIbDRURkZWUmt4YU1VMXpXVlZHUWxsVldYTlRWVVpHWkVWSk5WVnBlRXhSVlVaTVlWWk5jMVZWUmtKVlZXZHpVMVZHU0dOclNuRlZlWGhzVVZWT1NsSjVlRXhSVlVaTVpWVTRjMkpWU2tKUldFWkRURVZzUWxGVmF6VlNRM2hLVVZWTk5WRnFUa3hNUlhSQ1VWVjBkRlI1ZUdwUlZVWjBVWGw0UmxGVlJuZFJiVFZRVEVWMFFsRlZkSFJVZVhob1VWZHNRMDR3U25wU1EzaDRVV3RHUkZOVGVGQlJWVVpRWld4SmMxTXdSa0pUTW5SVVRFaEdRMUZYZEVOaFJVcDVWWGw0ZUZGclJrUlRVM2hRVVZWR1VGSjVlRXhSVlVaTVkxVTRjMXBWUmxSaFJVbzBWSGw0YUZGVlJtaE9SVGh6VWpCR1JGWkRlRkJSVlVaUVRFVldRbFpXWnpGVWVYaFFVVlZHVUU1Rk9ITlZWVVpFV2pCTk5WVkRlRXBSVlVWMlVXNUdRMHhGZEVKUlZYTjNWSGw0TVZGclJrUlVSRVpRVEVWMFFsRlZjM2RVZVhoNlVXdEdRbU13U2pWU1EzaE1VVlZHVUV4RmJFSlNNbmhFWW14TmMxTXdSa0pUZWtKUVRFaE9RMUZWUm5wUmFsWk1URVpHUWxGV1JYTlJNRVpDVVRKa1JVeEZWa0pSVldRelUxTjRTbEZWUms1a1JrRnpVekJHUWxNeU9WUk1TRVpEVVZWR2VGRnFiRVJNUlZaQ1VWVmtNRlZEZUV4UlZVWk1ZekZCYzFJd1JrSlRXR2hLVEVWc1FsRXlOVWRQVldOelV6QkdRbE42UWxCTVJFcERVVlZHTTFGcE9WRk1SV1JDVWxkd1JHTlZTWE5UTUVaQ1UzbDBVMHhIVmtKV01WSnpWWGw0VWxGVlJsSk9SVGh6VTFWR1dGVnFWbEJNUjBaQ1VWZEZNRlI1ZUV4UlZUbHhVV3hKYzFKVlJrSmhNRWx6VmpCR1FsTlRlRVpSZVRsMlVXNVNRMHhGTVVKak1FNU9ZakJWYzFKVlJrSmlWVWx6VVRCR1FsRjZWazlNUlZaQ1VWWk5lRkpUZUVwUlZXeFhURVprUWxGWGNFTlJVM2hHVVZWR1VtUldUWE5VVlVaQ1kxVktNbFY1ZUVaUlZVWlNUV3hCYzFrd1JrUmlhMDF6VmxWR1FsWjZUbEZNUlZaQ1VWWkZlVlZEZUZwUlZVNXJaVVpKYzFRd1JrSlVNMFpXVEVVNVFsRlZPWGxXVTNoUVVWVkdVR05XVlhOVU1FWkNWSGw0U0ZGVlJrcGxSazF6VWpCR1FsWlRlRVJSVlVaR1VtbDRWRkZWUmxSTmJFMXpVakJHUkdORlVrSk1SVlpDVVZVeGNWRjVlR3hSVlVac1pVWkZjMUpWUmtKVldFSkVURVZzUWxGVmN6UlNlWGhPVVZVNWRWRjVlRVJSVlU1SlRtczBjMU13UmtKVVUzaFNVVlZPVDAweFZYTlRWVVpDVTNwU1NreEdUa0pSTUhoeVZGTjRWbEZWUmxoTVJURkNVVEZuZGxGNWVGaFJWVVphVEVWa1FsWldiek5WUTNocVVWVk9NVkY1ZUhSUmEwWkNaVVZLUmt4RlZrSlJWa1Y1VlhsNGFsRlZUbTFOVmsxelV6QkdRbE13VVhOU1ZVWkNWVmhDUkV4RmRFSlJWVGwyVVhsNFJsRlZSbEpOYkUxelYxVkdRbGRZU2twTVJYUkNVVlYwZVZONWVGSlJWV1I1VWtWbmMxVXdSa0pWZWtwVVRFVmtRbEV3ZUVKTVJWWkNVVlV4Y1ZGNWVHeFJWVVpzWlVaRmMxSlZSa0pWV0VKRVRFVnNRbEZWY3pSU2VYaE1VVlJDUTAwd1RYTlZNRVpDVlRKMFVFeEZWa0pSVms1elZIbDRTRkZWVm5sUmFYaE9VVlZHVUV4RlRrSlJWVTUwVkhsNFJsRlZSblJSYm1oVFRFWk9RbEZYTVVObGEwMXpVMVZHUWxaSWJFUk1SVlpDWkd0S2MxRnBlRVpSVlVaRVkxVlJjMUpWUmtKVk1qbFFURVZXUWxGVk9UWlZhWGhNVVZWT2QxRXpiRk5NUlZaQ1VWVXhjMUY1ZUZwUlZVNUZVMmw0YkZGVlJteGliRUZ6VWxWR1FsUllSa1ZNUld4Q1l6QktNRkZ1UmxCTVJVNUNVVmRXZVZSNWVFWlJWVVpVWWxVNGMxSlZSa0ppVlVvMFZXbDRTRkZWVFhwUk1teFRURVZXUWxGWGJFTk9WVFJ6VWxWR1FsVXlNVkJNUldSRVpXdGplbEZwZUU1UlZVWk9Vbmw0UmxGVlJYSlJhWGd4VVd0R1FtUXdTa1JNUms1Q1VWWk9NbEpEZUZoUlZVNDBVbE40V2xGVlJtaGtNRkZ6V1RCR1Fsa3phRVZNUm1SRVYxTTVRMkZHU1hOVU1FWkNUV3RKYzJOVlNrSlJWVEZDVEVVNVFsRlVTa05NUnpGRFVWVkdTa3hGZEVKUmVsWkZZekJSYzFNd1JrSlRlWGhVVVZWMFYweEZNVUpSVlRGMFZXbDRSbEZWUmpGUmFYaElVVlZPTUZGcGVFNVJWVVpPVVhsNFZsRlZSblJSYlhoSFRFVldRbFI2VmtOalJUaHpZbFZLUWxFd2EzTlVNRVpDVkRCamMxTXdSa0pUTW14T1RFVTVRbEl5YUVOalJUQnpUVVZLUWxKVmEzTlNNRVpDVTFWamMxTXdSa0pUTWpGUlRFZFdRbEZYVm5OUmVYZDNVV3RHUWsxRlNYTldWVVpDVmpKd1QweEZPVUpSTTNCRlRFVTVRbFZWYjNOVVZVWkNWRmM1VlV4RlZrSlJWMFozVmtONFRGRlZSa3hqVmxGelYxVkdSR1ZGU1hOVlZVWkNZbFZKZUZaVGVFcFJWVVp0WlZaVmMxSlZSa1JSV0VKVlRFVjBRbEZWZEhwV1EzaFNVVlZHVmt4R1JrSlNWMUZ6VWpCR1FsTlhjRTlNUlRGQ1VWVXhSRXhHUmtKUlZrVTBWRk40U0ZGVlJtaE1SVTVDVkRKb1JFeEZNVUpSVlRGSVRFVldRbEZXYTNOUk1FWkNVVE5TU1V4RlZrSlJWa1o1VVdsNFNsRlZSbEpqVlVselVsVkdRbFF6VmtsTVJteENVVlpyYzFFd1JrSlJlbFpLVEVWV1FsRlZkSFZUVTNoS1VWVlZNVkpFVWtWTVJURkNVVlV4UkV4R1JrSlJWa1V6VWtONFNGRlZSa3hQUmtWelVsVkdRbFpVYkZKTVJWWkNVVlZrZEZOVGVFcFJWVVpTVVZONFJsRlZSa3BpVlVselUxVkdRbE5ZVWt0TVJXUkNVVlZzZEZOVGVFaFJWVVpPVVZONFNGRlZaSGRTUlVWelVsVkdRbFJVU2twTVJWWkNVVlpXU1V4RlZrSlJWbXR6VTFWR1FsTllhRWxNUlhSQ1VUSm9SRk41ZUVaUlZVWlVURVZrUWxFeVdubFJhWGhHVVZWR1NrOVZZM05WVlVaQ1ZUSmtSVXhGWkVKUlZURjBVbWw0UmxGVlJsQmtNR2R6VlZWR1FsVlVUazVNUld4Q1VUSjRSRTlWWTNOVE1FWkNVek5PVlV4R1JrSlJWbFo1VTBONFVGRlZaRzFoYXpCelV6QkdRbE16VGxWTVJrWkNVVlpWYzFFd1JrSlJNRmx6VWpCR1VtVkZTakpXUTNob1VWVk9TbUZWYjNOVVZVWkNWRlJhUjB4SFJrSlJNRFI2VkhsNFRGRlZSa3hOYkVWelYxVkdRbGRUZEVSTVJ6RkRVVlZPY1ZGcVJsVk1SWFJDVVZWemVWWkRlRmhSVlU1RlRURlJjMU13UmtKVGVsSlZURWN4UTFGVmJFMWliRmx6VkRCR1FsUXlPVmRNUm14Q1VWZE5NMVpEZUV4UlZVWk1UV3hSYzJNd1NrSlJXRTVEWWtaWmMxUXdSa0pVTWpsWFRFWnNRbEV6V2tWT01WRnpVekJHUWxONmFGVk1SMDVDVmxkS2NWWlRlSFJSYTBaRVUxTjRVRkZWUmxCU2VYaE1VVlZHVEVzeFVYTlpWVVpDV1ZONFJGRlZSa1pSZVhoTVVWVkdUa3hHVGtKV00wcEVZbXhWYzFrd1JrUlRVM2hPVVZWR1RtSXdNSE5TVlVaQ1ZUSndUa3hGZEVKUlZYTjVWVk40V2xGVlJscE5hMDF6VlZWR1JGWnBlRXBSVlVaelVXNUtTVXhGVmtKUlZUbHhWSGw0YWxGV1JtaFdlWGhLVVZWR2QxRnJXWE5VTUVaQ1ZIcEtUa3hHVmtKUlZFcERUVEF3YzFRd1JrSlVla3BPVEVaT1FsRldUWGxSYVhob1VWVmpNMUV5WkVoTVJWWkNVVEIzZGxWNWVFeFJWVVpNVFd4UmMxWXdSa0pXTURCellsVktRbEV4Y0c5VFUzaEdVVlZHVUdGVmEzTlRWVVpDVXpOd1UweEZaRUpSVlRGQ1RFVldRbEZWVlhkVmFYaGFVVlYwTkZGdE5WWk1SWFJDVVZWMGRsWlRkelJSYTBaQ1N6QkpjMUpWUmxWalJVMTZWbWw0VUZGVlJsQk5hekJ6VlRCR1FsVXliRXRNUm14Q1VWWnNSRXhJVGtOUlZVWjZVVzVLU2t4RlZrSlJWVGx3VTFONFNsRlZSa3hsYkVselVqQkdRbFJWUlhOU1ZVWkNVbFJvVTB4R1RrSlJWbFl5VmxONFRGRlZSa3hrTVZWelYxVkdXazR3V1hwV1UzaDJVV3RHUkZOWGJFdE1SVEZDVVZVd2VWUkRlSFpSYTBaSVVtNXdWa3hGZEVKUlZYTjVWV2w0Y0ZGclJrSmhNRTV2VmtONFNsRlZSbmRSYTFselZEQkdRbFI2U2s1TVJsWkNVWHBHUTAwd01ITlVNRVpDVkhwS1RreEdUa0pSVms1NlUybDRhRkZWUm1oTlZsVnpWRlZHVkdOclRrbE1SVGxDVVZVNWNGVjVlRWhSVld4SlRFVXhRbEZWTURKUmVYaEdVVlZHY0ZGcVRsWk1SWFJDVVZWek1GWlRlRlJSVlUweFVXcHNUVXhGTVVKUlZURlpURVU1UWxGVk9IbFRhWGhJVVZWV1ZVNXJUWE5UVlVaQ1lsVktObEZwZUVoUlZVNTFVVzE0VlV4RmRFSlJWWE41VlZONFdsRlZUa0poVlZWelZEQkdRbFF3VVhOU1ZVWkNXakJKZWxaVGVFeFJWVVpNVFd4UmMxWXdSa0pYVTNoRVVWVkdSbVZyYTNOV1ZVWkNWako0VFV4RmRFSlJWWFF6VmxONFZsRlZSbGhoUlhkeldWVkdRbGt6YUV0TVJUbENVek5vUjFGVGVFeFJWVVpNWWpGVmMwc3dTa0pSTUhoM1ZsTjRURkZWUmt4aU1WVnpUMFZLUWxGVGRFTk1SVlpDVVROQ1JHTkdWWE5UTUVaQ1UzcEtVa3hHYkVKUlZtdDVVWGw0VWxGVlJsSmxSa0Z6VlZWR1FsVXpTa05NUld4Q1VYcHNRMHhGTVVKUlZUQjVVMmw0UmxGVlJsSk1NSGR6VlRCR1FsVjZRa2RNUjA1Q1VWZE5jMVV3UmtSamEwNTRVbmw0UmxGVlJrNVJlWGhhVVZWR2FrNVZiM05TVlVaQ1VsUm9VMHhHUmtKUk0xSkRaR3hWYzFNd1JrSlRla3BWVEVaa1FsRldaSGRVVTNoYVVWVkdXazVyVlhOVVZVWldaVVZPTWxSVGVGUlJWVTVLVEVVNVFsRlZPWGhXUTNoSVVWWldiVkY1ZUVaUlZVWjZVV2w0V0ZGVlJrcE1SVlpDVlZSR1ExRlRlRVpSVlVaWVpWVkpjMVF3Y0hwUk1XTnpVVEJHUWxGNmJGWk1SVlpDVVZaR2IxRnBlRVpSVlVaWVRXdFpjMU13UmtSa1JVMXpVMVZHUWxNd1JYTlNNRVpDVDBWSmMyRlZTa0pSVm5CQ1RFVnNRbEZZYkVOUlUzaEdVVlZHVW1WVlkzTldWVVpFWTBWUmMxUlZSa0pXV0ZKRVRFVXhRbEZWTUhOa1ZVNUNVbGhDUTB4Rk1VSlJWVEY2VVhsNFJsRlZSbHBsYTJOelVsVkdRbFZZYkVoTVJsWkNVVE5DUTAxcmIzTlNWVVpDV1hwV1ZreEZWa0pSVlRBd1VrTjRTbEZWUmtwTU1GVnpVakJHUkdWRlNtNVdlWGhHVVZWR2JFMHdiM05TTUVaRVZGTjRURkZWUmpKUmJrcE9URVZXUWxGV1ZuQlJlWGhhVVZWT1UyRnJUWE5TVlVaQ1ZsZHNXRXhGZEVKU1ZscEVURVZXUWxGWE1VTlNhWGhLVVZWR2NGRnROVXRNUlZaQ1VWZFZOVk5EZUVwUlZVWktZMVZuYzFJd1JraGthMUZ5VTJsNFJsRlZSbkpSYTFGelVsVkdRbUpWU1hwV1UzaFVVVlZHVkU1c1ZYTmxWVXBDVVZSS1EyTkdZM05TVlVaWVREQlZjMUl3YUhGVU1uUkRURVZXUWxGVlRtNVJhWGhHVVZWR1VtRkZTWE5TVlVaQ1ZucEtSMHhGZEVKUk0xSkVURVZzUWxGVmJIbFJhWGhHVVZWR1VHSnJVWE5TVlVaQ1ZGaFdURXhGYkVKUlZXdDRWRU40VWxGVlRsTlRRM2hLVVZWR1ZXVlZWWE5UVlVaRVVWaGFSa3hGVmtKUlZteEVURVZXUWxGV1pFSk1SVlpDVVZaVmNsUnBlRnBSVlU1eFVYcFdUa3hGVmtKUlZUQjVVM2w0U2xGVlJrcFBWWGR6VWxWR1FsWXpUa1pNUlZaQ1VWVTRjMU5WUmtKVFYyUkdURVZXUWxGV1RuTlRhWGhRVVZWR1VHTldWWE5VTUVaQ1ZIbDRSRkZWUmtaamEzTnpXakJLUWxGVlJrSk1SV1JDVVZjeFEyVnJVWE5UTUVaRVRsVldlVkZwZUVaUlZVWk1TekZKYzFZd1JrSldNMHBZVEVWc1FsSllRa05qTUZWelVsVkdRbE16VmtOTVJrNUNVVlpOTTFKVGVFaFJWVTVyWXpCUmMxSlZSa0pUTTJSRFRFWldTRXN3TVUxa01VVnpVVEJHUWxaWVVsZE1SVlpDVVZaR2RGWnBlRVpSVlVad1VXazVXRXhGT1VKUlZUbDRWbE40VUZGVlJsQk1SVTVDVVZWV2VWTjVlRzVSYTBaQ1lWVktlbEpEZUVaUlZVWjRVV3MwYzFOVlJrSlpNM0JJVEVWc1FsWlhOVWhrVmtWelVsVkdRbUV3U1hOUk1FWkVZa1ZKYzFSVlJrSlVWRlpUVEVWV1FsRlZPWFZTUTNoR1VWVkdUbVJWYzNOVFZVWkNVMWhzVEV4RlpFSlJNMXBEWVVaWmMxSlZSa0pVVnpsWFRFVTVRbEZWT1V0TVJXUkNWRmRKYzFSVlJrSlVWRVpUVEVWV1FsRldaRWxNUlZaQ1VWVnpjbEY1ZUhCUmEwWkNZVlZKTVZGcGVFWlJWVTUxVVRJMVEweEZWa0pSVlhOeVVYbDRUbEZWUms1T1ZVMXpXVEJHUkZkRVZrWk1SVlpDVVRCd2NsUnBlRVpSVlVaNlVXeG5jMUpWUmtKV2VYUkxURVZXUWxGWGJFTk5Wa2x6VWpCR1JHSkZVWGhTVTNoR1VWVkdXbEY1ZUVaUlZVWllVVk40UmxGVlJsWkxNRFJ6VjFWR1JHRnJUWFpVYVhoR1VWVkdWbVZWYTNOWFZVWkNWMVJDVDB4RlpFSlJNMUpEWVVaWmMxSlZSa0pVVkVwTVRFVnNRbEZWYXpWVVEzaEdVVlZHV0dNd1ZYTlRWVVpTWTBWS05WVnBlRWhSVlVac1VYbDRTRkZWVG05UmJrcFlURVU1UWxGVk9IbFVVM2hVVVZWR1ZHTXdiM05aVlVaQ1dWUldWMHhGVmtKUlZsWndWbmw0VUZONlRsTmxSVTF6VkZWR1FsUlZPSE5TVlVaQ1YxTjRSRkZWVGpKUmFsWlpURVZXUWxFd1JYZFVVM2hHVVZWT1FtSlZkM05TVlVaQ1QwVkpjMVJWUmtaUFZVa3pWME40UmxGVlJsQlBSbWR6V1RCR1FsbDVlRXBSVlVaS1VYbDRXbEZWUmxwamEzZHpVbFZHUWxSNWVFUlJWVVpHWWxWM2MxUXdSa0pSVlVWelZGVk9TV0pyVGtoTVJWWkNVVmhrUTB4RlRrSlJNalZFVVhsNFJsRlZUa0pSZVhoTVVWVldRa3hGWkVKUlZXeEZURVZXUWxGVlkzcFdRM2hNVVZWR1RFNXNVWE5XTUVaQ1ZubDRWRkZWUmxaTVJVNUNVWGs1UTB4R1JrSlJXR1JEWWtabmMxTlZSa0pqUlVwd1YwTjRSbEZWVGtkTVJUbENVakJaYzFSVlJrUlVWVlZ6VWxWR1FsWXdUWE5TTUVaRlVsVnZjMUpWUmtSaVZVcEVURVZrUWxKWVVrUk1SVEZDVVZVNGMxRXdSa1JVUld0elVsVkdRbEl3V1hOU1ZVWkNWVEJWYzFKVlJrUlhhMDF6VWxWR1FsSXdaM05TVlVaQ1ZUQmpjMUl3UmtwaFJVbHpWRlZHUWxSNWVFUlJWVTVOVWtONFJsRlZSa3BVUTNoR1VWVkdjbEZyT0hOVlZVWkVaRVZLUlV4RlZrSlJWV3hQVEVWV1FsRlhkRU5WVTNoV1VWVnNkMUZyYjNOU01FWkNWbmw0UkZGVlJrUmphekJ6VWxWR1FscFVRazVNUlhSQ1VYazVRMHhGTVVKUlZURlBURVZXUWxFd2FIZFVVM2hHVVZWR1JrMXJNSE5hVlVaRVVrZG9Va3hGTVVKUlZURjJVMmw0VmxGVlJsWk9hMk56VXpCR1FsTXljRTVNUlhSQ1VUSTFRMWREZUVaUlZVWkdUV3N3YzFrd1JrUlNTRkpSVEVWa1FsRlZNWGhWUTNoS1VWVkdiR05zUVhOU1ZVWkNVbGhHVVV4SFJrSlNWRTVEVFZVd2MxSlZSa0pTVkZwT1RFZGtRMUZWVGtWaVJrVnpWRlZHUWxSWE9VdE1SbFpDVVZaVk1sSjVlRXhSVlVaTVlXc3djMU13UmtSaWEwcFpURVZXUWxGVlZUSlVVM2hzVVZWT1JXVkdRWE5TTUVaQ1ZGaEdVVXhGYkVKUlYxWjVWVU40UmxGVlJrWmpWa0Z6VjFWR1NFOVZTWE5VVlVaQ1ZIbDRSRkZWVGsxVGFYaEdVVlZHU0ZKcGVFWlJWVVpVVTFONFVsRlZUbUZTUTNoR1VWVkdTRk5EZUVaUlZVWlVVM2w0VmxFemFFUmhSVWx6VTFWR1FsTlZjM05TTUVaQ1RVVk5jMUl3UmtSUFZVMXpWRlZHUWxSVlRYTlNNRVpDWVRCSmMxRXdSa0pSTUUxelVsVkdRbFpWVFhOVE1FWkVUbFZLU1V4RmRFSlJNR2hDVEVWa1FsRllUa05NUlU1Q1VUTkNRMHhHVmtKUk1FVnpaREJLUWxFd1JYTmpWVXBDVVRCRmMySXdTa0pSTUVWellqQktRbEV3UmtkTVJYUkNVVlV4VGt4RlpFSlJWbVJFVEVWa1FsRldaRWxNUlZaQ1VWVmtSa3hHVGtKU2VteERVMmw0VEZGVlJqTlJhM056VWpCR1FsWXdaM05TVlVaQ1VqQlpjMVF3UmtwalJVNUdURVZXUWxGVlpFZE1SV3hDVVZoR1ExSjVlRXBSVkZKRFRUQktSa3hGWkVKUlYwNUVURVZrUWxKVlJYTmlWVXBDVVZaU1FreEZaRUpSTW5SRVRFaE9RMUZWUmpaUmVsWmFURVU1UWxGVk9URlZhWGhXVVZWR1ZtTXdaM05WTUVaQ1ZYcEdUa3hGZEVKUlZYUTFWRk40VUZFeWVFUmtSVXBHVEVWa1FsRlhTWE5aTUVaQ1lUQk5NMUpEZUVaUlZVWnpVVE5TVlV4SGRFUlJWV1I0VWtWamMxcFZSa0pXZVhoR1VWWkdNRkpGUlhOYU1FcENVVlpyYzFKVlJrcFdhMmR6V2xWR1JGVnJZM05UTUVaQ1V6SXhTMHhIYkVOUlZVWndVV2w0V2xGVlJtaGlhMjl6VXpCR1FsTXliRmxNUm1SQ1VWWmtSRXhGZEVKUlZYUnpWME40VGxGVlJsQk1SVTVDVVhwa1JXRXdiM05WTUVaQ1ZYbDRSbEZWVGxWWmVYaFVVVlZHVkV4RmJFSlNWbWh2VTNsNFRGRlZSa3hpVlc5ellWVktRbEZYYkVOTVIwWkNVVmRPZFZOcGVFeFJWVVpNWVZabmMxWXdSa0pXTUUxelV6QkdRbE15ZUZsTVJURkNVVlU0YzFFd1JrUlBWVkp5VTJsNFZGRlZSbFJNUlZaQ1VURlNha3hHVGtKUlZrMXpVMVZHUmxkRVRrdE1SazVDVVZaTk5GTlRlSEJSYTBaQ1lWVkpjMWRWUmtKWlZ6VkxURVYwUWxGVmRIUlhRM2hPVVZWR1RsSkRlRXhSVlVaTVlrWm5jMVJWUmtKVWVYaEVVVlZOTVZKSGRFdE1SazVDVVZaTmMxSlZSa1JXUjAxelZUQkdRbFY1ZUVwUlZWWlpUVEJ2YzFVd1JrSlZlbWhLVEVkc1ExRlZSbkJSYVhoYVVWVkdhR0pyYjNOVE1FWkNVekl4V1V4Rk1VSlJWVEZGVEVWMFFsRlZkSE5YUTNoT1VWVkdVRXhGVGtKUmVsWkZZVEJ2YzFVd1JrSlZlWGhHVVZWT1ZWbDVlRlJSVlVaVVRFVnNRbEpXWjNwVGFYaFVVVlZHVkU5RmEzTmhWVXBDVVZkc1EweEdWa0pSVm1SMVUybDRURkZWUmt4aU1XZHpWVEJHUWxVd1dYTlRNRVpDVXpKNFdVeEZNVUpSVlRoelVUQkdSRTR3VW5KVGFYaFVVVlZHVkV4RlZrSlJNVkpxVEVaT1FsRldUWE5UVlVaR1YwUk9TMHhHVGtKUlZrMDBVMU40Y0ZGclJrSmhWVWx6V1RCR1FscFhOVXRNUlhSQ1VWVjBkbGREZUZSUlZVWlVVbWw0VEZGVlJreGlSbWR6VkZWR1FsUjVlRVJSVlU1eFVsZDBTMHhHVGtKUlZrMXpVbFZHUkZaSFRYTlZNRVpDVlhsNFNsRlZWbGxOTUc5elZUQkdRbFY2YUVwTVIyeERVVlZHY0ZGcGVGaFJWVVphWW10dmMxTXdSa0pUTWpsWlRFWk9RbEZXVGtkTVJYUkNVVlYwYzFkRGVFNVJWVVpRVEVWT1FsRjZiRVZoTUc5elZUQkdRbFY1ZUVaUlZVNVZXWGw0VkZGVlJsUk1SV3hDVTFWb2RWTjVlRlJSVlU1VFRFVTVRbEZWT0RCU2FYaEVVVlZHU2t4SFpFTlJWV1JOVGxWWmMxWXdSa0pXZW1oWFRFVmtRbEV5Y0VOTVJXUkNVVEJrUWt4RlZrSlJWV042VmtONFRGRlZSa3hPYkZGelZqQkdRbFo1ZUZaUlZVVjNVWGw0U2xGVlJUTlJhMWx6VWxWR1FtRXdTWGRSYVhoU1VWVk9kVkpJU2xsTVJYUkNVVlYwZWxkRGVGUlJWVlpOVEVVNVFsSXdXWE5TTUVaRVVsaFNXVXhGZEVKUlZYUXhWME40VkZKSVNrVmFNRTF6VWxWR1JHVnJUbWxNUlZaQ1VUQkdSRXhGVmtKUk1FWm9URVYwUWxKVlJYTlRWVVpDVTFST1dFeEZWa0pSVnpsRFRteFpjMUpWUmtSbFJVbHpVbFZHUWxKNWVFUlJWWFJGVEVWa1FsSnJSbmRVUTNoU1VWVkdVbUpWTUhOVFZVWkNVMU40YUZGVlJtcGFRM2hHVVZWR1ZreEdUa0pSVmxVMVZtbDRTRkZWVlhoUmVsSlhURVZrUWxGWFpFTk9WbGx6VWxWR1FsUlVhRmRNUldSQ1VUTm9RMHhGT1VKUlZUaHpVbFZHU0ZaRGVFaFJWVVpLVDFaWmMxTlZSa0pWZWtwWVRFVldRbEV4WjNOVU1FWkNWSGw0UmxGVlpGVk5NV056VWxWR1FsUXdSWE5TVlVaQ1V6TnNRMHhIYkVOUlZVNU5aV3RKYzFJd1JrWldRM2hRVVZWR1VFeEZaRVJhTUU1SFRteGpjMUV3UmtSUmVUbERURVZXUWxGVlpIRlhVM2hRVVZWT1NXTXdUWE5UTUVaQ1V6TldXVXhGT1VKUk1IZ3lWME40VEZGVlJreE5iR2R6V1RCR1NGVkRlRkJSTW1oSFRrVkpjMU5WUmtKUk1uQlFURVZXUldKVldYWlJiV3hPVEVWV1FsRlZaSEJSZVhod1VXdEdSRk5IY0VSTVJWWkNVVlZrY2xGNWVISlJhMFpHV1ZONGJGRlZSbUZpUlUxelVsVkdRbEo2VGxWTVJUbENVVEI0YjFGNWVFeFJWVVpNVDBabmMyRXdTa1JrYTFvelVXNUNVRXhGVmtWa1ZWcHFZVlV3YzFJd1RqQlNibkJFVmxONGJGRlZSbkJSYWs1T1RFVldRbEZWVlhsVVUzaHFVVlZHYWt4RlpFSlJlbXhEVFRBd2MxSlZSa0pTVkVwT1RFZE9RbEZYVFhOU01FWkNVakJSYzFZd1JrUmxSVWw0VkZONFJsRlZSa1pPYXpCeldqQktRbEZYZEVOT01EQnpVbFZHUWxKVVdrNU1SMVpDVVZkVmMxSXdSa1JoUlUwelZGTjRSbEZWUmtaT2F6QnpXbFZHUWxwVGVFaFJWVVpJVTBONFdGRlZUakJSYVhoSVVraEdSMVJEZUU1UlZVWk9UV3RKYzFKVlJrSlVXRXBFVEVWV1FsRllUa05SZVhoR1VWVkdTazB4V1hOVE1FWkNVM3BvV1V4SGRFTlJWVll3VVRCTmMxTlZSa3BVUXpsWlRFVjBRbEZWZEc1WFUzaFFVVlZHVkZKRGVFWlJWVVpLVERCSmMxSlZSa1JpUlVwdlZubDRURkZWUmt4aFZtdHpWREJHUWxVd1dYTlNWVVpDVTFSc1EweEZWa0pTVjNoRFlXeGpjMU13UmtKVE1uUmFURVprUWxGV2EzTlNWVVpHWVd0Sk1WRjVlRVpSVlVaV1pFWlpjMU13UmtKVVUzaGFVVlZHYUV4RlRrSlJlazVEV2pGcmMxUXdSa0pWVjJoYVRFVjBRbEZWZEc1WFUzaFFVVlZPYVZGNWVGQlJWVVpTWVd4cmMxTXdSa0pUTW14YVRFWldRbE5XVW5kWFUzaE9VVlZHVGs5R1dYTlNNRVpFVjJsNFNsRlZSa3hOTVZselV6QkdRbE15ZEZwTVJtUkNVVmRHYzFkVGVFeFJWVVpNWXpGbmMxVXdSa1JOVlVselZEQkdTRkpxVGtOTVJWWkNVVlZrY0ZGNWVIQlJhMFpFVTBkd1JFeEZWa0pSVldSeVVYbDRjbEZyUmtaVFEzaE9VVlZHVGxKVGVFWlJWVVpPWTJ0TmMxSlZSa0pqTUVwRVRFVldRbEZWYTNwV2FYaE1VVlZHVEU5R1ozTmhNRXBDVWxST1JFeEZiRUpSVlhSRVRFVldRbEV3WjNOVU1FWklVbWw0U2xGVlJrcFRVM2hHVVZWR1ZGTnBlRVpSVlVaS1REQkpjMUpWUmtKVFYyaFlURVYwUWxGVmRHNVhVM2hRVVZWT01GRnJhM05TVlVaQ1ZUQjNjMUpWUmtKVFZHeERURVZXUWxGVmJIRldlWGhNVVZWR1RHRldhM05VTUVaR1pFVktjVmRUZUV4UlZVWk1ZMVpyYzFRd1JrUlZSVmx6VWxWR1FsVjZiRnBNUlhSQ1VWVjBjRmRwZUU1UlZVWk9VME40UmxGVlJsUmliR3R6VXpCR1FsTXpSbHBNUlhSQ1VWVnpjMU5WUmtKVVdFcGFURVYwUWxGVmRIaFhVM2hNVVZWR1RFeEZaRUpSTTFwRlVrTjRSbEZWUmxSTU1XdHpVekJHUWxNeWJHRk1SVEZDVVZVeFIweEZWa0pSVms1M1YxTjRURkZWUmt4alZtdHpVekJHUWxONWVFcFJWVVpPWTJ4cmMxTXdSa0pUTTBaYVRFVjBRbEZWYzNOVE1FWklZMFZTUjB4RlpFSlJWbVJFVEVWc1FsTlhhRU5QVlUxelVsVkdRbFpZVWxkTVJYUkNVVlV3YzFZd1JrSlhVM2hFVVZWTmVGRnRNVnBNUlRsQ1VWVkdRa3hGVmtKUk1FWkVURVU1UWxGVlJrSk1SV3hDVTFWc01sZFRlRlJSVlVaVVQwWlpjMUl3UmtSV2FrNVhURVYwUWxGVmRISlhVM2hhVVZWR2FHSkdhM05UTUVaQ1V6Tk9XVXhHWkVKVFZGWkRUVEJKYzFKVlJrSlNNbXhFVEVkc1ExRlZUa2xoYTAxelVsVkdRbEl5ZEVSTVIzUkRVVlZXU1U0eFozTlRNRVpDVTNwb1dVeElUa05SVlVaMFVXMDFZVXhGVmtKUk0yaERZMVZKYzFNd1JrSlRNblJhVEVaa1FsRldhM05TVlVaR1lXdEpNVkY1ZUVaUlZVWldaRVpaYzFNd1JrSlVVM2hxVkc1U1NGVjVlRXBSVlVaRVlWVk5jMUl3TVhGUk1GSTJVbE40U0ZGVlJYaFJiVEZYVEVWV1FsRldUWE5STUVaQ1VsUk9Va3hGZEVKUlZURjRVbE40ZUZFd1JrWk5SVWt6VTFONFNGRlZSWHBSTWpGWFRFVldRbEZXVFhOUk1FWkNVbFJPVWt4RmRFSlJWVEY0VkVONFVsRlZSbFJXVTNoVVVWVkdWRXhJUmtSUlZWWTBVVzVhVWt4RlpFSlJWbWgwVm1sNGRGRXdSazFXV0VaR1RFVTVUMkV3VG5CUmFUbFdURVZrVG1KclRtMU1SMlJEVkcweFJFNUZTbnBXZVhoSVVWVkdkbEpEZUhSUmEwWkNaRVZLUWt4RlZrSmlhMDB6VVhsNFJsRlZSa1JrUm1OelVsVkdRbFV6VmxKTVJYUkNVVEo0UkV3eFVYTlVNRVpDVkRCTmMxcFZSa0phVkdoaFRFVTVRbEZWT1RKV2VYaEdVVlZHVkdSV1JYTlNNRVpRVERCS1FreEZaRUpPUlVwUllWVmpjMUV3UmtKaU1FbzBWbmw0U0ZGVlJsUmpNV056VWpCRmVGRnJaM05TVlVaQ1VUTlNXRXhGVmtKUlZrNDFWR2w0VEZGVlRuZFJlWGhPVVZWR1RrNUZUWE5UTUVaQ1VsVkZjMUpWUmtKVFZ6bElURVpPUWxGVlZrSk1SV1JDVVZkR2IxTnBlRVpSVlUxNlVXbDRUbEZWUmxCTVJVNUNVVEJuTUZGNWVFeFJWVVpDVVZONFJsRlZUa0ppTUdOelZUQkdRbEZWUlhOU1ZVWkdVVlJrV2t4R1RrSlJWazE1VlhsNFNGRlZUazFNTVZGelZEQkdRbFF3VFhOYVZVWkNXbFJvWVV4Rk9VSlJWVGt5Vm5sNFJsRlZSbFJrVmtWelZGVkdkbEZxYkVSaVZXTnpVVEJHUW1Nd1NYaFdlWGhJVVZWR1ZHTXhZM05UTURGM1VUTlNRMlJyU1dsbVVUMDlYRzRpTEc1MWJHd3NiblZzYkYwc0ltNWhiV1Z6SWpwYklsOWZaR1ZqYjNKaGRHVWlMQ0prWldOdmNtRjBiM0p6SWl3aWRHRnlaMlYwSWl3aWEyVjVJaXdpWkdWell5SXNJbVFpTENKaklpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpY2lJc0lrOWlhbVZqZENJc0ltZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lJc0lsSmxabXhsWTNRaUxDSmtaV052Y21GMFpTSXNJbWtpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1selEwVlFiMng1Wm1sc2JDSXNJbmRwYm1SdmR5SXNJbU4xYzNSdmJVVnNaVzFsYm5Seklpd2lkVzVrWldacGJtVmtJaXdpY0c5c2VXWnBiR3hYY21Gd1JteDFjMmhEWVd4c1ltRmpheUlzSW5KbGJXOTJaVTV2WkdWeklpd2lZMjl1ZEdGcGJtVnlJaXdpYzNSaGNuUWlMQ0psYm1RaUxDSnVJaXdpYm1WNGRGTnBZbXhwYm1jaUxDSnlaVzF2ZG1WRGFHbHNaQ0lzSW0xaGNtdGxjaUlzSWsxaGRHZ2lMQ0p5WVc1a2IyMGlMQ0pUZEhKcGJtY2lMQ0p6YkdsalpTSXNJbTV2WkdWTllYSnJaWElpTENKdFlYSnJaWEpTWldkbGVDSXNJbEpsWjBWNGNDSXNJbFJsYlhCc1lYUmxJaXdpVzI5aWFtVmpkQ0JQWW1wbFkzUmRJaXdpY21WemRXeDBJaXdpWld4bGJXVnVkQ0lzSW5Sb2FYTWlMQ0p3WVhKMGN5SXNJbTV2WkdWelZHOVNaVzF2ZG1VaUxDSnpkR0ZqYXlJc0luZGhiR3RsY2lJc0ltUnZZM1Z0Wlc1MElpd2lZM0psWVhSbFZISmxaVmRoYkd0bGNpSXNJbU52Ym5SbGJuUWlMQ0pzWVhOMFVHRnlkRWx1WkdWNElpd2lhVzVrWlhnaUxDSndZWEowU1c1a1pYZ2lMQ0p6ZEhKcGJtZHpJaXdpZG1Gc2RXVnpJaXdpYm05a1pTSXNJbTVsZUhST2IyUmxJaXdpYm05a1pWUjVjR1VpTENKb1lYTkJkSFJ5YVdKMWRHVnpJaXdpWVhSMGNtbGlkWFJsY3lJc0ltTnZkVzUwSWl3aVpXNWtjMWRwZEdnaUxDSnVZVzFsSWl3aWMzUnlhVzVuUm05eVVHRnlkQ0lzSW14aGMzUkJkSFJ5YVdKMWRHVk9ZVzFsVW1WblpYZ2lMQ0psZUdWaklpd2lZWFIwY21saWRYUmxURzl2YTNWd1RtRnRaU0lzSW5SdlRHOTNaWEpEWVhObElpd2lZWFIwY21saWRYUmxWbUZzZFdVaUxDSm5aWFJCZEhSeWFXSjFkR1VpTENKeVpXMXZkbVZCZEhSeWFXSjFkR1VpTENKemRHRjBhV056SWl3aWMzQnNhWFFpTENKd2RYTm9JaXdpZEhsd1pTSXNJblJoWjA1aGJXVWlMQ0pqZFhKeVpXNTBUbTlrWlNJc0ltUmhkR0VpTENKcGJtUmxlRTltSWl3aWNHRnlaVzUwSWl3aWNHRnlaVzUwVG05a1pTSXNJbXhoYzNSSmJtUmxlQ0lzSW1sdWMyVnlkQ0lzSW5NaUxDSmpjbVZoZEdWTllYSnJaWElpTENKdFlYUmphQ0lzSW1KdmRXNWtRWFIwY21saWRYUmxVM1ZtWm1sNElpd2lZM0psWVhSbFZHVjRkRTV2WkdVaUxDSnBibk5sY25SQ1pXWnZjbVVpTENKd2NtVjJhVzkxYzFOcFlteHBibWNpTENKd2IzQWlMQ0p6ZEhJaUxDSnpkV1ptYVhnaUxDSnBjMVJsYlhCc1lYUmxVR0Z5ZEVGamRHbDJaU0lzSW5CaGNuUWlMQ0pqY21WaGRHVkRiMjF0Wlc1MElpd2ljbVZ0YjNabFRtOWtaWE5HY205dFZHVnRjR3hoZEdVaUxDSjBaVzF3YkdGMFpTSXNJbTVsZUhSQlkzUnBkbVZKYm1SbGVFbHVWR1Z0Y0d4aGRHVlFZWEowY3lJc0ltNXZaR1ZKYm1SbGVDSXNJbkpsYlc5MlpVTnZkVzUwSWl3aWJtOWtaWE5VYjFKbGJXOTJaVWx1VkdWdGNHeGhkR1VpTENKamRYSnlaVzUwVW1WdGIzWnBibWRPYjJSbElpd2lhR0Z6SWl3aVptOXlSV0ZqYUNJc0ltTnZkVzUwVG05a1pYTWlMQ0p6ZEdGeWRFbHVaR1Y0SWl3aVpHbHlaV04wYVhabGN5SXNJbGRsWVd0TllYQWlMQ0pwYzBScGNtVmpkR2wyWlNJc0ltOGlMQ0p1YjBOb1lXNW5aU0lzSW01dmRHaHBibWNpTENKVVpXMXdiR0YwWlVsdWMzUmhibU5sSWl3aWNISnZZMlZ6YzI5eUlpd2liM0IwYVc5dWN5SXNJbDlmY0dGeWRITWlMQ0p6WlhSV1lXeDFaU0lzSW1OdmJXMXBkQ0lzSW1aeVlXZHRaVzUwSWl3aVkyeHZibVZPYjJSbElpd2lhVzF3YjNKMFRtOWtaU0lzSW01dlpHVk9ZVzFsSWl3aWFHRnVaR3hsVkdWNGRFVjRjSEpsYzNOcGIyNGlMQ0pwYm5ObGNuUkJablJsY2s1dlpHVWlMQ0pvWVc1a2JHVkJkSFJ5YVdKMWRHVkZlSEJ5WlhOemFXOXVjeUlzSW1Ga2IzQjBUbTlrWlNJc0luVndaM0poWkdVaUxDSmpiMjF0Wlc1MFRXRnlhMlZ5SWl3aVZHVnRjR3hoZEdWU1pYTjFiSFFpTENKc0lpd2lhSFJ0YkNJc0ltbHpRMjl0YldWdWRFSnBibVJwYm1jaUxDSmpiMjF0Wlc1MFQzQmxiaUlzSW14aGMzUkpibVJsZUU5bUlpd2lZWFIwY21saWRYUmxUV0YwWTJnaUxDSnpkV0p6ZEhJaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWFXNXVaWEpJVkUxTUlpd2laMlYwU0ZSTlRDSXNJbE5XUjFSbGJYQnNZWFJsVW1WemRXeDBJaXdpYzNWd1pYSWlMQ0puWlhSVVpXMXdiR0YwWlVWc1pXMWxiblFpTENKemRtZEZiR1Z0Wlc1MElpd2labWx5YzNSRGFHbHNaQ0lzSW1KbFptOXlaU0lzSW5KbGNHRnlaVzUwVG05a1pYTWlMQ0pwYzFCeWFXMXBkR2wyWlNJc0luWmhiSFZsSWl3aWFYTkpkR1Z5WVdKc1pTSXNJa0Z5Y21GNUlpd2lhWE5CY25KaGVTSXNJbE41YldKdmJDSXNJbWwwWlhKaGRHOXlJaXdpUVhSMGNtbGlkWFJsUTI5dGJXbDBkR1Z5SWl3aVpHbHlkSGtpTENKZlkzSmxZWFJsVUdGeWRDSXNJa0YwZEhKcFluVjBaVkJoY25RaUxDSjBaWGgwSWl3aWRpSXNJblFpTENKelpYUkJkSFJ5YVdKMWRHVWlMQ0pmWjJWMFZtRnNkV1VpTENKamIyMXRhWFIwWlhJaUxDSmthWEpsWTNScGRtVWlMQ0pPYjJSbFVHRnlkQ0lzSWw5ZmNHVnVaR2x1WjFaaGJIVmxJaXdpYzNSaGNuUk9iMlJsSWl3aVlYQndaVzVrUTJocGJHUWlMQ0psYm1ST2IyUmxJaXdpY21WbUlpd2lYMTlwYm5ObGNuUWlMQ0pmWDJOdmJXMXBkRlJsZUhRaUxDSmZYMk52YlcxcGRGUmxiWEJzWVhSbFVtVnpkV3gwSWl3aVRtOWtaU0lzSWw5ZlkyOXRiV2wwVG05a1pTSXNJbDlmWTI5dGJXbDBTWFJsY21GaWJHVWlMQ0pqYkdWaGNpSXNJblpoYkhWbFFYTlRkSEpwYm1jaUxDSjBaVzF3YkdGMFpVWmhZM1J2Y25raUxDSjFjR1JoZEdVaUxDSnBibk4wWVc1alpTSXNJbDlqYkc5dVpTSXNJbWwwWlcxUVlYSjBjeUlzSW1sMFpXMVFZWEowSWl3aWFYUmxiU0lzSW1Gd2NHVnVaRWx1ZEc5UVlYSjBJaXdpYVc1elpYSjBRV1owWlhKUVlYSjBJaXdpUW05dmJHVmhia0YwZEhKcFluVjBaVkJoY25RaUxDSkZjbkp2Y2lJc0lsQnliM0JsY25SNVEyOXRiV2wwZEdWeUlpd2ljMmx1WjJ4bElpd2lVSEp2Y0dWeWRIbFFZWEowSWl3aVpYWmxiblJQY0hScGIyNXpVM1Z3Y0c5eWRHVmtJaXdpWTJGd2RIVnlaU0lzSW1Ga1pFVjJaVzUwVEdsemRHVnVaWElpTENKeVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUlpd2lYMlVpTENKRmRtVnVkRkJoY25RaUxDSmxkbVZ1ZEU1aGJXVWlMQ0psZG1WdWRFTnZiblJsZUhRaUxDSmZYMkp2ZFc1a1NHRnVaR3hsUlhabGJuUWlMQ0psSWl3aWFHRnVaR3hsUlhabGJuUWlMQ0p1WlhkTWFYTjBaVzVsY2lJc0ltOXNaRXhwYzNSbGJtVnlJaXdpYzJodmRXeGtVbVZ0YjNabFRHbHpkR1Z1WlhJaUxDSnZibU5sSWl3aWNHRnpjMmwyWlNJc0luTm9iM1ZzWkVGa1pFeHBjM1JsYm1WeUlpd2lYMTl2Y0hScGIyNXpJaXdpWjJWMFQzQjBhVzl1Y3lJc0ltVjJaVzUwSWl3aVkyRnNiQ0lzSW5SbGJYQnNZWFJsUTJGamFHVWlMQ0owWlcxd2JHRjBaVU5oWTJobGN5SXNJbWRsZENJc0luTjBjbWx1WjNOQmNuSmhlU0lzSW10bGVWTjBjbWx1WnlJc0lrMWhjQ0lzSW5ObGRDSXNJbXB2YVc0aUxDSmtaV1poZFd4MFZHVnRjR3hoZEdWUWNtOWpaWE56YjNJaUxDSndjbVZtYVhnaUxDSnpkbWNpTENKblpYUlVaVzF3YkdGMFpVTmhZMmhsUzJWNUlpd2ljMk52Y0dWT1lXMWxJaXdpWTI5dGNHRjBhV0pzWlZOb1lXUjVRMU5UVm1WeWMybHZiaUlzSWxOb1lXUjVRMU5USWl3aWNISmxjR0Z5WlZSbGJYQnNZWFJsUkc5dElpd2lZMjl1YzI5c1pTSXNJbmRoY200aUxDSnphR0ZrZVZSbGJYQnNZWFJsUm1GamRHOXllU0lzSW1OaFkyaGxTMlY1SWl3aVZFVk5VRXhCVkVWZlZGbFFSVk1pTENKemFHRmtlVkpsYm1SbGNsTmxkQ0lzSWxObGRDSXNJbkJ5WlhCaGNtVlVaVzF3YkdGMFpWTjBlV3hsY3lJc0luSmxibVJsY21Wa1JFOU5JaXdpWVdSa0lpd2lkR1Z0Y0d4aGRHVkZiR1Z0Wlc1MElpd2ljM1I1YkdWeklpd2ljWFZsY25sVFpXeGxZM1J2Y2tGc2JDSXNJbU52Ym1SbGJuTmxaRk4wZVd4bElpd2ljM1I1YkdVaUxDSjBaWGgwUTI5dWRHVnVkQ0lzSW5SbGJYQnNZWFJsY3lJc0ltWnliMjBpTENKeVpXMXZkbVZUZEhsc1pYTkdjbTl0VEdsMFZHVnRjR3hoZEdWeklpd2ljbVZtVG05a1pTSXNJbWx1YzJWeWRFTnZkVzUwSWl3aWQyRnNhMlZ5U1c1a1pYZ2lMQ0pwYm5ObGNuUk9iMlJsU1c1MGIxUmxiWEJzWVhSbElpd2ljWFZsY25sVFpXeGxZM1J2Y2lJc0ltNWhkR2wyWlZOb1lXUnZkeUlzSW5KbGJXOTJaWE1pTENKS1UwTnZiWEJwYkdWeVgzSmxibUZ0WlZCeWIzQmxjblI1SWl3aWNISnZjQ0lzSWw5dlltb2lMQ0prWldaaGRXeDBRMjl1ZG1WeWRHVnlJaXdpUW05dmJHVmhiaUlzSWtwVFQwNGlMQ0p6ZEhKcGJtZHBabmtpTENKT2RXMWlaWElpTENKd1lYSnpaU0lzSW01dmRFVnhkV0ZzSWl3aWIyeGtJaXdpWkdWbVlYVnNkRkJ5YjNCbGNuUjVSR1ZqYkdGeVlYUnBiMjRpTENKaGRIUnlhV0oxZEdVaUxDSmpiMjUyWlhKMFpYSWlMQ0p5Wldac1pXTjBJaXdpYUdGelEyaGhibWRsWkNJc0lsVndaR0YwYVc1blJXeGxiV1Z1ZENJc0lraFVUVXhGYkdWdFpXNTBJaXdpWDNWd1pHRjBaVk4wWVhSbElpd2lYMmx1YzNSaGJtTmxVSEp2Y0dWeWRHbGxjeUlzSWw5MWNHUmhkR1ZRY205dGFYTmxJaXdpVUhKdmJXbHpaU0lzSW5KbGN5SXNJbDlsYm1GaWJHVlZjR1JoZEdsdVoxSmxjMjlzZG1WeUlpd2lYMk5vWVc1blpXUlFjbTl3WlhKMGFXVnpJaXdpWDNKbFpteGxZM1JwYm1kUWNtOXdaWEowYVdWeklpd2lhVzVwZEdsaGJHbDZaU0lzSW05aWMyVnlkbVZrUVhSMGNtbGlkWFJsY3lJc0ltWnBibUZzYVhwbElpd2lYMk5zWVhOelVISnZjR1Z5ZEdsbGN5SXNJbkFpTENKaGRIUnlJaXdpWDJGMGRISnBZblYwWlU1aGJXVkdiM0pRY205d1pYSjBlU0lzSWw5aGRIUnlhV0oxZEdWVWIxQnliM0JsY25SNVRXRndJaXdpYUdGelQzZHVVSEp2Y0dWeWRIa2lMQ0p6ZFhCbGNsQnliM0JsY25ScFpYTWlMQ0puWlhSUWNtOTBiM1I1Y0dWUFppSXNJbXNpTENKZlpXNXpkWEpsUTJ4aGMzTlFjbTl3WlhKMGFXVnpJaXdpYm05QlkyTmxjM052Y2lJc0luQnliM1J2ZEhsd1pTSXNJbVJsYzJOeWFYQjBiM0lpTENKblpYUlFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSWlMQ0pmYjNCMGFXOXVjeUlzSW05c1pGWmhiSFZsSWl3aVgzSmxjWFZsYzNSVmNHUmhkR1VpTENKamIyNW1hV2QxY21GaWJHVWlMQ0psYm5WdFpYSmhZbXhsSWl3aWMzVndaWEpEZEc5eUlpd2ljSEp2Y0hNaUxDSndjbTl3WlhKMGFXVnpJaXdpY0hKdmNFdGxlWE1pTENKblpYUlBkMjVRY205d1pYSjBlVTVoYldWeklpd2laMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6SWl3aVkzSmxZWFJsVUhKdmNHVnlkSGtpTENKbWNtOXRRWFIwY21saWRYUmxJaXdpZEc5QmRIUnlhV0oxZEdVaUxDSmZjMkYyWlVsdWMzUmhibU5sVUhKdmNHVnlkR2xsY3lJc0ltTnZibk4wY25WamRHOXlJaXdpWDNZaUxDSmxibUZpYkdWVmNHUmhkR2x1WnlJc0lsOWhkSFJ5YVdKMWRHVlViMUJ5YjNCbGNuUjVJaXdpWTNSdmNpSXNJbUYwZEhKV1lXeDFaU0lzSWw5d2NtOXdaWEowZVZaaGJIVmxWRzlCZEhSeWFXSjFkR1VpTENKd2NtOXdUbUZ0WlNJc0ltZGxkRkJ5YjNCbGNuUjVUM0IwYVc5dWN5SXNJbDl3Y205d1pYSjBlVlpoYkhWbFJuSnZiVUYwZEhKcFluVjBaU0lzSW5Ob2IzVnNaRkpsY1hWbGMzUlZjR1JoZEdVaUxDSmZkbUZzZFdWSVlYTkRhR0Z1WjJWa0lpd2lYMmhoYzFKbGNYVmxjM1JsWkZWd1pHRjBaU0lzSWw5bGJuRjFaWFZsVlhCa1lYUmxJaXdpZFhCa1lYUmxRMjl0Y0d4bGRHVWlMQ0p3WlhKbWIzSnRWWEJrWVhSbElpd2lhR0Z6VlhCa1lYUmxaQ0lzSWw5aGNIQnNlVWx1YzNSaGJtTmxVSEp2Y0dWeWRHbGxjeUlzSW5Ob2IzVnNaRlZ3WkdGMFpTSXNJbU5vWVc1blpXUlFjbTl3WlhKMGFXVnpJaXdpWDIxaGNtdFZjR1JoZEdWa0lpd2labWx5YzNSVmNHUmhkR1ZrSWl3aWRYQmtZWFJsWkNJc0lsOW5aWFJWY0dSaGRHVkRiMjF3YkdWMFpTSXNJbk5wZW1VaUxDSmZjSEp2Y0dWeWRIbFViMEYwZEhKcFluVjBaU0lzSW5OMFlXNWtZWEprVUhKdmNHVnlkSGtpTENKcmFXNWtJaXdpWVhOemFXZHVJaXdpWTJ4aGVub2lMQ0p3YkdGalpXMWxiblFpTENKcGJtbDBhV0ZzYVhwbGNpSXNJbkJ5YjNCbGNuUjVJaXdpY0hKdmRHOVBja1JsYzJOeWFYQjBiM0lpTENKd2NtOTBieUlzSW14bFoyRmplVkJ5YjNCbGNuUjVJaXdpYzNWd2NHOXlkSE5CWkc5d2RHbHVaMU4wZVd4bFUyaGxaWFJ6SWl3aVJHOWpkVzFsYm5RaUxDSkRVMU5UZEhsc1pWTm9aV1YwSWl3aVkyOXVjM1J5ZFdOMGFXOXVWRzlyWlc0aUxDSkRVMU5TWlhOMWJIUWlMQ0pqYzNOVVpYaDBJaXdpYzJGbVpWUnZhMlZ1SWl3aWMzUjViR1ZUYUdWbGRDSXNJbDl6ZEhsc1pWTm9aV1YwSWl3aWNtVndiR0ZqWlZONWJtTWlMQ0pqYzNNaUxDSnlaV1IxWTJVaUxDSmhZMk1pTENKcFpIZ2lMQ0owWlhoMFJuSnZiVU5UVTFKbGMzVnNkQ0lzSW5KbGJtUmxjazV2ZEVsdGNHeGxiV1Z1ZEdWa0lpd2lUR2wwUld4bGJXVnVkQ0lzSW5WelpYSlRkSGxzWlhNaUxDSm5aWFJUZEhsc1pYTWlMQ0pmYzNSNWJHVnpJaXdpWVdSa1UzUjViR1Z6SWl3aWNtVmtkV05sVW1sbmFIUWlMQ0oxYm5Ob2FXWjBJaXdpWDJkbGRGVnVhWEYxWlZOMGVXeGxjeUlzSW5KbGJtUmxjbEp2YjNRaUxDSmpjbVZoZEdWU1pXNWtaWEpTYjI5MElpd2lVMmhoWkc5M1VtOXZkQ0lzSW1Ga2IzQjBVM1I1YkdWeklpd2lZWFIwWVdOb1UyaGhaRzkzSWl3aWJXOWtaU0lzSW1Ga2IzQjBaV1JUZEhsc1pWTm9aV1YwY3lJc0ltMWhjQ0lzSWw5dVpXVmtjMU5vYVcxQlpHOXdkR1ZrVTNSNWJHVlRhR1ZsZEhNaUxDSlRZMjl3YVc1blUyaHBiU0lzSW5CeVpYQmhjbVZCWkc5d2RHVmtRM056VkdWNGRDSXNJbXh2WTJGc1RtRnRaU0lzSW1OdmJtNWxZM1JsWkVOaGJHeGlZV05ySWl3aWMzUjViR1ZGYkdWdFpXNTBJaXdpZEdWdGNHeGhkR1ZTWlhOMWJIUWlMQ0p5Wlc1a1pYSWlMQ0poSWl3aWFHRnpVbVZ1WkdWeVpXUWlMQ0p1WldWa2MxTmpiM0JwYm1jaUxDSm9iM04wSWl3aVptbHljM1JUWTI5d1pWSmxibVJsY2lJc0luSmxibVJsY2tOdmJuUmhhVzVsY2lJc0ltTnlaV0YwWlVSdlkzVnRaVzUwUm5KaFoyMWxiblFpTENKaGNIQmxibVJKYm5Sdklpd2liR2wwVW1WdVpHVnlJaXdpWkdWc1pYUmxJaXdpZFNJc0lsOGlMQ0pvSWl3aWJTSXNJbWNpTENKbUlpd2llU0lzSWxNaUxDSjNJaXdpWWlJc0lsQWlMQ0o0SWl3aVRpSXNJa01pTENKRklpd2lWQ0lzSWtFaUxDSldJaXdpVHlJc0lsVWlMQ0pOSWl3aVVpSXNJbXhwZEVoMGJXeFdaWEp6YVc5dWN5SXNJbW9pTENKTUlpd2ljU0lzSW5vaUxDSkpJaXdpSkNJc0lrSWlMQ0pYSWl3aVNDSXNJa1FpTENKbWFXNWhiR2w2WldRaUxDSllJaXdpV1NJc0lrb2lMQ0pzYVhSRmJHVnRaVzUwVm1WeWMybHZibk1pTENKSElpd2lTeUlzSWtZaUxDSlJJaXdpWkdsemNHRjBZMmhGZG1WdWRDSXNJa04xYzNSdmJVVjJaVzUwSWl3aVpHVjBZV2xzSWl3aVdpSXNJbk4wWVhKMGMxZHBkR2dpTENKMGRDSXNJbU5zYVdWdWRGZ2lMQ0pqYkdsbGJuUlpJaXdpZEdGeVoyVjBWRzkxWTJobGN5SXNJbVpwYm1RaUxDSnBaR1Z1ZEdsbWFXVnlJaXdpWTJoaGJtZGxaRlJ2ZFdOb1pYTWlMQ0psZENJc0luTjBJaXdpYVhRaUxDSjBiMU4wY21sdVp5SXNJbTUwSWl3aVpHbHpZV0pzWldRaUxDSmZaSEpoWjJkcGJtY2lMQ0pmWkhKaFoxTjBZWEowSWl3aVltbHVaQ0lzSWw5a2NtRm5JaXdpWDJSeVlXZEZibVFpTENKaWRYUjBiMjRpTENKb1lXNWtiR1VpTENKc2IyY2lMQ0p2Wm1aelpYUlFZWEpsYm5RaUxDSndjbVYyWlc1MFJHVm1ZWFZzZENJc0luTjBiM0JRY205d1lXZGhkR2x2YmlJc0lsOTBiM1ZqYUVsa1pXNTBhV1pwWlhJaUxDSnpkR0Z5ZEZnaUxDSnpkR0Z5ZEZraUxDSm5jbWxrSWl3aWNtOTFibVFpTENKa1pXeDBZVmdpTENKa1pXeDBZVmtpTENKa1pXWnBibVVpTENKeWRDSXNJbVZzWlcxbGJuUnpJaXdpWm1seVpVVjJaVzUwSWl3aVRHbDBVbVZ6YVhwaFlteGxJaXdpWDNKbGMybDZaU0lzSWw5eVpYTnBlbVZUZEdGeWRDSXNJbDl5WlhOcGVtVkZibVFpTENKbGRpSXNJbk4wWVhKMFYybGtkR2dpTENKamJHbGxiblJYYVdSMGFDSXNJbk4wWVhKMFNHVnBaMmgwSWl3aVkyeHBaVzUwU0dWcFoyaDBJaXdpZDJsa2RHZ2lMQ0pvWldsbmFIUWlMQ0pqYkdGemMwOXlSR1Z6WTNKcGNIUnZjaUlzSW14bFoyRmplVU4xYzNSdmJVVnNaVzFsYm5RaUxDSnpkR0Z1WkdGeVpFTjFjM1J2YlVWc1pXMWxiblFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVzlFVHl4VFFVRlRRU3hGUVVGWFF5eEZRVUZaUXl4RlFVRlJReXhGUVVGTFF5eEhRVU5vUkN4SlFVRXlTRU1zUlVGQmRraERMRVZCUVVsRExGVkJRVlZETEU5QlFWRkRMRVZCUVVsSUxFVkJRVWtzUlVGQlNVb3NSVUZCYTBJc1QwRkJWRVVzUlVGQlowSkJMRVZCUVU5TkxFOUJRVTlETEhsQ1FVRjVRbFFzUlVGQlVVTXNSMEZCVDBNc1JVRkRja2dzUjBGQmRVSXNhVUpCUVZwUkxGTkJRVzlFTEcxQ1FVRnlRa0VzVVVGQlVVTXNVMEZCZVVKS0xFVkJRVWxITEZGQlFWRkRMRk5CUVZOYUxFVkJRVmxETEVWQlFWRkRMRVZCUVV0RExGRkJRM0JJTEVsQlFVc3NTVUZCU1ZVc1JVRkJTV0lzUlVGQlYwOHNUMEZCVXl4RlFVRkhUU3hIUVVGTExFVkJRVWRCTEV0QlFWTlVMRVZCUVVsS0xFVkJRVmRoTEUxQlFVbE1MRWRCUVV0SUxFVkJRVWtzUlVGQlNVUXNSVUZCUlVrc1IwRkJTMGdzUlVGQlNTeEZRVUZKUkN4RlFVRkZTQ3hGUVVGUlF5eEZRVUZMVFN4SFFVRkxTaXhGUVVGRlNDeEZRVUZSUXl4TFFVRlRUU3hIUVVOb1NpeFBRVUZQU0N4RlFVRkpMRWRCUVV0SExFZEJRVXRETEU5QlFVOUxMR1ZCUVdWaUxFVkJRVkZETEVWQlFVdE5MRWRCUVVsQkxFVkRlRU42UkN4TlFVRk5UeXhGUVVGcFF5eHZRa0ZCV0VNc1VVRkRUaXhOUVVGNlFrRXNUMEZCVDBNc2NVSkJSVWhETEVsQlJFcEdMRTlCUVU5RExHVkJRV1ZGTERCQ1FXdENZa01zUlVGQll5eERRVUZEUXl4RlFVRlhReXhGUVVGUFF5eEZRVUZOTEZGQlEyaEVMRXRCUVU5RUxFbEJRVlZETEVkQlFVc3NRMEZEYkVJc1RVRkJUVU1zUlVGQlNVWXNSVUZCVFVjc1dVRkRhRUpLTEVWQlFWVkxMRmxCUVZsS0xFZEJRM1JDUVN4RlFVRlJSU3hKUTNaQ1NFY3NSVUZCVXl4VlFVRm5Ra01zUzBGQlMwTXNVMEZCV2tNc1NVRkJjMEpETEUxQlFVMHNUMEZMT1VORExFVkJRV0VzVlVGQlQwd3NWVUZEY0VKTkxFVkJRV3RDUXl4UFFVRlBMRWRCUVVkUUxFdEJRVlZMTEV0QlVUVkRMRTFCUVUxSExFVkJRMVJETEZsQlFWbERMRVZCUVZGRExFZEJRMmhDUXl4TFFVRkxReXhOUVVGUkxFZEJRMkpFTEV0QlFVdEVMRkZCUVZWQkxFVkJRMllzVFVGQlRVY3NSVUZCWjBJc1IwRkRhRUpETEVWQlFWRXNSMEZGVWtNc1JVRkJVME1zVTBGQlUwTXNhVUpCUVdsQ1VDeEZRVUZSVVN4UlFVRlRMRWxCUVd0RUxFMUJRVTBzUjBGSmJFZ3NTVUZCU1VNc1JVRkJaMElzUlVGRGFFSkRMRWRCUVZNc1JVRkRWRU1zUlVGQldTeEZRVU5vUWl4TlFVRk5ReXhSUVVGRlFTeEZRVUZUUXl4UlFVRlJOVU1zVDBGQlJVRXNTVUZCWVRoQ0xFVkJRM2hETEV0QlFVOVpMRVZCUVZreFF5eEhRVUZSTEVOQlEzWkNMRTFCUVUwMlF5eEZRVUZQVkN4RlFVRlBWU3hYUVVOd1FpeEhRVUZoTEU5QlFWUkVMRWRCVTBvc1IwRkVRVW9zU1VGRGMwSXNTVUZCYkVKSkxFVkJRVXRGTEZOQlFYZERMRU5CUXpkRExFZEJRVWxHTEVWQlFVdEhMR2RDUVVGcFFpeERRVU4wUWl4TlFVRk5ReXhGUVVGaFNpeEZRVUZMU1N4WlFVTnNRbXBFTEU5QlFVVkJMRWRCUVZkcFJDeEZRVTF1UWl4SlFVRkpReXhGUVVGUkxFVkJRMW9zU1VGQlN5eEpRVUZKTlVNc1JVRkJTU3hGUVVGSFFTeEZRVUZKVGl4RlFVRlJUU3hKUVVOd1FqWkRMRVZCUVZOR0xFVkJRVmN6UXl4SFFVRkhPRU1zUzBGNlEyWXNWVUV3UTFKR0xFbEJSMUlzUzBGQlQwRXNTMEZCVlN4SFFVRkhMRU5CUjJoQ0xFMUJRVTFITEVWQlFXZENWaXhGUVVGUlJDeEhRVVY0UWxVc1JVRkJUMFVzUlVGQmRVSkRMRXRCUVV0R0xFZEJRV1VzUjBGTmJFUkhMRVZCUVhOQ1NpeEZRVUZMU3l4alFYaEVja0lzVVVGNVJFNURMRVZCUVdsQ1lpeEZRVUZMWXl4aFFVRmhTQ3hIUVVONlExZ3NSVUZCUzJVc1owSkJRV2RDU2l4SFFVTnlRaXhOUVVGTlN5eEZRVUZWU0N4RlFVRmxTU3hOUVVGTmNFTXNSMEZEY2tOTkxFdEJRVXRETEUxQlFVMDRRaXhMUVVGTExFTkJRVVZETEV0QlFVMHNXVUZCWVhaQ0xFMUJRVUZCTEVWQlFVOVhMRXRCUVVGQkxFVkJRVTFVTEZGQlFWTnJRaXhKUVVNelJHNUNMRWRCUVdGdFFpeEZRVUZSTjBRc1QwRkJVeXhIUVVkcVFpeGhRVUZxUWpaRExFVkJRVXR2UWl4VlFVTk1PVUlzUlVGQlRUUkNMRXRCUVV0c1FpeEhRVU5ZVkN4RlFVRlBPRUlzV1VGQlkzSkNMRVZCUVV0T0xHTkJSemRDTEVkQlFYTkNMRWxCUVd4Q1RTeEZRVUZMUlN4VFFVRnhReXhEUVVNdlF5eE5RVUZOYjBJc1JVRkJUM1JDTEVWQlFVdHpRaXhMUVVOc1FpeEhRVUZKUVN4RlFVRkxReXhSUVVGUmFFUXNTVUZCVnl4RlFVRkhMRU5CUXpOQ0xFMUJRVTFwUkN4RlFVRlRlRUlzUlVGQlMzbENMRmRCUTJRelFpeEZRVUZWZDBJc1JVRkJTMHdzVFVGQlRYQkRMRWRCUTNKQ05rTXNSVUZCV1RWQ0xFVkJRVkV6UXl4UFFVRlRMRVZCUjI1RExFbEJRVXNzU1VGQlNVMHNSVUZCU1N4RlFVRkhRU3hGUVVGSmFVVXNSVUZCVjJwRkxFbEJRVXNzUTBGRGFFTXNTVUZCU1d0RkxFVkJRMEZETEVWQlFVazVRaXhGUVVGUmNrTXNSMEZEYUVJc1IwRkJWU3hMUVVGT2JVVXNSVUZEUVVRc1JVRkJVMFVzVVVGRlVpeERRVU5FTEUxQlFVMURMRVZCUVZGeVFpeEZRVUYxUWtNc1MwRkJTMnRDTEVkQlF6VkNMRTlCUVZaRkxFZEJRV3RDZUVJc1JVRkJVM2RDTEVWQlFVMHNSMEZ5UmpkQ0xGZEJjMFpLUml4RlFVRkpRU3hGUVVGRmFrUXNUVUZCVFN4RlFVRkhiVVFzUlVGQlRXeERMRTlCUVZOclF5eEZRVUZOTEVkQlEyaERRU3hGUVVGTkxFZEJRVWR1UkN4TlFVRk5MRWRCUVVsdlJDeEhRVUVyUWtRc1JVRkJUU3hKUVVWb1JVZ3NSVUZCVTI1RExGTkJRVk4zUXl4bFFVRmxTaXhIUVVWeVEwb3NSVUZCVDFNc1lVRkJZVTRzUlVGQlVUTkNMRWRCUXpWQ1lpeExRVUZMUXl4TlFVRk5PRUlzUzBGQlN5eERRVUZGUXl4TFFVRk5MRTlCUVZGMlFpeFJRVUZUUVN4SlFVbHNRaXhMUVVGMlFrVXNSVUZCVVRSQ0xFbEJRMUpHTEVWQlFVOVRMR0ZCUVdGS0xFbEJRV2RDTjBJc1IwRkRjRU5ZTEVWQlFXTTJRaXhMUVVGTGJFSXNTVUZIYmtKQkxFVkJRVXR6UWl4TFFVRlBlRUlzUlVGQlVUUkNMRWRCUjNoQ04wSXNSMEZCWVRaQ0xGRkJSMmhDTEVkQlFYTkNMRWxCUVd4Q01VSXNSVUZCUzBVc1UwRkRWaXhIUVVGSlJpeEZRVUZMYzBJc1QwRkJVeTlETEVWQlFWRXNRMEZEZEVJc1RVRkJUV2xFTEVWQlFWTjRRaXhGUVVGTGVVSXNWMEZMVXl4UFFVRjZRbnBDTEVWQlFVdHJReXhwUWtGQk5FSjBReXhKUVVGVlJDeEpRVU16UTBNc1NVRkRRVFJDTEVWQlFVOVRMR0ZCUVdGS0xFbEJRV2RDTjBJc1NVRkZlRU5NTEVWQlFXZENReXhGUVVOb1FsUXNTMEZCUzBNc1RVRkJUVGhDTEV0QlFVc3NRMEZCUlVNc1MwRkJUU3hQUVVGUmRrSXNUVUZCUVVFc1NVRkhVQ3hQUVVGeVFra3NSVUZCU3pOQ0xGbEJRMHd5UWl4RlFVRkxjMElzUzBGQlR5eEpRVWRhYWtNc1JVRkJZelpDTEV0QlFVdHNRaXhIUVVOdVFrb3NTMEZGU2tNc1VVRkZReXhEUVVORUxFbEJRVWx3UXl4SFFVRkxMRVZCUTFRc1RVRkJiVVFzUzBGQk0wTkJMRVZCUVVsMVF5eEZRVUZMYzBJc1MwRkJTME1zVVVGQlVXaEVMRVZCUVZGa0xFVkJRVWtzUzBGTGRFTXdRaXhMUVVGTFF5eE5RVUZOT0VJc1MwRkJTeXhEUVVGRlF5eExRVUZOTEU5QlFWRjJRaXhQUVVGUkxFbEJRM2hEUXl4VlFXcElVazRzUlVGQlR6aENMRmxCUVdNdlFpeEZRVUZOTmtNc1RVRjFTRzVETEVsQlFVc3NUVUZCVFM5RUxFdEJRVXRwUWl4RlFVTmFha0lzUlVGQlJYRkVMRmRCUVZkdVJDeFpRVUZaUml4SlFVbHlReXhOUVVGTmEwTXNSVUZCVnl4RFFVRkRPRUlzUlVGQlMwTXNTMEZEYmtJc1RVRkJUWHBETEVWQlFWRjNReXhGUVVGSmFrWXNUMEZCVTJ0R0xFVkJRVTlzUml4UFFVTnNReXhQUVVGUGVVTXNSMEZCVXl4SFFVRkxkME1zUlVGQlNYcEVMRTFCUVUxcFFpeExRVUZYZVVNc1IwRkZha05ETEVWQlFYZENReXhKUVVGNVFpeEpRVUZvUWtFc1JVRkJTek5ETEUxQlIzUkRhVU1zUlVGQlpTeEpRVUZOY2tNc1UwRkJVMmRFTEdOQlFXTXNTVUV5UWpWREwwSXNSVUZGWWl3MlNVTnVURThzVTBGQlUyZERMRVZCUVhkQ1F5eEZRVUZWY2tRc1IwRkRPVU1zVFVGQlVVZ3NVMEZCVTFFc1VVRkJSVUVzUjBGQlUwNHNUVUZCUlVFc1IwRkJWWE5FTEVWQlEyeERia1FzUlVGQlUwTXNVMEZCVTBNc2FVSkJRV2xDUXl4RlFXNUNjRUlzU1VGdFFpdERMRTFCUVUwc1IwRkRNVVVzU1VGQlNVY3NSVUZCV1RoRExFVkJRU3RDZGtRc1IwRkRNME50UkN4RlFVRlBia1FzUlVGQlRWTXNSMEZEWWl0RExFZEJRV0VzUlVGRFlrTXNSVUZCWXl4RlFVTnNRaXhOUVVGTlF5eEZRVUV3UWl4SFFVTm9ReXhKUVVGSlF5eEZRVUZ6UWl4TFFVTXhRaXhMUVVGUGVFUXNSVUZCVDFVc1dVRkJXU3hEUVVOMFFqSkRMRWxCUTBFc1RVRkJUVFZETEVWQlFVOVVMRVZCUVU4NFFpeFpRV2xDY0VJc1NVRm1TWEpDTEVWQlFVdHJReXhyUWtGQmIwSmhMRWxCUTNwQ1FTeEZRVUZ6UWl4TlFVZDBRakZFTEVWQlFXTXlSQ3hKUVVGSmFFUXNTMEZEYkVJNFF5eEZRVUYzUWpWQ0xFdEJRVXRzUWl4SFFVVkVMRTlCUVhoQ0swTXNTVUZEUVVFc1JVRkJjMEl2UXl4SlFVbEdMRTlCUVhoQ0swTXNSMEZEUVVZc1UwRkZXUzlGTEVsQlFWUjVSU3hIUVVGelFrRXNSVUZCU3pORExGRkJRVlZuUkN4SFFVZDRRMHdzUlVGQlN6TkRMRTFCUVdkRExFOUJRWGhDYlVRc1IwRkJaME1zUlVGQlNWSXNSVUZCU3pORExFMUJRVkZwUkN4RlFVVTVSR2hFTEVWQlFWazRReXhGUVVFclFuWkVMRVZCUVU5VExFZEJRMnhFTUVNc1JVRkJUMjVFTEVWQlFVMVRMRWRCUjNKQ2FVUXNSVUZCZDBKSExGRkJRVk0zUlN4SFFVRk5RU3hGUVVGRmNVUXNWMEZCVjI1RUxGbEJRVmxHTEVsQlJYQkZMRTFCUVUwNFJTeEZRVUZqYkVRc1NVRkRhRUlzU1VGQlNVc3NSVUZCTWtJc1MwRkJiRUpNTEVWQlFVdEZMRk5CUVhGRUxFVkJRVWtzUlVGRE0wVXNUVUZCVFZnc1JVRkJVME1zVTBGQlUwTXNhVUpCUVdsQ1R5eEZRVEZFY0VJc1NVRXdSRFJETEUxQlFVMHNSMEZEZGtVc1MwRkJUMVFzUlVGQlQxVXNXVUZEVmtrc1NVRkZTaXhQUVVGUFFTeEhRVVZNYzBNc1JVRkJhVU1zUTBGQlEzWkVMRVZCUVU4clJDeEhRVUZoTEV0QlEzaEVMRWxCUVVzc1NVRkJTVEZHTEVWQlFVa3dSaXhGUVVGaExFVkJRVWN4Uml4RlFVRkpNa0lzUlVGQlRXcERMRTlCUVZGTkxFbEJRVXNzUTBGRGFFUXNUVUZCVFRoRkxFVkJRVTl1UkN4RlFVRk5NMElzUjBGRGJrSXNSMEZCU1RaRkxFVkJRWEZDUXl4SFFVTnlRaXhQUVVGUE9VVXNSVUZIWml4UFFVRlJMRWRETTBWYUxFMUJRVTB5Uml4RlFVRmhMRWxCUVVsRExGRkJPRU5XUXl4RlFVRmxReXhIUVVOS0xHMUNRVUZPUVN4SFFVRnZRa2dzUlVGQlYwb3NTVUZCU1U4c1IwTXpRM2hEUXl4RlFVRlhMRWRCU1ZoRExFVkJRVlVzUjBORGFFSXNUVUZCVFVNc1JVRkRWREZGTEZsQlFWa3dSQ3hGUVVGVmFVSXNSVUZCVjBNc1IwRkROMEo2UlN4TFFVRkxNRVVzVVVGQlZTeEhRVU5tTVVVc1MwRkJTM1ZFTEZOQlFWZEJMRVZCUTJoQ2RrUXNTMEZCUzNkRkxGVkJRVmxCTEVWQlEycENlRVVzUzBGQlMzbEZMRkZCUVZWQkxFVkJSVzVDTlVVc1QwRkJUMlVzUjBGRFNDeEpRVUZKZEVNc1JVRkJTU3hGUVVOU0xFbEJRVXNzVFVGQlRUaEZMRXRCUVZGd1JDeExRVUZMTUVVc1lVRkRVQzlHTEVsQlFWUjVSU3hIUVVOQlFTeEZRVUZMZFVJc1UwRkJVeTlFTEVWQlFVOTBReXhKUVVWNlFrRXNTVUZGU2l4SlFVRkxMRTFCUVUwNFJTeExRVUZSY0VRc1MwRkJTekJGTEdGQlExQXZSaXhKUVVGVWVVVXNSMEZEUVVFc1JVRkJTM2RDTEZOQlNXcENMMFVzVTBGelEwa3NUVUZCVFdkR0xFVkJRVmR5Unl4RlFVTmlkMElzUzBGQlMzVkVMRk5CUVZONFJDeFJRVUZSVVN4UlFVRlJkVVVzVjBGQlZTeEhRVU40UTNwRkxGTkJRVk13UlN4WFFVRlhMMFVzUzBGQlMzVkVMRk5CUVZONFJDeFJRVUZSVVN4VFFVRlRMRWRCUTJwRVNpeEZRVUZSTEVkQlExSkdMRVZCUVZGRUxFdEJRVXQxUkN4VFFVRlRkRVFzVFVGRmRFSkhMRVZCUVZORExGTkJRVk5ETEdsQ1FVRnBRblZGTEVWQlFWVXNTVUZCYTBRc1RVRkJUU3hIUVVNelJ5eEpRVVZKZWtJc1JVRkdRVEZETEVWQlFWa3NSVUZEV2l0RExFVkJRVmtzUlVGRldqVkRMRVZCUVU5VUxFVkJRVTlWTEZkQlJXeENMRXRCUVU5S0xFVkJRVmxVTEVWQlFVMXFReXhSUVVWeVFpeEhRVVJCYjBZc1JVRkJUMjVFTEVWQlFVMVRMRWRCUTFKNVF5eEZRVUZ4UWtNc1IwRkJNVUlzUTBGUlFTeExRVUZQU3l4RlFVRlpUQ3hGUVVGTE0wTXNUMEZEY0VKblJDeEpRVU56UWl4aFFVRnNRalZETEVWQlFVdHRSU3hYUVVOTU4wVXNSVUZCVFRSQ0xFdEJRVXRzUWl4SFFVTllWQ3hGUVVGUE9FSXNXVUZCWTNKQ0xFVkJRVXRPTEZOQlJVc3NVVUZCT1VKTkxFVkJRVTlVTEVWQlFVOVZMR05CUzJaV0xFVkJRVTg0UWl4WlFVRmpMMElzUlVGQlRUWkRMRTFCUXpOQ2JrTXNSVUZCVDFRc1JVRkJUMVVzV1VGSmRFSXNSMEZCYTBJc1UwRkJaSE5ETEVWQlFVdHdRaXhMUVVGcFFpeERRVU4wUWl4TlFVRk5iMElzUlVGQlQzQkVMRXRCUVV0M1JTeFZRVUZWVXl4eFFrRkJjVUpxUml4TFFVRkxlVVVzVTBGRGRFUnlRaXhGUVVGTE9FSXNaMEpCUVdkQ2NrVXNSVUZCUzJ0RExHbENRVU14UWk5RExFdEJRVXN3UlN4UlFVRlJNME1zUzBGQlMzRkNMRkZCUjJ4Q2NFUXNTMEZCU3pCRkxGRkJRVkV6UXl4UlFVRlJMMElzUzBGQlMzZEZMRlZCUVZWWExESkNRVUV5UW5SRkxFVkJRVTExUXl4RlFVRkxhRU1zUzBGQlRXZERMRVZCUVV0NlF5eFJRVUZUV0N4TFFVRkxlVVVzVlVGRmRrY3ZSQ3hUUVM5Q1NWWXNTMEZCU3pCRkxGRkJRVkV6UXl4VlFVRkxjRVFzUjBGRGJFSXJRaXhKUVc5RFVpeFBRVXBKYkVNc1NVRkRRVFpDTEZOQlFWTXJSU3hWUVVGVlVDeEhRVU51UW01SExHVkJRV1V5Unl4UlFVRlJVaXhKUVVWd1FrRXNSME51U0dZc1RVRkJUVk1zUlVGQlowSXNTVUZCU1d4SExFdEJTMjVDTEUxQlFVMXRSeXhGUVVOVU1VWXNXVUZCV1dNc1JVRkJVME1zUlVGQlVXOUNMRVZCUVUxM1F5eEhRVU12UW5oRkxFdEJRVXRYTEZGQlFWVkJMRVZCUTJaWUxFdEJRVXRaTEU5QlFWTkJMRVZCUTJSYUxFdEJRVXRuUXl4TFFVRlBRU3hGUVVOYWFFTXNTMEZCUzNkRkxGVkJRVmxCTEVWQlMzSkNNMFVzVlVGRFNTeE5RVUZOTWtZc1JVRkJTWGhHTEV0QlFVdFhMRkZCUVZFelF5eFBRVUZUTEVWQlEyaERMRWxCUVVsNVNDeEZRVUZQTEVkQlExQkRMRWRCUVcxQ0xFVkJRM1pDTEVsQlFVc3NTVUZCU1hCSUxFVkJRVWtzUlVGQlIwRXNSVUZCU1d0SUxFVkJRVWRzU0N4SlFVRkxMRU5CUTNoQ0xFMUJRVTF0UlN4RlFVRkpla01zUzBGQlMxY3NVVUZCVVhKRExFZEJhMEpxUW5GSUxFVkJRV05zUkN4RlFVRkZiVVFzV1VGQldTeFhRVWxzUTBZc1IwRkJiMEpETEVkQlFXVXNSMEZCUzBRc1MwRkRSeXhKUVVGMlEycEVMRVZCUVVWTUxGRkJRVkVzVTBGQlQzVkVMRVZCUVdNc1IwRkpia01zVFVGQlRVVXNSVUZCYVVKMlJTeEZRVUYxUWtNc1MwRkJTMnRDTEVkQlR5OURaMFFzUjBGT2JVSXNUMEZCYmtKSkxFVkJUVkZ3UkN4SFFVRkxhVVFzUlVGQmJVSktMRVZCUVdkQ04wWXNSMEZOZUVOblJDeEZRVUZGY1VRc1QwRkJUeXhGUVVGSFJDeEZRVUZsY0VZc1QwRkJVMjlHTEVWQlFXVXNSMEZEZGtSQkxFVkJRV1VzUjB4d1JFTXNVVXR2UkRKQ1FTeEZRVUZsTEVkQlF6RkVla2NzUlVGSldpeFBRVVJCY1Vjc1IwRkJVWHBHTEV0QlFVdFhMRkZCUVZFMlJTeEhRVU5rUXl4RlFVVllOVVlzY1VKQlEwa3NUVUZCVFRCRUxFVkJRVmRzUkN4VFFVRlRNRVlzWTBGQll5eFpRVVY0UXl4UFFVUkJlRU1zUlVGQlUzbERMRlZCUVZsb1J5eExRVUZMYVVjc1ZVRkRia0l4UXl4SFFWVlNMRTFCUVUweVF5eFZRVUV3UWxnc1JVRkRia014Uml4VlFVTkpMRTFCUVU4c1VVRkJVWE5ITEUxQlFVMUdMR3RDUVVWNlFuQkhMSEZDUVVOSkxFMUJRVTB3UkN4RlFVRlhORU1zVFVGQlRVTXNjVUpCUTJwQ04wWXNSVUZCVldkRUxFVkJRVk5vUkN4UlFVTnVRamhHTEVWQlFXRTVSaXhGUVVGUkswWXNWMEZITTBJc1QwRkdRUzlHTEVWQlFWRndRaXhaUVVGWmEwZ3NSMDVzUmtNc1JVRkJRM1pJTEVWQlFWZERMRVZCUVU5RExFVkJRVTBzUzBGQlRYVklMRVZCUVZNc1VVRkRha1VzUzBGQlQzaElMRWxCUVZWRExFZEJRVXNzUTBGRGJFSXNUVUZCVFVNc1JVRkJTVVlzUlVGQlRVY3NXVUZEYUVKS0xFVkJRVlZuUlN4aFFVRmhMMFFzUlVGQlQzZElMRWRCUXpsQ2VFZ3NSVUZCVVVVc1NVMHJSVkoxU0N4RFFVRmpha2NzUlVGQlV6aEdMRVZCUVZkRExGbEJRek5DTDBNc1IwTjJSbElzVFVGQlRXdEVMRVZCUVdWRExFZEJRMDRzVDBGQlZrRXNTMEZEWlN4cFFrRkJWa0VzUjBGQmRVTXNiVUpCUVZaQkxFZEJSV3BEUXl4RlFVRmpSQ3hIUVVOb1FrVXNUVUZCVFVNc1VVRkJVVWdzVDBGRlpFRXNTVUZCVTBFc1JVRkJUVWtzVDBGQlQwTXNWMEZQTVVJc1RVRkJUVU1zUlVGRFZHNUlMRmxCUVZsRkxFVkJRVk54UWl4RlFVRk5WQ3hIUVVOMlFsZ3NTMEZCUzJsSUxFOUJRVkVzUlVGRFltcElMRXRCUVV0RUxGRkJRVlZCTEVWQlEyWkRMRXRCUVV0dlFpeExRVUZQUVN4RlFVTmFjRUlzUzBGQlMxY3NVVUZCVlVFc1JVRkRabGdzUzBGQlMwTXNUVUZCVVN4SFFVTmlMRWxCUVVzc1NVRkJTVE5DTEVWQlFVa3NSVUZCUjBFc1JVRkJTWEZETEVWQlFWRXpReXhQUVVGVExFVkJRVWROTEVsQlEzQkRNRUlzUzBGQlMwTXNUVUZCVFROQ0xFZEJRVXN3UWl4TFFVRkxhMGdzWTBGTk4wSnlTQ3hqUVVOSkxFOUJRVThzU1VGQlNYTklMRVZCUVdOdVNDeE5RVVUzUWtnc1dVRkRTU3hOUVVGTll5eEZRVUZWV0N4TFFVRkxWeXhSUVVObU5rVXNSVUZCU1RkRkxFVkJRVkV6UXl4UFFVRlRMRVZCUXpOQ0xFbEJRVWx2U2l4RlFVRlBMRWRCUTFnc1NVRkJTeXhKUVVGSk9Va3NSVUZCU1N4RlFVRkhRU3hGUVVGSmEwZ3NSVUZCUjJ4SUxFbEJRVXNzUTBGRGVFSTRTU3hIUVVGUmVrY3NSVUZCVVhKRExFZEJRMmhDTEUxQlFVMDRSU3hGUVVGUGNFUXNTMEZCUzBNc1RVRkJUVE5DTEVkQlEzaENMRkZCUVdGTExFbEJRVlI1UlN4RlFVRnZRaXhEUVVOd1FpeE5RVUZOYVVVc1JVRkJTV3BGTEVWQlFVdHpSQ3hOUVVObUxFZEJRVWxFTEVWQlFWbFpMRXRCUVU5V0xFVkJRVmRWTEVkQlF6bENSQ3hIUVVGeFFpeHBRa0ZCVGtNc1JVRkJhVUpCTEVWQlFWZEJMRVZCUVZBNVNDeFJRVWR3UXl4SlFVRkxMRTFCUVUwclNDeExRVUZMUkN4RlFVTmFSQ3hIUVVGeFFpeHBRa0ZCVGtVc1JVRkJhVUpCTEVWQlFWZEJMRVZCUVZBdlNDeEpRVTF3UkN4UFFVUkJOa2dzUjBGQlVYcEhMRVZCUVZFMlJTeEhRVU5VTkVJc1JVRkZXSFpJTEZOQlExRkhMRXRCUVV0cFNDeFJRVU5NYWtnc1MwRkJTMmxJTEU5QlFWRXNSVUZEWW1wSUxFdEJRVXRFTEZGQlFWRjNTQ3hoUVVGaGRrZ3NTMEZCUzI5Q0xFdEJRVTF3UWl4TFFVRkxkMGdzWlVGUEwwTXNUVUZCVFV3c1JVRkRWSFJJTEZsQlFWazBTQ3hIUVVOU2VrZ3NTMEZCU3pCSExGZEJRVkV2U0N4RlFVTmljVUlzUzBGQlMzbElMRlZCUVZsQkxFVkJSWEpDTlVnc1UwRkJVelpITEVkQlEwUkJMRWxCUVZWeVF5eEhRVUZqYjBNc1JVRkJXVU1zU1VGQlZVRXNTVUZCVlRGSExFdEJRVXN3Unl4UlFVTTNSREZITEV0QlFVc3dSeXhOUVVGUlFTeEZRVWxTZGtNc1JVRkJXWFZETEV0QlEySXhSeXhMUVVGTGVVZ3NWVUZCVlZJc1QwRkJVU3hKUVVsdVEzQklMRk5CUTBrc1MwRkJUM05GTEVWQlFWbHVSU3hMUVVGTE1FY3NVVUZCVVN4RFFVTTFRaXhOUVVGTlowSXNSVUZCV1RGSUxFdEJRVXN3Unl4TlFVTjJRakZITEV0QlFVc3dSeXhOUVVGUmNrTXNSVUZEWW5GRUxFVkJRVlV4U0N4TlFVVldRU3hMUVVGTE1FY3NVVUZCVlhKRExFZEJSMjVDY2tVc1MwRkJTM2xJTEZWQlFWVTNReXhWUVZkb1FpeE5RVUZOSzBNc1JVRkRWRGxJTEZsQlFWazBSU3hIUVVOU2VrVXNTMEZCU3pCSExGZEJRVkV2U0N4RlFVTmljVUlzUzBGQlN6UklMRzlDUVVGcFFtcEtMRVZCUTNSQ2NVSXNTMEZCUzNsRkxGRkJRVlZCTEVWQlQyNUNOVVVzVjBGQlYyWXNSMEZEVUd0Q0xFdEJRVXMyU0N4VlFVRlpMMGtzUlVGQlZXZEtMRmxCUVZsd1JpeExRVU4yUXpGRExFdEJRVXNyU0N4UlFVRlZha29zUlVGQlZXZEtMRmxCUVZsd1JpeExRVk42UXpkRExHZENRVUZuUW0xSkxFZEJRMXBvU1N4TFFVRkxOa2dzVlVGQldVY3NSVUZEYWtKb1NTeExRVUZMSzBnc1VVRkJWVU1zUlVGQlNUbEpMRmxCVDNaQ1Z5eGxRVUZsZFVRc1IwRkRXRUVzUlVGQlN6WkZMRk5CUVZOcVNTeExRVUZMTmtnc1ZVRkJXVzVHTEV0QlF5OUNWU3hGUVVGTE5rVXNVMEZCVTJwSkxFdEJRVXNyU0N4UlFVRlZja1lzUzBGUGFrTTNReXhuUWtGQlowSnRTU3hIUVVOYVFTeEZRVUZKUXl4VFFVRlRha2tzUzBGQlN6WklMRlZCUVZsdVJpeExRVU01UWpGRExFdEJRVXNyU0N4UlFVRlZReXhGUVVGSlJDeFJRVU51UWtNc1JVRkJTVVFzVVVGQlZTOUlMRXRCUVVzMlNDeFZRVVYyUW1oSkxGTkJRVk0yUnl4SFFVTk1NVWNzUzBGQlN6UklMR1ZCUVdsQ2JFSXNSVUZGTVVJM1J5eFRRVU5KTEVkQlFXdERMRTlCUVRsQ1J5eExRVUZMTmtnc1ZVRkJWWFpHTEZkQlEyWXNUMEZGU2l4TFFVRlBOa0lzUlVGQldXNUZMRXRCUVVzMFNDeHBRa0ZCYVVJc1EwRkRja01zVFVGQlRVWXNSVUZCV1RGSUxFdEJRVXMwU0N4bFFVTjJRalZJTEV0QlFVczBTQ3hsUVVGcFFuWkVMRVZCUTNSQ2NVUXNSVUZCVlRGSUxFMUJSV1FzVFVGQlRUQkhMRVZCUVZFeFJ5eExRVUZMTkVnc1pVRkRabXhDTEVsQlFWVnlReXhKUVVkV2IwTXNSVUZCV1VNc1IwRkRVa0VzU1VGQlZURkhMRXRCUVVzd1J5eFBRVU5tTVVjc1MwRkJTMnRKTEdGQlFXRjRRaXhIUVVkcVFrRXNZVUZCYVVKdVFpeEZRVU4wUW5aR0xFdEJRVXR0U1N4MVFrRkJkVUo2UWl4SFFVVjJRa0VzWVVGQmFVSXdRaXhMUVVOMFFuQkpMRXRCUVV0eFNTeGhRVUZoTTBJc1IwRkZZa01zUlVGQlYwUXNSMEZEYUVJeFJ5eExRVUZMYzBrc2FVSkJRV2xDTlVJc1IwRkZha0pCTEVsQlFWVndReXhIUVVObWRFVXNTMEZCU3pCSExFMUJRVkZ3UXl4RlFVTmlkRVVzUzBGQlMzVkpMRk5CU1V4MlNTeExRVUZMYTBrc1lVRkJZWGhDTEVsQlJ6RkNOMGNzVTBGQlUyZENMRWRCUTB4aUxFdEJRVXNyU0N4UlFVRlJla1lzVjBGQlYxRXNZVUZCWVdwRExFVkJRVTFpTEV0QlFVc3JTQ3hUUVVWd1JHeEpMR0ZCUVdFMlJ5eEhRVU5NTVVjc1MwRkJTekJITEZGQlFWVkJMRWxCUjI1Q01VY3NTMEZCUzNWSkxGRkJRMHgyU1N4TFFVRkxhVWtzVTBGQlUzWkNMRWRCUTJReFJ5eExRVUZMTUVjc1RVRkJVVUVzUjBGRmFrSTNSeXhoUVVGaE5rY3NSMEZEVkN4TlFVRk5OMFlzUlVGQlQySXNTMEZCU3paSUxGVkJRVlV6U1N4WlFVbDBRbk5LTEVWQlFXbERMR2xDUVVoMlF6bENMRVZCUVdsQ0xFMUJRVlJCTEVWQlFXZENMRWRCUVV0QkxFZEJSM0ZDUVN4RlFVRmxRU3hGUVVGUWJrZ3NSMEZEZEVSelFpeEpRVUZUWWl4TFFVRkxLMGdzVVVGQlVXaEdMR2xDUVVOS0xFbEJRV3hDYkVNc1JVRkJTMFVzVTBGSlRFWXNSVUZCUzNOQ0xFdEJRVTl4Unl4RlFVZGFlRWtzUzBGQlMzRkpMR0ZCUVdGb1NTeFRRVUZUZDBNc1pVRkJaVEpHTEVsQlJUbERlRWtzUzBGQlN6QkhMRTFCUVZGQkxFVkJSV3BDTjBjc2RVSkJRWFZDTmtjc1IwRkRia0lzVFVGQlRXNUVMRVZCUVZkMlJDeExRVUZMZVVVc1VVRkJVV2RGTEdkQ1FVRm5RaTlDTEVkQlF6bERMRWRCUVVreFJ5eExRVUZMTUVjc2FVSkJRV2xDYmtNc1IwRkRkRUoyUlN4TFFVRkxNRWNzVFVGQlRXNUVMRmRCUVdGQkxFVkJRM2hDZGtRc1MwRkJTekJITEUxQlFVMW5ReXhQUVVGUGFFTXNSVUZCVFRsR0xGbEJSWFpDTEVOQlMwUXNUVUZCVFN0SUxFVkJRVmNzU1VGQlNYQkZMRVZCUVdsQ2FFSXNSVUZCVlcxRUxFVkJRVTFzUXl4VlFVRlhlRVVzUzBGQlMzbEZMRk5CUTJoRlNTeEZRVUZYT0VRc1JVRkJVME1zVTBGRE1VSkVMRVZCUVZORUxFOUJRVTlvUXl4RlFVRk5PVVlzVVVGRGRFSmFMRXRCUVV0eFNTeGhRVUZoZUVRc1IwRkRiRUkzUlN4TFFVRkxNRWNzVFVGQlVXbERMRWRCUjNKQ09Va3NhVUpCUVdsQ05rY3NSMEZWVWtVc1RVRkJUVU1zVVVGQlVUZEhMRXRCUVVzd1J5eFRRVU53UWpGSExFdEJRVXN3Unl4TlFVRlJMRWRCUTJJeFJ5eExRVUZMZFVrc1UwRkpWQ3hOUVVGTlRTeEZRVUZaTjBrc1MwRkJTekJITEUxQlEzWkNMRWxCUTBsdlF5eEZRVVJCY0Vrc1JVRkJXU3hGUVVWb1FpeEpRVUZMTEUxQlFVMXhTU3hMUVVGUmNrTXNSVUZGWm05RExFVkJRVmRFTEVWQlFWVnVTU3hSUVVWS0wwSXNTVUZCWW0xTExFbEJRMEZCTEVWQlFWY3NTVUZCU1c1Q0xFVkJRVk16U0N4TFFVRkxlVVVzVTBGRE4wSnZSU3hGUVVGVk9VY3NTMEZCU3l0SExFZEJRMGNzU1VGQlpIQkpMRVZCUTBGdlNTeEZRVUZUUlN4bFFVRmxhRW9zVFVGSGVFSTRTU3hGUVVGVFJ5eG5Ra0ZCWjBKS0xFVkJRVlZ1U1N4RlFVRlpMRXRCUjNaRWIwa3NSVUZCVTI1RkxGTkJRVk52UlN4SFFVTnNRa1FzUlVGQlUyeEZMRk5CUTFSc1JTeEpRVVZCUVN4RlFVRlpiVWtzUlVGQlZUZExMRk5CUlhSQ05rc3NSVUZCVlRkTExFOUJRVk13UXl4RlFVTnVRbFlzUzBGQlMzVkpMRTFCUVUxUExFZEJRVmxCTEVWQlFWTm1MRlZCUjNoRGJFa3NUVUZCVFdkSkxFVkJRVmszU0N4TFFVRkxOa2dzVjBGRGJrSm9TaXhGUVVGWmJVSXNTMEZCU3paSUxGVkJRVlYyUml4WFFVRlpkVVlzUlVGQlZUTkpMRmxCUVdGakxFdEJRVXNyU0N4VlFWVndSU3hOUVVGTmJVSXNSVUZEVkhKS0xGbEJRVmxGTEVWQlFWTnhRaXhGUVVGTlZDeEhRVWQyUWl4SFFVWkJXQ3hMUVVGTE1FY3NWMEZCVVM5SUxFVkJRMkp4UWl4TFFVRkxORWdzYjBKQlFXbENha29zUlVGRFF5eEpRVUZ1UW1kRExFVkJRVkV6UXl4UlFVRXJRaXhMUVVGbU1rTXNSVUZCVVN4SlFVRTBRaXhMUVVGbVFTeEZRVUZSTEVkQlEzSkVMRTFCUVZWM1NTeE5RVUZOTERKRVFVVndRbTVLTEV0QlFVdEVMRkZCUVZWQkxFVkJRMlpETEV0QlFVdHZRaXhMUVVGUFFTeEZRVU5hY0VJc1MwRkJTMWNzVVVGQlZVRXNSVUZGYmtKa0xGTkJRVk0yUnl4SFFVTk1NVWNzUzBGQlN6UklMR1ZCUVdsQ2JFSXNSVUZGTVVJM1J5eFRRVU5KTEV0QlFVOXpSU3hGUVVGWmJrVXNTMEZCU3pSSUxHbENRVUZwUWl4RFFVTnlReXhOUVVGTlJpeEZRVUZaTVVnc1MwRkJTelJJTEdWQlEzWkNOVWdzUzBGQlN6UklMR1ZCUVdsQ2RrUXNSVUZEZEVKeFJDeEZRVUZWTVVnc1RVRkZaQ3hIUVVGSlFTeExRVUZMTkVnc2FVSkJRVzFDZGtRc1JVRkRlRUlzVDBGRlNpeE5RVUZOY1VNc1NVRkJWVEZITEV0QlFVczBTQ3hsUVVOcVFqVklMRXRCUVVzd1J5eFJRVUZWUVN4SlFVTllRU3hGUVVOQk1VY3NTMEZCUzBRc1VVRkJVWGRJTEdGQlFXRjJTQ3hMUVVGTGIwSXNTMEZCVFN4SlFVZHlRM0JDTEV0QlFVdEVMRkZCUVZFMlFpeG5Ra0ZCWjBJMVFpeExRVUZMYjBJc1RVRkZkRU53UWl4TFFVRkxNRWNzVFVGQlVVRXNSMEZGYWtJeFJ5eExRVUZMTkVnc1pVRkJhVUoyUkN4SFFWbDJRaXhOUVVGTkswVXNWVUZCTUVKd1F5eEZRVU51UTI1SUxGbEJRVmxGTEVWQlFWTnhRaXhGUVVGTlZDeEhRVU4yUW5kR0xFMUJRVTF3Unl4RlFVRlRjVUlzUlVGQlRWUXNSMEZEY2tKWUxFdEJRVXR4U2l4UFFVTnRRaXhKUVVGdVFqRkpMRVZCUVZFelF5eFJRVUVyUWl4TFFVRm1Na01zUlVGQlVTeEpRVUUwUWl4TFFVRm1RU3hGUVVGUkxFZEJSVGxFWkN4alFVTkpMRTlCUVU4c1NVRkJTWGxLTEVWQlFXRjBTaXhOUVVVMVFrZ3NXVUZEU1N4UFFVRkpSeXhMUVVGTGNVb3NUMEZEUlhKS0xFdEJRVXRETEUxQlFVMHNSMEZCUjNsSExFMUJSV3hDVUN4TlFVRk5jVUlzV1VGRmFrSXpTQ3hUUVVOUlJ5eExRVUZMYVVnc1VVRkRUR3BJTEV0QlFVdHBTQ3hQUVVGUkxFVkJSV0pxU0N4TFFVRkxSQ3hSUVVGUlF5eExRVUZMYjBJc1RVRkJVWEJDTEV0QlFVdDNTQ3hqUVVsd1F5eE5RVUZOT0VJc1ZVRkJjVUp1UXl4SFFVMXNReXhKUVVGSmIwTXNSMEZCZDBJc1JVRkhOVUlzVFVGRFNTeEpRVU5KTEUxQlFVMDVSU3hGUVVGVkxFTkJRMW9yUlN4alFVVkpMRTlCUkVGRUxFZEJRWGRDTEVkQlEycENMRWxCU1dZNVN5eFBRVUZQWjB3c2FVSkJRV2xDTEU5QlFWRm9SaXhGUVVGVFFTeEhRVVY2UTJoSExFOUJRVTlwVEN4dlFrRkJiMElzVDBGQlVXcEdMRVZCUVZOQkxFZEJSV2hFTEUxQlFVOXJSaXhOUVdKWUxFZEJhVUpQTEUxQlFVMURMRVZCUTFRdlNpeFpRVUZaUlN4RlFVRlRPRW9zUlVGQlYwTXNSMEZETlVJNVNpeExRVUZMTUVjc1YwRkJVUzlJTEVWQlEySnhRaXhMUVVGTE5FZ3NiMEpCUVdsQ2Frb3NSVUZEZEVKeFFpeExRVUZMUkN4UlFVRlZRU3hGUVVObVF5eExRVUZMTmtvc1ZVRkJXVUVzUlVGRGFrSTNTaXhMUVVGTE9Fb3NZVUZCWlVFc1JVRkRjRUk1U2l4TFFVRkxLMG9zYlVKQlFYTkNReXhIUVVGTmFFc3NTMEZCUzJsTExGbEJRVmxFTEVkQlJYUkVia3NzVTBGQlV6WkhMRWRCUTB3eFJ5eExRVUZMTkVnc1pVRkJhVUpzUWl4RlFVVXhRamRITEZOQlEwa3NTMEZCVDNORkxFVkJRVmx1UlN4TFFVRkxORWdzYVVKQlFXbENMRU5CUTNKRExFMUJRVTFHTEVWQlFWa3hTQ3hMUVVGTE5FZ3NaVUZEZGtJMVNDeExRVUZMTkVnc1pVRkJhVUoyUkN4RlFVTjBRbkZFTEVWQlFWVXhTQ3hOUVVWa0xFZEJRVWxCTEV0QlFVczBTQ3hwUWtGQmJVSjJSQ3hGUVVONFFpeFBRVVZLTEUxQlFVMDJSaXhGUVVGamJFc3NTMEZCU3pSSUxHVkJRMjVDZFVNc1JVRkJZMjVMTEV0QlFVc3dSeXhOUVVOdVFqQkVMRVZCUVhORExFMUJRV1pHTEVkQlExWXNUVUZCWmtNc1NVRkRTMFFzUlVGQldWWXNWVUZCV1Zjc1JVRkJXVmdzVTBGRGFrTlZMRVZCUVZsSExFOUJRVk5HTEVWQlFWbEZMRTFCUTJwRFNDeEZRVUZaU1N4VlFVRlpTQ3hGUVVGWlJ5eFRRVU14UTBNc1JVRkJiVU1zVFVGQlprd3NTVUZCZFVNc1RVRkJaa01zUjBGQmRVSkRMRWRCUTNKRlFTeEhRVU5CY0Vzc1MwRkJTMFFzVVVGQlVUSktMRzlDUVVGdlFqRktMRXRCUVVzMlNpeFZRVUZYTjBvc1MwRkJTeXRLTEcxQ1FVRnZRaTlLTEV0QlFVdDNTeXhYUVVVdlJVUXNTVUZEUVhaTExFdEJRVXQzU3l4VlFVRlpReXhGUVVGWFVDeEhRVU0xUW14TExFdEJRVXRFTEZGQlFWRXdTaXhwUWtGQmFVSjZTaXhMUVVGTE5rb3NWVUZCVnpkS0xFdEJRVXNyU2l4dFFrRkJiMEl2U2l4TFFVRkxkMHNzV1VGRmFFWjRTeXhMUVVGTE1FY3NUVUZCVVhkRUxFVkJRMkpzU3l4TFFVRkxORWdzWlVGQmFVSjJSQ3hGUVVVeFFuaEZMRmxCUVZrMlN5eEhRVU5yUWl4dFFrRkJaakZMTEV0QlFVc3dSeXhOUVVOYU1VY3NTMEZCU3pCSExFMUJRVTFwUlN4TFFVRkxNMHNzUzBGQlN6aEtMR05CUVdkQ09Vb3NTMEZCUzBRc1VVRkJVekpMTEVkQlIyNUVNVXNzUzBGQlN6QkhMRTFCUVUxMVJDeFpRVUZaVXl4SlFVOXVReXhOUVVGTlJDeEZRVUZqY2tjc1IwRkJUVUVzU1VGRGNrSnRSaXhGUVVOSExFTkJRVVZETEZGQlFWTndSaXhGUVVGRmIwWXNVVUZCVTJNc1VVRkJVMnhITEVWQlFVVnJSeXhSUVVGVFJDeExRVUZOYWtjc1JVRkJSV2xITEUxQlEyeEVha2NzUlVGQlJXOUdMRk5EY0dKSUxGTkJRVk5tTEVWQlFXZENNMGtzUjBGRE5VSXNTVUZCU1RoTExFVkJRV2RDUXl4RlFVRmxReXhKUVVGSmFFd3NSVUZCVDJ0RExGZEJRM2hDY2tRc1NVRkJiRUpwVFN4SlFVTkJRU3hGUVVGblFpeERRVU5hUnl4aFFVRmpMRWxCUVVrM1J5eFJRVU5zUWpoSExGVkJRVmNzU1VGQlNVTXNTMEZGYmtKS0xFVkJRV1ZMTEVsQlFVbHdUQ3hGUVVGUGEwTXNTMEZCVFRSSkxFbEJSWEJETEVsQlFVbHlTQ3hGUVVGWGNVZ3NSVUZCWTBjc1lVRkJZVVFzU1VGQlNXaE1MRVZCUVU5aExGTkJRM0pFTEZGQlFXbENhRU1zU1VGQllqUkZMRVZCUTBFc1QwRkJUMEVzUlVGSldDeE5RVUZOTlVZc1JVRkJUVzFETEVWQlFVOWhMRkZCUVZGM1N5eExRVUZMTDB3c1IwRlhhRU1zVDBGVVFXMUZMRVZCUVZkeFNDeEZRVUZqU1N4VlFVRlZSaXhKUVVGSmJrNHNVVUZEZEVKblFpeEpRVUZpTkVVc1NVRkZRVUVzUlVGQlZ5eEpRVUZKTTBRc1JVRkJVMFVzUlVGQlVVRXNSVUZCVDNOSExITkNRVVYyUTNkRkxFVkJRV05KTEZWQlFWVkZMRWxCUVVsMlRpeEZRVUZMTkVZc1NVRkhja054U0N4RlFVRmpSeXhoUVVGaFJ5eEpRVUZKY0V3c1JVRkJUMkVzVVVGQlV6UkRMRWRCUTNoRFFTeEZRVVZLTEUxQlFVMXpTQ3hGUVVGcFFpeEpRVUZKU1N4SlF6TkNja0pvVEN4RlFVRlJMRWxCUVVscFJTeFJReXRDYkVJc1RVRkJUV3RJTEVWQlFUSkNMRWxCYWtOcVF5eE5RVlZJZGt3c01rSkJRVEpDUlN4RlFVRlRjVUlzUlVGQlRWUXNSVUZCVXpoRUxFZEJReTlETEUxQlFVMDBSeXhGUVVGVGFrc3NSVUZCU3l4SFFVTndRaXhIUVVGbExFMUJRVmhwU3l4RlFVRm5RaXhEUVVWb1FpeFBRVVJyUWl4SlFVRkpha01zUlVGQmEwSnlTaXhGUVVGVGNVSXNSVUZCU3pWQ0xFMUJRVTBzUjBGQlNXMUNMRWRCUXk5RFZpeE5RVVZ5UWl4SFFVRmxMRTFCUVZodlRDeEZRVU5CTEUxQlFVOHNRMEZCUXl4SlFVRkpla0lzUlVGQlZUZEtMRVZCUVZOeFFpeEZRVUZMTlVJc1RVRkJUU3hIUVVGSmFVWXNSVUZCVVhGR0xHVkJSVEZFTEVkQlFXVXNUVUZCV0hWQ0xFVkJRMEVzVFVGQlR5eERRVUZETEVsQlFVbHVReXhGUVVGeFFtNUtMRVZCUVZOeFFpeEZRVUZMTlVJc1RVRkJUU3hIUVVGSmJVSXNTVUZITjBRc1QwRkVhMElzU1VGQlNYRkhMRVZCUVcxQ2FrZ3NSVUZCVTNGQ0xFVkJRVTFVTEVkQlEzWkRWaXhOUVUxeVFrb3NjVUpCUVhGQ05FVXNSMEZEYWtJc1QwRkJUeXhKUVVGSmEwUXNSVUZCVTJ4RUxFdERSRTRzYjBKQlFWaG9SeXhUUVVOT1FTeFBRVUYzUWl4clFrRkJUVUVzVDBGQmQwSXNaMEpCUVVrc1MwRkJTM05FTEV0QlFVc3NVMEZOYkVVc1RVRkJUVEJFTEVWQlFVOHNRMEZCUXpsRkxFdEJRVmxETEVsQlFWY3NTVUZCU1RKRkxFVkJRV1UxUlN4RlFVRlRReXhGUVVGUkxFOUJRVkYzU3l4SFFVc3pSVVVzUlVGQlRTeERRVUZETTBzc1MwRkJXVU1zU1VGQlZ5eEpRVUZKYzBZc1JVRkJhMEoyUml4RlFVRlRReXhGUVVGUkxFMUJRVTkzU3l4SFF6RkNia1pITEVWQlFYTkNMRU5CUVVOMlNpeEZRVUZOZDBvc1NVRkJZeXhIUVVGSGVFb3NUVUZCVTNkS0xFbEJRemRFTEVsQlFVbERMRWRCUVRSQ0xFOUJRMFFzU1VGQmNFSm9UaXhQUVVGUGFVNHNVMEZEWkVRc1IwRkJORUlzVDBGRmRVSXNTVUZCZGtOb1RpeFBRVUZQYVU0c1UwRkJVME1zY1VKQlF6VkNReXhSUVVGUlF5eExRVUZMTERaSlFVZGlTaXhIUVVFMFFpeEhRVTFvUXl4TlFVRk5TeXhGUVVGM1FrNHNSMEZCWlRGTUxFbEJRM3BETEUxQlFVMXBUU3hGUVVGWFVpeEZRVUZ2UW5wTUxFVkJRVTlyUXl4TFFVRk5kMG9zUjBGRGJFUXNTVUZCU1Zvc1JVRkJaMEpETEVWQlFXVkRMRWxCUVVscFFpeFJRVU5xUW5CT0xFbEJRV3hDYVUwc1NVRkRRVUVzUlVGQlowSXNRMEZEV2tjc1lVRkJZeXhKUVVGSk4wY3NVVUZEYkVJNFJ5eFZRVUZYTEVsQlFVbERMRXRCUlc1Q1NpeEZRVUZsU3l4SlFVRkpZU3hGUVVGVmJrSXNTVUZGYWtNc1NVRkJTWEpJTEVWQlFWZHhTQ3hGUVVGalJ5eGhRVUZoUkN4SlFVRkphRXdzUlVGQlQyRXNVMEZEY2tRc1VVRkJhVUpvUXl4SlFVRmlORVVzUlVGRFFTeFBRVUZQUVN4RlFVVllMRTFCUVUwMVJpeEZRVUZOYlVNc1JVRkJUMkVzVVVGQlVYZExMRXRCUVVzdlRDeEhRVVZvUXl4SFFVUkJiVVVzUlVGQlYzRklMRVZCUVdOSkxGVkJRVlZHTEVsQlFVbHVUaXhSUVVOMFFtZENMRWxCUVdJMFJTeEZRVUYzUWl4RFFVTjRRaXhOUVVGTmVFUXNSVUZCVlVRc1JVRkJUM05ITEhGQ1FVTnVRbkZHTEVkQlEwRm9UaXhQUVVGUGFVNHNVMEZCVTBNc2JVSkJRVzFDTlV3c1JVRkJVM2xNTEVkQlJXaEVha2tzUlVGQlZ5eEpRVUZKTTBRc1JVRkJVMFVzUlVGQlVVTXNSMEZEYUVNMlN5eEZRVUZqU1N4VlFVRlZSU3hKUVVGSmRrNHNSVUZCU3pSR0xFZEJSM0pETEU5QlJFRnhTQ3hGUVVGalJ5eGhRVUZoUnl4SlFVRkpjRXdzUlVGQlQyRXNVVUZCVXpSRExFZEJRM2hEUVN4SFFVVk1lVWtzUlVGQmFVSXNRMEZCUXl4UFFVRlJMRTlCYjBJeFFrTXNSVUZCYVVJc1NVRkJTVU1zU1VGbGNrSkRMRVZCUVhkQ0xFTkJRVU5ZTEVWQlFWZFpMRVZCUVdFM1NTeExRVU51UkRCSkxFVkJRV1ZKTEVsQlFVbGlMRWRCU1c1Q0xFMUJRVTFqTEVWQlFXOUNMMGtzUlVGQlYwRXNSVUZCVTNoRUxGRkJRVlZOTEZOQlFWTXdSaXhqUVVGakxGbEJSWHBGZDBjc1JVRkJVMGdzUlVGQldVa3NhVUpCUVdsQ0xGVkJRM1JEZUU4c1QwRkJSVUVzUjBGQlYzVlBMRVZCUlc1Q0xFZEJRV1VzU1VGQldIWlBMRVZCV1VFc1dVRkVRVk1zVDBGQlQybE9MRk5CUVZOVExITkNRVUZ6UWtjc1JVRkJhVUprTEVkQlJ6TkVMRTFCUVUxcFFpeEZRVUZwUW5CTkxGTkJRVk13Uml4alFVRmpMRk5CVFRsRExFbEJRVXNzU1VGQlNYcElMRVZCUVVrc1JVRkJSMEVzUlVGQlNVNHNSVUZCVVUwc1NVRkJTeXhEUVVNM1FpeE5RVUZOYjA4c1JVRkJVVWdzUlVGQlQycFBMRWRCUTNKQ2IwOHNSVUZCVFhCTExGZEJRVmR1UkN4WlFVRlpkVTRzUjBGRE4wSkVMRVZCUVdWRkxHRkJRV1ZFTEVWQlFVMURMRmxCYUVWUUxFTkJRVU51UWl4SlFVTnNRMUVzUlVGQlpXeEpMRkZCUVZNNVFpeEpRVU53UWl4TlFVRk5ORXNzUlVGQldTOUNMRVZCUVdWRExFbEJRVWxUTEVWQlFXOUNka29zUlVGQlRYZEtMRk5CUXpkRE4wMHNTVUZCWkdsUExFZEJRMEZCTEVWQlFWVTFRaXhWUVVGVmJFZ3NVVUZCVTFBc1NVRkRla0lzVFVGQlVYaEVMRk5CUVZOUkxGRkJRVVZCTEVsQlFXTm5SQ3hGUVVVelFtZEtMRVZCUVZNc1NVRkJTVXdzU1VGRGJrSjBSaXhOUVVGTmFVY3NTMEZCUzNSTkxFVkJRVkZwVFN4cFFrRkJhVUlzVlVGQlZURkpMRkZCUVZOeVFpeEpRVU51UkRoS0xFVkJRVTlHTEVsQlFVazFTaXhMUVVWbVlTeEZRVUYzUWtNc1JVRkJWV2RLTEZGQmQwUTVRMDhzUTBGQk5rSjBRaXhIUVVjM1FpeE5RVUZOYWt3c1JVRkJWU3RNTEVWQlFXZENMMHdzVVVGRE1VSm5SQ3hGVm5SRVNDeFRRVUZuUTBFc1JVRkJWVEZETEVWQlFVMXJUU3hGUVVGVkxFMUJRemRFTEUxQlFWRm9UaXhUUVVGVFVTeFJRVUZGUVN4SFFVRlRUaXhOUVVGRlFTeEhRVUZWYzBRc1JVRkhlRU1zUjBGQlNYZEtMRTFCUVVGQkxFVkJSVUVzV1VGRVFYaE5MRVZCUVZGMVNDeFpRVUZaYWtnc1IwRkhlRUlzVFVGQlRWUXNSVUZCVTBNc1UwRkJVME1zYVVKQlFXbENReXhGUVhSR2NFSXNTVUZ6Uml0RExFMUJRVTBzUjBGRE1VVXNTVUZCU1Vjc1JVRkJXVGhETEVWQlFTdENka1FzUjBGRE0wTXJUU3hGUVVGakxFVkJRMlJETEVkQlFXVXNSVUZEYmtJc1MwRkJUemROTEVWQlFVOVZMRmxCUVZrc1EwRkRkRUp0VFN4SlFVMUJMRWxCVEcxQ04wMHNSVUZCVHpoQ0xHTkJRMUEyU3l4SlFVTm1ReXhGUVVGamFrb3NSVUZCVjJ4RUxFZEJRM3BDYTAwc1JVRkJVWHBMTEZkQlFWZFJMR0ZCUVdGcVF5eEZRVUZOYTAwc1MwRkZjRUlzU1VGQlpuSk5MRWRCUVc5Q1ZDeEZRVUZOVXl4SFFVRlhSQ3hSUVVGVmQwMHNSMEZCWVN4RFFVVXZSQ3hIUVVGSlJDeEZRVUZqTEVWQlFVY3NRMEZEYWtJc1RVRkJjMElzU1VGQlpuUk5MRWRCUTBoVUxFVkJRVTFUTEVkQlFWZEVMRTlCUVZOMVRTeEZRVU14UW5STkxFVkJRVms0UXl4RlFVRXJRblpFTEVWQlFVOVRMRWRCUlhSRUxFOUJSVXBCTEVWQlFWazRReXhGUVVFclFuWkVMRVZCUVU5VExFdFZNa0owUkhkTkxFTkJRWFZDTTBvc1JVRkJWV3RLTEVWQlFXZENiRTBzUlVGQlVTdEdMRmxCUjNwRUwwWXNSVUZCVVhWRExHRkJRV0V5U2l4RlFVRm5RbXhOTEVWQlFWRXJSaXhaUVV0cVJEZElMRTlCUVU5cFRpeFRRVUZUVXl4elFrRkJjMEpITEVWQlFXbENaQ3hIUVVOMlJDeE5RVUZOYTBJc1JVRkJVVzVOTEVWQlFWRTBUU3hqUVVGakxGTkJRM0JETEVkQlFVa3hUeXhQUVVGUGFVNHNVMEZCVXpCQ0xHTkJRVEJDTEU5QlFWWldMRVZCUjJoRFRpeEZRVUZaZEVvc1lVRkJZVFJLTEVWQlFVMDFTQ3hYUVVGVkxFZEJRVTl6U0N4RlFVRlpPVVlzYVVKQlJUTkVMRWRCUVUwdlF5eEZRVUZWTEVOQlUycENhRVFzUlVGQlVYVkRMR0ZCUVdFeVNpeEZRVUZuUW14TkxFVkJRVkVyUml4WlFVTTNReXhOUVVGTkswY3NSVUZCVlN4SlFVRkpia0lzU1VGRGNFSnRRaXhGUVVGUmFFSXNTVUZCU1Vrc1IwRkRXbTVLTEVWQlFYZENReXhGUVVGVk9Fb3NTME0zU2pGRE5VOHNUMEZCVHpaUExEQkNRVU5JTEVOQlFVTkRMRVZCUVUxRExFbEJRVk5FTEVWQlEySXNUVUZCVFVVc1JVRkJiVUlzUTBGRE5VSTFUaXhaUVVGWk5rY3NSVUZCVHpGRkxFZEJRMllzVDBGQlVVRXNSMEZEU2l4TFFVRkxNRXdzVVVGRFJDeFBRVUZQYUVnc1JVRkJVU3hIUVVGTExFdEJRM2hDTEV0QlFVdDRTU3hQUVVOTUxFdEJRVXN3U1N4TlFVZEVMRTlCUVdkQ0xFMUJRVlJHTEVWQlFXZENRU3hGUVVGUmFVZ3NTMEZCUzBNc1ZVRkJWV3hJTEVkQlJYUkVMRTlCUVU5QkxFZEJSVmczUnl4alFVRmpOa2NzUlVGQlR6RkZMRWRCUTJwQ0xFOUJRVkZCTEVkQlEwb3NTMEZCU3pCTUxGRkJRMFFzVDBGQmFVSXNUMEZCVm1oSUxFVkJRMWdzUzBGQlMyMUlMRTlCUTBRc1QwRkJhVUlzVDBGQlZtNUlMRVZCUVdsQ0xFdEJRVTl0U0N4UFFVRlBia2dzUjBGRE1VTXNTMEZCUzNoSkxFOUJRMHdzUzBGQlN6QkpMRTFCUTBRc1QwRkJUeXRITEV0QlFVdEhMRTFCUVUxd1NDeEhRVVV4UWl4UFFVRlBRU3hKUVU5R2NVZ3NSVUZCVnl4RFFVRkRja2dzUlVGQlQzTklMRWxCUlhKQ1FTeEpRVUZSZEVnc1NVRkJWWE5JTEVkQlFWRkJMRWRCUVU5MFNDeEhRVUZWUVN4SFFVVm9SSFZJTEVWQlFUWkNMRU5CUXk5Q1F5eFhRVUZYTEVWQlExaHNUU3hMUVVGTmVrTXNUMEZEVGpSUExGVkJRVmRXTEVWQlExaFhMRk5CUVZNc1JVRkRWRU1zVjBGQldVNHNSMEZyUWxRc1RVRkJUVThzVlVGQmQwSkRMRmxCUTJwRE1VOHNZMEZEU1hOSExGRkJRMEZ1Unl4TFFVRkxkMDhzWVVGQlpTeEZRVU53UW5oUExFdEJRVXQ1VHl4NVFrRkJjMEk1VUN4RlFVY3pRbkZDTEV0QlFVc3dUeXhsUVVGcFFpeEpRVUZKUXl4UlFVRlRReXhIUVVGUk5VOHNTMEZCU3paUExIZENRVUV3UWtRc1IwRkxNVVUxVHl4TFFVRkxPRThzYlVKQlFYRkNMRWxCUVVrM1JDeEpRVWs1UW1wTUxFdEJRVXNyVHl3eVFrRkJkMEp3VVN4RlFVTTNRbkZDTEV0QlFVdG5VQ3hoUVUxVVF5eG5RMEZGU1dwUUxFdEJRVXRyVUN4WFFVTk1MRTFCUVUxcVR5eEZRVUZoTEVkQlZXNUNMRTlCVUVGcVFpeExRVUZMYlZBc2FVSkJRV2xDY2t3c1VVRkJVU3hEUVVGRGRVUXNSVUZCUnl0SUxFdEJRemxDTEUxQlFVMURMRVZCUVU5eVVDeExRVUZMYzFBc01FSkJRVEJDUml4RlFVRkhMMGdzVVVGRGJFTXhTU3hKUVVGVU1GRXNTVUZEUVhKUUxFdEJRVXQxVUN4M1FrRkJkMEp5UlN4SlFVRkpiVVVzUlVGQlRVUXNSMEZEZGtOdVR5eEZRVUZYWXl4TFFVRkxjMDRzVFVGSGFrSndUeXhGUVZGWWNFSXNaME5CUlVrc1NVRkJTMGNzUzBGQlMzZFFMR1ZCUVdWc1F5d3dRa0ZCTUVJc2JVSkJRVzlDZEU0c1QwRkJVU3hEUVVNelJVRXNTMEZCUzIxUUxHbENRVUZ0UWl4SlFVRkpiRVVzU1VGRk5VSXNUVUZCVFhkRkxFVkJRV3RDZGxJc1QwRkJUM2RTTEdWQlFXVXhVQ3hOUVVGTmJWQXNjMEpCUXpWQ2VGRXNTVUZCY0VJNFVTeEhRVU5CUVN4RlFVRm5Rak5NTEZGQlFWRXNRMEZCUTNWRUxFVkJRVWR6U1N4SlFVRk5NMUFzUzBGQlMyMVFMR2xDUVVGcFFtcEZMRWxCUVVsNVJTeEZRVUZIZEVrc1MwRXdRak5GZUVnc2MwSkJRWE5DZFVJc1JVRkJUWEZFTEVWQlFWVjNTaXhIUVZkc1F5eEhRVkJCYWs4c1MwRkJTelJRTEhsQ1FVTk1OVkFzUzBGQlMyMVFMR2xDUVVGcFFtcEZMRWxCUVVrNVNpeEZRVUZOY1VRc1IwRk5OVUpCTEVWQlFWRnZUQ3haUVVGak4xQXNTMEZCU3poUUxGVkJRVlZPTEdWQlFXVndUeXhIUVVOd1JDeFBRVVZLTEUxQlFVMTZSQ3hGUVVGelFpeHBRa0ZCVkhsRUxFVkJRVzlDTUVZc1UwRkJWeXhMUVVGTE1VWXNSVUZEYWtReVR5eEZRVUZoTDFBc1MwRkJTMmRSTEhOQ1FVRnpRalZQTEVWQlFVMTZSQ3hGUVVGTE9FY3NVVUZEZEVNNVJpeEpRVUZtYjFJc1IwRkRRVGRTTEU5QlFVOUxMR1ZCUVdWNVFpeExRVUZMT0ZBc1ZVRkJWekZQTEVWQlFVMHlUeXhIUVRKQ2NFUnNVU3cyUWtGQk5rSjFRaXhGUVVGTmVrUXNSVUZCUzNOVExFZEJRM0JETEUxQlFVOHNRMEZGU0hCUkxFMUJRMGtzVDBGQlQwY3NTMEZCUzNKRExFbEJSV2hDYTBNc1NVRkJTVFpITEVkQlEwRXNUVUZCVFhkS0xFVkJRVmRzVVN4TFFVRkxiMElzUjBGRGRFSndRaXhMUVVGTGNrTXNSMEZCVHl0SkxFVkJRMW94Unl4TFFVRkxiVkVzWlVGQlpTOVBMRVZCUVUwNFR5eEpRVVU1UWtVc1kwRkJZeXhGUVVOa1F5eFpRVUZaTEVkQlpYQkNlRkVzTUVKQlFUQkNkVUlzUjBGRGRFSXNUMEZCVDNCQ0xFdEJRVXR0VUN4clFrRkJiMEp1VUN4TFFVRkxiVkFzYVVKQlFXbENja1VzU1VGQlNURktMRWxCUTNSRU5rMHNSVUZQVW5CUExHdENRVVZKTEUxQlFVMTVVU3hGUVVGWmNGTXNUMEZCVDNkU0xHVkJRV1V4VUN4TlFWbDRReXhIUVZoTGMxRXNSVUZCVldRc1pVRjBTMHdzWTBGMVMwNWpMRVZCUVZWd1FpeFhRVVZrYkZBc1MwRkJZeXhYUVVGSkxFVkJRMnhDUVN4TFFVRkxORkFzZVVKQlJVdzFVQ3hMUVVGTGRWQXNkMEpCUVRCQ0xFbEJRVWwwUlN4SlFVc3ZRbXBNTEV0QlFVdDNVQ3hsUVVGbGJFTXNNRUpCUVRCQ0xHRkJRV04wVGl4UFFVRlJMRU5CUTNCRkxFMUJRVTExVVN4RlFVRlJkbEVzUzBGQlMzZFJMRmRCUldKRExFVkJRVmNzU1VGRFZuWlRMRTlCUVU5M1V5eHZRa0ZCYjBKSUxFMUJRMk1zYlVKQlFXcERjbE1zVDBGQlQzbFRMSE5DUVVOa2VsTXNUMEZCVDNsVExITkNRVUZ6UWtvc1IwRkROMElzU1VGSFVpeEpRVUZMTEUxQlFVMXVRaXhMUVVGTGNVSXNSVUZKV25wUkxFdEJRVXMwVVN4bFFVRmxlRUlzUlVGQlIyMUNMRVZCUVUxdVFpeExRVkY2UTNaUUxHbERRVUZwUTNWQ0xFVkJRVTF4UkN4SFFVTnVReXhOUVVGTmVVb3NSVUZCV1hwS0xFVkJRVkY1U2l4VlFVTXhRaXhQUVVGeFFpeEpRVUZrUVN4UFFVTklkbEFzUlVGRGMwSXNhVUpCUVdSMVVDeEZRVU5LUVN4RlFVTnBRaXhwUWtGQlZEbE5MRVZCUVc5Q1FTeEZRVUZMU3l4dFFrRkJaMEk1UXl4RlFWRTNSR3RDTEhkQ1FVRjNRalpITEVWQlFVOXpTQ3hGUVVGTFN5eEZRVUZoVGl4SFFVTTNReXhQUVVGUFRTeEZRVUZYTTBnc1JVRkJUM05JTEVkQlVUZENiazhzYlVOQlFXMUROa2NzUlVGQlQycERMRWRCUTNSRExFMUJRVTE2UXl4RlFVRlBlVU1zUlVGQlVYcERMRXRCUTJadFRTeEZRVUZaTVVvc1JVRkJVVEJLTEZkQlFXRldMRVZCUTJwRGIwUXNSVUZCYzBNc2JVSkJRV1F4UXl4RlFVRXlRa0VzUlVGQldVRXNSVUZCVlRCRExHTkJReTlGTEU5QlFVOUJMRVZCUVdkQ1FTeEZRVUZqYmtzc1JVRkJUekZGTEVkQlFWRXdSU3hGUVZWNFJEZEhMR2xEUVVGcFF6WkhMRVZCUVU5cVF5eEhRVU53UXl4UlFVRjNRamxHTEVsQlFYQkNPRVlzUlVGQlVUSktMRkZCUTFJc1QwRkZTaXhOUVVGTmNFMHNSVUZCVDNsRExFVkJRVkY2UXl4TFFVTm1iVTBzUlVGQldURktMRVZCUVZFd1NpeFZRVWN4UWl4UFFVWnZRa0VzUjBGQllVRXNSVUZCVlRKRExHRkJRM1pEY2tRc1JVRkJhVUp4UkN4aFFVTkdjRXNzUlVGQlR6RkZMRWRCVFRsQ2JrTXNZVUZEU1Vjc1MwRkJTeXRSTERCQ1FVZE1MMUVzUzBGQlMyMVJMR2xDUVdOVWRGRXNNRUpCUjBsSExFdEJRVXRuVWl4WlFVTkJOMElzYVVKQlFXbENja3dzVVVGQlVTeERRVUZEYlU0c1JVRkJTVGRDTEV0QlF5OUNMRWRCUVVsd1VDeExRVUZMZDFBc1pVRkJaVW9zUjBGQlNTeERRVU40UWl4TlFVRk5NVWtzUlVGQlVURkhMRXRCUVV0dlVDeFZRVU5hY0ZBc1MwRkJTMjlRTEVkQlExQndVQ3hMUVVGTGVVOHNjMEpCUTA1NlR5eExRVUZMZVU4c2IwSkJRWE5DTEVsQlFVbDRSQ3hMUVVWdVEycE1MRXRCUVV0NVR5eHZRa0ZCYjBKMlJDeEpRVUZKYTBVc1JVRkJSekZKTEUxQlR6VkROMGNzTWtKQlNVbEhMRXRCUVV0NVR5eHZRa0ZCYjBJelN5eFJRVUZSTEVOQlFVTjFSQ3hGUVVGSEswZ3NTVUZCVFhCUUxFdEJRVXR2VUN4SFFVRkxMMGdzUjBGRGNrUnlTQ3hMUVVGTGVVOHNlVUpCUVhOQ09WQXNSVUZGTDBKclFpeHZRa0ZIU1Vjc1MwRkJTMnRTTEdsQ1FVVlVjbElzYzBKQlEzbERiRUlzU1VGQmFrTnhRaXhMUVVGTE5rOHNNRUpCUTB3M1R5eExRVUZMTms4c01FSkJRMHczVHl4TFFVRkxOazhzTmtKQlFUQkNiRkVzUjBGUmRrTnJRaXgzUWtGTFFVRXNlVUpCUVhsQ2RVSXNSVUZCVFRSTkxFVkJRVXQwU0N4SFFVTTFRbk5JTEVsQlFWRjBTQ3hIUVVOU01VY3NTMEZCUzIxU0xIRkNRVUZ4UWk5UUxFVkJRVTF6Uml4SFFVZDRRemRITEhGQ1FVRnhRblZDTEVWQlFVMXpSaXhGUVVGUGFrTXNSVUZCVlhkS0xFZEJRM2hETEUxQlFVMXRSQ3hGUVVGUGNGSXNTMEZCUzJkU0xGbEJRMW96UWl4RlFVRlBLMElzUlVGQlN6bENMREJDUVVFd1FteFBMRVZCUVUxeFJDeEhRVU5zUkN4UlFVRmhPVVlzU1VGQlZEQlJMRVZCUVc5Q0xFTkJRM0JDTEUxQlFVMW5ReXhGUVVGWlJDeEZRVUZMUlN3d1FrRkJNRUkxU3l4RlFVRlBha01zUjBGRmVFUXNVVUZCYTBJNVJpeEpRVUZrTUZNc1JVRkRRU3hQUVZWS2NsSXNTMEZCUzNkUExHRkJlRlozUWl4RlFYZFdWSGhQTEV0QlFVdDNUeXhoUVVOU0xFMUJRV0kyUXl4RlFVTkJjbElzUzBGQlN6UkNMR2RDUVVGblFubE9MRWRCUjNKQ2NsQXNTMEZCUzNWSUxHRkJRV0U0U0N4RlFVRk5aME1zUjBGSE5VSnlVaXhMUVVGTGQwOHNZMEZCYlVNc1JVRkJjRUo0VHl4TFFVRkxkMDhzWTBGSGFrTXpUeXh4UWtGQmNVSjFRaXhGUVVGTmMwWXNSMEZIZGtJc1IwRjBWMmxETEVWQmMxYzNRakZITEV0QlFVdDNUeXhoUVVOTUxFOUJSVW9zVFVGQlRUUkRMRVZCUVU5d1VpeExRVUZMWjFJc1dVRkpXazhzUlVGQlYwZ3NSVUZCU3pkQ0xIZENRVUYzUW5wRkxFbEJRVWt4U2l4SFFVTnNSQ3hSUVVGcFFucERMRWxCUVdJMFV5eEZRVUYzUWl4RFFVTjRRaXhOUVVGTk9VMHNSVUZCVlRKTkxFVkJRVXRKTEcxQ1FVRnRRa1FzUjBGRmVFTjJVaXhMUVVGTGQwOHNZVUZvV0hWQ0xFZEJaMWhTZUU4c1MwRkJTM2RQTEdGQlEzcENlRThzUzBGQlMzVlNMRWRCUlVSSUxFVkJRVXRMTERSQ1FVRTBRaTlMTEVWQlFVOXFReXhIUVVVMVEzcEZMRXRCUVV0M1R5eGpRVUZ0UXl4SFFVRndRbmhQTEV0QlFVdDNUeXhqUVZGcVF6TlBMR1ZCUVdWMVFpeEZRVUZOT0U4c1IwRkRha0lzU1VGQlNYZENMRWRCUVhOQ0xFVkJSVEZDTEZGQlFXRXZVeXhKUVVGVWVVTXNSVUZCYjBJc1EwRkRjRUlzVFVGQlRXZFJMRVZCUVU5d1VpeExRVUZMWjFJc1dVRkRXblpOTEVWQlFWVXlUU3hGUVVGTFNTeHRRa0ZCYlVKd1VTeEhRVU53UTJkUkxFVkJRVXRQTEdsQ1FVRnBRak5TTEV0QlFVdHZRaXhIUVVGUE9FOHNSVUZCVlhwTUxFVkJRVkUwU2l4aFFVTXZRM0pQTEV0QlFVczRUeXh0UWtGQmJVSnFUQ3hKUVVGSmVrTXNTVUZETjBKd1FpeExRVUZMT0U4c2JVSkJRVzFDTlVRc1NVRkJTVGxLTEVWQlFVMDRUeXhKUVUxa0xFbEJRWEJDZWt3c1JVRkJVVEpLTEZOQk0xbFpMRWRCTkZsc1FuQlBMRXRCUVV0M1R5eHZRa0ZETkVJM1VDeEpRVUV2UW5GQ0xFdEJRVXNyVHl4M1FrRkRUQzlQTEV0QlFVc3JUeXh6UWtGQmQwSXNTVUZCU1RsRUxFdEJSWEpEYWt3c1MwRkJTeXRQTEhOQ1FVRnpRamRFTEVsQlFVazVTaXhGUVVGTmNVUXNTMEZMZWtOcFRpeEhRVUZ6UWl4SFFVZDZRakZTTEV0QlFVczBVaXh4UWtGQmRVSkdMRWxCUXpkQ01WSXNTMEZCU3pCUExHVkJRV2xDTVU4c1MwRkJTelpTTEd0Q1FXZENia05vVXl4alFVRmpkVUlzUlVGQlRUaFBMRWRCUldoQ0xFOUJSRUZzVVN4TFFVRkxiVkVzWlVGQlpTOVBMRVZCUVUwNFR5eEhRVU51UW14UkxFdEJRVXM0VWl4bFFVdG9RbXBUTEhWQ1FVTkpSeXhMUVVGTGQwOHNZVUZ1WW10Q0xFVkJiV0pJZUU4c1MwRkJTM2RQTEdGQlEzcENMRlZCUjFWNFR5eExRVUZMTUU4c1pVRkZaaXhOUVVGUE1VVXNTVUZKVUN4TlFVRk5iRXNzUlVGQlUwVXNTMEZCU3l0U0xHZENRVTl3UWl4UFFVaGpMRTFCUVZacVV5eFRRVU5OUVN4SFFVVkdSU3hMUVVGTE5GSXNiMEpCUldwQ1FTd3dRa0ZEU1N4UFFYWmpkVUlzUlVGMVkyWTFVaXhMUVVGTGQwOHNZVUZGYWtKM1JDeHBRa0ZEU1N4UFFUTmphMElzUlVFeVkxWm9VeXhMUVVGTGQwOHNZVUZyUW1wQ00wOHNaMEpCUlZGSExFdEJRVXQ1VHl4eFFrRkRUSHBQTEV0QlFVdHBVeXd5UWtGRlZDeEpRVUZKUXl4SFFVRmxMRVZCUTI1Q0xFMUJRVTFETEVWQlFXOUNibE1zUzBGQlN6aFBMRzFDUVVNdlFpeEpRVU5KYjBRc1JVRkJaV3hUTEV0QlFVdHJVeXhoUVVGaFF5eEhRVU0zUWtRc1JVRkRRV3hUTEV0QlFVc3dTU3hQUVVGUGVVb3NSMEZIV201VExFdEJRVXR2VXl4bFFVZGlMRTFCUVU5d1NTeEhRVTFJTEUxQlNFRnJTU3hIUVVGbExFVkJSV1pzVXl4TFFVRkxiMU1zWlVGRFEzQkpMRVZCUlU1clNTeEpRWEptWXl4RlFYTm1VbXhUTEV0QlFVdDNUeXhsUVVOUWVFOHNTMEZCUzNkUExHRkJkbVpMTEVWQmRXWlZlRThzUzBGQlMzZFBMR0ZCUTNwQ2VFOHNTMEZCUzNGVExHRkJRV0ZHTEVsQlJYUkNibE1zUzBGQlMzTlRMRkZCUVZGSUxFbEJSM0pDZEZNc1pVRkRTVWNzUzBGQlN6aFBMRzFDUVVGeFFpeEpRVUZKTjBRc1NVRkRPVUpxVEN4TFFVRkxkMDhzWTBGQmJVTXNSVUZCY0VKNFR5eExRVUZMZDA4c1lVRnBRamRDYzBRc2NVSkJRMGtzVDBGQlR6bFNMRXRCUVV0MVV5eHhRa0ZyUW1oQ01WTXNjVUpCUTBrc1QwRkJUMGNzUzBGQlN6QlBMR1ZCVTJoQ04wOHNZVUZCWVdsUUxFZEJRMVFzVDBGQlR5eEZRVlZZYWxBc1QwRkJUMmxRTEZGQlEyZERibEVzU1VGQkwwSnhRaXhMUVVGTEswOHNkVUpCUTB3dlR5eExRVUZMSzA4c2MwSkJRWE5DZVVRc1MwRkJUeXhKUVVkc1EzaFRMRXRCUVVzclR5eHpRa0ZCYzBKcVRDeFJRVUZSTEVOQlFVTjFSQ3hGUVVGSGMwa3NTVUZCVFROUUxFdEJRVXQ1VXl4eFFrRkJjVUk1UXl4RlFVRkhNMUFzUzBGQlN6SlFMRWRCUVVsMFNTeEpRVU51Um5KSUxFdEJRVXNyVHl3eVFrRkJkMEp3VVN4SFFVVnFRM0ZDTEV0QlFVdHZVeXhsUVZkVWRsTXNVVUZCVVdsUUxFbEJWMUpxVUN4aFFVRmhhVkFzUzBGUGFrSlNMRVZCUVd0Q0xGZEJRVWtzUlVNdmIwSjBRaXhOUVhORFRXOUZMRVZCUVcxQ0xFTkJRVU5xVHl4RlFVRlRNVVVzU1VGSlZpeFhRVUZxUWtFc1JVRkJVVFJUTEUxQlFYRkNOVk1zUlVGQlVXZFJMR05CUTI1RExGVkJRVmRvVVN4RlFVRlJaMUVzV1VGRFpEZFNMRTlCUVU4d1ZTeFBRVUZQTVZVc1QwRkJUekJWTEU5QlFVOHNSMEZCU1RkVExFZEJRVlVzUTBGQlJVWXNVMEZCVTJkVUxFZEJRM0JFUVN4RlFVRk5ha01zWlVGQlpUZFJMRVZCUVZGd1F5eEpRVUZMT0Vjc1RVRlBia01zUTBGRFNHdFBMRXRCUVUwc1VVRkRUbWhXTEVsQlFVdHRTaXhUUVVOTVowMHNWVUZCVnl4TlFVTllMME1zVjBGQldTeEhRVlZhYkZFc1kwRkRkVU1zYlVKQlFYaENSU3hGUVVGUloxUXNZMEZEWmk5VExFdEJRVXRFTEVWQlFWRndReXhMUVVGUGIwTXNSVUZCVVdkVUxGbEJRVmx3U1N4TFFVRkxNMHNzVVVGSGNrUklMRk5CUVZOblZDeEhRVU5NUVN4RlFVRk5ha01zWlVGQlpUZFJMRVZCUVZGd1F5eEpRVUZMT0Vjc1MwRXdRak5ETEZOQlFWTjFUeXhGUVVGVGRrOHNSMEZGY2tJc1RVRkJUeXhEUVVGRGQwOHNSVUZCYlVJM1VpeFRRVUZ0UW5wRExFbEJRVlI1UXl4RlFYWkNiRUlzUlVGQlEzRkVMRVZCUVZONVR5eEZRVUZQT1ZJc1MwRkRjRU00VWl4RlFVRk5iRU1zV1VGRFJFb3NaVUZCWlhoUUxFVkJRVTF4UkN4SlFYTkNkRUl3VHl4RFFVRmxNVThzUlVGQlUzZFBMRVZCUVcxQ04xSXNSMEZETTBOelVpeEZRVUZwUW1wUExFVkJRVk4zVHl4SFEzcEhNMElzVFVGQlRVY3NSVUZCSzBJc2RVSkJRWGRDUXl4VFFVRlRka1FzVjBGRGVFVXNXVUZCWVhkRUxHTkJRV040UkN4VlFVTXhRbmxFTEVWQlFXOUNlazBzVTBGRGJrSXNUVUZCVFRCTkxFVkJRMVF6VkN4WlFVRlpORlFzUlVGQlUwTXNSMEZEYWtJc1IwRkJTVUVzU1VGQlkwZ3NSVUZEWkN4TlFVRlZjRXNzVFVGQlRTeHhSVUZGY0VKdVNpeExRVUZMZVZRc1VVRkJWVUVzUlVGSmJrSkZMR2xDUVZsSkxGbEJXSGxDYUZZc1NVRkJja0p4UWl4TFFVRkxORlFzWTBGSFJGSXNSMEZEUVhCVUxFdEJRVXMwVkN4WlFVRmpMRWxCUVVsT0xHTkJRM1pDZEZRc1MwRkJTelJVTEZsQlFWbERMRmxCUVZrM1ZDeExRVUZMZVZRc1ZVRkhiRU42VkN4TFFVRkxORlFzV1VGQll5eE5RVWR3UWpWVUxFdEJRVXMwVkN4WlFVVm9RaTlVTEZkQlEwa3NUMEZCVDBjc1MwRkJTM2xVTEZOQllYQkNMRTFCYTBKaFN5eEhRVUZOTEVOQlFVTnVWQ3hMUVVGWlF5eExRVU0xUWl4TlFVRk5ObE1zUlVGQlZUZFRMRVZCUVU5dFZDeFBRVUZQTEVOQlFVTkRMRVZCUVVzelRTeEZRVUZITkUwc1NVRkJVVVFzUlVGdVFucENMRU5CUVVOMFRpeEpRVU4yUWl4SFFVRkpRU3hoUVVGcFFqaE5MRVZCUTJwQ0xFOUJRVTg1VFN4RlFVRk5LMDBzVVVGRldpeEhRVUZ4UWl4cFFrRkJWaTlOTEVWQlExb3NUMEZCVDBFc1JVRkhVQ3hOUVVGVmVVTXNUVUZCVFN4dFJVRkJiVVY2UXl4MVIwRlhiRU4zVGl4RFFVRnJRamROTEVkQlFVc3hSeXhGUVVGUmMxUXNSVUZCVFN4SFFVRkpkRlFzUlVGQlVTeEpRVU4wUnl4UFFVRlBMRWxCUVVrMlV5eEZRVUZWUXl4RlFVRlRSaXhMUXk5RGFrTTVWU3hQUVVFeVFpeHhRa0ZCVFVFc1QwRkJNa0lzYlVKQlFVa3NTMEZETlVSelJDeExRVUZMTEZOQlMxWXNUVUZCVFc5VExFZEJRWFZDTEVkQlEzUkNMRTFCUVUxRExGZEJRVzFDT1VZc1JVRlBOVUo2VHl4dFFrRkRTU3hQUVVGUFJ5eExRVUZMZFUwc1QwRkhhRUl4VFN3d1FrRkZTU3hIUVVGSlJ5eExRVUZMZDFBc1pVRkJaV3hETERCQ1FVRXdRaXhWUVVGWGRFNHNUMEZEZWtRc1QwRlJTaXhOUVVGTmNWVXNSVUZCWVhKVkxFdEJRVXR6VlN4WlFVTjRRaXhSUVVGdFFqTldMRWxCUVdZd1ZpeEZRVU5CY2xVc1MwRkJTM1ZWTEZGQlFWVXNVVUZGWkN4SFFVRkpNMDRzVFVGQlRVTXNVVUZCVVhkT0xFZEJRV0VzUTBGUGFFTXNUVUZCVFVjc1JVRkJXU3hEUVVGRGFra3NSVUZCVVhKQ0xFbEJRVkZ4UWl4RlFVRlBhMGtzV1VGQldTeERRVUZEZGtvc1JVRkJTM3BKTEVsQlJUVkViVVVzVFVGQlRVTXNVVUZCVVhCRkxFZEJRVXNyVWl4RlFVRlZMMUlzUlVGQlIzbEpMRWxCUVZGQkxFVkJRVWx0UWl4SlFVRkpOVW9zUjBGQlNYbEpMRWRCUVUxQkxFZEJSM0JFUVN4RlFVRk5jMG9zUlVGQlZVZ3NSVUZCV1N4SlFVRkpia2tzUzBGRGFFTkxMRVZCUVZNc1IwRkRabkpDTEVWQlFVbHdTQ3hSUVVGVGRVUXNSMEZCVFd0R0xFVkJRVTl0U1N4UlFVRlJjazRzU1VGRGJFTnlTQ3hMUVVGTGRWVXNVVUZCVldoSkxFOUJSMloyVFN4TFFVRkxkVlVzVVVGQlZTeERRVUZEUml4SFFWRjRRbmhWTEdGQlEwbHpSeXhOUVVGTk5ra3NZVUZEVG1oUUxFdEJRVXRuVWl4WlFVRlpNa1FzYlVKQlEycENNMVVzUzBGQlN6UlZMRmRCUTBRMVZTeExRVUZMTmxVc2JVSkJTVXh3Vnl4UFFVRlBjVmNzV1VGQll6bFZMRXRCUVVzMFZTeHpRa0ZCYzBKdVZ5eFBRVUZQY1Zjc1dVRkRka1E1VlN4TFFVRkxLMVVzWTBGVllteFdMRzFDUVVOSkxFOUJRVTlITEV0QlFVdG5WaXhoUVVGaExFTkJRVVZETEV0QlFVMHNVMEZYY2tOd1ZpeGpRVU5KTEUxQlFVMHdUU3hGUVVGVGRrMHNTMEZCUzJkU0xGbEJRVmwxUkN4UlFVTldMRWxCUVd4Q2FFa3NSVUZCVDNaUExHTkJVV0ZYTEVsQlFYQkNSaXhQUVVGUGFVNHNWVUZCTWtKcVRpeFBRVUZQYVU0c1UwRkJVekJDTEdGQlJ6ZERaMGNzUlVGRFRIQlVMRXRCUVVzMFZTeFhRVUZYVFN4dFFrRkRXak5KTEVWQlFVODBTU3hKUVVGTE1WTXNSMEZCVFVFc1JVRkJSV3RTTEZsQlMzaENNMVFzUzBGQlMyOVdMRGhDUVVFclFpeEZRVlJ3UXpOWExFOUJRVTlwVGl4VFFVRlRNa29zV1VGQldVTXNjMEpCUVhOQ0wwa3NSVUZCVHpSSkxFbEJRVXN4VXl4SFFVRk5RU3hGUVVGRloxSXNVMEZCVlhwVUxFdEJRVXQxVml4WlFWazNSakZXTEc5Q1FVTkpjMGNzVFVGQlRYRlFMRzlDUVVkR2VGWXNTMEZCUzJkVExHbENRVUZyUTNKVUxFbEJRWEJDUml4UFFVRlBhVTRzVlVGRE1VSnFUaXhQUVVGUGFVNHNVMEZCVXl0S0xHRkJRV0Y2Vml4TlFWTnlRMGdzVDBGQlQzTlRMRWRCU1Vnc1RVRkJUWFZFTEVWQlFXbENNVllzUzBGQlN6SldMRk5CUXpWQ2VGQXNUVUZCVFhWRExFOUJRVTk1U2l4SFFVVlVkVVFzU1VGQmJVSjJRaXhKUVVOdVFtNVZMRXRCUVV0blVpeFpRVU5CTWtVc1QwRkJUMFFzUlVGQlowSXhWaXhMUVVGTE5GVXNWMEZCV1N4RFFVRkZjRW9zVlVGQlYzaE1MRXRCUVV0MVZpeFZRVUZYZWt3c1lVRkJZemxLTEU5QlMzaEdRU3hMUVVGTGIxWXNLMEpCUTB4d1ZpeExRVUZMYjFZc09FSkJRU3RDTEVWQlEzQkRjRllzUzBGQlMyZFNMRmxCUVZsMVJDeFJRVUZSZWxFc1VVRkJVM0pDTEVsQlF6bENMRTFCUVUxcFN5eEZRVUZSY2swc1UwRkJVekJHTEdOQlFXTXNVMEZEY2tNeVJ5eEZRVUZOUXl4WlFVRmpiRXNzUlVGQlJXZFNMRkZCUTNSQ2VsUXNTMEZCU3pSVkxGZEJRVmM1VFN4WlFVRlpORVVzVFVGVmVFTTNUU3hUUVVOSkxFOUJRVTl6VlN4SlEzQk1aaXhUUVVGVE4wMHNSMEZCUlVFc1JVRkJSVEJETEVWQlFVVjJTQ3hGUVVGRmJrVXNSMEZCUnl4SlFVRkpWeXhGUVVGRmFFSXNSVUZCUlVZc1ZVRkJWVU1zVDBGQlQyOUhMRVZCUVVWdVJ5eEZRVUZGTEVWQlFVVXJUQ3hGUVVGRkxFOUJRVTh4VEN4RlFVRkZRU3hGUVVGRlNpeFBRVUZQUXl4NVFrRkJlVUkyVEN4RlFVRkZka2dzUjBGQlIyNUZMRVZCUVVVc1IwRkJSeXhwUWtGQmFVSkdMRk5CUVZNc2JVSkJRVzFDUVN4UlFVRlJReXhUUVVGVEswWXNSVUZCUldoSExGRkJRVkZETEZOQlFWTnBTaXhGUVVGRk1FTXNSVUZCUlhaSUxFVkJRVVZ1UlN4UlFVRlJMRWxCUVVrc1NVRkJTWE5ZTEVWQlFVVjBUeXhGUVVGRmRFb3NUMEZCVHl4RlFVRkZORmdzUjBGQlJ5eEZRVUZGUVN4TFFVRkxNMWNzUlVGQlJYRkpMRVZCUVVWelR5eE5RVUZOZUZJc1IwRkJSMjVITEVWQlFVVXNSVUZCUldkQ0xFVkJRVVZ0Uml4SFFVRkhia2NzUlVGQlJTeEZRVUZGWjBJc1JVRkJSU3RMTEVWQlFVVjJTQ3hGUVVGRk1rSXNSMEZCUjI1R0xFVkJRVVVyU3l4RlFVRkZka2dzUzBGQlN6SkNMRWRCUVVjc1QwRkJUMjVITEVWQlFVVXNSMEZCUjIxSExFZEJRVWRzUnl4UFFVRlBTeXhsUVVGbGVVd3NSVUZCUlhaSUxFVkJRVVV5UWl4SFFVRkhRU3hGUkRoTWJsVm5VU3hIUVVGelFpeFhRVUZKTEVWQlVURkNRU3hIUVVGWGRVSXNUMHB6UTFjc1EwRkJRemRXTEVWQlFWRm9RaXhGUVVGWE1rWXNTMEZEZEVNc1NVRkJTMEVzUjBGQk9FSXNhVUpCUVZwQkxFbEJRWGxDUVN4RlFVRlJLMGNzVlVGRGNFUXNUVUZCVlhKRExFMUJRVTBzZFVOQlJYQkNMRTFCUVUxeFF5eEZRVUZaTDBjc1JVRkJVU3RITEZWQlEzQkNjVXNzUlVGQll6VldMRVZCUVUwMFJDeEpRVUZKTDBVc1IwRkRlRUpuV0N4RlFVRmxja3NzUjBGRFRTeExRVUYyUWpOTkxFVkJRVlZwUXl4WlFVTlNha01zUlVGQlZXbFlMRXRCUlZaRExFVkJRVzFDUml4SlFVRnBRamRLTEVWQlFXVndTU3hKUVVGSk1rZ3NSMEZIZGtSNVN5eEZRVUZyUWtRc1JVRkJiVUl6Vml4VFFVRlRObFlzZVVKQlFUSkNjRmdzUlVGWEwwVXNSMGhxVDJ0Q0xFVkJRVU5uUWl4RlFVRlJhRUlzUlVGQlZ6SkdMRXRCUTNSRExFbEJRVWx5UWl4RlFVRlBia1FzUlVGQlRUWkxMRWxCUVVsb1RTeFJRVU5TU0N4SlFVRlVlVVVzU1VGRFFYWkZMRVZCUVZsRExFVkJRVmRCTEVWQlFWVjNTQ3haUVVOcVEzSkhMRVZCUVUxcFRDeEpRVUZKY0Uwc1JVRkJWM05GTEVWQlFVOHNTVUZCU1hWRkxFVkJRVk42U2l4UFFVRlBNRlVzVDBGQlR5eERRVUZGYmtzc1owSkJRVUZCTEVkQlFXMUNhRVVzUzBGRE5VVnlRaXhGUVVGTEsxTXNWMEZCVjNKWUxFbEJSWEJDYzBVc1JVRkJTM1ZDTEZOQlFWTTNSU3hIUVVOa2MwUXNSVUZCUzNkQ0xGVkhLMDFNZDFJc1EwRkJWWFJYTEVWQlFWRnRWeXhGUVVGcFFpOVlMRTlCUVU4d1ZTeFBRVUZQTEVOQlFVVnVTeXhuUWtGQmFVSnhSQ3hGUVVGeFFrNHNTVUZCWXk5SExFbEJWVzVIZFZJc1JVRkJhMElzUTBGRGJFSXNUVUZCVFRWVExFVkJRVTl1UkN4RlFVRk5Oa3NzU1VGQlNXMU1MRWRCUTNaQ2FGY3NSVUZCVFc5WExFOUJRVTlLTEVkQlRXSXNUVUZCVFRGVExFVkJRVmRJTEVWQlFVdHpSQ3hwUWtGQmFVSnVReXhGUVVOdVEyNUNMRVZCUVV0elJDeE5RVUZOYmtRc1kwRkRXRFZGTEVWQlEwcDNUaXhGUVVGelFsZ3NSVUZCVjNsTExFVkJRV2xDTVZNc1IwRkRiRVF4UlN4RlFVRlpReXhGUVVGWFFTeEZRVUZWZDBnc1dVRkRha040U0N4RlFVRlZaMG9zV1VGQldXMVBMRWRCUTNSQ2FGY3NSVUZCVFdsTUxFbEJRVWx3VFN4RlFVRlhjMFVzU1VGUmNFSjVVeXhIUVVGbFF5eEhRVU5vUW5KWUxFOUJRVTlwVGl4VFFVRlRLMG9zWVVGQllUTlhMRVZCUVZWcFdDeFBTek5TYzFJc1RVRkJUUzlNTEVkQlFVVXNiMEpCUVc5Q2Rrd3NVVUZCVVN4TlFVRk5RU3hQUVVGUFF5eHhRa0ZCWjBJc1NVRkJVMFFzVDBGQlQwTXNaVUZCWlVVc01FSkJRVEJDTmtRc1IwRkJSU3hEUVVGRE5rVXNSVUZCUlRCRExFVkJRVVYyU0N4RlFVRkZMRkZCUVZFc1MwRkJTM1ZJTEVsQlFVbDJTQ3hIUVVGSExFTkJRVU1zVFVGQlRVRXNSVUZCUlhWSUxFVkJRVVU1U3l4WlFVRlpiMGtzUlVGQlJXNUpMRmxCUVZrMlN5eEhRVUZIUVN4RlFVRkZka2dzU1VGQlNXNUZMRWRCUVVVc1ZVRkJWV1VzUzBGQlMwTXNVMEZCVXl4SlFVRkpSU3hOUVVGTkxFOUJRVTlRTEVkQlFVVXNWVUZCVlZnc1YwRkJWVXdzUjBGQlJUQkNMRTlCUVU4c1IwRkJSM0pDTEUxQlFVdFhMRTFCUVVzc1RVRkJUVzFHTEVkQlFVVjJSU3haUVVGWmVVZ3NSVUZCUlRCRExFZEJRVWRvU3l4TFFVRkxReXhOUVVGTkxFZEJRVWRFTEV0QlFVdEVMRkZCUVZGcFN5eEZRVUZGTEUxQlFVMTJTQ3hGUVVGRkxFZEJRVWQ0UkN4RlFVRkZMRWRCUVVkdFJpeEZRVUZGTDBRc1UwRkJVME1zYVVKQlFXbENNRW9zUlVGQlJYcEtMRkZCUVZFc1NVRkJTU3hOUVVGTExFZEJRVWtzU1VGQlNURkRMRVZCUVVVc1JVRkJSVU1zUjBGQlJ5eEZRVUZGYzFJc1JVRkJSU3hGUVVGRkxFMUJRVTE2VHl4UlFVRlJNbFlzUlVGQlJURldMRkZCUVZFMVF5eFBRVUZQZFZrc1NVRkJTV3BRTEVWQlFVVXNTMEZCU3poSUxFVkJRVVZ0U0N4SFFVRkhMRU5CUVVNc1RVRkJUV3BRTEVWQlFVVnNSQ3hGUVVGRmRFUXNWMEZCVnl4SFFVRkhMRTlCUVU5M1J5eEhRVUZITEVkQlFVZDRTaXhKUVVGSkxFbEJRVWwzU2l4RlFVRkZka2NzVTBGQlV5eERRVUZETEVkQlFVZDFSeXhGUVVGRmRFY3NaMEpCUVdkQ0xFTkJRVU1zVFVGQlRXZEtMRVZCUVVVeFF5eEZRVUZGY2tjc1dVRkJXV3BFTEU5QlFVOTVSU3hIUVVGSGRVZ3NSVUZCUlN4SlFVRkpNVXdzUlVGQlJTeEZRVUZGTEVsQlFVa3NTVUZCU1dkS0xFVkJRVVVzUlVGQlJVRXNSVUZCUlRkRkxFVkJRVVUyUlN4SlFVRkpjMDhzUjBGQlJUVk1MRVZCUVVVeFF5eEhRVUZIYkVjc1MwRkJTeXhWUVVGVk9VTXNTVUZCU1N4TFFVRkxRU3hMUVVGTExFZEJRVWNzUTBGQlF5eE5RVUZOTUV3c1JVRkJSWE5OTEVWQlFVVnNTQ3hIUVVGSE0wMHNSVUZCUlN0RExFZEJRVVZxUlN4TFFVRkxlVWtzUjBGQlJ5eEhRVUZITVV3c1JVRkJSVzFGTEVWQlFVVm9RaXhqUVVGakxGRkJRVkY0UXl4RlFVRkZjVWtzUlVGQlJUTkdMR0ZCUVdGeVJDeEhRVUZIWjBvc1JVRkJSVEZHTEdkQ1FVRm5RblJFTEVkQlFVY3NUVUZCVFRoR0xFVkJRVVZ1Uml4RlFVRkZOa01zVFVGQlRUZEVMRWxCUVVjclFpeExRVUZMUXl4TlFVRk5PRUlzUzBGQlN5eERRVUZEUXl4TFFVRkxMRmxCUVZsMlFpeE5RVUZOTTBNc1JVRkJSWE5FTEV0QlFVdHhRaXhGUVVGRk9VSXNVVUZCVVhsRUxFbEJRVWxuVEN4SFFVRkhhRXdzUlVGQlJYQkhMRTlCUVU4c1IwRkJSeXhoUVVGaGMwb3NSVUZCUlhKR0xGVkJRVlZvUkN4RlFVRkZPRU1zUzBGQlMzVkdMRWRCUVVkc1JDeEZRVUZGYkVNc1dVRkJXVzlHTEVWQlFVVXZSeXhqUVVGakxFZEJRVWNzU1VGQlNTdEhMRVZCUVVWMlJ5eFRRVUZUTEVOQlFVTXNUVUZCVFdsS0xFVkJRVVV4UXl4RlFVRkZia1lzUzBGQlN5eEhRVUZITmtnc1JVRkJSVFZJTEZGQlFWRTVSQ3hMUVVGSkxFVkJRVVVzUTBGQlF5eE5RVUZOUVN4RlFVRkZaMG9zUlVGQlJXaEdMRmRCUVZkeVJDeEZRVUZGSzBzc1JVRkJSV3hKTEUxQlFVMDNSQ3hKUVVGSGJVY3NSVUZCUlc1R0xFVkJRVVZxUWl4UFFVRlBMRVZCUVVVc1NVRkJTU3hKUVVGSlowMHNSVUZCUlN4RlFVRkZRU3hGUVVGRk5VWXNSVUZCUlRSR0xFbEJRVWtzUTBGQlF5eEpRVUZKZGtnc1JVRkJSWGhGTEVWQlFVVm5RaXhGUVVGRkswc3NSMEZCUnl4SFFVRkhMRXRCUVVzdlRDeEZRVUZGZDBVc1JVRkJSU3RVTEZOQlFWRXNRMEZCUXl4TlFVRk5iRkFzUlVGQlJUbENMRWRCUVVWcVJTeExRVUZMZEVRc1IwRkJSeXhQUVVGUGNVb3NSMEZCUjNOUExFZEJRVVYwVHl4RlFVRkZMRWRCUVVjc1YwRkJWM0pLTEVWQlFVVkJMRVZCUVVWMVFpeE5RVUZOTEVWQlFVVTRTQ3hGUVVGRk4wY3NUMEZCVHpaSExFVkJRVVVzUjBGQlIwRXNSVUZCUlN4SFFVRkhPVWdzVFVGQlRTeEhRVUZITEVkQlFVYzRTQ3hGUVVGRkxFbEJRVWszUlN4RlFVRkZjRU1zVTBGQlUzZERMR1ZCUVdVMVJTeEhRVUZIU3l4RlFVRkZkMFVzWVVGQllVd3NSVUZCUlRaRkxFZEJRVWQwU0N4TFFVRkxReXhOUVVGTk9FSXNTMEZCU3l4RFFVRkRReXhMUVVGTExFOUJRVTkyUWl4UlFVRlJNME1zU1VGQlNTeExRVUZMYlVJc1JVRkJSVzFHTEVsQlFVazVSaXhGUVVGRmQwVXNZVUZCWVRCVUxFdEJRVWxzVUN4SFFVRkhOMFVzUlVGQlJWWXNTMEZCUzNWR0xFbEJRVWxCTEVWQlFVVnVSaXhMUVVGTGJFUXNSVUZCUlcxR0xFZEJRVWRuVEN4SFFVRkhhRXdzVVVGQlVTeEhRVUZITEVsQlFVbHJSQ3hGUVVGRmRrY3NVMEZCVXl4SFFVRkhkVWNzUlVGQlJXNUdMRTlCUVU4M1JDeEhRVUZGTEVOQlFVTXNUVUZCVFRCTUxFVkJRVVV4UXl4RlFVRkZhRVlzVjBGQlZ5eFBRVUZQWjBZc1JVRkJSWFpGTEdsQ1FVRnBRbXBHTEVsQlFVbEVMRWxCUVVsRExFbEJRVWxyVFN4RlFVRkZiRWdzWVVGQllUQlVMRXRCUVVsc1VDeEpRVUZKZWtvc1JVRkJSVU1zUlVGQlJXdERMRXRCUVV0RExFMUJRVTA0UWl4TFFVRkxMRU5CUVVORExFdEJRVXNzVDBGQlQzWkNMRTFCUVUwelF5eEpRVUZKTEU5QlFVOTNTaXhGUVVGRmNFa3NXVUZCV1c5SkxFVkJRVVZ1Uml4TFFVRkxMRWxCUVVsTkxFVkJRVVZXTEV0QlFVdDFSaXhIUVVGSGVFb3NTMEZCUzNOU0xGRkJRVkVzUTBGQlF5eEpRVUZKY0VZc1IwRkJSeXhGUVVGRkxFMUJRVTBzUzBGQlMwRXNSVUZCUlRGRExFVkJRVVZ1Uml4TFFVRkxReXhSUVVGUk9VUXNSMEZCUlRCTUxFVkJRVVVzUzBGQlMyaExMRXRCUVV0RExFMUJRVTA0UWl4TFFVRkxMRU5CUVVORExFdEJRVXNzVDBGQlQzWkNMRTlCUVU4c1NVRkJTVEpQTEZWQlFWVm9UQ3hGUVVGRmJFTXNXVUZCV1dwRUxFVkJRVVVyUkN4TlFVRk5MRWxCUVVrc1RVRkJUWE5GTEV0QlFVczNSU3hGUVVGRk5rVXNSVUZCUldoR0xGZEJRVmR1UkN4WlFVRlpiVWtzU1VGQlNTeE5RVUZOYzA4c1IwRkJSU3hEUVVGRGRFOHNSVUZCUlRCRExFdEJRVXNzVFVGQlRYWklMRVZCUVVVMlJTeEZRVUZGZEVvc1QwRkJUMmROTEVWQlFVVm9UU3hQUVVGUExFOUJRVTk1UlN4SFFVRkhMRWRCUVVjMlJTeEZRVUZGT1Vnc1RVRkJUV2xFTEV0QlFVdDFTQ3hIUVVGSGJrMHNSMEZCUlhsS0xFbEJRVWtzU1VGQlNVRXNSVUZCUlRkSExFMUJRVTByVml4SFFVRkZMRWxCUVVsdVZ5eFRRVUZUWjBRc1kwRkJZeXhKUVVGSmJVTXNSMEZCUlN3MlNVRkJOa2tzVTBGQlV6RklMRWRCUVVWM1NpeEZRVUZGTUVNc1IwRkJSeXhOUVVGTmFrc3NVMEZCVTFFc1VVRkJVV3RETEVkQlFVZDRReXhOUVVGTk0wSXNSMEZCUjJkS0xFVkJRVVZ5U1N4RlFVRkZiMElzVTBGQlUwTXNhVUpCUVdsQ2JVTXNSVUZCUlN4SlFVRkpMRTFCUVVzc1IwRkJTU3hKUVVGSmVFVXNSVUZCUlhGWkxFZEJRVVZvV1N4SFFVRkhPRVlzUlVGQlJUbEdMRVZCUVVWTUxFZEJRVWN5V0N4SFFVRkhMRVZCUVVVdldDeEZRVUZGTEVWQlFVVXNUVUZCVFRKWkxFVkJRVVVzUjBGQlJ5eEpRVUZKYUZJc1JVRkJSU3hMUVVGTExFdEJRVXQyUnl4RlFVRkZOa0lzV1VGQldTeERRVUZET0ZVc1NVRkJTU3hOUVVGTmRFOHNSVUZCUlhKSkxFVkJRVVZwUkN4WlFVRlpMRWxCUVVsdlJpeEZRVUZGZGtVc2EwSkJRV3RDZVVNc1NVRkJTVUVzUlVGQlJTeE5RVUZOZDBVc1JVRkJSVzVITEVsQlFVbDVSQ3hMUVVGTGExQXNSVUZCUlhwVkxFdEJRVXQxUml4SFFVRkhMRTlCUVU4NVFpeEpRVUZKUVN4RlFVRkZPRUlzU1VGQlNTeFBRVUZQT1VJc1IwRkJSek5JTEZOQlFVa3NTVUZCVTNWSExFZEJRVWRCTEVWQlFVVXpSQ3hSUVVGUmJWWXNSMEZCUjNoU0xFVkJRVVV6UkN4TlFVRk5MRTlCUVU4clJTeEhRVUZITEVWQlFVVndRaXhGUVVGRk0wUXNUVUZCVFRWRExFVkJRVVZKTEVWQlFVVnhXU3hIUVVGRmFGa3NSVUZCUlV3c1IwRkJSMjFITEVWQlFVVTVSaXhGUVVGRlRDeEhRVUZIZFZrc1JVRkJSVEZUTEZGQlFWRjNSQ3hIUVVGSFFTeEZRVUZGYUVZc1YwRkJWMjVFTEZsQlFWbHRTU3hKUVVGSkxFMUJRVTA0U0N4SFFVRkZPVWdzU1VGQlNTeEpRVUZKTUVNc1JVRkJSU3hMUVVGTE1VTXNSVUZCUlhaSExGTkJRVk1zUlVGQlJTeEZRVUZGTEUxQlFVMHdRaXhGUVVGRmNFTXNVMEZCVTBNc2FVSkJRV2xDWjBnc1JVRkJSU3hKUVVGSkxFMUJRVXNzUjBGQlNTeExRVUZMTjBVc1JVRkJSVE5DTEZsQlFWbHJTaXhKUVVGSkxFOUJRVTlCTEVkQlFVZHpUU3hIUVVGRkxFTkJRVU5vVUN4RlFVRkZNRU1zUjBGQlJTeExRVUZOTEVsQlFVa3NTVUZCU1haSUxFVkJRVVYxU0N4RlFVRkZMRVZCUVVWMlNDeEZRVUZGTmtVc1JVRkJSWFJLTEU5QlFVOTVSU3hKUVVGSkxFTkJRVU1zVFVGQlRYVklMRVZCUVVVeFF5eEZRVUZGTjBVc1IwRkJSeXhIUVVGSE5VVXNSMEZCUlcxTkxFZEJRVWNzVDBGQlQzWklMRVZCUVVVc1QwRkJUeXhIUVVGVE9GUXNSMEZCUlN4SlFVRkpjbE1zVVVGQlVYVlRMRWRCUVVWdVVDeEhRVUZITEcxQ1FVRnRRa0VzUjBGQlIybFFMRWRCUVVVeFV5eEpRVUZKZVVRc1IwRkJSMjlRTEVkQlFVVXNSMEZCUjBNc1IwRkJSU3hIUVVGSExFMUJRVTFETEVkQlFVVXZWeXhaUVVGWmVVZ3NSVUZCUlRCRExFVkJRVVYyU0N4SFFVRkhla01zUzBGQlN6QkZMRkZCUVZFc1IwRkJSekZGTEV0QlFVdDFSQ3hUUVVGVEswUXNSVUZCUlhSSUxFdEJRVXQzUlN4VlFVRlZkMFlzUlVGQlJXaExMRXRCUVV0NVJTeFJRVUZSYUVNc1JVRkJSVFZETEU5QlFVOTVTQ3hIUVVGSExFbEJRVWt3UXl4RlFVRkZMRVZCUVVVc1NVRkJTU3hOUVVGTmRrZ3NTMEZCUzNwRExFdEJRVXN3UlN4aFFVRlJMRWxCUVZOcVF5eEhRVUZIUVN4RlFVRkZhME1zVTBGQlV6SkRMRVZCUVVVd1F5eEpRVUZKUVN4SlFVRkpMRWxCUVVrc1RVRkJUVEZETEV0QlFVdDBTQ3hMUVVGTE1FVXNZVUZCVVN4SlFVRlRORU1zUjBGQlIwRXNSVUZCUlRGRExGTkJRVk12UlN4VFFVRlRMRTFCUVUxNVNDeEZRVUZGTUVNc1IwRkJSV2hMTEV0QlFVdDFSQ3hUUVVGVGVFUXNVVUZCVVZFc1VVRkJVWFZGTEZkQlFWVXNSMEZCU1hwRkxGTkJRVk13UlN4WFFVRlhMMFVzUzBGQlMzVkVMRk5CUVZONFJDeFJRVUZSVVN4VFFVRlJMRWRCUVVsclF5eEZRVUZGTEVkQlFVZHVSU3hGUVVGRk1FSXNTMEZCUzNWRUxGTkJRVk4wUkN4TlFVRk5hRUlzUlVGQlJXOUNMRk5CUVZORExHbENRVUZwUW1kSUxFVkJRVVVzU1VGQlNTeE5RVUZMTEVkQlFVa3NTVUZCU1hKS0xFVkJRVVZ0Unl4RlFVRkZMRVZCUVVWM1VpeEZRVUZGTEVWQlFVVlpMRVZCUVVWMldDeEZRVUZGTmtJc1YwRkJWeXhMUVVGTGMwUXNSVUZCUlRsR0xFVkJRVVZPTEZGQlFWRXNSMEZCUjBNc1JVRkJSVXNzUlVGQlJUaEdMRWRCUVVkMlJ5eEhRVUZGU1N4SFFVRkhMRU5CUVVNc1MwRkJTekpZTEVWQlFVVXpXQ3hGUVVGRmQwTXNUMEZCVDIxV0xFbEJRVWtzWVVGQllWa3NSVUZCUlhoU0xGZEJRVmQyUXl4RlFVRkZWaXhMUVVGTGVWVXNSMEZCUjNaWUxFVkJRVVZwUkN4WlFVRlpjMVVzUlVGQlJXcFhMRk5CUVZNc1VVRkJVV2xYTEVWQlFVVjJXQ3hGUVVGRk5rSXNZMEZCWXpkQ0xFVkJRVVZwUkN4WlFVRlpUeXhGUVVGRlR5eE5RVUZOZDFRc1JVRkJSWFpZTEVWQlFVVTJRaXhaUVVGWkxFZEJRVWNzVTBGQlV6ZERMRVZCUVVVclJDeExRVUZMTEVOQlFVTXNUVUZCVFhOR0xFVkJRVVYwU0N4TFFVRkxkMFVzVlVGQlZWTXNjVUpCUVhGQ2FrWXNTMEZCUzNsRkxGTkJRVk0yUXl4RlFVRkZjRU1zWjBKQlFXZENjMUlzUlVGQlJYcFVMR2xDUVVGcFFpOURMRXRCUVVzd1JTeFJRVUZSTTBNc1MwRkJTM1ZHTEZGQlFWRjBTQ3hMUVVGTE1FVXNVVUZCVVRORExGRkJRVkV2UWl4TFFVRkxkMFVzVlVGQlZWY3NNa0pCUVRKQ2NWSXNSVUZCUlhaWkxFVkJRVVZ0UkN4TFFVRkxia1FzUlVGQlJUQkRMRkZCUVZGWUxFdEJRVXQ1UlN4VlFVRlZUQ3hUUVVGVGNFVXNTMEZCU3pCRkxGRkJRVkV6UXl4VlFVRkxMRWRCUVZGeFF5eEpRVUZKTEU5QlFVODBSaXhMUVVGSk0wb3NVMEZCVXl0RkxGVkJRVlZyUXl4SFFVRkhOVWtzWlVGQlpUSkhMRkZCUVZGcFF5eEpRVUZKUVN4SFFVRkhMRTFCUVUxRUxFZEJRVVVzU1VGQlNTOUpMRTFCUVVzc1RVRkJUWFZaTEVkQlFVVm9XQ3haUVVGWmVVZ3NSVUZCUlRCRExFVkJRVVYyU0N4RlFVRkZia1VzUjBGQlJ6QkNMRXRCUVV0WExGRkJRVkV5Unl4RlFVRkZkRWdzUzBGQlMxa3NUMEZCVDI5S0xFVkJRVVZvU3l4TFFVRkxaME1zUzBGQlMxTXNSVUZCUlhwRExFdEJRVXQzUlN4VlFVRlZiRWNzUlVGQlJYVkNMRlZCUVZVc1RVRkJUWGxJTEVWQlFVVjBTQ3hMUVVGTFZ5eFJRVUZSTTBNc1QwRkJUeXhGUVVGRkxFbEJRVWxuVFN4RlFVRkZMRWRCUVVkMlNDeEhRVUZGTEVWQlFVY3NTVUZCU1N4SlFVRkplRVVzUlVGQlJTeEZRVUZGUVN4RlFVRkZjVW9zUlVGQlJYSktMRWxCUVVrc1EwRkJReXhOUVVGTmNVb3NSVUZCUlhSSUxFdEJRVXRYTEZGQlFWRXhReXhIUVVGSGJVY3NSVUZCUld0RUxFVkJRVVV4UWl4WlFVRlpMRmRCUVZkdVJDeEhRVUZITWtJc1IwRkJSeXhIUVVGSE0wSXNTMEZCU3l4SlFVRkpOa1VzUlVGQlJXeEdMRkZCUVZFc1UwRkJVMmRETEVWQlFVVXNSMEZCUnl4TlFVRk5kMUlzUlVGQlJYQlJMRWRCUVVWcVJTeExRVUZMSzBZc1IwRkJSekJETEVkQlFVY3NUMEZCVHpSTUxFVkJRVVYwVHl4SFFVRkhOMFVzUlVGQlJUUkZMRWRCUVVWd1NTeEpRVUZIY1Vrc1JVRkJSWGhDTEU5QlFVOHNSVUZCUlRoUUxFVkJRVVZ1Vml4UFFVRlBiVllzUlVGQlJTeEhRVUZIUVN4RlFVRkZMRWRCUVVjc1VVRkJVVUVzUlVGQlJTeEhRVUZIZEZnc1IwRkJSU3hQUVVGUE1Fd3NSMEZCUjJoTExFdEJRVXRYTEZGQlFWRXlSeXhIUVVGSE1FTXNSVUZCUlc1TExIRkNRVUZ4UWl4TlFVRk5lVWdzUlVGQlJXcElMRk5CUVZNd1JpeGpRVUZqTEZsQlFWa3NUMEZCVDNWQ0xFVkJRVVYwUWl4VlFVRlZhRWNzUzBGQlMybEhMRlZCUVZWeFFpeEhRVUZITEUxQlFVMTNVQ3hIUVVGRmVGQXNSMEZCUnl4UFFVRlBRU3hMUVVGTExHbENRVUZwUWtFc1IwRkJSeXh0UWtGQmJVSkJMRWRCUVVkNVVDeEhRVUZGZWxBc1IwRkJSMVlzVFVGQlRVTXNVVUZCVVZNc1QwRkJUMEVzU1VGQlNVRXNSVUZCUlZJc1QwRkJUME1zVjBGQlZ5eE5RVUZOYVZFc1IwRkJSVzVZTEZsQlFWbDVTQ3hGUVVGRk1FTXNSVUZCUlhaSUxFZEJRVWQ2UXl4TFFVRkxhVWdzVDBGQlRTeEZRVUZIYWtnc1MwRkJTMFFzVVVGQlVYVklMRVZCUVVWMFNDeExRVUZMYjBJc1MwRkJTelJKTEVWQlFVVm9TeXhMUVVGTFZ5eFJRVUZST0VJc1JVRkJSWHBETEV0QlFVdERMRTFCUVUwc1IwRkJSeXhKUVVGSkxFbEJRVWx4U0N4RlFVRkZMRVZCUVVWQkxFVkJRVVUzUlN4RlFVRkZla1VzVDBGQlR5eEZRVUZGYzBvc1NVRkJTWFJJTEV0QlFVdERMRTFCUVUxeFNDeEhRVUZIZEVnc1MwRkJTMnRJTEdOQlFXTnlTQ3hqUVVGakxFOUJRVThzU1VGQlNXOVlMRWRCUVVWcVdDeE5RVUZOU0N4WlFVRlpMRTFCUVUxNVNDeEZRVUZGZEVnc1MwRkJTMWNzVVVGQlVYRktMRVZCUVVVeFF5eEZRVUZGZEVvc1QwRkJUeXhGUVVGRkxFbEJRVWw1UlN4RlFVRkZMRWRCUVVjc1NVRkJTU3hKUVVGSmJrVXNSVUZCUlN4RlFVRkZRU3hGUVVGRk1Fd3NSVUZCUlRGTUxFbEJRVWtzUTBGQlEyMUZMRWRCUVVjMlJTeEZRVUZGYUVvc1IwRkJSeXhOUVVGTk1Fd3NSVUZCUldoTExFdEJRVXRETEUxQlFVMHpRaXhIUVVGSExGRkJRVWNzU1VGQlV6Qk1MRVZCUVVVc1EwRkJReXhOUVVGTk1VTXNSVUZCUlRCRExFVkJRVVYwUkN4TlFVRk5MRWRCUVVkdlVTeEhRVUZGZUZBc1MwRkJTM2xRTEVkQlFVVjZVQ3hIUVVGSE4wVXNSMEZCUnl4cFFrRkJhVUkyUlN4RlFVRkZRU3hGUVVGRlFTeEZRVUZGTEZGQlFWRXNTVUZCU1N4TlFVRk5NRU1zUzBGQlN6RkRMRVZCUVVVM1JTeEhRVUZITEdsQ1FVRnBRblZJTEVWQlFVVkJMRVZCUVVWQkxFVkJRVVVzU1VGQlNTeFBRVUZQZGtnc1IwRkJSelpGTEVWQlFVVXdReXhIUVVGSGRrZ3NSVUZCUlRWRExGTkJRVk5ITEV0QlFVdHBTQ3hSUVVGUmFrZ3NTMEZCUzJsSUxFOUJRVTBzUlVGQlIycElMRXRCUVV0RUxGRkJRVkYzU0N4aFFVRmhka2dzUzBGQlMyOUNMRXRCUVV0d1FpeExRVUZMZDBnc1pVRkJaU3hOUVVGTmVWQXNSMEZCUlhCWUxGbEJRVmw1U0N4SFFVRkhkRWdzUzBGQlN6QkhMRmRCUVUwc1JVRkJUekZITEV0QlFVdDVTQ3hWUVVGVlNDeEZRVUZGZWtnc1UwRkJVM2xJTEVkQlFVZEJMRWxCUVVsdlVDeEpRVUZIU1N4SFFVRkZlRkFzU1VGQlNVRXNTVUZCU1hSSUxFdEJRVXN3Unl4UlFVRlJNVWNzUzBGQlN6QkhMRTFCUVUxWkxFVkJRVVZ0VUN4SFFVRkZibEFzUzBGQlMzUklMRXRCUVV0NVNDeFZRVUZWVWl4UFFVRk5MRWxCUVV0d1NDeFRRVUZUTEV0QlFVczBWeXhIUVVGRmVsY3NTMEZCU3pCSExGRkJRVkVzUTBGQlF5eE5RVUZOV1N4RlFVRkZkRWdzUzBGQlN6QkhMRTFCUVUweFJ5eExRVUZMTUVjc1RVRkJUV2RSTEVkQlFVVndVQ3hGUVVGRmRFZ3NUVUZCVFVFc1MwRkJTekJITEZGQlFWRm5VU3hKUVVGSE1WY3NTMEZCUzNsSUxGVkJRVlUzUXl4VlFVRlZMRTFCUVUxelV5eEhRVUZGY2xnc1dVRkJXWGxJTEVkQlFVZDBTQ3hMUVVGTE1FY3NWMEZCVFN4RlFVRlBNVWNzUzBGQlN6UklMRzlDUVVGbExFVkJRVTgxU0N4TFFVRkxlVVVzVVVGQlVUWkRMRVZCUVVWNlNDeFhRVUZYZVVnc1IwRkJSM1JJTEV0QlFVczJTQ3hWUVVGVlVDeEZRVUZGVVN4WlFVRlpNRThzVFVGQlMzaFhMRXRCUVVzclNDeFJRVUZSVkN4RlFVRkZVU3haUVVGWk1FOHNUVUZCU3pOWExHZENRVUZuUW5sSUxFZEJRVWQwU0N4TFFVRkxOa2dzVlVGQlZWQXNSVUZCUlhSSUxFdEJRVXNyU0N4UlFVRlJWQ3hGUVVGRmNFa3NXVUZCV1Zjc1pVRkJaWGxJTEVkQlFVZEJMRVZCUVVWWExGTkJRVk5xU1N4TFFVRkxOa2dzVlVGQlZUSlBMRTFCUVV0c1VDeEZRVUZGVnl4VFFVRlRha2tzUzBGQlN5dElMRkZCUVZGNVR5eE5RVUZMTTFjc1owSkJRV2RDZVVnc1IwRkJSMEVzUlVGQlJWY3NVMEZCVTJwSkxFdEJRVXMyU0N4VlFVRlZNazhzVFVGQlMzaFhMRXRCUVVzclNDeFJRVUZSVkN4RlFVRkZVeXhSUVVGUlZDeEZRVUZGVXl4UlFVRlJMMGdzUzBGQlN6WklMRlZCUVZWb1NTeFRRVUZUZVVnc1IwRkJSM1JJTEV0QlFVczBTQ3hsUVVGbFRpeEZRVUZGZWtnc1UwRkJVeXhIUVVGSExFOUJRVTlITEV0QlFVczJTQ3hWUVVGVmRrWXNWMEZCVnl4UFFVRlBMRXRCUVV0dFZTeEhRVUZGZWxjc1MwRkJTelJJTEdsQ1FVRnBRaXhEUVVGRExFMUJRVTFPTEVWQlFVVjBTQ3hMUVVGTE5FZ3NaVUZCWlRWSUxFdEJRVXMwU0N4bFFVRmxPRThzUjBGQlJYQlFMRVZCUVVWMFNDeE5RVUZOTEUxQlFVMXpTQ3hGUVVGRmRFZ3NTMEZCU3pSSUxHVkJRV1ZPTEVsQlFVbHZVQ3hMUVVGSlNTeEhRVUZGZUZBc1IwRkJSMEVzU1VGQlNYUklMRXRCUVVzd1J5eFBRVUZQTVVjc1MwRkJTMnRKTEdGQlFXRmFMRWRCUVVkQkxHRkJRV0YxVUN4SFFVRkZOMWNzUzBGQlMyMUpMSFZDUVVGMVFtSXNSMEZCUjBFc1lVRkJZV01zUzBGQlMzQkpMRXRCUVV0eFNTeGhRVUZoWml4SFFVRkhlVkFzUjBGQlJYcFFMRWRCUVVkMFNDeExRVUZMYzBrc2FVSkJRV2xDYUVJc1IwRkJSMEVzU1VGQlNYRlFMRWxCUVVjelZ5eExRVUZMTUVjc1RVRkJUV2xSTEVkQlFVVXpWeXhMUVVGTGRVa3NVMEZCVTNaSkxFdEJRVXRyU1N4aFFVRmhXaXhKUVVGSmVrZ3NVMEZCVTNsSUxFZEJRVWQwU0N4TFFVRkxLMGdzVVVGQlVYcEdMRmRCUVZkUkxHRkJRV0YzUlN4RlFVRkZkRWdzUzBGQlN5dElMRk5CUVZOc1NTeGhRVUZoZVVnc1IwRkJSM1JJTEV0QlFVc3dSeXhSUVVGUldTeEpRVUZKZEVnc1MwRkJTM1ZKTEZGQlFWRjJTU3hMUVVGTGFVa3NVMEZCVTFnc1IwRkJSM1JJTEV0QlFVc3dSeXhOUVVGTldTeEhRVUZIZWtnc1lVRkJZWGxJTEVkQlFVY3NUVUZCVFRCRExFVkJRVVZvU3l4TFFVRkxOa2dzVlVGQlZUTkpMRmxCUVZsMVJDeEZRVUZGTEdsQ1FVRnBRalpGTEVWQlFVVXNUVUZCVFVFc1JVRkJSU3hIUVVGSFFTeEhRVUZIUVN4RlFVRkZRU3hGUVVGRkxFZEJRVWN3UXl4SlFVRkphRXNzUzBGQlN5dElMRkZCUVZGb1JpeHBRa0ZCYVVJc1NVRkJTV2xJTEVWQlFVVnFTaXhUUVVGVGFVb3NSVUZCUlRkSUxFdEJRVXROTEVWQlFVVjZReXhMUVVGTGNVa3NZVUZCWVdoSkxGTkJRVk4zUXl4bFFVRmxTaXhKUVVGSmVrTXNTMEZCU3pCSExFMUJRVTFaTEVWQlFVVjZTQ3gxUWtGQmRVSjVTQ3hIUVVGSExFMUJRVTB3UXl4RlFVRkZhRXNzUzBGQlMzbEZMRkZCUVZGblJTeG5Ra0ZCWjBKdVFpeEhRVUZITEVkQlFVZDBTQ3hMUVVGTE1FY3NhVUpCUVdsQ2ExRXNTVUZCUnpWWExFdEJRVXN3Unl4TlFVRk5ia1FzVjBGQlYzbEhMRVZCUVVWb1N5eExRVUZMTUVjc1RVRkJUV2RETEU5QlFVOXdRaXhGUVVGRk1VY3NXVUZCV1N4RFFVRkRMRTFCUVUwMlFpeEZRVUZGTEVsQlFVbHRWU3hIUVVGRk5VMHNSVUZCUlRGRExFVkJRVVU1UXl4VlFVRlZlRVVzUzBGQlMzbEZMRk5CUVZOdVJ5eEZRVUZGYlVVc1JVRkJSVzFITEZOQlFWTnVSeXhGUVVGRmFVY3NUMEZCVDNCQ0xFVkJRVVV4Unl4UlFVRlJXaXhMUVVGTGNVa3NZVUZCWVM5S0xFZEJRVWN3UWl4TFFVRkxNRWNzVFVGQlRXcEZMRWRCUVVjMVF5eHBRa0ZCYVVKNVNDeEhRVUZIVml4TlFVRk5ReXhSUVVGUk4wY3NTMEZCU3pCSExGTkJRVk14Unl4TFFVRkxNRWNzVFVGQlRTeEhRVUZITVVjc1MwRkJTM1ZKTEZOQlFWTXNUVUZCVFhsQ0xFVkJRVVZvU3l4TFFVRkxNRWNzVFVGQlRTeEpRVUZKYWtVc1JVRkJSVzVGTEVWQlFVVXNSVUZCUlN4SlFVRkpMRTFCUVUxWExFdEJRVXR4U1N4RlFVRkZOMFVzUlVGQlJYVklMRVZCUVVVeFRDeFJRVUZITEVsQlFWTnRSU3hKUVVGSlFTeEZRVUZGTEVsQlFVbDVWU3hIUVVGRmJGZ3NTMEZCUzNsRkxGTkJRVk4xUml4RlFVRkZha2tzUzBGQlMxVXNSMEZCUnl4SlFVRkpia1VzUlVGQlJXMUZMRVZCUVVWMVJ5eGxRVUZsYUVvc1RVRkJUWGxETEVWQlFVVjNSeXhuUWtGQlowSmxMRVZCUVVVeFRDeEZRVUZGTEV0QlFVdHRSU3hGUVVGRmEwTXNVMEZCVXpGR0xFZEJRVWQzUkN4RlFVRkZiVU1zVTBGQlUzUkhMRWxCUVVsQkxFVkJRVVV3VEN4RlFVRkZhRTBzVTBGQlUyZE5MRVZCUVVWb1RTeFBRVUZQVFN4RlFVRkZNRUlzUzBGQlMzVkpMRTFCUVUwNVJpeEhRVUZIUVN4RlFVRkZjMFlzVlVGQlZXeEpMRTFCUVUxNVNDeEZRVUZGZEVnc1MwRkJTelpJTEZkQlFWZHdSaXhIUVVGRmVrTXNTMEZCU3paSUxGVkJRVlYyUml4WFFVRlhaMFlzUlVGQlJYQkpMRmxCUVZsakxFdEJRVXNyU0N4VlFVRlZMRTFCUVUxdlVDeEhRVUZGZEZnc1dVRkJXWGxJTEVWQlFVVXdReXhGUVVGRmRrZ3NSMEZCUnl4SFFVRkhla01zUzBGQlN6QkhMRmRCUVUwc1JVRkJUekZITEV0QlFVczBTQ3h2UWtGQlpTeEZRVUZQTEVsQlFVbHVSaXhGUVVGRmVrVXNVVUZCVVN4TFFVRkxlVVVzUlVGQlJTeEpRVUZKTEV0QlFVdEJMRVZCUVVVc1IwRkJSeXhOUVVGTk1FY3NUVUZCVFN3eVJFRkJNa1J1U2l4TFFVRkxSQ3hSUVVGUmRVZ3NSVUZCUlhSSUxFdEJRVXR2UWl4TFFVRkxORWtzUlVGQlJXaExMRXRCUVV0WExGRkJRVkU0UWl4RlFVRkZOVU1zVTBGQlUzbElMRWRCUVVkMFNDeExRVUZMTkVnc1pVRkJaVTRzUlVGQlJYcElMRk5CUVZNc1MwRkJTelJYTEVkQlFVVjZWeXhMUVVGTE5FZ3NhVUpCUVdsQ0xFTkJRVU1zVFVGQlRVNHNSVUZCUlhSSUxFdEJRVXMwU0N4bFFVRmxOVWdzUzBGQlN6UklMR1ZCUVdVNFR5eEhRVUZGY0ZBc1JVRkJSWFJJTEUxQlFVMHNSMEZCUjBFc1MwRkJTelJJTEdsQ1FVRnBRamhQTEVkQlFVVXNUMEZCVHl4TlFVRk5jRkFzU1VGQlNYUklMRXRCUVVzMFNDeGxRVUZsTlVnc1MwRkJTekJITEZGQlFWRlpMRWxCUVVsQkxFVkJRVVYwU0N4TFFVRkxSQ3hSUVVGUmQwZ3NZVUZCWVhaSUxFdEJRVXR2UWl4TFFVRkxMRWxCUVVsd1FpeExRVUZMUkN4UlFVRlJOa0lzWjBKQlFXZENOVUlzUzBGQlMyOUNMRTFCUVUxd1FpeExRVUZMTUVjc1RVRkJUVmtzUjBGQlIzUklMRXRCUVVzMFNDeGxRVUZsT0U4c1NVRkJSeXhOUVVGTlZTeFhRVUZWU2l4SFFVRkZibGdzV1VGQldYbElMRVZCUVVVd1F5eEZRVUZGZGtnc1IwRkJSekJFTEUxQlFVMXRRaXhGUVVGRk1FTXNSVUZCUlhaSUxFZEJRVWQ2UXl4TFFVRkxjVW9zVDBGQlR5eEpRVUZKTlVjc1JVRkJSWHBGTEZGQlFWRXNTMEZCUzNsRkxFVkJRVVVzU1VGQlNTeExRVUZMUVN4RlFVRkZMRWRCUVVjMVF5eGpRVUZqTEU5QlFVOHNTVUZCU1hkWUxFZEJRVVZ5V0N4TlFVRk5TQ3haUVVGWkxFOUJRVTlITEV0QlFVdHhTaXhQUVVGUGNrb3NTMEZCUzBNc1RVRkJUU3hIUVVGSGVVY3NUVUZCVFZBc1RVRkJUWEZDTEZsQlFWa3pTQ3hUUVVGVFJ5eExRVUZMYVVnc1VVRkJVV3BJTEV0QlFVdHBTQ3hQUVVGTkxFVkJRVWRxU0N4TFFVRkxSQ3hSUVVGUlF5eExRVUZMYjBJc1RVRkJUWEJDTEV0QlFVdDNTQ3hqUVVGakxFMUJRVTAyVUN4WFFVRlZTaXhKUVVGSExFbEJRVWxMTEVsQlFVVXNSVUZCUnl4TlFVRk5MRWxCUVVrc1RVRkJUV2hSTEVWQlFVVXNRMEZCUTJ0RExHTkJRV01zVDBGQlR6aE9MRWxCUVVVc1IwRkJSeXhKUVVGTE4xa3NUMEZCVDJkTUxHbENRVUZwUWl4UFFVRlBia01zUlVGQlJVRXNSMEZCUnpkSkxFOUJRVTlwVEN4dlFrRkJiMElzVDBGQlQzQkRMRVZCUVVWQkxFZEJRVWNzVFVGQlRVRXNUVUZCYmtrc1IwRkJORWtzVFVGQlRXbFJMRWRCUVVVeFdDeFpRVUZaZVVnc1JVRkJSVEJETEVWQlFVVjJTQ3hIUVVGSGVrTXNTMEZCU3pCSExGZEJRVTBzUlVGQlR6RkhMRXRCUVVzMFNDeHZRa0ZCWlN4RlFVRlBOVWdzUzBGQlMwUXNVVUZCVVhWSUxFVkJRVVYwU0N4TFFVRkxOa29zVlVGQlZVY3NSVUZCUldoTExFdEJRVXM0U2l4aFFVRmhja2dzUlVGQlJYcERMRXRCUVVzclNpeHRRa0ZCYlVKNlF5eEhRVUZIZEVnc1MwRkJTMmxMTEZsQlFWa3pReXhIUVVGSGVrZ3NVMEZCVTNsSUxFZEJRVWQwU0N4TFFVRkxORWdzWlVGQlpVNHNSVUZCUlhwSUxGTkJRVk1zUzBGQlN6UlhMRWRCUVVWNlZ5eExRVUZMTkVnc2FVSkJRV2xDTEVOQlFVTXNUVUZCVFU0c1JVRkJSWFJJTEV0QlFVczBTQ3hsUVVGbE5VZ3NTMEZCU3pSSUxHVkJRV1U0VHl4SFFVRkZjRkFzUlVGQlJYUklMRTFCUVUwc1IwRkJSMEVzUzBGQlN6UklMR2xDUVVGcFFqaFBMRWRCUVVVc1QwRkJUeXhOUVVGTmNGQXNSVUZCUlhSSUxFdEJRVXMwU0N4bFFVRmxiME1zUlVGQlJXaExMRXRCUVVzd1J5eE5RVUZOYWtVc1JVRkJSU3hOUVVGTk5rVXNSMEZCUnl4TlFVRk5NRU1zU1VGQlNURkRMRVZCUVVWclF5eFZRVUZWVVN4RlFVRkZVaXhUUVVGVGJFTXNSVUZCUlN0RExFOUJRVTlNTEVWQlFVVkxMRTFCUVUwdlF5eEZRVUZGWjBRc1ZVRkJWVTRzUlVGQlJVMHNVMEZCVTJoTkxFVkJRVVVzVFVGQlRXZEtMRWxCUVVrc1RVRkJUVEJETEVkQlFVZDJTQ3hIUVVGSFFTeEhRVUZIZWtNc1MwRkJTMFFzVVVGQlVUSktMRzlDUVVGdlFqRktMRXRCUVVzMlNpeFZRVUZWTjBvc1MwRkJTeXRLTEcxQ1FVRnRRaTlLTEV0QlFVdDNTeXhYUVVGWGJFMHNTVUZCU1RCQ0xFdEJRVXQzU3l4VlFVRlZaMDRzUjBGQlJXeFJMRWRCUVVkMFNDeExRVUZMUkN4UlFVRlJNRW9zYVVKQlFXbENla29zUzBGQlN6WktMRlZCUVZVM1NpeExRVUZMSzBvc2JVSkJRVzFDTDBvc1MwRkJTM2RMTEZsQlFWbDRTeXhMUVVGTE1FY3NUVUZCVFZrc1JVRkJSWFJJTEV0QlFVczBTQ3hsUVVGbE9FOHNSMEZCUlRkWExGbEJRVmw1U0N4SFFVRkhMRzFDUVVGdFFuUklMRXRCUVVzd1J5eE5RVUZOTVVjc1MwRkJTekJITEUxQlFVMXBSU3hMUVVGTE0wc3NTMEZCU3poS0xHTkJRV001U2l4TFFVRkxSQ3hSUVVGUmRVZ3NSMEZCUjNSSUxFdEJRVXN3Unl4TlFVRk5kVVFzV1VGQldUTkRMRWxCUVVrc1RVRkJUV3RSTEVkQlFVVnNVU3hIUVVGSFFTeEpRVUZKWjFFc1IwRkJSU3hEUVVGRE9VNHNVVUZCVVd4RExFVkJRVVZyUXl4UlFVRlJZeXhSUVVGUmFFUXNSVUZCUldkRUxGRkJRVkZFTEV0QlFVc3ZReXhGUVVGRkswTXNUVUZCVFM5RExFVkJRVVZyUXl4VFFVRlRMRk5CUVZOdFJ5eEhRVUZGY2trc1IwRkJSeXhKUVVGSk1FTXNSVUZCUlhsT0xFZEJRVVV6VFN4SlFVRkplRVFzUlVGQlJYUkdMRmRCUVUwc1NVRkJVMmRKTEVsQlFVbEJMRVZCUVVVc1EwRkJRMlVzWVVGQllTeEpRVUZKTjBjc1VVRkJVVGhITEZWQlFWVXNTVUZCU1VNc1MwRkJTM2ROTEVkQlFVVjJUU3hKUVVGSk5VUXNSVUZCUlhSR0xFdEJRVXRuU1N4SlFVRkpMRWxCUVVsMlNDeEZRVUZGZFVnc1JVRkJSV1VzWVVGQllVUXNTVUZCU1hoRUxFVkJRVVV6Unl4VFFVRlRMRkZCUVVjc1NVRkJVemhDTEVWQlFVVXNUMEZCVDBFc1JVRkJSU3hOUVVGTmVFUXNSVUZCUlhGSkxFVkJRVVV6Unl4UlFVRlJkMHNzUzBGQlN6ZE5MRWxCUVVjc1QwRkJUMjFGTEVWQlFVVjFTQ3hGUVVGRlowSXNWVUZCVlVZc1NVRkJTVGRNTEZGQlFVY3NTVUZCVTNkRUxFbEJRVWxCTEVWQlFVVXNTVUZCU1RKQ0xFZEJRVVZyUkN4RlFVRkZRU3hGUVVGRmJFSXNjMEpCUVhOQ05FUXNSVUZCUldkQ0xGVkJRVlZGTEVsQlFVbHFUU3hGUVVGRmQwUXNTVUZCU1hWSUxFVkJRVVZsTEdGQlFXRkhMRWxCUVVrMVJDeEZRVUZGTTBjc1VVRkJVVGhDTEVkQlFVZEJMRVZCUVVVc1RVRkJUV2RXTEVkQlFVVXNTVUZCU1hoTkxFbEJRVWw1VFN4SFFVRkZMRWxCUVVsNFZDeFJRVUZqZVZRc1IwRkJSU3hKUVVGSkxFMUJRVTA1V0N3eVFrRkJNa0o1U0N4RlFVRkZNRU1zUlVGQlJYWklMRVZCUVVWdVJTeEhRVUZITEUxQlFVMVhMRVZCUVVVclN5eEZRVUZGTEVkQlFVY3NUVUZCUnl4TlFVRk5MMHNzUlVGQlZTeEpRVUZKYlZrc1IwRkJSVGxRTEVWQlFVVXdReXhGUVVGRmVFc3NUVUZCVFN4SFFVRkhhVVFzUjBGQlIzaERMRTFCUVZNc1RVRkJUV2hDTEVWQlFWRXNRMEZCUXl4SlFVRkpjMWtzUjBGQlJXcFJMRVZCUVVVd1F5eEZRVUZGZUVzc1RVRkJUU3hIUVVGSGJFSXNSVUZCUlhkTUxHVkJRV3RDTEUxQlFVMDNTeXhGUVVGUkxFTkJRVU1zU1VGQlNXdFpMRWRCUVVVM1VDeEZRVUZGTUVNc1JVRkJSWGhMTEUxQlFVMHNSMEZCUjJsRUxFbEJRVmNzU1VGQlNYVlZMRWRCUVVVeFVDeEZRVUZGTUVNc1JVRkJSWFpJTEVkQlFVZDRReXhOUVVGTlNpeHhRa0ZCY1VKNVNDeEhRVUZITEU5QlFVOHNTVUZCU1RSUUxFZEJRVVUxVUN4TFFVRkxMRzlDUVVGdlFqZEpMRk5CUVZOQkxFOUJRVTl0V2l4clFrRkJhMEp1V2l4UFFVRlBiVm9zWjBKQlFXZENMRXRCUVVzM1ZpeExRVUZMTEZOQlFWTXNUVUZCVFRoV0xFZEJRVVVzUTBGQlEzWlJMRXRCUVVzd1F5eEpRVUZKTEVsQlFVazJUU3hIUVVGRmRsQXNSVUZCUlRCRExFVkJRVVVzVDBGQlR6Sk9MRWxCUVVkSExFZEJRVVVzUTBGQlEzaFJMRVZCUVVVd1F5eEpRVUZKTEVkQlFVY3hReXhOUVVGTk1FTXNTVUZCU1N4SlFVRkpLMDRzU1VGQlJTeFBRVUZITEVsQlFWTjBXaXhQUVVGUGFVNHNVMEZCVTNGTkxFbEJRVVVzVDBGQlJ5eEpRVUZUZEZvc1QwRkJUMmxPTEZOQlFWTkRMSEZDUVVGeFFrTXNVVUZCVVVNc1MwRkJTeXcyU1VGQk5rbHJUU3hKUVVGRkxFZEJRVWtzVFVGQlRVTXNSMEZCUlRGUkxFZEJRVWN3UXl4SlFVRkpMRTFCUVUxMlNDeEZRVUZGY1ZZc1IwRkJSVGxPTEVWQlFVVm9TU3hMUVVGTGMwWXNSMEZCUnl4SlFVRkpja2tzUlVGQlJYZFpMRWRCUVVVelRTeEpRVUZKY2trc1VVRkJSeXhKUVVGVGVFUXNTVUZCU1VFc1JVRkJSU3hEUVVGRE9Fd3NZVUZCWVN4SlFVRkpOMGNzVVVGQlVUaEhMRlZCUVZVc1NVRkJTVU1zUzBGQlMzZE5MRWRCUVVWMlRTeEpRVUZKZWtrc1JVRkJSWGhFTEVsQlFVa3NTVUZCU1doQ0xFVkJRVVZuUWl4RlFVRkZPRXdzWVVGQllVUXNTVUZCU1dRc1JVRkJSWEpLTEZOQlFWTXNVVUZCUnl4SlFVRlRNVU1zUlVGQlJTeFBRVUZQUVN4RlFVRkZMRTFCUVUweVdDeEZRVUZGTlV3c1JVRkJSWEpLTEZGQlFWRjNTeXhMUVVGTE4wMHNTVUZCUnl4SFFVRkhUQ3hGUVVGRlowSXNSVUZCUlN0TUxGVkJRVlZHTEVsQlFVazRTeXhSUVVGSExFbEJRVk16V0N4RlFVRkZMRU5CUVVNc1RVRkJUWGRGTEVWQlFVVjFTQ3hGUVVGRk5VUXNjVUpCUVhGQ01sSXNTVUZCUjNSYUxFOUJRVTlwVGl4VFFVRlRReXh0UWtGQmJVSnNTaXhGUVVGRk5rVXNSMEZCUjNKS0xFVkJRVVVzU1VGQlNXMUhMRWRCUVVVMFJpeEZRVUZGZGtnc1IwRkJSM2hFTEVWQlFVVXJUQ3hWUVVGVlJTeEpRVUZKTUVzc1JVRkJSVE5ZTEVkQlFVY3NUMEZCVDJkQ0xFVkJRVVU0VEN4aFFVRmhSeXhKUVVGSmJFSXNSVUZCUlhKS0xGRkJRVkV4UXl4SFFVRkhRU3hIUVVGSFoyRXNSMEZCUlN4RFFVRkRMRTlCUVU4c1QwRkJUME1zUjBGQlJTeEpRVUZKYUUwc1NVRkJNbTlEZWs0c1QwRkJUelpQTERCQ1FVRXdRaXhEUVVGRGFFY3NSVUZCUlRCRExFbEJRVWt4UXl4RlFVRkZMRTFCUVUwMlVTeEhRVUZGTEVOQlFVTjBXU3haUVVGWmVVZ3NSVUZCUlRCRExFZEJRVWNzVDBGQlQwRXNSMEZCUnl4TFFVRkxNRVFzVVVGQlVTeFBRVUZQY0Vjc1JVRkJSU3hIUVVGSExFdEJRVXNzUzBGQlMzQktMRTlCUVU4c1MwRkJTekJKTEUxQlFVMHNUMEZCVHl4TlFVRk5WU3hGUVVGRlFTeEZRVUZGY1Vjc1MwRkJTME1zVlVGQlZYUkhMRWRCUVVjc1QwRkJUMEVzUjBGQlIzcElMR05CUVdONVNDeEZRVUZGTUVNc1IwRkJSeXhQUVVGUFFTeEhRVUZITEV0QlFVc3dSQ3hSUVVGUkxFOUJRVThzVDBGQlQzQkhMRVZCUVVVc1MwRkJTM1ZITEU5QlFVOHNUMEZCVHl4UFFVRlBka2NzUlVGQlJTeExRVUZMZFVjc1QwRkJUM1pITEVkQlFVY3NTMEZCUzNCS0xFOUJRVThzUzBGQlN6QkpMRTFCUVUwc1QwRkJUeXRITEV0QlFVdEhMRTFCUVUxNFJ5eEhRVUZITEU5QlFVOUJMRWxCUVVrNFVTeEhRVUZGTEVOQlFVTTVVU3hGUVVGRk1FTXNTVUZCU1VFc1NVRkJTVEZETEVsQlFVa3dReXhIUVVGSFFTeEhRVUZITVVNc1IwRkJSMEVzUjBGQlJ5dFJMRWRCUVVVc1EwRkJRMjVMTEZkQlFWVXNSVUZCUjJ4TkxFdEJRVXQ2UXl4UFFVRlBORThzVlVGQlZXZExMRWRCUVVVdlNpeFRRVUZSTEVWQlFVZERMRmRCUVZjclNpeEpRVUZITEUxQlFVMUZMRmRCUVZVdlNpeFpRVUZaTVU4c1kwRkJZM05ITEZGQlFWRnVSeXhMUVVGTGQwOHNZVUZCWVN4RlFVRkZlRThzUzBGQlMzbFBMSGxDUVVGdlFpeEZRVUZQZWs4c1MwRkJTekJQTEdWQlFXVXNTVUZCU1VNc1VVRkJVWEpJTEVkQlFVZDBTQ3hMUVVGTE5rOHNkMEpCUVhkQ2RrZ3NSMEZCUjNSSUxFdEJRVXM0VHl4dFFrRkJiVUlzU1VGQlNUZEVMRWxCUVVscVRDeExRVUZMSzA4c01rSkJRWE5DTEVWQlFVOHZUeXhMUVVGTFoxQXNZVUZCWVVNc1owTkJRV2REYWxBc1MwRkJTMnRRTEZkQlFWY3NUVUZCVFRWSUxFVkJRVVVzUjBGQlJ5eFBRVUZQZEVnc1MwRkJTMjFRTEdsQ1FVRnBRbkpNTEZGQlFWRXNRMEZCUTJ0SExFVkJRVVYyU0N4TFFVRkxMRTFCUVUxdVJTeEZRVUZGTUVJc1MwRkJTM05RTERCQ1FVRXdRamROTEVWQlFVVjFTQ3hSUVVGSExFbEJRVk14VEN4SlFVRkpNRUlzUzBGQlMzVlFMSGRDUVVGM1FuSkZMRWxCUVVrMVRTeEZRVUZGYlVVc1IwRkJSelpGTEVWQlFVVjJSaXhMUVVGTGVrUXNUVUZCVFdkS0xFVkJRVVY2U0N4blEwRkJaME1zU1VGQlNVY3NTMEZCUzNkUUxHVkJRV1ZzUXl3d1FrRkJNRUlzYlVKQlFXMUNkRTRzVDBGQlR5eERRVUZEUVN4TFFVRkxiVkFzYVVKQlFXbENMRWxCUVVsc1JTeEpRVUZKTEUxQlFVMHpSQ3hGUVVGRmNFb3NUMEZCVDNkU0xHVkJRV1V4VUN4TlFVRk5iVkFzYzBKQlFXbENMRWxCUVZNM1NDeEhRVUZIUVN4RlFVRkZlRVFzVVVGQlVTeERRVUZEZDBRc1JVRkJSVEJETEVsQlFVbG9TeXhMUVVGTGJWQXNhVUpCUVdsQ2FrVXNTVUZCU1d4Q0xFVkJRVVV4UXl4TFFVRkxla2dzYzBKQlFYTkNlVWdzUlVGQlJUQkRMRVZCUVVWeFR5eEpRVUZITEVkQlFVZHlXU3hMUVVGTE5GQXNlVUpCUVhsQ05WQXNTMEZCUzIxUUxHbENRVUZwUW1wRkxFbEJRVWsxUkN4RlFVRkZNRU1zUjBGQlIwRXNSVUZCUlRaR0xGbEJRVmszVUN4TFFVRkxPRkFzVlVGQlZVNHNaVUZCWld4SkxFZEJRVWNzVDBGQlR5eE5RVUZOTjBVc1JVRkJSU3hwUWtGQmFVSTJSU3hGUVVGRlVpeFRRVUZUTEV0QlFVdFJMRVZCUVVWb1NpeEZRVUZGTUVJc1MwRkJTMmRSTEhOQ1FVRnpRakZKTEVWQlFVVTNSU3hGUVVGRmRVZ3NVVUZCUnl4SlFVRlRNVXdzUjBGQlIwb3NUMEZCVDBzc1pVRkJaWGxDTEV0QlFVczRVQ3hWUVVGVmVFa3NSVUZCUldoS0xFZEJRVWQxUWl3MlFrRkJOa0o1U0N4RlFVRkZNRU1zUlVGQlJYWklMRWRCUVVjc1RVRkJUU3hEUVVGRE5VTXNUVUZCVFN4UFFVRlBSeXhMUVVGTFowc3NTVUZCU1c1TExFbEJRVWswUXl4SFFVRkhMRTFCUVUxdVJTeEZRVUZGTUVJc1MwRkJTM05JTEVkQlFVZDBTQ3hMUVVGTFowc3NSMEZCUjNaSUxFVkJRVVY2UXl4TFFVRkxiVkVzWlVGQlpUZEpMRVZCUVVWb1NpeEpRVUZKT0ZJc1kwRkJZU3hGUVVGSFF5eFpRVUZYTEVkQlFVbDRVU3d3UWtGQk1FSjVTQ3hIUVVGSExFOUJRVTkwU0N4TFFVRkxiVkFzYTBKQlFXdENibEFzUzBGQlMyMVFMR2xDUVVGcFFuSkZMRWxCUVVsNFJDeEpRVUZKSzFFc1IwRkJSWGhaTEd0Q1FVRnJRaXhOUVVGTmVVZ3NSVUZCUlhCS0xFOUJRVTkzVWl4bFFVRmxNVkFzVFVGQlRTeEhRVUZIYzBnc1JVRkJSV3RKTEdWQlFXVXNZMEZCWTJ4SkxFVkJRVVUwU0N4WFFVRlhiRkFzUzBGQlMzVlpMRmRCUVZVc1JVRkJSM1paTEV0QlFVczBVQ3g1UWtGQmVVSTFVQ3hMUVVGTGRWQXNkMEpCUVhkQ0xFbEJRVWwwUlN4SlFVRkpha3dzUzBGQlMzZFFMR1ZCUVdWc1F5d3dRa0ZCTUVJc1lVRkJZWFJPTEU5QlFVOHNRMEZCUXl4TlFVRk5jMGdzUlVGQlJYUklMRXRCUVV0M1VTeFhRVUZYZUVjc1JVRkJSU3hKUVVGSk9Vd3NUMEZCVDNkVExHOUNRVUZ2UW5CS0xFMUJRVTBzYlVKQlFXMUNjRW9zVDBGQlQzbFRMSE5DUVVGelFucFRMRTlCUVU5NVV5eHpRa0ZCYzBKeVNpeEhRVUZITEVsQlFVa3NTVUZCU1N4TlFVRk5OMFVzUzBGQlMzVklMRVZCUVVWb1N5eExRVUZMTkZFc1pVRkJaVzVQTEVWQlFVVTJSU3hGUVVGRk4wVXNTMEZCU3pWRExHbERRVUZwUTNsSUxFVkJRVVV3UXl4SFFVRkhMRTFCUVUxMlNDeEZRVUZGZFVnc1JVRkJSV3RGTEZWQlFWVXNUMEZCVFN4SlFVRkxla3dzVDBGQlJTeEZRVUZQTEdsQ1FVRnBRa0VzUlVGQlJVRXNSVUZCUlN4cFFrRkJhVUkyUlN4RlFVRkZRU3hGUVVGRk4wWXNiVUpCUVdNc1JVRkJUelZDTEhkQ1FVRjNRbmxJTEVWQlFVVXdReXhGUVVGRmRrZ3NSVUZCUlRKV0xFbEJRVWNzVDBGQlR6TldMRVZCUVVVMlJTeEZRVUZGTUVNc1IwRkJSMjVMTEcxRFFVRnRRM2xJTEVWQlFVVXdReXhIUVVGSExFMUJRVTEyU0N4RlFVRkZkVWdzUlVGQlJXaEpMRXRCUVVzeFJDeEZRVUZGTUV3c1JVRkJSVzFGTEZkQlFWZG5TeXhIUVVGRmJGb3NSVUZCUlN4dFFrRkJiVUpZTEVWQlFVVkJMRVZCUVVWQkxFVkJRVVYxVXl4alFVRmpMRTlCUVU4MVVpeEZRVUZGUVN4RlFVRkZjVWtzUlVGQlJUZEZMRWRCUVVjMlJTeEZRVUZGZWtnc2FVTkJRV2xEZVVnc1JVRkJSVEJETEVkQlFVY3NVVUZCUnl4SlFVRlRRU3hGUVVGRmIwVXNVVUZCVVN4UFFVRlBMRTFCUVUwelRDeEZRVUZGZFVnc1JVRkJSV2hKTEV0QlFVc3hSQ3hGUVVGRk1Fd3NSVUZCUlcxRkxGVkJRVlVzVDBGQlR6ZFFMRWRCUVVkQkxFVkJRVVYzVXl4aFFVRmhjVWdzUjBGQlJYSklMR0ZCUVdGNFNpeEZRVUZGTjBVc1IwRkJSelZETEdGQlFXRkhMRXRCUVVzclVTd3dRa0ZCTUVJdlVTeExRVUZMYlZFc2FVSkJRV2xDZEZFc01FSkJRVEJDUnl4TFFVRkxaMUlzV1VGQldUZENMR2xDUVVGcFFuSk1MRkZCUVZFc1EwRkJRM2RFTEVWQlFVVXdReXhMUVVGTExFZEJRVWRvU3l4TFFVRkxkMUFzWlVGQlpYaEdMRWRCUVVjc1EwRkJReXhOUVVGTk1VTXNSVUZCUlhSSUxFdEJRVXRuU3l4VlFVRlZhRXNzUzBGQlMyZExMRWRCUVVkb1N5eExRVUZMZVU4c2MwSkJRWE5DZWs4c1MwRkJTM2xQTEc5Q1FVRnZRaXhKUVVGSmVFUXNTMEZCUzJwTUxFdEJRVXQ1VHl4dlFrRkJiMEoyUkN4SlFVRkpiRUlzUlVGQlJURkRMRTFCUVUxNlNDd3lRa0ZCTWtKSExFdEJRVXQ1VHl4dlFrRkJiMEl6U3l4UlFVRlJMRU5CUVVOM1JDeEZRVUZGTUVNc1NVRkJTV2hMTEV0QlFVdG5TeXhIUVVGSE1VTXNSMEZCUjNSSUxFdEJRVXQ1VHl4NVFrRkJiMElzUlVGQlR6VlBMRzlDUVVGdlFrY3NTMEZCUzJ0U0xHbENRVUZwUW5KU0xITkNRVUZwUWl4SlFVRlRSeXhMUVVGTE5rOHNNRUpCUVRCQ04wOHNTMEZCU3paUExEQkNRVUV3UWpkUExFdEJRVXMyVHl3MlFrRkJkMElzUjBGQlVXaFFMSGRDUVVGM1FrRXNlVUpCUVhsQ2VVZ3NSVUZCUlRCRExFVkJRVVYyU0N4SFFVRkhkVWdzU1VGQlNYWklMRWRCUVVkNlF5eExRVUZMYlZJc2NVSkJRWEZDTjBvc1JVRkJSVGRGTEVkQlFVYzFReXh4UWtGQmNVSjVTQ3hGUVVGRk1FTXNSVUZCUlhaSUxFVkJRVVUwVml4SlFVRkhMRTFCUVUwdldpeEZRVUZGTUVJc1MwRkJTMmRTTEZsQlFWa3ZVaXhGUVVGRldDeEZRVUZGWjFJc01FSkJRVEJDYUVrc1JVRkJSVGRGTEVkQlFVY3NVVUZCUnl4SlFVRlRlRVFzUlVGQlJTeERRVUZETEUxQlFVMXhTU3hGUVVGRmFFb3NSVUZCUldkVUxEQkNRVUV3UW5SSUxFVkJRVVYyU0N4SFFVRkhMRkZCUVVjc1NVRkJVelpGTEVWQlFVVXNUMEZCVDNSSUxFdEJRVXQzVHl4aFFVRmhMRVZCUVVWNFR5eExRVUZMZDA4c1lVRkJZU3hOUVVGTmJFZ3NSVUZCUlhSSUxFdEJRVXMwUWl4blFrRkJaMEl6UXl4SFFVRkhaU3hMUVVGTGRVZ3NZVUZCWVhSSkxFVkJRVVZ4U1N4SFFVRkhkRWdzUzBGQlMzZFBMR05CUVdNc1JVRkJSWGhQTEV0QlFVdDNUeXhqUVVGak0wOHNjVUpCUVhGQ2VVZ3NSVUZCUlRCRExFZEJRVWNzUjBGQlJ5eEZRVUZGYUVzc1MwRkJTM2RQTEdGQlFXRXNUMEZCVHl4TlFVRk5MMHdzUlVGQlJYcERMRXRCUVV0blVpeFpRVUZaTVZNc1JVRkJSVzFGTEVWQlFVVTRUU3gzUWtGQmQwSjZSU3hKUVVGSmVFUXNSMEZCUnl4UlFVRkhMRWxCUVZOb1NpeEZRVUZGTEVOQlFVTXNUVUZCVFdkS0xFVkJRVVUzUlN4RlFVRkZLMDhzYlVKQlFXMUNiRlFzUjBGQlJ6QkNMRXRCUVV0M1R5eGhRVUZoTEVkQlFVZDRUeXhMUVVGTGQwOHNZVUZCWVhoUExFdEJRVXN4UWl4SFFVRkhiVVVzUlVGQlJXZFFMRFJDUVVFMFFucElMRVZCUVVVeFF5eEhRVUZIZEVnc1MwRkJTM2RQTEdOQlFXTXNSMEZCUjNoUExFdEJRVXQzVHl4alFVRmpNMDhzWlVGQlpYbElMRVZCUVVVd1F5eEhRVUZITEVsQlFVbDJTQ3hIUVVGRkxFVkJRVWNzVVVGQlJ5eEpRVUZUTmtVc1JVRkJSU3hEUVVGRExFMUJRVTFvU2l4RlFVRkZNRUlzUzBGQlMyZFNMRmxCUVZrdlVpeEZRVUZGV0N4RlFVRkZhMVFzYlVKQlFXMUNiRXNzUjBGQlIyaEtMRVZCUVVWeFZDeHBRa0ZCYVVJelVpeExRVUZMYzBnc1IwRkJSekJETEVWQlFVVXZTeXhGUVVGRmIxQXNZVUZCWVhKUExFdEJRVXM0VHl4dFFrRkJiVUpxVEN4SlFVRkplVVFzU1VGQlNYUklMRXRCUVVzNFR5eHRRa0ZCYlVJMVJDeEpRVUZKTlVRc1JVRkJSVEJETEVsQlFVY3NTVUZCU3k5TExFVkJRVVZ0VUN4VFFVRlRMRWRCUVVkd1R5eExRVUZMZDA4c2IwSkJRV1VzU1VGQlUzaFBMRXRCUVVzclR5eDNRa0ZCZDBJdlR5eExRVUZMSzA4c2MwSkJRWE5DTEVsQlFVazVSQ3hMUVVGTGFrd3NTMEZCU3l0UExITkNRVUZ6UWpkRUxFbEJRVWsxUkN4RlFVRkZja2tzUzBGQlMzZEVMRWRCUVVVc1IwRkJTWHBETEV0QlFVczBVaXh4UWtGQmNVSnVVQ3hKUVVGSmVrTXNTMEZCU3pCUExHVkJRV1V4VHl4TFFVRkxObElzYTBKQlFXdENhRk1zWTBGQlkzbElMRVZCUVVVd1F5eEhRVUZITEU5QlFVOW9TeXhMUVVGTGJWRXNaVUZCWlRkSkxFVkJRVVV3UXl4SFFVRkhhRXNzUzBGQlN6aFNMR1ZCUVdWcVV5eDFRa0ZCZFVKSExFdEJRVXQzVHl4aFFVRmhMRVZCUVVWNFR5eExRVUZMZDA4c1lVRkJZU3hWUVVGVmVFOHNTMEZCU3pCUExHVkJRV1VzVFVGQlRYQklMRWxCUVVrc1RVRkJUVUVzUlVGQlJYUklMRXRCUVVzclVpeG5Ra0ZCWjBJc1QwRkJUeXhOUVVGTmVrc3NVMEZCVTBFc1IwRkJSM1JJTEV0QlFVczBVaXh2UWtGQmIwSkJMREJDUVVFd1FpeFBRVUZQTEVWQlFVVTFVaXhMUVVGTGQwOHNZVUZCWVhkRUxHbENRVUZwUWl4UFFVRlBMRVZCUVVWb1V5eExRVUZMZDA4c1lVRkJZVE5QTEdkQ1FVRm5Ra2NzUzBGQlMzbFBMSEZDUVVGeFFucFBMRXRCUVV0cFV5d3lRa0ZCTWtJc1NVRkJTVE5MTEVkQlFVVXNSVUZCUnl4TlFVRk5NRU1zUlVGQlJXaExMRXRCUVVzNFR5eHRRa0ZCYlVJc1NVRkJTWGhJTEVWQlFVVjBTQ3hMUVVGTGExTXNZVUZCWVd4SkxFZEJRVWN4UXl4RlFVRkZkRWdzUzBGQlN6QkpMRTlCUVU5elFpeEhRVUZIYUVzc1MwRkJTMjlUTEdWQlFXVXNUVUZCVFhCSkxFZEJRVWNzVFVGQlRURkRMRWRCUVVVc1JVRkJSM1JJTEV0QlFVdHZVeXhsUVVGbGNFa3NSVUZCUlRGRExFbEJRVWtzUlVGQlJYUklMRXRCUVV0M1R5eGxRVUZsZUU4c1MwRkJTM2RQTEdGQlFXRXNSVUZCUlhoUExFdEJRVXQzVHl4aFFVRmhlRThzUzBGQlMzRlRMR0ZCUVdGeVNTeEpRVUZKYUVzc1MwRkJTM05UTEZGQlFWRjBTU3hKUVVGSmJrc3NaVUZCWlVjc1MwRkJTemhQTEcxQ1FVRnRRaXhKUVVGSk4wUXNTVUZCU1dwTUxFdEJRVXQzVHl4alFVRmpMRVZCUVVWNFR5eExRVUZMZDA4c1lVRkJZWE5FTEhGQ1FVRnhRaXhQUVVGUE9WSXNTMEZCUzNWVExIRkNRVUZ4UWpGVExIRkNRVUZ4UWl4UFFVRlBSeXhMUVVGTE1FOHNaVUZCWlRkUExHRkJRV0Y1U0N4SFFVRkhMRTlCUVUwc1JVRkJSM3BJTEU5QlFVOTVTQ3hSUVVGSExFbEJRVk4wU0N4TFFVRkxLMDhzZFVKQlFYVkNMMDhzUzBGQlN5dFBMSE5DUVVGelFubEVMRXRCUVVzc1NVRkJTWGhUTEV0QlFVc3JUeXh6UWtGQmMwSnFUQ3hSUVVGUkxFTkJRVU4zUkN4RlFVRkZNRU1zU1VGQlNXaExMRXRCUVV0NVV5eHhRa0ZCY1VKNlNTeEZRVUZGYUVzc1MwRkJTMmRMTEVkQlFVY3hReXhKUVVGSmRFZ3NTMEZCU3l0UExESkNRVUZ6UWl4SFFVRlJMMDhzUzBGQlMyOVRMR1ZCUVdWMlV5eFJRVUZSZVVnc1NVRkJTWHBJTEdGQlFXRjVTQ3hMUVVGTFoxSXNSMEZCUlVNc1YwRkJWU3hGUVVGSExFMUJRVTFETEVkQlFVVXNRMEZCUTJ4U0xFVkJRVVV3UXl4SlFVRkpMRmRCUVZkQkxFVkJRVVV5U1N4TlFVRk5NMGtzUlVGQlJTdEdMR05CUVdNc1ZVRkJWUzlHTEVWQlFVVXJSaXhaUVVGWk4xSXNUMEZCVHpCVkxFOUJRVTh4VlN4UFFVRlBNRlVzVDBGQlR5eEhRVUZITlVrc1IwRkJSeXhEUVVGRGJrc3NVMEZCVXpSRExFZEJRVWRCTEVWQlFVVnRUeXhsUVVGbE5VY3NSVUZCUlhKTkxFbEJRVWt5U2l4TlFVRk5MRU5CUVVOeFRDeExRVUZMTEZGQlFWRm9WaXhKUVVGSmJVb3NVMEZCVTJkTkxGVkJRVlVzVFVGQlRTOURMRmRCUVZjc1IwRkJSMnhSTEdOQlFXTXNiVUpCUVcxQ2JVc3NSVUZCUlN0SkxHTkJRV012VXl4TFFVRkxaMHNzUlVGQlJYSk5MRXRCUVV0eFRTeEZRVUZGSzBrc1dVRkJXWEJKTEV0QlFVc3pTeXhSUVVGUlNDeFRRVUZUTkVNc1IwRkJSMEVzUlVGQlJXMVBMR1ZCUVdVMVJ5eEZRVUZGY2swc1NVRkJTVEpLTEV0QlFVc3NVMEZCVTIxU0xFZEJRVVZ1VWl4SFFVRkhMRTFCUVUwc1EwRkJRekJETEVWQlFVVjJTQ3hUUVVGSkxFbEJRVk5CTEVWQlFVVXNSVUZCUlRaRkxFVkJRVVV3UXl4RlFVRkZka2dzUzBGQlMzVklMRVZCUVVWblNDeFpRVUZaU2l4bFFVRmxiazhzUlVGQlJUWkZMRWxCUVRGRExFTkJRU3REUVN4RlFVRkZNRU1zUlVGQlJYWklMRWRCUVVjclZpeEhRVUZGYkZJc1JVRkJSVEJETEVkQlFVY3NUVUZCVFRCUExFZEJRVVVzZFVKQlFYVkNja1lzVTBGQlUzWkVMRmRCUVZjc1dVRkJXWGRFTEdOQlFXTjRSQ3hYUVVGWGNsSXNUMEZCVDJ0aExIRkNRVUZ4UW14aExFOUJRVTlyWVN4dFFrRkJiVUlzUzBGQlN6VlhMRXRCUVVzc1UwRkJVeXhOUVVGTk5sY3NSMEZCUlN4SFFVRkhMRTFCUVUxRExGZEJRVlZRTEVkQlFVVjZXU3h0UWtGQmJVSXNUMEZCVDBjc1MwRkJTM1ZOTEU5QlFVOHhUU3d3UWtGQk1FSXNSMEZCUjBjc1MwRkJTM2RRTEdWQlFXVnNReXd3UWtGQk1FSXNWVUZCVlhST0xFOUJRVThzVDBGQlR5eE5RVUZOYzBnc1JVRkJSWFJJTEV0QlFVdHpWU3haUVVGWkxGRkJRVWNzU1VGQlUyaE9MRVZCUVVWMFNDeExRVUZMZFZVc1VVRkJVU3hSUVVGUkxFZEJRVWN6VGl4TlFVRk5ReXhSUVVGUlV5eEhRVUZITEVOQlFVTXNUVUZCVFRCRExFVkJRVVVzUTBGQlF6RkRMRVZCUVVVM1JTeEpRVUZKTmtVc1JVRkJSVzFPTEZsQlFWa3NRMEZCUTI1T0xFVkJRVVUzUlN4SlFVRkpiVVVzVFVGQlRVTXNVVUZCVVhCRkxFZEJRVWQxU0N4RlFVRkZka2dzUlVGQlJUWkZMRWxCUVVsQkxFVkJRVVVyUlN4SlFVRkpOVW9zUjBGQlJ6WkZMRWRCUVVjM1JTeEhRVUZIUVN4RlFVRkZkVWdzUlVGQlJURkRMRVZCUVVVc1NVRkJTVFJGTEV0QlFVczFUaXhGUVVGRkxFZEJRVWR0UlN4RlFVRkZjVUlzVVVGQlVYZEVMRWRCUVVkb1NpeEZRVUZGYjFjc1VVRkJVWEJPTEVsQlFVbDBTQ3hMUVVGTGRWVXNVVUZCVVdwWExFOUJRVTh3UWl4TFFVRkxkVlVzVVVGQlVTeERRVUZEYWs0c1IwRkJSM3BJTEdGQlFXRnpSeXhOUVVGTk5ra3NZVUZCWVdoUUxFdEJRVXRuVWl4WlFVRlpNa1FzYlVKQlFXMUNNMVVzUzBGQlN6UlZMRmRCUVZjMVZTeExRVUZMTmxVc2JVSkJRVzFDY0Zjc1QwRkJUM0ZYTEZsQlFWazVWU3hMUVVGTE5GVXNjMEpCUVhOQ2JsY3NUMEZCVDNGWExGbEJRVms1VlN4TFFVRkxLMVVzWTBGQlkyeFdMRzFDUVVGdFFpeFBRVUZQUnl4TFFVRkxaMVlzWVVGQllTeERRVUZEUXl4TFFVRkxMRk5CUVZOd1ZpeGpRVUZqTEUxQlFVMTVTQ3hGUVVGRmRFZ3NTMEZCUzJkU0xGbEJRVmwxUkN4UlFVRlJMRWxCUVVscVRpeEZRVUZGZEVvc1kwRkJVeXhKUVVGVFV5eFBRVUZQYVU0c1ZVRkJWV3BPTEU5QlFVOXBUaXhUUVVGVE1FSXNZVUZCWVhOTUxFZEJRVVV4V1N4TFFVRkxORlVzVjBGQlYwMHNiVUpCUVcxQ05VNHNSVUZCUlRaT0xFbEJRVWszVGl4SFFVRkhRU3hGUVVGRmNVMHNXVUZCV1ROVUxFdEJRVXR2Vml3NFFrRkJOa0lzUlVGQlJ6TlhMRTlCUVU5cFRpeFRRVUZUTWtvc1dVRkJXVU1zYzBKQlFYTkNhRThzUlVGQlJUWk9MRWxCUVVrM1RpeEhRVUZIUVN4RlFVRkZiVTBzVTBGQlUzcFVMRXRCUVV0MVZpeFpRVUZaTVZZc2IwSkJRVzlDYzBjc1RVRkJUWEZRTEc5Q1FVRnZRbmhXTEV0QlFVdG5VeXhwUWtGQldTeEpRVUZUZGxRc1QwRkJUMmxPTEZWQlFWVnFUaXhQUVVGUGFVNHNVMEZCVXl0S0xHRkJRV0Y2Vml4TlFVRk5TQ3hQUVVGUGVVZ3NSMEZCUnl4TlFVRk5NRU1zUlVGQlJXaExMRXRCUVVzeVZpeFRRVUZUZUZBc1RVRkJUWFZETEU5QlFVOXdRaXhIUVVGSE1FTXNTVUZCU1RSUExFbEJRVWMxV1N4TFFVRkxaMUlzV1VGQldUSkZMRTlCUVU4elRDeEZRVUZGYUVzc1MwRkJTelJWTEZkQlFWY3NRMEZCUTNCS0xGVkJRVlY0VEN4TFFVRkxkVllzVlVGQlZYcE1MR0ZCUVdFNVNpeFBRVUZQUVN4TFFVRkxiMVlzSzBKQlFTdENjRllzUzBGQlMyOVdMRGhDUVVFMlFpeEZRVUZIY0ZZc1MwRkJTMmRTTEZsQlFWbDFSQ3hSUVVGUmVsRXNVVUZCVVhkRUxFbEJRVWtzVFVGQlRUQkRMRVZCUVVVelNpeFRRVUZUTUVZc1kwRkJZeXhUUVVGVGFVVXNSVUZCUlRKRExGbEJRVmx5Uml4RlFVRkZiVTBzVVVGQlVYcFVMRXRCUVVzMFZTeFhRVUZYT1Uwc1dVRkJXV3RETEUxQlFVMXVTeXhUUVVGVExFOUJRVThyV1N4SlFVRkhReXhIUVVGRlRpeFhRVUZWTEVWQlFVZE5MRWRCUVVWc1JDeFBRVUZQTEVOQlFVTnlUeXhGUVVGRk1FTXNSVUZCUlRGTUxFdEJRVXNzU1VGQlNVRXNSMEZCUnl4cFFrRkJhVUpCTEVsQlFVbEJMRVZCUVVWclRpeFZRVUZWTEUxQlFVMXlReXhOUVVGTkxIVkRRVUYxUXl4TlFVRk5iRXNzUlVGQlJWZ3NSVUZCUld0T0xGVkJRVlYyVGl4RlFVRkZlVm9zUjBGQlJUZFVMRWxCUVVsdFJ5eEhRVUZITlVZc1JVRkJSVEpVTEVsQlFVY3NTMEZCU3k5T0xFVkJRVVZxU2l4WlFVRlphVW9zUlVGQlJTdE1MRXRCUVV0SUxFVkJRVVY0VWl4SlFVRkpPRlFzUjBGQlJYSlZMRWxCUVVrMVJTeEhRVUZIY0VJc1JVRkJSU3RZTEVWQlFVVjJWaXhUUVVGVE5sWXNlVUpCUVhsQ2JFMHNSVUZCUlN4SFFVRkhMRVZCUVVVeFF5eEZRVUZGTUVNc1JVRkJSVEZNTEV0QlFVc3NTVUZCU1Zjc1JVRkJSWGxaTEVkQlFVVTFUU3hKUVVGSlpDeFJRVUZITEVsQlFWTXZTeXhKUVVGSmQwUXNSMEZCUlhWSUxFVkJRVVZCTEVWQlFVVXhSQ3haUVVGWmIxSXNSMEZCUlhoTkxFbEJRVWxzUWl4RlFVRkZMMHNzUlVGQlJTeEpRVUZKYVZrc1IwRkJSV2hhTEU5QlFVOHdWU3hQUVVGUExFTkJRVU51U3l4blFrRkJaMEpyU0N4SlFVRkhjbElzUzBGQlMxY3NSVUZCUld0WUxGZEJRVmR1VFN4SlFVRkpMMHNzUlVGQlJUQkdMRk5CUVZNeVF5eEhRVUZIY2trc1JVRkJSVEpHTEZWQlFXcEtMRU5CUVRSS01FTXNSVUZCUlhwS0xFVkJRVVZMTEU5QlFVOHdWU3hQUVVGUExFTkJRVU51U3l4blFrRkJaMEoxVUN4SFFVRkZMMWtzU1VGQlNWZ3NTVUZCU1hOWUxFVkJRVVVzUTBGQlF5eE5RVUZOZEU4c1JVRkJSVzlSTEVkQlFVVTFUU3hKUVVGSmFrNHNSMEZCUnpaYUxFZEJRVVZ5UWl4UFFVRlBlRmtzUjBGQk1UUlNMRVZCUVVONVNpeEZRVUZGTUVNc1JVRkJSWFpJTEV0QlFVdDVWaXhIUVVGRk4wd3NTVUZCU1M5RkxFZEJRVWNzVFVGQlRXaEtMRVZCUVVWdFJTeEZRVUZGUVN4RlFVRkZNVU1zVVVGQlVVMHNVMEZCVXpCR0xHTkJRV01zV1VGQldUbEhMRVZCUVVVclN5eEZRVUZGZDBNc2FVSkJRV2xDTEZWQlFWVjRUeXhQUVVGUFF5eEhRVUZIWjBJc1JVRkJSU3hIUVVGSExFbEJRVWxvUWl4RlFVRkZMRmxCUVZsUkxFOUJRVTlwVGl4VFFVRlRVeXh6UWtGQmMwSTNUaXhGUVVGRlowb3NSMEZCUnl4TlFVRk5iRVFzUlVGQlJTOUVMRk5CUVZNd1JpeGpRVUZqTEZOQlFWTXNTVUZCU1N4SlFVRkpkVUlzUlVGQlJTeEZRVUZGUVN4RlFVRkZja29zUlVGQlJYRktMRWxCUVVrc1EwRkJReXhOUVVGTk1FTXNSVUZCUlM5TExFVkJRVVZ4U1N4SFFVRkhNRU1zUlVGQlJURklMRmRCUVZkdVJDeFpRVUZaTmtzc1IwRkJSelZHTEVWQlFVVjFTU3hoUVVGaE0wTXNSVUZCUlRKRExGbEJRVmtzUTBGQlEzSkdMRWxCUVVreVVTeEhRVUZGYmxVc1VVRkJVV3RITEVsQlFVa3NUVUZCVFhaSUxFVkJRVVZuVml4SFFVRkZNMDBzU1VGQlNXZE9MRWRCUVVVNVRpeEZRVUZGTVVNc1UwRkJTU3hKUVVGVE4wVXNSMEZCUjBFc1JVRkJSWFZKTEZWQlFWVnNTQ3hSUVVGUmQwUXNTVUZCU1N4TlFVRk5ka2dzVTBGQlUxRXNVVUZCVVhsS0xFbEJRVWt4UXl4RlFVRkZOMFVzUlVGQlJTeEpRVUZKZVVvc1NVRkJTWFJHTEUxQlFVMXBSeXhMUVVGTE4wTXNSVUZCUlhkRExHbENRVUZwUWl4VlFVRlZNVWtzVVVGQlVYZEVMRWxCUVVrM1JTeEZRVUZGTkVvc1NVRkJTUzlGTEV0QlFVdDRTaXhIUVVGRmQwb3NSVUZCUlRkRkxGRkJRWFpNTEVOQlFXZE5Oa1VzUjBGQlJ5eE5RVUZOYzA4c1JVRkJSWFJZTEVWQlFVVnBReXhSUVVGUmEwTXNSVUZCUlN4VFFVRlROa1VzUlVGQlJUQkRMRVZCUVVWMlNDeEZRVUZGTEUxQlFVMHNUVUZCVFRGRExGTkJRVk5STEZGQlFWRnFReXhIUVVGSE1rSXNUVUZCVFdoQ0xFZEJRVWR4U1N4RlFVRkZMRWRCUVVjc1RVRkJUVGRGTEVWQlFVVXNXVUZCV1c1RkxFVkJRVVYzU2l4WlFVRlphME1zUjBGQlJ5eE5RVUZOTDB3c1JVRkJSVzlETEZOQlFWTkRMR2xDUVVGcFFtaERMRVZCUVVVc1NVRkJTU3hOUVVGTExFZEJRVWtzU1VGQlNUaEdMRVZCUVVWclV5eEhRVUZGY2xnc1IwRkJSekpYTEVWQlFVVXNSVUZCUlM5WUxFZEJRVWNzUlVGQlJTeExRVUZMU1N4RlFVRkZOa01zV1VGQmFVSXNTVUZCU21wRUxFbEJRVkZKTEVWQlFVVnBSU3hqUVVGalR5eEpRVUZKYlZRc1JVRkJSWGhITEVkQlFVVndSaXhIUVVGSGRrZ3NSVUZCUlVnc1YwRkJWMUVzWVVGQllXdElMRVZCUVVWMlNDeExRVUZMTEVsQlFVa3lRaXhIUVVGSGJrWXNSVUZCUlcxR0xFZEJRVWN6UkN4UlFVRlJOVU1zUjBGQlJ5eERRVUZETEVkQlFVY3JXQ3hGUVVGRkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVsQlFVbDRVaXhIUVVGSGJrWXNSVUZCUlcxR0xFZEJRVWN6UkN4UFFVRlBiVllzUlVGQlJYaFNMRVZCUVVWclV5eEhRVUZGY2xnc1JVRkJSVzFHTEVkQlFVY3NUMEZCVDBFc1JVRkJSV3RUTEVkQlFVVnlXQ3hGUVVGRmJVWXNTVUZCYUZZc1EwRkJjMVl6UWl4RlFVRkZNa0lzUlVGQlJYZFNMRVZCUVVWMFVDeFpRVUZaYzFBc1JVRkJSVGxUTEdGQlFXRnpRaXhGUVVGRmQxSXNSVUZCUlhSUUxGbEJRVmszU0N4UFFVRlBhVTRzVTBGQlUxTXNjMEpCUVhOQ04wNHNSVUZCUldkS0xFZEJRVWNzVFVGQlRYcEtMRVZCUVVVcldDeEZRVUZGZWtrc1kwRkJZeXhUUVVGVExFZEJRVWN4VHl4UFFVRlBhVTRzVTBGQlV6QkNMR05CUVdNc1QwRkJUM1pRTEVWQlFVVnRUU3hGUVVGRmJFZ3NZVUZCWVdwR0xFVkJRVVZwU0N4WFFVRlZMRWRCUVVsclJpeEZRVUZGTVVRc2FVSkJRV2xDTEVkQlFVYzNSQ3hGUVVGRkxFTkJRVU50VkN4RlFVRkZPVk1zWVVGQllYTkNMRVZCUVVWM1VpeEZRVUZGZEZBc1dVRkJXU3hOUVVGTlowSXNSVUZCUlN4SlFVRkpORVVzU1VGQlNUVkZMRVZCUVVVclJTeEpRVUZKYWtrc1IwRkJSM1JITEVkQlFVVXlSU3hGUVVGRk5rVXNTMEZCYXpCUWQxSXNRMEZCUlRkYUxFVkJRVVZ3UWl4RlFVRnFSSGxLTEVWQlFVVmFMR2xDUVVGcFFtdFJMRWRCUVVWMFVDeEZRVUZGV2l4TlFVRk5ia1FzWTBGQlV5eEhRVUZuUW1Rc1IwRkJSWFZJTEVWQlFVVkJMRVZCUVVVeFJDeFpRVUZaTUVRc1JVRkJSV3hETEZsQlFWbHFTeXhIUVVGSE5sb3NSMEZCUlhoTkxFbEJRVWxzUWl4RlFVRkZNVU1zU1VGQlNYSktMRWRCUVVkdFJ5eEhRVUZITTBZc1QwRkJUMmxPTEZOQlFWTXJTaXhoUVVGaGVrd3NSVUZCUlN0TUxFOUJRVThzVFVGQlRXZEVMRWRCUVVVc1EwRkJRM3BTTEVWQlFVVXdReXhGUVVGRmRrZ3NSVUZCUlN4TlFVRk5Oa1VzUlVGQlJUQlNMR05CUVdNc1NVRkJTVU1zV1VGQldXcFFMRVZCUVVVc1EwRkJRMnRRTEU5QlFVOTZWeXhOUVVGTk1GY3NSMEZCUlN4RFFVRkROMUlzUlVGQlJUQkRMRXRCUVVzc1IwRkJSekZETEVWQlFVVjBSaXhMUVVGTGIxZ3NWMEZCVnl4VFFVRlRMRU5CUVVNc1VVRkJSeXhKUVVGVGNGQXNSVUZCUlN4UFFVRlBMRTFCUVUxMlNDeEZRVUZGTkZjc1IwRkJSeTlTTEVWQlFVVXdReXhIUVVGSExFMUJRVTBzUTBGQlEybE9MRVZCUVVWNFZTeEZRVUZGZDFVc1JVRkJSVXdzUlVGQlJXNVZMRVZCUVVWdFZTeEhRVUZITEUxQlFVMHNRMEZCUTBzc1JVRkJSVE5RTEVWQlFVVm5VeXhSUVVGUk1VTXNSVUZCUlhSUUxFVkJRVVZwVXl4VlFVRlZSaXhIUVVGSExFTkJRVU12VWl4RlFVRkZNRU1zUzBGQlN5eE5RVUZOZGtnc1JVRkJSVFpGTEVWQlFVVnJVeXhsUVVGbE5WTXNUVUZCVFd0S0xGVkJRVlV5U2l4TFFVRkxPVThzUzBGQlMzSkVMRVZCUVVWclV5eGpRVUZqYkZNc1IwRkJSekJETEVsQlFVa3hReXhGUVVGRmIxTXNZVUZCWVhCVExFVkJRVVZ4VXl4blFrRkJaMEl2VXl4TlFVRk5hMG9zVlVGQlZUSktMRXRCUVVzNVR5eExRVUZMY2tRc1JVRkJSWEZUTEdWQlFXVnlVeXhIUVVGSE1FTXNTVUZCU1RGRExFVkJRVVZ2VXl4WlFVRlpMRTFCUVUwc1EwRkJRM3BETEVWQlFVVjRWU3hGUVVGRk5sY3NVVUZCVVRGRExFVkJRVVZ1VlN4RlFVRkZPRmNzVlVGQlZTeEpRVUZKU3l4SFFVRkhMRWRCUVVjc1RVRkJUVU1zUjBGQlJ5eERRVUZEZGxNc1JVRkJSVEJETEV0QlFVczBVQ3hMUVVGTFFTeEhRVUZITEVOQlFVTXNWVUZCVlN4M1FrRkJkMElzY1VKQlFYRkNMRzlDUVVGdlFpeHZRa0ZCYjBKSUxFdEJRVXQ2VUN4SFFVRkhPRkFzUjBGQlIzaFRMRVZCUVVVd1F5eFRRVUZUTkZBc1MwRkJTMFVzUjBGQlIzaFRMRVZCUVVWelV5eFBRVUZQZEZNc1JVRkJSWE5UTEVsQlFVazFVQ3hKUVVGSk9GQXNSMEZCUjNoVExFZEJRVWNzYlVKQlFXMUNRU3hIUVVGSExITkNRVUZ6UW5CS0xFOUJRVTgwVWl4VlFVRlZhVXNzVTBGQlUzQlFMRXRCUVV0eVJDeEhRVUZITEVsQlFVa3dVeXhIUVVGSExHTkJRV051UWl4SFFVRkZhRm9zWTBGQlkzTkhMRk5CUVZOd1NTeFhRVUZYYVVNc1MwRkJTMmxoTEZWQlFWTXNSVUZCUjJwaExFdEJRVXRyWVN4WFFVRlZMRVZCUVVkeVlTeGxRVUZsUnl4TFFVRkxlVW9zYVVKQlFXbENMRmxCUVZsNlNpeExRVUZMYldFc1YwRkJWME1zUzBGQlMzQmhMRTFCUVUwc1EwRkJRM2RLTEZOQlFWRXNSVUZCUjJNc1UwRkJVU3hKUVVGTGRFc3NTMEZCUzNsS0xHbENRVUZwUWl4aFFVRmhla29zUzBGQlMyMWhMRmRCUVZkRExFdEJRVXR3WVN4TlFVRk5MRU5CUVVOM1NpeFRRVUZSTEVWQlFVZGpMRk5CUVZFc1NVRkJTMnBMTEZOQlFWTnZTaXhwUWtGQmFVSXNXVUZCV1hwS0xFdEJRVXR4WVN4TlFVRk5SQ3hMUVVGTGNHRXNUVUZCVFN4RFFVRkRkMG9zVTBGQlVTeEZRVUZIWXl4VFFVRlJMRWxCUVV0cVN5eFRRVUZUYjBvc2FVSkJRV2xDTEZsQlFWbDZTaXhMUVVGTGNXRXNUVUZCVFVRc1MwRkJTM0JoTEUxQlFVMHNRMEZCUTNkS0xGTkJRVkVzUlVGQlIyTXNVMEZCVVN4SlFVRkxha3NzVTBGQlUyOUtMR2xDUVVGcFFpeFZRVUZWZWtvc1MwRkJTM05oTEZOQlFWTkdMRXRCUVV0d1lTeE5RVUZOTEVOQlFVTjNTaXhUUVVGUkxFVkJRVWRqTEZOQlFWRXNTVUZCUzJwTExGTkJRVk52U2l4cFFrRkJhVUlzWTBGQlkzcEtMRXRCUVV0ellTeFRRVUZUUml4TFFVRkxjR0VzVFVGQlRTeERRVUZEZDBvc1UwRkJVU3hGUVVGSFl5eFRRVUZSTEVsQlFVdHFTeXhUUVVGVGIwb3NhVUpCUVdsQ0xGZEJRVmQ2U2l4TFFVRkxjMkVzVTBGQlUwWXNTMEZCUzNCaExFMUJRVTBzUTBGQlEzZEtMRk5CUVZFc1JVRkJSMk1zVTBGQlVTeEpRVUZMZWtzc1UwRkJVeXhQUVVGUFoxa3NSVUZCUXl4blFrRkJaMEpvV1N4WFFVRlhlVWdzUjBGQlJ5eEhRVUZIUVN4RlFVRkZkRVlzUzBGQlMyOVlMRmRCUVZjc1ZVRkJWU3hKUVVGSk9WSXNSVUZCUldsVUxGRkJRVkYyWVN4TFFVRkxhV0VzVTBGQlV5eFBRVUZQTEVkQlFVZHFZU3hMUVVGTGQyRXNVMEZCVXl4RlFVRkZiRlFzUlVGQlJUQkRMRVZCUVVWMlNDeExRVUZMTEVsQlFVbHVSU3hGUVVGRlowb3NSVUZCUlN4RlFVRkZMRU5CUVVNc1IwRkJSM05GTEZGQlFWRTJUeXhKUVVGSkxHRkJRV0Y2VVN4RlFVRkZMRk5CUVZNeFRDeEhRVUZIZFdJc1IwRkJSM1ppTEVWQlFVVXdUQ3hIUVVGSExFOUJRVTBzUlVGQlJ5eEhRVUZITVV3c1NVRkJTVzFGTEVWQlFVVXNUMEZCVFN4RlFVRkhia1VzUlVGQlJVRXNSVUZCUldkRkxHbENRVUZwUW1oRkxFZEJRVWNzVDBGQlRTeEhRVUZxU1N4RFFVRnpTV2RLTEVWQlFVVTFTaXhQUVVGUGMwTXNTMEZCUzNkaExFOUJRVTk0WVN4TFFVRkxNR0VzWTBGQll5eFBRVUZQTEVsQlFVa3hVU3hGUVVGRk1VTXNSVUZCUlhGVUxHbENRVUZwUW5KVUxFVkJRVVZ6VkN4clFrRkJhMElzWlVGQlpYUlVMRVZCUVVWMFJpeFBRVUZQYUVNc1MwRkJTelpoTEd0Q1FVRnJRamRSTEVWQlFVVXhReXhIUVVGSGExTXNaVUZCWlhoUUxFVkJRVVYzVUN4alFVRmpMRWRCUVVkNFVDeEZRVUZGZDFBc1kwRkJZeXhIUVVGSFJTeFhRVUZYTVZBc1JVRkJSVEpRTEdkQ1FVRm5Rak5RTEVWQlFVVXlVQ3hsUVVGbExFZEJRVWN6VUN4RlFVRkZNbEFzWlVGQlpTeEhRVUZIUkN4WFFVRlhMRWRCUVVjc1RVRkJUV3BZTEVWQlFVVXdWeXhIUVVGRk4xSXNSVUZCUlhSSUxFdEJRVXMyWVN4clFrRkJhMEp3V1N4SlFVRkpla01zUzBGQlN6aGhMRTlCUVU5eVdTeEZRVUZGZDFVc1JVRkJSV3BZTEV0QlFVc3JZU3hQUVVGUGRGa3NSVUZCUlcxVkxFVkJRVVUxVnl4TFFVRkxhMkVzVjBGQlZTeEZRVUZIYmtJc1IwRkJSUzlaTEV0QlFVc3NXVUZCV1N4RFFVRkRPR0VzVDBGQlR6bGhMRXRCUVVzNFlTeFBRVUZQUXl4UFFVRlBMMkVzUzBGQlN5dGhMRlZCUVZWc1lpeE5RVUZOZVVnc1IwRkJSeXhKUVVGSmRFZ3NTMEZCUzJ0aExGZEJRVmRzWVN4TFFVRkxhV0VzVTBGQlV5eFBRVUZQTTFNc1JVRkJSWEZVTEdsQ1FVRnBRbkpVTEVWQlFVVnpWQ3hyUWtGQmEwSXNUVUZCVFRWUkxFVkJRVVZ0VUN4SFFVRkZOMUlzUlVGQlJYUklMRXRCUVVzMllTeHJRa0ZCYTBJc1NVRkJTVGRSTEVWQlFVVXNUMEZCVHl4SlFVRkpka2dzUlVGQlJYVklMRVZCUVVWcFRpeEZRVUZGYWxnc1MwRkJTemhoTEU5QlFVOTRZeXhGUVVGRk1Fd3NSVUZCUlRSTkxFVkJRVVUxVnl4TFFVRkxLMkVzVDBGQlR5OWhMRXRCUVV0bllpeFBRVUZQZGxrc1JVRkJSWEJFTEV0QlFVczBZaXhOUVVGTmVGa3NSVUZCUlhwRExFdEJRVXRuWWl4TFFVRkxMRWxCUVVsb1lpeExRVUZMWjJJc1MwRkJTeXhIUVVGSE1XTXNSVUZCUldVc1MwRkJTelJpTEUxQlFVMHpZeXhGUVVGRk1FSXNTMEZCUzJkaUxFdEJRVXNzU1VGQlNXaGlMRXRCUVV0bllpeExRVUZMTEV0QlFVdDJXU3hIUVVGSGJrVXNTVUZCU1hsaExFZEJRVVV2V1N4TFFVRkxMRmRCUVZjc1EwRkJRMnRpTEU5QlFVOTZXU3hGUVVGRk1Ga3NUMEZCVHpkakxFbEJRVWwxUWl4VFFVRlRlVWdzUjBGQlIzUklMRXRCUVV0cllTeFpRVUZaYkdFc1MwRkJTMmxoTEZkQlFWY3pVeXhGUVVGRmNWUXNhVUpCUVdsQ2NsUXNSVUZCUlhOVUxHdENRVUZyUWpWaExFdEJRVXMyWVN4elFrRkJhVUlzUlVGQlR6ZGhMRXRCUVV0cllTeFhRVUZWTEVWQlFVZHVRaXhIUVVGRkwxa3NTMEZCU3l4alFVRnhRbk5JTEVkQlFVVXNRMEZCUTIxU0xFZEJRVVVzUTBGQlEzcFhMRXRCUVVzMFJTeFRRVUZUYjFRc1IwRkJSMnhMTEZWQlFWVXNXVUZCVHl4SFFVRlJlRWtzUjBGQlJTeERRVUZEYlZJc1IwRkJSU3hEUVVGRGVsY3NTMEZCU3pCTUxGRkJRVkZWTEZOQlFWRXNTMEZCVFRSTUxFZEJRVWRzU3l4VlFVRlZMR2RDUVVGWExFZEJRVkY0U1N4SFFVRkZMRU5CUVVOdFVpeE5RVUZMZFVJc1IwRkJSMnhMTEZWQlFWVXNZMEZCVXl4SFFVRlJhMHNzUjBGQlJ6RlRMRWRCUVVVc1JVRkJTeXhuUWtGQlowSkJMRWRCUVVjc2JVSkJRVzFDUVN4RlFVRkZMRVZCUVVWQkxFVkJRVVV3UXl4TFFVRkxka3dzVDBGQlQwTXNaVUZCWlRCakxFOUJRV2RDUXl4blFrRkJVSEpTTEVkQlFVZEJMRWRCUVRORExFTkJRU3REY1ZJc1JVRkJSeTlVTEVkQlFVY3NSVUZCUlVFc1JVRkJSVEJETEV0QlFVc3NUVUZCVFRKSkxFdEJRVXRzVVN4RlFVRkZObGtzVTBGQlUyaGtMRWRCUVVjd1RDeEZRVUZGTEUxQlFVMHNRMEZCUXpKSkxFdEJRVXRzVVN4RlFVRkZObGtzVTBGQlUyaGtMRVZCUVVWMVFpeFRRVUZUYlVzc1IwRkJSM1pNTEU5QlFVOURMR1ZCUVdVd1l5eFBRVUZuUWtNc1owSkJRVkJ5VWl4TlFVRjRSeXhEUVVFclIzRlNMRVZCUVVjdlZDeExRVUZMTUZNc1NVTkJNWEJ6UWl4TlFVRk5kVUlzUjBGQldTeERRVU4yUWpka0xFVkJRMEZuVGl4RlFVTkJkMDhzUlVGQk9FSXNUVUZGT1VKNFlpeEZRVUZQYzJJc1kwRkJZeXhKUVVGSlF5eFpRVUZaZGs4c1JVRkJUeXhEUVVGRmQwOHNUMEZCUVVFc1ZVTlpia056UXl4SFFVRmlMR05CUVd0RGNFZ3NSMEZCYkVOMlZTeHJRMEZIYzBOSExHVkJRVmNzUlVGTmNrTklMRk5CUTFJc1QwRkJUelJHTEVOQlFVazdPenRSUVVkUWVrWXNTMEZCUzJsaExGTkJRMGdzUjBGRFFYaFZMRU5CUVVrN096QkNRVVZaZWtZc1MwRkJTM2xpT3pKQ1FVTktlbUlzUzBGQlN6QmlPM2xDUVVOUU1XSXNTMEZCU3pKaU96dG5Ra0ZGWWpOaUxFdEJRVXQzWVN4UFFXTktMMVVzUTBGQlNTeEhRVUZIZWtZc1MwRkJTM2RoTEZOQllscHNVQ3hEUVVGSE96czdPenM3T3pzN096czdPenM3VFVGdFFsaDZUQ3hoUVVGaEsySXNSMEZEYmtKQkxFVkJRVWRxUWl4cFFrRkRTR2xDTEVWQlFVZG9RaXhyUWtGRlNEVmhMRXRCUVVzMllpeFhRVUZoTjJJc1MwRkJTemhpTEZsQlEzWkNPV0lzUzBGQlN5dGlMRmxCUVdNdllpeExRVUZMWjJNc1lVRkZlRUpVTEVkQlFWVjJZaXhMUVVGTkxHVkJSMVpJTEZGQlFWRXJZaXhIUVVsa0xFZEJTRUZCTEVWQlFVZHFRaXhwUWtGRFNHbENMRVZCUVVkb1FpeDFRa0ZGY1VKcVl5eEpRVUZ3UW5GQ0xFdEJRVXMyWWl4cFFrRkJhVVJzWkN4SlFVRnlRbkZDTEV0QlFVc3JZaXhaUVVONFF5eFBRVWRHTEUxQlFVMWlMRTlCUVVWQkxFVkJRVTFETEU5QlFVVkJMRWRCUVZkVExFVkJRVWN4UXl4UFFVVTVRaXhIUVVGbExFbEJRVmhwUXl4SFFVRXlRaXhKUVVGWVJDeEZRVU5zUWl4UFFVZEdMRTFCUVUxbExFVkJRVkZxWXl4TFFVRkxObUlzVjBGQllWZ3NSVUZETVVKblFpeEZRVUZUYkdNc1MwRkJTeXRpTEZsQlFXTmFMRVZCUld4RFNTeEhRVUZWZG1Jc1MwRkJUU3hUUVVGVkxFTkJRM2hDYVdNc1RVRkJRVUVzUlVGRFFVTXNUMEZCUVVFc1JVRkRRV2hDTEU5QlFVRkJMRVZCUTBGRExFOUJRVUZCTEVsQlNVbDBZaXhYUVVGWEsySXNSMEZEYWtKQkxFVkJRVWRxUWl4cFFrRkRTR2xDTEVWQlFVZG9RaXhyUWtGRlNEVmhMRXRCUVVzMllpeG5Ra0ZCWVd4a0xFVkJRMnhDY1VJc1MwRkJTeXRpTEdsQ1FVRmpjR1FzUlVGRmJrSTBZeXhIUVVGVmRtSXNTMEZCVFN4aFFVZHNRblZOTEc5Q1FVTkZMRTlCUVU5MVNDeEZRVUZIT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3VVV4NFJHVXNTVUZCUXpkU0xFZExPVUpKZWtVc1IwRkJMMEozVml4RlFVRlRMRU5CUVVVNVJTeFhRVUZYTEcxRFFVVk5NVkVzUjBGQk5VSjNWaXhGUVVGVExFTkJRVVZvVWl4TFFVRk5NRXdzTWtOQlNGQTRUaXhQVEN0Q2FVSjJXaXhIUzJoRFppeG5Ra3huUXpSQ2EyRXNSMEZCYjBRc2JVSkJRWFJDUVN4RlFXNUROME1zUlVGQlEyeGhMRVZCUVZNMFVTeExRVU5zUTNCVkxFOUJRVTlETEdWQlFXVXdZeXhQUVVGUGJsb3NSVUZCVXpSUkxFZEJUeTlDUVN4SFFUUkNVSFZLTEVOQlFXOUNibUVzUjBGQlUydGhMRWRCTVVKSUxFVkJRVU5zWVN4RlFVRlRPRTRzUzBGRGNFTXNUVUZCVFRSRExFdEJRVVZCTEVWQlFVa3lTU3hUUVVGRlFTeEhRVUZoZGt3c1JVRkRNMElzVFVGQlR5eERRVU5JTkVNc1MwRkJRVUVzUlVGRFFUSkpMRk5CUVVGQkxFVkJSVUY2WWl4VFFVRlRaMVFzUjBGRFRIQlZMRTlCUVU5RExHVkJRV1V3WXl4UFFVRlBibG9zUlVGQlV6UlJMRTFCYjBJNVEzZEtMRU5CUVhOQ2NHRXNSMEZCVTJ0aExFdExha04wUWxnaWZRPT1cbiIsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLCIvKipcclxuICogQSBjb2xsZWN0aW9uIG9mIHNoaW1zIHRoYXQgcHJvdmlkZSBtaW5pbWFsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEVTNiBjb2xsZWN0aW9ucy5cclxuICpcclxuICogVGhlc2UgaW1wbGVtZW50YXRpb25zIGFyZSBub3QgbWVhbnQgdG8gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBSZXNpemVPYnNlcnZlclxyXG4gKiBtb2R1bGVzIGFzIHRoZXkgY292ZXIgb25seSBhIGxpbWl0ZWQgcmFuZ2Ugb2YgdXNlIGNhc2VzLlxyXG4gKi9cclxuLyogZXNsaW50LWRpc2FibGUgcmVxdWlyZS1qc2RvYywgdmFsaWQtanNkb2MgKi9cclxudmFyIE1hcFNoaW0gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hcDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBpbmRleCBpbiBwcm92aWRlZCBhcnJheSB0aGF0IG1hdGNoZXMgdGhlIHNwZWNpZmllZCBrZXkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtBcnJheTxBcnJheT59IGFyclxyXG4gICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldEluZGV4KGFyciwga2V5KSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IC0xO1xyXG4gICAgICAgIGFyci5zb21lKGZ1bmN0aW9uIChlbnRyeSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKGVudHJ5WzBdID09PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzXzEoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsYXNzXzEucHJvdG90eXBlLCBcInNpemVcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZW50cmllc19fLmxlbmd0aDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGdldEluZGV4KHRoaXMuX19lbnRyaWVzX18sIGtleSk7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IHRoaXMuX19lbnRyaWVzX19baW5kZXhdO1xyXG4gICAgICAgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMV07XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xyXG4gICAgICAgICAgICBpZiAofmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9fZW50cmllc19fW2luZGV4XVsxXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXy5wdXNoKFtrZXksIHZhbHVlXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgZW50cmllcyA9IHRoaXMuX19lbnRyaWVzX187XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGdldEluZGV4KGVudHJpZXMsIGtleSk7XHJcbiAgICAgICAgICAgIGlmICh+aW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIX5nZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18uc3BsaWNlKDApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgICAgICAgKiBAcGFyYW0geyp9IFtjdHg9bnVsbF1cclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjdHgpIHtcclxuICAgICAgICAgICAgaWYgKGN0eCA9PT0gdm9pZCAwKSB7IGN0eCA9IG51bGw7IH1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX19lbnRyaWVzX187IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGN0eCwgZW50cnlbMV0sIGVudHJ5WzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGNsYXNzXzE7XHJcbiAgICB9KCkpO1xyXG59KSgpO1xuXG4vKipcclxuICogRGV0ZWN0cyB3aGV0aGVyIHdpbmRvdyBhbmQgZG9jdW1lbnQgb2JqZWN0cyBhcmUgYXZhaWxhYmxlIGluIGN1cnJlbnQgZW52aXJvbm1lbnQuXHJcbiAqL1xyXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgPT09IGRvY3VtZW50O1xuXG4vLyBSZXR1cm5zIGdsb2JhbCBvYmplY3Qgb2YgYSBjdXJyZW50IGVudmlyb25tZW50LlxyXG52YXIgZ2xvYmFsJDEgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5NYXRoID09PSBNYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09PSBNYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT09IE1hdGgpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93O1xyXG4gICAgfVxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXHJcbiAgICByZXR1cm4gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcclxufSkoKTtcblxuLyoqXHJcbiAqIEEgc2hpbSBmb3IgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB3aGljaCBmYWxscyBiYWNrIHRvIHRoZSBzZXRUaW1lb3V0IGlmXHJcbiAqIGZpcnN0IG9uZSBpcyBub3Qgc3VwcG9ydGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXF1ZXN0cycgaWRlbnRpZmllci5cclxuICovXHJcbnZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUkMSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIC8vIEl0J3MgcmVxdWlyZWQgdG8gdXNlIGEgYm91bmRlZCBmdW5jdGlvbiBiZWNhdXNlIElFIHNvbWV0aW1lcyB0aHJvd3NcclxuICAgICAgICAvLyBhbiBcIkludmFsaWQgY2FsbGluZyBvYmplY3RcIiBlcnJvciBpZiByQUYgaXMgaW52b2tlZCB3aXRob3V0IHRoZSBnbG9iYWxcclxuICAgICAgICAvLyBvYmplY3Qgb24gdGhlIGxlZnQgaGFuZCBzaWRlLlxyXG4gICAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZChnbG9iYWwkMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbGxiYWNrKERhdGUubm93KCkpOyB9LCAxMDAwIC8gNjApOyB9O1xyXG59KSgpO1xuXG4vLyBEZWZpbmVzIG1pbmltdW0gdGltZW91dCBiZWZvcmUgYWRkaW5nIGEgdHJhaWxpbmcgY2FsbC5cclxudmFyIHRyYWlsaW5nVGltZW91dCA9IDI7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiB3aGljaCBlbnN1cmVzIHRoYXQgcHJvdmlkZWQgY2FsbGJhY2sgd2lsbCBiZVxyXG4gKiBpbnZva2VkIG9ubHkgb25jZSBkdXJpbmcgdGhlIHNwZWNpZmllZCBkZWxheSBwZXJpb2QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gYmUgaW52b2tlZCBhZnRlciB0aGUgZGVsYXkgcGVyaW9kLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgLSBEZWxheSBhZnRlciB3aGljaCB0byBpbnZva2UgY2FsbGJhY2suXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cclxuICovXHJcbmZ1bmN0aW9uIHRocm90dGxlIChjYWxsYmFjaywgZGVsYXkpIHtcclxuICAgIHZhciBsZWFkaW5nQ2FsbCA9IGZhbHNlLCB0cmFpbGluZ0NhbGwgPSBmYWxzZSwgbGFzdENhbGxUaW1lID0gMDtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlcyB0aGUgb3JpZ2luYWwgY2FsbGJhY2sgZnVuY3Rpb24gYW5kIHNjaGVkdWxlcyBuZXcgaW52b2NhdGlvbiBpZlxyXG4gICAgICogdGhlIFwicHJveHlcIiB3YXMgY2FsbGVkIGR1cmluZyBjdXJyZW50IHJlcXVlc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJlc29sdmVQZW5kaW5nKCkge1xyXG4gICAgICAgIGlmIChsZWFkaW5nQ2FsbCkge1xyXG4gICAgICAgICAgICBsZWFkaW5nQ2FsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHJhaWxpbmdDYWxsKSB7XHJcbiAgICAgICAgICAgIHByb3h5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBpbnZva2VkIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXkuIEl0IHdpbGwgZnVydGhlciBwb3N0cG9uZVxyXG4gICAgICogaW52b2NhdGlvbiBvZiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gZGVsZWdhdGluZyBpdCB0byB0aGVcclxuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdGltZW91dENhbGxiYWNrKCkge1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSQxKHJlc29sdmVQZW5kaW5nKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2NoZWR1bGVzIGludm9jYXRpb24gb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBwcm94eSgpIHtcclxuICAgICAgICB2YXIgdGltZVN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBpZiAobGVhZGluZ0NhbGwpIHtcclxuICAgICAgICAgICAgLy8gUmVqZWN0IGltbWVkaWF0ZWx5IGZvbGxvd2luZyBjYWxscy5cclxuICAgICAgICAgICAgaWYgKHRpbWVTdGFtcCAtIGxhc3RDYWxsVGltZSA8IHRyYWlsaW5nVGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIG5ldyBjYWxsIHRvIGJlIGluIGludm9rZWQgd2hlbiB0aGUgcGVuZGluZyBvbmUgaXMgcmVzb2x2ZWQuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IGZvciBcInRyYW5zaXRpb25zXCIgd2hpY2ggbmV2ZXIgYWN0dWFsbHkgc3RhcnRcclxuICAgICAgICAgICAgLy8gaW1tZWRpYXRlbHkgc28gdGhlcmUgaXMgYSBjaGFuY2UgdGhhdCB3ZSBtaWdodCBtaXNzIG9uZSBpZiBjaGFuZ2VcclxuICAgICAgICAgICAgLy8gaGFwcGVucyBhbWlkcyB0aGUgcGVuZGluZyBpbnZvY2F0aW9uLlxyXG4gICAgICAgICAgICB0cmFpbGluZ0NhbGwgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGVhZGluZ0NhbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICB0cmFpbGluZ0NhbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCh0aW1lb3V0Q2FsbGJhY2ssIGRlbGF5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZVN0YW1wO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3h5O1xyXG59XG5cbi8vIE1pbmltdW0gZGVsYXkgYmVmb3JlIGludm9raW5nIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLlxyXG52YXIgUkVGUkVTSF9ERUxBWSA9IDIwO1xyXG4vLyBBIGxpc3Qgb2Ygc3Vic3RyaW5ncyBvZiBDU1MgcHJvcGVydGllcyB1c2VkIHRvIGZpbmQgdHJhbnNpdGlvbiBldmVudHMgdGhhdFxyXG4vLyBtaWdodCBhZmZlY3QgZGltZW5zaW9ucyBvZiBvYnNlcnZlZCBlbGVtZW50cy5cclxudmFyIHRyYW5zaXRpb25LZXlzID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3NpemUnLCAnd2VpZ2h0J107XHJcbi8vIENoZWNrIGlmIE11dGF0aW9uT2JzZXJ2ZXIgaXMgYXZhaWxhYmxlLlxyXG52YXIgbXV0YXRpb25PYnNlcnZlclN1cHBvcnRlZCA9IHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJztcclxuLyoqXHJcbiAqIFNpbmdsZXRvbiBjb250cm9sbGVyIGNsYXNzIHdoaWNoIGhhbmRsZXMgdXBkYXRlcyBvZiBSZXNpemVPYnNlcnZlciBpbnN0YW5jZXMuXHJcbiAqL1xyXG52YXIgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5kaWNhdGVzIHdoZXRoZXIgRE9NIGxpc3RlbmVycyBoYXZlIGJlZW4gYWRkZWQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUZWxscyB0aGF0IGNvbnRyb2xsZXIgaGFzIHN1YnNjcmliZWQgZm9yIE11dGF0aW9uIEV2ZW50cy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBLZWVwcyByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlIG9mIE11dGF0aW9uT2JzZXJ2ZXIuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7TXV0YXRpb25PYnNlcnZlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBsaXN0IG9mIGNvbm5lY3RlZCBvYnNlcnZlcnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7QXJyYXk8UmVzaXplT2JzZXJ2ZXJTUEk+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzXyA9IFtdO1xyXG4gICAgICAgIHRoaXMub25UcmFuc2l0aW9uRW5kXyA9IHRoaXMub25UcmFuc2l0aW9uRW5kXy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmVmcmVzaCA9IHRocm90dGxlKHRoaXMucmVmcmVzaC5iaW5kKHRoaXMpLCBSRUZSRVNIX0RFTEFZKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBvYnNlcnZlciB0byBvYnNlcnZlcnMgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyU1BJfSBvYnNlcnZlciAtIE9ic2VydmVyIHRvIGJlIGFkZGVkLlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUuYWRkT2JzZXJ2ZXIgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICBpZiAoIX50aGlzLm9ic2VydmVyc18uaW5kZXhPZihvYnNlcnZlcikpIHtcclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnNfLnB1c2gob2JzZXJ2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgbGlzdGVuZXJzIGlmIHRoZXkgaGF2ZW4ndCBiZWVuIGFkZGVkIHlldC5cclxuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBvYnNlcnZlciBmcm9tIG9ic2VydmVycyBsaXN0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJTUEl9IG9ic2VydmVyIC0gT2JzZXJ2ZXIgdG8gYmUgcmVtb3ZlZC5cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXztcclxuICAgICAgICB2YXIgaW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcik7XHJcbiAgICAgICAgLy8gUmVtb3ZlIG9ic2VydmVyIGlmIGl0J3MgcHJlc2VudCBpbiByZWdpc3RyeS5cclxuICAgICAgICBpZiAofmluZGV4KSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZW1vdmUgbGlzdGVuZXJzIGlmIGNvbnRyb2xsZXIgaGFzIG5vIGNvbm5lY3RlZCBvYnNlcnZlcnMuXHJcbiAgICAgICAgaWYgKCFvYnNlcnZlcnMubGVuZ3RoICYmIHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlcyB0aGUgdXBkYXRlIG9mIG9ic2VydmVycy4gSXQgd2lsbCBjb250aW51ZSBydW5uaW5nIHVwZGF0ZXMgaW5zb2ZhclxyXG4gICAgICogaXQgZGV0ZWN0cyBjaGFuZ2VzLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNoYW5nZXNEZXRlY3RlZCA9IHRoaXMudXBkYXRlT2JzZXJ2ZXJzXygpO1xyXG4gICAgICAgIC8vIENvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpZiBjaGFuZ2VzIGhhdmUgYmVlbiBkZXRlY3RlZCBhcyB0aGVyZSBtaWdodFxyXG4gICAgICAgIC8vIGJlIGZ1dHVyZSBvbmVzIGNhdXNlZCBieSBDU1MgdHJhbnNpdGlvbnMuXHJcbiAgICAgICAgaWYgKGNoYW5nZXNEZXRlY3RlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIGV2ZXJ5IG9ic2VydmVyIGZyb20gb2JzZXJ2ZXJzIGxpc3QgYW5kIG5vdGlmaWVzIHRoZW0gb2YgcXVldWVkXHJcbiAgICAgKiBlbnRyaWVzLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBcInRydWVcIiBpZiBhbnkgb2JzZXJ2ZXIgaGFzIGRldGVjdGVkIGNoYW5nZXMgaW5cclxuICAgICAqICAgICAgZGltZW5zaW9ucyBvZiBpdCdzIGVsZW1lbnRzLlxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZU9ic2VydmVyc18gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQ29sbGVjdCBvYnNlcnZlcnMgdGhhdCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgdmFyIGFjdGl2ZU9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXy5maWx0ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5nYXRoZXJBY3RpdmUoKSwgb2JzZXJ2ZXIuaGFzQWN0aXZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gRGVsaXZlciBub3RpZmljYXRpb25zIGluIGEgc2VwYXJhdGUgY3ljbGUgaW4gb3JkZXIgdG8gYXZvaWQgYW55XHJcbiAgICAgICAgLy8gY29sbGlzaW9ucyBiZXR3ZWVuIG9ic2VydmVycywgZS5nLiB3aGVuIG11bHRpcGxlIGluc3RhbmNlcyBvZlxyXG4gICAgICAgIC8vIFJlc2l6ZU9ic2VydmVyIGFyZSB0cmFja2luZyB0aGUgc2FtZSBlbGVtZW50IGFuZCB0aGUgY2FsbGJhY2sgb2Ygb25lXHJcbiAgICAgICAgLy8gb2YgdGhlbSBjaGFuZ2VzIGNvbnRlbnQgZGltZW5zaW9ucyBvZiB0aGUgb2JzZXJ2ZWQgdGFyZ2V0LiBTb21ldGltZXNcclxuICAgICAgICAvLyB0aGlzIG1heSByZXN1bHQgaW4gbm90aWZpY2F0aW9ucyBiZWluZyBibG9ja2VkIGZvciB0aGUgcmVzdCBvZiBvYnNlcnZlcnMuXHJcbiAgICAgICAgYWN0aXZlT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBvYnNlcnZlci5icm9hZGNhc3RBY3RpdmUoKTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIGFjdGl2ZU9ic2VydmVycy5sZW5ndGggPiAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgRE9NIGxpc3RlbmVycy5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUuY29ubmVjdF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBydW5uaW5nIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQgb3IgaWYgbGlzdGVuZXJzXHJcbiAgICAgICAgLy8gaGF2ZSBiZWVuIGFscmVhZHkgYWRkZWQuXHJcbiAgICAgICAgaWYgKCFpc0Jyb3dzZXIgfHwgdGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU3Vic2NyaXB0aW9uIHRvIHRoZSBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBpcyB1c2VkIGFzIGEgd29ya2Fyb3VuZCBmb3JcclxuICAgICAgICAvLyBkZWxheWVkIHRyYW5zaXRpb25zLiBUaGlzIHdheSBpdCdzIHBvc3NpYmxlIHRvIGNhcHR1cmUgYXQgbGVhc3QgdGhlXHJcbiAgICAgICAgLy8gZmluYWwgc3RhdGUgb2YgYW4gZWxlbWVudC5cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZWZyZXNoKTtcclxuICAgICAgICBpZiAobXV0YXRpb25PYnNlcnZlclN1cHBvcnRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfLm9ic2VydmUoZG9jdW1lbnQsIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbm5lY3RlZF8gPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBET00gbGlzdGVuZXJzLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5kaXNjb25uZWN0XyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIHJ1bm5pbmcgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudCBvciBpZiBsaXN0ZW5lcnNcclxuICAgICAgICAvLyBoYXZlIGJlZW4gYWxyZWFkeSByZW1vdmVkLlxyXG4gICAgICAgIGlmICghaXNCcm93c2VyIHx8ICF0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZWZyZXNoKTtcclxuICAgICAgICBpZiAodGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8pIHtcclxuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8uZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXykge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB0aGlzLnJlZnJlc2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGVkXyA9IGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogXCJUcmFuc2l0aW9uZW5kXCIgZXZlbnQgaGFuZGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHtUcmFuc2l0aW9uRXZlbnR9IGV2ZW50XHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5vblRyYW5zaXRpb25FbmRfID0gZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2EucHJvcGVydHlOYW1lLCBwcm9wZXJ0eU5hbWUgPSBfYiA9PT0gdm9pZCAwID8gJycgOiBfYjtcclxuICAgICAgICAvLyBEZXRlY3Qgd2hldGhlciB0cmFuc2l0aW9uIG1heSBhZmZlY3QgZGltZW5zaW9ucyBvZiBhbiBlbGVtZW50LlxyXG4gICAgICAgIHZhciBpc1JlZmxvd1Byb3BlcnR5ID0gdHJhbnNpdGlvbktleXMuc29tZShmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIX5wcm9wZXJ0eU5hbWUuaW5kZXhPZihrZXkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChpc1JlZmxvd1Byb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgaW5zdGFuY2Ugb2YgdGhlIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlXykge1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlXyA9IG5ldyBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSG9sZHMgcmVmZXJlbmNlIHRvIHRoZSBjb250cm9sbGVyJ3MgaW5zdGFuY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGUge1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlcn1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmluc3RhbmNlXyA9IG51bGw7XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyO1xyXG59KCkpO1xuXG4vKipcclxuICogRGVmaW5lcyBub24td3JpdGFibGUvZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIHRoZSBwcm92aWRlZCB0YXJnZXQgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IC0gT2JqZWN0IGZvciB3aGljaCB0byBkZWZpbmUgcHJvcGVydGllcy5cclxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gUHJvcGVydGllcyB0byBiZSBkZWZpbmVkLlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUYXJnZXQgb2JqZWN0LlxyXG4gKi9cclxudmFyIGRlZmluZUNvbmZpZ3VyYWJsZSA9IChmdW5jdGlvbiAodGFyZ2V0LCBwcm9wcykge1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKHByb3BzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogcHJvcHNba2V5XSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59KTtcblxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGdsb2JhbCBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICovXHJcbnZhciBnZXRXaW5kb3dPZiA9IChmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAvLyBBc3N1bWUgdGhhdCB0aGUgZWxlbWVudCBpcyBhbiBpbnN0YW5jZSBvZiBOb2RlLCB3aGljaCBtZWFucyB0aGF0IGl0XHJcbiAgICAvLyBoYXMgdGhlIFwib3duZXJEb2N1bWVudFwiIHByb3BlcnR5IGZyb20gd2hpY2ggd2UgY2FuIHJldHJpZXZlIGFcclxuICAgIC8vIGNvcnJlc3BvbmRpbmcgZ2xvYmFsIG9iamVjdC5cclxuICAgIHZhciBvd25lckdsb2JhbCA9IHRhcmdldCAmJiB0YXJnZXQub3duZXJEb2N1bWVudCAmJiB0YXJnZXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcclxuICAgIC8vIFJldHVybiB0aGUgbG9jYWwgZ2xvYmFsIG9iamVjdCBpZiBpdCdzIG5vdCBwb3NzaWJsZSBleHRyYWN0IG9uZSBmcm9tXHJcbiAgICAvLyBwcm92aWRlZCBlbGVtZW50LlxyXG4gICAgcmV0dXJuIG93bmVyR2xvYmFsIHx8IGdsb2JhbCQxO1xyXG59KTtcblxuLy8gUGxhY2Vob2xkZXIgb2YgYW4gZW1wdHkgY29udGVudCByZWN0YW5nbGUuXHJcbnZhciBlbXB0eVJlY3QgPSBjcmVhdGVSZWN0SW5pdCgwLCAwLCAwLCAwKTtcclxuLyoqXHJcbiAqIENvbnZlcnRzIHByb3ZpZGVkIHN0cmluZyB0byBhIG51bWJlci5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpIHx8IDA7XHJcbn1cclxuLyoqXHJcbiAqIEV4dHJhY3RzIGJvcmRlcnMgc2l6ZSBmcm9tIHByb3ZpZGVkIHN0eWxlcy5cclxuICpcclxuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcclxuICogQHBhcmFtIHsuLi5zdHJpbmd9IHBvc2l0aW9ucyAtIEJvcmRlcnMgcG9zaXRpb25zICh0b3AsIHJpZ2h0LCAuLi4pXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMpIHtcclxuICAgIHZhciBwb3NpdGlvbnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgcG9zaXRpb25zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBvc2l0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHNpemUsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVzWydib3JkZXItJyArIHBvc2l0aW9uICsgJy13aWR0aCddO1xyXG4gICAgICAgIHJldHVybiBzaXplICsgdG9GbG9hdCh2YWx1ZSk7XHJcbiAgICB9LCAwKTtcclxufVxyXG4vKipcclxuICogRXh0cmFjdHMgcGFkZGluZ3Mgc2l6ZXMgZnJvbSBwcm92aWRlZCBzdHlsZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhZGRpbmdzIGJveC5cclxuICovXHJcbmZ1bmN0aW9uIGdldFBhZGRpbmdzKHN0eWxlcykge1xyXG4gICAgdmFyIHBvc2l0aW9ucyA9IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J107XHJcbiAgICB2YXIgcGFkZGluZ3MgPSB7fTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgcG9zaXRpb25zXzEgPSBwb3NpdGlvbnM7IF9pIDwgcG9zaXRpb25zXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gcG9zaXRpb25zXzFbX2ldO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1sncGFkZGluZy0nICsgcG9zaXRpb25dO1xyXG4gICAgICAgIHBhZGRpbmdzW3Bvc2l0aW9uXSA9IHRvRmxvYXQodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhZGRpbmdzO1xyXG59XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHByb3ZpZGVkIFNWRyBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1NWR0dyYXBoaWNzRWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBjb250ZW50IHJlY3RhbmdsZSBvZiB3aGljaCBuZWVkc1xyXG4gKiAgICAgIHRvIGJlIGNhbGN1bGF0ZWQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGdldFNWR0NvbnRlbnRSZWN0KHRhcmdldCkge1xyXG4gICAgdmFyIGJib3ggPSB0YXJnZXQuZ2V0QkJveCgpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KDAsIDAsIGJib3gud2lkdGgsIGJib3guaGVpZ2h0KTtcclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBjb250ZW50IHJlY3RhbmdsZSBvZiBwcm92aWRlZCBIVE1MRWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBmb3Igd2hpY2ggdG8gY2FsY3VsYXRlIHRoZSBjb250ZW50IHJlY3RhbmdsZS5cclxuICogQHJldHVybnMge0RPTVJlY3RJbml0fVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpIHtcclxuICAgIC8vIENsaWVudCB3aWR0aCAmIGhlaWdodCBwcm9wZXJ0aWVzIGNhbid0IGJlXHJcbiAgICAvLyB1c2VkIGV4Y2x1c2l2ZWx5IGFzIHRoZXkgcHJvdmlkZSByb3VuZGVkIHZhbHVlcy5cclxuICAgIHZhciBjbGllbnRXaWR0aCA9IHRhcmdldC5jbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0ID0gdGFyZ2V0LmNsaWVudEhlaWdodDtcclxuICAgIC8vIEJ5IHRoaXMgY29uZGl0aW9uIHdlIGNhbiBjYXRjaCBhbGwgbm9uLXJlcGxhY2VkIGlubGluZSwgaGlkZGVuIGFuZFxyXG4gICAgLy8gZGV0YWNoZWQgZWxlbWVudHMuIFRob3VnaCBlbGVtZW50cyB3aXRoIHdpZHRoICYgaGVpZ2h0IHByb3BlcnRpZXMgbGVzc1xyXG4gICAgLy8gdGhhbiAwLjUgd2lsbCBiZSBkaXNjYXJkZWQgYXMgd2VsbC5cclxuICAgIC8vXHJcbiAgICAvLyBXaXRob3V0IGl0IHdlIHdvdWxkIG5lZWQgdG8gaW1wbGVtZW50IHNlcGFyYXRlIG1ldGhvZHMgZm9yIGVhY2ggb2ZcclxuICAgIC8vIHRob3NlIGNhc2VzIGFuZCBpdCdzIG5vdCBwb3NzaWJsZSB0byBwZXJmb3JtIGEgcHJlY2lzZSBhbmQgcGVyZm9ybWFuY2VcclxuICAgIC8vIGVmZmVjdGl2ZSB0ZXN0IGZvciBoaWRkZW4gZWxlbWVudHMuIEUuZy4gZXZlbiBqUXVlcnkncyAnOnZpc2libGUnIGZpbHRlclxyXG4gICAgLy8gZ2l2ZXMgd3JvbmcgcmVzdWx0cyBmb3IgZWxlbWVudHMgd2l0aCB3aWR0aCAmIGhlaWdodCBsZXNzIHRoYW4gMC41LlxyXG4gICAgaWYgKCFjbGllbnRXaWR0aCAmJiAhY2xpZW50SGVpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcclxuICAgIH1cclxuICAgIHZhciBzdHlsZXMgPSBnZXRXaW5kb3dPZih0YXJnZXQpLmdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcclxuICAgIHZhciBwYWRkaW5ncyA9IGdldFBhZGRpbmdzKHN0eWxlcyk7XHJcbiAgICB2YXIgaG9yaXpQYWQgPSBwYWRkaW5ncy5sZWZ0ICsgcGFkZGluZ3MucmlnaHQ7XHJcbiAgICB2YXIgdmVydFBhZCA9IHBhZGRpbmdzLnRvcCArIHBhZGRpbmdzLmJvdHRvbTtcclxuICAgIC8vIENvbXB1dGVkIHN0eWxlcyBvZiB3aWR0aCAmIGhlaWdodCBhcmUgYmVpbmcgdXNlZCBiZWNhdXNlIHRoZXkgYXJlIHRoZVxyXG4gICAgLy8gb25seSBkaW1lbnNpb25zIGF2YWlsYWJsZSB0byBKUyB0aGF0IGNvbnRhaW4gbm9uLXJvdW5kZWQgdmFsdWVzLiBJdCBjb3VsZFxyXG4gICAgLy8gYmUgcG9zc2libGUgdG8gdXRpbGl6ZSB0aGUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlmIG9ubHkgaXQncyBkYXRhIHdhc24ndFxyXG4gICAgLy8gYWZmZWN0ZWQgYnkgQ1NTIHRyYW5zZm9ybWF0aW9ucyBsZXQgYWxvbmUgcGFkZGluZ3MsIGJvcmRlcnMgYW5kIHNjcm9sbCBiYXJzLlxyXG4gICAgdmFyIHdpZHRoID0gdG9GbG9hdChzdHlsZXMud2lkdGgpLCBoZWlnaHQgPSB0b0Zsb2F0KHN0eWxlcy5oZWlnaHQpO1xyXG4gICAgLy8gV2lkdGggJiBoZWlnaHQgaW5jbHVkZSBwYWRkaW5ncyBhbmQgYm9yZGVycyB3aGVuIHRoZSAnYm9yZGVyLWJveCcgYm94XHJcbiAgICAvLyBtb2RlbCBpcyBhcHBsaWVkIChleGNlcHQgZm9yIElFKS5cclxuICAgIGlmIChzdHlsZXMuYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcclxuICAgICAgICAvLyBGb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgcmVxdWlyZWQgdG8gaGFuZGxlIEludGVybmV0IEV4cGxvcmVyIHdoaWNoXHJcbiAgICAgICAgLy8gZG9lc24ndCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHRvIGNvbXB1dGVkIENTUyBkaW1lbnNpb25zLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gV2UgY2FuIHNheSB0aGF0IGlmIENTUyBkaW1lbnNpb25zICsgcGFkZGluZ3MgYXJlIGVxdWFsIHRvIHRoZSBcImNsaWVudFwiXHJcbiAgICAgICAgLy8gcHJvcGVydGllcyB0aGVuIGl0J3MgZWl0aGVyIElFLCBhbmQgdGh1cyB3ZSBkb24ndCBuZWVkIHRvIHN1YnRyYWN0XHJcbiAgICAgICAgLy8gYW55dGhpbmcsIG9yIGFuIGVsZW1lbnQgbWVyZWx5IGRvZXNuJ3QgaGF2ZSBwYWRkaW5ncy9ib3JkZXJzIHN0eWxlcy5cclxuICAgICAgICBpZiAoTWF0aC5yb3VuZCh3aWR0aCArIGhvcml6UGFkKSAhPT0gY2xpZW50V2lkdGgpIHtcclxuICAgICAgICAgICAgd2lkdGggLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAnbGVmdCcsICdyaWdodCcpICsgaG9yaXpQYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChNYXRoLnJvdW5kKGhlaWdodCArIHZlcnRQYWQpICE9PSBjbGllbnRIZWlnaHQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0IC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3RvcCcsICdib3R0b20nKSArIHZlcnRQYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gRm9sbG93aW5nIHN0ZXBzIGNhbid0IGJlIGFwcGxpZWQgdG8gdGhlIGRvY3VtZW50J3Mgcm9vdCBlbGVtZW50IGFzIGl0c1xyXG4gICAgLy8gY2xpZW50W1dpZHRoL0hlaWdodF0gcHJvcGVydGllcyByZXByZXNlbnQgdmlld3BvcnQgYXJlYSBvZiB0aGUgd2luZG93LlxyXG4gICAgLy8gQmVzaWRlcywgaXQncyBhcyB3ZWxsIG5vdCBuZWNlc3NhcnkgYXMgdGhlIDxodG1sPiBpdHNlbGYgbmVpdGhlciBoYXNcclxuICAgIC8vIHJlbmRlcmVkIHNjcm9sbCBiYXJzIG5vciBpdCBjYW4gYmUgY2xpcHBlZC5cclxuICAgIGlmICghaXNEb2N1bWVudEVsZW1lbnQodGFyZ2V0KSkge1xyXG4gICAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMgKG9ubHkgaW4gRmlyZWZveCwgYWN0dWFsbHkpIENTUyB3aWR0aCAmIGhlaWdodFxyXG4gICAgICAgIC8vIGluY2x1ZGUgc2Nyb2xsIGJhcnMgc2l6ZSB3aGljaCBjYW4gYmUgcmVtb3ZlZCBhdCB0aGlzIHN0ZXAgYXMgc2Nyb2xsXHJcbiAgICAgICAgLy8gYmFycyBhcmUgdGhlIG9ubHkgZGlmZmVyZW5jZSBiZXR3ZWVuIHJvdW5kZWQgZGltZW5zaW9ucyArIHBhZGRpbmdzXHJcbiAgICAgICAgLy8gYW5kIFwiY2xpZW50XCIgcHJvcGVydGllcywgdGhvdWdoIHRoYXQgaXMgbm90IGFsd2F5cyB0cnVlIGluIENocm9tZS5cclxuICAgICAgICB2YXIgdmVydFNjcm9sbGJhciA9IE1hdGgucm91bmQod2lkdGggKyBob3JpelBhZCkgLSBjbGllbnRXaWR0aDtcclxuICAgICAgICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBNYXRoLnJvdW5kKGhlaWdodCArIHZlcnRQYWQpIC0gY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgIC8vIENocm9tZSBoYXMgYSByYXRoZXIgd2VpcmQgcm91bmRpbmcgb2YgXCJjbGllbnRcIiBwcm9wZXJ0aWVzLlxyXG4gICAgICAgIC8vIEUuZy4gZm9yIGFuIGVsZW1lbnQgd2l0aCBjb250ZW50IHdpZHRoIG9mIDMxNC4ycHggaXQgc29tZXRpbWVzIGdpdmVzXHJcbiAgICAgICAgLy8gdGhlIGNsaWVudCB3aWR0aCBvZiAzMTVweCBhbmQgZm9yIHRoZSB3aWR0aCBvZiAzMTQuN3B4IGl0IG1heSBnaXZlXHJcbiAgICAgICAgLy8gMzE0cHguIEFuZCBpdCBkb2Vzbid0IGhhcHBlbiBhbGwgdGhlIHRpbWUuIFNvIGp1c3QgaWdub3JlIHRoaXMgZGVsdGFcclxuICAgICAgICAvLyBhcyBhIG5vbi1yZWxldmFudC5cclxuICAgICAgICBpZiAoTWF0aC5hYnModmVydFNjcm9sbGJhcikgIT09IDEpIHtcclxuICAgICAgICAgICAgd2lkdGggLT0gdmVydFNjcm9sbGJhcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKGhvcml6U2Nyb2xsYmFyKSAhPT0gMSkge1xyXG4gICAgICAgICAgICBoZWlnaHQgLT0gaG9yaXpTY3JvbGxiYXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KHBhZGRpbmdzLmxlZnQsIHBhZGRpbmdzLnRvcCwgd2lkdGgsIGhlaWdodCk7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrcyB3aGV0aGVyIHByb3ZpZGVkIGVsZW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIFNWR0dyYXBoaWNzRWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIGJlIGNoZWNrZWQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzU1ZHR3JhcGhpY3NFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNvbWUgYnJvd3NlcnMsIG5hbWVseSBJRSBhbmQgRWRnZSwgZG9uJ3QgaGF2ZSB0aGUgU1ZHR3JhcGhpY3NFbGVtZW50XHJcbiAgICAvLyBpbnRlcmZhY2UuXHJcbiAgICBpZiAodHlwZW9mIFNWR0dyYXBoaWNzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5TVkdHcmFwaGljc0VsZW1lbnQ7IH07XHJcbiAgICB9XHJcbiAgICAvLyBJZiBpdCdzIHNvLCB0aGVuIGNoZWNrIHRoYXQgZWxlbWVudCBpcyBhdCBsZWFzdCBhbiBpbnN0YW5jZSBvZiB0aGVcclxuICAgIC8vIFNWR0VsZW1lbnQgYW5kIHRoYXQgaXQgaGFzIHRoZSBcImdldEJCb3hcIiBtZXRob2QuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gKHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuU1ZHRWxlbWVudCAmJlxyXG4gICAgICAgIHR5cGVvZiB0YXJnZXQuZ2V0QkJveCA9PT0gJ2Z1bmN0aW9uJyk7IH07XHJcbn0pKCk7XHJcbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBwcm92aWRlZCBlbGVtZW50IGlzIGEgZG9jdW1lbnQgZWxlbWVudCAoPGh0bWw+KS5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIGJlIGNoZWNrZWQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNEb2N1bWVudEVsZW1lbnQodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gdGFyZ2V0ID09PSBnZXRXaW5kb3dPZih0YXJnZXQpLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBhbiBhcHByb3ByaWF0ZSBjb250ZW50IHJlY3RhbmdsZSBmb3IgcHJvdmlkZWQgaHRtbCBvciBzdmcgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHdoaWNoIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGdldENvbnRlbnRSZWN0KHRhcmdldCkge1xyXG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcclxuICAgICAgICByZXR1cm4gZW1wdHlSZWN0O1xyXG4gICAgfVxyXG4gICAgaWYgKGlzU1ZHR3JhcGhpY3NFbGVtZW50KHRhcmdldCkpIHtcclxuICAgICAgICByZXR1cm4gZ2V0U1ZHQ29udGVudFJlY3QodGFyZ2V0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBnZXRIVE1MRWxlbWVudENvbnRlbnRSZWN0KHRhcmdldCk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgcmVjdGFuZ2xlIHdpdGggYW4gaW50ZXJmYWNlIG9mIHRoZSBET01SZWN0UmVhZE9ubHkuXHJcbiAqIFNwZWM6IGh0dHBzOi8vZHJhZnRzLmZ4dGYub3JnL2dlb21ldHJ5LyNkb21yZWN0cmVhZG9ubHlcclxuICpcclxuICogQHBhcmFtIHtET01SZWN0SW5pdH0gcmVjdEluaXQgLSBPYmplY3Qgd2l0aCByZWN0YW5nbGUncyB4L3kgY29vcmRpbmF0ZXMgYW5kIGRpbWVuc2lvbnMuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0UmVhZE9ubHl9XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSZWFkT25seVJlY3QoX2EpIHtcclxuICAgIHZhciB4ID0gX2EueCwgeSA9IF9hLnksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcclxuICAgIC8vIElmIERPTVJlY3RSZWFkT25seSBpcyBhdmFpbGFibGUgdXNlIGl0IGFzIGEgcHJvdG90eXBlIGZvciB0aGUgcmVjdGFuZ2xlLlxyXG4gICAgdmFyIENvbnN0ciA9IHR5cGVvZiBET01SZWN0UmVhZE9ubHkgIT09ICd1bmRlZmluZWQnID8gRE9NUmVjdFJlYWRPbmx5IDogT2JqZWN0O1xyXG4gICAgdmFyIHJlY3QgPSBPYmplY3QuY3JlYXRlKENvbnN0ci5wcm90b3R5cGUpO1xyXG4gICAgLy8gUmVjdGFuZ2xlJ3MgcHJvcGVydGllcyBhcmUgbm90IHdyaXRhYmxlIGFuZCBub24tZW51bWVyYWJsZS5cclxuICAgIGRlZmluZUNvbmZpZ3VyYWJsZShyZWN0LCB7XHJcbiAgICAgICAgeDogeCwgeTogeSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICB0b3A6IHksXHJcbiAgICAgICAgcmlnaHQ6IHggKyB3aWR0aCxcclxuICAgICAgICBib3R0b206IGhlaWdodCArIHksXHJcbiAgICAgICAgbGVmdDogeFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVjdDtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyBET01SZWN0SW5pdCBvYmplY3QgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGRpbWVuc2lvbnMgYW5kIHRoZSB4L3kgY29vcmRpbmF0ZXMuXHJcbiAqIFNwZWM6IGh0dHBzOi8vZHJhZnRzLmZ4dGYub3JnL2dlb21ldHJ5LyNkaWN0ZGVmLWRvbXJlY3Rpbml0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWCBjb29yZGluYXRlLlxyXG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFkgY29vcmRpbmF0ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gUmVjdGFuZ2xlJ3Mgd2lkdGguXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBSZWN0YW5nbGUncyBoZWlnaHQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlY3RJbml0KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcclxufVxuXG4vKipcclxuICogQ2xhc3MgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0YXRpb25zIG9mIHRoZSBjb250ZW50IHJlY3RhbmdsZSBvZlxyXG4gKiBwcm92aWRlZCBET00gZWxlbWVudCBhbmQgZm9yIGtlZXBpbmcgdHJhY2sgb2YgaXQncyBjaGFuZ2VzLlxyXG4gKi9cclxudmFyIFJlc2l6ZU9ic2VydmF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBvYnNlcnZlZC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0KSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQnJvYWRjYXN0ZWQgd2lkdGggb2YgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0V2lkdGggPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJyb2FkY2FzdGVkIGhlaWdodCBvZiBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlZmVyZW5jZSB0byB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtET01SZWN0SW5pdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbnRlbnRSZWN0XyA9IGNyZWF0ZVJlY3RJbml0KDAsIDAsIDAsIDApO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIGFuZCB0ZWxscyB3aGV0aGVyIGl0J3Mgd2lkdGggb3IgaGVpZ2h0IHByb3BlcnRpZXNcclxuICAgICAqIGhhdmUgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBicm9hZGNhc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmF0aW9uLnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVjdCA9IGdldENvbnRlbnRSZWN0KHRoaXMudGFyZ2V0KTtcclxuICAgICAgICB0aGlzLmNvbnRlbnRSZWN0XyA9IHJlY3Q7XHJcbiAgICAgICAgcmV0dXJuIChyZWN0LndpZHRoICE9PSB0aGlzLmJyb2FkY2FzdFdpZHRoIHx8XHJcbiAgICAgICAgICAgIHJlY3QuaGVpZ2h0ICE9PSB0aGlzLmJyb2FkY2FzdEhlaWdodCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzICdicm9hZGNhc3RXaWR0aCcgYW5kICdicm9hZGNhc3RIZWlnaHQnIHByb3BlcnRpZXMgd2l0aCBhIGRhdGFcclxuICAgICAqIGZyb20gdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydGllcyBvZiB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9IExhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmF0aW9uLnByb3RvdHlwZS5icm9hZGNhc3RSZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZWN0ID0gdGhpcy5jb250ZW50UmVjdF87XHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RXaWR0aCA9IHJlY3Qud2lkdGg7XHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSByZWN0LmhlaWdodDtcclxuICAgICAgICByZXR1cm4gcmVjdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2YXRpb247XHJcbn0oKSk7XG5cbnZhciBSZXNpemVPYnNlcnZlckVudHJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyRW50cnkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRoYXQgaXMgYmVpbmcgb2JzZXJ2ZWQuXHJcbiAgICAgKiBAcGFyYW0ge0RPTVJlY3RJbml0fSByZWN0SW5pdCAtIERhdGEgb2YgdGhlIGVsZW1lbnQncyBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXJFbnRyeSh0YXJnZXQsIHJlY3RJbml0KSB7XHJcbiAgICAgICAgdmFyIGNvbnRlbnRSZWN0ID0gY3JlYXRlUmVhZE9ubHlSZWN0KHJlY3RJbml0KTtcclxuICAgICAgICAvLyBBY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gZm9sbG93aW5nIHByb3BlcnRpZXMgYXJlIG5vdCB3cml0YWJsZVxyXG4gICAgICAgIC8vIGFuZCBhcmUgYWxzbyBub3QgZW51bWVyYWJsZSBpbiB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gUHJvcGVydHkgYWNjZXNzb3JzIGFyZSBub3QgYmVpbmcgdXNlZCBhcyB0aGV5J2QgcmVxdWlyZSB0byBkZWZpbmUgYVxyXG4gICAgICAgIC8vIHByaXZhdGUgV2Vha01hcCBzdG9yYWdlIHdoaWNoIG1heSBjYXVzZSBtZW1vcnkgbGVha3MgaW4gYnJvd3NlcnMgdGhhdFxyXG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgdGhpcyB0eXBlIG9mIGNvbGxlY3Rpb25zLlxyXG4gICAgICAgIGRlZmluZUNvbmZpZ3VyYWJsZSh0aGlzLCB7IHRhcmdldDogdGFyZ2V0LCBjb250ZW50UmVjdDogY29udGVudFJlY3QgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXJFbnRyeTtcclxufSgpKTtcblxudmFyIFJlc2l6ZU9ic2VydmVyU1BJID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJDYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWRcclxuICAgICAqICAgICAgd2hlbiBvbmUgb2YgdGhlIG9ic2VydmVkIGVsZW1lbnRzIGNoYW5nZXMgaXQncyBjb250ZW50IGRpbWVuc2lvbnMuXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlcn0gY29udHJvbGxlciAtIENvbnRyb2xsZXIgaW5zdGFuY2Ugd2hpY2hcclxuICAgICAqICAgICAgaXMgcmVzcG9uc2libGUgZm9yIHRoZSB1cGRhdGVzIG9mIG9ic2VydmVyLlxyXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlcn0gY2FsbGJhY2tDdHggLSBSZWZlcmVuY2UgdG8gdGhlIHB1YmxpY1xyXG4gICAgICogICAgICBSZXNpemVPYnNlcnZlciBpbnN0YW5jZSB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXJTUEkoY2FsbGJhY2ssIGNvbnRyb2xsZXIsIGNhbGxiYWNrQ3R4KSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29sbGVjdGlvbiBvZiByZXNpemUgb2JzZXJ2YXRpb25zIHRoYXQgaGF2ZSBkZXRlY3RlZCBjaGFuZ2VzIGluIGRpbWVuc2lvbnNcclxuICAgICAgICAgKiBvZiBlbGVtZW50cy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtBcnJheTxSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVnaXN0cnkgb2YgdGhlIFJlc2l6ZU9ic2VydmF0aW9uIGluc3RhbmNlcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtNYXA8RWxlbWVudCwgUmVzaXplT2JzZXJ2YXRpb24+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YXRpb25zXyA9IG5ldyBNYXBTaGltKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2FsbGJhY2sgcHJvdmlkZWQgYXMgcGFyYW1ldGVyIDEgaXMgbm90IGEgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyXyA9IGNvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja0N0eF8gPSBjYWxsYmFja0N0eDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIG9ic2VydmluZyBwcm92aWRlZCBlbGVtZW50LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBvYnNlcnZlZC5cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cclxuICAgICAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBnZXRXaW5kb3dPZih0YXJnZXQpLkVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlIFwiRWxlbWVudFwiLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIG9ic2VydmVkLlxyXG4gICAgICAgIGlmIChvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYnNlcnZhdGlvbnMuc2V0KHRhcmdldCwgbmV3IFJlc2l6ZU9ic2VydmF0aW9uKHRhcmdldCkpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcl8uYWRkT2JzZXJ2ZXIodGhpcyk7XHJcbiAgICAgICAgLy8gRm9yY2UgdGhlIHVwZGF0ZSBvZiBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyXy5yZWZyZXNoKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyBvYnNlcnZpbmcgcHJvdmlkZWQgZWxlbWVudC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gc3RvcCBvYnNlcnZpbmcuXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cclxuICAgICAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBnZXRXaW5kb3dPZih0YXJnZXQpLkVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlIFwiRWxlbWVudFwiLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBub3QgYmVpbmcgb2JzZXJ2ZWQuXHJcbiAgICAgICAgaWYgKCFvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYnNlcnZhdGlvbnMuZGVsZXRlKHRhcmdldCk7XHJcbiAgICAgICAgaWYgKCFvYnNlcnZhdGlvbnMuc2l6ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFN0b3BzIG9ic2VydmluZyBhbGwgZWxlbWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcclxuICAgICAgICB0aGlzLm9ic2VydmF0aW9uc18uY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ29sbGVjdHMgb2JzZXJ2YXRpb24gaW5zdGFuY2VzIHRoZSBhc3NvY2lhdGVkIGVsZW1lbnQgb2Ygd2hpY2ggaGFzIGNoYW5nZWRcclxuICAgICAqIGl0J3MgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5nYXRoZXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhdGlvbnNfLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmF0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChvYnNlcnZhdGlvbi5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnB1c2gob2JzZXJ2YXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VzIGluaXRpYWwgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBhIGxpc3Qgb2YgUmVzaXplT2JzZXJ2ZXJFbnRyeVxyXG4gICAgICogaW5zdGFuY2VzIGNvbGxlY3RlZCBmcm9tIGFjdGl2ZSByZXNpemUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuYnJvYWRjYXN0QWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgb2JzZXJ2ZXIgZG9lc24ndCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgaWYgKCF0aGlzLmhhc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuY2FsbGJhY2tDdHhfO1xyXG4gICAgICAgIC8vIENyZWF0ZSBSZXNpemVPYnNlcnZlckVudHJ5IGluc3RhbmNlIGZvciBldmVyeSBhY3RpdmUgb2JzZXJ2YXRpb24uXHJcbiAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubWFwKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob2JzZXJ2YXRpb24udGFyZ2V0LCBvYnNlcnZhdGlvbi5icm9hZGNhc3RSZWN0KCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfLmNhbGwoY3R4LCBlbnRyaWVzLCBjdHgpO1xyXG4gICAgICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENsZWFycyB0aGUgY29sbGVjdGlvbiBvZiBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuY2xlYXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnNwbGljZSgwKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRlbGxzIHdoZXRoZXIgb2JzZXJ2ZXIgaGFzIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5oYXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXy5sZW5ndGggPiAwO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlclNQSTtcclxufSgpKTtcblxuLy8gUmVnaXN0cnkgb2YgaW50ZXJuYWwgb2JzZXJ2ZXJzLiBJZiBXZWFrTWFwIGlzIG5vdCBhdmFpbGFibGUgdXNlIGN1cnJlbnQgc2hpbVxyXG4vLyBmb3IgdGhlIE1hcCBjb2xsZWN0aW9uIGFzIGl0IGhhcyBhbGwgcmVxdWlyZWQgbWV0aG9kcyBhbmQgYmVjYXVzZSBXZWFrTWFwXHJcbi8vIGNhbid0IGJlIGZ1bGx5IHBvbHlmaWxsZWQgYW55d2F5LlxyXG52YXIgb2JzZXJ2ZXJzID0gdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnID8gbmV3IFdlYWtNYXAoKSA6IG5ldyBNYXBTaGltKCk7XHJcbi8qKlxyXG4gKiBSZXNpemVPYnNlcnZlciBBUEkuIEVuY2Fwc3VsYXRlcyB0aGUgUmVzaXplT2JzZXJ2ZXIgU1BJIGltcGxlbWVudGF0aW9uXHJcbiAqIGV4cG9zaW5nIG9ubHkgdGhvc2UgbWV0aG9kcyBhbmQgcHJvcGVydGllcyB0aGF0IGFyZSBkZWZpbmVkIGluIHRoZSBzcGVjLlxyXG4gKi9cclxudmFyIFJlc2l6ZU9ic2VydmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJDYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsYmFjayB0aGF0IGlzIGludm9rZWQgd2hlblxyXG4gICAgICogICAgICBkaW1lbnNpb25zIG9mIHRoZSBvYnNlcnZlZCBlbGVtZW50cyBjaGFuZ2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlc2l6ZU9ic2VydmVyKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb250cm9sbGVyID0gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyU1BJKGNhbGxiYWNrLCBjb250cm9sbGVyLCB0aGlzKTtcclxuICAgICAgICBvYnNlcnZlcnMuc2V0KHRoaXMsIG9ic2VydmVyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlcjtcclxufSgpKTtcclxuLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG5bXHJcbiAgICAnb2JzZXJ2ZScsXHJcbiAgICAndW5vYnNlcnZlJyxcclxuICAgICdkaXNjb25uZWN0J1xyXG5dLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xyXG4gICAgUmVzaXplT2JzZXJ2ZXIucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHJldHVybiAoX2EgPSBvYnNlcnZlcnMuZ2V0KHRoaXMpKVttZXRob2RdLmFwcGx5KF9hLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxufSk7XG5cbnZhciBpbmRleCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBFeHBvcnQgZXhpc3RpbmcgaW1wbGVtZW50YXRpb24gaWYgYXZhaWxhYmxlLlxyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwkMS5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsJDEuUmVzaXplT2JzZXJ2ZXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXI7XHJcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIl0sIm5hbWVzIjpbIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImQiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsImlzQ0VQb2x5ZmlsbCIsIndpbmRvdyIsImN1c3RvbUVsZW1lbnRzIiwidW5kZWZpbmVkIiwicG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayIsInJlbW92ZU5vZGVzIiwiY29udGFpbmVyIiwic3RhcnQiLCJlbmQiLCJuIiwibmV4dFNpYmxpbmciLCJyZW1vdmVDaGlsZCIsIm1hcmtlciIsIk1hdGgiLCJyYW5kb20iLCJTdHJpbmciLCJzbGljZSIsIm5vZGVNYXJrZXIiLCJtYXJrZXJSZWdleCIsIlJlZ0V4cCIsIlRlbXBsYXRlIiwiW29iamVjdCBPYmplY3RdIiwicmVzdWx0IiwiZWxlbWVudCIsInRoaXMiLCJwYXJ0cyIsIm5vZGVzVG9SZW1vdmUiLCJzdGFjayIsIndhbGtlciIsImRvY3VtZW50IiwiY3JlYXRlVHJlZVdhbGtlciIsImNvbnRlbnQiLCJsYXN0UGFydEluZGV4IiwiaW5kZXgiLCJwYXJ0SW5kZXgiLCJzdHJpbmdzIiwidmFsdWVzIiwibm9kZSIsIm5leHROb2RlIiwibm9kZVR5cGUiLCJoYXNBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImNvdW50IiwiZW5kc1dpdGgiLCJuYW1lIiwic3RyaW5nRm9yUGFydCIsImxhc3RBdHRyaWJ1dGVOYW1lUmVnZXgiLCJleGVjIiwiYXR0cmlidXRlTG9va3VwTmFtZSIsInRvTG93ZXJDYXNlIiwiYXR0cmlidXRlVmFsdWUiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzdGF0aWNzIiwic3BsaXQiLCJwdXNoIiwidHlwZSIsInRhZ05hbWUiLCJjdXJyZW50Tm9kZSIsImRhdGEiLCJpbmRleE9mIiwicGFyZW50IiwicGFyZW50Tm9kZSIsImxhc3RJbmRleCIsImluc2VydCIsInMiLCJjcmVhdGVNYXJrZXIiLCJtYXRjaCIsImJvdW5kQXR0cmlidXRlU3VmZml4IiwiY3JlYXRlVGV4dE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJwcmV2aW91c1NpYmxpbmciLCJwb3AiLCJzdHIiLCJzdWZmaXgiLCJpc1RlbXBsYXRlUGFydEFjdGl2ZSIsInBhcnQiLCJjcmVhdGVDb21tZW50IiwicmVtb3ZlTm9kZXNGcm9tVGVtcGxhdGUiLCJ0ZW1wbGF0ZSIsIm5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyIsIm5vZGVJbmRleCIsInJlbW92ZUNvdW50Iiwibm9kZXNUb1JlbW92ZUluVGVtcGxhdGUiLCJjdXJyZW50UmVtb3ZpbmdOb2RlIiwiaGFzIiwiZm9yRWFjaCIsImNvdW50Tm9kZXMiLCJzdGFydEluZGV4IiwiZGlyZWN0aXZlcyIsIldlYWtNYXAiLCJpc0RpcmVjdGl2ZSIsIm8iLCJub0NoYW5nZSIsIm5vdGhpbmciLCJUZW1wbGF0ZUluc3RhbmNlIiwicHJvY2Vzc29yIiwib3B0aW9ucyIsIl9fcGFydHMiLCJzZXRWYWx1ZSIsImNvbW1pdCIsImZyYWdtZW50IiwiY2xvbmVOb2RlIiwiaW1wb3J0Tm9kZSIsIm5vZGVOYW1lIiwiaGFuZGxlVGV4dEV4cHJlc3Npb24iLCJpbnNlcnRBZnRlck5vZGUiLCJoYW5kbGVBdHRyaWJ1dGVFeHByZXNzaW9ucyIsImFkb3B0Tm9kZSIsInVwZ3JhZGUiLCJjb21tZW50TWFya2VyIiwiVGVtcGxhdGVSZXN1bHQiLCJsIiwiaHRtbCIsImlzQ29tbWVudEJpbmRpbmciLCJjb21tZW50T3BlbiIsImxhc3RJbmRleE9mIiwiYXR0cmlidXRlTWF0Y2giLCJzdWJzdHIiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiZ2V0SFRNTCIsImlzUHJpbWl0aXZlIiwidmFsdWUiLCJpc0l0ZXJhYmxlIiwiQXJyYXkiLCJpc0FycmF5IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJBdHRyaWJ1dGVDb21taXR0ZXIiLCJkaXJ0eSIsIl9jcmVhdGVQYXJ0IiwiQXR0cmlidXRlUGFydCIsInRleHQiLCJ2IiwidCIsInNldEF0dHJpYnV0ZSIsIl9nZXRWYWx1ZSIsImNvbW1pdHRlciIsImRpcmVjdGl2ZSIsIk5vZGVQYXJ0IiwiX19wZW5kaW5nVmFsdWUiLCJzdGFydE5vZGUiLCJhcHBlbmRDaGlsZCIsImVuZE5vZGUiLCJyZWYiLCJfX2luc2VydCIsIl9fY29tbWl0VGV4dCIsIl9fY29tbWl0VGVtcGxhdGVSZXN1bHQiLCJOb2RlIiwiX19jb21taXROb2RlIiwiX19jb21taXRJdGVyYWJsZSIsImNsZWFyIiwidmFsdWVBc1N0cmluZyIsInRlbXBsYXRlRmFjdG9yeSIsInVwZGF0ZSIsImluc3RhbmNlIiwiX2Nsb25lIiwiaXRlbVBhcnRzIiwiaXRlbVBhcnQiLCJpdGVtIiwiYXBwZW5kSW50b1BhcnQiLCJpbnNlcnRBZnRlclBhcnQiLCJCb29sZWFuQXR0cmlidXRlUGFydCIsIkVycm9yIiwiUHJvcGVydHlDb21taXR0ZXIiLCJzdXBlciIsInNpbmdsZSIsIlByb3BlcnR5UGFydCIsImV2ZW50T3B0aW9uc1N1cHBvcnRlZCIsImNhcHR1cmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9lIiwiRXZlbnRQYXJ0IiwiZXZlbnROYW1lIiwiZXZlbnRDb250ZXh0IiwiX19ib3VuZEhhbmRsZUV2ZW50IiwiZSIsImhhbmRsZUV2ZW50IiwibmV3TGlzdGVuZXIiLCJvbGRMaXN0ZW5lciIsInNob3VsZFJlbW92ZUxpc3RlbmVyIiwib25jZSIsInBhc3NpdmUiLCJzaG91bGRBZGRMaXN0ZW5lciIsIl9fb3B0aW9ucyIsImdldE9wdGlvbnMiLCJldmVudCIsImNhbGwiLCJ0ZW1wbGF0ZUNhY2hlIiwidGVtcGxhdGVDYWNoZXMiLCJnZXQiLCJzdHJpbmdzQXJyYXkiLCJrZXlTdHJpbmciLCJNYXAiLCJzZXQiLCJqb2luIiwiZ2V0VGVtcGxhdGVFbGVtZW50IiwiZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIiwicHJlZml4IiwiZ2V0VGVtcGxhdGVDYWNoZUtleSIsInNjb3BlTmFtZSIsImNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24iLCJTaGFkeUNTUyIsInByZXBhcmVUZW1wbGF0ZURvbSIsImNvbnNvbGUiLCJ3YXJuIiwic2hhZHlUZW1wbGF0ZUZhY3RvcnkiLCJjYWNoZUtleSIsIlRFTVBMQVRFX1RZUEVTIiwic2hhZHlSZW5kZXJTZXQiLCJTZXQiLCJwcmVwYXJlVGVtcGxhdGVTdHlsZXMiLCJyZW5kZXJlZERPTSIsImFkZCIsInRlbXBsYXRlRWxlbWVudCIsInN0eWxlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjb25kZW5zZWRTdHlsZSIsInN0eWxlIiwidGV4dENvbnRlbnQiLCJ0ZW1wbGF0ZXMiLCJmcm9tIiwicmVtb3ZlU3R5bGVzRnJvbUxpdFRlbXBsYXRlcyIsInJlZk5vZGUiLCJpbnNlcnRDb3VudCIsIndhbGtlckluZGV4IiwiaW5zZXJ0Tm9kZUludG9UZW1wbGF0ZSIsImZpcnN0Q2hpbGQiLCJxdWVyeVNlbGVjdG9yIiwibmF0aXZlU2hhZG93IiwicmVtb3ZlcyIsIkpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkiLCJwcm9wIiwiX29iaiIsImRlZmF1bHRDb252ZXJ0ZXIiLCJCb29sZWFuIiwiSlNPTiIsInN0cmluZ2lmeSIsIk51bWJlciIsInBhcnNlIiwibm90RXF1YWwiLCJvbGQiLCJkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbiIsImF0dHJpYnV0ZSIsImNvbnZlcnRlciIsInJlZmxlY3QiLCJoYXNDaGFuZ2VkIiwiVXBkYXRpbmdFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJfdXBkYXRlU3RhdGUiLCJfaW5zdGFuY2VQcm9wZXJ0aWVzIiwiX3VwZGF0ZVByb21pc2UiLCJQcm9taXNlIiwicmVzIiwiX2VuYWJsZVVwZGF0aW5nUmVzb2x2ZXIiLCJfY2hhbmdlZFByb3BlcnRpZXMiLCJfcmVmbGVjdGluZ1Byb3BlcnRpZXMiLCJpbml0aWFsaXplIiwib2JzZXJ2ZWRBdHRyaWJ1dGVzIiwiZmluYWxpemUiLCJfY2xhc3NQcm9wZXJ0aWVzIiwicCIsImF0dHIiLCJfYXR0cmlidXRlTmFtZUZvclByb3BlcnR5IiwiX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXAiLCJoYXNPd25Qcm9wZXJ0eSIsInN1cGVyUHJvcGVydGllcyIsImdldFByb3RvdHlwZU9mIiwiayIsIl9lbnN1cmVDbGFzc1Byb3BlcnRpZXMiLCJub0FjY2Vzc29yIiwicHJvdG90eXBlIiwiZGVzY3JpcHRvciIsImdldFByb3BlcnR5RGVzY3JpcHRvciIsIl9vcHRpb25zIiwib2xkVmFsdWUiLCJfcmVxdWVzdFVwZGF0ZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJzdXBlckN0b3IiLCJwcm9wcyIsInByb3BlcnRpZXMiLCJwcm9wS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjcmVhdGVQcm9wZXJ0eSIsImZyb21BdHRyaWJ1dGUiLCJ0b0F0dHJpYnV0ZSIsIl9zYXZlSW5zdGFuY2VQcm9wZXJ0aWVzIiwiY29uc3RydWN0b3IiLCJfdiIsImVuYWJsZVVwZGF0aW5nIiwiX2F0dHJpYnV0ZVRvUHJvcGVydHkiLCJjdG9yIiwiYXR0clZhbHVlIiwiX3Byb3BlcnR5VmFsdWVUb0F0dHJpYnV0ZSIsInByb3BOYW1lIiwiZ2V0UHJvcGVydHlPcHRpb25zIiwiX3Byb3BlcnR5VmFsdWVGcm9tQXR0cmlidXRlIiwic2hvdWxkUmVxdWVzdFVwZGF0ZSIsIl92YWx1ZUhhc0NoYW5nZWQiLCJfaGFzUmVxdWVzdGVkVXBkYXRlIiwiX2VucXVldWVVcGRhdGUiLCJ1cGRhdGVDb21wbGV0ZSIsInBlcmZvcm1VcGRhdGUiLCJoYXNVcGRhdGVkIiwiX2FwcGx5SW5zdGFuY2VQcm9wZXJ0aWVzIiwic2hvdWxkVXBkYXRlIiwiY2hhbmdlZFByb3BlcnRpZXMiLCJfbWFya1VwZGF0ZWQiLCJmaXJzdFVwZGF0ZWQiLCJ1cGRhdGVkIiwiX2dldFVwZGF0ZUNvbXBsZXRlIiwic2l6ZSIsIl9wcm9wZXJ0eVRvQXR0cmlidXRlIiwiY3VzdG9tRWxlbWVudCIsImNsYXNzT3JEZXNjcmlwdG9yIiwiY2xhenoiLCJkZWZpbmUiLCJsZWdhY3lDdXN0b21FbGVtZW50Iiwia2luZCIsImVsZW1lbnRzIiwic3RhbmRhcmRDdXN0b21FbGVtZW50Iiwic3RhbmRhcmRQcm9wZXJ0eSIsImFzc2lnbiIsInBsYWNlbWVudCIsImluaXRpYWxpemVyIiwicHJvcGVydHkiLCJwcm90b09yRGVzY3JpcHRvciIsInByb3RvIiwibGVnYWN5UHJvcGVydHkiLCJpbnRlcm5hbFByb3BlcnR5Iiwic3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzIiwiRG9jdW1lbnQiLCJDU1NTdHlsZVNoZWV0IiwiY29uc3RydWN0aW9uVG9rZW4iLCJDU1NSZXN1bHQiLCJjc3NUZXh0Iiwic2FmZVRva2VuIiwic3R5bGVTaGVldCIsIl9zdHlsZVNoZWV0IiwicmVwbGFjZVN5bmMiLCJjc3MiLCJyZWR1Y2UiLCJhY2MiLCJpZHgiLCJ0ZXh0RnJvbUNTU1Jlc3VsdCIsInJlbmRlck5vdEltcGxlbWVudGVkIiwiTGl0RWxlbWVudCIsInVzZXJTdHlsZXMiLCJnZXRTdHlsZXMiLCJfc3R5bGVzIiwiYWRkU3R5bGVzIiwicmVkdWNlUmlnaHQiLCJ1bnNoaWZ0IiwiX2dldFVuaXF1ZVN0eWxlcyIsInJlbmRlclJvb3QiLCJjcmVhdGVSZW5kZXJSb290IiwiU2hhZG93Um9vdCIsImFkb3B0U3R5bGVzIiwiYXR0YWNoU2hhZG93IiwibW9kZSIsImFkb3B0ZWRTdHlsZVNoZWV0cyIsIm1hcCIsIl9uZWVkc1NoaW1BZG9wdGVkU3R5bGVTaGVldHMiLCJTY29waW5nU2hpbSIsInByZXBhcmVBZG9wdGVkQ3NzVGV4dCIsImxvY2FsTmFtZSIsImNvbm5lY3RlZENhbGxiYWNrIiwic3R5bGVFbGVtZW50IiwidGVtcGxhdGVSZXN1bHQiLCJyZW5kZXIiLCJoYXNSZW5kZXJlZCIsIm5lZWRzU2NvcGluZyIsImhvc3QiLCJmaXJzdFNjb3BlUmVuZGVyIiwicmVuZGVyQ29udGFpbmVyIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImFwcGVuZEludG8iLCJsaXRSZW5kZXIiLCJkZWxldGUiLCJmaW5kTGF5b3V0Qm90dG9tIiwibGF5b3V0IiwibGF5b3V0WU1heCIsIml0ZW1Cb3R0b20iLCJwb3NZIiwiaGVpZ2h0IiwiaW50ZXJzZWN0cyIsIml0ZW0xIiwiaXRlbTIiLCJwb3NYIiwid2lkdGgiLCJnZXRJdGVtSXRlcnNlY3QiLCJsYXlvdXRJdGVtIiwicmVzb2x2ZUludGVyc2VjdGlvbiIsIm5ld1lQb3MiLCJvdGhlckl0ZW0iLCJzb3J0TGF5b3V0Iiwic29ydCIsImEiLCJiIiwiY29uZGVuc2VMYXlvdXQiLCJjb25kZW5zZWRMYXlvdXQiLCJyZXR1cm5MYXlvdXQiLCJzb3J0ZWRMYXlvdXQiLCJpbnRlcnNlY3RJdGVtIiwiaGFzTW92ZWQiLCJtb3ZlSXRlbUF3YXlGcm9tSW50ZXJzZWN0IiwiaXRlbVRvTW92ZSIsImNvbHMiLCJpc1VzZXJNb3ZlIiwidGVtcEl0ZW0iLCJtYXgiLCJtb3ZlSXRlbSIsIm5ld1Bvc1giLCJuZXdQb3NZIiwiY29sdW1ucyIsIm9sZFBvc1kiLCJzb3J0ZWQiLCJyZXZlcnNlIiwiYWxsSW50ZXJzZWN0cyIsImZpbHRlciIsImdldEFsbEludGVyc2VjdHMiLCJpdGVtSW5kZXgiLCJmaW5kSW5kZXgiLCJsZW4iLCJmaXJlRXZlbnQiLCJkZXRhaWwiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJ1IiwiXyIsImgiLCJtIiwiZyIsImYiLCJ5IiwiUyIsInciLCJ4IiwiUCIsIk4iLCJDIiwiRSIsIlQiLCJBIiwiViIsIk8iLCJVIiwiTSIsIlIiLCJ6IiwibGl0SHRtbFZlcnNpb25zIiwiaiIsIiQiLCJMIiwicSIsIkgiLCJJIiwiRiIsIkIiLCJEIiwiSiIsIlgiLCJmaW5hbGl6ZWQiLCJZIiwiRyIsIksiLCJRIiwiWiIsInR0IiwibGl0RWxlbWVudFZlcnNpb25zIiwiZXQiLCJzdCIsIml0IiwiVyIsIm50IiwicnQiLCJvdCIsImF0IiwibHQiLCJodCIsImR0IiwidXQiLCJwdCIsImN0IiwiX3QiLCJndCIsIm10IiwiZnQiLCJ5dCIsInZ0IiwiU3QiLCJ3dCIsImJ0IiwieHQiLCJQdCIsIk50IiwiQ3QiLCJFdCIsIlR0IiwiQXQiLCJWdCIsImt0IiwiT3QiLCJVdCIsIk10IiwiUnQiLCJ6dCIsImp0IiwiJHQiLCJMdCIsInF0IiwiSHQiLCJJdCIsIkZ0IiwiV3QiLCJCdCIsIkR0IiwiSnQiLCJYdCIsIll0IiwiR3QiLCJLdCIsIlF0IiwiWnQiLCJ0ZSIsImVlIiwic3RhcnRzV2l0aCIsInNlIiwiY2xpZW50WCIsImNsaWVudFkiLCJ0YXJnZXRUb3VjaGVzIiwiZmluZCIsImlkZW50aWZpZXIiLCJjaGFuZ2VkVG91Y2hlcyIsImllIiwibmUiLCJyZSIsInRvU3RyaW5nIiwib2UiLCJkaXNhYmxlZCIsIl9kcmFnZ2luZyIsIl9kcmFnU3RhcnQiLCJiaW5kIiwiX2RyYWciLCJfZHJhZ0VuZCIsImJ1dHRvbiIsImhhbmRsZSIsImxvZyIsIm9mZnNldFBhcmVudCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiX3RvdWNoSWRlbnRpZmllciIsInN0YXJ0WCIsInN0YXJ0WSIsImdyaWQiLCJyb3VuZCIsImRlbHRhWCIsImRlbHRhWSIsImFlIiwibGUiLCJfcmVzaXplIiwiX3Jlc2l6ZVN0YXJ0IiwiX3Jlc2l6ZUVuZCIsInN0YXJ0V2lkdGgiLCJjbGllbnRXaWR0aCIsInN0YXJ0SGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiaGUiLCJMaXRHcmlkSXRlbSIsImNoYW5nZWRQcm9wcyIsIl9pc0RyYWdnaW5nIiwiX2NvbHVtbldpZHRoIiwicGFyZW50V2lkdGgiLCJtYXJnaW4iLCJjb250YWluZXJQYWRkaW5nIiwiX2Z1bGxDb2x1bW5XaWR0aCIsIl9mdWxsUm93SGVpZ2h0Iiwicm93SGVpZ2h0IiwiX21pbldpZHRoUFgiLCJtaW5XaWR0aCIsIm1heFdpZHRoVW5pdHMiLCJtYXhXaWR0aCIsIm1pbiIsIl9tYXhXaWR0aFBYIiwiX21pbkhlaWdodFBYIiwibWluSGVpZ2h0IiwiX21heEhlaWdodFBYIiwibWF4SGVpZ2h0IiwiSW5maW5pdHkiLCJzZXRQcm9wZXJ0eSIsIl9pc1Jlc2l6aW5nIiwiX2ZpcnN0TGF5b3V0RmluaXNoZWQiLCJzZXRUaW1lb3V0IiwiZ3JpZEl0ZW1IVE1MIiwiaXNEcmFnZ2FibGUiLCJkcmFnSGFuZGxlIiwiaXNSZXNpemFibGUiLCJyZXNpemVIYW5kbGUiLCJldiIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhcmVudFJlY3QiLCJfc3RhcnRMZWZ0IiwibGVmdCIsIl9zdGFydFRvcCIsInRvcCIsIl9zdGFydFBvc1giLCJfc3RhcnRQb3NZIiwiZGVsdGFDb2xzIiwiZGVsdGFSb3dzIiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJhcmdzIiwiY29udGV4dCIsImNhbGxOb3ciLCJjbGVhclRpbWVvdXQiLCJhcHBseSIsIkxpdEdyaWRMYXlvdXQiLCJfY2hpbGRyZW5FbGVtZW50cyIsIml0ZW1zIiwiY29uY2F0IiwiY2hpbGRyZW4iLCJjbGFzc0xpc3QiLCJjb250YWlucyIsIl9sYXlvdXRIZWlnaHQiLCJidG0iLCJfbGF5b3V0IiwiX3Jlc2l6ZU9ic2VydmVyIiwiZGlzY29ubmVjdCIsInRoZW4iLCJfYXR0YWNoT2JzZXJ2ZXIiLCJzZXR1cExheW91dCIsIl93aWR0aCIsImRyYWdEaXNhYmxlZCIsInJlc2l6ZURpc2FibGVkIiwiX2l0ZW1SZXNpemVTdGFydCIsIl9pdGVtUmVzaXplIiwiX2l0ZW1SZXNpemVFbmQiLCJfaXRlbURyYWdTdGFydCIsIl9pdGVtRHJhZyIsIl9pdGVtRHJhZ0VuZCIsIl9yZW5kZXJQbGFjZUhvbGRlciIsIm5ld0xheW91dCIsIml0ZW1Qcm9wcyIsImZpeExheW91dEJvdW5kcyIsIl9vbGRJdGVtSW5kZXgiLCJjdXJyZW50VGFyZ2V0IiwiX3BsYWNlaG9sZGVyIiwiX29sZEl0ZW1MYXlvdXQiLCJuZXdJdGVtTGF5b3V0IiwiYXN5bmMiLCJSZXNpemVPYnNlcnZlciIsImRlZmF1bHQiLCJpbnN0YWxsUmVzaXplT2JzZXJ2ZXIiLCJfbWVhc3VyZSIsIm9ic2VydmUiLCJNYXBTaGltIiwiZ2V0SW5kZXgiLCJhcnIiLCJzb21lIiwiZW50cnkiLCJjbGFzc18xIiwiX19lbnRyaWVzX18iLCJlbnRyaWVzIiwic3BsaWNlIiwiY2FsbGJhY2siLCJjdHgiLCJfaSIsIl9hIiwiaXNCcm93c2VyIiwiZ2xvYmFsJDEiLCJnbG9iYWwiLCJzZWxmIiwiRnVuY3Rpb24iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUkMSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkRhdGUiLCJub3ciLCJ0cmFuc2l0aW9uS2V5cyIsIm11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQiLCJNdXRhdGlvbk9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyIiwiY29ubmVjdGVkXyIsIm11dGF0aW9uRXZlbnRzQWRkZWRfIiwibXV0YXRpb25zT2JzZXJ2ZXJfIiwib2JzZXJ2ZXJzXyIsIm9uVHJhbnNpdGlvbkVuZF8iLCJyZWZyZXNoIiwiZGVsYXkiLCJsZWFkaW5nQ2FsbCIsInRyYWlsaW5nQ2FsbCIsImxhc3RDYWxsVGltZSIsInJlc29sdmVQZW5kaW5nIiwicHJveHkiLCJ0aW1lb3V0Q2FsbGJhY2siLCJ0aW1lU3RhbXAiLCJ0aHJvdHRsZSIsImFkZE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJjb25uZWN0XyIsInJlbW92ZU9ic2VydmVyIiwib2JzZXJ2ZXJzIiwiZGlzY29ubmVjdF8iLCJ1cGRhdGVPYnNlcnZlcnNfIiwiYWN0aXZlT2JzZXJ2ZXJzIiwiZ2F0aGVyQWN0aXZlIiwiaGFzQWN0aXZlIiwiYnJvYWRjYXN0QWN0aXZlIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsInN1YnRyZWUiLCJfYiIsInByb3BlcnR5TmFtZSIsImdldEluc3RhbmNlIiwiaW5zdGFuY2VfIiwiZGVmaW5lQ29uZmlndXJhYmxlIiwia2V5cyIsIndyaXRhYmxlIiwiZ2V0V2luZG93T2YiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJlbXB0eVJlY3QiLCJjcmVhdGVSZWN0SW5pdCIsInRvRmxvYXQiLCJwYXJzZUZsb2F0IiwiZ2V0Qm9yZGVyc1NpemUiLCJwb3NpdGlvbnMiLCJwb3NpdGlvbiIsImdldEhUTUxFbGVtZW50Q29udGVudFJlY3QiLCJnZXRDb21wdXRlZFN0eWxlIiwicGFkZGluZ3MiLCJwb3NpdGlvbnNfMSIsImdldFBhZGRpbmdzIiwiaG9yaXpQYWQiLCJyaWdodCIsInZlcnRQYWQiLCJib3R0b20iLCJib3hTaXppbmciLCJkb2N1bWVudEVsZW1lbnQiLCJpc0RvY3VtZW50RWxlbWVudCIsInZlcnRTY3JvbGxiYXIiLCJob3JpelNjcm9sbGJhciIsImFicyIsImlzU1ZHR3JhcGhpY3NFbGVtZW50IiwiU1ZHR3JhcGhpY3NFbGVtZW50IiwiU1ZHRWxlbWVudCIsImdldEJCb3giLCJnZXRDb250ZW50UmVjdCIsImJib3giLCJnZXRTVkdDb250ZW50UmVjdCIsIlJlc2l6ZU9ic2VydmF0aW9uIiwiYnJvYWRjYXN0V2lkdGgiLCJicm9hZGNhc3RIZWlnaHQiLCJjb250ZW50UmVjdF8iLCJpc0FjdGl2ZSIsImJyb2FkY2FzdFJlY3QiLCJSZXNpemVPYnNlcnZlckVudHJ5IiwicmVjdEluaXQiLCJjb250ZW50UmVjdCIsIkNvbnN0ciIsIkRPTVJlY3RSZWFkT25seSIsImNyZWF0ZSIsImNyZWF0ZVJlYWRPbmx5UmVjdCIsIlJlc2l6ZU9ic2VydmVyU1BJIiwiY29udHJvbGxlciIsImNhbGxiYWNrQ3R4IiwiYWN0aXZlT2JzZXJ2YXRpb25zXyIsIm9ic2VydmF0aW9uc18iLCJUeXBlRXJyb3IiLCJjYWxsYmFja18iLCJjb250cm9sbGVyXyIsImNhbGxiYWNrQ3R4XyIsIkVsZW1lbnQiLCJvYnNlcnZhdGlvbnMiLCJ1bm9ic2VydmUiLCJjbGVhckFjdGl2ZSIsIl90aGlzIiwib2JzZXJ2YXRpb24iLCJtZXRob2QiXSwibWFwcGluZ3MiOiJBQW9ETyxTQUFTQSxFQUFXQyxFQUFZQyxFQUFRQyxFQUFLQyxHQUNoRCxJQUEySEMsRUFBdkhDLEVBQUlDLFVBQVVDLE9BQVFDLEVBQUlILEVBQUksRUFBSUosRUFBa0IsT0FBVEUsRUFBZ0JBLEVBQU9NLE9BQU9DLHlCQUF5QlQsRUFBUUMsR0FBT0MsRUFDckgsR0FBdUIsaUJBQVpRLFNBQW9ELG1CQUFyQkEsUUFBUUMsU0FBeUJKLEVBQUlHLFFBQVFDLFNBQVNaLEVBQVlDLEVBQVFDLEVBQUtDLFFBQ3BILElB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
