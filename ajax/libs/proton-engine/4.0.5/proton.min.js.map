{"version":3,"file":"proton.min.js","sources":["../src/math/MathUtil.js","../src/math/Span.js","../src/utils/WebGLUtil.js","../src/utils/DomUtil.js","../src/utils/ImgUtil.js","../src/utils/Util.js","../src/utils/Puid.js","../src/core/Pool.js","../src/debug/Stats.js","../src/events/EventDispatcher.js","../src/math/Integration.js","../src/core/Proton.js","../src/utils/Rgb.js","../src/math/ease.js","../src/math/Vector2D.js","../src/core/Particle.js","../src/utils/ColorUtil.js","../src/math/Polar2D.js","../src/math/Mat3.js","../src/math/ArraySpan.js","../src/math/Rectangle.js","../src/initialize/Rate.js","../src/initialize/Initialize.js","../src/initialize/Life.js","../src/zone/Zone.js","../src/zone/PointZone.js","../src/initialize/Position.js","../src/initialize/Velocity.js","../src/initialize/Mass.js","../src/initialize/Radius.js","../src/initialize/Body.js","../src/behaviour/Behaviour.js","../src/behaviour/Force.js","../src/behaviour/Attraction.js","../src/behaviour/RandomDrift.js","../src/behaviour/Gravity.js","../src/behaviour/Collision.js","../src/behaviour/CrossZone.js","../src/behaviour/Alpha.js","../src/behaviour/Scale.js","../src/behaviour/Rotate.js","../src/behaviour/Color.js","../src/behaviour/Repulsion.js","../src/behaviour/GravityWell.js","../src/initialize/InitializeUtil.js","../src/emitter/Emitter.js","../src/emitter/BehaviourEmitter.js","../src/emitter/FollowEmitter.js","../src/render/BaseRenderer.js","../src/render/CanvasRenderer.js","../src/render/DomRenderer.js","../src/render/EaselRenderer.js","../src/render/PixelRenderer.js","../src/render/PixiRenderer.js","../src/utils/MStack.js","../src/render/WebGLRenderer.js","../src/render/CustomRenderer.js","../src/zone/LineZone.js","../src/zone/CircleZone.js","../src/zone/RectZone.js","../src/zone/ImageZone.js","../src/debug/Debug.js","../src/index.js"],"sourcesContent":["const PI = 3.1415926;\nconst INFINITY = Infinity;\n\nconst MathUtil = {\n    PI: PI,\n    PIx2: PI * 2,\n    PI_2: PI / 2,\n    PI_180: PI / 180,\n    N180_PI: 180 / PI,\n    Infinity: -999,\n\n    isInfinity(num) {\n        return num === this.Infinity || num === INFINITY;\n    },\n\n    randomAToB(a, b, isInt = false) {\n        if (!isInt) return a + Math.random() * (b - a);\n        else return Math.floor(Math.random() * (b - a)) + a;\n    },\n\n    randomFloating(center, f, isInt) {\n        return this.randomAToB(center - f, center + f, isInt);\n    },\n\n    randomZone(display) {},\n\n    degreeTransform(a) {\n        return (a * PI) / 180;\n    },\n\n    toColor16(num) {\n        return `#${num.toString(16)}`;\n    },\n\n    randomColor() {\n        return (\n            \"#\" +\n            (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).slice(\n                -6\n            )\n        );\n    }\n};\n\nexport default MathUtil;\n","import Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Span {\n  constructor(a, b, center) {\n    if (Util.isArray(a)) {\n      this.isArray = true;\n      this.a = a;\n    } else {\n      this.isArray = false;\n      this.a = Util.initValue(a, 1);\n      this.b = Util.initValue(b, this.a);\n      this.center = Util.initValue(center, false);\n    }\n  }\n\n  getValue(isInt = false) {\n    if (this.isArray) {\n      return Util.getRandFromArray(this.a);\n    } else {\n      if (!this.center) {\n        return MathUtil.randomAToB(this.a, this.b, isInt);\n      } else {\n        return MathUtil.randomFloating(this.a, this.b, isInt);\n      }\n    }\n  }\n\n  /**\n   * Returns a new Span object\n   *\n   * @memberof Proton#Proton.Util\n   * @method setSpanValue\n   *\n   * @todo a, b and c should be 'Mixed' or 'Number'?\n   *\n   * @param {Mixed | Span} a\n   * @param {Mixed}               b\n   * @param {Mixed}               c\n   *\n   * @return {Span}\n   */\n  static setSpanValue(a, b, c) {\n    if (a instanceof Span) {\n      return a;\n    } else {\n      if (b === undefined) {\n        return new Span(a);\n      } else {\n        if (c === undefined) return new Span(a, b);\n        else return new Span(a, b, c);\n      }\n    }\n  }\n\n  /**\n   * Returns the value from a Span, if the param is not a Span it will return the given parameter\n   *\n   * @memberof Proton#Proton.Util\n   * @method getValue\n   *\n   * @param {Mixed | Span} pan\n   *\n   * @return {Mixed} the value of Span OR the parameter if it is not a Span\n   */\n  static getSpanValue(pan) {\n    return pan instanceof Span ? pan.getValue() : pan;\n  }\n}\n","export default {\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method ipot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Boolean}\n   */\n  ipot(length) {\n    return (length & (length - 1)) === 0;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method nhpot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Number}\n   */\n  nhpot(length) {\n    --length;\n    for (let i = 1; i < 32; i <<= 1) {\n      length = length | (length >> i);\n    }\n\n    return length + 1;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeTranslation\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} tx either 0 or 1\n   * @param {Number} ty either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeTranslation(tx, ty) {\n    return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeRotation\n   *\n   * @todo add description\n   * @todo add return description\n   *\n   * @param {Number} angleInRadians\n   *\n   * @return {Object}\n   */\n  makeRotation(angleInRadians) {\n    let c = Math.cos(angleInRadians);\n    let s = Math.sin(angleInRadians);\n\n    return [c, -s, 0, s, c, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeScale\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} sx either 0 or 1\n   * @param {Number} sy either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeScale(sx, sy) {\n    return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method matrixMultiply\n   *\n   * @todo add description\n   * @todo add a, b description\n   * @todo add return description\n   *\n   * @param {Object} a\n   * @param {Object} b\n   *\n   * @return {Object}\n   */\n  matrixMultiply(a, b) {\n    let a00 = a[0 * 3 + 0];\n    let a01 = a[0 * 3 + 1];\n    let a02 = a[0 * 3 + 2];\n    let a10 = a[1 * 3 + 0];\n    let a11 = a[1 * 3 + 1];\n    let a12 = a[1 * 3 + 2];\n    let a20 = a[2 * 3 + 0];\n    let a21 = a[2 * 3 + 1];\n    let a22 = a[2 * 3 + 2];\n    let b00 = b[0 * 3 + 0];\n    let b01 = b[0 * 3 + 1];\n    let b02 = b[0 * 3 + 2];\n    let b10 = b[1 * 3 + 0];\n    let b11 = b[1 * 3 + 1];\n    let b12 = b[1 * 3 + 2];\n    let b20 = b[2 * 3 + 0];\n    let b21 = b[2 * 3 + 1];\n    let b22 = b[2 * 3 + 2];\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22\n    ];\n  }\n};\n","export default {\n  /**\n   * Creates and returns a new canvas. The opacity is by default set to 0\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method createCanvas\n   *\n   * @param {String} $id the canvas' id\n   * @param {Number} $width the canvas' width\n   * @param {Number} $height the canvas' height\n   * @param {String} [$position=absolute] the canvas' position, default is 'absolute'\n   *\n   * @return {Object}\n   */\n  createCanvas(id, width, height, position = \"absolute\") {\n    const dom = document.createElement(\"canvas\");\n\n    dom.id = id;\n    dom.width = width;\n    dom.height = height;\n    dom.style.opacity = 0;\n    dom.style.position = position;\n    this.transform(dom, -500, -500, 0, 0);\n\n    return dom;\n  },\n\n  createDiv(id, width, height) {\n    const dom = document.createElement(\"div\");\n\n    dom.id = id;\n    dom.style.position = \"absolute\";\n    this.resize(dom, width, height);\n\n    return dom;\n  },\n\n  resize(dom, width, height) {\n    dom.style.width = width + \"px\";\n    dom.style.height = height + \"px\";\n    dom.style.marginLeft = -width / 2 + \"px\";\n    dom.style.marginTop = -height / 2 + \"px\";\n  },\n\n  /**\n   * Adds a transform: translate(), scale(), rotate() to a given div dom for all browsers\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method transform\n   *\n   * @param {HTMLDivElement} div\n   * @param {Number} $x\n   * @param {Number} $y\n   * @param {Number} $scale\n   * @param {Number} $rotate\n   */\n  transform(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"transform\", transform);\n  },\n\n  transform3d(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate3d(${x}px, ${y}px, 0) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"backfaceVisibility\", \"hidden\");\n    this.css3(div, \"transform\", transform);\n  },\n\n  css3(div, key, val) {\n    const bkey = key.charAt(0).toUpperCase() + key.substr(1);\n\n    div.style[`Webkit${bkey}`] = val;\n    div.style[`Moz${bkey}`] = val;\n    div.style[`O${bkey}`] = val;\n    div.style[`ms${bkey}`] = val;\n    div.style[`${key}`] = val;\n  }\n};\n","import WebGLUtil from \"./WebGLUtil\";\nimport DomUtil from \"./DomUtil\";\n\nconst imgsCache = {};\nconst canvasCache = {};\nlet canvasId = 0;\n\nexport default {\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    context.drawImage(image, rect.x, rect.y);\n    const imagedata = context.getImageData(\n      rect.x,\n      rect.y,\n      rect.width,\n      rect.height\n    );\n    context.clearRect(rect.x, rect.y, rect.width, rect.height);\n\n    return imagedata;\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method getImgFromCache\n   *\n   * @todo add description\n   * @todo describe func\n   *\n   * @param {Mixed}               img\n   * @param {Proton.Particle}     particle\n   * @param {Boolean}             drawCanvas  set to true if a canvas should be saved into particle.data.canvas\n   * @param {Boolean}             func\n   */\n  getImgFromCache(img, callback, param) {\n    const src = typeof img === \"string\" ? img : img.src;\n\n    if (imgsCache[src]) {\n      callback(imgsCache[src], param);\n    } else {\n      const image = new Image();\n      image.onload = e => {\n        imgsCache[src] = e.target;\n        callback(imgsCache[src], param);\n      };\n\n      image.src = src;\n    }\n  },\n\n  getCanvasFromCache(img, callback, param) {\n    const src = img.src;\n\n    if (!canvasCache[src]) {\n      const width = WebGLUtil.nhpot(img.width);\n      const height = WebGLUtil.nhpot(img.height);\n\n      const canvas = DomUtil.createCanvas(\n        `proton_canvas_cache_${++canvasId}`,\n        width,\n        height\n      );\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(img, 0, 0, img.width, img.height);\n\n      canvasCache[src] = canvas;\n    }\n\n    callback && callback(canvasCache[src], param);\n\n    return canvasCache[src];\n  }\n};\n","import Span from \"../math/Span\";\nimport ImgUtil from \"./ImgUtil\";\n\nexport default {\n  /**\n   * Returns the default if the value is null or undefined\n   *\n   * @memberof Proton#Proton.Util\n   * @method initValue\n   *\n   * @param {Mixed} value a specific value, could be everything but null or undefined\n   * @param {Mixed} defaults the default if the value is null or undefined\n   */\n  initValue(value, defaults) {\n    value = value !== null && value !== undefined ? value : defaults;\n    return value;\n  },\n\n  /**\n   * Checks if the value is a valid array\n   *\n   * @memberof Proton#Proton.Util\n   * @method isArray\n   *\n   * @param {Array} value Any array\n   *\n   * @returns {Boolean}\n   */\n  isArray(value) {\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n  },\n\n  /**\n   * Destroyes the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyArray\n   *\n   * @param {Array} array Any array\n   */\n  emptyArray(arr) {\n    if (arr) arr.length = 0;\n  },\n\n  toArray(arr) {\n    return this.isArray(arr) ? arr : [arr];\n  },\n\n  getRandFromArray(arr) {\n    if (!arr) return null;\n    return arr[Math.floor(arr.length * Math.random())];\n  },\n\n  /**\n   * Destroyes the given object\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyObject\n   *\n   * @param {Object} obj Any object\n   */\n  emptyObject(obj, ignore = null) {\n    for (let key in obj) {\n      if (ignore && ignore.indexOf(key) > -1) continue;\n      delete obj[key];\n    }\n  },\n\n  /**\n   * Makes an instance of a class and binds the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method classApply\n   *\n   * @param {Function} constructor A class to make an instance from\n   * @param {Array} [args] Any array to bind it to the constructor\n   *\n   * @return {Object} The instance of constructor, optionally bind with args\n   */\n  classApply(constructor, args = null) {\n    if (!args) {\n      return new constructor();\n    } else {\n      const FactoryFunc = constructor.bind.apply(\n        constructor,\n        [null].concat(args)\n      );\n      return new FactoryFunc();\n    }\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method setVectorVal\n   *\n   * @todo add description for param `target`\n   * @todo add description for param `conf`\n   * @todo add description for function\n   *\n   * @param {Object} target\n   * @param {Object} conf\n   */\n  setVectorVal(particle, conf = null) {\n    if (!conf) return;\n\n    if (this.hasProp(conf, \"x\")) particle.p.x = conf[\"x\"];\n    if (this.hasProp(conf, \"y\")) particle.p.y = conf[\"y\"];\n\n    if (this.hasProp(conf, \"vx\")) particle.v.x = conf[\"vx\"];\n    if (this.hasProp(conf, \"vy\")) particle.v.y = conf[\"vy\"];\n\n    if (this.hasProp(conf, \"ax\")) particle.a.x = conf[\"ax\"];\n    if (this.hasProp(conf, \"ay\")) particle.a.y = conf[\"ay\"];\n\n    if (this.hasProp(conf, \"p\")) particle.p.copy(conf[\"p\"]);\n    if (this.hasProp(conf, \"v\")) particle.v.copy(conf[\"v\"]);\n    if (this.hasProp(conf, \"a\")) particle.a.copy(conf[\"a\"]);\n\n    if (this.hasProp(conf, \"position\")) particle.p.copy(conf[\"position\"]);\n    if (this.hasProp(conf, \"velocity\")) particle.v.copy(conf[\"velocity\"]);\n    if (this.hasProp(conf, \"accelerate\")) particle.a.copy(conf[\"accelerate\"]);\n  },\n\n  hasProp(target, key) {\n    if (!target) return false;\n    return target[key] !== undefined;\n    // return obj.hasOwnProperty(key);\n  },\n\n  /**\n   * set the prototype in a given prototypeObject\n   *\n   * @memberof Proton#Proton.Util\n   * @method setProp\n   *\n   * @todo add description for param `target`\n   * @todo translate desription from chinese to english\n   *\n   * @param {Object} target\n   * @param {Object} prototypeObject An object of single prototypes\n   *\n   * @return {Object} target\n   */\n  setProp(target, props) {\n    for (let prop in props) {\n      if (target.hasOwnProperty(prop)) {\n        target[prop] = Span.getSpanValue(props[prop]);\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    return ImgUtil.getImageData(context, image, rect);\n  },\n\n  destroyAll(arr, param = null) {\n    let i = arr.length;\n\n    while (i--) {\n      try {\n        arr[i].destroy(param);\n      } catch (e) {}\n\n      delete arr[i];\n    }\n\n    arr.length = 0;\n  }\n};\n","const idsMap = {};\n\nconst Puid = {\n  _index: 0,\n  _cache: {},\n\n  id(type) {\n    if (idsMap[type] === undefined || idsMap[type] === null) idsMap[type] = 0;\n    return `${type}_${idsMap[type]++}`;\n  },\n\n  getId(target) {\n    let uid = this.getIdFromCache(target);\n    if (uid) return uid;\n\n    uid = `PUID_${this._index++}`;\n    this._cache[uid] = target;\n\n    return uid;\n  },\n\n  getIdFromCache(target) {\n    let obj, id;\n\n    for (id in this._cache) {\n      obj = this._cache[id];\n\n      if (obj === target) return id;\n      if (this.isBody(obj, target) && obj.src === target.src) return id;\n    }\n\n    return null;\n  },\n\n  isBody(obj, target) {\n    return (\n      typeof obj === \"object\" &&\n      typeof target === \"object\" &&\n      obj.isInner &&\n      target.isInner\n    );\n  },\n\n  getTarget(uid) {\n    return this._cache[uid];\n  }\n};\n\nexport default Puid;\n","/**\n * Pool is the cache pool of the proton engine, it is very important.\n *\n * get(target, params, uid)\n *  Class\n *    uid = Puid.getId -> Puid save target cache\n *    target.__puid = uid\n *\n *  body\n *    uid = Puid.getId -> Puid save target cache\n *\n *\n * expire(target)\n *  cache[target.__puid] push target\n *\n */\nimport Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\n\nexport default class Pool {\n  /**\n   * @memberof! Proton#\n   * @constructor\n   * @alias Proton.Pool\n   *\n   * @todo add description\n   * @todo add description of properties\n   *\n   * @property {Number} total\n   * @property {Object} cache\n   */\n  constructor(num) {\n    this.total = 0;\n    this.cache = {};\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method get\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  get(target, params, uid) {\n    let p;\n    uid = uid || target.__puid || Puid.getId(target);\n\n    if (this.cache[uid] && this.cache[uid].length > 0) {\n      p = this.cache[uid].pop();\n    } else {\n      p = this.createOrClone(target, params);\n    }\n\n    p.__puid = target.__puid || uid;\n    return p;\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method set\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object} target\n   *\n   * @return {Object}\n   */\n  expire(target) {\n    return this.getCache(target.__puid).push(target);\n  }\n\n  /**\n   * Creates a new class instance\n   *\n   * @todo add more documentation\n   *\n   * @method create\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target any Object or Function\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  createOrClone(target, params) {\n    this.total++;\n\n    if (this.create) {\n      return this.create(target, params);\n    } else if (typeof target === \"function\") {\n      return Util.classApply(target, params);\n    } else {\n      return target.clone();\n    }\n  }\n\n  /**\n   * @todo add description - what is in the cache?\n   *\n   * @method getCount\n   * @memberof Proton#Proton.Pool\n   *\n   * @return {Number}\n   */\n  getCount() {\n    let count = 0;\n    for (let id in this.cache) count += this.cache[id].length;\n    return count++;\n  }\n\n  /**\n   * Destroyes all items from Pool.cache\n   *\n   * @method destroy\n   * @memberof Proton#Proton.Pool\n   */\n  destroy() {\n    for (let id in this.cache) {\n      this.cache[id].length = 0;\n      delete this.cache[id];\n    }\n  }\n\n  /**\n   * Returns Pool.cache\n   *\n   * @method getCache\n   * @memberof Proton#Proton.Pool\n   * @private\n   *\n   * @param {Number} uid the unique id\n   *\n   * @return {Object}\n   */\n  getCache(uid = \"default\") {\n    if (!this.cache[uid]) this.cache[uid] = [];\n    return this.cache[uid];\n  }\n}\n","export default class Stats {\n  constructor(proton) {\n    this.proton = proton;\n    this.container = null;\n    this.type = 1;\n\n    this.emitterIndex = 0;\n    this.rendererIndex = 0;\n  }\n\n  update(style, body) {\n    this.add(style, body);\n\n    const emitter = this.getEmitter();\n    const renderer = this.getRenderer();\n    let str = \"\";\n\n    switch (this.type) {\n      case 2:\n        str += \"emitter:\" + this.proton.emitters.length + \"<br>\";\n        if (emitter) str += \"em speed:\" + emitter.emitSpeed + \"<br>\";\n        if (emitter) str += \"pos:\" + this.getEmitterPos(emitter);\n        break;\n\n      case 3:\n        if (emitter)\n          str += \"initializes:\" + emitter.initializes.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.initializes) +\n            \"</span><br>\";\n        if (emitter) str += \"behaviours:\" + emitter.behaviours.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.behaviours) +\n            \"</span><br>\";\n        break;\n\n      case 4:\n        if (renderer) str += renderer.name + \"<br>\";\n        if (renderer) str += \"body:\" + this.getCreatedNumber(renderer) + \"<br>\";\n        break;\n\n      default:\n        str += \"particles:\" + this.proton.getCount() + \"<br>\";\n        str += \"pool:\" + this.proton.pool.getCount() + \"<br>\";\n        str += \"total:\" + this.proton.pool.total;\n    }\n\n    this.container.innerHTML = str;\n  }\n\n  add(style, body) {\n    if (!this.container) {\n      this.type = 1;\n\n      this.container = document.createElement(\"div\");\n      this.container.style.cssText = [\n        \"position:absolute;bottom:0px;left:0;cursor:pointer;\",\n        \"opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;\",\n        \"width:120px;height:50px;background-color:#002;color:#0ff;\"\n      ].join(\"\");\n\n      this.container.addEventListener(\n        \"click\",\n        e => {\n          this.type++;\n          if (this.type > 4) this.type = 1;\n        },\n        false\n      );\n\n      let bg, color;\n      switch (style) {\n        case 2:\n          bg = \"#201\";\n          color = \"#f08\";\n          break;\n\n        case 3:\n          bg = \"#020\";\n          color = \"#0f0\";\n          break;\n\n        default:\n          bg = \"#002\";\n          color = \"#0ff\";\n      }\n\n      this.container.style[\"background-color\"] = bg;\n      this.container.style[\"color\"] = color;\n    }\n\n    if (!this.container.parentNode) {\n      body = body || this.body || document.body;\n      body.appendChild(this.container);\n    }\n  }\n\n  getEmitter() {\n    return this.proton.emitters[this.emitterIndex];\n  }\n\n  getRenderer() {\n    return this.proton.renderers[this.rendererIndex];\n  }\n\n  concatArr(arr) {\n    let result = \"\";\n    if (!arr || !arr.length) return result;\n\n    for (let i = 0; i < arr.length; i++) {\n      result += (arr[i].name || \"\").substr(0, 1) + \".\";\n    }\n\n    return result;\n  }\n\n  getCreatedNumber(renderer) {\n    return renderer.pool.total || (renderer.cpool && renderer.cpool.total) || 0;\n  }\n\n  getEmitterPos(e) {\n    return Math.round(e.p.x) + \",\" + Math.round(e.p.y);\n  }\n}\n","/*\n * EventDispatcher\n * This code reference since http://createjs.com/.\n *\n **/\n\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = null;\n  }\n\n  static bind(target) {\n    target.prototype.dispatchEvent = EventDispatcher.prototype.dispatchEvent;\n\n    target.prototype.hasEventListener =\n      EventDispatcher.prototype.hasEventListener;\n\n    target.prototype.addEventListener =\n      EventDispatcher.prototype.addEventListener;\n\n    target.prototype.removeEventListener =\n      EventDispatcher.prototype.removeEventListener;\n\n    target.prototype.removeAllEventListeners =\n      EventDispatcher.prototype.removeAllEventListeners;\n  }\n\n  addEventListener(type, listener) {\n    if (!this._listeners) {\n      this._listeners = {};\n    } else {\n      this.removeEventListener(type, listener);\n    }\n\n    if (!this._listeners[type]) this._listeners[type] = [];\n    this._listeners[type].push(listener);\n\n    return listener;\n  }\n\n  removeEventListener(type, listener) {\n    if (!this._listeners) return;\n    if (!this._listeners[type]) return;\n\n    const arr = this._listeners[type];\n    const length = arr.length;\n\n    for (let i = 0; i < length; i++) {\n      if (arr[i] === listener) {\n        if (length === 1) {\n          delete this._listeners[type];\n        }\n\n        // allows for faster checks.\n        else {\n          arr.splice(i, 1);\n        }\n\n        break;\n      }\n    }\n  }\n\n  removeAllEventListeners(type) {\n    if (!type) this._listeners = null;\n    else if (this._listeners) delete this._listeners[type];\n  }\n\n  dispatchEvent(type, args) {\n    let result = false;\n    const listeners = this._listeners;\n\n    if (type && listeners) {\n      let arr = listeners[type];\n      if (!arr) return result;\n\n      // arr = arr.slice();\n      // to avoid issues with items being removed or added during the dispatch\n\n      let handler;\n      let i = arr.length;\n      while (i--) {\n        handler = arr[i];\n        result = result || handler(args);\n      }\n    }\n\n    return !!result;\n  }\n\n  hasEventListener(type) {\n    const listeners = this._listeners;\n    return !!(listeners && listeners[type]);\n  }\n}\n","export default class Integration {\n  constructor(type) {\n    this.type = type;\n  }\n\n  calculate(particles, time, damping) {\n    this.eulerIntegrate(particles, time, damping);\n  }\n\n  // Euler Integrate\n  // https://rosettacode.org/wiki/Euler_method\n  eulerIntegrate(particle, time, damping) {\n    if (!particle.sleep) {\n      particle.old.p.copy(particle.p);\n      particle.old.v.copy(particle.v);\n\n      particle.a.multiplyScalar(1 / particle.mass);\n      particle.v.add(particle.a.multiplyScalar(time));\n      particle.p.add(particle.old.v.multiplyScalar(time));\n\n      if (damping) particle.v.multiplyScalar(damping);\n\n      particle.a.clear();\n    }\n  }\n}\n","import Pool from \"./Pool\";\nimport Util from \"../utils/Util\";\nimport Stats from \"../debug/Stats\";\nimport EventDispatcher from \"../events/EventDispatcher\";\nimport Integration from \"../math/Integration\";\n\nexport default class Proton {\n  static USE_CLOCK = false;\n\n  // 1:100\n  static MEASURE = 100;\n  static EULER = \"euler\";\n  static RK2 = \"runge-kutta2\";\n\n  static PARTICLE_CREATED = \"PARTICLE_CREATED\";\n  static PARTICLE_UPDATE = \"PARTICLE_UPDATE\";\n  static PARTICLE_SLEEP = \"PARTICLE_SLEEP\";\n  static PARTICLE_DEAD = \"PARTICLE_DEAD\";\n  static PROTON_UPDATE = \"PROTON_UPDATE\";\n  static PROTON_UPDATE_AFTER = \"PROTON_UPDATE_AFTER\";\n  static EMITTER_ADDED = \"EMITTER_ADDED\";\n  static EMITTER_REMOVED = \"EMITTER_REMOVED\";\n\n  static amendChangeTabsBug = true;\n\n  /**\n   * The constructor to add emitters\n   *\n   * @constructor Proton\n   *\n   * @todo proParticleCount is not in use\n   * @todo add more documentation of the single properties and parameters\n   *\n   * @param {Number} [proParticleCount] not in use?\n   * @param {Number} [integrationType=Proton.EULER]\n   *\n   * @property {String} [integrationType=Proton.EULER]\n   * @property {Array} emitters   All added emitter\n   * @property {Array} renderers  All added renderer\n   * @property {Number} time      The active time\n   * @property {Number} oldtime   The old time\n   */\n  constructor(integrationType) {\n    this.emitters = [];\n    this.renderers = [];\n\n    this.time = 0;\n    this.oldTime = 0;\n    this.elapsed = 0;\n\n    this.stats = new Stats(this);\n    this.pool = new Pool(80);\n\n    this.integrationType = Util.initValue(integrationType, Proton.EULER);\n    this.integrator = new Integration(this.integrationType);\n  }\n\n  /**\n   * add a type of Renderer\n   *\n   * @method addRenderer\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Renderer} render\n   */\n  addRenderer(render) {\n    render.init(this);\n    this.renderers.push(render);\n  }\n\n  /**\n   * @name add a type of Renderer\n   *\n   * @method addRenderer\n   * @param {Renderer} render\n   */\n  removeRenderer(render) {\n    const index = this.renderers.indexOf(render);\n    this.renderers.splice(index, 1);\n    render.remove(this);\n  }\n\n  /**\n   * add the Emitter\n   *\n   * @method addEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Emitter} emitter\n   */\n  addEmitter(emitter) {\n    this.emitters.push(emitter);\n    emitter.parent = this;\n\n    this.dispatchEvent(Proton.EMITTER_ADDED, emitter);\n  }\n\n  /**\n   * Removes an Emitter\n   *\n   * @method removeEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Proton.Emitter} emitter\n   */\n  removeEmitter(emitter) {\n    const index = this.emitters.indexOf(emitter);\n    this.emitters.splice(index, 1);\n    emitter.parent = null;\n\n    this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);\n  }\n\n  /**\n   * Updates all added emitters\n   *\n   * @method update\n   * @memberof Proton\n   * @instance\n   */\n  update() {\n    this.dispatchEvent(Proton.PROTON_UPDATE);\n\n    if (Proton.USE_CLOCK) {\n      if (!this.oldTime) this.oldTime = new Date().getTime();\n\n      let time = new Date().getTime();\n      this.elapsed = (time - this.oldTime) / 1000;\n      Proton.amendChangeTabsBug && this.amendChangeTabsBug();\n\n      this.oldTime = time;\n    } else {\n      this.elapsed = 0.0167;\n    }\n\n    // emitter update\n    if (this.elapsed > 0) this.emittersUpdate(this.elapsed);\n\n    this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n  }\n\n  emittersUpdate(elapsed) {\n    let i = this.emitters.length;\n    while (i--) this.emitters[i].update(elapsed);\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method amendChangeTabsBug\n   * @memberof Proton\n   * @instance\n   */\n  amendChangeTabsBug() {\n    if (this.elapsed > 0.5) {\n      this.oldTime = new Date().getTime();\n      this.elapsed = 0;\n    }\n  }\n\n  /**\n   * Counts all particles from all emitters\n   *\n   * @method getCount\n   * @memberof Proton\n   * @instance\n   */\n  getCount() {\n    let total = 0;\n    let i = this.emitters.length;\n\n    while (i--) total += this.emitters[i].particles.length;\n    return total;\n  }\n\n  getAllParticles() {\n    let particles = [];\n    let i = this.emitters.length;\n\n    while (i--) particles = particles.concat(this.emitters[i].particles);\n    return particles;\n  }\n\n  destroyAllEmitters() {\n    Util.destroyAll(this.emitters);\n  }\n\n  /**\n   * Destroys everything related to this Proton instance. This includes all emitters, and all properties\n   *\n   * @method destroy\n   * @memberof Proton\n   * @instance\n   */\n  destroy(remove = false) {\n    const destroyOther = () => {\n      this.time = 0;\n      this.oldTime = 0;\n      this.pool.destroy();\n\n      Util.destroyAll(this.emitters);\n      Util.destroyAll(this.renderers, this.getAllParticles());\n    };\n\n    if (remove) {\n      setTimeout(destroyOther, 200);\n    } else {\n      destroyOther();\n    }\n  }\n}\n\nEventDispatcher.bind(Proton);\n","export default class Rgb {\n  constructor(r = 255, g = 255, b = 255) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  reset() {\n    this.r = 255;\n    this.g = 255;\n    this.b = 255;\n  }\n}\n","import MathUtil from \"./MathUtil\";\n\nexport default {\n  easeLinear(value) {\n    return value;\n  },\n\n  easeInQuad(value) {\n    return Math.pow(value, 2);\n  },\n\n  easeOutQuad(value) {\n    return -(Math.pow(value - 1, 2) - 1);\n  },\n\n  easeInOutQuad(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 2);\n\n    return -0.5 * ((value -= 2) * value - 2);\n  },\n\n  easeInCubic(value) {\n    return Math.pow(value, 3);\n  },\n\n  easeOutCubic(value) {\n    return Math.pow(value - 1, 3) + 1;\n  },\n\n  easeInOutCubic(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 3);\n\n    return 0.5 * (Math.pow(value - 2, 3) + 2);\n  },\n\n  easeInQuart(value) {\n    return Math.pow(value, 4);\n  },\n\n  easeOutQuart(value) {\n    return -(Math.pow(value - 1, 4) - 1);\n  },\n\n  easeInOutQuart(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 4);\n\n    return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);\n  },\n\n  easeInSine(value) {\n    return -Math.cos(value * MathUtil.PI_2) + 1;\n  },\n\n  easeOutSine(value) {\n    return Math.sin(value * MathUtil.PI_2);\n  },\n\n  easeInOutSine(value) {\n    return -0.5 * (Math.cos(Math.PI * value) - 1);\n  },\n\n  easeInExpo(value) {\n    return value === 0 ? 0 : Math.pow(2, 10 * (value - 1));\n  },\n\n  easeOutExpo(value) {\n    return value === 1 ? 1 : -Math.pow(2, -10 * value) + 1;\n  },\n\n  easeInOutExpo(value) {\n    if (value === 0) return 0;\n\n    if (value === 1) return 1;\n\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(2, 10 * (value - 1));\n\n    return 0.5 * (-Math.pow(2, -10 * --value) + 2);\n  },\n\n  easeInCirc(value) {\n    return -(Math.sqrt(1 - value * value) - 1);\n  },\n\n  easeOutCirc(value) {\n    return Math.sqrt(1 - Math.pow(value - 1, 2));\n  },\n\n  easeInOutCirc(value) {\n    if ((value /= 0.5) < 1) return -0.5 * (Math.sqrt(1 - value * value) - 1);\n    return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);\n  },\n\n  easeInBack(value) {\n    let s = 1.70158;\n    return value * value * ((s + 1) * value - s);\n  },\n\n  easeOutBack(value) {\n    let s = 1.70158;\n    return (value = value - 1) * value * ((s + 1) * value + s) + 1;\n  },\n\n  easeInOutBack(value) {\n    let s = 1.70158;\n    if ((value /= 0.5) < 1)\n      return 0.5 * (value * value * (((s *= 1.525) + 1) * value - s));\n    return 0.5 * ((value -= 2) * value * (((s *= 1.525) + 1) * value + s) + 2);\n  },\n\n  getEasing(ease) {\n    if (typeof ease === \"function\") return ease;\n    else return this[ease] || this.easeLinear;\n  }\n};\n","import MathUtil from \"../math/MathUtil\";\n\nexport default class Vector2D {\n  constructor(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  getGradient() {\n    if (this.x !== 0) return Math.atan2(this.y, this.x);\n    else if (this.y > 0) return MathUtil.PI_2;\n    else if (this.y < 0) return -MathUtil.PI_2;\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n\n    return this;\n  }\n\n  add(v, w) {\n    if (w !== undefined) {\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n\n    return this;\n  }\n\n  addXY(a, b) {\n    this.x += a;\n    this.y += b;\n\n    return this;\n  }\n\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n\n    return this;\n  }\n\n  sub(v, w) {\n    if (w !== undefined) {\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n\n    return this;\n  }\n\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n\n    return this;\n  }\n\n  divideScalar(s) {\n    if (s !== 0) {\n      this.x /= s;\n      this.y /= s;\n    } else {\n      this.set(0, 0);\n    }\n\n    return this;\n  }\n\n  multiplyScalar(s) {\n    this.x *= s;\n    this.y *= s;\n\n    return this;\n  }\n\n  negate() {\n    return this.multiplyScalar(-1);\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize() {\n    return this.divideScalar(this.length());\n  }\n\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  rotate(tha) {\n    const x = this.x;\n    const y = this.y;\n\n    this.x = x * Math.cos(tha) + y * Math.sin(tha);\n    this.y = -x * Math.sin(tha) + y * Math.cos(tha);\n\n    return this;\n  }\n\n  distanceToSquared(v) {\n    const dx = this.x - v.x;\n    const dy = this.y - v.y;\n\n    return dx * dx + dy * dy;\n  }\n\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n\n    return this;\n  }\n\n  equals(v) {\n    return v.x === this.x && v.y === this.y;\n  }\n\n  clear() {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Vector2D(this.x, this.y);\n  }\n}\n","import Rgb from \"../utils/Rgb\";\nimport Puid from \"../utils/Puid\";\nimport Util from \"../utils/Util\";\nimport ease from \"../math/ease\";\nimport Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Particle {\n  /**\n   * the Particle class\n   *\n   * @class Proton.Particle\n   * @constructor\n   * @param {Object} pObj the parameters object;\n   * for example {life:3,dead:false}\n   */\n  constructor(conf) {\n    /**\n     * The particle's id;\n     * @property id\n     * @type {string}\n     */\n    this.name = \"Particle\";\n    this.id = Puid.id(this.name);\n    this.old = {};\n    this.data = {};\n    this.behaviours = [];\n\n    this.p = new Vector2D();\n    this.v = new Vector2D();\n    this.a = new Vector2D();\n    this.old.p = new Vector2D();\n    this.old.v = new Vector2D();\n    this.old.a = new Vector2D();\n\n    this.rgb = new Rgb();\n    this.reset();\n    conf && Util.setProp(this, conf);\n  }\n\n  getDirection() {\n    return Math.atan2(this.v.x, -this.v.y) * MathUtil.N180_PI;\n  }\n\n  reset() {\n    this.life = Infinity;\n    this.age = 0;\n\n    this.dead = false;\n    this.sleep = false;\n    this.body = null;\n    this.sprite = null;\n    this.parent = null;\n\n    this.energy = 1; // Energy Loss\n    this.mass = 1;\n    this.radius = 10;\n    this.alpha = 1;\n    this.scale = 1;\n    this.rotation = 0;\n    this.color = null;\n\n    this.p.set(0, 0);\n    this.v.set(0, 0);\n    this.a.set(0, 0);\n    this.old.p.set(0, 0);\n    this.old.v.set(0, 0);\n    this.old.a.set(0, 0);\n    this.easing = ease.easeLinear;\n\n    this.rgb.reset();\n    Util.emptyObject(this.data);\n    this.removeAllBehaviours();\n\n    return this;\n  }\n\n  update(time, index) {\n    if (!this.sleep) {\n      this.age += time;\n      this.applyBehaviours(time, index);\n    }\n\n    if (this.age < this.life) {\n      const scale = this.easing(this.age / this.life);\n      this.energy = Math.max(1 - scale, 0);\n    } else {\n      this.destroy();\n    }\n  }\n\n  applyBehaviours(time, index) {\n    const length = this.behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.behaviours[i] &&\n        this.behaviours[i].applyBehaviour(this, time, index);\n    }\n  }\n\n  addBehaviour(behaviour) {\n    this.behaviours.push(behaviour);\n\n    if (behaviour.hasOwnProperty(\"parents\")) behaviour.parents.push(this);\n    behaviour.initialize(this);\n  }\n\n  addBehaviours(behaviours) {\n    const length = behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.addBehaviour(behaviours[i]);\n    }\n  }\n\n  removeBehaviour(behaviour) {\n    const index = this.behaviours.indexOf(behaviour);\n\n    if (index > -1) {\n      const behaviour = this.behaviours.splice(index, 1);\n      behaviour.parents = null;\n    }\n  }\n\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  /**\n   * Destory this particle\n   * @method destroy\n   */\n  destroy() {\n    this.removeAllBehaviours();\n    this.energy = 0;\n    this.dead = true;\n    this.parent = null;\n  }\n}\n","export default {\n  /**\n   * @typedef  {Object} rgbObject\n   * @property {Number} r red value\n   * @property {Number} g green value\n   * @property {Number} b blue value\n   */\n  /**\n   * converts a hex value to a rgb object\n   *\n   * @memberof Proton#Proton.Util\n   * @method hexToRgb\n   *\n   * @param {String} h any hex value, e.g. #000000 or 000000 for black\n   *\n   * @return {rgbObject}\n   */\n  hexToRgb(h) {\n    const hex16 = h.charAt(0) === \"#\" ? h.substring(1, 7) : h;\n    const r = parseInt(hex16.substring(0, 2), 16);\n    const g = parseInt(hex16.substring(2, 4), 16);\n    const b = parseInt(hex16.substring(4, 6), 16);\n\n    return { r, g, b };\n  },\n\n  /**\n   * converts a rgb value to a rgb string\n   *\n   * @memberof Proton#Proton.Util\n   * @method rgbToHex\n   *\n   * @param {Object | Proton.hexToRgb} rgb a rgb object like in {@link Proton#Proton.}\n   *\n   * @return {String} rgb()\n   */\n  rgbToHex(rbg) {\n    return `rgb(${rbg.r}, ${rbg.g}, ${rbg.b})`;\n  },\n\n  getHex16FromParticle(p) {\n    return Number(p.rgb.r) * 65536 + Number(p.rgb.g) * 256 + Number(p.rgb.b);\n  }\n};\n","import Vector2D from \"./Vector2D\";\n\nexport default class Polar2D {\n  constructor(r, tha) {\n    this.r = Math.abs(r) || 0;\n    this.tha = tha || 0;\n  }\n\n  set(r, tha) {\n    this.r = r;\n    this.tha = tha;\n    return this;\n  }\n\n  setR(r) {\n    this.r = r;\n    return this;\n  }\n\n  setTha(tha) {\n    this.tha = tha;\n    return this;\n  }\n\n  copy(p) {\n    this.r = p.r;\n    this.tha = p.tha;\n    return this;\n  }\n\n  toVector() {\n    return new Vector2D(this.getX(), this.getY());\n  }\n\n  getX() {\n    return this.r * Math.sin(this.tha);\n  }\n\n  getY() {\n    return -this.r * Math.cos(this.tha);\n  }\n\n  normalize() {\n    this.r = 1;\n    return this;\n  }\n\n  equals(v) {\n    return v.r === this.r && v.tha === this.tha;\n  }\n\n  clear() {\n    this.r = 0.0;\n    this.tha = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Polar2D(this.r, this.tha);\n  }\n}\n","const Mat3 = {\n  create(mat3) {\n    const mat = new Float32Array(9);\n    if (mat3) this.set(mat3, mat);\n\n    return mat;\n  },\n\n  set(mat1, mat2) {\n    for (let i = 0; i < 9; i++) mat2[i] = mat1[i];\n\n    return mat2;\n  },\n\n  multiply(mat, mat2, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a02 = mat[2],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b00 = mat2[0],\n      b01 = mat2[1],\n      b02 = mat2[2],\n      b10 = mat2[3],\n      b11 = mat2[4],\n      b20 = mat2[6],\n      b21 = mat2[7];\n\n    mat3[0] = b00 * a00 + b01 * a10;\n    mat3[1] = b00 * a01 + b01 * a11;\n    mat3[2] = a02 * b02;\n    mat3[3] = b10 * a00 + b11 * a10;\n    mat3[4] = b10 * a01 + b11 * a11;\n    mat3[6] = b20 * a00 + b21 * a10 + a20;\n    mat3[7] = b20 * a01 + b21 * a11 + a21;\n\n    return mat3;\n  },\n\n  inverse(mat, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b01 = a11,\n      b11 = -a10,\n      b21 = a21 * a10 - a11 * a20,\n      d = a00 * b01 + a01 * b11,\n      id;\n\n    id = 1 / d;\n    mat3[0] = b01 * id;\n    mat3[1] = -a01 * id;\n    mat3[3] = b11 * id;\n    mat3[4] = a00 * id;\n    mat3[6] = b21 * id;\n    mat3[7] = (-a21 * a00 + a01 * a20) * id;\n\n    return mat3;\n  },\n\n  multiplyVec2(m, vec, mat3) {\n    let x = vec[0],\n      y = vec[1];\n\n    mat3[0] = x * m[0] + y * m[3] + m[6];\n    mat3[1] = x * m[1] + y * m[4] + m[7];\n\n    return mat3;\n  }\n};\n\nexport default Mat3;\n","import Span from \"./Span\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"./MathUtil\";\n\nexport default class ArraySpan extends Span {\n  constructor(color) {\n    super();\n    this._arr = Util.toArray(color);\n  }\n\n  getValue() {\n    const val = Util.getRandFromArray(this._arr);\n    return val === \"random\" || val === \"Random\" ? MathUtil.randomColor() : val;\n  }\n\n  /**\n   * Make sure that the color is an instance of Proton.ArraySpan, if not it makes a new instance\n   *\n   * @method setSpanValue\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  static createArraySpan(arr) {\n    if (!arr) return null;\n\n    if (arr instanceof ArraySpan) return arr;\n    else return new ArraySpan(arr);\n  }\n}\n","export default class Rectangle {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n\n    this.width = w;\n    this.height = h;\n\n    this.bottom = this.y + this.height;\n    this.right = this.x + this.width;\n  }\n\n  contains(x, y) {\n    if (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)\n      return true;\n    else return false;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\n\nexport default class Rate {\n  /**\n   * The number of particles per second emission (a [particle]/b [s]);\n   * @namespace\n   * @memberof! Proton#\n   * @constructor\n   * @alias Rate\n   *\n   * @param {Array | Number | Span} numpan the number of each emission;\n   * @param {Array | Number | Span} timepan the time of each emission;\n   * for example: new Rate(new Span(10, 20), new Span(.1, .25));\n   */\n  constructor(numpan, timepan) {\n    this.numPan = Span.setSpanValue(Util.initValue(numpan, 1));\n    this.timePan = Span.setSpanValue(Util.initValue(timepan, 1));\n\n    this.startTime = 0;\n    this.nextTime = 0;\n    this.init();\n  }\n\n  init() {\n    this.startTime = 0;\n    this.nextTime = this.timePan.getValue();\n  }\n\n  getValue(time) {\n    this.startTime += time;\n\n    if (this.startTime >= this.nextTime) {\n      this.startTime = 0;\n      this.nextTime = this.timePan.getValue();\n\n      if (this.numPan.b === 1) {\n        if (this.numPan.getValue(false) > 0.5) return 1;\n        else return 0;\n      } else {\n        return this.numPan.getValue(true);\n      }\n    }\n\n    return 0;\n  }\n}\n","export default class Initialize {\n  reset() {}\n\n  init(emitter, particle) {\n    if (particle) {\n      this.initialize(particle);\n    } else {\n      this.initialize(emitter);\n    }\n  }\n\n  // sub class init\n  initialize(target) {}\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Life extends Initialize {\n  constructor(a, b, c) {\n    super();\n\n    this.lifePan = Span.setSpanValue(a, b, c);\n    this.name = \"Life\";\n  }\n\n  initialize(target) {\n    if (this.lifePan.a === Infinity) target.life = Infinity;\n    else target.life = this.lifePan.getValue();\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\n\nexport default class Zone {\n  constructor() {\n    this.vector = new Vector2D(0, 0);\n    this.random = 0;\n    this.crossType = \"dead\";\n    this.alert = true;\n  }\n\n  getPosition() {}\n\n  crossing(particle) {}\n}\n","import Zone from \"./Zone\";\n\nexport default class PointZone extends Zone {\n  constructor(x, y) {\n    super();\n\n    this.x = x;\n    this.y = y;\n  }\n\n  getPosition() {\n    this.vector.x = this.x;\n    this.vector.y = this.y;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    if (this.alert) {\n      console.error(\"Sorry, PointZone does not support crossing method!\");\n      this.alert = false;\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport PointZone from \"../zone/PointZone\";\nimport Initialize from \"./Initialize\";\n\nexport default class Position extends Initialize {\n  constructor(zone) {\n    super();\n    this.zone = Util.initValue(zone, new PointZone());\n    this.name = \"Position\";\n  }\n\n  reset(zone) {\n    this.zone = Util.initValue(zone, new PointZone());\n  }\n\n  initialize(target) {\n    this.zone.getPosition();\n\t\n    target.p.x = this.zone.vector.x;\n    target.p.y = this.zone.vector.y;\n  }\n}\n","import Proton from \"../core/Proton\";\nimport Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport Polar2D from \"../math/Polar2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Velocity extends Initialize {\n  constructor(rpan, thapan, type) {\n    super();\n\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n\n    this.name = \"Velocity\";\n  }\n\n  reset(rpan, thapan, type) {\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n  }\n\n  normalizeVelocity(vr) {\n    return vr * Proton.MEASURE;\n  }\n\n  initialize(target) {\n    if (this.type === \"p\" || this.type === \"P\" || this.type === \"polar\") {\n      const polar2d = new Polar2D(\n        this.normalizeVelocity(this.rPan.getValue()),\n        this.thaPan.getValue() * MathUtil.PI_180\n      );\n\n      target.v.x = polar2d.getX();\n      target.v.y = polar2d.getY();\n    } else {\n      target.v.x = this.normalizeVelocity(this.rPan.getValue());\n      target.v.y = this.normalizeVelocity(this.thaPan.getValue());\n    }\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Mass extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.massPan = Span.setSpanValue(a, b, c);\n    this.name = \"Mass\";\n  }\n\n  initialize(target) {\n    target.mass = this.massPan.getValue();\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Radius extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.radius = Span.setSpanValue(a, b, c);\n\n    this.name = \"Radius\";\n  }\n\n  reset(a, b, c) {\n    this.radius = Span.setSpanValue(a, b, c);\n  }\n\n  initialize(particle) {\n    particle.radius = this.radius.getValue();\n    particle.data.oldRadius = particle.radius;\n  }\n}\n","import Util from \"../utils/Util\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Initialize from \"./Initialize\";\n\nexport default class Body extends Initialize {\n  constructor(image, w, h) {\n    super();\n\n    this.image = this.setSpanValue(image);\n    this.w = Util.initValue(w, 20);\n    this.h = Util.initValue(h, this.w);\n    this.name = \"Body\";\n  }\n\n  initialize(particle) {\n    const imageTarget = this.image.getValue();\n\n    if (typeof imageTarget === \"string\") {\n      particle.body = {\n        width: this.w,\n        height: this.h,\n        src: imageTarget,\n        isInner: true,\n        inner: true\n      };\n    } else {\n      particle.body = imageTarget;\n    }\n  }\n\n  setSpanValue(image) {\n    return image instanceof ArraySpan ? image : new ArraySpan(image);\n  }\n}\n","import Proton from '../core/Proton';\nimport Util from '../utils/Util';\nimport ease from '../math/ease';\n\nexport default class Behaviour {\n    static id = 0;\n\n    /**\n     * The Behaviour class is the base for the other Behaviour\n     *\n     * @memberof! -\n     * @interface\n     * @alias Proton.Behaviour\n     *\n     * @param {Number} life \tthe behaviours life\n     * @param {String} easing \tThe behaviour's decaying trend, for example ease.easeOutQuart\n     *\n     * @property {String}  id \t\tThe behaviours id\n     * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n     * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n     * @property {Number}  age=0 \tHow long the particle should be 'alife'\n     * @property {Number}  energy=1\n     * @property {Boolean} dead=false The particle is dead at first\n     * @property {Array}   parents \tThe behaviour's parents array\n     * @property {String}  name \tThe behaviour name\n     */\n    constructor(life, easing) {\n\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n\n        this.age = 0;\n        this.energy = 1;\n        this.dead = false;\n        this.parents = [];\n\n        this.id = `Behaviour_${Behaviour.id++}`;\n        this.name = 'Behaviour';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} [life=Infinity] \t\tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     */\n    reset(life, easing) {\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n    }\n\n    /**\n     * Normalize a force by 1:100;\n     *\n     * @method normalizeForce\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Vector2D} force\n     */\n    normalizeForce(force) {\n        return force.multiplyScalar(Proton.MEASURE);\n    }\n\n    /**\n     * Normalize a value by 1:100;\n     *\n     * @method normalizeValue\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} value\n     */\n    normalizeValue(value) {\n        return value * Proton.MEASURE;\n    }\n\n    /**\n     * Initialize the behaviour's parameters for all particles\n     *\n     * @method initialize\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     */\n    initialize(particle) {}\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} \t\t\ttime the integrate time 1/ms\n     * @param {Int} \t\t\tindex the particle index\n     */\n    calculate(particle, time, index) {\n        this.age += time;\n\n        if (this.age >= this.life || this.dead) {\n            this.energy = 0;\n            this.dead = true;\n            this.destroy();\n        } else {\n            const scale = this.easing(particle.age / particle.life);\n            this.energy = Math.max(1 - scale, 0);\n        }\n    }\n\n    /**\n     * Destory this behaviour\n     *\n     * @method destroy\n     * @memberof Proton.Behaviour\n     * @instance\n     */\n    destroy() {\n        let i = this.parents.length;\n        while (i--) {\n            this.parents[i].removeBehaviour(this);\n        }\n\n        this.parents.length = 0;\n    }\n}\n","import Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Force extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Force\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(fx, fy, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\t\tthis.name = 'Force';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(fx, fy, life, easing) {\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.a.add(this.force);\n\t}\n}","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Attraction extends Behaviour {\n\n\t/**\n\t * This behaviour let the particles follow one specific Proton.Vector2D\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Attraction\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Proton.Vector2D} targetPosition\n\t * @property {Number} radius\n\t * @property {Number} force\n\t * @property {Number} radiusSq\n\t * @property {Proton.Vector2D} attractionForce\n\t * @property {Number} lengthSq\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.targetPosition = Util.initValue(targetPosition, new Vector2D);\n\t\tthis.radius = Util.initValue(radius, 1000);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.radiusSq = this.radius * this.radius\n\t\tthis.attractionForce = new Vector2D();\n\t\tthis.lengthSq = 0;\n\n\t\tthis.name = 'Attraction';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Attraction\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tthis.targetPosition = Util.initValue(targetPosition, new Vector2D);\n\t\tthis.radius = Util.initValue(radius, 1000);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.radiusSq = this.radius * this.radius\n\t\tthis.attractionForce = new Vector2D();\n\t\tthis.lengthSq = 0;\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Attraction\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tthis.attractionForce.copy(this.targetPosition);\n\t\tthis.attractionForce.sub(particle.p);\n\t\tthis.lengthSq = this.attractionForce.lengthSq();\n\n\t\tif (this.lengthSq > 0.000004 && this.lengthSq < this.radiusSq) {\n\t\t\tthis.attractionForce.normalize();\n\t\t\tthis.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);\n\t\t\tthis.attractionForce.multiplyScalar(this.force);\n\n\t\t\tparticle.a.add(this.attractionForce);\n\t\t}\n\t}\n}","import Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class RandomDrift extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Behaviour\n   * @constructor\n   * @alias RandomDrift\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {Number} time The time of the drift\n   * @property {String} name The Behaviour name\n   */\n  constructor(driftX, driftY, delay, life, easing) {\n    super(life, easing);\n\n    this.reset(driftX, driftY, delay);\n    this.time = 0;\n    this.name = \"RandomDrift\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(driftX, driftY, delay, life, easing) {\n    this.panFoce = new Vector2D(driftX, driftY);\n    this.panFoce = this.normalizeForce(this.panFoce);\n    this.delay = delay;\n\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    particle.data.time = 0;\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n    particle.data.time += time;\n\n    if (particle.data.time >= this.delay) {\n      particle.a.addXY(\n        MathUtil.randomAToB(-this.panFoce.x, this.panFoce.x),\n        MathUtil.randomAToB(-this.panFoce.y, this.panFoce.y)\n      );\n\n      particle.data.time = 0;\n    }\n  }\n}\n","import Force from './Force';\n\nexport default class Gravity extends Force {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Force\n\t * @constructor\n\t * @alias Proton.Gravity\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(g, life, easing) {\n\t\tsuper(0, g, life, easing);\n\t\tthis.name = 'Gravity';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Gravity\n\t * @instance\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(g, life, easing) {\n\t\tsuper.reset(0, g, life, easing);\n\t}\n}","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Collision extends Behaviour {\n\n\t/**\n\t * The callback after collision\n\t *\n\t * @callback Callback\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Proton.Paritcle} otherParticle\n\t */\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Collision\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(emitter, mass, callback, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(emitter, mass, callback);\n\t\tthis.name = 'Collision';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method reset\n\t * @instance\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} \t\t\t[life=Infinity] \tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(emitter, mass, callback, life, easing) {\n\t\tthis.emitter = Util.initValue(emitter, null);\n\t\tthis.mass = Util.initValue(mass, true);\n\t\tthis.callback = Util.initValue(callback, null);\n\n\t\tthis.collisionPool = [];\n\t\tthis.delta = new Vector2D();\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tconst newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);\n\t\tconst length = newPool.length;\n\n\t\tlet otherParticle;\n\t\tlet lengthSq;\n\t\tlet overlap;\n\t\tlet totalMass;\n\t\tlet averageMass1, averageMass2;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\totherParticle = newPool[i];\n\n\t\t\tif (otherParticle !== particle) {\n\t\t\t\tthis.delta.copy(otherParticle.p);\n\t\t\t\tthis.delta.sub(particle.p);\n\n\t\t\t\tlengthSq = this.delta.lengthSq();\n\t\t\t\tconst distance = particle.radius + otherParticle.radius;\n\n\t\t\t\tif (lengthSq <= distance * distance) {\n\t\t\t\t\toverlap = distance - Math.sqrt(lengthSq);\n\t\t\t\t\toverlap += 0.5;\n\n\t\t\t\t\ttotalMass = particle.mass + otherParticle.mass;\n\t\t\t\t\taverageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;\n\t\t\t\t\taverageMass2 = this.mass ? particle.mass / totalMass : 0.5;\n\n\t\t\t\t\tparticle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));\n\t\t\t\t\totherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));\n\n\t\t\t\t\tthis.callback && this.callback(particle, otherParticle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class CrossZone extends Behaviour {\n\n    /**\n     * Defines what happens if the particles come to the end of the specified zone\n     *\n     * @memberof! Proton#\n     * @augments Proton.Behaviour\n     * @constructor\n     * @alias Proton.CrossZone\n     *\n     * @param {Proton.Zone} zone \t\t\t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \t\t\twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \t\t\tthis behaviour's life\n     * @param {String} \t\t[easing=ease.easeLinear] \tthis behaviour's easing\n     *\n     * @property {String} name The Behaviour name\n     */\n    constructor(zone, crossType, life, easing) {\n        super(life, easing);\n\n        this.reset(zone, crossType);\n        this.name = 'CrossZone';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Zone} zone \t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \tthis behaviour's life\n     * @param {String} \t\t[easing=easeLinear]\tthis behaviour's easing\n     */\n    reset(zone, crossType, life, easing) {\n        this.zone = zone;\n        this.zone.crossType = Util.initValue(crossType, 'dead');\n\n        life && super.reset(life, easing);\n    }\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    applyBehaviour(particle, time, index) {\n        this.calculate(particle, time, index);\n        this.zone.crossing(particle);\n    };\n}","import Util from \"../utils/Util\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Alpha extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Alpha\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Alpha\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.same = b === null || b === undefined ? true : false;\n    this.a = Span.setSpanValue(Util.initValue(a, 1));\n    this.b = Span.setSpanValue(b);\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Sets the new alpha value of the particle\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle A single Proton generated particle\n   */\n  initialize(particle) {\n    particle.data.alphaA = this.a.getValue();\n\n    if (this.same) particle.data.alphaB = particle.data.alphaA;\n    else particle.data.alphaB = this.b.getValue();\n  }\n\n  /**\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n\tthis.calculate(particle, time, index);\n\t\n    particle.alpha =\n      particle.data.alphaB +\n\t  (particle.data.alphaA - particle.data.alphaB) * this.energy;\n\t  \n    if (particle.alpha < 0.001) particle.alpha = 0;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Scale extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Scale\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(a, b, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(a, b);\n\t\tthis.name = 'Scale';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 1));\n\t\tthis.b = Span.setSpanValue(b);\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.data.scaleA = this.a.getValue();\n\t\tparticle.data.oldRadius = particle.radius;\n\t\tparticle.data.scaleB = this.same ? particle.data.scaleA : this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.scale = particle.data.scaleB + (particle.data.scaleA - particle.data.scaleB) * this.energy;\n\n\t\tif (particle.scale < 0.0001) particle.scale = 0;\n\t\tparticle.radius = particle.data.oldRadius * particle.scale;\n\t}\n}","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Rotate extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Rotate\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} [influence=Velocity] The rotation's influence\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(influence, b, style, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(influence, b, style);\n\t\tthis.name = 'Rotate';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} a\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, style, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 'Velocity'));\n\t\tthis.b = Span.setSpanValue(Util.initValue(b, 0));\n\t\tthis.style = Util.initValue(style, 'to');\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.rotation = this.a.getValue();\n\t\tparticle.data.rotationA = this.a.getValue();\n\n\t\tif (!this.same) particle.data.rotationB = this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tif (!this.same) {\n\t\t\tif (this.style === 'to' || this.style === 'TO' || this.style === '_') {\n\t\t\t\tparticle.rotation += particle.data.rotationB + (particle.data.rotationA - particle.data.rotationB) * this.energy\n\t\t\t} else {\n\t\t\t\tparticle.rotation += particle.data.rotationB;\n\t\t\t}\n\t\t} else if (this.a.a === 'V' || this.a.a === 'Velocity' || this.a.a === 'v') {\n\t\t\t// beta...\n\t\t\tparticle.rotation = particle.getDirection();\n\t\t}\n\t}\n\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Color extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Color\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Color\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.a = ArraySpan.createArraySpan(a);\n    this.b = ArraySpan.createArraySpan(b);\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Initialize the behaviour's parameters for all particles\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   */\n  initialize(particle) {\n    particle.color = this.a.getValue();\n    particle.data.colorA = ColorUtil.hexToRgb(particle.color);\n\n    if (this.b) particle.data.colorB = ColorUtil.hexToRgb(this.b.getValue());\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    if (this.b) {\n      this.calculate(particle, time, index);\n\n      particle.rgb.r =\n        particle.data.colorB.r +\n        (particle.data.colorA.r - particle.data.colorB.r) * this.energy;\n      particle.rgb.g =\n        particle.data.colorB.g +\n        (particle.data.colorA.g - particle.data.colorB.g) * this.energy;\n      particle.rgb.b =\n        particle.data.colorB.b +\n        (particle.data.colorA.b - particle.data.colorB.b) * this.energy;\n\n      particle.rgb.r = Math.floor(particle.rgb.r);\n      particle.rgb.g = Math.floor(particle.rgb.g);\n      particle.rgb.b = Math.floor(particle.rgb.b);\n    } else {\n      particle.rgb.r = particle.data.colorA.r;\n      particle.rgb.g = particle.data.colorA.g;\n      particle.rgb.b = particle.data.colorA.b;\n    }\n  }\n}\n","import Attraction from './Attraction';\n\nexport default class Repulsion extends Attraction {\n\n\t/**\n\t * The oppisite of Proton.Attraction - turns the force\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Attraction\n\t * @constructor\n\t * @alias Proton.Repulsion\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Number} force\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(targetPosition, force, radius, life, easing);\n\n\t\tthis.force *= -1;\n\t\tthis.name = 'Repulsion';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Repulsion\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tsuper.reset(targetPosition, force, radius, life, easing);\n\t\tthis.force *= -1;\n\t}\n}\n","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class GravityWell extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Behaviour\n\t * @constructor\n\t * @alias GravityWell\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(centerPoint, force, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.name = 'GravityWell';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t */\n\treset(centerPoint, force, life, easing) {\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tlife && super.reset(life, easing);\n\t};\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinitialize(particle) {\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);\n\t\tconst distanceSq = this.distanceVec.lengthSq();\n\n\t\tif (distanceSq !== 0) {\n\t\t\tconst distance = this.distanceVec.length();\n\t\t\tconst factor = (this.force * time) / (distanceSq * distance);\n\n\t\t\tparticle.v.x += factor * this.distanceVec.x;\n\t\t\tparticle.v.y += factor * this.distanceVec.y;\n\t\t}\n\t}\n}","import Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default {\n  initialize(emitter, particle, initializes) {\n    const length = initializes.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      if (initializes[i] instanceof Initialize) {\n        initializes[i].init(emitter, particle);\n      } else {\n        this.init(emitter, particle, initializes[i]);\n      }\n    }\n\n    this.bindEmitter(emitter, particle);\n  },\n\n  // init\n  init(emitter, particle, initialize) {\n    Util.setProp(particle, initialize);\n    Util.setVectorVal(particle, initialize);\n  },\n\n  bindEmitter(emitter, particle) {\n    if (emitter.bindEmitter) {\n      particle.p.add(emitter.p);\n      particle.v.add(emitter.v);\n      particle.a.add(emitter.a);\n\n      particle.v.rotate(MathUtil.degreeTransform(emitter.rotation));\n    }\n  }\n};\n","import Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\nimport Particle from \"../core/Particle\";\nimport EventDispatcher from \"../events/EventDispatcher\";\n\nimport Rate from \"../initialize/Rate\";\nimport InitializeUtil from \"../initialize/InitializeUtil\";\n\nexport default class Emitter extends Particle {\n  /**\n   * You can use this emit particles.\n   *\n   * It will dispatch follow events:\n   * PARTICLE_CREATED\n   * PARTICLE_UPDATA\n   * PARTICLE_DEAD\n   *\n   * @class Emitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   * for example {damping:0.01,bindEmitter:false}\n   */\n  constructor(conf = {}) {\n    super(conf);\n\n    this.particles = [];\n    this.behaviours = [];\n    this.initializes = [];\n\n    this.emitTime = 0;\n    this.emitSpeed = 0;\n    this.totalTime = -1;\n\n    /**\n     * The friction coefficient for all particle emit by This;\n     * @property damping\n     * @type {Number}\n     * @default 0.006\n     */\n    this.damping = 0.006;\n\n    /**\n     * If bindEmitter the particles can bind this emitter's property;\n     * @property bindEmitter\n     * @type {Boolean}\n     * @default true\n     */\n    this.bindEmitter = true;\n\n    /**\n     * The number of particles per second emit (a [particle]/b [s]);\n     * @property rate\n     * @type {Rate}\n     * @default Rate(1, .1)\n     */\n    this.rate = new Rate(1, 0.1);\n\n    this.name = \"Emitter\";\n    this.id = Puid.id(this.name);\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   * @param {Number} emitTime begin emit time;\n   * @param {String} life the life of this emitter\n   */\n  emit(totalTime, life) {\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = Util.initValue(totalTime, Infinity);\n\n    if (life === true || life === \"life\" || life === \"destroy\") {\n      this.life = totalTime === \"once\" ? 1 : this.totalTime;\n    } else if (!isNaN(life)) {\n      this.life = life;\n    }\n\n    this.rate.init();\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this.totalTime = -1;\n    this.emitTime = 0;\n    this.stoped = true;\n  }\n\n  preEmit(time) {\n    let oldStoped = this.stoped;\n    let oldEmitTime = this.emitTime;\n    let oldTotalTime = this.totalTime;\n\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = time;\n    this.rate.init();\n\n    const step = 0.0167;\n    while (time > step) {\n      time -= step;\n      this.update(step);\n    }\n\n    this.stoped = oldStoped;\n    this.emitTime = oldEmitTime + Math.max(time, 0);\n    this.totalTime = oldTotalTime;\n  }\n\n  /**\n   * remove current all particles\n   * @method removeAllParticles\n   */\n  removeAllParticles() {\n    let i = this.particles.length;\n    while (i--) this.particles[i].dead = true;\n  }\n\n  /**\n   * add initialize to this emitter\n   * @method addSelfInitialize\n   */\n  addSelfInitialize(initialize) {\n    if (initialize[\"init\"]) {\n      initialize.init(this);\n    } else {\n      this.initAll();\n    }\n  }\n\n  /**\n   * add the Initialize to particles;\n   *\n   * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);\n   * @method addInitialize\n   * @param {Initialize} initialize like this new Radius(1, 12)\n   */\n  addInitialize(...rest) {\n    let i = rest.length;\n    while (i--) this.initializes.push(rest[i]);\n  }\n\n  /**\n   * remove the Initialize\n   * @method removeInitialize\n   * @param {Initialize} initialize a initialize\n   */\n  removeInitialize(initializer) {\n    const index = this.initializes.indexOf(initializer);\n    if (index > -1) this.initializes.splice(index, 1);\n  }\n\n  /**\n   * remove all Initializes\n   * @method removeInitializers\n   */\n  removeAllInitializers() {\n    Util.emptyArray(this.initializes);\n  }\n\n  /**\n   * add the Behaviour to particles;\n   *\n   * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addBehaviour\n   * @param {Behaviour} behaviour like this new Color('random')\n   */\n  addBehaviour(...rest) {\n    let i = arguments.length;\n    while (i--) {\n      let behaviour = rest[i];\n      this.behaviours.push(behaviour);\n      if (behaviour.parents) behaviour.parents.push(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour\n   * @method removeBehaviour\n   * @param {Behaviour} behaviour a behaviour\n   */\n  removeBehaviour(behaviour) {\n    let index = this.behaviours.indexOf(behaviour);\n    this.behaviours.splice(index, 1);\n\n    if (behaviour.parents) {\n      index = behaviour.parents.indexOf(behaviour);\n      behaviour.parents.splice(index, 1);\n    }\n\n    return index;\n  }\n\n  /**\n   * remove all behaviours\n   * @method removeAllBehaviours\n   */\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  // emitter update\n  update(time) {\n    this.age += time;\n    if (this.age >= this.life || this.dead) this.destroy();\n\n    this.emitting(time);\n    this.integrate(time);\n  }\n\n  integrate(time) {\n    if (!this.parent) return;\n\n    const damping = 1 - this.damping;\n    this.parent.integrator.calculate(this, time, damping);\n\n    const length = this.particles.length;\n    let i, particle;\n\n    for (i = length - 1; i >= 0; i--) {\n      particle = this.particles[i];\n\n      // particle update\n      particle.update(time, i);\n      this.parent.integrator.calculate(particle, time, damping);\n      this.dispatch(\"PARTICLE_UPDATE\", particle);\n\n      // check dead\n      if (particle.dead) {\n        this.dispatch(\"PARTICLE_DEAD\", particle);\n\n        this.parent.pool.expire(particle);\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n\n  dispatch(event, target) {\n    this.parent && this.parent.dispatchEvent(event, target);\n    this.bindEvent && this.dispatchEvent(event, target);\n  }\n\n  emitting(time) {\n    if (this.totalTime === \"once\") {\n      let i;\n      const length = this.rate.getValue(99999);\n\n      if (length > 0) this.emitSpeed = length;\n      for (i = 0; i < length; i++) this.createParticle();\n      this.totalTime = \"none\";\n    } else {\n      this.emitTime += time;\n\n      if (this.emitTime < this.totalTime) {\n        const length = this.rate.getValue(time);\n        let i;\n\n        if (length > 0) this.emitSpeed = length;\n        for (i = 0; i < length; i++) this.createParticle();\n      }\n    }\n  }\n\n  /**\n   * create single particle;\n   *\n   * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})\n   * @method removeAllParticles\n   */\n  createParticle(initialize, behaviour) {\n    const particle = this.parent.pool.get(Particle);\n    this.setupParticle(particle, initialize, behaviour);\n    this.dispatch(\"PARTICLE_CREATED\", particle);\n\n    return particle;\n  }\n\n  setupParticle(particle, initialize, behaviour) {\n    let initializes = this.initializes;\n    let behaviours = this.behaviours;\n\n    if (initialize) initializes = Util.toArray(initialize);\n    if (behaviour) behaviours = Util.toArray(behaviour);\n\n    particle.reset();\n    InitializeUtil.initialize(this, particle, initializes);\n    particle.addBehaviours(behaviours);\n    particle.parent = this;\n\n    this.particles.push(particle);\n  }\n\n  remove() {\n    this.stop();\n    Util.destroyAll(this.particles);\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    this.dead = true;\n    this.remove();\n    this.removeAllInitializers();\n    this.removeAllBehaviours();\n    this.parent && this.parent.removeEmitter(this);\n  }\n}\n\nEventDispatcher.bind(Emitter);\n","import Emitter from \"./Emitter\";\n\nexport default class BehaviourEmitter extends Emitter {\n  /**\n   * The BehaviourEmitter class inherits from Proton.Emitter\n   *\n   * use the BehaviourEmitter you can add behaviours to self;\n   * @class Proton.BehaviourEmitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   */\n  constructor(conf) {\n    super(conf);\n\n    this.selfBehaviours = [];\n  }\n\n  /**\n   * add the Behaviour to emitter;\n   *\n   * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addSelfBehaviour\n   * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')\n   */\n  addSelfBehaviour(...rest) {\n    let i,\n      length = rest.length;\n\n    for (i = 0; i < length; i++) {\n      this.selfBehaviours.push(rest[i]);\n    }\n  }\n\n  /**\n   * remove the Behaviour for self\n   * @method removeSelfBehaviour\n   * @param {Proton.Behaviour} behaviour a behaviour\n   */\n  removeSelfBehaviour(behaviour) {\n    const index = this.selfBehaviours.indexOf(behaviour);\n    if (index > -1) this.selfBehaviours.splice(index, 1);\n  }\n\n  update(time) {\n    super.update(time);\n\n    if (!this.sleep) {\n      const length = this.selfBehaviours.length;\n      let i;\n\n      for (i = 0; i < length; i++) {\n        this.selfBehaviours[i].applyBehaviour(this, time, i);\n      }\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport Emitter from \"./Emitter\";\n\nexport default class FollowEmitter extends Emitter {\n  /**\n   * The FollowEmitter class inherits from Proton.Emitter\n   *\n   * use the FollowEmitter will emit particle when mousemoving\n   *\n   * @class Proton.FollowEmitter\n   * @constructor\n   * @param {Element} mouseTarget mouseevent's target;\n   * @param {Number} ease the easing of following speed;\n   * @default 0.7\n   * @param {Object} conf the parameters object;\n   */\n  constructor(mouseTarget, ease, conf) {\n    super(conf);\n\n    this.mouseTarget = Util.initValue(mouseTarget, window);\n    this.ease = Util.initValue(ease, 0.7);\n\n    this._allowEmitting = false;\n    this.initEventHandler();\n  }\n\n  initEventHandler() {\n    this.mousemoveHandler = e => this.mousemove.call(this, e);\n    this.mousedownHandler = e => this.mousedown.call(this, e);\n    this.mouseupHandler = e => this.mouseup.call(this, e);\n\n    this.mouseTarget.addEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   */\n  emit() {\n    this._allowEmitting = true;\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this._allowEmitting = false;\n  }\n\n  mousemove(e) {\n    if (e.layerX || e.layerX === 0) {\n      this.p.x += (e.layerX - this.p.x) * this.ease;\n      this.p.y += (e.layerY - this.p.y) * this.ease;\n    } else if (e.offsetX || e.offsetX === 0) {\n      this.p.x += (e.offsetX - this.p.x) * this.ease;\n      this.p.y += (e.offsetY - this.p.y) * this.ease;\n    }\n\n    if (this._allowEmitting) super.emit(\"once\");\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    super.destroy();\n    this.mouseTarget.removeEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n}\n","import Pool from \"../core/Pool\";\nimport Util from \"../utils/Util\";\n\nexport default class BaseRenderer {\n    constructor(element, stroke) {\n        this.pool = new Pool();\n        this.element = element;\n        this.stroke = stroke;\n        this.circleConf = { isCircle: true };\n\n        this.initHandler();\n        this.name = \"BaseRenderer\";\n    }\n\n    setStroke(color = \"#000000\", thinkness = 1) {\n        this.stroke = { color, thinkness };\n    }\n\n    initHandler() {\n        this._protonUpdateHandler = () => {\n            this.onProtonUpdate.call(this);\n        };\n\n        this._protonUpdateAfterHandler = () => {\n            this.onProtonUpdateAfter.call(this);\n        };\n\n        this._emitterAddedHandler = emitter => {\n            this.onEmitterAdded.call(this, emitter);\n        };\n\n        this._emitterRemovedHandler = emitter => {\n            this.onEmitterRemoved.call(this, emitter);\n        };\n\n        this._particleCreatedHandler = particle => {\n            this.onParticleCreated.call(this, particle);\n        };\n\n        this._particleUpdateHandler = particle => {\n            this.onParticleUpdate.call(this, particle);\n        };\n\n        this._particleDeadHandler = particle => {\n            this.onParticleDead.call(this, particle);\n        };\n    }\n\n    init(proton) {\n        this.parent = proton;\n\n        proton.addEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler);\n        proton.addEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        proton.addEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler);\n        proton.addEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler);\n\n        proton.addEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        proton.addEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler);\n        proton.addEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler);\n    }\n\n    resize(width, height) {}\n\n    destroy() {\n        this.remove();\n    }\n\n    remove(proton) {\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE\",\n            this._protonUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        this.parent.removeEventListener(\n            \"EMITTER_ADDED\",\n            this._emitterAddedHandler\n        );\n        this.parent.removeEventListener(\n            \"EMITTER_REMOVED\",\n            this._emitterRemovedHandler\n        );\n\n        this.parent.removeEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_UPDATE\",\n            this._particleUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_DEAD\",\n            this._particleDeadHandler\n        );\n\n        this.parent = null;\n    }\n\n    onProtonUpdate() {}\n    onProtonUpdateAfter() {}\n\n    onEmitterAdded(emitter) {}\n    onEmitterRemoved(emitter) {}\n\n    onParticleCreated(particle) {}\n    onParticleUpdate(particle) {}\n    onParticleDead(particle) {}\n}\n","import ImgUtil from \"../utils/ImgUtil\";\nimport ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class CanvasRenderer extends BaseRenderer {\n    constructor(element) {\n        super(element);\n\n        this.stroke = null;\n        this.context = this.element.getContext(\"2d\");\n        this.bufferCache = {};\n        this.name = \"CanvasRenderer\";\n    }\n\n    resize(width, height) {\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    onProtonUpdate() {\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            particle.color = particle.color || \"#ff0000\";\n        }\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.body) {\n            if (particle.body instanceof Image) this.drawImage(particle);\n        } else {\n            this.drawCircle(particle);\n        }\n    }\n\n    onParticleDead(particle) {\n        particle.body = null;\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        particle.body = img;\n    }\n\n    // private drawCircle\n    drawImage(particle) {\n        const w = (particle.body.width * particle.scale) | 0;\n        const h = (particle.body.height * particle.scale) | 0;\n        const x = particle.p.x - w / 2;\n        const y = particle.p.y - h / 2;\n\n        if (!!particle.color) {\n            if (!particle.data[\"buffer\"])\n                particle.data.buffer = this.createBuffer(particle.body);\n\n            const bufContext = particle.data.buffer.getContext(\"2d\");\n            bufContext.clearRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalAlpha = particle.alpha;\n            bufContext.drawImage(particle.body, 0, 0);\n\n            bufContext.globalCompositeOperation = \"source-atop\";\n            bufContext.fillStyle = ColorUtil.rgbToHex(particle.rgb);\n            bufContext.fillRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalCompositeOperation = \"source-over\";\n            bufContext.globalAlpha = 1;\n\n            this.context.drawImage(\n                particle.data.buffer,\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height,\n                x,\n                y,\n                w,\n                h\n            );\n        } else {\n            this.context.save();\n\n            this.context.globalAlpha = particle.alpha;\n            this.context.translate(particle.p.x, particle.p.y);\n            this.context.rotate(MathUtil.degreeTransform(particle.rotation));\n            this.context.translate(-particle.p.x, -particle.p.y);\n            this.context.drawImage(\n                particle.body,\n                0,\n                0,\n                particle.body.width,\n                particle.body.height,\n                x,\n                y,\n                w,\n                h\n            );\n\n            this.context.globalAlpha = 1;\n            this.context.restore();\n        }\n    }\n\n    // private drawCircle --\n    drawCircle(particle) {\n        if (particle.rgb) {\n            this.context.fillStyle = `rgba(${particle.rgb.r},${particle.rgb.g},${particle.rgb.b},${particle.alpha})`;\n        } else {\n            this.context.fillStyle = particle.color;\n        }\n\n        // draw circle\n        this.context.beginPath();\n        this.context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n        );\n\n        if (this.stroke) {\n            this.context.strokeStyle = this.stroke.color;\n            this.context.lineWidth = this.stroke.thinkness;\n            this.context.stroke();\n        }\n\n        this.context.closePath();\n        this.context.fill();\n    }\n\n    // private createBuffer\n    createBuffer(image) {\n        if (image instanceof Image) {\n            const size = image.width + \"_\" + image.height;\n            let canvas = this.bufferCache[size];\n\n            if (!canvas) {\n                canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                this.bufferCache[size] = canvas;\n            }\n\n            return canvas;\n        }\n    }\n}\n","import DomUtil from \"../utils/DomUtil\";\nimport ImgUtil from \"../utils/ImgUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class DomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.stroke = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.addImg2Body = this.addImg2Body.bind(this);\n\n    this.transform3d = false;\n    this.name = \"DomRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n      this.element.appendChild(particle.body);\n    }\n  }\n\n  onParticleUpdate(particle) {\n    if (this.bodyReady(particle)) {\n      if (this.transform3d)\n        DomUtil.transform3d(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n      else\n        DomUtil.transform(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n\n      particle.body.style.opacity = particle.alpha;\n      if (particle.body.isCircle) {\n        particle.body.style.backgroundColor = particle.color || \"#ff0000\";\n      }\n    }\n  }\n\n  onParticleDead(particle) {\n    if (this.bodyReady(particle)) {\n      this.element.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n  }\n\n  bodyReady(particle) {\n    return (\n      typeof particle.body === \"object\" &&\n      particle.body &&\n      !particle.body.isInner\n    );\n  }\n\n  // private\n  addImg2Body(img, particle) {\n    if (particle.dead) return;\n    particle.body = this.pool.get(img, particle);\n    DomUtil.resize(particle.body, img.width, img.height);\n\n    this.element.appendChild(particle.body);\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body, particle);\n  }\n\n  // private --\n  createCircle(particle) {\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      2 * particle.radius,\n      2 * particle.radius\n    );\n    dom.style.borderRadius = `${particle.radius}px`;\n\n    if (this.stroke) {\n      dom.style.borderColor = this.stroke.color;\n      dom.style.borderWidth = `${this.stroke.thinkness}px`;\n    }\n    dom.isCircle = true;\n\n    return dom;\n  }\n\n  createSprite(body, particle) {\n    const url = typeof body === \"string\" ? body : body.src;\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      body.width,\n      body.height\n    );\n    dom.style.backgroundImage = `url(${url})`;\n\n    return dom;\n  }\n}\n","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class EaselRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.name = \"EaselRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      this.createSprite(particle);\n    } else {\n      this.createCircle(particle);\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  onParticleUpdate(particle) {\n    if (particle.body) {\n      particle.body.x = particle.p.x;\n      particle.body.y = particle.p.y;\n\n      particle.body.alpha = particle.alpha;\n      particle.body.scaleX = particle.body.scaleY = particle.scale;\n      particle.body.rotation = particle.rotation;\n    }\n  }\n\n  onParticleDead(particle) {\n    if (particle.body) {\n      particle.body.parent && particle.body.parent.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n\n    if (particle.graphics) this.pool.expire(particle.graphics);\n  }\n\n  // private\n  createSprite(particle) {\n    particle.body = this.pool.get(particle.body);\n\n    if (particle.body.parent) return;\n    if (particle.body[\"image\"]) {\n      particle.body.regX = particle.body.image.width / 2;\n      particle.body.regY = particle.body.image.height / 2;\n    }\n  }\n\n  createCircle(particle) {\n    const graphics = this.pool.get(createjs.Graphics);\n\n    if (this.stroke) {\n      if (this.stroke instanceof String) graphics.beginStroke(this.stroke);\n      else graphics.beginStroke(\"#000000\");\n    }\n    graphics\n      .beginFill(particle.color || \"#ff0000\")\n      .drawCircle(0, 0, particle.radius);\n\n    const shape = this.pool.get(createjs.Shape, [graphics]);\n\n    particle.body = shape;\n    particle.graphics = graphics;\n  }\n}\n","import Rectangle from \"../math/Rectangle\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class PixelRenderer extends BaseRenderer {\n  constructor(element, rectangle) {\n    super(element);\n\n    this.context = this.element.getContext(\"2d\");\n    this.imageData = null;\n    this.rectangle = null;\n    this.rectangle = rectangle;\n    this.createImageData(rectangle);\n\n    this.name = \"PixelRenderer\";\n  }\n\n  resize(width, height) {\n    this.element.width = width;\n    this.element.height = height;\n  }\n\n  createImageData(rectangle) {\n    this.rectangle = rectangle\n      ? rectangle\n      : new Rectangle(0, 0, this.element.width, this.element.height);\n    this.imageData = this.context.createImageData(\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onProtonUpdate() {\n    this.context.clearRect(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.imageData = this.context.getImageData(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n  }\n\n  onProtonUpdateAfter() {\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onParticleCreated(particle) {}\n\n  onParticleUpdate(particle) {\n    if (this.imageData) {\n      this.setPixel(\n        this.imageData,\n        Math.floor(particle.p.x - this.rectangle.x),\n        Math.floor(particle.p.y - this.rectangle.y),\n        particle\n      );\n    }\n  }\n\n  setPixel(imagedata, x, y, particle) {\n    const rgb = particle.rgb;\n    if (x < 0 || x > this.element.width || y < 0 || y > this.elementwidth)\n      return;\n\n    const i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;\n\n    imagedata.data[i] = rgb.r;\n    imagedata.data[i + 1] = rgb.g;\n    imagedata.data[i + 2] = rgb.b;\n    imagedata.data[i + 3] = particle.alpha * 255;\n  }\n\n  onParticleDead(particle) {}\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nlet PIXIClass;\nexport default class PixiRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.setColor = false;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.setPIXI(window.PIXI);\n\n    this.name = \"PixiRenderer\";\n  }\n\n  setPIXI(PIXI) {\n    try {\n      PIXIClass = PIXI || { Sprite: {} };\n      this.createFromImage =\n        PIXIClass.Sprite.from || PIXIClass.Sprite.fromImage;\n    } catch (e) {}\n  }\n\n  onProtonUpdate() {}\n\n  /**\n   * @param particle\n   */\n  onParticleCreated(particle) {\n    if (particle.body) {\n      particle.body = this.pool.get(particle.body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleUpdate(particle) {\n    this.transform(particle, particle.body);\n    if (this.setColor)\n      particle.body.tint = ColorUtil.getHex16FromParticle(particle);\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleDead(particle) {\n    this.element.removeChild(particle.body);\n    this.pool.expire(particle.body);\n    particle.body = null;\n  }\n\n  destroy(particles) {\n    super.destroy();\n    this.pool.destroy();\n\n    let i = particles.length;\n    while (i--) {\n      let particle = particles[i];\n      if (particle.body) {\n        this.element.removeChild(particle.body);\n      }\n    }\n  }\n\n  transform(particle, target) {\n    target.x = particle.p.x;\n    target.y = particle.p.y;\n\n    target.alpha = particle.alpha;\n\n    target.scale.x = particle.scale;\n    target.scale.y = particle.scale;\n\n    // using cached version of MathUtil.PI_180 for slight performance increase.\n    target.rotation = particle.rotation * MathUtil.PI_180; // MathUtil.PI_180;\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body);\n  }\n\n  createSprite(body) {\n    const sprite = body.isInner\n      ? this.createFromImage(body.src)\n      : new PIXIClass.Sprite(body);\n\n    sprite.anchor.x = 0.5;\n    sprite.anchor.y = 0.5;\n\n    return sprite;\n  }\n\n  createCircle(particle) {\n    const graphics = new PIXIClass.Graphics();\n\n    if (this.stroke) {\n      const stroke = this.stroke instanceof String ? this.stroke : 0x000000;\n      graphics.beginStroke(stroke);\n    }\n\n    graphics.beginFill(particle.color || 0x008ced);\n    graphics.drawCircle(0, 0, particle.radius);\n    graphics.endFill();\n\n    return graphics;\n  }\n}\n","import Mat3 from \"../math/Mat3\";\n\nexport default class MStack {\n  constructor() {\n    this.mats = [];\n    this.size = 0;\n\n    for (let i = 0; i < 20; i++)\n      this.mats.push(Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n  }\n\n  set(m, i) {\n    if (i === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[i - 1], m, this.mats[i]);\n\n    this.size = Math.max(this.size, i + 1);\n  }\n\n  push(m) {\n    if (this.size === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);\n\n    this.size++;\n  }\n\n  pop() {\n    if (this.size > 0) this.size--;\n  }\n\n  top() {\n    return this.mats[this.size - 1];\n  }\n}\n","import Mat3 from '../math/Mat3';\nimport BaseRenderer from './BaseRenderer';\n\nimport Util from '../utils/Util';\nimport ImgUtil from '../utils/ImgUtil';\nimport MStack from '../utils/MStack';\nimport DomUtil from '../utils/DomUtil';\nimport WebGLUtil from '../utils/WebGLUtil';\nimport MathUtil from '../math/MathUtil';\n\nexport default class WebGLRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.gl = this.element.getContext('experimental-webgl', { antialias: true, stencil: false, depth: false });\n        if (!this.gl) alert('Sorry your browser do not suppest WebGL!');\n\n        this.initVar();\n        this.setMaxRadius();\n        this.initShaders();\n        this.initBuffers();\n\n        this.gl.blendEquation(this.gl.FUNC_ADD);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.enable(this.gl.BLEND);\n\n        this.addImg2Body = this.addImg2Body.bind(this);\n\n        this.name = 'WebGLRenderer';\n    }\n\n    init(proton) {\n        super.init(proton);\n        this.resize(this.element.width, this.element.height);\n    }\n\n    resize(width, height) {\n        this.umat[4] = -2;\n        this.umat[7] = 1;\n\n        this.smat[0] = 1 / width;\n        this.smat[4] = 1 / height;\n\n        this.mstack.set(this.umat, 0);\n        this.mstack.set(this.smat, 1);\n\n        this.gl.viewport(0, 0, width, height);\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    setMaxRadius(radius) {\n        this.circleCanvasURL = this.createCircle(radius);\n    }\n\n    getVertexShader() {\n        const vsSource = ['uniform vec2 viewport;', 'attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform mat3 tMat;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'void main() {', 'vec3 v = tMat * vec3(aVertexPosition, 1.0);', 'gl_Position = vec4(v.x, v.y, 0, 1);', 'vTextureCoord = aTextureCoord;', 'alpha = tMat[0][2];', '}'].join('\\n');\n        return vsSource;\n    }\n\n    getFragmentShader() {\n        const fsSource = ['precision mediump float;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'uniform sampler2D uSampler;', 'uniform vec4 color;', 'uniform bool useTexture;', 'uniform vec3 uColor;', 'void main() {', 'vec4 textureColor = texture2D(uSampler, vTextureCoord);', 'gl_FragColor = textureColor * vec4(uColor, 1.0);', 'gl_FragColor.w *= alpha;', '}'].join('\\n');\n        return fsSource;\n    }\n\n    initVar() {\n        this.mstack = new MStack();\n        this.umat = Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);\n        this.smat = Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);\n        this.texturebuffers = {};\n    }\n\n    blendEquation(A) {\n        this.gl.blendEquation(this.gl[A]);\n    }\n\n    blendFunc(A, B) {\n        this.gl.blendFunc(this.gl[A], this.gl[B]);\n    }\n\n    getShader(gl, str, fs) {\n        const shader = fs ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\n    initShaders() {\n        const fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);\n        const vertexShader = this.getShader(this.gl, this.getVertexShader(), false);\n\n        this.sprogram = this.gl.createProgram();\n        this.gl.attachShader(this.sprogram, vertexShader);\n        this.gl.attachShader(this.sprogram, fragmentShader);\n        this.gl.linkProgram(this.sprogram);\n\n        if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))\n            alert('Could not initialise shaders');\n\n        this.gl.useProgram(this.sprogram);\n        this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, 'aVertexPosition');\n        this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, 'aTextureCoord');\n        this.gl.enableVertexAttribArray(this.sprogram.tca);\n        this.gl.enableVertexAttribArray(this.sprogram.vpa);\n\n        this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, 'tMat');\n        this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, 'uSampler');\n        this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, 'useTexture');\n        this.sprogram.color = this.gl.getUniformLocation(this.sprogram, 'uColor');\n        this.gl.uniform1i(this.sprogram.useTex, 1);\n    };\n\n    initBuffers() {\n        const vs = [0, 3, 1, 0, 2, 3];\n        let idx;\n\n        this.unitIBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);\n\n        let i;\n        let ids = [];\n        for (i = 0; i < 100; i++) ids.push(i);\n        idx = new Uint16Array(ids);\n\n        this.unitI33 = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n\n        ids = [];\n        for (i = 0; i < 100; i++) ids.push(i, i + 1, i + 2);\n        idx = new Uint16Array(ids);\n\n        this.stripBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n    };\n\n    createCircle(raidus) {\n        this.circleCanvasRadius = WebGLUtil.nhpot(Util.initValue(raidus, 32));\n        const canvas = DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);\n        const context = canvas.getContext('2d');\n\n        context.beginPath();\n        context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fillStyle = '#FFF';\n        context.fill();\n\n        return canvas.toDataURL();\n    };\n\n    drawImg2Canvas(particle) {\n        const _w = particle.body.width;\n        const _h = particle.body.height;\n\n        const _width = WebGLUtil.nhpot(particle.body.width);\n        const _height = WebGLUtil.nhpot(particle.body.height);\n\n        const _scaleX = particle.body.width / _width;\n        const _scaleY = particle.body.height / _height;\n\n        if (!this.texturebuffers[particle.data.src])\n            this.texturebuffers[particle.data.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];\n\n        particle.data.texture = this.texturebuffers[particle.data.src][0];\n        particle.data.vcBuffer = this.texturebuffers[particle.data.src][1];\n        particle.data.tcBuffer = this.texturebuffers[particle.data.src][2];\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);\n\n        const context = particle.data.canvas.getContext('2d');\n        const data = context.getImageData(0, 0, _width, _height);\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n        particle.data.textureLoaded = true;\n        particle.data.textureWidth = _w;\n        particle.data.textureHeight = _h;\n    }\n\n    onProtonUpdate() {\n        // this.gl.clearColor(0, 0, 0, 1);\n        // this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n\n    onParticleCreated(particle) {\n        particle.data.textureLoaded = false;\n        particle.data.tmat = Mat3.create();\n        particle.data.tmat[8] = 1;\n        particle.data.imat = Mat3.create();\n        particle.data.imat[8] = 1;\n\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            ImgUtil.getImgFromCache(this.circleCanvasURL, this.addImg2Body, particle);\n            particle.data.oldScale = particle.radius / this.circleCanvasRadius;\n        }\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        if (particle.dead) return;\n        particle.body = img;\n        particle.data.src = img.src;\n        particle.data.canvas = ImgUtil.getCanvasFromCache(img);\n        particle.data.oldScale = 1;\n\n        this.drawImg2Canvas(particle);\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.data.textureLoaded) {\n            this.updateMatrix(particle);\n\n            this.gl.uniform3f(this.sprogram.color, particle.rgb.r / 255, particle.rgb.g / 255, particle.rgb.b / 255);\n            this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());\n\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n            this.gl.uniform1i(this.sprogram.samplerUniform, 0);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n\n            this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\n\n            this.mstack.pop();\n        }\n    }\n\n    onParticleDead(particle) { }\n\n    updateMatrix(particle) {\n        const moveOriginMatrix = WebGLUtil.makeTranslation(-particle.data.textureWidth / 2, -particle.data.textureHeight / 2);\n        const translationMatrix = WebGLUtil.makeTranslation(particle.p.x, particle.p.y);\n\n        const angel = particle.rotation * (MathUtil.PI_180);\n        const rotationMatrix = WebGLUtil.makeRotation(angel);\n\n        const scale = particle.scale * particle.data.oldScale;\n        const scaleMatrix = WebGLUtil.makeScale(scale, scale);\n        let matrix = WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);\n\n        matrix = WebGLUtil.matrixMultiply(matrix, rotationMatrix);\n        matrix = WebGLUtil.matrixMultiply(matrix, translationMatrix);\n\n        Mat3.inverse(matrix, particle.data.imat);\n        matrix[2] = particle.alpha;\n\n        this.mstack.push(matrix);\n    }\n}","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class CustomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.name = \"CustomRenderer\";\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class LineZone extends Zone {\n  constructor(x1, y1, x2, y2, direction) {\n    super();\n\n    if (x2 - x1 >= 0) {\n      this.x1 = x1;\n      this.y1 = y1;\n      this.x2 = x2;\n      this.y2 = y2;\n    } else {\n      this.x1 = x2;\n      this.y1 = y2;\n      this.x2 = x1;\n      this.y2 = y1;\n    }\n\n    this.dx = this.x2 - this.x1;\n    this.dy = this.y2 - this.y1;\n\n    this.minx = Math.min(this.x1, this.x2);\n    this.miny = Math.min(this.y1, this.y2);\n    this.maxx = Math.max(this.x1, this.x2);\n    this.maxy = Math.max(this.y1, this.y2);\n\n    this.dot = this.x2 * this.y1 - this.x1 * this.y2;\n    this.xxyy = this.dx * this.dx + this.dy * this.dy;\n\n    this.gradient = this.getGradient();\n    this.length = this.getLength();\n    this.direction = Util.initValue(direction, \">\");\n  }\n\n  getPosition() {\n    this.random = Math.random();\n\n    this.vector.x =\n      this.x1 + this.random * this.length * Math.cos(this.gradient);\n    this.vector.y =\n      this.y1 + this.random * this.length * Math.sin(this.gradient);\n\n    return this.vector;\n  }\n\n  getDirection(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = B === 0 ? 1 : B;\n\n    if ((A * x + B * y + C) * D > 0) return true;\n    else return false;\n  }\n\n  getDistance(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = A * x + B * y + C;\n\n    return D / Math.sqrt(this.xxyy);\n  }\n\n  getSymmetric(v) {\n    const tha2 = v.getGradient();\n    const tha1 = this.getGradient();\n    const tha = 2 * (tha1 - tha2);\n\n    const oldx = v.x;\n    const oldy = v.y;\n\n    v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n\n    return v;\n  }\n\n  getGradient() {\n    return Math.atan2(this.dy, this.dx);\n  }\n\n  rangeOut(particle) {\n    const angle = Math.abs(this.getGradient());\n\n    if (angle <= MathUtil.PI / 4) {\n      if (particle.p.x <= this.maxx && particle.p.x >= this.minx) return true;\n    } else {\n      if (particle.p.y <= this.maxy && particle.p.y >= this.miny) return true;\n    }\n\n    return false;\n  }\n\n  getLength() {\n    return Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (\n        this.direction === \">\" ||\n        this.direction === \"R\" ||\n        this.direction === \"right\" ||\n        this.direction === \"down\"\n      ) {\n        if (!this.rangeOut(particle)) return;\n        if (this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\n      } else {\n        if (!this.rangeOut(particle)) return;\n        if (!this.getDirection(particle.p.x, particle.p.y))\n          particle.dead = true;\n      }\n    } else if (this.crossType === \"bound\") {\n      if (!this.rangeOut(particle)) return;\n\n      if (this.getDistance(particle.p.x, particle.p.y) <= particle.radius) {\n        if (this.dx === 0) {\n          particle.v.x *= -1;\n        } else if (this.dy === 0) {\n          particle.v.y *= -1;\n        } else {\n          this.getSymmetric(particle.v);\n        }\n      }\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, LineZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class CircleZone extends Zone {\n  constructor(x, y, radius) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n\n    this.angle = 0;\n    this.center = { x, y };\n  }\n\n  getPosition() {\n    this.angle = MathUtil.PIx2 * Math.random();\n    this.randomRadius = Math.random() * this.radius;\n\n    this.vector.x = this.x + this.randomRadius * Math.cos(this.angle);\n    this.vector.y = this.y + this.randomRadius * Math.sin(this.angle);\n\n    return this.vector;\n  }\n\n  setCenter(x, y) {\n    this.center.x = x;\n    this.center.y = y;\n  }\n\n  crossing(particle) {\n    const d = particle.p.distanceTo(this.center);\n\n    if (this.crossType === \"dead\") {\n      if (d - particle.radius > this.radius) particle.dead = true;\n    } else if (this.crossType === \"bound\") {\n      if (d + particle.radius >= this.radius) this.getSymmetric(particle);\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, CircleZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n\n  getSymmetric(particle) {\n    let tha2 = particle.v.getGradient();\n    let tha1 = this.getGradient(particle);\n\n    let tha = 2 * (tha1 - tha2);\n    let oldx = particle.v.x;\n    let oldy = particle.v.y;\n\n    particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n  }\n\n  getGradient(particle) {\n    return (\n      -MathUtil.PI_2 +\n      Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x)\n    );\n  }\n}\n","import Zone from \"./Zone\";\n\nexport default class RectZone extends Zone {\n  constructor(x, y, width, height) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  getPosition() {\n    this.vector.x = this.x + Math.random() * this.width;\n    this.vector.y = this.y + Math.random() * this.height;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    // particle dead zone\n    if (this.crossType === \"dead\") {\n      if (particle.p.x + particle.radius < this.x) particle.dead = true;\n      else if (particle.p.x - particle.radius > this.x + this.width)\n        particle.dead = true;\n\n      if (particle.p.y + particle.radius < this.y) particle.dead = true;\n      else if (particle.p.y - particle.radius > this.y + this.height)\n        particle.dead = true;\n    }\n\n    // particle bound zone\n    else if (this.crossType === \"bound\") {\n      if (particle.p.x - particle.radius < this.x) {\n        particle.p.x = this.x + particle.radius;\n        particle.v.x *= -1;\n      } else if (particle.p.x + particle.radius > this.x + this.width) {\n        particle.p.x = this.x + this.width - particle.radius;\n        particle.v.x *= -1;\n      }\n\n      if (particle.p.y - particle.radius < this.y) {\n        particle.p.y = this.y + particle.radius;\n        particle.v.y *= -1;\n      } else if (particle.p.y + particle.radius > this.y + this.height) {\n        particle.p.y = this.y + this.height - particle.radius;\n        particle.v.y *= -1;\n      }\n    }\n\n    // particle cross zone\n    else if (this.crossType === \"cross\") {\n      if (particle.p.x + particle.radius < this.x && particle.v.x <= 0)\n        particle.p.x = this.x + this.width + particle.radius;\n      else if (\n        particle.p.x - particle.radius > this.x + this.width &&\n        particle.v.x >= 0\n      )\n        particle.p.x = this.x - particle.radius;\n\n      if (particle.p.y + particle.radius < this.y && particle.v.y <= 0)\n        particle.p.y = this.y + this.height + particle.radius;\n      else if (\n        particle.p.y - particle.radius > this.y + this.height &&\n        particle.v.y >= 0\n      )\n        particle.p.y = this.y - particle.radius;\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\n\nexport default class ImageZone extends Zone {\n  constructor(imageData, x, y, d) {\n    super();\n\n    this.reset(imageData, x, y, d);\n  }\n\n  reset(imageData, x, y, d) {\n    this.imageData = imageData;\n    this.x = Util.initValue(x, 0);\n    this.y = Util.initValue(y, 0);\n    this.d = Util.initValue(d, 2);\n\n    this.vectors = [];\n    this.setVectors();\n  }\n\n  setVectors() {\n    let i, j;\n    const length1 = this.imageData.width;\n    const length2 = this.imageData.height;\n\n    for (i = 0; i < length1; i += this.d) {\n      for (j = 0; j < length2; j += this.d) {\n        let index = ((j >> 0) * length1 + (i >> 0)) * 4;\n\n        if (this.imageData.data[index + 3] > 0) {\n          this.vectors.push({ x: i + this.x, y: j + this.y });\n        }\n      }\n    }\n\n    return this.vector;\n  }\n\n  getBound(x, y) {\n    var index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n    if (this.imageData.data[index + 3] > 0) return true;\n    else return false;\n  }\n\n  getPosition() {\n    const vector = Util.getRandFromArray(this.vectors);\n    return this.vector.copy(vector);\n  }\n\n  getColor(x, y) {\n    x -= this.x;\n    y -= this.y;\n    var i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n\n    return {\n      r: this.imageData.data[i],\n      g: this.imageData.data[i + 1],\n      b: this.imageData.data[i + 2],\n      a: this.imageData.data[i + 3]\n    };\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.dead = true;\n      else particle.dead = false;\n    } else if (this.crossType === \"bound\") {\n      if (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.v.negate();\n    }\n  }\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport CircleZone from \"../zone/CircleZone\";\nimport PointZone from \"../zone/PointZone\";\nimport LineZone from \"../zone/LineZone\";\nimport RectZone from \"../zone/RectZone\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default {\n  addEventListener(proton, func) {\n    proton.addEventListener(\"PROTON_UPDATE_AFTER\", () => func());\n  },\n\n  getStyle(color = \"#ff0000\") {\n    const rgb = ColorUtil.hexToRgb(color);\n    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;\n  },\n\n  drawZone(proton, canvas, zone, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (zone instanceof PointZone) {\n        context.beginPath();\n        context.fillStyle = style;\n        context.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);\n        context.fill();\n        context.closePath();\n      } else if (zone instanceof LineZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.moveTo(zone.x1, zone.y1);\n        context.lineTo(zone.x2, zone.y2);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof RectZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.drawRect(zone.x, zone.y, zone.width, zone.height);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof CircleZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);\n        context.stroke();\n        context.closePath();\n      }\n    });\n  },\n\n  drawEmitter(proton, canvas, emitter, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      context.beginPath();\n      context.fillStyle = style;\n      context.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);\n      context.fill();\n      context.closePath();\n    });\n  }\n};\n","import Proton from \"./core/Proton\";\nimport Particle from \"./core/Particle\";\nimport Pool from \"./core/Pool\";\n\nimport Util from \"./utils/Util\";\nimport ColorUtil from \"./utils/ColorUtil\";\nimport MathUtil from \"./math/MathUtil\";\nimport Vector2D from \"./math/Vector2D\";\nimport Polar2D from \"./math/Polar2D\";\nimport Mat3 from \"./math/Mat3\";\nimport Span from \"./math/Span\";\nimport ArraySpan from \"./math/ArraySpan\";\nimport Rectangle from \"./math/Rectangle\";\nimport ease from \"./math/ease\";\n\nimport Rate from \"./initialize/Rate\";\nimport Initialize from \"./initialize/Initialize\";\nimport Life from \"./initialize/Life\";\nimport Position from \"./initialize/Position\";\nimport Velocity from \"./initialize/Velocity\";\nimport Mass from \"./initialize/Mass\";\nimport Radius from \"./initialize/Radius\";\nimport Body from \"./initialize/Body\";\n\nimport Behaviour from \"./behaviour/Behaviour\";\nimport Force from \"./behaviour/Force\";\nimport Attraction from \"./behaviour/Attraction\";\nimport RandomDrift from \"./behaviour/RandomDrift\";\nimport Gravity from \"./behaviour/Gravity\";\nimport Collision from \"./behaviour/Collision\";\nimport CrossZone from \"./behaviour/CrossZone\";\nimport Alpha from \"./behaviour/Alpha\";\nimport Scale from \"./behaviour/Scale\";\nimport Rotate from \"./behaviour/Rotate\";\nimport Color from \"./behaviour/Color\";\nimport Repulsion from \"./behaviour/Repulsion\";\nimport GravityWell from \"./behaviour/GravityWell\";\n\nimport Emitter from \"./emitter/Emitter\";\nimport BehaviourEmitter from \"./emitter/BehaviourEmitter\";\nimport FollowEmitter from \"./emitter/FollowEmitter\";\n\nimport CanvasRenderer from \"./render/CanvasRenderer\";\nimport DomRenderer from \"./render/DomRenderer\";\nimport EaselRenderer from \"./render/EaselRenderer\";\nimport PixelRenderer from \"./render/PixelRenderer\";\nimport PixiRenderer from \"./render/PixiRenderer\";\nimport WebGLRenderer from \"./render/WebGLRenderer\";\nimport CustomRenderer from \"./render/CustomRenderer\";\n\nimport Zone from \"./zone/Zone\";\nimport LineZone from \"./zone/LineZone\";\nimport CircleZone from \"./zone/CircleZone\";\nimport PointZone from \"./zone/PointZone\";\nimport RectZone from \"./zone/RectZone\";\nimport ImageZone from \"./zone/ImageZone\";\n\nimport Debug from \"./debug/Debug\";\n\n// namespace\nProton.Particle = Proton.P = Particle;\nProton.Pool = Pool;\n\nProton.Util = Util;\nProton.ColorUtil = ColorUtil;\nProton.MathUtil = MathUtil;\nProton.Vector2D = Proton.Vector = Vector2D;\nProton.Polar2D = Proton.Polar = Polar2D;\nProton.ArraySpan = ArraySpan;\nProton.Rectangle = Rectangle;\nProton.Rate = Rate;\nProton.ease = ease;\nProton.Span = Span;\nProton.Mat3 = Mat3;\nProton.getSpan = (a, b, center) => new Span(a, b, center);\nProton.createArraySpan = ArraySpan.createArraySpan;\n\nProton.Initialize = Proton.Init = Initialize;\nProton.Life = Proton.L = Life;\nProton.Position = Proton.P = Position;\nProton.Velocity = Proton.V = Velocity;\nProton.Mass = Proton.M = Mass;\nProton.Radius = Proton.R = Radius;\nProton.Body = Proton.B = Body;\n\nProton.Behaviour = Behaviour;\nProton.Force = Proton.F = Force;\nProton.Attraction = Proton.A = Attraction;\nProton.RandomDrift = Proton.RD = RandomDrift;\nProton.Gravity = Proton.G = Gravity;\nProton.Collision = Collision;\nProton.CrossZone = CrossZone;\nProton.Alpha = Proton.A = Alpha;\nProton.Scale = Proton.S = Scale;\nProton.Rotate = Rotate;\nProton.Color = Color;\nProton.Repulsion = Repulsion;\nProton.GravityWell = GravityWell;\n\nProton.Emitter = Emitter;\nProton.BehaviourEmitter = BehaviourEmitter;\nProton.FollowEmitter = FollowEmitter;\n\nProton.Zone = Zone;\nProton.LineZone = LineZone;\nProton.CircleZone = CircleZone;\nProton.PointZone = PointZone;\nProton.RectZone = RectZone;\nProton.ImageZone = ImageZone;\n\nProton.CanvasRenderer = CanvasRenderer;\nProton.DomRenderer = DomRenderer;\nProton.EaselRenderer = EaselRenderer;\nProton.PixiRenderer = PixiRenderer;\nProton.PixelRenderer = PixelRenderer;\nProton.WebGLRenderer = Proton.WebGlRenderer = WebGLRenderer;\nProton.CustomRenderer = CustomRenderer;\n\nProton.Debug = Debug;\n\nObject.assign(Proton, ease);\n\n// export\nexport default Proton;\n"],"names":["PI","MathUtil","num","this","Infinity","a","b","Math","floor","random","center","f","isInt","randomAToB","toString","slice","Span","isArray","Util","getRandFromArray","randomFloating","c","undefined","pan","getValue","initValue","length","i","tx","ty","angleInRadians","cos","s","sin","sx","sy","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","id","width","height","position","dom","document","createElement","style","opacity","transform","resize","marginLeft","marginTop","div","x","y","scale","rotate","willChange","css3","key","val","bkey","charAt","toUpperCase","substr","imgsCache","canvasCache","canvasId","context","image","rect","drawImage","imagedata","getImageData","clearRect","img","callback","param","src","Image","onload","e","target","WebGLUtil","canvas","DomUtil","createCanvas","getContext","value","defaults","Object","prototype","call","arr","obj","ignore","indexOf","constructor","args","bind","apply","concat","particle","conf","hasProp","p","v","copy","props","prop","hasOwnProperty","getSpanValue","ImgUtil","destroy","idsMap","Puid","type","uid","getIdFromCache","_index","_cache","isBody","isInner","Pool","params","__puid","getId","cache","pop","createOrClone","getCache","push","total","create","classApply","clone","count","Stats","body","add","emitter","getEmitter","renderer","getRenderer","str","proton","emitters","emitSpeed","getEmitterPos","initializes","concatArr","behaviours","name","getCreatedNumber","getCount","pool","container","innerHTML","cssText","join","addEventListener","_this","bg","color","parentNode","appendChild","emitterIndex","renderers","rendererIndex","result","cpool","round","EventDispatcher","listener","_listeners","removeEventListener","splice","listeners","handler","dispatchEvent","hasEventListener","removeAllEventListeners","Integration","particles","time","damping","eulerIntegrate","sleep","old","multiplyScalar","mass","clear","Proton","render","init","index","remove","parent","EMITTER_ADDED","EMITTER_REMOVED","PROTON_UPDATE","USE_CLOCK","oldTime","Date","getTime","elapsed","amendChangeTabsBug","emittersUpdate","PROTON_UPDATE_AFTER","update","destroyAll","destroyOther","getAllParticles","integrationType","stats","EULER","integrator","MEASURE","RK2","PARTICLE_CREATED","PARTICLE_UPDATE","PARTICLE_SLEEP","PARTICLE_DEAD","Rgb","r","g","pow","PI_2","sqrt","ease","easeLinear","Vector2D","atan2","w","addVectors","subVectors","set","divideScalar","distanceToSquared","tha","dx","dy","alpha","Particle","N180_PI","life","age","dead","sprite","energy","radius","rotation","easing","rgb","reset","emptyObject","data","removeAllBehaviours","applyBehaviours","max","applyBehaviour","behaviour","parents","initialize","addBehaviour","emptyArray","setProp","h","hex16","substring","parseInt","rbg","Number","Polar2D","getX","getY","abs","Mat3","mat3","mat","Float32Array","mat1","mat2","m","vec","ArraySpan","_arr","randomColor","toArray","Rectangle","right","bottom","Rate","startTime","nextTime","timePan","numPan","numpan","timepan","setSpanValue","Initialize","Life","lifePan","Zone","vector","crossType","alert","PointZone","error","Position","zone","getPosition","Velocity","rpan","thapan","rPan","thaPan","vr","polar2d","normalizeVelocity","PI_180","Mass","massPan","Radius","oldRadius","Body","imageTarget","Behaviour","getEasing","force","removeBehaviour","Force","fx","fy","normalizeForce","calculate","Attraction","targetPosition","normalizeValue","radiusSq","attractionForce","lengthSq","sub","normalize","RandomDrift","driftX","driftY","delay","panFoce","addXY","Gravity","Collision","collisionPool","delta","newPool","otherParticle","overlap","totalMass","averageMass1","averageMass2","distance","CrossZone","crossing","Alpha","same","alphaA","alphaB","Scale","scaleA","scaleB","Rotate","rotationA","rotationB","getDirection","influence","Color","createArraySpan","colorA","ColorUtil","hexToRgb","colorB","Repulsion","GravityWell","centerPoint","distanceVec","distanceSq","factor","bindEmitter","setVectorVal","degreeTransform","Emitter","totalTime","stoped","emitTime","isNaN","rate","oldStoped","oldEmitTime","oldTotalTime","initAll","rest","initializer","arguments","emitting","integrate","dispatch","expire","event","bindEvent","createParticle","get","setupParticle","addBehaviours","stop","removeAllInitializers","removeEmitter","BehaviourEmitter","selfBehaviours","FollowEmitter","mousemoveHandler","_this2","mousemove","mousedownHandler","mousedown","mouseupHandler","mouseup","mouseTarget","_allowEmitting","layerX","layerY","offsetX","offsetY","babelHelpers.get","window","initEventHandler","BaseRenderer","thinkness","stroke","_protonUpdateHandler","onProtonUpdate","_protonUpdateAfterHandler","onProtonUpdateAfter","_emitterAddedHandler","onEmitterAdded","_emitterRemovedHandler","onEmitterRemoved","_particleCreatedHandler","onParticleCreated","_particleUpdateHandler","onParticleUpdate","_particleDeadHandler","onParticleDead","element","circleConf","isCircle","initHandler","CanvasRenderer","addImg2Body","drawCircle","buffer","createBuffer","bufContext","globalAlpha","globalCompositeOperation","fillStyle","rgbToHex","fillRect","save","translate","restore","beginPath","arc","strokeStyle","lineWidth","closePath","fill","size","bufferCache","DomRenderer","bodyReady","transform3d","backgroundColor","removeChild","babelHelpers.typeof","createCircle","createSprite","createDiv","borderRadius","borderColor","borderWidth","url","backgroundImage","createBody","EaselRenderer","addChild","scaleX","scaleY","graphics","regX","regY","createjs","Graphics","String","beginStroke","beginFill","shape","Shape","PixelRenderer","rectangle","imageData","createImageData","putImageData","setPixel","elementwidth","PIXIClass","PixiRenderer","PIXI","Sprite","createFromImage","from","fromImage","setColor","tint","getHex16FromParticle","anchor","endFill","setPIXI","MStack","mats","multiply","WebGLRenderer","umat","smat","mstack","gl","viewport","circleCanvasURL","texturebuffers","A","blendEquation","B","blendFunc","fs","shader","createShader","FRAGMENT_SHADER","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShader","getShader","getFragmentShader","vertexShader","getVertexShader","sprogram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vpa","getAttribLocation","tca","enableVertexAttribArray","tMatUniform","getUniformLocation","samplerUniform","useTex","uniform1i","idx","unitIBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint16Array","STATIC_DRAW","ids","unitI33","stripBuffer","raidus","circleCanvasRadius","toDataURL","_w","_h","_width","_height","_scaleX","_scaleY","createTexture","texture","vcBuffer","tcBuffer","ARRAY_BUFFER","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","textureLoaded","textureWidth","textureHeight","tmat","imat","oldScale","drawImg2Canvas","updateMatrix","uniform3f","uniformMatrix3fv","top","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","moveOriginMatrix","translationMatrix","angel","rotationMatrix","scaleMatrix","matrix","inverse","antialias","stencil","depth","initVar","setMaxRadius","initShaders","initBuffers","FUNC_ADD","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","CustomRenderer","LineZone","x1","gradient","y1","dot","xxyy","tha2","getGradient","oldx","oldy","maxx","minx","maxy","miny","direction","rangeOut","getDistance","getSymmetric","x2","y2","min","getLength","CircleZone","angle","PIx2","randomRadius","d","distanceTo","RectZone","ImageZone","vectors","setVectors","j","length1","length2","getBound","negate","func","getStyle","moveTo","lineTo","drawRect","P","Vector","Polar","getSpan","Init","L","V","M","R","F","RD","G","S","WebGlRenderer","Debug","assign"],"mappings":"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"}