import{NgModule,Component,ElementRef,AfterViewInit,OnDestroy,Input,Output,Renderer2,Inject,forwardRef,ViewChild,NgZone,EventEmitter,ChangeDetectionStrategy,ViewEncapsulation}from"@angular/core";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{RippleModule}from"primeng/ripple";import{RouterModule}from"@angular/router";export class ContextMenuSub{constructor(e){this.contextMenu=e}get parentActive(){return this._parentActive}set parentActive(e){this._parentActive=e,e||(this.activeItem=null)}onItemMouseEnter(e,t,n){if(this.hideTimeout&&(clearTimeout(this.hideTimeout),this.hideTimeout=null),n.disabled)return;this.activeItem=t;let i=t.children[0].nextElementSibling;if(i){let e=i.children[0];e.style.zIndex=++DomHandler.zindex,this.position(e,t)}}itemClick(e,t){t.disabled?e.preventDefault():(t.command&&(t.command({originalEvent:e,item:t}),e.preventDefault()),t.items?e.preventDefault():this.contextMenu.hide())}listClick(e){this.activeItem=null}position(e,t){this.containerOffset=DomHandler.getOffset(t.parentElement);let n=DomHandler.getViewport(),i=e.offsetParent?e.offsetWidth:DomHandler.getHiddenElementOuterWidth(e),o=DomHandler.getOuterWidth(t.children[0]),l=DomHandler.getOuterHeight(t.children[0]),s=e.offsetHeight?e.offsetHeight:DomHandler.getHiddenElementOuterHeight(e);parseInt(this.containerOffset.top)+l+s>n.height-DomHandler.calculateScrollbarHeight()?e.style.bottom="0px":e.style.top="0px",parseInt(this.containerOffset.left)+o+i>n.width-DomHandler.calculateScrollbarWidth()?e.style.left=-i+"px":e.style.left=o+"px"}};ContextMenuSub.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>ContextMenu)]}]}]),ContextMenuSub.decorators=[{type:Component,args:[{selector:"p-contextMenuSub",template:'\n        <ul [ngClass]="{\'p-submenu-list\':!root}">\n            <ng-template ngFor let-child [ngForOf]="(root ? item : item.items)">\n                <li *ngIf="child.separator" class="p-menu-separator" [ngClass]="{\'p-hidden\': child.visible === false}" role="separator">\n                <li *ngIf="!child.separator" #item [ngClass]="{\'p-menuitem\':true,\'p-menuitem-active\':item==activeItem,\'p-hidden\': child.visible === false}"\n                    (mouseenter)="onItemMouseEnter($event,item,child)" role="none">\n                    <a *ngIf="!child.routerLink" [attr.href]="child.url ? child.url : null" [attr.target]="child.target" [attr.title]="child.title" [attr.id]="child.id" [attr.tabindex]="child.disabled ? null : \'0\'" (click)="itemClick($event, child)"\n                        [ngClass]="{\'p-menuitem-link\':true,\'p-disabled\':child.disabled}" [ngStyle]="child.style" [class]="child.styleClass" pRipple\n                        [attr.aria-haspopup]="item.items != null" [attr.aria-expanded]="item === activeItem">\n                        <span class="p-menuitem-icon" *ngIf="child.icon" [ngClass]="child.icon"></span>\n                        <span class="p-menuitem-text">{{child.label}}</span>\n                        <span class="p-submenu-icon pi pi-angle-right" *ngIf="child.items"></span>\n                    </a>\n                    <a *ngIf="child.routerLink" [routerLink]="child.routerLink" [queryParams]="child.queryParams" [routerLinkActive]="\'p-menuitem-link-active\'" role="menuitem"\n                        [routerLinkActiveOptions]="child.routerLinkActiveOptions||{exact:false}" [attr.target]="child.target" [attr.title]="child.title" [attr.id]="child.id" [attr.tabindex]="child.disabled ? null : \'0\'"\n                        (click)="itemClick($event, child)" [ngClass]="{\'p-menuitem-link\':true,\'p-disabled\':child.disabled}"\n                        [ngStyle]="child.style" [class]="child.styleClass" pRipple\n                        [fragment]="child.fragment" [queryParamsHandling]="child.queryParamsHandling" [preserveFragment]="child.preserveFragment" [skipLocationChange]="child.skipLocationChange" [replaceUrl]="child.replaceUrl" [state]="child.state">\n                        <span class="p-menuitem-icon" *ngIf="child.icon" [ngClass]="child.icon"></span>\n                        <span class="p-menuitem-text">{{child.label}}</span>\n                        <span class="p-submenu-icon pi pi-angle-right" *ngIf="child.items"></span>\n                    </a>\n                    <p-contextMenuSub [parentActive]="item==activeItem" [item]="child" *ngIf="child.items"></p-contextMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    ',encapsulation:ViewEncapsulation.None}]}],ContextMenuSub.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>ContextMenu)]}]}]),ContextMenuSub.propDecorators={item:[{type:Input}],root:[{type:Input}],parentActive:[{type:Input}]};export class ContextMenu{constructor(e,t,n){this.el=e,this.renderer=t,this.zone=n,this.autoZIndex=!0,this.baseZIndex=0,this.triggerEvent="contextmenu",this.onShow=new EventEmitter,this.onHide=new EventEmitter}ngAfterViewInit(){this.global?this.triggerEventListener=this.renderer.listen("document",this.triggerEvent,e=>{this.show(e),e.preventDefault()}):this.target&&(this.triggerEventListener=this.renderer.listen(this.target,this.triggerEvent,e=>{this.show(e),e.preventDefault(),e.stopPropagation()})),this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.containerViewChild.nativeElement):DomHandler.appendChild(this.containerViewChild.nativeElement,this.appendTo))}show(e){this.position(e),this.moveOnTop(),this.containerViewChild.nativeElement.style.display="block",this.parentActive=!0,DomHandler.fadeIn(this.containerViewChild.nativeElement,250),this.bindGlobalListeners(),e&&e.preventDefault(),this.onShow.emit()}hide(){this.containerViewChild.nativeElement.style.display="none",this.parentActive=!1,this.unbindGlobalListeners(),this.onHide.emit()}moveOnTop(){this.autoZIndex&&(this.containerViewChild.nativeElement.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex))}toggle(e){this.containerViewChild.nativeElement.offsetParent?this.hide():this.show(e)}position(e){if(e){let t=e.pageX+1,n=e.pageY+1,i=this.containerViewChild.nativeElement.offsetParent?this.containerViewChild.nativeElement.offsetWidth:DomHandler.getHiddenElementOuterWidth(this.containerViewChild.nativeElement),o=this.containerViewChild.nativeElement.offsetParent?this.containerViewChild.nativeElement.offsetHeight:DomHandler.getHiddenElementOuterHeight(this.containerViewChild.nativeElement),l=DomHandler.getViewport();t+i-document.body.scrollLeft>l.width&&(t-=i),n+o-document.body.scrollTop>l.height&&(n-=o),t<document.body.scrollLeft&&(t=document.body.scrollLeft),n<document.body.scrollTop&&(n=document.body.scrollTop),this.containerViewChild.nativeElement.style.left=t+"px",this.containerViewChild.nativeElement.style.top=n+"px"}}bindGlobalListeners(){this.documentClickListener||(this.documentClickListener=this.renderer.listen("document","click",e=>{this.containerViewChild.nativeElement.offsetParent&&this.isOutsideClicked(e)&&2!==e.button&&this.hide()})),this.zone.runOutsideAngular(()=>{this.windowResizeListener||(this.windowResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.windowResizeListener))})}unbindGlobalListeners(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null),this.windowResizeListener&&(window.removeEventListener("resize",this.windowResizeListener),this.windowResizeListener=null)}onWindowResize(e){this.containerViewChild.nativeElement.offsetParent&&this.hide()}isOutsideClicked(e){return!(this.containerViewChild.nativeElement.isSameNode(e.target)||this.containerViewChild.nativeElement.contains(e.target))}ngOnDestroy(){this.unbindGlobalListeners(),this.triggerEventListener&&this.triggerEventListener(),this.appendTo&&this.el.nativeElement.appendChild(this.containerViewChild.nativeElement)}};ContextMenu.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:NgZone}]),ContextMenu.decorators=[{type:Component,args:[{selector:"p-contextMenu",template:'\n        <div #container [ngClass]="\'p-contextmenu p-component\'"\n            [class]="styleClass" [ngStyle]="style">\n            <p-contextMenuSub [item]="model" [parentActive]="parentActive" root="root"></p-contextMenuSub>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-contextmenu{position:absolute;display:none}.p-contextmenu ul{margin:0;padding:0;list-style:none}.p-contextmenu .p-submenu-list{position:absolute;min-width:100%;z-index:1;display:none}.p-contextmenu .p-menuitem-link{cursor:pointer;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;text-decoration:none;overflow:hidden;position:relative}.p-contextmenu .p-menuitem-text{line-height:1}.p-contextmenu .p-menuitem{position:relative}.p-contextmenu .p-menuitem-link .p-submenu-icon{margin-left:auto}.p-contextmenu .p-menuitem-active>p-contextmenusub>.p-submenu-list{display:block!important}"]}]}],ContextMenu.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:NgZone}]),ContextMenu.propDecorators={model:[{type:Input}],global:[{type:Input}],target:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],appendTo:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],triggerEvent:[{type:Input}],onShow:[{type:Output}],onHide:[{type:Output}],containerViewChild:[{type:ViewChild,args:["container"]}]};export class ContextMenuModule{};ContextMenuModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RouterModule,RippleModule],exports:[ContextMenu,RouterModule],declarations:[ContextMenu,ContextMenuSub]}]}];