import{Component,NgModule,Type,ComponentFactoryResolver,ViewChild,OnDestroy,ComponentRef,AfterViewInit,ChangeDetectorRef,Renderer2,NgZone,ElementRef,ChangeDetectionStrategy,ViewRef,ViewEncapsulation}from"@angular/core";import{trigger,style,transition,animate,animation,useAnimation}from"@angular/animations";import{DynamicDialogContent}from"./dynamicdialogcontent";import{DynamicDialogConfig}from"./dynamicdialog-config";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{DynamicDialogRef}from"./dynamicdialog-ref";const showAnimation=animation([style({transform:"{{transform}}",opacity:0}),animate("{{transition}}",style({transform:"none",opacity:1}))]),hideAnimation=animation([animate("{{transition}}",style({transform:"{{transform}}",opacity:0}))]);export class DynamicDialogComponent{constructor(e,t,n,i,o,a){this.componentFactoryResolver=e,this.cd=t,this.renderer=n,this.config=i,this.dialogRef=o,this.zone=a,this.visible=!0,this.transformOptions="scale(0.7)"}ngAfterViewInit(){this.loadChildComponent(this.childComponentType),this.cd.detectChanges()}loadChildComponent(e){let t=this.componentFactoryResolver.resolveComponentFactory(e),n=this.insertionPoint.viewContainerRef;n.clear(),this.componentRef=n.createComponent(t)}moveOnTop(){if(!1!==this.config.autoZIndex){const e=(this.config.baseZIndex||0)+ ++DomHandler.zindex;this.container.style.zIndex=String(e),this.maskViewChild.nativeElement.style.zIndex=String(e-1)}}onAnimationStart(e){switch(e.toState){case"visible":this.container=e.element,this.wrapper=this.container.parentElement,this.moveOnTop(),this.bindGlobalListeners(),!1!==this.config.modal&&this.enableModality(),this.focus();break;case"void":this.onContainerDestroy()}}onAnimationEnd(e){"void"===e.toState&&this.dialogRef.destroy()}onContainerDestroy(){this.unbindGlobalListeners(),!1!==this.config.modal&&this.disableModality(),this.container=null}close(){this.visible=!1,this.cd.markForCheck()}enableModality(){!1!==this.config.closable&&this.config.dismissableMask&&(this.maskClickListener=this.renderer.listen(this.wrapper,"click",e=>{this.wrapper&&this.wrapper.isSameNode(e.target)&&this.close()})),!1!==this.config.modal&&DomHandler.addClass(document.body,"p-overflow-hidden")}disableModality(){this.wrapper&&(this.config.dismissableMask&&this.unbindMaskClickListener(),!1!==this.config.modal&&DomHandler.removeClass(document.body,"p-overflow-hidden"),this.cd.destroyed||this.cd.detectChanges())}onKeydown(e){if(9===e.which){e.preventDefault();let t=DomHandler.getFocusableElements(this.container);if(t&&t.length>0)if(document.activeElement){let n=t.indexOf(document.activeElement);e.shiftKey?-1==n||0===n?t[t.length-1].focus():t[n-1].focus():-1==n||n===t.length-1?t[0].focus():t[n+1].focus()}else t[0].focus()}}focus(){let e=DomHandler.findSingle(this.container,"[autofocus]");e&&this.zone.runOutsideAngular(()=>{setTimeout(()=>e.focus(),5)})}bindGlobalListeners(){this.bindDocumentKeydownListener(),!1!==this.config.closeOnEscape&&!1!==this.config.closable&&this.bindDocumentEscapeListener()}unbindGlobalListeners(){this.unbindDocumentKeydownListener(),this.unbindDocumentEscapeListener()}bindDocumentKeydownListener(){this.zone.runOutsideAngular(()=>{this.documentKeydownListener=this.onKeydown.bind(this),window.document.addEventListener("keydown",this.documentKeydownListener)})}unbindDocumentKeydownListener(){this.documentKeydownListener&&(window.document.removeEventListener("keydown",this.documentKeydownListener),this.documentKeydownListener=null)}bindDocumentEscapeListener(){this.documentEscapeListener=this.renderer.listen("document","keydown",e=>{27==e.which&&parseInt(this.container.style.zIndex)==DomHandler.zindex+(this.config.baseZIndex?this.config.baseZIndex:0)&&this.close()})}unbindDocumentEscapeListener(){this.documentEscapeListener&&(this.documentEscapeListener(),this.documentEscapeListener=null)}unbindMaskClickListener(){this.maskClickListener&&(this.maskClickListener(),this.maskClickListener=null)}ngOnDestroy(){this.onContainerDestroy(),this.componentRef&&this.componentRef.destroy()}};DynamicDialogComponent.ctorParameters=(()=>[{type:ComponentFactoryResolver},{type:ChangeDetectorRef},{type:Renderer2},{type:DynamicDialogConfig},{type:DynamicDialogRef},{type:NgZone}]),DynamicDialogComponent.decorators=[{type:Component,args:[{selector:"p-dynamicDialog",template:'\n        <div #mask [ngClass]="{\'p-dialog-mask\':true, \'p-component-overlay p-dialog-mask-scrollblocker\': config.modal !== false}">\n            <div [ngClass]="{\'p-dialog p-dynamic-dialog p-component\':true, \'p-dialog-rtl\': config.rtl}" [ngStyle]="config.style" [class]="config.styleClass"\n                [@animation]="{value: \'visible\', params: {transform: transformOptions, transition: config.transitionOptions || \'150ms cubic-bezier(0, 0, 0.2, 1)\'}}"\n                (@animation.start)="onAnimationStart($event)" (@animation.done)="onAnimationEnd($event)" role="dialog" *ngIf="visible"\n                [style.width]="config.width" [style.height]="config.height">\n                <div class="p-dialog-header" *ngIf="config.showHeader === false ? false: true">\n                    <span class="p-dialog-title">{{config.header}}</span>\n                    <div class="p-dialog-header-icons">\n                        <button [ngClass]="\'p-dialog-header-icon p-dialog-header-maximize p-link\'" type="button" (click)="close()" (keydown.enter)="close()" *ngIf="config.closable !== false">\n                            <span class="p-dialog-header-close-icon pi pi-times"></span>\n                        </button>\n                    </div>\n                </div>\n                <div class="p-dialog-content" [ngStyle]="config.contentStyle">\n                    <ng-template pDynamicDialogContent></ng-template>\n                </div>\n                <div class="p-dialog-footer" *ngIf="config.footer">\n                    {{config.footer}}\n                </div>\n            </div>\n        </div>\n\t',animations:[trigger("animation",[transition("void => visible",[useAnimation(showAnimation)]),transition("visible => void",[useAnimation(hideAnimation)])])],changeDetection:ChangeDetectionStrategy.Default,encapsulation:ViewEncapsulation.None,styles:[".p-dialog-mask{position:fixed;top:0;left:0;width:100%;height:100%;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;pointer-events:none;background-color:transparent;transition-property:background-color}.p-dialog-mask.p-component-overlay{pointer-events:auto}.p-dialog{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;pointer-events:auto;max-height:90%;-ms-transform:scale(1);transform:scale(1);position:relative}.p-dialog-content{overflow-y:auto}.p-dialog-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}.p-dialog-title{list-style:outside}.p-dialog .p-dialog-header-icons{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.p-dialog .p-dialog-header-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;overflow:hidden;position:relative}.p-dialog-mask.p-dialog-mask-leave{background-color:transparent}.p-fluid .p-dialog-footer .p-button{width:auto}.p-dialog-bottom .p-dialog,.p-dialog-bottomleft .p-dialog,.p-dialog-bottomright .p-dialog,.p-dialog-left .p-dialog,.p-dialog-right .p-dialog,.p-dialog-top .p-dialog,.p-dialog-topleft .p-dialog,.p-dialog-topright .p-dialog{margin:.75rem;transform:translate3d(0,0,0)}.p-dialog-maximized{transition:none;-ms-transform:none;transform:none;width:100vw!important;max-height:100%;height:100%}.p-dialog-maximized .p-dialog-content{-ms-flex-positive:1;flex-grow:1}.p-dialog-left{-ms-flex-pack:start;justify-content:flex-start}.p-dialog-right{-ms-flex-pack:end;justify-content:flex-end}.p-dialog-top{-ms-flex-align:start;align-items:flex-start}.p-dialog-topleft{-ms-flex-pack:start;justify-content:flex-start;-ms-flex-align:start;align-items:flex-start}.p-dialog-topright{-ms-flex-pack:end;justify-content:flex-end;-ms-flex-align:start;align-items:flex-start}.p-dialog-bottom{-ms-flex-align:end;align-items:flex-end}.p-dialog-bottomleft{-ms-flex-pack:start;justify-content:flex-start;-ms-flex-align:end;align-items:flex-end}.p-dialog-bottomright{-ms-flex-pack:end;justify-content:flex-end;-ms-flex-align:end;align-items:flex-end}.p-dialog .p-resizable-handle{position:absolute;font-size:.1px;display:block;cursor:se-resize;width:12px;height:12px;right:1px;bottom:1px}.p-confirm-dialog .p-dialog-content{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}"]}]}],DynamicDialogComponent.ctorParameters=(()=>[{type:ComponentFactoryResolver},{type:ChangeDetectorRef},{type:Renderer2},{type:DynamicDialogConfig},{type:DynamicDialogRef},{type:NgZone}]),DynamicDialogComponent.propDecorators={insertionPoint:[{type:ViewChild,args:[DynamicDialogContent]}],maskViewChild:[{type:ViewChild,args:["mask"]}]};export class DynamicDialogModule{};DynamicDialogModule.decorators=[{type:NgModule,args:[{imports:[CommonModule],declarations:[DynamicDialogComponent,DynamicDialogContent],entryComponents:[DynamicDialogComponent]}]}];