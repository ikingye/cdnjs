import{Inject,forwardRef,ChangeDetectorRef,Renderer2,Component,ViewEncapsulation,Input,ElementRef,ChangeDetectionStrategy,NgModule}from"@angular/core";import{trigger,transition,style,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{RippleModule}from"primeng/ripple";import{RouterModule}from"@angular/router";class TieredMenuSub{constructor(e,t,i){this.cf=t,this.renderer=i,this.autoZIndex=!0,this.baseZIndex=0,this.tieredMenu=e}get parentActive(){return this._parentActive}set parentActive(e){this._parentActive=e,e||(this.activeItem=null)}ngAfterViewInit(){this.root&&!this.tieredMenu.popup&&this.bindDocumentClickListener()}onItemMouseEnter(e,t,i){if(this.tieredMenu.popup||!this.root||this.activeItem){if(i.disabled)return;this.activeItem=t;let e=t.children[0].nextElementSibling;if(e){let i=e.children[0];this.autoZIndex&&(i.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex)),i.style.zIndex=String(++DomHandler.zindex),i.style.top="0px",i.style.left=DomHandler.getOuterWidth(t.children[0])+"px"}}}itemClick(e,t,i){if(i.disabled)return e.preventDefault(),!0;if(i.url||e.preventDefault(),i.command&&i.command({originalEvent:e,item:i}),this.root&&!this.activeItem&&!this.tieredMenu.popup){this.activeItem=t;let e=t.children[0].nextElementSibling;if(e){let i=e.children[0];this.autoZIndex&&(i.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex)),i.style.zIndex=String(++DomHandler.zindex),i.style.top="0px",i.style.left=DomHandler.getOuterWidth(t.children[0])+"px",this.rootItemClick=!0}}!i.items&&this.tieredMenu.popup&&this.tieredMenu.hide()}listClick(e){this.rootItemClick||(this.activeItem=null)}bindDocumentClickListener(){this.documentClickListener||(this.documentClickListener=this.renderer.listen("document","click",()=>{this.rootItemClick||(this.parentActive=!1,this.activeItem=null,this.cf.markForCheck()),this.rootItemClick=!1}))}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}ngOnDestroy(){this.root&&!this.tieredMenu.popup&&this.unbindDocumentClickListener()}}TieredMenuSub.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>TieredMenu)]}]},{type:ChangeDetectorRef},{type:Renderer2}]),TieredMenuSub.decorators=[{type:Component,args:[{selector:"p-tieredMenuSub",template:'\n        <ul [ngClass]="{\'p-submenu-list\': !root}" (click)="listClick($event)" role="menubar">\n            <ng-template ngFor let-child [ngForOf]="(root ? item : item.items)">\n                <li *ngIf="child.separator" class="p-menu-separator" [ngClass]="{\'p-hidden\': child.visible === false}" role="separator">\n                <li *ngIf="!child.separator" #listItem [ngClass]="{\'p-menuitem\':true,\'p-menuitem-active\':listItem==activeItem,\'p-hidden\': child.visible === false}"\n                    [class]="child.styleClass" [ngStyle]="child.style" role="none"\n                    (mouseenter)="onItemMouseEnter($event, listItem, child)">\n                    <a *ngIf="!child.routerLink" [attr.href]="child.url" class="p-menuitem-link" [attr.target]="child.target" [attr.tabindex]="child.disabled ? null : \'0\'" [attr.title]="child.title" [attr.id]="child.id" \n                        [ngClass]="{\'p-disabled\':child.disabled}" (click)="itemClick($event, listItem, child)" role="menuitem" [attr.aria-haspopup]="item.items != null" [attr.aria-expanded]="item === activeItem" pRipple>\n                        <span class="p-menuitem-icon" *ngIf="child.icon" [ngClass]="child.icon"></span>\n                        <span class="p-menuitem-text">{{child.label}}</span>\n                        <span class="p-submenu-icon pi pi-angle-right" *ngIf="child.items"></span>\n                    </a>\n                    <a *ngIf="child.routerLink" [routerLink]="child.routerLink" role="menuitem" [queryParams]="child.queryParams" [routerLinkActive]="\'p-menuitem-link-active\'" role="menuitem" [attr.tabindex]="child.disabled ? null : \'0\'"\n                        [routerLinkActiveOptions]="child.routerLinkActiveOptions||{exact:false}"\n                        class="p-menuitem-link" [attr.target]="child.target" [attr.title]="child.title" [attr.id]="child.id"\n                        [ngClass]="{\'p-disabled\':child.disabled}" (click)="itemClick($event, listItem, child)" pRipple\n                        [fragment]="child.fragment" [queryParamsHandling]="child.queryParamsHandling" [preserveFragment]="child.preserveFragment" [skipLocationChange]="child.skipLocationChange" [replaceUrl]="child.replaceUrl" [state]="child.state">\n                        <span class="p-menuitem-icon" *ngIf="child.icon" [ngClass]="child.icon"></span>\n                        <span class="p-menuitem-text">{{child.label}}</span>\n                        <span class="p-submenu-icon pi pi-angle-right" *ngIf="child.items"></span>\n                    </a>\n                    <p-tieredMenuSub [item]="child" *ngIf="child.items" [baseZIndex]="baseZIndex" [parentActive]="listItem==activeItem" [autoZIndex]="autoZIndex"></p-tieredMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    ',encapsulation:ViewEncapsulation.None,styles:[".p-tieredmenu-overlay{position:absolute}.p-tieredmenu ul{margin:0;padding:0;list-style:none}.p-tieredmenu .p-submenu-list{position:absolute;min-width:100%;z-index:1;display:none}.p-tieredmenu .p-menuitem-link{cursor:pointer;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;text-decoration:none;overflow:hidden;position:relative}.p-tieredmenu .p-menuitem-text{line-height:1}.p-tieredmenu .p-menuitem{position:relative}.p-tieredmenu .p-menuitem-link .p-submenu-icon{margin-left:auto}.p-tieredmenu .p-menuitem-active>p-tieredmenusub>.p-submenu-list{display:block;left:100%;top:0}"]}]}],TieredMenuSub.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>TieredMenu)]}]},{type:ChangeDetectorRef},{type:Renderer2}]),TieredMenuSub.propDecorators={item:[{type:Input}],root:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],parentActive:[{type:Input}]};class TieredMenu{constructor(e,t,i){this.el=e,this.renderer=t,this.cd=i,this.autoZIndex=!0,this.baseZIndex=0,this.showTransitionOptions=".12s cubic-bezier(0, 0, 0.2, 1)",this.hideTransitionOptions=".1s linear"}toggle(e){this.visible?this.hide():this.show(e),this.preventDocumentDefault=!0}show(e){this.target=e.currentTarget,this.visible=!0,this.parentActive=!0,this.preventDocumentDefault=!0,this.cd.markForCheck()}onOverlayAnimationStart(e){switch(e.toState){case"visible":this.popup&&(this.container=e.element,this.moveOnTop(),this.appendOverlay(),DomHandler.absolutePosition(this.container,this.target),this.bindDocumentClickListener(),this.bindDocumentResizeListener());break;case"void":this.onOverlayHide()}}appendOverlay(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.container):DomHandler.appendChild(this.container,this.appendTo))}restoreOverlayAppend(){this.container&&this.appendTo&&this.el.nativeElement.appendChild(this.container)}moveOnTop(){this.autoZIndex&&(this.container.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex))}hide(){this.visible=!1,this.parentActive=!1,this.cd.markForCheck()}onWindowResize(){this.hide()}bindDocumentClickListener(){this.documentClickListener||(this.documentClickListener=this.renderer.listen("document","click",()=>{!this.preventDocumentDefault&&this.popup&&this.hide(),this.preventDocumentDefault=!1}))}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}bindDocumentResizeListener(){this.documentResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.documentResizeListener)}unbindDocumentResizeListener(){this.documentResizeListener&&(window.removeEventListener("resize",this.documentResizeListener),this.documentResizeListener=null)}onOverlayHide(){this.unbindDocumentClickListener(),this.unbindDocumentResizeListener(),this.preventDocumentDefault=!1,this.target=null}ngOnDestroy(){this.popup&&(this.restoreOverlayAppend(),this.onOverlayHide())}}TieredMenu.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef}]),TieredMenu.decorators=[{type:Component,args:[{selector:"p-tieredMenu",template:'\n        <div [ngClass]="{\'p-tieredmenu p-component\':true, \'p-tieredmenu-overlay\':popup}" [class]="styleClass" [ngStyle]="style"\n            [@overlayAnimation]="{value: \'visible\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}" [@.disabled]="popup !== true" \n            (@overlayAnimation.start)="onOverlayAnimationStart($event)" (click)="preventDocumentDefault=true" *ngIf="!popup || visible">\n            <p-tieredMenuSub [item]="model" root="root" [parentActive]="parentActive" [baseZIndex]="baseZIndex" [autoZIndex]="autoZIndex"></p-tieredMenuSub>\n        </div>\n    ',animations:[trigger("overlayAnimation",[transition(":enter",[style({opacity:0,transform:"scaleY(0.8)"}),animate("{{showTransitionParams}}")]),transition(":leave",[animate("{{hideTransitionParams}}",style({opacity:0}))])])],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None}]}],TieredMenu.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef}]),TieredMenu.propDecorators={model:[{type:Input}],popup:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],appendTo:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],showTransitionOptions:[{type:Input}],hideTransitionOptions:[{type:Input}]};class TieredMenuModule{}TieredMenuModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RouterModule,RippleModule],exports:[TieredMenu,RouterModule],declarations:[TieredMenu,TieredMenuSub]}]}];export{TieredMenu,TieredMenuModule,TieredMenuSub};