import{EventEmitter,ChangeDetectorRef,Component,ChangeDetectionStrategy,ViewEncapsulation,Input,Output,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{FormsModule}from"@angular/forms";import{DropdownModule}from"primeng/dropdown";import{RippleModule}from"primeng/ripple";import{SharedModule}from"primeng/api";class Paginator{constructor(t){this.cd=t,this.pageLinkSize=5,this.onPageChange=new EventEmitter,this.alwaysShow=!0,this.dropdownScrollHeight="200px",this.currentPageReportTemplate="{currentPage} of {totalPages}",this.totalRecords=0,this.rows=0,this._first=0}ngOnInit(){this.updatePaginatorState()}ngOnChanges(t){t.totalRecords&&(this.updatePageLinks(),this.updatePaginatorState(),this.updateFirst(),this.updateRowsPerPageOptions()),t.first&&(this._first=t.first.currentValue,this.updatePageLinks(),this.updatePaginatorState()),t.rows&&(this.updatePageLinks(),this.updatePaginatorState()),t.rowsPerPageOptions&&this.updateRowsPerPageOptions()}get first(){return this._first}set first(t){this._first=t}updateRowsPerPageOptions(){if(this.rowsPerPageOptions){this.rowsPerPageItems=[];for(let t of this.rowsPerPageOptions)"object"==typeof t&&t.showAll?this.rowsPerPageItems.unshift({label:t.showAll,value:this.totalRecords}):this.rowsPerPageItems.push({label:String(t),value:t})}}isFirstPage(){return 0===this.getPage()}isLastPage(){return this.getPage()===this.getPageCount()-1}getPageCount(){return Math.ceil(this.totalRecords/this.rows)||1}calculatePageLinkBoundaries(){let t=this.getPageCount(),e=Math.min(this.pageLinkSize,t),a=Math.max(0,Math.ceil(this.getPage()-e/2)),n=Math.min(t-1,a+e-1);var i=this.pageLinkSize-(n-a+1);return[a=Math.max(0,a-i),n]}updatePageLinks(){this.pageLinks=[];let t=this.calculatePageLinkBoundaries(),e=t[0],a=t[1];for(let t=e;t<=a;t++)this.pageLinks.push(t+1)}changePage(t){var e=this.getPageCount();if(t>=0&&t<e){this._first=this.rows*t;var a={page:t,first:this.first,rows:this.rows,pageCount:e};this.updatePageLinks(),this.onPageChange.emit(a),this.updatePaginatorState()}}updateFirst(){const t=this.getPage();t>0&&this.totalRecords&&this.first>=this.totalRecords&&Promise.resolve(null).then(()=>this.changePage(t-1))}getPage(){return Math.floor(this.first/this.rows)}changePageToFirst(t){this.isFirstPage()||this.changePage(0),t.preventDefault()}changePageToPrev(t){this.changePage(this.getPage()-1),t.preventDefault()}changePageToNext(t){this.changePage(this.getPage()+1),t.preventDefault()}changePageToLast(t){this.isLastPage()||this.changePage(this.getPageCount()-1),t.preventDefault()}onPageLinkClick(t,e){this.changePage(e),t.preventDefault()}onRppChange(t){this.changePage(this.getPage())}updatePaginatorState(){this.paginatorState={page:this.getPage(),pageCount:this.getPageCount(),rows:this.rows,first:this.first,totalRecords:this.totalRecords}}get currentPageReport(){return this.currentPageReportTemplate.replace("{currentPage}",String(this.getPage()+1)).replace("{totalPages}",String(this.getPageCount())).replace("{first}",String(this._first+1)).replace("{last}",String(Math.min(this._first+this.rows,this.totalRecords))).replace("{rows}",String(this.rows)).replace("{totalRecords}",String(this.totalRecords))}}Paginator.ctorParameters=(()=>[{type:ChangeDetectorRef}]),Paginator.decorators=[{type:Component,args:[{selector:"p-paginator",template:'\n        <div [class]="styleClass" [ngStyle]="style" [ngClass]="\'p-paginator p-component\'" *ngIf="alwaysShow ? true : (pageLinks && pageLinks.length > 1)">\n            <div class="p-paginator-left-content" *ngIf="templateLeft">\n                <ng-container *ngTemplateOutlet="templateLeft; context: {$implicit: paginatorState}"></ng-container>\n            </div>\n            <span class="p-paginator-current" *ngIf="showCurrentPageReport">{{currentPageReport}}</span>\n            <button type="button" [disabled]="isFirstPage()" (click)="changePageToFirst($event)" pRipple\n                    class="p-paginator-first p-paginator-element p-link" [ngClass]="{\'p-disabled\':isFirstPage()}">\n                <span class="p-paginator-icon pi pi-angle-double-left"></span>\n            </button>\n            <button type="button" [disabled]="isFirstPage()" (click)="changePageToPrev($event)" pRipple\n                    class="p-paginator-prev p-paginator-element p-link" [ngClass]="{\'p-disabled\':isFirstPage()}">\n                <span class="p-paginator-icon pi pi-angle-left"></span>\n            </button>\n            <span class="p-paginator-pages">\n                <button type="button" *ngFor="let pageLink of pageLinks" class="p-paginator-page p-paginator-element p-link" [ngClass]="{\'p-highlight\': (pageLink-1 == getPage())}"\n                    (click)="onPageLinkClick($event, pageLink - 1)" pRipple>{{pageLink}}</button>\n            </span>\n            <button type="button" [disabled]="isLastPage()" (click)="changePageToNext($event)" pRipple\n                    class="p-paginator-next p-paginator-element p-link" [ngClass]="{\'p-disabled\':isLastPage()}">\n                <span class="p-paginator-icon pi pi-angle-right"></span>\n            </button>\n            <button type="button" [disabled]="isLastPage()" (click)="changePageToLast($event)" pRipple\n                    class="p-paginator-last p-paginator-element p-link" [ngClass]="{\'p-disabled\':isLastPage()}">\n                <span class="p-paginator-icon pi pi-angle-double-right"></span>\n            </button>\n            <p-dropdown [options]="rowsPerPageItems" [(ngModel)]="rows" *ngIf="rowsPerPageOptions"\n                (onChange)="onRppChange($event)" [appendTo]="dropdownAppendTo" [scrollHeight]="dropdownScrollHeight"></p-dropdown>\n            <div class="p-paginator-right-content" *ngIf="templateRight">\n                <ng-container *ngTemplateOutlet="templateRight; context: {$implicit: paginatorState}"></ng-container>\n            </div>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-paginator{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;-ms-flex-wrap:wrap;flex-wrap:wrap}.p-paginator-left-content{margin-right:auto}.p-paginator-right-content{margin-left:auto}.p-paginator-current,.p-paginator-first,.p-paginator-last,.p-paginator-next,.p-paginator-page,.p-paginator-prev{cursor:pointer;display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;line-height:1;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;position:relative}.p-paginator-element:focus{z-index:1;position:relative}"]}]}],Paginator.ctorParameters=(()=>[{type:ChangeDetectorRef}]),Paginator.propDecorators={pageLinkSize:[{type:Input}],onPageChange:[{type:Output}],style:[{type:Input}],styleClass:[{type:Input}],alwaysShow:[{type:Input}],templateLeft:[{type:Input}],templateRight:[{type:Input}],dropdownAppendTo:[{type:Input}],dropdownScrollHeight:[{type:Input}],currentPageReportTemplate:[{type:Input}],showCurrentPageReport:[{type:Input}],totalRecords:[{type:Input}],rows:[{type:Input}],rowsPerPageOptions:[{type:Input}],first:[{type:Input}]};class PaginatorModule{}PaginatorModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,DropdownModule,FormsModule,SharedModule,RippleModule],exports:[Paginator,DropdownModule,FormsModule,SharedModule],declarations:[Paginator]}]}];export{Paginator,PaginatorModule};