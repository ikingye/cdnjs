import{EventEmitter,ElementRef,Renderer2,ChangeDetectorRef,NgZone,Component,ChangeDetectionStrategy,ViewEncapsulation,Input,Output,ContentChildren,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{PrimeTemplate}from"primeng/api";import{RippleModule}from"primeng/ripple";import{trigger,state,style,transition,animate}from"@angular/animations";class OverlayPanel{constructor(e,t,n,i){this.el=e,this.renderer=t,this.cd=n,this.zone=i,this.dismissable=!0,this.autoZIndex=!0,this.baseZIndex=0,this.focusOnShow=!0,this.showTransitionOptions=".12s cubic-bezier(0, 0, 0.2, 1)",this.hideTransitionOptions=".1s linear",this.onShow=new EventEmitter,this.onHide=new EventEmitter,this.overlayVisible=!1,this.render=!1,this.isContainerClicked=!0}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"content":default:this.contentTemplate=e.template}this.cd.markForCheck()})}onContainerClick(){this.isContainerClicked=!0}bindDocumentClickListener(){!this.documentClickListener&&this.dismissable&&this.zone.runOutsideAngular(()=>{let e=DomHandler.isIOS()?"touchstart":"click";this.documentClickListener=this.renderer.listen("document",e,e=>{this.container.contains(e.target)||this.target===e.target||this.target.contains(e.target)||this.isContainerClicked||this.zone.run(()=>{this.hide()}),this.isContainerClicked=!1,this.cd.markForCheck()})})}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}toggle(e,t){this.overlayVisible?(this.hasTargetChanged(e,t)&&(this.destroyCallback=(()=>{this.show(null,t||e.currentTarget||e.target)})),this.hide()):this.show(e,t)}show(e,t){this.target=t||e.currentTarget||e.target,this.overlayVisible=!0,this.render=!0,this.cd.markForCheck()}hasTargetChanged(e,t){return null!=this.target&&this.target!==(t||e.currentTarget||e.target)}appendContainer(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.container):DomHandler.appendChild(this.container,this.appendTo))}restoreAppend(){this.container&&this.appendTo&&this.el.nativeElement.appendChild(this.container)}align(){this.autoZIndex&&(this.container.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex)),DomHandler.absolutePosition(this.container,this.target),DomHandler.getOffset(this.container).top<DomHandler.getOffset(this.target).top&&DomHandler.addClass(this.container,"p-overlaypanel-flipped"),Math.floor(DomHandler.getOffset(this.container).left)<Math.floor(DomHandler.getOffset(this.target).left)&&DomHandler.getOffset(this.container).left>0&&DomHandler.addClass(this.container,"p-overlaypanel-shifted")}onAnimationStart(e){"open"===e.toState&&(this.container=e.element,this.onShow.emit(null),this.appendContainer(),this.align(),this.bindDocumentClickListener(),this.bindDocumentResizeListener(),this.focusOnShow&&this.focus())}onAnimationEnd(e){switch(e.toState){case"void":this.destroyCallback&&(this.destroyCallback(),this.destroyCallback=null);break;case"close":this.onContainerDestroy(),this.onHide.emit({}),this.render=!1}}focus(){let e=DomHandler.findSingle(this.container,"[autofocus]");e&&this.zone.runOutsideAngular(()=>{setTimeout(()=>e.focus(),5)})}hide(){this.overlayVisible=!1,this.cd.markForCheck()}onCloseClick(e){this.hide(),e.preventDefault()}onWindowResize(e){this.hide()}bindDocumentResizeListener(){this.documentResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.documentResizeListener)}unbindDocumentResizeListener(){this.documentResizeListener&&(window.removeEventListener("resize",this.documentResizeListener),this.documentResizeListener=null)}onContainerDestroy(){this.target=null,this.unbindDocumentClickListener(),this.unbindDocumentResizeListener()}ngOnDestroy(){this.target=null,this.destroyCallback=null,this.container&&(this.restoreAppend(),this.onContainerDestroy())}}OverlayPanel.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef},{type:NgZone}]),OverlayPanel.decorators=[{type:Component,args:[{selector:"p-overlayPanel",template:'\n        <div *ngIf="render" [ngClass]="\'p-overlaypanel p-component\'" [ngStyle]="style" [class]="styleClass" (click)="onContainerClick()"\n            [@animation]="{value: (overlayVisible ? \'open\': \'close\'), params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}" \n                (@animation.start)="onAnimationStart($event)" (@animation.done)="onAnimationEnd($event)">\n            <div class="p-overlaypanel-content">\n                <ng-content></ng-content>\n                <ng-container *ngTemplateOutlet="contentTemplate"></ng-container>\n            </div>\n            <button *ngIf="showCloseIcon" type="button" class="p-overlaypanel-close p-link" (click)="onCloseClick($event)" (keydown.enter)="hide()" [attr.aria-label]="ariaCloseLabel" pRipple>\n                <span class="p-overlaypanel-close-icon pi pi-times"></span>\n            </button>\n        </div>\n    ',animations:[trigger("animation",[state("void",style({transform:"scaleY(0.8)",opacity:0})),state("close",style({opacity:0})),state("open",style({transform:"translateY(0)",opacity:1})),transition("void => open",animate("{{showTransitionParams}}")),transition("open => close",animate("{{hideTransitionParams}}"))])],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:['.p-overlaypanel{position:absolute;margin-top:10px}.p-overlaypanel-flipped{margin-top:0;margin-bottom:10px}.p-overlaypanel-close{display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;overflow:hidden;position:relative}.p-overlaypanel:after,.p-overlaypanel:before{bottom:100%;left:1.25rem;content:" ";height:0;width:0;position:absolute;pointer-events:none}.p-overlaypanel:after{border-width:8px;margin-left:-8px}.p-overlaypanel:before{border-width:10px;margin-left:-10px}.p-overlaypanel-flipped:after,.p-overlaypanel-flipped:before{bottom:auto;top:100%}.p-overlaypanel.p-overlaypanel-flipped:after,.p-overlaypanel.p-overlaypanel-flipped:before{border-bottom-color:transparent}']}]}],OverlayPanel.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef},{type:NgZone}]),OverlayPanel.propDecorators={dismissable:[{type:Input}],showCloseIcon:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],appendTo:[{type:Input}],autoZIndex:[{type:Input}],ariaCloseLabel:[{type:Input}],baseZIndex:[{type:Input}],focusOnShow:[{type:Input}],showTransitionOptions:[{type:Input}],hideTransitionOptions:[{type:Input}],onShow:[{type:Output}],onHide:[{type:Output}],templates:[{type:ContentChildren,args:[PrimeTemplate]}]};class OverlayPanelModule{}OverlayPanelModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RippleModule],exports:[OverlayPanel],declarations:[OverlayPanel]}]}];export{OverlayPanel,OverlayPanelModule};