import{forwardRef,EventEmitter,ElementRef,ChangeDetectorRef,Component,ChangeDetectionStrategy,ViewEncapsulation,Input,Output,ViewChild,ContentChild,ContentChildren,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{Header,Footer,PrimeTemplate,SharedModule}from"primeng/api";import{DomHandler}from"primeng/dom";import{ObjectUtils,FilterUtils}from"primeng/utils";import{NG_VALUE_ACCESSOR}from"@angular/forms";import{RippleModule}from"primeng/ripple";const LISTBOX_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Listbox),multi:!0};class Listbox{constructor(e,t){this.el=e,this.cd=t,this.checkbox=!1,this.filter=!1,this.filterMode="contains",this.metaKeySelection=!0,this.showToggleAll=!0,this.onChange=new EventEmitter,this.onClick=new EventEmitter,this.onDblClick=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{}),this.disabledSelectedOptions=[]}get options(){return this._options}set options(e){let t=this.optionLabel?ObjectUtils.generateSelectItems(e,this.optionLabel):e;this._options=t}get filterValue(){return this._filterValue}set filterValue(e){this._filterValue=e}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"item":this.itemTemplate=e.template;break;case"header":this.headerTemplate=e.template;break;case"footer":this.footerTemplate=e.template;break;default:this.itemTemplate=e.template}})}writeValue(e){this.value=e,this.setDisabledSelectedOptions(),this.cd.markForCheck()}registerOnChange(e){this.onModelChange=e}registerOnTouched(e){this.onModelTouched=e}setDisabledState(e){this.disabled=e}onOptionClick(e,t){this.disabled||t.disabled||this.readonly||(this.multiple?this.checkbox?this.onOptionClickCheckbox(e,t):this.onOptionClickMultiple(e,t):this.onOptionClickSingle(e,t),this.onClick.emit({originalEvent:e,option:t,value:this.value}),this.optionTouched=!1)}onOptionTouchEnd(e,t){this.disabled||t.disabled||this.readonly||(this.optionTouched=!0)}onOptionDoubleClick(e,t){this.disabled||t.disabled||this.readonly||this.onDblClick.emit({originalEvent:e,option:t,value:this.value})}onOptionClickSingle(e,t){let i=this.isSelected(t),l=!1;if(!this.optionTouched&&this.metaKeySelection){let s=e.metaKey||e.ctrlKey;i?s&&(this.value=null,l=!0):(this.value=t.value,l=!0)}else this.value=i?null:t.value,l=!0;l&&(this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value}))}onOptionClickMultiple(e,t){let i=this.isSelected(t),l=!1;if(!this.optionTouched&&this.metaKeySelection){let s=e.metaKey||e.ctrlKey;i?(s?this.removeOption(t):this.value=[t.value],l=!0):(this.value=s&&this.value||[],this.value=[...this.value,t.value],l=!0)}else i?this.removeOption(t):this.value=[...this.value||[],t.value],l=!0;l&&(this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value}))}onOptionClickCheckbox(e,t){if(this.disabled||this.readonly)return;this.isSelected(t)?this.removeOption(t):(this.value=this.value?this.value:[],this.value=[...this.value,t.value]),this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value})}removeOption(e){this.value=this.value.filter(t=>!ObjectUtils.equals(t,e.value,this.dataKey))}isSelected(e){let t=!1;if(this.multiple){if(this.value)for(let i of this.value)if(ObjectUtils.equals(i,e.value,this.dataKey)){t=!0;break}}else t=ObjectUtils.equals(this.value,e.value,this.dataKey);return t}get allChecked(){if(this.filterValue)return this.allFilteredSelected();{let e=this.getEnabledOptionCount(),t=this.disabledSelectedOptions.length;return this.value&&this.options&&this.value.length>0&&this.value.length==e+t}}getEnabledOptionCount(){if(this.options){let e=0;for(let t of this.options)t.disabled||e++;return e}return 0}allFilteredSelected(){let e,t=this.filterValue?this.getFilteredOptions():this.options;if(this.value&&t&&t.length){e=!0;for(let t of this.options)if(this.isItemVisible(t)&&!this.isSelected(t)){e=!1;break}}return e}onFilter(e){this._filterValue=e.target.value}toggleAll(e){if(!this.disabled&&!this.readonly&&this.options&&0!==this.options.length){if(this.allChecked)if(this.disabledSelectedOptions&&this.disabledSelectedOptions.length>0){let e=[];e=[...this.disabledSelectedOptions],this.value=e}else this.value=[];else if(this.options){this.value=[],this.disabledSelectedOptions&&this.disabledSelectedOptions.length>0&&(this.value=[...this.disabledSelectedOptions]);for(let e=0;e<this.options.length;e++){let t=this.options[e];this.isItemVisible(t)&&!t.disabled&&this.value.push(t.value)}}this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value}),e.preventDefault()}}isItemVisible(e){if(this.filterValue){let t;return t=!this.filterMode||FilterUtils[this.filterMode](e.label,this.filterValue,this.filterLocale)}return!0}onOptionKeyDown(e,t){if(this.readonly)return;let i=e.currentTarget;switch(e.which){case 40:var l=this.findNextItem(i);l&&l.focus(),e.preventDefault();break;case 38:var s=this.findPrevItem(i);s&&s.focus(),e.preventDefault();break;case 13:this.onOptionClick(e,t),e.preventDefault()}}findNextItem(e){let t=e.nextElementSibling;return t?DomHandler.hasClass(t,"p-disabled")||DomHandler.isHidden(t)?this.findNextItem(t):t:null}findPrevItem(e){let t=e.previousElementSibling;return t?DomHandler.hasClass(t,"p-disabled")||DomHandler.isHidden(t)?this.findPrevItem(t):t:null}getFilteredOptions(){let e=[];if(this.filterValue){for(let t=0;t<this.options.length;t++){let i=this.options[t];this.isItemVisible(i)&&!i.disabled&&e.push(i)}return e}return this.options}onHeaderCheckboxFocus(){this.headerCheckboxFocus=!0}onHeaderCheckboxBlur(){this.headerCheckboxFocus=!1}setDisabledSelectedOptions(){if(this.options&&(this.disabledSelectedOptions=[],this.value))for(let e of this.options)e.disabled&&this.isSelected(e)&&this.disabledSelectedOptions.push(e.value)}}Listbox.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef}]),Listbox.decorators=[{type:Component,args:[{selector:"p-listbox",template:'\n    <div [ngClass]="\'p-listbox p-component\'" [ngStyle]="style" [class]="styleClass">\n      <div class="p-listbox-header" *ngIf="headerFacet || headerTemplate">\n        <ng-content select="p-header"></ng-content>\n        <ng-container *ngTemplateOutlet="headerTemplate"></ng-container>\n      </div>\n      <div class="p-listbox-header" *ngIf="(checkbox && multiple && showToggleAll) || filter">\n        <div class="p-checkbox p-component" *ngIf="checkbox && multiple && showToggleAll">\n          <div class="p-hidden-accessible">\n            <input type="checkbox" readonly="readonly" [checked]="allChecked" (focus)="onHeaderCheckboxFocus()" (blur)="onHeaderCheckboxBlur()" (keydown.space)="toggleAll($event)">\n          </div>\n          <div #headerchkbox class="p-checkbox-box" [ngClass]="{\'p-highlight\': allChecked, \'p-focus\': headerCheckboxFocus}" (click)="toggleAll($event)">\n            <span class="p-checkbox-icon" [ngClass]="{\'pi pi-check\':allChecked}"></span>\n          </div>\n        </div>\n        <div class="p-listbox-filter-container" *ngIf="filter">\n          <input type="text" [value]="filterValue||\'\'" (input)="onFilter($event)" class="p-listbox-filter p-inputtext p-component" [disabled]="disabled" [attr.placeholder]="filterPlaceHolder" [attr.aria-label]="ariaFilterLabel">\n          <span class="p-listbox-filter-icon pi pi-search"></span>\n        </div>\n      </div>\n      <div [ngClass]="\'p-listbox-list-wrapper\'" [ngStyle]="listStyle" [class]="listStyleClass">\n        <ul class="p-listbox-list" role="listbox" aria-multiselectable="multiple">\n          <li *ngFor="let option of options; let i = index;" [style.display]="isItemVisible(option) ? \'flex\' : \'none\'" [attr.tabindex]="option.disabled ? null : \'0\'" pRipple\n              [ngClass]="{\'p-listbox-item\':true,\'p-highlight\':isSelected(option), \'p-disabled\': option.disabled}" role="option" [attr.aria-label]="option.label"\n              [attr.aria-selected]="isSelected(option)" (click)="onOptionClick($event,option)" (dblclick)="onOptionDoubleClick($event,option)" (touchend)="onOptionTouchEnd($event,option)" (keydown)="onOptionKeyDown($event,option)">\n            <div class="p-checkbox p-component" *ngIf="checkbox && multiple">\n              <div class="p-checkbox-box" [ngClass]="{\'p-highlight\':isSelected(option)}">\n                <span class="p-checkbox-icon" [ngClass]="{\'pi pi-check\':isSelected(option)}"></span>\n              </div>\n            </div>\n            <span *ngIf="!itemTemplate">{{option.label}}</span>\n            <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: option, index: i}"></ng-container>\n          </li>\n        </ul>\n      </div>\n      <div class="p-listbox-footer" *ngIf="footerFacet || footerTemplate">\n        <ng-content select="p-footer"></ng-content>\n        <ng-container *ngTemplateOutlet="footerTemplate"></ng-container>\n      </div>\n    </div>\n  ',providers:[LISTBOX_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-listbox-list-wrapper{overflow:auto}.p-listbox-list{list-style-type:none;margin:0;padding:0}.p-listbox-item{cursor:pointer;position:relative;overflow:hidden;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.p-listbox-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.p-listbox-filter-container{position:relative;-ms-flex:1 1 auto;flex:1 1 auto}.p-listbox-filter-icon{position:absolute;top:50%;margin-top:-.5rem}.p-listbox-filter{width:100%}"]}]}],Listbox.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef}]),Listbox.propDecorators={multiple:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],listStyle:[{type:Input}],listStyleClass:[{type:Input}],readonly:[{type:Input}],disabled:[{type:Input}],checkbox:[{type:Input}],filter:[{type:Input}],filterMode:[{type:Input}],filterLocale:[{type:Input}],metaKeySelection:[{type:Input}],dataKey:[{type:Input}],showToggleAll:[{type:Input}],optionLabel:[{type:Input}],ariaFilterLabel:[{type:Input}],filterPlaceHolder:[{type:Input}],onChange:[{type:Output}],onClick:[{type:Output}],onDblClick:[{type:Output}],headerCheckboxViewChild:[{type:ViewChild,args:["headerchkbox"]}],headerFacet:[{type:ContentChild,args:[Header]}],footerFacet:[{type:ContentChild,args:[Footer]}],templates:[{type:ContentChildren,args:[PrimeTemplate]}],options:[{type:Input}],filterValue:[{type:Input}]};class ListboxModule{}ListboxModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,SharedModule,RippleModule],exports:[Listbox,SharedModule],declarations:[Listbox]}]}];export{LISTBOX_VALUE_ACCESSOR,Listbox,ListboxModule};