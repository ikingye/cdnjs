import{Inject,forwardRef,Component,ViewEncapsulation,Input,EventEmitter,ElementRef,Optional,ChangeDetectionStrategy,Output,ContentChildren,NgModule}from"@angular/core";import{ScrollingModule}from"@angular/cdk/scrolling";import{CommonModule}from"@angular/common";import{TreeDragDropService,PrimeTemplate,SharedModule}from"primeng/api";import{ObjectUtils}from"primeng/utils";import{DomHandler}from"primeng/dom";import{RippleModule}from"primeng/ripple";class UITreeNode{constructor(e){this.tree=e}ngOnInit(){this.node.parent=this.parentNode,this.parentNode&&this.tree.syncNodeOption(this.node,this.tree.value,"parent",this.tree.getNodeWithKey(this.parentNode.key,this.tree.value))}getIcon(){let e;return e=this.node.icon?this.node.icon:this.node.expanded&&this.node.children&&this.node.children.length?this.node.expandedIcon:this.node.collapsedIcon,UITreeNode.ICON_CLASS+" "+e}isLeaf(){return this.tree.isNodeLeaf(this.node)}toggle(e){this.node.expanded?this.collapse(e):this.expand(e)}expand(e){this.node.expanded=!0,this.tree.virtualScroll&&this.tree.updateSerializedValue(),this.tree.onNodeExpand.emit({originalEvent:e,node:this.node})}collapse(e){this.node.expanded=!1,this.tree.virtualScroll&&this.tree.updateSerializedValue(),this.tree.onNodeCollapse.emit({originalEvent:e,node:this.node})}onNodeClick(e){this.tree.onNodeClick(e,this.node)}onNodeKeydown(e){13===e.which&&this.tree.onNodeClick(e,this.node)}onNodeTouchEnd(){this.tree.onNodeTouchEnd()}onNodeRightClick(e){this.tree.onNodeRightClick(e,this.node)}isSelected(){return this.tree.isSelected(this.node)}onDropPoint(e,t){e.preventDefault();let n=this.tree.dragNode,o=this.tree.dragNodeIndex,i=this.tree.dragNodeScope,r=this.tree.dragNodeTree!==this.tree||(1===t||o!==this.index-1);if(this.tree.allowDrop(n,this.node,i)&&r){let o=Object.assign({},this.createDropPointEventMetadata(t));this.tree.validateDrop?this.tree.onNodeDrop.emit({originalEvent:e,dragNode:n,dropNode:this.node,dropIndex:this.index,accept:()=>{this.processPointDrop(o)}}):(this.processPointDrop(o),this.tree.onNodeDrop.emit({originalEvent:e,dragNode:n,dropNode:this.node,dropIndex:this.index}))}this.draghoverPrev=!1,this.draghoverNext=!1}processPointDrop(e){let t=e.dropNode.parent?e.dropNode.parent.children:this.tree.value;e.dragNodeSubNodes.splice(e.dragNodeIndex,1);let n=this.index;e.position<0?(n=e.dragNodeSubNodes===t?e.dragNodeIndex>e.index?e.index:e.index-1:e.index,t.splice(n,0,e.dragNode)):(n=t.length,t.push(e.dragNode)),this.tree.dragDropService.stopDrag({node:e.dragNode,subNodes:e.dropNode.parent?e.dropNode.parent.children:this.tree.value,index:e.dragNodeIndex})}createDropPointEventMetadata(e){return{dragNode:this.tree.dragNode,dragNodeIndex:this.tree.dragNodeIndex,dragNodeSubNodes:this.tree.dragNodeSubNodes,dropNode:this.node,index:this.index,position:e}}onDropPointDragOver(e){e.dataTransfer.dropEffect="move",e.preventDefault()}onDropPointDragEnter(e,t){this.tree.allowDrop(this.tree.dragNode,this.node,this.tree.dragNodeScope)&&(t<0?this.draghoverPrev=!0:this.draghoverNext=!0)}onDropPointDragLeave(e){this.draghoverPrev=!1,this.draghoverNext=!1}onDragStart(e){this.tree.draggableNodes&&!1!==this.node.draggable?(e.dataTransfer.setData("text","data"),this.tree.dragDropService.startDrag({tree:this,node:this.node,subNodes:this.node.parent?this.node.parent.children:this.tree.value,index:this.index,scope:this.tree.draggableScope})):e.preventDefault()}onDragStop(e){this.tree.dragDropService.stopDrag({node:this.node,subNodes:this.node.parent?this.node.parent.children:this.tree.value,index:this.index})}onDropNodeDragOver(e){e.dataTransfer.dropEffect="move",this.tree.droppableNodes&&(e.preventDefault(),e.stopPropagation())}onDropNode(e){if(this.tree.droppableNodes&&!1!==this.node.droppable){e.preventDefault(),e.stopPropagation();let t=this.tree.dragNode;if(this.tree.allowDrop(t,this.node,this.tree.dragNodeScope)){let n=Object.assign({},this.createDropNodeEventMetadata());this.tree.validateDrop?this.tree.onNodeDrop.emit({originalEvent:e,dragNode:t,dropNode:this.node,index:this.index,accept:()=>{this.processNodeDrop(n)}}):(this.processNodeDrop(n),this.tree.onNodeDrop.emit({originalEvent:e,dragNode:t,dropNode:this.node,index:this.index}))}}this.draghoverNode=!1}createDropNodeEventMetadata(){return{dragNode:this.tree.dragNode,dragNodeIndex:this.tree.dragNodeIndex,dragNodeSubNodes:this.tree.dragNodeSubNodes,dropNode:this.node}}processNodeDrop(e){let t=e.dragNodeIndex;e.dragNodeSubNodes.splice(t,1),e.dropNode.children?e.dropNode.children.push(e.dragNode):e.dropNode.children=[e.dragNode],this.tree.dragDropService.stopDrag({node:e.dragNode,subNodes:e.dropNode.parent?e.dropNode.parent.children:this.tree.value,index:t})}onDropNodeDragEnter(e){this.tree.droppableNodes&&!1!==this.node.droppable&&this.tree.allowDrop(this.tree.dragNode,this.node,this.tree.dragNodeScope)&&(this.draghoverNode=!0)}onDropNodeDragLeave(e){if(this.tree.droppableNodes){let t=e.currentTarget.getBoundingClientRect();(e.x>t.left+t.width||e.x<t.left||e.y>=Math.floor(t.top+t.height)||e.y<t.top)&&(this.draghoverNode=!1)}}onKeyDown(e){const t=e.target.parentElement.parentElement;if("P-TREENODE"===t.nodeName)switch(e.which){case 40:const n=this.tree.droppableNodes?t.children[1].children[1]:t.children[0].children[1];if(n&&n.children.length>0)this.focusNode(n.children[0]);else{const e=t.nextElementSibling;if(e)this.focusNode(e);else{let e=this.findNextSiblingOfAncestor(t);e&&this.focusNode(e)}}e.preventDefault();break;case 38:if(t.previousElementSibling)this.focusNode(this.findLastVisibleDescendant(t.previousElementSibling));else{let e=this.getParentNodeElement(t);e&&this.focusNode(e)}e.preventDefault();break;case 39:this.node.expanded||this.tree.isNodeLeaf(this.node)||this.expand(e),e.preventDefault();break;case 37:if(this.node.expanded)this.collapse(e);else{let e=this.getParentNodeElement(t);e&&this.focusNode(e)}e.preventDefault();break;case 13:this.tree.onNodeClick(e,this.node),e.preventDefault()}}findNextSiblingOfAncestor(e){let t=this.getParentNodeElement(e);return t?t.nextElementSibling?t.nextElementSibling:this.findNextSiblingOfAncestor(t):null}findLastVisibleDescendant(e){const t=Array.from(e.children).find(e=>DomHandler.hasClass(e,"p-treenode")).children[1];if(t&&t.children.length>0){const e=t.children[t.children.length-1];return this.findLastVisibleDescendant(e)}return e}getParentNodeElement(e){const t=e.parentElement.parentElement.parentElement;return"P-TREENODE"===t.tagName?t:null}focusNode(e){this.tree.droppableNodes?e.children[1].children[0].focus():e.children[0].children[0].focus()}}UITreeNode.ICON_CLASS="p-treenode-icon ",UITreeNode.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>Tree)]}]}]),UITreeNode.decorators=[{type:Component,args:[{selector:"p-treeNode",template:'\n        <ng-template [ngIf]="node">\n            <li *ngIf="tree.droppableNodes" class="p-treenode-droppoint" [ngClass]="{\'p-treenode-droppoint-active\':draghoverPrev}"\n            (drop)="onDropPoint($event,-1)" (dragover)="onDropPointDragOver($event)" (dragenter)="onDropPointDragEnter($event,-1)" (dragleave)="onDropPointDragLeave($event)"></li>\n            <li *ngIf="!tree.horizontal" role="treeitem" [ngClass]="[\'p-treenode\',node.styleClass||\'\', isLeaf() ? \'p-treenode-leaf\': \'\']">\n                <div class="p-treenode-content" (click)="onNodeClick($event)" (contextmenu)="onNodeRightClick($event)" (touchend)="onNodeTouchEnd()"\n                    (drop)="onDropNode($event)" (dragover)="onDropNodeDragOver($event)" (dragenter)="onDropNodeDragEnter($event)" (dragleave)="onDropNodeDragLeave($event)"\n                    [draggable]="tree.draggableNodes" (dragstart)="onDragStart($event)" (dragend)="onDragStop($event)" [attr.tabindex]="0"\n                    [ngClass]="{\'p-treenode-selectable\':tree.selectionMode && node.selectable !== false,\'p-treenode-dragover\':draghoverNode, \'p-highlight\':isSelected()}"\n                    (keydown)="onKeyDown($event)" [attr.aria-posinset]="this.index + 1" [attr.aria-expanded]="this.node.expanded" [attr.aria-selected]="isSelected()" [attr.aria-label]="node.label">\n                    <button type="button" class="p-tree-toggler p-link" (click)="toggle($event)" pRipple>\n                        <span class="p-tree-toggler-icon pi pi-fw" [ngClass]="{\'pi-chevron-right\':!node.expanded,\'pi-chevron-down\':node.expanded}"></span>\n                    </button>\n                    <div class="p-checkbox p-component" *ngIf="tree.selectionMode == \'checkbox\'" [attr.aria-checked]="isSelected()">\n                        <div class="p-checkbox-box" [ngClass]="{\'p-highlight\': isSelected(), \'p-indeterminate\': node.partialSelected}">\n                            <span class="p-checkbox-icon pi" [ngClass]="{\'pi-check\':isSelected(),\'pi-minus\':node.partialSelected}"></span>\n                        </div>\n                    </div>\n                    <span [class]="getIcon()" *ngIf="node.icon||node.expandedIcon||node.collapsedIcon"></span>\n                    <span class="p-treenode-label">\n                            <span *ngIf="!tree.getTemplateForNode(node)">{{node.label}}</span>\n                            <span *ngIf="tree.getTemplateForNode(node)">\n                                <ng-container *ngTemplateOutlet="tree.getTemplateForNode(node); context: {$implicit: node}"></ng-container>\n                            </span>\n                    </span>\n                </div>\n                <ul class="p-treenode-children" style="display: none;" *ngIf="!tree.virtualScroll && node.children && node.expanded" [style.display]="node.expanded ? \'block\' : \'none\'" role="group">\n                    <p-treeNode *ngFor="let childNode of node.children;let firstChild=first;let lastChild=last; let index=index; trackBy: tree.trackBy" [node]="childNode" [parentNode]="node"\n                        [firstChild]="firstChild" [lastChild]="lastChild" [index]="index" [style.height.px]="tree.virtualNodeHeight" [level]="level + 1"></p-treeNode>\n                </ul>\n            </li>\n            <li *ngIf="tree.droppableNodes&&lastChild" class="p-treenode-droppoint" [ngClass]="{\'p-treenode-droppoint-active\':draghoverNext}"\n            (drop)="onDropPoint($event,1)" (dragover)="onDropPointDragOver($event)" (dragenter)="onDropPointDragEnter($event,1)" (dragleave)="onDropPointDragLeave($event)"></li>\n            <table *ngIf="tree.horizontal" [class]="node.styleClass">\n                <tbody>\n                    <tr>\n                        <td class="p-treenode-connector" *ngIf="!root">\n                            <table class="p-treenode-connector-table">\n                                <tbody>\n                                    <tr>\n                                        <td [ngClass]="{\'p-treenode-connector-line\':!firstChild}"></td>\n                                    </tr>\n                                    <tr>\n                                        <td [ngClass]="{\'p-treenode-connector-line\':!lastChild}"></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                        <td class="p-treenode" [ngClass]="{\'p-treenode-collapsed\':!node.expanded}">\n                            <div class="p-treenode-content" tabindex="0" [ngClass]="{\'p-treenode-selectable\':tree.selectionMode,\'p-highlight\':isSelected()}" (click)="onNodeClick($event)" (contextmenu)="onNodeRightClick($event)"\n                                (touchend)="onNodeTouchEnd()" (keydown)="onNodeKeydown($event)">\n                                <span class="p-tree-toggler pi pi-fw" [ngClass]="{\'pi-plus\':!node.expanded,\'pi-minus\':node.expanded}" *ngIf="!isLeaf()" (click)="toggle($event)"></span>\n                                <span [class]="getIcon()" *ngIf="node.icon||node.expandedIcon||node.collapsedIcon"></span>\n                                <span class="p-treenode-label">\n                                    <span *ngIf="!tree.getTemplateForNode(node)">{{node.label}}</span>\n                                    <span *ngIf="tree.getTemplateForNode(node)">\n                                        <ng-container *ngTemplateOutlet="tree.getTemplateForNode(node); context: {$implicit: node}"></ng-container>\n                                    </span>\n                                </span>\n                            </div>\n                        </td>\n                        <td class="p-treenode-children-container" *ngIf="node.children && node.expanded" [style.display]="node.expanded ? \'table-cell\' : \'none\'">\n                            <div class="p-treenode-children">\n                                <p-treeNode *ngFor="let childNode of node.children;let firstChild=first;let lastChild=last; trackBy: tree.trackBy" [node]="childNode"\n                                        [firstChild]="firstChild" [lastChild]="lastChild"></p-treeNode>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </ng-template>\n    ',encapsulation:ViewEncapsulation.None}]}],UITreeNode.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>Tree)]}]}]),UITreeNode.propDecorators={rowNode:[{type:Input}],node:[{type:Input}],parentNode:[{type:Input}],root:[{type:Input}],index:[{type:Input}],firstChild:[{type:Input}],lastChild:[{type:Input}],level:[{type:Input}]};class Tree{constructor(e,t){this.el=e,this.dragDropService=t,this.selectionChange=new EventEmitter,this.onNodeSelect=new EventEmitter,this.onNodeUnselect=new EventEmitter,this.onNodeExpand=new EventEmitter,this.onNodeCollapse=new EventEmitter,this.onNodeContextMenuSelect=new EventEmitter,this.onNodeDrop=new EventEmitter,this.layout="vertical",this.metaKeySelection=!0,this.propagateSelectionUp=!0,this.propagateSelectionDown=!0,this.loadingIcon="pi pi-spinner",this.emptyMessage="No records found",this.filterBy="label",this.filterMode="lenient",this.trackBy=((e,t)=>t),this.onFilter=new EventEmitter}ngOnInit(){this.droppableNodes&&(this.dragStartSubscription=this.dragDropService.dragStart$.subscribe(e=>{this.dragNodeTree=e.tree,this.dragNode=e.node,this.dragNodeSubNodes=e.subNodes,this.dragNodeIndex=e.index,this.dragNodeScope=e.scope}),this.dragStopSubscription=this.dragDropService.dragStop$.subscribe(e=>{this.dragNodeTree=null,this.dragNode=null,this.dragNodeSubNodes=null,this.dragNodeIndex=null,this.dragNodeScope=null,this.dragHover=!1}))}ngOnChanges(e){e.value&&this.updateSerializedValue()}get horizontal(){return"horizontal"==this.layout}ngAfterContentInit(){this.templates.length&&(this.templateMap={}),this.templates.forEach(e=>{this.templateMap[e.name]=e.template})}updateSerializedValue(){this.serializedValue=[],this.serializeNodes(null,this.getRootNode(),0,!0)}serializeNodes(e,t,n,o){if(t&&t.length)for(let i of t){i.parent=e;const t={node:i,parent:e,level:n,visible:o&&(!e||e.expanded)};this.serializedValue.push(t),t.visible&&i.expanded&&this.serializeNodes(i,i.children,n+1,t.visible)}}onNodeClick(e,t){let n=e.target;if(!DomHandler.hasClass(n,"p-tree-toggler")&&!DomHandler.hasClass(n,"p-tree-toggler-icon")){if(this.selectionMode){if(!1===t.selectable)return;if(this.hasFilteredNodes()&&!(t=this.getNodeWithKey(t.key,this.value)))return;let n=this.findIndexInSelection(t),o=n>=0;if(this.isCheckboxSelectionMode())o?(this.propagateSelectionDown?this.propagateDown(t,!1):this.selection=this.selection.filter((e,t)=>t!=n),this.propagateSelectionUp&&t.parent&&this.propagateUp(t.parent,!1),this.selectionChange.emit(this.selection),this.onNodeUnselect.emit({originalEvent:e,node:t})):(this.propagateSelectionDown?this.propagateDown(t,!0):this.selection=[...this.selection||[],t],this.propagateSelectionUp&&t.parent&&this.propagateUp(t.parent,!0),this.selectionChange.emit(this.selection),this.onNodeSelect.emit({originalEvent:e,node:t}));else{if(!this.nodeTouched&&this.metaKeySelection){let i=e.metaKey||e.ctrlKey;o&&i?(this.isSingleSelectionMode()?this.selectionChange.emit(null):(this.selection=this.selection.filter((e,t)=>t!=n),this.selectionChange.emit(this.selection)),this.onNodeUnselect.emit({originalEvent:e,node:t})):(this.isSingleSelectionMode()?this.selectionChange.emit(t):this.isMultipleSelectionMode()&&(this.selection=i&&this.selection||[],this.selection=[...this.selection,t],this.selectionChange.emit(this.selection)),this.onNodeSelect.emit({originalEvent:e,node:t}))}else this.isSingleSelectionMode()?o?(this.selection=null,this.onNodeUnselect.emit({originalEvent:e,node:t})):(this.selection=t,this.onNodeSelect.emit({originalEvent:e,node:t})):o?(this.selection=this.selection.filter((e,t)=>t!=n),this.onNodeUnselect.emit({originalEvent:e,node:t})):(this.selection=[...this.selection||[],t],this.onNodeSelect.emit({originalEvent:e,node:t})),this.selectionChange.emit(this.selection)}}this.nodeTouched=!1}}onNodeTouchEnd(){this.nodeTouched=!0}onNodeRightClick(e,t){if(this.contextMenu){let n=e.target;if(n.className&&0===n.className.indexOf("p-tree-toggler"))return;this.findIndexInSelection(t)>=0||(this.isSingleSelectionMode()?this.selectionChange.emit(t):this.selectionChange.emit([t])),this.contextMenu.show(e),this.onNodeContextMenuSelect.emit({originalEvent:e,node:t})}}findIndexInSelection(e){let t=-1;if(this.selectionMode&&this.selection)if(this.isSingleSelectionMode()){t=this.selection.key&&this.selection.key===e.key||this.selection==e?0:-1}else for(let n=0;n<this.selection.length;n++){let o=this.selection[n];if(o.key&&o.key===e.key||o==e){t=n;break}}return t}syncNodeOption(e,t,n,o){const i=this.hasFilteredNodes()?this.getNodeWithKey(e.key,t):null;i&&(i[n]=o||e[n])}hasFilteredNodes(){return this.filter&&this.filteredNodes&&this.filteredNodes.length}getNodeWithKey(e,t){for(let n of t){if(n.key===e)return n;if(n.children){let t=this.getNodeWithKey(e,n.children);if(t)return t}}}propagateUp(e,t){if(e.children&&e.children.length){let n=0,o=!1;for(let t of e.children)this.isSelected(t)?n++:t.partialSelected&&(o=!0);if(t&&n==e.children.length)this.selection=[...this.selection||[],e],e.partialSelected=!1;else{if(!t){let t=this.findIndexInSelection(e);t>=0&&(this.selection=this.selection.filter((e,n)=>n!=t))}o||n>0&&n!=e.children.length?e.partialSelected=!0:e.partialSelected=!1}this.syncNodeOption(e,this.filteredNodes,"partialSelected")}let n=e.parent;n&&this.propagateUp(n,t)}propagateDown(e,t){let n=this.findIndexInSelection(e);if(t&&-1==n?this.selection=[...this.selection||[],e]:!t&&n>-1&&(this.selection=this.selection.filter((e,t)=>t!=n)),e.partialSelected=!1,this.syncNodeOption(e,this.filteredNodes,"partialSelected"),e.children&&e.children.length)for(let n of e.children)this.propagateDown(n,t)}isSelected(e){return-1!=this.findIndexInSelection(e)}isSingleSelectionMode(){return this.selectionMode&&"single"==this.selectionMode}isMultipleSelectionMode(){return this.selectionMode&&"multiple"==this.selectionMode}isCheckboxSelectionMode(){return this.selectionMode&&"checkbox"==this.selectionMode}isNodeLeaf(e){return 0!=e.leaf&&!(e.children&&e.children.length)}getRootNode(){return this.filteredNodes?this.filteredNodes:this.value}getTemplateForNode(e){return this.templateMap?e.type?this.templateMap[e.type]:this.templateMap.default:null}onDragOver(e){!this.droppableNodes||this.value&&0!==this.value.length||(e.dataTransfer.dropEffect="move",e.preventDefault())}onDrop(e){if(this.droppableNodes&&(!this.value||0===this.value.length)){e.preventDefault();let t=this.dragNode;if(this.allowDrop(t,null,this.dragNodeScope)){let e=this.dragNodeIndex;this.dragNodeSubNodes.splice(e,1),this.value=this.value||[],this.value.push(t),this.dragDropService.stopDrag({node:t})}}}onDragEnter(e){this.droppableNodes&&this.allowDrop(this.dragNode,null,this.dragNodeScope)&&(this.dragHover=!0)}onDragLeave(e){if(this.droppableNodes){let t=e.currentTarget.getBoundingClientRect();(e.x>t.left+t.width||e.x<t.left||e.y>t.top+t.height||e.y<t.top)&&(this.dragHover=!1)}}allowDrop(e,t,n){if(e){if(this.isValidDragScope(n)){let n=!0;if(t)if(e===t)n=!1;else{let o=t.parent;for(;null!=o;){if(o===e){n=!1;break}o=o.parent}}return n}return!1}return!1}isValidDragScope(e){let t=this.droppableScope;if(t){if("string"==typeof t){if("string"==typeof e)return t===e;if(e instanceof Array)return-1!=e.indexOf(t)}else if(t instanceof Array){if("string"==typeof e)return-1!=t.indexOf(e);if(e instanceof Array)for(let n of t)for(let t of e)if(n===t)return!0}return!1}return!0}_filter(e){let t=e.target.value;if(""===t)this.filteredNodes=null;else{this.filteredNodes=[];const e=this.filterBy.split(","),n=ObjectUtils.removeAccents(t).toLocaleLowerCase(this.filterLocale),o="strict"===this.filterMode;for(let t of this.value){let i=Object.assign({},t),r={searchFields:e,filterText:n,isStrictMode:o};(o&&(this.findFilteredNodes(i,r)||this.isFilterMatched(i,r))||!o&&(this.isFilterMatched(i,r)||this.findFilteredNodes(i,r)))&&this.filteredNodes.push(i)}}this.updateSerializedValue(),this.onFilter.emit({filter:t,filteredValue:this.filteredNodes})}findFilteredNodes(e,t){if(e){let n=!1;if(e.children){let o=[...e.children];e.children=[];for(let i of o){let o=Object.assign({},i);this.isFilterMatched(o,t)&&(n=!0,e.children.push(o))}}if(n)return e.expanded=!0,!0}}isFilterMatched(e,{searchFields:t,filterText:n,isStrictMode:o}){let i=!1;for(let o of t){ObjectUtils.removeAccents(String(ObjectUtils.resolveFieldData(e,o))).toLocaleLowerCase(this.filterLocale).indexOf(n)>-1&&(i=!0)}return(!i||o&&!this.isNodeLeaf(e))&&(i=this.findFilteredNodes(e,{searchFields:t,filterText:n,isStrictMode:o})||i),i}getBlockableElement(){return this.el.nativeElement.children[0]}ngOnDestroy(){this.dragStartSubscription&&this.dragStartSubscription.unsubscribe(),this.dragStopSubscription&&this.dragStopSubscription.unsubscribe()}}Tree.ctorParameters=(()=>[{type:ElementRef},{type:TreeDragDropService,decorators:[{type:Optional}]}]),Tree.decorators=[{type:Component,args:[{selector:"p-tree",template:'\n        <div [ngClass]="{\'p-tree p-component\':true,\'p-tree-selectable\':selectionMode,\n                \'p-treenode-dragover\':dragHover,\'p-tree-loading\': loading, \'p-tree-flex-scrollable\': scrollHeight === \'flex\'}" \n            [ngStyle]="style" [class]="styleClass" *ngIf="!horizontal"\n            (drop)="onDrop($event)" (dragover)="onDragOver($event)" (dragenter)="onDragEnter($event)" (dragleave)="onDragLeave($event)">\n            <div class="p-tree-loading-overlay p-component-overlay" *ngIf="loading">\n                <i [class]="\'p-tree-loading-icon pi-spin \' + loadingIcon"></i>\n            </div>\n            <div *ngIf="filter" class="p-tree-filter-container">\n                <input #filter type="text" autocomplete="off" class="p-tree-filter p-inputtext p-component" [attr.placeholder]="filterPlaceholder"\n                    (keydown.enter)="$event.preventDefault()" (input)="_filter($event)">\n                    <span class="p-tree-filter-icon pi pi-search"></span>\n            </div>\n            <ng-container *ngIf="!virtualScroll; else virtualScrollList">\n                <div class="p-tree-wrapper" [style.max-height]="scrollHeight">\n                    <ul class="p-tree-container" *ngIf="getRootNode()" role="tree" [attr.aria-label]="ariaLabel" [attr.aria-labelledby]="ariaLabelledBy">\n                        <p-treeNode *ngFor="let node of getRootNode(); let firstChild=first;let lastChild=last; let index=index; trackBy: trackBy" [node]="node"\n                                    [firstChild]="firstChild" [lastChild]="lastChild" [index]="index" [level]="0"></p-treeNode>\n                    </ul>\n                </div>\n            </ng-container>\n            <ng-template #virtualScrollList>\n                <cdk-virtual-scroll-viewport class="p-tree-wrapper" [style.height]="scrollHeight" [itemSize]="virtualNodeHeight" [minBufferPx]="minBufferPx" [maxBufferPx]="maxBufferPx">\n                    <ul class="p-tree-container" *ngIf="getRootNode()" role="tree" [attr.aria-label]="ariaLabel" [attr.aria-labelledby]="ariaLabelledBy">\n                        <p-treeNode *cdkVirtualFor="let rowNode of serializedValue; let firstChild=first; let lastChild=last; let index=index; trackBy: trackBy"  [level]="rowNode.level"\n                                    [rowNode]="rowNode" [node]="rowNode.node" [firstChild]="firstChild" [lastChild]="lastChild" [index]="index" [style.height.px]="virtualNodeHeight"></p-treeNode>\n                    </ul>\n                </cdk-virtual-scroll-viewport>\n            </ng-template>\n            <div class="p-tree-empty-message" *ngIf="!loading && (value == null || value.length === 0)">{{emptyMessage}}</div>\n        </div>\n        <div [ngClass]="{\'p-tree p-tree-horizontal p-component\':true,\'p-tree-selectable\':selectionMode}"  [ngStyle]="style" [class]="styleClass" *ngIf="horizontal">\n            <div class="p-tree-loading-mask p-component-overlay" *ngIf="loading">\n                <i [class]="\'p-tree-loading-icon pi-spin \' + loadingIcon"></i>\n            </div>\n            <table *ngIf="value&&value[0]">\n                <p-treeNode [node]="value[0]" [root]="true"></p-treeNode>\n            </table>\n            <div class="p-tree-empty-message" *ngIf="!loading && (value == null || value.length === 0)">{{emptyMessage}}</div>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.Default,encapsulation:ViewEncapsulation.None,styles:[".p-tree-container{margin:0;padding:0;list-style-type:none;overflow:auto}.p-treenode-children{margin:0;padding:0;list-style-type:none}.p-tree-wrapper{overflow:auto}.p-treenode-selectable{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.p-tree-toggler{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;overflow:hidden;position:relative}.p-treenode-leaf>.p-treenode-content .p-tree-toggler{visibility:hidden}.p-treenode-content{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.p-tree-filter{width:100%}.p-tree-filter-container{position:relative;display:block;width:100%}.p-tree-filter-icon{position:absolute;top:50%;margin-top:-.5rem}.p-tree-loading{position:relative;min-height:4rem}.p-tree .p-tree-loading-overlay{position:absolute;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;z-index:2}.p-tree-flex-scrollable{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;height:100%;-ms-flex-direction:column;flex-direction:column}.p-tree-flex-scrollable .p-tree-wrapper{-ms-flex:1;flex:1}.p-tree .p-treenode-droppoint{height:4px;list-style-type:none}.p-tree .p-treenode-droppoint-active{border:0}.p-tree-horizontal{width:auto;padding-left:0;padding-right:0;overflow:auto}.p-tree.p-tree-horizontal table,.p-tree.p-tree-horizontal td,.p-tree.p-tree-horizontal tr{border-collapse:collapse;margin:0;padding:0;vertical-align:middle}.p-tree-horizontal .p-treenode-content{font-weight:400;padding:.4em 1em .4em .2em;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.p-tree-horizontal .p-treenode-parent .p-treenode-content{font-weight:400;white-space:nowrap}.p-tree.p-tree-horizontal .p-treenode{background:url(images/line.gif) center center repeat-x;padding:.25rem 2.5rem}.p-tree.p-tree-horizontal .p-treenode.p-treenode-collapsed,.p-tree.p-tree-horizontal .p-treenode.p-treenode-leaf{padding-right:0}.p-tree.p-tree-horizontal .p-treenode-children{padding:0;margin:0}.p-tree.p-tree-horizontal .p-treenode-connector{width:1px}.p-tree.p-tree-horizontal .p-treenode-connector-table{height:100%;width:1px}.p-tree.p-tree-horizontal .p-treenode-connector-line{background:url(images/line.gif) repeat-y;width:1px}.p-tree.p-tree-horizontal table{height:0}"]}]}],Tree.ctorParameters=(()=>[{type:ElementRef},{type:TreeDragDropService,decorators:[{type:Optional}]}]),Tree.propDecorators={value:[{type:Input}],selectionMode:[{type:Input}],selection:[{type:Input}],selectionChange:[{type:Output}],onNodeSelect:[{type:Output}],onNodeUnselect:[{type:Output}],onNodeExpand:[{type:Output}],onNodeCollapse:[{type:Output}],onNodeContextMenuSelect:[{type:Output}],onNodeDrop:[{type:Output}],style:[{type:Input}],styleClass:[{type:Input}],contextMenu:[{type:Input}],layout:[{type:Input}],draggableScope:[{type:Input}],droppableScope:[{type:Input}],draggableNodes:[{type:Input}],droppableNodes:[{type:Input}],metaKeySelection:[{type:Input}],propagateSelectionUp:[{type:Input}],propagateSelectionDown:[{type:Input}],loading:[{type:Input}],loadingIcon:[{type:Input}],emptyMessage:[{type:Input}],ariaLabel:[{type:Input}],ariaLabelledBy:[{type:Input}],validateDrop:[{type:Input}],filter:[{type:Input}],filterBy:[{type:Input}],filterMode:[{type:Input}],filterPlaceholder:[{type:Input}],filterLocale:[{type:Input}],scrollHeight:[{type:Input}],virtualScroll:[{type:Input}],virtualNodeHeight:[{type:Input}],minBufferPx:[{type:Input}],maxBufferPx:[{type:Input}],trackBy:[{type:Input}],onFilter:[{type:Output}],templates:[{type:ContentChildren,args:[PrimeTemplate]}]};class TreeModule{}TreeModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,ScrollingModule,RippleModule],exports:[Tree,SharedModule,ScrollingModule],declarations:[Tree,UITreeNode]}]}];export{Tree,TreeModule,UITreeNode};