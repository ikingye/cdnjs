import{EventEmitter,ElementRef,IterableDiffers,ChangeDetectorRef,NgZone,Component,ChangeDetectionStrategy,ViewEncapsulation,Input,Output,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";var __values=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],a=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&a>=t.length&&(t=void 0),{value:t&&t[a++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},GMap=function(){function t(t,e,n,a){this.el=t,this.cd=n,this.zone=a,this.onMapClick=new EventEmitter,this.onOverlayClick=new EventEmitter,this.onOverlayDblClick=new EventEmitter,this.onOverlayDragStart=new EventEmitter,this.onOverlayDrag=new EventEmitter,this.onOverlayDragEnd=new EventEmitter,this.onMapReady=new EventEmitter,this.onMapDragEnd=new EventEmitter,this.onZoomChanged=new EventEmitter,this.differ=e.find([]).create(null)}return t.prototype.ngAfterViewChecked=function(){!this.map&&this.el.nativeElement.offsetParent&&this.initialize()},t.prototype.initialize=function(){var t,e,n=this;if(this.map=new google.maps.Map(this.el.nativeElement.children[0],this.options),this.onMapReady.emit({map:this.map}),this.overlays)try{for(var a=__values(this.overlays),i=a.next();!i.done;i=a.next()){var o=i.value;o.setMap(this.map),this.bindOverlayEvents(o)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=a.return)&&e.call(a)}finally{if(t)throw t.error}}this.map.addListener("click",function(t){n.zone.run(function(){n.onMapClick.emit(t)})}),this.map.addListener("dragend",function(t){n.zone.run(function(){n.onMapDragEnd.emit(t)})}),this.map.addListener("zoom_changed",function(t){n.zone.run(function(){n.onZoomChanged.emit(t)})})},t.prototype.bindOverlayEvents=function(t){var e=this;t.addListener("click",function(n){e.zone.run(function(){e.onOverlayClick.emit({originalEvent:n,overlay:t,map:e.map})})}),t.addListener("dblclick",function(n){e.zone.run(function(){e.onOverlayDblClick.emit({originalEvent:n,overlay:t,map:e.map})})}),t.getDraggable()&&this.bindDragEvents(t)},t.prototype.ngDoCheck=function(){var t=this,e=this.differ.diff(this.overlays);e&&this.map&&(e.forEachRemovedItem(function(t){google.maps.event.clearInstanceListeners(t.item),t.item.setMap(null)}),e.forEachAddedItem(function(e){e.item.setMap(t.map),e.item.addListener("click",function(n){t.zone.run(function(){t.onOverlayClick.emit({originalEvent:n,overlay:e.item,map:t.map})})}),e.item.getDraggable()&&t.bindDragEvents(e.item)}))},t.prototype.bindDragEvents=function(t){var e=this;t.addListener("dragstart",function(n){e.zone.run(function(){e.onOverlayDragStart.emit({originalEvent:n,overlay:t,map:e.map})})}),t.addListener("drag",function(n){e.zone.run(function(){e.onOverlayDrag.emit({originalEvent:n,overlay:t,map:e.map})})}),t.addListener("dragend",function(n){e.zone.run(function(){e.onOverlayDragEnd.emit({originalEvent:n,overlay:t,map:e.map})})})},t.prototype.getMap=function(){return this.map},t.ctorParameters=function(){return[{type:ElementRef},{type:IterableDiffers},{type:ChangeDetectorRef},{type:NgZone}]},t.decorators=[{type:Component,args:[{selector:"p-gmap",template:'<div [ngStyle]="style" [class]="styleClass"></div>',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None}]}],t.ctorParameters=function(){return[{type:ElementRef},{type:IterableDiffers},{type:ChangeDetectorRef},{type:NgZone}]},t.propDecorators={style:[{type:Input}],styleClass:[{type:Input}],options:[{type:Input}],overlays:[{type:Input}],onMapClick:[{type:Output}],onOverlayClick:[{type:Output}],onOverlayDblClick:[{type:Output}],onOverlayDragStart:[{type:Output}],onOverlayDrag:[{type:Output}],onOverlayDragEnd:[{type:Output}],onMapReady:[{type:Output}],onMapDragEnd:[{type:Output}],onZoomChanged:[{type:Output}]},t}(),GMapModule=function(){function t(){}return t.decorators=[{type:NgModule,args:[{imports:[CommonModule],exports:[GMap],declarations:[GMap]}]}],t}();export{GMap,GMapModule};